
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  0800d6c0  0800d6c0  0001d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab8  0800dab8  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800dab8  0800dab8  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dab8  0800dab8  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dabc  0800dabc  0001dabc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800dac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c84  20000260  0800dd20  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002ee4  0800dd20  00022ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   000208b4  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ea9  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001990  00000000  00000000  00045a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e6  00000000  00000000  000473c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d450  00000000  00000000  000487a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021f1c  00000000  00000000  00065bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e181  00000000  00000000  00087b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000718c  00000000  00000000  00125c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d6a8 	.word	0x0800d6a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800d6a8 	.word	0x0800d6a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;


uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <BluetoothInit+0x54>)
 8000fc8:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <BluetoothInit+0x58>)
 8000fd0:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2278      	movs	r2, #120	; 0x78
 8000fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//Return OK
	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000294 	.word	0x20000294
 8001000:	20000298 	.word	0x20000298

08001004 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff f89c 	bl	8000150 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	3301      	adds	r3, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f00b fe15 	bl	800cc4c <malloc>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f00b ff8f 	bl	800cf54 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	7e3a      	ldrb	r2, [r7, #24]
 8001040:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001048:	461a      	mov	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3222      	adds	r2, #34	; 0x22
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e06b      	b.n	8001156 <BluetoothPutFila+0xe6>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001084:	7bf9      	ldrb	r1, [r7, #15]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3122      	adds	r1, #34	; 0x22
 800108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d15d      	bne.n	8001150 <BluetoothPutFila+0xe0>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b02      	subs	r3, #2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f000 fab7 	bl	800161c <CRC16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b4:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010c0:	3b02      	subs	r3, #2
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	440b      	add	r3, r1
 80010c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d10b      	bne.n	80010e6 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <BluetoothPutFila+0xf8>)
 80010d0:	785a      	ldrb	r2, [r3, #1]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010d8:	3b01      	subs	r3, #1
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	440b      	add	r3, r1
 80010de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d002      	beq.n	80010ec <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 80010e6:	f000 fcc7 	bl	8001a78 <BluetoothErroCRC>
				return; //ENCERRA
 80010ea:	e03a      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3222      	adds	r2, #34	; 0x22
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10e      	bne.n	800111a <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3222      	adds	r2, #34	; 0x22
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f04f 32ff 	mov.w	r2, #4294967295
 8001112:	4619      	mov	r1, r3
 8001114:	f008 fbd0 	bl	80098b8 <osMessagePut>
				return;
 8001118:	e023      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoCritico ){
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3222      	adds	r2, #34	; 0x22
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d112      	bne.n	8001150 <BluetoothPutFila+0xe0>
				if(ble->SistemaEmErro){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <BluetoothPutFila+0xe0>
					osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3222      	adds	r2, #34	; 0x22
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	4619      	mov	r1, r3
 800114c:	f008 fbb4 	bl	80098b8 <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3301      	adds	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	429a      	cmp	r2, r3
 8001160:	d38d      	bcc.n	800107e <BluetoothPutFila+0xe>
					//TX_COMANDO_NEGADO
				}
			}
		}
	}
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000029c 	.word	0x2000029c

0800116c <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d02a      	beq.n	80011da <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0202 	orr.w	r2, r2, #2
 80011d2:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f809 	bl	80011ec <BLEDMA_IrqHandler>
	}
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000294 	.word	0x20000294
 80011e8:	20000298 	.word	0x20000298

080011ec <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 80011f4:	4b9c      	ldr	r3, [pc, #624]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 8168 	bne.w	80014d6 <BLEDMA_IrqHandler+0x2ea>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001206:	4b98      	ldr	r3, [pc, #608]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a97      	ldr	r2, [pc, #604]	; (800146c <BLEDMA_IrqHandler+0x280>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02e      	beq.n	8001270 <BLEDMA_IrqHandler+0x84>
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a95      	ldr	r2, [pc, #596]	; (8001470 <BLEDMA_IrqHandler+0x284>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d026      	beq.n	800126c <BLEDMA_IrqHandler+0x80>
 800121e:	4b92      	ldr	r3, [pc, #584]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a93      	ldr	r2, [pc, #588]	; (8001474 <BLEDMA_IrqHandler+0x288>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01d      	beq.n	8001266 <BLEDMA_IrqHandler+0x7a>
 800122a:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <BLEDMA_IrqHandler+0x28c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d014      	beq.n	8001260 <BLEDMA_IrqHandler+0x74>
 8001236:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a8f      	ldr	r2, [pc, #572]	; (800147c <BLEDMA_IrqHandler+0x290>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00b      	beq.n	800125a <BLEDMA_IrqHandler+0x6e>
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8d      	ldr	r2, [pc, #564]	; (8001480 <BLEDMA_IrqHandler+0x294>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <BLEDMA_IrqHandler+0x68>
 800124e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001252:	e00e      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001258:	e00b      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800125a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125e:	e008      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e005      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	e002      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800126c:	2320      	movs	r3, #32
 800126e:	e000      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001270:	2302      	movs	r3, #2
 8001272:	4a84      	ldr	r2, [pc, #528]	; (8001484 <BLEDMA_IrqHandler+0x298>)
 8001274:	6053      	str	r3, [r2, #4]

		//zera contador de inatividade
		ble->msIdle=0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 800127e:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	461a      	mov	r2, r3
 80012a0:	4979      	ldr	r1, [pc, #484]	; (8001488 <BLEDMA_IrqHandler+0x29c>)
 80012a2:	f00b fd87 	bl	800cdb4 <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <BLEDMA_IrqHandler+0xdc>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f2c0 80d2 	blt.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012be:	3b01      	subs	r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f200 80ce 	bhi.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012c6:	e0a1      	b.n	800140c <BLEDMA_IrqHandler+0x220>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			ble->ss = NULL;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	335c      	adds	r3, #92	; 0x5c
 80012dc:	496b      	ldr	r1, [pc, #428]	; (800148c <BLEDMA_IrqHandler+0x2a0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f00b fd90 	bl	800ce04 <strstr>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <BLEDMA_IrqHandler+0x114>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d007      	beq.n	8001310 <BLEDMA_IrqHandler+0x124>
 8001300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001304:	4862      	ldr	r0, [pc, #392]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001306:	f004 fc19 	bl	8005b3c <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <BLEDMA_IrqHandler+0x134>
				ble->MaquinaConexao = RX_CONECTADO;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	335c      	adds	r3, #92	; 0x5c
 800132c:	4959      	ldr	r1, [pc, #356]	; (8001494 <BLEDMA_IrqHandler+0x2a8>)
 800132e:	4618      	mov	r0, r3
 8001330:	f00b fd68 	bl	800ce04 <strstr>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b0 	beq.w	80014a8 <BLEDMA_IrqHandler+0x2bc>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	335c      	adds	r3, #92	; 0x5c
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e010      	b.n	8001380 <BLEDMA_IrqHandler+0x194>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	3308      	adds	r3, #8
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b0b      	cmp	r3, #11
 8001384:	ddeb      	ble.n	800135e <BLEDMA_IrqHandler+0x172>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	061a      	lsls	r2, r3, #24
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	441a      	add	r2, r3
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4413      	add	r3, r2
 800139c:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800139e:	78d2      	ldrb	r2, [r2, #3]
 80013a0:	4413      	add	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013a6:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	061a      	lsls	r2, r3, #24
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	441a      	add	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b8:	799b      	ldrb	r3, [r3, #6]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4413      	add	r3, r2
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013c0:	79d2      	ldrb	r2, [r2, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013c8:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013cc:	7a1b      	ldrb	r3, [r3, #8]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013d2:	7a5b      	ldrb	r3, [r3, #9]
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	441a      	add	r2, r3
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013da:	7a9b      	ldrb	r3, [r3, #10]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013e2:	7ad2      	ldrb	r2, [r2, #11]
 80013e4:	4413      	add	r3, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013ea:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 80013ec:	210c      	movs	r1, #12
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013f0:	f000 f914 	bl	800161c <CRC16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <BLEDMA_IrqHandler+0x2b4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	21bf      	movs	r1, #191	; 0xbf
 8001404:	4618      	mov	r0, r3
 8001406:	f008 f971 	bl	80096ec <osSignalSet>
			}
			break;
 800140a:	e04d      	b.n	80014a8 <BLEDMA_IrqHandler+0x2bc>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	335c      	adds	r3, #92	; 0x5c
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <BLEDMA_IrqHandler+0x2b8>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00b fcf2 	bl	800ce04 <strstr>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <BLEDMA_IrqHandler+0x256>
 8001432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001438:	f004 fb80 	bl	8005b3c <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <BLEDMA_IrqHandler+0x26e>
				ble->StatusSenha 		= false;//chave de validacao
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}


			BluetoothPutFila(ble);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fe08 	bl	8001070 <BluetoothPutFila>

			break;
 8001460:	e023      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>

		default:
			break;
 8001462:	bf00      	nop
 8001464:	e021      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>
 8001466:	bf00      	nop
 8001468:	20000298 	.word	0x20000298
 800146c:	40020008 	.word	0x40020008
 8001470:	4002001c 	.word	0x4002001c
 8001474:	40020030 	.word	0x40020030
 8001478:	40020044 	.word	0x40020044
 800147c:	40020058 	.word	0x40020058
 8001480:	4002006c 	.word	0x4002006c
 8001484:	40020000 	.word	0x40020000
 8001488:	0800d6c0 	.word	0x0800d6c0
 800148c:	0800d6c4 	.word	0x0800d6c4
 8001490:	40010c00 	.word	0x40010c00
 8001494:	0800d6cc 	.word	0x0800d6cc
 8001498:	2000027c 	.word	0x2000027c
 800149c:	20000288 	.word	0x20000288
 80014a0:	20000e50 	.word	0x20000e50
 80014a4:	0800d6d8 	.word	0x0800d6d8
			break;
 80014a8:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
	}
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000298 	.word	0x20000298

080014e4 <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 80014e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
 80014f0:	466b      	mov	r3, sp
 80014f2:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	1cd9      	adds	r1, r3, #3
 80014f8:	1e4b      	subs	r3, r1, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	460a      	mov	r2, r1
 80014fe:	2300      	movs	r3, #0
 8001500:	4690      	mov	r8, r2
 8001502:	4699      	mov	r9, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001510:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001514:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001518:	460a      	mov	r2, r1
 800151a:	2300      	movs	r3, #0
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	00eb      	lsls	r3, r5, #3
 800152a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800152e:	00e2      	lsls	r2, r4, #3
 8001530:	460b      	mov	r3, r1
 8001532:	3307      	adds	r3, #7
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	ebad 0d03 	sub.w	sp, sp, r3
 800153c:	466b      	mov	r3, sp
 800153e:	3300      	adds	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00b      	b.n	8001560 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	7819      	ldrb	r1, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4413      	add	r3, r2
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	ddef      	ble.n	8001548 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f852 	bl	800161c <CRC16>
 8001578:	4603      	mov	r3, r0
 800157a:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29a      	uxth	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	897a      	ldrh	r2, [r7, #10]
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3303      	adds	r3, #3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f806 	bl	80015b4 <Envia_bytes_UART>
 80015a8:	46b5      	mov	sp, r6
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015b4 <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Envia_bytes_UART+0x24>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	2332      	movs	r3, #50	; 0x32
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f006 fe02 	bl	80081d4 <HAL_UART_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000294 	.word	0x20000294

080015dc <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <Envia_texto_UART+0x3c>)
 80015ea:	681c      	ldr	r4, [r3, #0]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe fdaf 	bl	8000150 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4620      	mov	r0, r4
 80015fc:	f006 fe6d 	bl	80082da <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <Envia_texto_UART+0x32>
		osDelay(delay);
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	4618      	mov	r0, r3
 800160a:	f007 ffe3 	bl	80095d4 <osDelay>
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000294 	.word	0x20000294

0800161c <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001628:	23ff      	movs	r3, #255	; 0xff
 800162a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001630:	e013      	b.n	800165a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4053      	eors	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <CRC16+0x64>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4053      	eors	r3, r2
 800164e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <CRC16+0x68>)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	807a      	strh	r2, [r7, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e6      	bne.n	8001632 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29b      	uxth	r3, r3
}//---END---//
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	20000100 	.word	0x20000100

08001688 <iniciaBleHm10>:
	__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
	HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE

}//---END---//

void iniciaBleHm10(Bluetooth* ble){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001694:	e1de      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		switch (sequenciaBLE) {
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b05      	cmp	r3, #5
 800169a:	f200 81da 	bhi.w	8001a52 <iniciaBleHm10+0x3ca>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <iniciaBleHm10+0x1c>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	0800174b 	.word	0x0800174b
 80016ac:	080017df 	.word	0x080017df
 80016b0:	080019f9 	.word	0x080019f9
 80016b4:	08001a15 	.word	0x08001a15
 80016b8:	08001a4f 	.word	0x08001a4f
		case inicio:
			HAL_Delay(50);
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f003 f807 	bl	80046d0 <HAL_Delay>
			SETUP_UART(115200)
 80016c2:	4bb8      	ldr	r3, [pc, #736]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fe62 	bl	8008390 <HAL_UART_Abort_IT>
 80016cc:	4bb5      	ldr	r3, [pc, #724]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f006 fd4d 	bl	8008170 <HAL_UART_DeInit>
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f002 fffa 	bl	80046d0 <HAL_Delay>
 80016dc:	4bb1      	ldr	r3, [pc, #708]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 fcf0 	bl	80080d0 <HAL_UART_Init>
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f002 ffed 	bl	80046d0 <HAL_Delay>
			HAL_Delay(50);
 80016f6:	2032      	movs	r0, #50	; 0x32
 80016f8:	f002 ffea 	bl	80046d0 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 80016fc:	2132      	movs	r1, #50	; 0x32
 80016fe:	48aa      	ldr	r0, [pc, #680]	; (80019a8 <iniciaBleHm10+0x320>)
 8001700:	f7ff ff6c 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 8001704:	2132      	movs	r1, #50	; 0x32
 8001706:	48a8      	ldr	r0, [pc, #672]	; (80019a8 <iniciaBleHm10+0x320>)
 8001708:	f7ff ff68 	bl	80015dc <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 800170c:	4ba5      	ldr	r3, [pc, #660]	; (80019a4 <iniciaBleHm10+0x31c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4ba3      	ldr	r3, [pc, #652]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <iniciaBleHm10+0x324>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <iniciaBleHm10+0x324>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0202 	orr.w	r2, r2, #2
 8001732:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001734:	4b9b      	ldr	r3, [pc, #620]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3330      	adds	r3, #48	; 0x30
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	4619      	mov	r1, r3
 8001740:	f006 fe00 	bl	8008344 <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]

			continue;
 8001748:	e184      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 800174a:	2305      	movs	r3, #5
 800174c:	73bb      	strb	r3, [r7, #14]
			const uint32_t delay_between_attempts_ms = 1000;
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	60bb      	str	r3, [r7, #8]

			while (tryingName < max_attempts) {
 8001754:	bf00      	nop
 8001756:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <iniciaBleHm10+0x328>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	7bba      	ldrb	r2, [r7, #14]
 800175c:	429a      	cmp	r2, r3
 800175e:	d935      	bls.n	80017cc <iniciaBleHm10+0x144>
				Envia_texto_UART("AT+NAME?", 100);
 8001760:	2164      	movs	r1, #100	; 0x64
 8001762:	4894      	ldr	r0, [pc, #592]	; (80019b4 <iniciaBleHm10+0x32c>)
 8001764:	f7ff ff3a 	bl	80015dc <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f002 ffb1 	bl	80046d0 <HAL_Delay>
				ble->ss = NULL;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	335c      	adds	r3, #92	; 0x5c
 800177a:	498f      	ldr	r1, [pc, #572]	; (80019b8 <iniciaBleHm10+0x330>)
 800177c:	4618      	mov	r0, r3
 800177e:	f00b fb41 	bl	800ce04 <strstr>
 8001782:	4602      	mov	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d014      	beq.n	80017be <iniciaBleHm10+0x136>
					ble->ss = strstr(ble->StringRecebida, "EasyPizza");
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	335c      	adds	r3, #92	; 0x5c
 8001798:	4988      	ldr	r1, [pc, #544]	; (80019bc <iniciaBleHm10+0x334>)
 800179a:	4618      	mov	r0, r3
 800179c:	f00b fb32 	bl	800ce04 <strstr>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <iniciaBleHm10+0x130>
									sequenciaBLE = capturaAddr;
 80017b2:	2303      	movs	r3, #3
 80017b4:	73fb      	strb	r3, [r7, #15]
//						sequenciaBLE = final;
						break;
 80017b6:	e009      	b.n	80017cc <iniciaBleHm10+0x144>
					} else {
						sequenciaBLE = redefineBle;
 80017b8:	2302      	movs	r3, #2
 80017ba:	73fb      	strb	r3, [r7, #15]
						break;
 80017bc:	e006      	b.n	80017cc <iniciaBleHm10+0x144>
					}
				} else {
					tryingName++;
 80017be:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <iniciaBleHm10+0x328>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <iniciaBleHm10+0x328>)
 80017c8:	701a      	strb	r2, [r3, #0]
					break;
 80017ca:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 80017cc:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <iniciaBleHm10+0x328>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	7bba      	ldrb	r2, [r7, #14]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	f200 813e 	bhi.w	8001a54 <iniciaBleHm10+0x3cc>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 80017d8:	2302      	movs	r3, #2
 80017da:	73fb      	strb	r3, [r7, #15]
			break;
 80017dc:	e13a      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	4876      	ldr	r0, [pc, #472]	; (80019c0 <iniciaBleHm10+0x338>)
 80017e6:	f004 f9c0 	bl	8005b6a <HAL_GPIO_WritePin>
 80017ea:	20c8      	movs	r0, #200	; 0xc8
 80017ec:	f002 ff70 	bl	80046d0 <HAL_Delay>
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f6:	4872      	ldr	r0, [pc, #456]	; (80019c0 <iniciaBleHm10+0x338>)
 80017f8:	f004 f9b7 	bl	8005b6a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f002 ff67 	bl	80046d0 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 8001802:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fdc2 	bl	8008390 <HAL_UART_Abort_IT>
 800180c:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <iniciaBleHm10+0x31c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f006 fcad 	bl	8008170 <HAL_UART_DeInit>
 8001816:	2032      	movs	r0, #50	; 0x32
 8001818:	f002 ff5a 	bl	80046d0 <HAL_Delay>
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <iniciaBleHm10+0x31c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f006 fc50 	bl	80080d0 <HAL_UART_Init>
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f002 ff4d 	bl	80046d0 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 8001836:	2164      	movs	r1, #100	; 0x64
 8001838:	485b      	ldr	r0, [pc, #364]	; (80019a8 <iniciaBleHm10+0x320>)
 800183a:	f7ff fecf 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800183e:	2164      	movs	r1, #100	; 0x64
 8001840:	4859      	ldr	r0, [pc, #356]	; (80019a8 <iniciaBleHm10+0x320>)
 8001842:	f7ff fecb 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800184a:	485e      	ldr	r0, [pc, #376]	; (80019c4 <iniciaBleHm10+0x33c>)
 800184c:	f7ff fec6 	bl	80015dc <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 8001850:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f006 fd9b 	bl	8008390 <HAL_UART_Abort_IT>
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <iniciaBleHm10+0x31c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f006 fc86 	bl	8008170 <HAL_UART_DeInit>
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f002 ff33 	bl	80046d0 <HAL_Delay>
 800186a:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <iniciaBleHm10+0x31c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fc29 	bl	80080d0 <HAL_UART_Init>
 800187e:	2032      	movs	r0, #50	; 0x32
 8001880:	f002 ff26 	bl	80046d0 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001888:	484e      	ldr	r0, [pc, #312]	; (80019c4 <iniciaBleHm10+0x33c>)
 800188a:	f7ff fea7 	bl	80015dc <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 800188e:	2164      	movs	r1, #100	; 0x64
 8001890:	4845      	ldr	r0, [pc, #276]	; (80019a8 <iniciaBleHm10+0x320>)
 8001892:	f7ff fea3 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	4843      	ldr	r0, [pc, #268]	; (80019a8 <iniciaBleHm10+0x320>)
 800189a:	f7ff fe9f 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 800189e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018a2:	4849      	ldr	r0, [pc, #292]	; (80019c8 <iniciaBleHm10+0x340>)
 80018a4:	f7ff fe9a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 80018a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018ac:	4847      	ldr	r0, [pc, #284]	; (80019cc <iniciaBleHm10+0x344>)
 80018ae:	f7ff fe95 	bl	80015dc <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f006 fd6a 	bl	8008390 <HAL_UART_Abort_IT>
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f006 fc55 	bl	8008170 <HAL_UART_DeInit>
 80018c6:	2032      	movs	r0, #50	; 0x32
 80018c8:	f002 ff02 	bl	80046d0 <HAL_Delay>
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f006 fbf8 	bl	80080d0 <HAL_UART_Init>
 80018e0:	2032      	movs	r0, #50	; 0x32
 80018e2:	f002 fef5 	bl	80046d0 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ec:	4834      	ldr	r0, [pc, #208]	; (80019c0 <iniciaBleHm10+0x338>)
 80018ee:	f004 f93c 	bl	8005b6a <HAL_GPIO_WritePin>
 80018f2:	20c8      	movs	r0, #200	; 0xc8
 80018f4:	f002 feec 	bl	80046d0 <HAL_Delay>
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	4830      	ldr	r0, [pc, #192]	; (80019c0 <iniciaBleHm10+0x338>)
 8001900:	f004 f933 	bl	8005b6a <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 8001904:	2164      	movs	r1, #100	; 0x64
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <iniciaBleHm10+0x320>)
 8001908:	f7ff fe68 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800190c:	2164      	movs	r1, #100	; 0x64
 800190e:	4826      	ldr	r0, [pc, #152]	; (80019a8 <iniciaBleHm10+0x320>)
 8001910:	f7ff fe64 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001914:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001918:	482d      	ldr	r0, [pc, #180]	; (80019d0 <iniciaBleHm10+0x348>)
 800191a:	f7ff fe5f 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 800191e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001922:	482c      	ldr	r0, [pc, #176]	; (80019d4 <iniciaBleHm10+0x34c>)
 8001924:	f7ff fe5a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001928:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800192c:	482a      	ldr	r0, [pc, #168]	; (80019d8 <iniciaBleHm10+0x350>)
 800192e:	f7ff fe55 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001932:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001936:	4829      	ldr	r0, [pc, #164]	; (80019dc <iniciaBleHm10+0x354>)
 8001938:	f7ff fe50 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 800193c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001940:	4827      	ldr	r0, [pc, #156]	; (80019e0 <iniciaBleHm10+0x358>)
 8001942:	f7ff fe4b 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001946:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <iniciaBleHm10+0x35c>)
 800194c:	f7ff fe46 	bl	80015dc <Envia_texto_UART>

			Envia_texto_UART("AT+NAMEEasyPizza",400);		//NOME
 8001950:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001954:	4824      	ldr	r0, [pc, #144]	; (80019e8 <iniciaBleHm10+0x360>)
 8001956:	f7ff fe41 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 800195a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800195e:	4823      	ldr	r0, [pc, #140]	; (80019ec <iniciaBleHm10+0x364>)
 8001960:	f7ff fe3c 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001964:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001968:	481e      	ldr	r0, [pc, #120]	; (80019e4 <iniciaBleHm10+0x35c>)
 800196a:	f7ff fe37 	bl	80015dc <Envia_texto_UART>
						sequenciaBLE = capturaAddr;
 800196e:	2303      	movs	r3, #3
 8001970:	73fb      	strb	r3, [r7, #15]
//			sequenciaBLE = final;
			break;
 8001972:	e06f      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 8001974:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001978:	481d      	ldr	r0, [pc, #116]	; (80019f0 <iniciaBleHm10+0x368>)
 800197a:	f7ff fe2f 	bl	80015dc <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f002 fea6 	bl	80046d0 <HAL_Delay>

				if (ble->chave != 0){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <iniciaBleHm10+0x30c>
					sequenciaBLE = final;
 800198e:	2304      	movs	r3, #4
 8001990:	73fb      	strb	r3, [r7, #15]
					break;
 8001992:	e037      	b.n	8001a04 <iniciaBleHm10+0x37c>
				} else {
					tryingAddr++;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <iniciaBleHm10+0x36c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <iniciaBleHm10+0x36c>)
 800199e:	701a      	strb	r2, [r3, #0]
					break;
 80019a0:	e030      	b.n	8001a04 <iniciaBleHm10+0x37c>
 80019a2:	bf00      	nop
 80019a4:	20000294 	.word	0x20000294
 80019a8:	0800d6e0 	.word	0x0800d6e0
 80019ac:	20000298 	.word	0x20000298
 80019b0:	2000029e 	.word	0x2000029e
 80019b4:	0800d6e4 	.word	0x0800d6e4
 80019b8:	0800d6f0 	.word	0x0800d6f0
 80019bc:	0800d790 	.word	0x0800d790
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	0800d704 	.word	0x0800d704
 80019c8:	0800d710 	.word	0x0800d710
 80019cc:	0800d71c 	.word	0x0800d71c
 80019d0:	0800d728 	.word	0x0800d728
 80019d4:	0800d734 	.word	0x0800d734
 80019d8:	0800d740 	.word	0x0800d740
 80019dc:	0800d74c 	.word	0x0800d74c
 80019e0:	0800d758 	.word	0x0800d758
 80019e4:	0800d764 	.word	0x0800d764
 80019e8:	0800d79c 	.word	0x0800d79c
 80019ec:	0800d784 	.word	0x0800d784
 80019f0:	0800d7b0 	.word	0x0800d7b0
 80019f4:	2000029f 	.word	0x2000029f
			while (tryingAddr < max_attempts) {
 80019f8:	bf00      	nop
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <iniciaBleHm10+0x3e4>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8b7      	bhi.n	8001974 <iniciaBleHm10+0x2ec>
				}
			}

			if(tryingAddr >= max_attempts)
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <iniciaBleHm10+0x3e4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	7bba      	ldrb	r2, [r7, #14]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d822      	bhi.n	8001a54 <iniciaBleHm10+0x3cc>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001a0e:	2305      	movs	r3, #5
 8001a10:	73fb      	strb	r3, [r7, #15]

			break;
 8001a12:	e01f      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <iniciaBleHm10+0x3ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <iniciaBleHm10+0x3ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0202 	orr.w	r2, r2, #2
 8001a3a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3330      	adds	r3, #48	; 0x30
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	4619      	mov	r1, r3
 8001a48:	f006 fc7c 	bl	8008344 <HAL_UART_Receive_DMA>
			return;
 8001a4c:	e00a      	b.n	8001a64 <iniciaBleHm10+0x3dc>
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 8001a4e:	bf00      	nop
			break;
 8001a50:	e000      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		default:
			break;
 8001a52:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	f47f ae1d 	bne.w	8001696 <iniciaBleHm10+0xe>
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	f47f ae19 	bne.w	8001696 <iniciaBleHm10+0xe>
		}
	}
}
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000029f 	.word	0x2000029f
 8001a70:	20000294 	.word	0x20000294
 8001a74:	20000298 	.word	0x20000298

08001a78 <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 8001a7e:	2301      	movs	r3, #1
 8001a80:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 8001a82:	23ee      	movs	r3, #238	; 0xee
 8001a84:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 8001a86:	23ee      	movs	r3, #238	; 0xee
 8001a88:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd90 	bl	80015b4 <Envia_bytes_UART>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <BluetoothDescon>:

void BluetoothDescon(Bluetooth* ble){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	osDelay(30);
 8001aa4:	201e      	movs	r0, #30
 8001aa6:	f007 fd95 	bl	80095d4 <osDelay>
	Envia_texto_UART("AT",50);//DESCONECTA
 8001aaa:	2132      	movs	r1, #50	; 0x32
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <BluetoothDescon+0x4c>)
 8001aae:	f7ff fd95 	bl	80015dc <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <BluetoothDescon+0x50>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60da      	str	r2, [r3, #12]
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <BluetoothDescon+0x50>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	605a      	str	r2, [r3, #4]
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <BluetoothDescon+0x50>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <BluetoothDescon+0x50>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800d6e0 	.word	0x0800d6e0
 8001aec:	20000298 	.word	0x20000298

08001af0 <EepromInit>:

#endif /* SRC_EEPROM_H_ */


uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fb10 	bl	8000150 <strlen>
 8001b30:	4603      	mov	r3, r0
 8001b32:	3301      	adds	r3, #1
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00b f889 	bl	800cc4c <malloc>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f00b fa03 	bl	800cf54 <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	6a3a      	ldr	r2, [r7, #32]
 8001b60:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	7e3a      	ldrb	r2, [r7, #24]
 8001b6c:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	3202      	adds	r2, #2
 8001b7a:	68b9      	ldr	r1, [r7, #8]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <EepromAddVar+0x7e>
		return 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e016      	b.n	8001bc8 <EepromAddVar+0xac>
	switch (tamanho) {
 8001b9a:	7e3b      	ldrb	r3, [r7, #24]
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d00e      	beq.n	8001bbe <EepromAddVar+0xa2>
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	dc10      	bgt.n	8001bc6 <EepromAddVar+0xaa>
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d002      	beq.n	8001bae <EepromAddVar+0x92>
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d004      	beq.n	8001bb6 <EepromAddVar+0x9a>
 8001bac:	e00b      	b.n	8001bc6 <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb2:	61da      	str	r2, [r3, #28]
		break;
 8001bb4:	e007      	b.n	8001bc6 <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bba:	621a      	str	r2, [r3, #32]
		break;
 8001bbc:	e003      	b.n	8001bc6 <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001bc4:	bf00      	nop
	}
	return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af04      	add	r7, sp, #16
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2180      	movs	r1, #128	; 0x80
 8001be0:	4896      	ldr	r0, [pc, #600]	; (8001e3c <EepromSetVar+0x26c>)
 8001be2:	f003 ffc2 	bl	8005b6a <HAL_GPIO_WritePin>
 8001be6:	2005      	movs	r0, #5
 8001be8:	f002 fd72 	bl	80046d0 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	221e      	movs	r2, #30
 8001bf6:	21a2      	movs	r1, #162	; 0xa2
 8001bf8:	f004 fa0e 	bl	8006018 <HAL_I2C_IsDeviceReady>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001c00:	7ffb      	ldrb	r3, [r7, #31]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 810d 	bne.w	8001e22 <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d07e      	beq.n	8001d0c <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	7e1b      	ldrb	r3, [r3, #24]
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d04f      	beq.n	8001cb6 <EepromSetVar+0xe6>
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	f300 8103 	bgt.w	8001e22 <EepromSetVar+0x252>
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d002      	beq.n	8001c26 <EepromSetVar+0x56>
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d022      	beq.n	8001c6a <EepromSetVar+0x9a>
 8001c24:	e0fd      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	23c8      	movs	r3, #200	; 0xc8
 8001c40:	9302      	str	r3, [sp, #8]
 8001c42:	2301      	movs	r3, #1
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	21a2      	movs	r1, #162	; 0xa2
 8001c50:	f004 f8e8 	bl	8005e24 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80d7 	beq.w	8001e0c <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	701a      	strb	r2, [r3, #0]

				break;
 8001c68:	e0db      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	881a      	ldrh	r2, [r3, #0]
 8001c8a:	23c8      	movs	r3, #200	; 0xc8
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2302      	movs	r3, #2
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	f107 0318 	add.w	r3, r7, #24
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2310      	movs	r3, #16
 8001c9a:	21a2      	movs	r1, #162	; 0xa2
 8001c9c:	f004 f8c2 	bl	8005e24 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80b3 	beq.w	8001e10 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	801a      	strh	r2, [r3, #0]
				break;
 8001cb4:	e0b5      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0e1b      	lsrs	r3, r3, #24
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	0c1b      	lsrs	r3, r3, #16
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	23c8      	movs	r3, #200	; 0xc8
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	21a2      	movs	r1, #162	; 0xa2
 8001cf4:	f004 f896 	bl	8005e24 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 8089 	beq.w	8001e14 <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	601a      	str	r2, [r3, #0]
				break;
 8001d0a:	e08a      	b.n	8001e22 <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	7e1b      	ldrb	r3, [r3, #24]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d04b      	beq.n	8001dac <EepromSetVar+0x1dc>
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	f300 8084 	bgt.w	8001e22 <EepromSetVar+0x252>
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d002      	beq.n	8001d24 <EepromSetVar+0x154>
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d01e      	beq.n	8001d60 <EepromSetVar+0x190>
 8001d22:	e07e      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d075      	beq.n	8001e18 <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	881a      	ldrh	r2, [r3, #0]
 8001d48:	23c8      	movs	r3, #200	; 0xc8
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2310      	movs	r3, #16
 8001d58:	21a2      	movs	r1, #162	; 0xa2
 8001d5a:	f004 f863 	bl	8005e24 <HAL_I2C_Mem_Write>

				break;
 8001d5e:	e060      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d059      	beq.n	8001e1c <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	881a      	ldrh	r2, [r3, #0]
 8001d94:	23c8      	movs	r3, #200	; 0xc8
 8001d96:	9302      	str	r3, [sp, #8]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2310      	movs	r3, #16
 8001da4:	21a2      	movs	r1, #162	; 0xa2
 8001da6:	f004 f83d 	bl	8005e24 <HAL_I2C_Mem_Write>
				break;
 8001daa:	e03a      	b.n	8001e22 <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d035      	beq.n	8001e20 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e1b      	lsrs	r3, r3, #24
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	881a      	ldrh	r2, [r3, #0]
 8001df4:	23c8      	movs	r3, #200	; 0xc8
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2304      	movs	r3, #4
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2310      	movs	r3, #16
 8001e04:	21a2      	movs	r1, #162	; 0xa2
 8001e06:	f004 f80d 	bl	8005e24 <HAL_I2C_Mem_Write>
				break;
 8001e0a:	e00a      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e0c:	bf00      	nop
 8001e0e:	e008      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e10:	bf00      	nop
 8001e12:	e006      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e14:	bf00      	nop
 8001e16:	e004      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e18:	bf00      	nop
 8001e1a:	e002      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e1c:	bf00      	nop
 8001e1e:	e000      	b.n	8001e22 <EepromSetVar+0x252>
					break;
 8001e20:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8001e22:	2005      	movs	r0, #5
 8001e24:	f002 fc54 	bl	80046d0 <HAL_Delay>
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2180      	movs	r1, #128	; 0x80
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <EepromSetVar+0x26c>)
 8001e2e:	f003 fe9c 	bl	8005b6a <HAL_GPIO_WritePin>
	return 1;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40010c00 	.word	0x40010c00

08001e40 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e014      	b.n	8001e78 <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3202      	adds	r2, #2
 8001e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e58:	7bfa      	ldrb	r2, [r7, #15]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3202      	adds	r2, #2
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	461a      	mov	r2, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff feb2 	bl	8001bd0 <EepromSetVar>
		HAL_Delay(10);
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f002 fc2f 	bl	80046d0 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	3301      	adds	r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d3e4      	bcc.n	8001e4e <RestauraPadraoTudo+0xe>
	}
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <vApplicationGetIdleTaskMemory+0x28>)
 8001ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	200004a0 	.word	0x200004a0
 8001ebc:	20000540 	.word	0x20000540

08001ec0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a07      	ldr	r2, [pc, #28]	; (8001eec <vApplicationGetTimerTaskMemory+0x2c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8001ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ede:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000740 	.word	0x20000740
 8001ef0:	200007e0 	.word	0x200007e0

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b0ba      	sub	sp, #232	; 0xe8
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001efa:	f002 fbb7 	bl	800466c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efe:	f000 f927 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f02:	f000 fb97 	bl	8002634 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f06:	f000 fb67 	bl	80025d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f0a:	f000 f979 	bl	8002200 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f0e:	f000 f9d3 	bl	80022b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001f12:	f000 fa75 	bl	8002400 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f16:	f000 f9fd 	bl	8002314 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f1a:	f000 fb09 	bl	8002530 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001f1e:	f000 fb31 	bl	8002584 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8001f22:	2203      	movs	r2, #3
 8001f24:	4971      	ldr	r1, [pc, #452]	; (80020ec <main+0x1f8>)
 8001f26:	4872      	ldr	r0, [pc, #456]	; (80020f0 <main+0x1fc>)
 8001f28:	f002 fcce 	bl	80048c8 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	4871      	ldr	r0, [pc, #452]	; (80020f4 <main+0x200>)
 8001f30:	f005 f9fe 	bl	8007330 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8001f34:	210c      	movs	r1, #12
 8001f36:	486f      	ldr	r0, [pc, #444]	; (80020f4 <main+0x200>)
 8001f38:	f005 f9fa 	bl	8007330 <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8001f48:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f007 fc58 	bl	8009804 <osSemaphoreCreate>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a68      	ldr	r2, [pc, #416]	; (80020f8 <main+0x204>)
 8001f58:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timer10ms */
  osTimerDef(timer10ms, CBTimer10ms);
 8001f5a:	4b68      	ldr	r3, [pc, #416]	; (80020fc <main+0x208>)
 8001f5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8001f66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f007 fb44 	bl	80095fc <osTimerCreate>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4a62      	ldr	r2, [pc, #392]	; (8002100 <main+0x20c>)
 8001f78:	6013      	str	r3, [r2, #0]

  /* definition and creation of timer1000ms */
  osTimerDef(timer1000ms, CBTimer1000ms);
 8001f7a:	4b62      	ldr	r3, [pc, #392]	; (8002104 <main+0x210>)
 8001f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8001f86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f007 fb34 	bl	80095fc <osTimerCreate>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a5c      	ldr	r2, [pc, #368]	; (8002108 <main+0x214>)
 8001f98:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <main+0x218>)
 8001f9c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 8001fa6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f007 fc5b 	bl	8009868 <osMessageCreate>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4a56      	ldr	r2, [pc, #344]	; (8002110 <main+0x21c>)
 8001fb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <main+0x220>)
 8001fba:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 8001fc4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f007 fc4c 	bl	8009868 <osMessageCreate>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4a51      	ldr	r2, [pc, #324]	; (8002118 <main+0x224>)
 8001fd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 8001fd6:	4b51      	ldr	r3, [pc, #324]	; (800211c <main+0x228>)
 8001fd8:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8001fe2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f007 fc3d 	bl	8009868 <osMessageCreate>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a4b      	ldr	r2, [pc, #300]	; (8002120 <main+0x22c>)
 8001ff2:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <main+0x218>)
 8001ff6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002000:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f007 fc2e 	bl	8009868 <osMessageCreate>
 800200c:	4603      	mov	r3, r0
 800200e:	4a45      	ldr	r2, [pc, #276]	; (8002124 <main+0x230>)
 8002010:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 8002012:	4b45      	ldr	r3, [pc, #276]	; (8002128 <main+0x234>)
 8002014:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8002018:	461d      	mov	r5, r3
 800201a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002026:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f007 fa72 	bl	8009516 <osThreadCreate>
 8002032:	4603      	mov	r3, r0
 8002034:	4a3d      	ldr	r2, [pc, #244]	; (800212c <main+0x238>)
 8002036:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <main+0x23c>)
 800203a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800203e:	461d      	mov	r5, r3
 8002040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 800204c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f007 fa5f 	bl	8009516 <osThreadCreate>
 8002058:	4603      	mov	r3, r0
 800205a:	4a36      	ldr	r2, [pc, #216]	; (8002134 <main+0x240>)
 800205c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <main+0x244>)
 8002060:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002064:	461d      	mov	r5, r3
 8002066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800206e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f007 fa4c 	bl	8009516 <osThreadCreate>
 800207e:	4603      	mov	r3, r0
 8002080:	4a2e      	ldr	r2, [pc, #184]	; (800213c <main+0x248>)
 8002082:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <main+0x24c>)
 8002086:	f107 0420 	add.w	r4, r7, #32
 800208a:	461d      	mov	r5, r3
 800208c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800208e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 fa39 	bl	8009516 <osThreadCreate>
 80020a4:	4603      	mov	r3, r0
 80020a6:	4a27      	ldr	r2, [pc, #156]	; (8002144 <main+0x250>)
 80020a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 80020aa:	4b27      	ldr	r3, [pc, #156]	; (8002148 <main+0x254>)
 80020ac:	1d3c      	adds	r4, r7, #4
 80020ae:	461d      	mov	r5, r3
 80020b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 80020bc:	1d3b      	adds	r3, r7, #4
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f007 fa28 	bl	8009516 <osThreadCreate>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a20      	ldr	r2, [pc, #128]	; (800214c <main+0x258>)
 80020ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

  osTimerStart(timer10msHandle,10);
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <main+0x20c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	210a      	movs	r1, #10
 80020d2:	4618      	mov	r0, r3
 80020d4:	f007 fac6 	bl	8009664 <osTimerStart>
  osTimerStart(timer1000msHandle,1000);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <main+0x214>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020e0:	4618      	mov	r0, r3
 80020e2:	f007 fabf 	bl	8009664 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80020e6:	f007 fa0f 	bl	8009508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80020ea:	e7fe      	b.n	80020ea <main+0x1f6>
 80020ec:	20001504 	.word	0x20001504
 80020f0:	20000be0 	.word	0x20000be0
 80020f4:	20000cf0 	.word	0x20000cf0
 80020f8:	200013bc 	.word	0x200013bc
 80020fc:	080028d1 	.word	0x080028d1
 8002100:	200013b4 	.word	0x200013b4
 8002104:	08002965 	.word	0x08002965
 8002108:	200013b8 	.word	0x200013b8
 800210c:	0800d7bc 	.word	0x0800d7bc
 8002110:	200013a4 	.word	0x200013a4
 8002114:	0800d7cc 	.word	0x0800d7cc
 8002118:	200013a8 	.word	0x200013a8
 800211c:	0800d7dc 	.word	0x0800d7dc
 8002120:	200013ac 	.word	0x200013ac
 8002124:	200013b0 	.word	0x200013b0
 8002128:	0800d7fc 	.word	0x0800d7fc
 800212c:	20000e50 	.word	0x20000e50
 8002130:	0800d828 	.word	0x0800d828
 8002134:	20000e54 	.word	0x20000e54
 8002138:	0800d850 	.word	0x0800d850
 800213c:	20000e58 	.word	0x20000e58
 8002140:	0800d878 	.word	0x0800d878
 8002144:	200010fc 	.word	0x200010fc
 8002148:	0800d8a0 	.word	0x0800d8a0
 800214c:	200013a0 	.word	0x200013a0

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215a:	2228      	movs	r2, #40	; 0x28
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f00a fe48 	bl	800cdf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002180:	2302      	movs	r3, #2
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002184:	2301      	movs	r3, #1
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002188:	2310      	movs	r3, #16
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800218c:	2302      	movs	r3, #2
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002198:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 fad6 	bl	8006750 <HAL_RCC_OscConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80021aa:	f000 fbf7 	bl	800299c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ae:	230f      	movs	r3, #15
 80021b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2101      	movs	r1, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fd42 	bl	8006c54 <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80021d6:	f000 fbe1 	bl	800299c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021da:	2302      	movs	r3, #2
 80021dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80021de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fef2 	bl	8006fd0 <HAL_RCCEx_PeriphCLKConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021f2:	f000 fbd3 	bl	800299c <Error_Handler>
  }
}
 80021f6:	bf00      	nop
 80021f8:	3750      	adds	r7, #80	; 0x50
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002212:	4a28      	ldr	r2, [pc, #160]	; (80022b4 <MX_ADC1_Init+0xb4>)
 8002214:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002220:	2201      	movs	r2, #1
 8002222:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002224:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002226:	2200      	movs	r2, #0
 8002228:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <MX_ADC1_Init+0xb0>)
 800222c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002230:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <MX_ADC1_Init+0xb0>)
 800223a:	2203      	movs	r2, #3
 800223c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800223e:	481c      	ldr	r0, [pc, #112]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002240:	f002 fa6a 	bl	8004718 <HAL_ADC_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800224a:	f000 fba7 	bl	800299c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002252:	2301      	movs	r3, #1
 8002254:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002256:	2306      	movs	r3, #6
 8002258:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	4619      	mov	r1, r3
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002260:	f002 fc22 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800226a:	f000 fb97 	bl	800299c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800226e:	2301      	movs	r3, #1
 8002270:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002272:	2302      	movs	r3, #2
 8002274:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_ADC1_Init+0xb0>)
 800227c:	f002 fc14 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002286:	f000 fb89 	bl	800299c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800228a:	2310      	movs	r3, #16
 800228c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800228e:	2303      	movs	r3, #3
 8002290:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <MX_ADC1_Init+0xb0>)
 8002298:	f002 fc06 	bl	8004aa8 <HAL_ADC_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80022a2:	f000 fb7b 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000be0 	.word	0x20000be0
 80022b4:	40012400 	.word	0x40012400

080022b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <MX_I2C1_Init+0x50>)
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <MX_I2C1_Init+0x54>)
 80022c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <MX_I2C1_Init+0x50>)
 80022c4:	4a12      	ldr	r2, [pc, #72]	; (8002310 <MX_I2C1_Init+0x58>)
 80022c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <MX_I2C1_Init+0x50>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <MX_I2C1_Init+0x50>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_I2C1_Init+0x50>)
 80022d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <MX_I2C1_Init+0x50>)
 80022de:	2200      	movs	r2, #0
 80022e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_I2C1_Init+0x50>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022e8:	4b07      	ldr	r3, [pc, #28]	; (8002308 <MX_I2C1_Init+0x50>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <MX_I2C1_Init+0x50>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022f4:	4804      	ldr	r0, [pc, #16]	; (8002308 <MX_I2C1_Init+0x50>)
 80022f6:	f003 fc51 	bl	8005b9c <HAL_I2C_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002300:	f000 fb4c 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000c54 	.word	0x20000c54
 800230c:	40005400 	.word	0x40005400
 8002310:	000186a0 	.word	0x000186a0

08002314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08e      	sub	sp, #56	; 0x38
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
 8002340:	615a      	str	r2, [r3, #20]
 8002342:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <MX_TIM2_Init+0xe8>)
 8002346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800234a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <MX_TIM2_Init+0xe8>)
 800234e:	f240 42af 	movw	r2, #1199	; 0x4af
 8002352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002354:	4b29      	ldr	r3, [pc, #164]	; (80023fc <MX_TIM2_Init+0xe8>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800235a:	4b28      	ldr	r3, [pc, #160]	; (80023fc <MX_TIM2_Init+0xe8>)
 800235c:	2263      	movs	r2, #99	; 0x63
 800235e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002360:	4b26      	ldr	r3, [pc, #152]	; (80023fc <MX_TIM2_Init+0xe8>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002366:	4b25      	ldr	r3, [pc, #148]	; (80023fc <MX_TIM2_Init+0xe8>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800236c:	4823      	ldr	r0, [pc, #140]	; (80023fc <MX_TIM2_Init+0xe8>)
 800236e:	f004 fee5 	bl	800713c <HAL_TIM_Base_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002378:	f000 fb10 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	4619      	mov	r1, r3
 8002388:	481c      	ldr	r0, [pc, #112]	; (80023fc <MX_TIM2_Init+0xe8>)
 800238a:	f005 faa1 	bl	80078d0 <HAL_TIM_ConfigClockSource>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002394:	f000 fb02 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002398:	4818      	ldr	r0, [pc, #96]	; (80023fc <MX_TIM2_Init+0xe8>)
 800239a:	f004 ff71 	bl	8007280 <HAL_TIM_PWM_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80023a4:	f000 fafa 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b0:	f107 0320 	add.w	r3, r7, #32
 80023b4:	4619      	mov	r1, r3
 80023b6:	4811      	ldr	r0, [pc, #68]	; (80023fc <MX_TIM2_Init+0xe8>)
 80023b8:	f005 fe1a 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80023c2:	f000 faeb 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c6:	2360      	movs	r3, #96	; 0x60
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80023ca:	2332      	movs	r3, #50	; 0x32
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	220c      	movs	r2, #12
 80023da:	4619      	mov	r1, r3
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <MX_TIM2_Init+0xe8>)
 80023de:	f005 f9b5 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80023e8:	f000 fad8 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023ec:	4803      	ldr	r0, [pc, #12]	; (80023fc <MX_TIM2_Init+0xe8>)
 80023ee:	f000 ff1b 	bl	8003228 <HAL_TIM_MspPostInit>

}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000ca8 	.word	0x20000ca8

08002400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08e      	sub	sp, #56	; 0x38
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	f107 0320 	add.w	r3, r7, #32
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	615a      	str	r2, [r3, #20]
 800242e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002430:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <MX_TIM3_Init+0x128>)
 8002432:	4a3e      	ldr	r2, [pc, #248]	; (800252c <MX_TIM3_Init+0x12c>)
 8002434:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 8002436:	4b3c      	ldr	r3, [pc, #240]	; (8002528 <MX_TIM3_Init+0x128>)
 8002438:	f640 729f 	movw	r2, #3999	; 0xf9f
 800243c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b3a      	ldr	r3, [pc, #232]	; (8002528 <MX_TIM3_Init+0x128>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <MX_TIM3_Init+0x128>)
 8002446:	2263      	movs	r2, #99	; 0x63
 8002448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <MX_TIM3_Init+0x128>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b35      	ldr	r3, [pc, #212]	; (8002528 <MX_TIM3_Init+0x128>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002456:	4834      	ldr	r0, [pc, #208]	; (8002528 <MX_TIM3_Init+0x128>)
 8002458:	f004 fe70 	bl	800713c <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002462:	f000 fa9b 	bl	800299c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800246c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002470:	4619      	mov	r1, r3
 8002472:	482d      	ldr	r0, [pc, #180]	; (8002528 <MX_TIM3_Init+0x128>)
 8002474:	f005 fa2c 	bl	80078d0 <HAL_TIM_ConfigClockSource>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800247e:	f000 fa8d 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002482:	4829      	ldr	r0, [pc, #164]	; (8002528 <MX_TIM3_Init+0x128>)
 8002484:	f004 fefc 	bl	8007280 <HAL_TIM_PWM_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800248e:	f000 fa85 	bl	800299c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	4619      	mov	r1, r3
 80024a0:	4821      	ldr	r0, [pc, #132]	; (8002528 <MX_TIM3_Init+0x128>)
 80024a2:	f005 fda5 	bl	8007ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80024ac:	f000 fa76 	bl	800299c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b0:	2360      	movs	r3, #96	; 0x60
 80024b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024bc:	2304      	movs	r3, #4
 80024be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	4619      	mov	r1, r3
 80024c6:	4818      	ldr	r0, [pc, #96]	; (8002528 <MX_TIM3_Init+0x128>)
 80024c8:	f005 f940 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80024d2:	f000 fa63 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2204      	movs	r2, #4
 80024da:	4619      	mov	r1, r3
 80024dc:	4812      	ldr	r0, [pc, #72]	; (8002528 <MX_TIM3_Init+0x128>)
 80024de:	f005 f935 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80024e8:	f000 fa58 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	2208      	movs	r2, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	480d      	ldr	r0, [pc, #52]	; (8002528 <MX_TIM3_Init+0x128>)
 80024f4:	f005 f92a 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80024fe:	f000 fa4d 	bl	800299c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	220c      	movs	r2, #12
 8002506:	4619      	mov	r1, r3
 8002508:	4807      	ldr	r0, [pc, #28]	; (8002528 <MX_TIM3_Init+0x128>)
 800250a:	f005 f91f 	bl	800774c <HAL_TIM_PWM_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002514:	f000 fa42 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002518:	4803      	ldr	r0, [pc, #12]	; (8002528 <MX_TIM3_Init+0x128>)
 800251a:	f000 fe85 	bl	8003228 <HAL_TIM_MspPostInit>

}
 800251e:	bf00      	nop
 8002520:	3738      	adds	r7, #56	; 0x38
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000cf0 	.word	0x20000cf0
 800252c:	40000400 	.word	0x40000400

08002530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <MX_USART1_UART_Init+0x50>)
 8002538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_USART1_UART_Init+0x4c>)
 800253c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART1_UART_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002556:	220c      	movs	r2, #12
 8002558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_USART1_UART_Init+0x4c>)
 8002568:	f005 fdb2 	bl	80080d0 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002572:	f000 fa13 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000d38 	.word	0x20000d38
 8002580:	40013800 	.word	0x40013800

08002584 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <MX_USART3_UART_Init+0x50>)
 800258c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_USART3_UART_Init+0x4c>)
 80025bc:	f005 fd88 	bl	80080d0 <HAL_UART_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025c6:	f000 f9e9 	bl	800299c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000d80 	.word	0x20000d80
 80025d4:	40004800 	.word	0x40004800

080025d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <MX_DMA_Init+0x58>)
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4a13      	ldr	r2, [pc, #76]	; (8002630 <MX_DMA_Init+0x58>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6153      	str	r3, [r2, #20]
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_DMA_Init+0x58>)
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2105      	movs	r1, #5
 80025fa:	200b      	movs	r0, #11
 80025fc:	f002 fd27 	bl	800504e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002600:	200b      	movs	r0, #11
 8002602:	f002 fd40 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2105      	movs	r1, #5
 800260a:	200d      	movs	r0, #13
 800260c:	f002 fd1f 	bl	800504e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002610:	200d      	movs	r0, #13
 8002612:	f002 fd38 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2105      	movs	r1, #5
 800261a:	200f      	movs	r0, #15
 800261c:	f002 fd17 	bl	800504e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002620:	200f      	movs	r0, #15
 8002622:	f002 fd30 	bl	8005086 <HAL_NVIC_EnableIRQ>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <MX_GPIO_Init+0xfc>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a38      	ldr	r2, [pc, #224]	; (8002730 <MX_GPIO_Init+0xfc>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <MX_GPIO_Init+0xfc>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <MX_GPIO_Init+0xfc>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	4a32      	ldr	r2, [pc, #200]	; (8002730 <MX_GPIO_Init+0xfc>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6193      	str	r3, [r2, #24]
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <MX_GPIO_Init+0xfc>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800267e:	482d      	ldr	r0, [pc, #180]	; (8002734 <MX_GPIO_Init+0x100>)
 8002680:	f003 fa73 	bl	8005b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268a:	482b      	ldr	r0, [pc, #172]	; (8002738 <MX_GPIO_Init+0x104>)
 800268c:	f003 fa6d 	bl	8005b6a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002690:	2200      	movs	r2, #0
 8002692:	21f8      	movs	r1, #248	; 0xf8
 8002694:	4827      	ldr	r0, [pc, #156]	; (8002734 <MX_GPIO_Init+0x100>)
 8002696:	f003 fa68 	bl	8005b6a <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 800269a:	f246 0378 	movw	r3, #24696	; 0x6078
 800269e:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a8:	2302      	movs	r3, #2
 80026aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	4619      	mov	r1, r3
 80026b2:	4820      	ldr	r0, [pc, #128]	; (8002734 <MX_GPIO_Init+0x100>)
 80026b4:	f003 f802 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 80026b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <MX_GPIO_Init+0x108>)
 80026c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 80026c6:	f107 0308 	add.w	r3, r7, #8
 80026ca:	4619      	mov	r1, r3
 80026cc:	4819      	ldr	r0, [pc, #100]	; (8002734 <MX_GPIO_Init+0x100>)
 80026ce:	f002 fff5 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <MX_GPIO_Init+0x108>)
 80026da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 80026e0:	f107 0308 	add.w	r3, r7, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	4814      	ldr	r0, [pc, #80]	; (8002738 <MX_GPIO_Init+0x104>)
 80026e8:	f002 ffe8 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 80026ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2302      	movs	r3, #2
 80026fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	4619      	mov	r1, r3
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <MX_GPIO_Init+0x104>)
 8002706:	f002 ffd9 	bl	80056bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270e:	2301      	movs	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002712:	2302      	movs	r3, #2
 8002714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2302      	movs	r3, #2
 8002718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	4619      	mov	r1, r3
 8002720:	4804      	ldr	r0, [pc, #16]	; (8002734 <MX_GPIO_Init+0x100>)
 8002722:	f002 ffcb 	bl	80056bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	40010c00 	.word	0x40010c00
 8002738:	40010800 	.word	0x40010800
 800273c:	10110000 	.word	0x10110000

08002740 <leTempInterna>:

/* USER CODE BEGIN 4 */



void leTempInterna(void){
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
#define Avg_slope .0043
#define V25_	1.43
#define VSENSE 3.3/4096 //12bit

	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <leTempInterna+0x78>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fe4b 	bl	80003e4 <__aeabi_ui2d>
 800274e:	a314      	add	r3, pc, #80	; (adr r3, 80027a0 <leTempInterna+0x60>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fd fec0 	bl	80004d8 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	a112      	add	r1, pc, #72	; (adr r1, 80027a8 <leTempInterna+0x68>)
 800275e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002762:	f7fd fd01 	bl	8000168 <__aeabi_dsub>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	a310      	add	r3, pc, #64	; (adr r3, 80027b0 <leTempInterna+0x70>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd ffda 	bl	800072c <__aeabi_ddiv>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <leTempInterna+0x7c>)
 8002786:	f7fd fcf1 	bl	800016c <__adddf3>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4610      	mov	r0, r2
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe f95b 	bl	8000a4c <__aeabi_d2f>
 8002796:	4603      	mov	r3, r0
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <leTempInterna+0x80>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	66666666 	.word	0x66666666
 80027a4:	3f4a6666 	.word	0x3f4a6666
 80027a8:	ae147ae1 	.word	0xae147ae1
 80027ac:	3ff6e147 	.word	0x3ff6e147
 80027b0:	75f6fd22 	.word	0x75f6fd22
 80027b4:	3f719ce0 	.word	0x3f719ce0
 80027b8:	20001504 	.word	0x20001504
 80027bc:	40390000 	.word	0x40390000
 80027c0:	200013c0 	.word	0x200013c0

080027c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;


	leTempInterna();
 80027cc:	f7ff ffb8 	bl	8002740 <leTempInterna>

	if(i<TAM){
 80027d0:	4b38      	ldr	r3, [pc, #224]	; (80028b4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027d8:	d216      	bcs.n	8002808 <HAL_ADC_ConvCpltCallback+0x44>
		somatorio1+=buffer_ADC[1]; // somatorio
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_ADC_ConvCpltCallback+0xf4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a37      	ldr	r2, [pc, #220]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 80027e8:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <HAL_ADC_ConvCpltCallback+0xf4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 80027f8:	601a      	str	r2, [r3, #0]
		i++;
 80027fa:	4b2e      	ldr	r3, [pc, #184]	; (80028b4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002804:	801a      	strh	r2, [r3, #0]
	//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
	//	static uint32_t temp = 0;
	//	temp = ADC1->DR;
	//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 8002806:	e050      	b.n	80028aa <HAL_ADC_ConvCpltCallback+0xe6>
		somatorio1 = somatorio1 / TAM; //calc media
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2d      	ldr	r2, [pc, #180]	; (80028c4 <HAL_ADC_ConvCpltCallback+0x100>)
 800280e:	fb82 1203 	smull	r1, r2, r2, r3
 8002812:	1152      	asrs	r2, r2, #5
 8002814:	17db      	asrs	r3, r3, #31
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 800281a:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a28      	ldr	r2, [pc, #160]	; (80028c4 <HAL_ADC_ConvCpltCallback+0x100>)
 8002822:	fb82 1203 	smull	r1, r2, r2, r3
 8002826:	1152      	asrs	r2, r2, #5
 8002828:	17db      	asrs	r3, r3, #31
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 800282e:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa12 	bl	8000c60 <__aeabi_i2f>
 800283c:	4603      	mov	r3, r0
 800283e:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002840:	4921      	ldr	r1, [pc, #132]	; (80028c8 <HAL_ADC_ConvCpltCallback+0x104>)
 8002842:	69f8      	ldr	r0, [r7, #28]
 8002844:	f7fe fb14 	bl	8000e70 <__aeabi_fdiv>
 8002848:	4603      	mov	r3, r0
 800284a:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_ADC_ConvCpltCallback+0xf8>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe fa01 	bl	8000c60 <__aeabi_i2f>
 800285e:	4603      	mov	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002862:	4919      	ldr	r1, [pc, #100]	; (80028c8 <HAL_ADC_ConvCpltCallback+0x104>)
 8002864:	69b8      	ldr	r0, [r7, #24]
 8002866:	f7fe fb03 	bl	8000e70 <__aeabi_fdiv>
 800286a:	4603      	mov	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002874:	69f8      	ldr	r0, [r7, #28]
 8002876:	f7fd fdd7 	bl	8000428 <__aeabi_f2d>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002882:	69b8      	ldr	r0, [r7, #24]
 8002884:	f7fd fdd0 	bl	8000428 <__aeabi_f2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_ADC_ConvCpltCallback+0x108>)
 8002892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002896:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 800289a:	490c      	ldr	r1, [pc, #48]	; (80028cc <HAL_ADC_ConvCpltCallback+0x108>)
 800289c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_ADC_ConvCpltCallback+0xf0>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	801a      	strh	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20001542 	.word	0x20001542
 80028b8:	20001504 	.word	0x20001504
 80028bc:	20001544 	.word	0x20001544
 80028c0:	20001548 	.word	0x20001548
 80028c4:	10624dd3 	.word	0x10624dd3
 80028c8:	42c80000 	.word	0x42c80000
 80028cc:	20001510 	.word	0x20001510

080028d0 <CBTimer10ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer10ms */
	//TODO COLOCAR ISSO NA CLASSE E APNEAS CHAMAR A CALLBACK ASQUI


	/*INCREMENTO DE INATIVIDADE-------------------*/
	(bluetooth.msIdle<240)?bluetooth.msIdle++:0;
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <CBTimer10ms+0x8c>)
 80028da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80028de:	2bef      	cmp	r3, #239	; 0xef
 80028e0:	d807      	bhi.n	80028f2 <CBTimer10ms+0x22>
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <CBTimer10ms+0x8c>)
 80028e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80028e8:	3301      	adds	r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <CBTimer10ms+0x8c>)
 80028ee:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55


	/*MONITOR INATIVIDADE-------------------------*/
	if(bluetooth.JanelaConexao>0){
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <CBTimer10ms+0x8c>)
 80028f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <CBTimer10ms+0x3e>
		if(bluetooth.msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <CBTimer10ms+0x8c>)
 80028fe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002902:	2bc8      	cmp	r3, #200	; 0xc8
 8002904:	d90b      	bls.n	800291e <CBTimer10ms+0x4e>
			BluetoothDescon(&bluetooth);
 8002906:	4815      	ldr	r0, [pc, #84]	; (800295c <CBTimer10ms+0x8c>)
 8002908:	f7ff f8c8 	bl	8001a9c <BluetoothDescon>
 800290c:	e007      	b.n	800291e <CBTimer10ms+0x4e>
		}
	}
	else{
		if(bluetooth.msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <CBTimer10ms+0x8c>)
 8002910:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002914:	2bc8      	cmp	r3, #200	; 0xc8
 8002916:	d902      	bls.n	800291e <CBTimer10ms+0x4e>
			BluetoothDescon(&bluetooth);
 8002918:	4810      	ldr	r0, [pc, #64]	; (800295c <CBTimer10ms+0x8c>)
 800291a:	f7ff f8bf 	bl	8001a9c <BluetoothDescon>
		}
	}

	/*DECREMENTO JANELA CONEXAO-------------------*/
	static uint8_t mstimes100;
	if(mstimes100>=100){
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <CBTimer10ms+0x90>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b63      	cmp	r3, #99	; 0x63
 8002924:	d910      	bls.n	8002948 <CBTimer10ms+0x78>
		//do
		mstimes100=0;
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <CBTimer10ms+0x90>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
		//todo revisar
		if(bluetooth.JanelaConexao>0)
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <CBTimer10ms+0x8c>)
 800292e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00e      	beq.n	8002954 <CBTimer10ms+0x84>
			bluetooth.JanelaConexao--;
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <CBTimer10ms+0x8c>)
 8002938:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800293c:	3b01      	subs	r3, #1
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <CBTimer10ms+0x8c>)
 8002942:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	}


	/*MONITOR JANELA CONEXAO_____________________*/
  /* USER CODE END CBTimer10ms */
}
 8002946:	e005      	b.n	8002954 <CBTimer10ms+0x84>
		mstimes100++;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <CBTimer10ms+0x90>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	4b03      	ldr	r3, [pc, #12]	; (8002960 <CBTimer10ms+0x90>)
 8002952:	701a      	strb	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200013c4 	.word	0x200013c4
 8002960:	2000154c 	.word	0x2000154c

08002964 <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer1000ms */

  /* USER CODE END CBTimer1000ms */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
	...

08002978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800298a:	f001 fe85 	bl	8004698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40012c00 	.word	0x40012c00

0800299c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a0:	b672      	cpsid	i
}
 80029a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80029a4:	e7fe      	b.n	80029a4 <Error_Handler+0x8>

080029a6 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029d6:	f7fe f80f 	bl	80009f8 <__aeabi_dcmpgt>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d006      	beq.n	80029ee <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80029ec:	e011      	b.n	8002a12 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80029fa:	f7fd ffdf 	bl	80009bc <__aeabi_dcmplt>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d100      	bne.n	8002a06 <PID_Init+0x60>
}
 8002a04:	e005      	b.n	8002a12 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	0000      	movs	r0, r0
 8002a1c:	0000      	movs	r0, r0
	...

08002a20 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08a      	sub	sp, #40	; 0x28
 8002a24:	af06      	add	r7, sp, #24
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002a46:	a318      	add	r3, pc, #96	; (adr r3, 8002aa8 <PID+0x88>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f931 	bl	8002cc0 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2264      	movs	r2, #100	; 0x64
 8002a62:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002a64:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a68:	4619      	mov	r1, r3
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fa38 	bl	8002ee0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002a70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a74:	9304      	str	r3, [sp, #16]
 8002a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a82:	e9cd 2300 	strd	r2, r3, [sp]
 8002a86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f984 	bl	8002d98 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002a90:	f001 fe14 	bl	80046bc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	1ad2      	subs	r2, r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
	
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	406fe000 	.word	0x406fe000

08002ab0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08c      	sub	sp, #48	; 0x30
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	785b      	ldrb	r3, [r3, #1]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <PID_Compute+0x14>
	{
		return _FALSE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e0db      	b.n	8002c7c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002ac4:	f001 fdfa 	bl	80046bc <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	f0c0 80cd 	bcc.w	8002c7a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af8:	f7fd fb36 	bl	8000168 <__aeabi_dsub>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002b0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b0e:	f7fd fb2b 	bl	8000168 <__aeabi_dsub>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002b26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b2a:	f7fd fcd5 	bl	80004d8 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4620      	mov	r0, r4
 8002b34:	4629      	mov	r1, r5
 8002b36:	f7fd fb19 	bl	800016c <__adddf3>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d114      	bne.n	8002b76 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b5c:	f7fd fcbc 	bl	80004d8 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fafe 	bl	8000168 <__aeabi_dsub>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b82:	f7fd ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d006      	beq.n	8002b9a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002b98:	e010      	b.n	8002bbc <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ba6:	f7fd ff09 	bl	80009bc <__aeabi_dcmplt>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002bca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bce:	f7fd fc83 	bl	80004d8 <__aeabi_dmul>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002bda:	e005      	b.n	8002be8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf8:	f7fd fc6e 	bl	80004d8 <__aeabi_dmul>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4620      	mov	r0, r4
 8002c02:	4629      	mov	r1, r5
 8002c04:	f7fd fab0 	bl	8000168 <__aeabi_dsub>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c10:	f7fd faac 	bl	800016c <__adddf3>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c26:	f7fd fee7 	bl	80009f8 <__aeabi_dcmpgt>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002c3a:	e00e      	b.n	8002c5a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c46:	f7fd feb9 	bl	80009bc <__aeabi_dcmplt>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c62:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002c7a:	2300      	movs	r3, #0
	}
	
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3730      	adds	r7, #48	; 0x30
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bdb0      	pop	{r4, r5, r7, pc}

08002c84 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <PID_SetMode+0x2e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff fe7a 	bl	80029a6 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	705a      	strb	r2, [r3, #1]
	
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cd4:	f7fd fe86 	bl	80009e4 <__aeabi_dcmpge>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d158      	bne.n	8002d90 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002cde:	68f9      	ldr	r1, [r7, #12]
 8002ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002ce8:	68f9      	ldr	r1, [r7, #12]
 8002cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cee:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04b      	beq.n	8002d92 <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d08:	f7fd fe76 	bl	80009f8 <__aeabi_dcmpgt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d1c:	e9c1 2300 	strd	r2, r3, [r1]
 8002d20:	e012      	b.n	8002d48 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d30:	f7fd fe44 	bl	80009bc <__aeabi_dcmplt>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d44:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d54:	f7fd fe50 	bl	80009f8 <__aeabi_dcmpgt>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d006      	beq.n	8002d6c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d64:	68f9      	ldr	r1, [r7, #12]
 8002d66:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d6a:	e012      	b.n	8002d92 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d78:	f7fd fe20 	bl	80009bc <__aeabi_dcmplt>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d88:	68f9      	ldr	r1, [r7, #12]
 8002d8a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d8e:	e000      	b.n	8002d92 <PID_SetOutputLimits+0xd2>
		return;
 8002d90:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002db0:	f7fd fe04 	bl	80009bc <__aeabi_dcmplt>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 808b 	bne.w	8002ed2 <PID_SetTunings2+0x13a>
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002dc8:	f7fd fdf8 	bl	80009bc <__aeabi_dcmplt>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d17f      	bne.n	8002ed2 <PID_SetTunings2+0x13a>
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dde:	f7fd fded 	bl	80009bc <__aeabi_dcmplt>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d174      	bne.n	8002ed2 <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002dee:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002df0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002e0e:	68f9      	ldr	r1, [r7, #12]
 8002e10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e14:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e1e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fadc 	bl	80003e4 <__aeabi_ui2d>
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <PID_SetTunings2+0x144>)
 8002e32:	f7fd fc7b 	bl	800072c <__aeabi_ddiv>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e44:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002e50:	f7fd fb42 	bl	80004d8 <__aeabi_dmul>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002e5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e66:	f7fd fc61 	bl	800072c <__aeabi_ddiv>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	78db      	ldrb	r3, [r3, #3]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d12b      	bne.n	8002ed4 <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f7fd f96d 	bl	8000168 <__aeabi_dsub>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	f7fd f95f 	bl	8000168 <__aeabi_dsub>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	68f9      	ldr	r1, [r7, #12]
 8002eb0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002eba:	f04f 0000 	mov.w	r0, #0
 8002ebe:	f04f 0100 	mov.w	r1, #0
 8002ec2:	f7fd f951 	bl	8000168 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002ed0:	e000      	b.n	8002ed4 <PID_SetTunings2+0x13c>
		return;
 8002ed2:	bf00      	nop
		
	}
	
}
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	408f4000 	.word	0x408f4000

08002ee0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02e      	beq.n	8002f52 <PID_SetControllerDirection+0x72>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	78db      	ldrb	r3, [r3, #3]
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d029      	beq.n	8002f52 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f04:	f04f 0000 	mov.w	r0, #0
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	f7fd f92c 	bl	8000168 <__aeabi_dsub>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f20:	f04f 0000 	mov.w	r0, #0
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	f7fd f91e 	bl	8000168 <__aeabi_dsub>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f3c:	f04f 0000 	mov.w	r0, #0
 8002f40:	f04f 0100 	mov.w	r1, #0
 8002f44:	f7fd f910 	bl	8000168 <__aeabi_dsub>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	78fa      	ldrb	r2, [r7, #3]
 8002f56:	70da      	strb	r2, [r3, #3]
	
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	dd2e      	ble.n	8002fce <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f7fd fa47 	bl	8000404 <__aeabi_i2d>
 8002f76:	4604      	mov	r4, r0
 8002f78:	460d      	mov	r5, r1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa30 	bl	80003e4 <__aeabi_ui2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4620      	mov	r0, r4
 8002f8a:	4629      	mov	r1, r5
 8002f8c:	f7fd fbce 	bl	800072c <__aeabi_ddiv>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fa2:	f7fd fa99 	bl	80004d8 <__aeabi_dmul>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002fb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fba:	f7fd fbb7 	bl	800072c <__aeabi_ddiv>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_MspInit+0x68>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_MspInit+0x68>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6193      	str	r3, [r2, #24]
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_MspInit+0x68>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff6:	4b12      	ldr	r3, [pc, #72]	; (8003040 <HAL_MspInit+0x68>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4a11      	ldr	r2, [pc, #68]	; (8003040 <HAL_MspInit+0x68>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	61d3      	str	r3, [r2, #28]
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <HAL_MspInit+0x68>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	210f      	movs	r1, #15
 8003012:	f06f 0001 	mvn.w	r0, #1
 8003016:	f002 f81a 	bl	800504e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_MspInit+0x6c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	4a04      	ldr	r2, [pc, #16]	; (8003044 <HAL_MspInit+0x6c>)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	40010000 	.word	0x40010000

08003048 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003050:	f107 0310 	add.w	r3, r7, #16
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_ADC_MspInit+0xbc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d149      	bne.n	80030fc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4a26      	ldr	r2, [pc, #152]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 800306e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003072:	6193      	str	r3, [r2, #24]
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6193      	str	r3, [r2, #24]
 800308c:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <HAL_ADC_MspInit+0xc0>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003098:	2303      	movs	r3, #3
 800309a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309c:	2303      	movs	r3, #3
 800309e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4619      	mov	r1, r3
 80030a6:	4819      	ldr	r0, [pc, #100]	; (800310c <HAL_ADC_MspInit+0xc4>)
 80030a8:	f002 fb08 	bl	80056bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030ae:	4a19      	ldr	r2, [pc, #100]	; (8003114 <HAL_ADC_MspInit+0xcc>)
 80030b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030d6:	2220      	movs	r2, #32
 80030d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030e2:	f001 ffed 	bl	80050c0 <HAL_DMA_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80030ec:	f7ff fc56 	bl	800299c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030f4:	621a      	str	r2, [r3, #32]
 80030f6:	4a06      	ldr	r2, [pc, #24]	; (8003110 <HAL_ADC_MspInit+0xc8>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40012400 	.word	0x40012400
 8003108:	40021000 	.word	0x40021000
 800310c:	40010800 	.word	0x40010800
 8003110:	20000c10 	.word	0x20000c10
 8003114:	40020008 	.word	0x40020008

08003118 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_I2C_MspInit+0x90>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d132      	bne.n	800319e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800313e:	f043 0308 	orr.w	r3, r3, #8
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003150:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003156:	2312      	movs	r3, #18
 8003158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 0314 	add.w	r3, r7, #20
 8003162:	4619      	mov	r1, r3
 8003164:	4812      	ldr	r0, [pc, #72]	; (80031b0 <HAL_I2C_MspInit+0x98>)
 8003166:	f002 faa9 	bl	80056bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_I2C_MspInit+0x9c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <HAL_I2C_MspInit+0x9c>)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_I2C_MspInit+0x94>)
 800318c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003190:	61d3      	str	r3, [r2, #28]
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_I2C_MspInit+0x94>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40005400 	.word	0x40005400
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010c00 	.word	0x40010c00
 80031b4:	40010000 	.word	0x40010000

080031b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c8:	d10c      	bne.n	80031e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a14      	ldr	r2, [pc, #80]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b12      	ldr	r3, [pc, #72]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031e2:	e018      	b.n	8003216 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_TIM_Base_MspInit+0x6c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_TIM_Base_MspInit+0x68>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2105      	movs	r1, #5
 800320a:	201d      	movs	r0, #29
 800320c:	f001 ff1f 	bl	800504e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003210:	201d      	movs	r0, #29
 8003212:	f001 ff38 	bl	8005086 <HAL_NVIC_EnableIRQ>
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40000400 	.word	0x40000400

08003228 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d118      	bne.n	800327a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003260:	2308      	movs	r3, #8
 8003262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003268:	2302      	movs	r3, #2
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326c:	f107 0318 	add.w	r3, r7, #24
 8003270:	4619      	mov	r1, r3
 8003272:	481f      	ldr	r0, [pc, #124]	; (80032f0 <HAL_TIM_MspPostInit+0xc8>)
 8003274:	f002 fa22 	bl	80056bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003278:	e034      	b.n	80032e4 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_TIM_MspPostInit+0xcc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d12f      	bne.n	80032e4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4a18      	ldr	r2, [pc, #96]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6193      	str	r3, [r2, #24]
 8003290:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	613b      	str	r3, [r7, #16]
 800329a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 80032a2:	f043 0308 	orr.w	r3, r3, #8
 80032a6:	6193      	str	r3, [r2, #24]
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_TIM_MspPostInit+0xc4>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032b4:	23c0      	movs	r3, #192	; 0xc0
 80032b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	2302      	movs	r3, #2
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 0318 	add.w	r3, r7, #24
 80032c4:	4619      	mov	r1, r3
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <HAL_TIM_MspPostInit+0xc8>)
 80032c8:	f002 f9f8 	bl	80056bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032cc:	2303      	movs	r3, #3
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d4:	2302      	movs	r3, #2
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 0318 	add.w	r3, r7, #24
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	; (80032f8 <HAL_TIM_MspPostInit+0xd0>)
 80032e0:	f002 f9ec 	bl	80056bc <HAL_GPIO_Init>
}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010800 	.word	0x40010800
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40010c00 	.word	0x40010c00

080032fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a62      	ldr	r2, [pc, #392]	; (80034a0 <HAL_UART_MspInit+0x1a4>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d160      	bne.n	80033de <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a60      	ldr	r2, [pc, #384]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 8003322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b5e      	ldr	r3, [pc, #376]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	4b5b      	ldr	r3, [pc, #364]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800334c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003352:	2302      	movs	r3, #2
 8003354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003356:	2303      	movs	r3, #3
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335a:	f107 0318 	add.w	r3, r7, #24
 800335e:	4619      	mov	r1, r3
 8003360:	4851      	ldr	r0, [pc, #324]	; (80034a8 <HAL_UART_MspInit+0x1ac>)
 8003362:	f002 f9ab 	bl	80056bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003374:	f107 0318 	add.w	r3, r7, #24
 8003378:	4619      	mov	r1, r3
 800337a:	484b      	ldr	r0, [pc, #300]	; (80034a8 <HAL_UART_MspInit+0x1ac>)
 800337c:	f002 f99e 	bl	80056bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003380:	4b4a      	ldr	r3, [pc, #296]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 8003382:	4a4b      	ldr	r2, [pc, #300]	; (80034b0 <HAL_UART_MspInit+0x1b4>)
 8003384:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003386:	4b49      	ldr	r3, [pc, #292]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800338c:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003392:	4b46      	ldr	r3, [pc, #280]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003398:	4b44      	ldr	r3, [pc, #272]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 800339a:	2200      	movs	r2, #0
 800339c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80033a4:	4b41      	ldr	r3, [pc, #260]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033aa:	4b40      	ldr	r3, [pc, #256]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033b0:	483e      	ldr	r0, [pc, #248]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033b2:	f001 fe85 	bl	80050c0 <HAL_DMA_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80033bc:	f7ff faee 	bl	800299c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <HAL_UART_MspInit+0x1b0>)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2105      	movs	r1, #5
 80033d0:	2025      	movs	r0, #37	; 0x25
 80033d2:	f001 fe3c 	bl	800504e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033d6:	2025      	movs	r0, #37	; 0x25
 80033d8:	f001 fe55 	bl	8005086 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033dc:	e05c      	b.n	8003498 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <HAL_UART_MspInit+0x1b8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d157      	bne.n	8003498 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033e8:	4b2e      	ldr	r3, [pc, #184]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 80033ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f2:	61d3      	str	r3, [r2, #28]
 80033f4:	4b2b      	ldr	r3, [pc, #172]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003400:	4b28      	ldr	r3, [pc, #160]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a27      	ldr	r2, [pc, #156]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b25      	ldr	r3, [pc, #148]	; (80034a4 <HAL_UART_MspInit+0x1a8>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800341c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003422:	2303      	movs	r3, #3
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	f107 0318 	add.w	r3, r7, #24
 800342a:	4619      	mov	r1, r3
 800342c:	4822      	ldr	r0, [pc, #136]	; (80034b8 <HAL_UART_MspInit+0x1bc>)
 800342e:	f002 f945 	bl	80056bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003432:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	f107 0318 	add.w	r3, r7, #24
 8003444:	4619      	mov	r1, r3
 8003446:	481c      	ldr	r0, [pc, #112]	; (80034b8 <HAL_UART_MspInit+0x1bc>)
 8003448:	f002 f938 	bl	80056bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 800344e:	4a1c      	ldr	r2, [pc, #112]	; (80034c0 <HAL_UART_MspInit+0x1c4>)
 8003450:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003454:	2200      	movs	r2, #0
 8003456:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 800345a:	2200      	movs	r2, #0
 800345c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800345e:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003464:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003466:	2200      	movs	r2, #0
 8003468:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 800346c:	2200      	movs	r2, #0
 800346e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003472:	2220      	movs	r2, #32
 8003474:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003478:	2200      	movs	r2, #0
 800347a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800347c:	480f      	ldr	r0, [pc, #60]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 800347e:	f001 fe1f 	bl	80050c0 <HAL_DMA_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_MspInit+0x190>
      Error_Handler();
 8003488:	f7ff fa88 	bl	800299c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0b      	ldr	r2, [pc, #44]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_UART_MspInit+0x1c0>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003498:	bf00      	nop
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40013800 	.word	0x40013800
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40010800 	.word	0x40010800
 80034ac:	20000dc8 	.word	0x20000dc8
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40004800 	.word	0x40004800
 80034b8:	40010c00 	.word	0x40010c00
 80034bc:	20000e0c 	.word	0x20000e0c
 80034c0:	40020030 	.word	0x40020030

080034c4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a17      	ldr	r2, [pc, #92]	; (8003530 <HAL_UART_MspDeInit+0x6c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d113      	bne.n	80034fe <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80034d6:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_UART_MspDeInit+0x70>)
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_UART_MspDeInit+0x70>)
 80034dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034e0:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80034e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034e6:	4814      	ldr	r0, [pc, #80]	; (8003538 <HAL_UART_MspDeInit+0x74>)
 80034e8:	f002 fa6c 	bl	80059c4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fe3f 	bl	8005174 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80034f6:	2025      	movs	r0, #37	; 0x25
 80034f8:	f001 fdd3 	bl	80050a2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80034fc:	e014      	b.n	8003528 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a0e      	ldr	r2, [pc, #56]	; (800353c <HAL_UART_MspDeInit+0x78>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10f      	bne.n	8003528 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_UART_MspDeInit+0x70>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	4a09      	ldr	r2, [pc, #36]	; (8003534 <HAL_UART_MspDeInit+0x70>)
 800350e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003512:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003514:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003518:	4809      	ldr	r0, [pc, #36]	; (8003540 <HAL_UART_MspDeInit+0x7c>)
 800351a:	f002 fa53 	bl	80059c4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fe26 	bl	8005174 <HAL_DMA_DeInit>
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40013800 	.word	0x40013800
 8003534:	40021000 	.word	0x40021000
 8003538:	40010800 	.word	0x40010800
 800353c:	40004800 	.word	0x40004800
 8003540:	40010c00 	.word	0x40010c00

08003544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_InitTick+0xd0>)
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_InitTick+0xd0>)
 8003560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003564:	6193      	str	r3, [r2, #24]
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_InitTick+0xd0>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003572:	f107 020c 	add.w	r2, r7, #12
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f003 fcd9 	bl	8006f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003582:	f003 fcc3 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 8003586:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_InitTick+0xd4>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	0c9b      	lsrs	r3, r3, #18
 8003592:	3b01      	subs	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003596:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_InitTick+0xd8>)
 8003598:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_InitTick+0xdc>)
 800359a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_InitTick+0xd8>)
 800359e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_InitTick+0xd8>)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_InitTick+0xd8>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_InitTick+0xd8>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_InitTick+0xd8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80035bc:	4817      	ldr	r0, [pc, #92]	; (800361c <HAL_InitTick+0xd8>)
 80035be:	f003 fdbd 	bl	800713c <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80035c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11b      	bne.n	8003608 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80035d0:	4812      	ldr	r0, [pc, #72]	; (800361c <HAL_InitTick+0xd8>)
 80035d2:	f003 fe03 	bl	80071dc <HAL_TIM_Base_Start_IT>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80035dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d111      	bne.n	8003608 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035e4:	2019      	movs	r0, #25
 80035e6:	f001 fd4e 	bl	8005086 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d808      	bhi.n	8003602 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80035f0:	2200      	movs	r2, #0
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	2019      	movs	r0, #25
 80035f6:	f001 fd2a 	bl	800504e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035fa:	4a0a      	ldr	r2, [pc, #40]	; (8003624 <HAL_InitTick+0xe0>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e002      	b.n	8003608 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800360c:	4618      	mov	r0, r3
 800360e:	3730      	adds	r7, #48	; 0x30
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40021000 	.word	0x40021000
 8003618:	431bde83 	.word	0x431bde83
 800361c:	20001550 	.word	0x20001550
 8003620:	40012c00 	.word	0x40012c00
 8003624:	20000204 	.word	0x20000204

08003628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800362c:	e7fe      	b.n	800362c <NMI_Handler+0x4>

0800362e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003632:	e7fe      	b.n	8003632 <HardFault_Handler+0x4>

08003634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003638:	e7fe      	b.n	8003638 <MemManage_Handler+0x4>

0800363a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363e:	e7fe      	b.n	800363e <BusFault_Handler+0x4>

08003640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <UsageFault_Handler+0x4>

08003646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <DMA1_Channel1_IRQHandler+0x10>)
 800365a:	f001 fefb 	bl	8005454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000c10 	.word	0x20000c10

08003668 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <DMA1_Channel3_IRQHandler+0x10>)
 800366e:	f001 fef1 	bl	8005454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000e0c 	.word	0x20000e0c

0800367c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <DMA1_Channel5_IRQHandler+0x14>)
 8003682:	f001 fee7 	bl	8005454 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <DMA1_Channel5_IRQHandler+0x18>)
 8003688:	f7fd fdb0 	bl	80011ec <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000dc8 	.word	0x20000dc8
 8003694:	200013c4 	.word	0x200013c4

08003698 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM1_UP_IRQHandler+0x10>)
 800369e:	f003 ff4d 	bl	800753c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20001550 	.word	0x20001550

080036ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <TIM3_IRQHandler+0x10>)
 80036b2:	f003 ff43 	bl	800753c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000cf0 	.word	0x20000cf0

080036c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <USART1_IRQHandler+0x14>)
 80036c6:	f004 ff77 	bl	80085b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80036ca:	4803      	ldr	r0, [pc, #12]	; (80036d8 <USART1_IRQHandler+0x18>)
 80036cc:	f7fd fd4e 	bl	800116c <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000d38 	.word	0x20000d38
 80036d8:	200013c4 	.word	0x200013c4

080036dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <_sbrk+0x5c>)
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <_sbrk+0x60>)
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <_sbrk+0x64>)
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <_sbrk+0x68>)
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d207      	bcs.n	800371c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800370c:	f009 fbf6 	bl	800cefc <__errno>
 8003710:	4603      	mov	r3, r0
 8003712:	220c      	movs	r2, #12
 8003714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
 800371a:	e009      	b.n	8003730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <_sbrk+0x64>)
 800372c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20005000 	.word	0x20005000
 800373c:	00000400 	.word	0x00000400
 8003740:	20001598 	.word	0x20001598
 8003744:	20002ee8 	.word	0x20002ee8

08003748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003754:	f7ff fff8 	bl	8003748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003758:	480b      	ldr	r0, [pc, #44]	; (8003788 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800375a:	490c      	ldr	r1, [pc, #48]	; (800378c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <LoopFillZerobss+0x16>)
  movs r3, #0
 800375e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003770:	4c09      	ldr	r4, [pc, #36]	; (8003798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800377e:	f009 fbc3 	bl	800cf08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003782:	f7fe fbb7 	bl	8001ef4 <main>
  bx lr
 8003786:	4770      	bx	lr
  ldr r0, =_sdata
 8003788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800378c:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003790:	0800dac0 	.word	0x0800dac0
  ldr r2, =_sbss
 8003794:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003798:	20002ee4 	.word	0x20002ee4

0800379c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC1_2_IRQHandler>

0800379e <StartBluetooth>:
BleComando BLEAtualizaDataHora,BLEAlteraLimiteTemp,BLERestaura,BLESPTeto,BLESPLastro,BLESPtempo,BLEToggleTempo,BLEReceita,BLESPTempo,BLELightOn,BLELightOff;
BleComando BLEPedeSenha,BLERecebeuSenha;


void StartBluetooth(void const * argument)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
	initBluetooth();
 80037a6:	f000 f80b 	bl	80037c0 <initBluetooth>

	for(;;)
	{
		rxBluetooth();
 80037aa:	f000 fa3f 	bl	8003c2c <rxBluetooth>

		txBluetooth();
 80037ae:	f000 f8cb 	bl	8003948 <txBluetooth>

		osThreadYield();
 80037b2:	f005 fefd 	bl	80095b0 <osThreadYield>
		osDelay(50);
 80037b6:	2032      	movs	r0, #50	; 0x32
 80037b8:	f005 ff0c 	bl	80095d4 <osDelay>
		rxBluetooth();
 80037bc:	e7f5      	b.n	80037aa <StartBluetooth+0xc>
	...

080037c0 <initBluetooth>:
	}
}

void initBluetooth(void){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af02      	add	r7, sp, #8
	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <initBluetooth+0x104>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4b3e      	ldr	r3, [pc, #248]	; (80038c8 <initBluetooth+0x108>)
 80037ce:	4a3f      	ldr	r2, [pc, #252]	; (80038cc <initBluetooth+0x10c>)
 80037d0:	493f      	ldr	r1, [pc, #252]	; (80038d0 <initBluetooth+0x110>)
 80037d2:	4840      	ldr	r0, [pc, #256]	; (80038d4 <initBluetooth+0x114>)
 80037d4:	f7fd fbe8 	bl	8000fa8 <BluetoothInit>

	//inicializacao do hardware
	iniciaBleHm10(&bluetooth);
 80037d8:	483e      	ldr	r0, [pc, #248]	; (80038d4 <initBluetooth+0x114>)
 80037da:	f7fd ff55 	bl	8001688 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80037de:	2301      	movs	r3, #1
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2315      	movs	r3, #21
 80037e4:	4a3c      	ldr	r2, [pc, #240]	; (80038d8 <initBluetooth+0x118>)
 80037e6:	493d      	ldr	r1, [pc, #244]	; (80038dc <initBluetooth+0x11c>)
 80037e8:	483a      	ldr	r0, [pc, #232]	; (80038d4 <initBluetooth+0x114>)
 80037ea:	f7fd fc0b 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80037ee:	2301      	movs	r3, #1
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2317      	movs	r3, #23
 80037f4:	4a3a      	ldr	r2, [pc, #232]	; (80038e0 <initBluetooth+0x120>)
 80037f6:	493b      	ldr	r1, [pc, #236]	; (80038e4 <initBluetooth+0x124>)
 80037f8:	4836      	ldr	r0, [pc, #216]	; (80038d4 <initBluetooth+0x114>)
 80037fa:	f7fd fc03 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80037fe:	2301      	movs	r3, #1
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2326      	movs	r3, #38	; 0x26
 8003804:	4a38      	ldr	r2, [pc, #224]	; (80038e8 <initBluetooth+0x128>)
 8003806:	4939      	ldr	r1, [pc, #228]	; (80038ec <initBluetooth+0x12c>)
 8003808:	4832      	ldr	r0, [pc, #200]	; (80038d4 <initBluetooth+0x114>)
 800380a:	f7fd fbfb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);//identifica criticidade do comando no DMA_UART
 800380e:	2301      	movs	r3, #1
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2303      	movs	r3, #3
 8003814:	4a36      	ldr	r2, [pc, #216]	; (80038f0 <initBluetooth+0x130>)
 8003816:	4937      	ldr	r1, [pc, #220]	; (80038f4 <initBluetooth+0x134>)
 8003818:	482e      	ldr	r0, [pc, #184]	; (80038d4 <initBluetooth+0x114>)
 800381a:	f7fd fbf3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);//identifica criticidade do comando no DMA_UART
 800381e:	2301      	movs	r3, #1
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2310      	movs	r3, #16
 8003824:	4a34      	ldr	r2, [pc, #208]	; (80038f8 <initBluetooth+0x138>)
 8003826:	4935      	ldr	r1, [pc, #212]	; (80038fc <initBluetooth+0x13c>)
 8003828:	482a      	ldr	r0, [pc, #168]	; (80038d4 <initBluetooth+0x114>)
 800382a:	f7fd fbeb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoBasico);//identifica criticidade do comando no DMA_UART
 800382e:	2301      	movs	r3, #1
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	2342      	movs	r3, #66	; 0x42
 8003834:	4a32      	ldr	r2, [pc, #200]	; (8003900 <initBluetooth+0x140>)
 8003836:	4933      	ldr	r1, [pc, #204]	; (8003904 <initBluetooth+0x144>)
 8003838:	4826      	ldr	r0, [pc, #152]	; (80038d4 <initBluetooth+0x114>)
 800383a:	f7fd fbe3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERecebeuSenha,     	"RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 800383e:	2301      	movs	r3, #1
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2340      	movs	r3, #64	; 0x40
 8003844:	4a30      	ldr	r2, [pc, #192]	; (8003908 <initBluetooth+0x148>)
 8003846:	4931      	ldr	r1, [pc, #196]	; (800390c <initBluetooth+0x14c>)
 8003848:	4822      	ldr	r0, [pc, #136]	; (80038d4 <initBluetooth+0x114>)
 800384a:	f7fd fbdb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 800384e:	2301      	movs	r3, #1
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2321      	movs	r3, #33	; 0x21
 8003854:	4a2e      	ldr	r2, [pc, #184]	; (8003910 <initBluetooth+0x150>)
 8003856:	492f      	ldr	r1, [pc, #188]	; (8003914 <initBluetooth+0x154>)
 8003858:	481e      	ldr	r0, [pc, #120]	; (80038d4 <initBluetooth+0x114>)
 800385a:	f7fd fbd3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);//identifica criticidade do comando no DMA_UART
 800385e:	2301      	movs	r3, #1
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2322      	movs	r3, #34	; 0x22
 8003864:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <initBluetooth+0x158>)
 8003866:	492d      	ldr	r1, [pc, #180]	; (800391c <initBluetooth+0x15c>)
 8003868:	481a      	ldr	r0, [pc, #104]	; (80038d4 <initBluetooth+0x114>)
 800386a:	f7fd fbcb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);//identifica criticidade do comando no DMA_UART
 800386e:	2301      	movs	r3, #1
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	2323      	movs	r3, #35	; 0x23
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <initBluetooth+0x160>)
 8003876:	492b      	ldr	r1, [pc, #172]	; (8003924 <initBluetooth+0x164>)
 8003878:	4816      	ldr	r0, [pc, #88]	; (80038d4 <initBluetooth+0x114>)
 800387a:	f7fd fbc3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);//identifica criticidade do comando no DMA_UART
 800387e:	2301      	movs	r3, #1
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	2324      	movs	r3, #36	; 0x24
 8003884:	4a28      	ldr	r2, [pc, #160]	; (8003928 <initBluetooth+0x168>)
 8003886:	4929      	ldr	r1, [pc, #164]	; (800392c <initBluetooth+0x16c>)
 8003888:	4812      	ldr	r0, [pc, #72]	; (80038d4 <initBluetooth+0x114>)
 800388a:	f7fd fbbb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);//identifica criticidade do comando no DMA_UART
 800388e:	2301      	movs	r3, #1
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2325      	movs	r3, #37	; 0x25
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <initBluetooth+0x170>)
 8003896:	4927      	ldr	r1, [pc, #156]	; (8003934 <initBluetooth+0x174>)
 8003898:	480e      	ldr	r0, [pc, #56]	; (80038d4 <initBluetooth+0x114>)
 800389a:	f7fd fbb3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMPADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);//identifica criticidade do comando no DMA_UART
 800389e:	2301      	movs	r3, #1
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2327      	movs	r3, #39	; 0x27
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <initBluetooth+0x178>)
 80038a6:	4925      	ldr	r1, [pc, #148]	; (800393c <initBluetooth+0x17c>)
 80038a8:	480a      	ldr	r0, [pc, #40]	; (80038d4 <initBluetooth+0x114>)
 80038aa:	f7fd fbab 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80038ae:	2301      	movs	r3, #1
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2328      	movs	r3, #40	; 0x28
 80038b4:	4a22      	ldr	r2, [pc, #136]	; (8003940 <initBluetooth+0x180>)
 80038b6:	4923      	ldr	r1, [pc, #140]	; (8003944 <initBluetooth+0x184>)
 80038b8:	4806      	ldr	r0, [pc, #24]	; (80038d4 <initBluetooth+0x114>)
 80038ba:	f7fd fba3 	bl	8001004 <BluetoothAddComp>
}
 80038be:	bf00      	nop
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200013a8 	.word	0x200013a8
 80038c8:	200013ac 	.word	0x200013ac
 80038cc:	20000dc8 	.word	0x20000dc8
 80038d0:	20000d38 	.word	0x20000d38
 80038d4:	200013c4 	.word	0x200013c4
 80038d8:	0800d8bc 	.word	0x0800d8bc
 80038dc:	2000159c 	.word	0x2000159c
 80038e0:	0800d8d4 	.word	0x0800d8d4
 80038e4:	200015a4 	.word	0x200015a4
 80038e8:	0800d8ec 	.word	0x0800d8ec
 80038ec:	200015b4 	.word	0x200015b4
 80038f0:	0800d904 	.word	0x0800d904
 80038f4:	200015ac 	.word	0x200015ac
 80038f8:	0800d918 	.word	0x0800d918
 80038fc:	200015bc 	.word	0x200015bc
 8003900:	0800d924 	.word	0x0800d924
 8003904:	200015fc 	.word	0x200015fc
 8003908:	0800d934 	.word	0x0800d934
 800390c:	20001604 	.word	0x20001604
 8003910:	0800d948 	.word	0x0800d948
 8003914:	200015c4 	.word	0x200015c4
 8003918:	0800d958 	.word	0x0800d958
 800391c:	200015cc 	.word	0x200015cc
 8003920:	0800d96c 	.word	0x0800d96c
 8003924:	200015e4 	.word	0x200015e4
 8003928:	0800d978 	.word	0x0800d978
 800392c:	200015d4 	.word	0x200015d4
 8003930:	0800d988 	.word	0x0800d988
 8003934:	200015dc 	.word	0x200015dc
 8003938:	0800d994 	.word	0x0800d994
 800393c:	200015ec 	.word	0x200015ec
 8003940:	0800d9a4 	.word	0x0800d9a4
 8003944:	200015f4 	.word	0x200015f4

08003948 <txBluetooth>:
void txBluetooth(void){
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];//todo cogitar colocar na classe
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 800394e:	4bab      	ldr	r3, [pc, #684]	; (8003bfc <txBluetooth+0x2b4>)
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2200      	movs	r2, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f005 ffee 	bl	8009938 <osMessageGet>
	if (evttx.status == osEventMessage) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b10      	cmp	r3, #16
 8003960:	f040 8147 	bne.w	8003bf2 <txBluetooth+0x2aa>
		switch ((unsigned int)evttx.value.p) {
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b8e      	cmp	r3, #142	; 0x8e
 8003968:	f200 8143 	bhi.w	8003bf2 <txBluetooth+0x2aa>
 800396c:	2b8b      	cmp	r3, #139	; 0x8b
 800396e:	d20b      	bcs.n	8003988 <txBluetooth+0x40>
 8003970:	2b18      	cmp	r3, #24
 8003972:	f000 80c5 	beq.w	8003b00 <txBluetooth+0x1b8>
 8003976:	2b18      	cmp	r3, #24
 8003978:	f200 813b 	bhi.w	8003bf2 <txBluetooth+0x2aa>
 800397c:	2b16      	cmp	r3, #22
 800397e:	d013      	beq.n	80039a8 <txBluetooth+0x60>
 8003980:	2b17      	cmp	r3, #23
 8003982:	f000 808d 	beq.w	8003aa0 <txBluetooth+0x158>
			HAL_Delay(30);
			Envia_texto_UART("AT",50);//DESCONECTA
			break;
		}
	}
}
 8003986:	e134      	b.n	8003bf2 <txBluetooth+0x2aa>
		switch ((unsigned int)evttx.value.p) {
 8003988:	3b8b      	subs	r3, #139	; 0x8b
 800398a:	2b03      	cmp	r3, #3
 800398c:	f200 8131 	bhi.w	8003bf2 <txBluetooth+0x2aa>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <txBluetooth+0x50>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	08003b47 	.word	0x08003b47
 800399c:	08003b7d 	.word	0x08003b7d
 80039a0:	08003ba9 	.word	0x08003ba9
 80039a4:	08003bc7 	.word	0x08003bc7
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80039a8:	2301      	movs	r3, #1
 80039aa:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 80039ac:	2316      	movs	r3, #22
 80039ae:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= Erro.byte;							// Conjunto de erros
 80039b0:	4b93      	ldr	r3, [pc, #588]	; (8003c00 <txBluetooth+0x2b8>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.MaquinaMaster;		// State da maquina
 80039b6:	4b93      	ldr	r3, [pc, #588]	; (8003c04 <txBluetooth+0x2bc>)
 80039b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039bc:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	>>8;
 80039be:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <txBluetooth+0x2bc>)
 80039c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f820 	bl	8000a0c <__aeabi_d2uiz>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	& 0x00FF;
 80039d8:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <txBluetooth+0x2bc>)
 80039da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f7fd f813 	bl	8000a0c <__aeabi_d2uiz>
 80039e6:	4603      	mov	r3, r0
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 	>>8;
 80039ee:	4b85      	ldr	r3, [pc, #532]	; (8003c04 <txBluetooth+0x2bc>)
 80039f0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	f7fd f808 	bl	8000a0c <__aeabi_d2uiz>
 80039fc:	4603      	mov	r3, r0
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 	& 0x00FF;
 8003a08:	4b7e      	ldr	r3, [pc, #504]	; (8003c04 <txBluetooth+0x2bc>)
 8003a0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fc fffb 	bl	8000a0c <__aeabi_d2uiz>
 8003a16:	4603      	mov	r3, r0
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003a1e:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <txBluetooth+0x2bc>)
 8003a20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a24:	4610      	mov	r0, r2
 8003a26:	4619      	mov	r1, r3
 8003a28:	f7fc fff0 	bl	8000a0c <__aeabi_d2uiz>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003a38:	4b72      	ldr	r3, [pc, #456]	; (8003c04 <txBluetooth+0x2bc>)
 8003a3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	f7fc ffe3 	bl	8000a0c <__aeabi_d2uiz>
 8003a46:	4603      	mov	r3, r0
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 8003a4e:	4b6d      	ldr	r3, [pc, #436]	; (8003c04 <txBluetooth+0x2bc>)
 8003a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f7fc ffd8 	bl	8000a0c <__aeabi_d2uiz>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	76bb      	strb	r3, [r7, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003a68:	4b66      	ldr	r3, [pc, #408]	; (8003c04 <txBluetooth+0x2bc>)
 8003a6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fc ffcb 	bl	8000a0c <__aeabi_d2uiz>
 8003a76:	4603      	mov	r3, r0
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	76fb      	strb	r3, [r7, #27]
			BluetoothEnviaComando(Buffer, 11);
 8003a7e:	f107 0310 	add.w	r3, r7, #16
 8003a82:	210b      	movs	r1, #11
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd fd2d 	bl	80014e4 <BluetoothEnviaComando>
			osDelay(10);
 8003a8a:	200a      	movs	r0, #10
 8003a8c:	f005 fda2 	bl	80095d4 <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003a90:	4b5a      	ldr	r3, [pc, #360]	; (8003bfc <txBluetooth+0x2b4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	2117      	movs	r1, #23
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f005 ff0d 	bl	80098b8 <osMessagePut>
			break;
 8003a9e:	e0a8      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003aa4:	2317      	movs	r3, #23
 8003aa6:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.RTTimerMinutos;
 8003aa8:	4b56      	ldr	r3, [pc, #344]	; (8003c04 <txBluetooth+0x2bc>)
 8003aaa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003aae:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerSegundos;
 8003ab0:	4b54      	ldr	r3, [pc, #336]	; (8003c04 <txBluetooth+0x2bc>)
 8003ab2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ab6:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= PrimitiveStates.SPTimerMinutos;
 8003ab8:	4b52      	ldr	r3, [pc, #328]	; (8003c04 <txBluetooth+0x2bc>)
 8003aba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003abe:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerSegundos;
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <txBluetooth+0x2bc>)
 8003ac2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003ac6:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= PrimitiveStates.stateTimer;
 8003ac8:	4b4e      	ldr	r3, [pc, #312]	; (8003c04 <txBluetooth+0x2bc>)
 8003aca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ace:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)horimetroHoras.valor >> 8;
 8003ad0:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <txBluetooth+0x2c0>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	121b      	asrs	r3, r3, #8
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <txBluetooth+0x2c0>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint8_t)horimetroMinutos.valor;
 8003ae4:	4b49      	ldr	r3, [pc, #292]	; (8003c0c <txBluetooth+0x2c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	767b      	strb	r3, [r7, #25]
			Buffer[10]	= PrimitiveStates.Lampada;
 8003aec:	4b45      	ldr	r3, [pc, #276]	; (8003c04 <txBluetooth+0x2bc>)
 8003aee:	78db      	ldrb	r3, [r3, #3]
 8003af0:	76bb      	strb	r3, [r7, #26]
			BluetoothEnviaComando(Buffer, 10);
 8003af2:	f107 0310 	add.w	r3, r7, #16
 8003af6:	210a      	movs	r1, #10
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fcf3 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003afe:	e078      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b00:	2301      	movs	r3, #1
 8003b02:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003b04:	2318      	movs	r3, #24
 8003b06:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x01;									// Modelo
 8003b08:	2301      	movs	r3, #1
 8003b0a:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 8003b0c:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <txBluetooth+0x2c8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor;
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <txBluetooth+0x2cc>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 8003b1c:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <txBluetooth+0x2d0>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 8003b24:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <txBluetooth+0x2d4>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 8003b2c:	4b3c      	ldr	r3, [pc, #240]	; (8003c20 <txBluetooth+0x2d8>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	75fb      	strb	r3, [r7, #23]
			Buffer[8]	= VERSAO;
 8003b34:	2301      	movs	r3, #1
 8003b36:	763b      	strb	r3, [r7, #24]
			BluetoothEnviaComando(Buffer, 8);
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd fcd0 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003b44:	e055      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b46:	2301      	movs	r3, #1
 8003b48:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003b4a:	2351      	movs	r3, #81	; 0x51
 8003b4c:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003b4e:	2351      	movs	r3, #81	; 0x51
 8003b50:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;
 8003b52:	2301      	movs	r3, #1
 8003b54:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= bluetooth.chave >> 8 		;
 8003b56:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <txBluetooth+0x2dc>)
 8003b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b5c:	0a1b      	lsrs	r3, r3, #8
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= bluetooth.chave & 0x00ff	;
 8003b64:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <txBluetooth+0x2dc>)
 8003b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003b6e:	f107 0310 	add.w	r3, r7, #16
 8003b72:	2105      	movs	r1, #5
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd fcb5 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003b7a:	e03a      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003b80:	2351      	movs	r3, #81	; 0x51
 8003b82:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003b84:	2351      	movs	r3, #81	; 0x51
 8003b86:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= 0x00;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= 0x00;
 8003b90:	2300      	movs	r3, #0
 8003b92:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	2105      	movs	r1, #5
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fd fca2 	bl	80014e4 <BluetoothEnviaComando>
			BluetoothDescon(&bluetooth);
 8003ba0:	4820      	ldr	r0, [pc, #128]	; (8003c24 <txBluetooth+0x2dc>)
 8003ba2:	f7fd ff7b 	bl	8001a9c <BluetoothDescon>
			break;
 8003ba6:	e024      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003ba8:	2301      	movs	r3, #1
 8003baa:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003bac:	2352      	movs	r3, #82	; 0x52
 8003bae:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003bb0:	2352      	movs	r3, #82	; 0x52
 8003bb2:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;									//resultado ok
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003bb8:	f107 0310 	add.w	r3, r7, #16
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd fc90 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003bc4:	e015      	b.n	8003bf2 <txBluetooth+0x2aa>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003bca:	2352      	movs	r3, #82	; 0x52
 8003bcc:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003bce:	2352      	movs	r3, #82	; 0x52
 8003bd0:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;									//resultado ok
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003bd6:	f107 0310 	add.w	r3, r7, #16
 8003bda:	2103      	movs	r1, #3
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fd fc81 	bl	80014e4 <BluetoothEnviaComando>
			HAL_Delay(30);
 8003be2:	201e      	movs	r0, #30
 8003be4:	f000 fd74 	bl	80046d0 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 8003be8:	2132      	movs	r1, #50	; 0x32
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <txBluetooth+0x2e0>)
 8003bec:	f7fd fcf6 	bl	80015dc <Envia_texto_UART>
			break;
 8003bf0:	bf00      	nop
}
 8003bf2:	bf00      	nop
 8003bf4:	3730      	adds	r7, #48	; 0x30
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	200013a8 	.word	0x200013a8
 8003c00:	20001540 	.word	0x20001540
 8003c04:	20001510 	.word	0x20001510
 8003c08:	20000360 	.word	0x20000360
 8003c0c:	20000388 	.word	0x20000388
 8003c10:	20000478 	.word	0x20000478
 8003c14:	20000450 	.word	0x20000450
 8003c18:	200003b0 	.word	0x200003b0
 8003c1c:	200003d8 	.word	0x200003d8
 8003c20:	20000400 	.word	0x20000400
 8003c24:	200013c4 	.word	0x200013c4
 8003c28:	0800d9b8 	.word	0x0800d9b8

08003c2c <rxBluetooth>:
void rxBluetooth(void){
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 8003c32:	4ba1      	ldr	r3, [pc, #644]	; (8003eb8 <rxBluetooth+0x28c>)
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	463b      	mov	r3, r7
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f005 fe7c 	bl	8009938 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	f040 821b 	bne.w	800407e <rxBluetooth+0x452>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003c48:	4b9c      	ldr	r3, [pc, #624]	; (8003ebc <rxBluetooth+0x290>)
 8003c4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003c4e:	3b03      	subs	r3, #3
 8003c50:	2b3f      	cmp	r3, #63	; 0x3f
 8003c52:	f200 8214 	bhi.w	800407e <rxBluetooth+0x452>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <rxBluetooth+0x30>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003d7d 	.word	0x08003d7d
 8003c60:	0800407f 	.word	0x0800407f
 8003c64:	0800407f 	.word	0x0800407f
 8003c68:	0800407f 	.word	0x0800407f
 8003c6c:	0800407f 	.word	0x0800407f
 8003c70:	0800407f 	.word	0x0800407f
 8003c74:	0800407f 	.word	0x0800407f
 8003c78:	0800407f 	.word	0x0800407f
 8003c7c:	0800407f 	.word	0x0800407f
 8003c80:	0800407f 	.word	0x0800407f
 8003c84:	0800407f 	.word	0x0800407f
 8003c88:	0800407f 	.word	0x0800407f
 8003c8c:	0800407f 	.word	0x0800407f
 8003c90:	0800407d 	.word	0x0800407d
 8003c94:	0800407f 	.word	0x0800407f
 8003c98:	0800407f 	.word	0x0800407f
 8003c9c:	0800407f 	.word	0x0800407f
 8003ca0:	0800407f 	.word	0x0800407f
 8003ca4:	08003d5d 	.word	0x08003d5d
 8003ca8:	0800407f 	.word	0x0800407f
 8003cac:	08003d6d 	.word	0x08003d6d
 8003cb0:	0800407f 	.word	0x0800407f
 8003cb4:	0800407f 	.word	0x0800407f
 8003cb8:	0800407f 	.word	0x0800407f
 8003cbc:	0800407f 	.word	0x0800407f
 8003cc0:	0800407f 	.word	0x0800407f
 8003cc4:	0800407f 	.word	0x0800407f
 8003cc8:	0800407f 	.word	0x0800407f
 8003ccc:	0800407f 	.word	0x0800407f
 8003cd0:	0800407f 	.word	0x0800407f
 8003cd4:	08003dab 	.word	0x08003dab
 8003cd8:	08003df1 	.word	0x08003df1
 8003cdc:	08003e2d 	.word	0x08003e2d
 8003ce0:	08003e81 	.word	0x08003e81
 8003ce4:	08003ed1 	.word	0x08003ed1
 8003ce8:	08003f7d 	.word	0x08003f7d
 8003cec:	08003f99 	.word	0x08003f99
 8003cf0:	08003fcd 	.word	0x08003fcd
 8003cf4:	0800407f 	.word	0x0800407f
 8003cf8:	0800407f 	.word	0x0800407f
 8003cfc:	0800407f 	.word	0x0800407f
 8003d00:	0800407f 	.word	0x0800407f
 8003d04:	0800407f 	.word	0x0800407f
 8003d08:	0800407f 	.word	0x0800407f
 8003d0c:	0800407f 	.word	0x0800407f
 8003d10:	0800407f 	.word	0x0800407f
 8003d14:	0800407f 	.word	0x0800407f
 8003d18:	0800407f 	.word	0x0800407f
 8003d1c:	0800407f 	.word	0x0800407f
 8003d20:	0800407f 	.word	0x0800407f
 8003d24:	0800407f 	.word	0x0800407f
 8003d28:	0800407f 	.word	0x0800407f
 8003d2c:	0800407f 	.word	0x0800407f
 8003d30:	0800407f 	.word	0x0800407f
 8003d34:	0800407f 	.word	0x0800407f
 8003d38:	0800407f 	.word	0x0800407f
 8003d3c:	0800407f 	.word	0x0800407f
 8003d40:	0800407f 	.word	0x0800407f
 8003d44:	0800407f 	.word	0x0800407f
 8003d48:	0800407f 	.word	0x0800407f
 8003d4c:	0800407f 	.word	0x0800407f
 8003d50:	0800402b 	.word	0x0800402b
 8003d54:	0800407f 	.word	0x0800407f
 8003d58:	08004001 	.word	0x08004001
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003d5c:	4b58      	ldr	r3, [pc, #352]	; (8003ec0 <rxBluetooth+0x294>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2116      	movs	r1, #22
 8003d64:	4618      	mov	r0, r3
 8003d66:	f005 fda7 	bl	80098b8 <osMessagePut>
			break;
 8003d6a:	e188      	b.n	800407e <rxBluetooth+0x452>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003d6c:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <rxBluetooth+0x294>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2118      	movs	r1, #24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f005 fd9f 	bl	80098b8 <osMessagePut>
			break;
 8003d7a:	e180      	b.n	800407e <rxBluetooth+0x452>
			//				sDate.Month 	= bluetooth._RxDataArr[4]; //mes p/atualizar
			//				sDate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
			//				sTime.Hours 	= bluetooth._RxDataArr[6]; //hora p/atualizar
			//				sTime.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
			//				sTime.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
			osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8003d7c:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <rxBluetooth+0x298>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2105      	movs	r1, #5
 8003d84:	4618      	mov	r0, r3
 8003d86:	f005 fd97 	bl	80098b8 <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(bluetooth._RxDataArr[1])
 8003d8a:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <rxBluetooth+0x290>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	721a      	strb	r2, [r3, #8]
 8003d90:	4b4a      	ldr	r3, [pc, #296]	; (8003ebc <rxBluetooth+0x290>)
 8003d92:	22ff      	movs	r2, #255	; 0xff
 8003d94:	725a      	strb	r2, [r3, #9]
 8003d96:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <rxBluetooth+0x290>)
 8003d98:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003d9c:	4b47      	ldr	r3, [pc, #284]	; (8003ebc <rxBluetooth+0x290>)
 8003d9e:	729a      	strb	r2, [r3, #10]
 8003da0:	2103      	movs	r1, #3
 8003da2:	4849      	ldr	r0, [pc, #292]	; (8003ec8 <rxBluetooth+0x29c>)
 8003da4:	f7fd fc06 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003da8:	e169      	b.n	800407e <rxBluetooth+0x452>
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			uint16_t aux;

			aux = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003daa:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <rxBluetooth+0x290>)
 8003dac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003db0:	021b      	lsls	r3, r3, #8
 8003db2:	b21a      	sxth	r2, r3
 8003db4:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <rxBluetooth+0x290>)
 8003db6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003dba:	b21b      	sxth	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b21b      	sxth	r3, r3
 8003dc0:	81fb      	strh	r3, [r7, #14]
			PrimitiveStates.SetPointTeto = (double)aux;
 8003dc2:	89fb      	ldrh	r3, [r7, #14]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fb0d 	bl	80003e4 <__aeabi_ui2d>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	493f      	ldr	r1, [pc, #252]	; (8003ecc <rxBluetooth+0x2a0>)
 8003dd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			//			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
			MACRO_ENVIA_AKNOLADGE
 8003dd4:	4b39      	ldr	r3, [pc, #228]	; (8003ebc <rxBluetooth+0x290>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	721a      	strb	r2, [r3, #8]
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <rxBluetooth+0x290>)
 8003ddc:	22ff      	movs	r2, #255	; 0xff
 8003dde:	725a      	strb	r2, [r3, #9]
 8003de0:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <rxBluetooth+0x290>)
 8003de2:	22ff      	movs	r2, #255	; 0xff
 8003de4:	729a      	strb	r2, [r3, #10]
 8003de6:	2103      	movs	r1, #3
 8003de8:	4837      	ldr	r0, [pc, #220]	; (8003ec8 <rxBluetooth+0x29c>)
 8003dea:	f7fd fbe3 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003dee:	e146      	b.n	800407e <rxBluetooth+0x452>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003df0:	4b32      	ldr	r3, [pc, #200]	; (8003ebc <rxBluetooth+0x290>)
 8003df2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4a30      	ldr	r2, [pc, #192]	; (8003ebc <rxBluetooth+0x290>)
 8003dfa:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fc faff 	bl	8000404 <__aeabi_i2d>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4930      	ldr	r1, [pc, #192]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
//			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
			MACRO_ENVIA_AKNOLADGE
 8003e10:	4b2a      	ldr	r3, [pc, #168]	; (8003ebc <rxBluetooth+0x290>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	721a      	strb	r2, [r3, #8]
 8003e16:	4b29      	ldr	r3, [pc, #164]	; (8003ebc <rxBluetooth+0x290>)
 8003e18:	22ff      	movs	r2, #255	; 0xff
 8003e1a:	725a      	strb	r2, [r3, #9]
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <rxBluetooth+0x290>)
 8003e1e:	22ff      	movs	r2, #255	; 0xff
 8003e20:	729a      	strb	r2, [r3, #10]
 8003e22:	2103      	movs	r1, #3
 8003e24:	4828      	ldr	r0, [pc, #160]	; (8003ec8 <rxBluetooth+0x29c>)
 8003e26:	f7fd fbc5 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003e2a:	e128      	b.n	800407e <rxBluetooth+0x452>
		case RX_SP_TEMPO:
			//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <rxBluetooth+0x290>)
 8003e2e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003e38:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <rxBluetooth+0x290>)
 8003e3a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003e3e:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003e44:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e46:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003e50:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e52:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			//todo possivelmente zerar o tempo atual
			PrimitiveStates.stateTimer = decrementando; //estarta o timer
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003e64:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <rxBluetooth+0x290>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	721a      	strb	r2, [r3, #8]
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <rxBluetooth+0x290>)
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	725a      	strb	r2, [r3, #9]
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <rxBluetooth+0x290>)
 8003e72:	2223      	movs	r2, #35	; 0x23
 8003e74:	729a      	strb	r2, [r3, #10]
 8003e76:	2103      	movs	r1, #3
 8003e78:	4813      	ldr	r0, [pc, #76]	; (8003ec8 <rxBluetooth+0x29c>)
 8003e7a:	f7fd fb9b 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003e7e:	e0fe      	b.n	800407e <rxBluetooth+0x452>
		case RX_TOGGLE_TEMPO:
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			if(PrimitiveStates.stateTimer == decrementando)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e82:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d104      	bne.n	8003e94 <rxBluetooth+0x268>
				PrimitiveStates.stateTimer = pausado;
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8003e92:	e003      	b.n	8003e9c <rxBluetooth+0x270>
			else
				PrimitiveStates.stateTimer = emEspera;
 8003e94:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <rxBluetooth+0x2a0>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003e9c:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <rxBluetooth+0x290>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	721a      	strb	r2, [r3, #8]
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <rxBluetooth+0x290>)
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	725a      	strb	r2, [r3, #9]
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <rxBluetooth+0x290>)
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	729a      	strb	r2, [r3, #10]
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <rxBluetooth+0x29c>)
 8003eb2:	f7fd fb7f 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003eb6:	e0e2      	b.n	800407e <rxBluetooth+0x452>
 8003eb8:	200013ac 	.word	0x200013ac
 8003ebc:	200013c4 	.word	0x200013c4
 8003ec0:	200013a8 	.word	0x200013a8
 8003ec4:	200013b0 	.word	0x200013b0
 8003ec8:	200013cc 	.word	0x200013cc
 8003ecc:	20001510 	.word	0x20001510
		case RX_RECEITA:
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003ed0:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <rxBluetooth+0x45c>)
 8003ed2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	; (8004088 <rxBluetooth+0x45c>)
 8003eda:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fa8f 	bl	8000404 <__aeabi_i2d>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4968      	ldr	r1, [pc, #416]	; (800408c <rxBluetooth+0x460>)
 8003eec:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8003ef0:	4b65      	ldr	r3, [pc, #404]	; (8004088 <rxBluetooth+0x45c>)
 8003ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4a63      	ldr	r2, [pc, #396]	; (8004088 <rxBluetooth+0x45c>)
 8003efa:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003efe:	4313      	orrs	r3, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fa7f 	bl	8000404 <__aeabi_i2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4960      	ldr	r1, [pc, #384]	; (800408c <rxBluetooth+0x460>)
 8003f0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003f10:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <rxBluetooth+0x45c>)
 8003f12:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8003f16:	4b5d      	ldr	r3, [pc, #372]	; (800408c <rxBluetooth+0x460>)
 8003f18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003f1c:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <rxBluetooth+0x45c>)
 8003f1e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003f22:	4b5a      	ldr	r3, [pc, #360]	; (800408c <rxBluetooth+0x460>)
 8003f24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <rxBluetooth+0x460>)
 8003f2a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003f2e:	4b57      	ldr	r3, [pc, #348]	; (800408c <rxBluetooth+0x460>)
 8003f30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003f34:	4b55      	ldr	r3, [pc, #340]	; (800408c <rxBluetooth+0x460>)
 8003f36:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8003f3a:	4b54      	ldr	r3, [pc, #336]	; (800408c <rxBluetooth+0x460>)
 8003f3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			TempSPTeto = PrimitiveStates.SetPointTeto;
 8003f40:	4b52      	ldr	r3, [pc, #328]	; (800408c <rxBluetooth+0x460>)
 8003f42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f46:	4952      	ldr	r1, [pc, #328]	; (8004090 <rxBluetooth+0x464>)
 8003f48:	e9c1 2300 	strd	r2, r3, [r1]
			TempSPLastro = PrimitiveStates.SetPointLastro;
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <rxBluetooth+0x460>)
 8003f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f52:	4950      	ldr	r1, [pc, #320]	; (8004094 <rxBluetooth+0x468>)
 8003f54:	e9c1 2300 	strd	r2, r3, [r1]

			PrimitiveStates.stateTimer = true; //estarta o timer
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <rxBluetooth+0x460>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8003f60:	4b49      	ldr	r3, [pc, #292]	; (8004088 <rxBluetooth+0x45c>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	721a      	strb	r2, [r3, #8]
 8003f66:	4b48      	ldr	r3, [pc, #288]	; (8004088 <rxBluetooth+0x45c>)
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	725a      	strb	r2, [r3, #9]
 8003f6c:	4b46      	ldr	r3, [pc, #280]	; (8004088 <rxBluetooth+0x45c>)
 8003f6e:	2225      	movs	r2, #37	; 0x25
 8003f70:	729a      	strb	r2, [r3, #10]
 8003f72:	2103      	movs	r1, #3
 8003f74:	4848      	ldr	r0, [pc, #288]	; (8004098 <rxBluetooth+0x46c>)
 8003f76:	f7fd fb1d 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003f7a:	e080      	b.n	800407e <rxBluetooth+0x452>
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 8003f7c:	4b42      	ldr	r3, [pc, #264]	; (8004088 <rxBluetooth+0x45c>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	721a      	strb	r2, [r3, #8]
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <rxBluetooth+0x45c>)
 8003f84:	22ff      	movs	r2, #255	; 0xff
 8003f86:	725a      	strb	r2, [r3, #9]
 8003f88:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <rxBluetooth+0x45c>)
 8003f8a:	2226      	movs	r2, #38	; 0x26
 8003f8c:	729a      	strb	r2, [r3, #10]
 8003f8e:	2103      	movs	r1, #3
 8003f90:	4841      	ldr	r0, [pc, #260]	; (8004098 <rxBluetooth+0x46c>)
 8003f92:	f7fd fb0f 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003f96:	e072      	b.n	800407e <rxBluetooth+0x452>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			PrimitiveStates.SegundosLampada=30;//todo revisar variaveis de limite
 8003f98:	4b3c      	ldr	r3, [pc, #240]	; (800408c <rxBluetooth+0x460>)
 8003f9a:	221e      	movs	r2, #30
 8003f9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			LAMPADA_ON
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	483d      	ldr	r0, [pc, #244]	; (800409c <rxBluetooth+0x470>)
 8003fa6:	f001 fde0 	bl	8005b6a <HAL_GPIO_WritePin>
 8003faa:	4b38      	ldr	r3, [pc, #224]	; (800408c <rxBluetooth+0x460>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003fb0:	4b35      	ldr	r3, [pc, #212]	; (8004088 <rxBluetooth+0x45c>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	721a      	strb	r2, [r3, #8]
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <rxBluetooth+0x45c>)
 8003fb8:	22ff      	movs	r2, #255	; 0xff
 8003fba:	725a      	strb	r2, [r3, #9]
 8003fbc:	4b32      	ldr	r3, [pc, #200]	; (8004088 <rxBluetooth+0x45c>)
 8003fbe:	2227      	movs	r2, #39	; 0x27
 8003fc0:	729a      	strb	r2, [r3, #10]
 8003fc2:	2103      	movs	r1, #3
 8003fc4:	4834      	ldr	r0, [pc, #208]	; (8004098 <rxBluetooth+0x46c>)
 8003fc6:	f7fd faf5 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003fca:	e058      	b.n	800407e <rxBluetooth+0x452>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			LAMPADA_OFF
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	4832      	ldr	r0, [pc, #200]	; (800409c <rxBluetooth+0x470>)
 8003fd2:	f001 fdca 	bl	8005b6a <HAL_GPIO_WritePin>
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <rxBluetooth+0x460>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <rxBluetooth+0x460>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8003fe4:	4b28      	ldr	r3, [pc, #160]	; (8004088 <rxBluetooth+0x45c>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	721a      	strb	r2, [r3, #8]
 8003fea:	4b27      	ldr	r3, [pc, #156]	; (8004088 <rxBluetooth+0x45c>)
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	725a      	strb	r2, [r3, #9]
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <rxBluetooth+0x45c>)
 8003ff2:	2228      	movs	r2, #40	; 0x28
 8003ff4:	729a      	strb	r2, [r3, #10]
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	4827      	ldr	r0, [pc, #156]	; (8004098 <rxBluetooth+0x46c>)
 8003ffa:	f7fd fadb 	bl	80015b4 <Envia_bytes_UART>
			break;
 8003ffe:	e03e      	b.n	800407e <rxBluetooth+0x452>
		case RX_PEDE_SENHA:
			if(bluetooth.JanelaConexao > 0)
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <rxBluetooth+0x45c>)
 8004002:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <rxBluetooth+0x3ee>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE, 0);
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <rxBluetooth+0x474>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2200      	movs	r2, #0
 8004010:	218b      	movs	r1, #139	; 0x8b
 8004012:	4618      	mov	r0, r3
 8004014:	f005 fc50 	bl	80098b8 <osMessagePut>
			else{
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
			}
			break;
 8004018:	e031      	b.n	800407e <rxBluetooth+0x452>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <rxBluetooth+0x474>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	218c      	movs	r1, #140	; 0x8c
 8004022:	4618      	mov	r0, r3
 8004024:	f005 fc48 	bl	80098b8 <osMessagePut>
			break;
 8004028:	e029      	b.n	800407e <rxBluetooth+0x452>
		case RX_RECEBEU_SENHA:
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <rxBluetooth+0x45c>)
 800402c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004030:	b29a      	uxth	r2, r3
 8004032:	4b15      	ldr	r3, [pc, #84]	; (8004088 <rxBluetooth+0x45c>)
 8004034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	b29b      	uxth	r3, r3
 800403c:	429a      	cmp	r2, r3
 800403e:	d115      	bne.n	800406c <rxBluetooth+0x440>
					bluetooth._RxDataArr[4] == (bluetooth.chave & 0x00ff) ){
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <rxBluetooth+0x45c>)
 8004042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004046:	461a      	mov	r2, r3
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <rxBluetooth+0x45c>)
 800404a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800404e:	b2db      	uxtb	r3, r3
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 8004050:	429a      	cmp	r2, r3
 8004052:	d10b      	bne.n	800406c <rxBluetooth+0x440>
				//--->	CHAVE CORRETA
				bluetooth.MaquinaConexao	= RX_VALIDADO;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <rxBluetooth+0x45c>)
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_OK, 0);
 800405c:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <rxBluetooth+0x474>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	218d      	movs	r1, #141	; 0x8d
 8004064:	4618      	mov	r0, r3
 8004066:	f005 fc27 	bl	80098b8 <osMessagePut>
				break;
 800406a:	e008      	b.n	800407e <rxBluetooth+0x452>
			}else{
				//--->	CHAVE ERRADA
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_ERRO, 0);
 800406c:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <rxBluetooth+0x474>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	218e      	movs	r1, #142	; 0x8e
 8004074:	4618      	mov	r0, r3
 8004076:	f005 fc1f 	bl	80098b8 <osMessagePut>
			}
			break;
 800407a:	e000      	b.n	800407e <rxBluetooth+0x452>
			break;
 800407c:	bf00      	nop
		}
	}
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200013c4 	.word	0x200013c4
 800408c:	20001510 	.word	0x20001510
 8004090:	20001620 	.word	0x20001620
 8004094:	20001628 	.word	0x20001628
 8004098:	200013cc 	.word	0x200013cc
 800409c:	40010c00 	.word	0x40010c00
 80040a0:	200013a8 	.word	0x200013a8

080040a4 <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskBuzzer */
	//osThreadSuspend(TaskBuzzerHandle);
	/* Infinite loop */
	for(;;)
	{
		sequencia1Buzzer();
 80040ac:	f000 f80e 	bl	80040cc <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <StartBuzzer+0x24>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f005 fcb3 	bl	8009a20 <osThreadSuspend>
		osThreadYield();
 80040ba:	f005 fa79 	bl	80095b0 <osThreadYield>
		osDelay(100);
 80040be:	2064      	movs	r0, #100	; 0x64
 80040c0:	f005 fa88 	bl	80095d4 <osDelay>
		sequencia1Buzzer();
 80040c4:	e7f2      	b.n	80040ac <StartBuzzer+0x8>
 80040c6:	bf00      	nop
 80040c8:	20000e58 	.word	0x20000e58

080040cc <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 80040d0:	210c      	movs	r1, #12
 80040d2:	4821      	ldr	r0, [pc, #132]	; (8004158 <sequencia1Buzzer+0x8c>)
 80040d4:	f003 f92c 	bl	8007330 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 80040d8:	2201      	movs	r2, #1
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	481f      	ldr	r0, [pc, #124]	; (800415c <sequencia1Buzzer+0x90>)
 80040de:	f001 fd44 	bl	8005b6a <HAL_GPIO_WritePin>
 80040e2:	4b1f      	ldr	r3, [pc, #124]	; (8004160 <sequencia1Buzzer+0x94>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	70da      	strb	r2, [r3, #3]
	osDelay(300);
 80040e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040ec:	f005 fa72 	bl	80095d4 <osDelay>
	M_BUZZER_OFF
 80040f0:	210c      	movs	r1, #12
 80040f2:	4819      	ldr	r0, [pc, #100]	; (8004158 <sequencia1Buzzer+0x8c>)
 80040f4:	f003 f9be 	bl	8007474 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 80040f8:	2200      	movs	r2, #0
 80040fa:	2140      	movs	r1, #64	; 0x40
 80040fc:	4817      	ldr	r0, [pc, #92]	; (800415c <sequencia1Buzzer+0x90>)
 80040fe:	f001 fd34 	bl	8005b6a <HAL_GPIO_WritePin>
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <sequencia1Buzzer+0x94>)
 8004104:	2200      	movs	r2, #0
 8004106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <sequencia1Buzzer+0x94>)
 800410c:	2200      	movs	r2, #0
 800410e:	70da      	strb	r2, [r3, #3]
	osDelay(50);
 8004110:	2032      	movs	r0, #50	; 0x32
 8004112:	f005 fa5f 	bl	80095d4 <osDelay>
	M_BUZZER_ON
 8004116:	210c      	movs	r1, #12
 8004118:	480f      	ldr	r0, [pc, #60]	; (8004158 <sequencia1Buzzer+0x8c>)
 800411a:	f003 f909 	bl	8007330 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 800411e:	2201      	movs	r2, #1
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	480e      	ldr	r0, [pc, #56]	; (800415c <sequencia1Buzzer+0x90>)
 8004124:	f001 fd21 	bl	8005b6a <HAL_GPIO_WritePin>
 8004128:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <sequencia1Buzzer+0x94>)
 800412a:	2201      	movs	r2, #1
 800412c:	70da      	strb	r2, [r3, #3]
	osDelay(250);
 800412e:	20fa      	movs	r0, #250	; 0xfa
 8004130:	f005 fa50 	bl	80095d4 <osDelay>
	M_BUZZER_OFF
 8004134:	210c      	movs	r1, #12
 8004136:	4808      	ldr	r0, [pc, #32]	; (8004158 <sequencia1Buzzer+0x8c>)
 8004138:	f003 f99c 	bl	8007474 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 800413c:	2200      	movs	r2, #0
 800413e:	2140      	movs	r1, #64	; 0x40
 8004140:	4806      	ldr	r0, [pc, #24]	; (800415c <sequencia1Buzzer+0x90>)
 8004142:	f001 fd12 	bl	8005b6a <HAL_GPIO_WritePin>
 8004146:	4b06      	ldr	r3, [pc, #24]	; (8004160 <sequencia1Buzzer+0x94>)
 8004148:	2200      	movs	r2, #0
 800414a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800414e:	4b04      	ldr	r3, [pc, #16]	; (8004160 <sequencia1Buzzer+0x94>)
 8004150:	2200      	movs	r2, #0
 8004152:	70da      	strb	r2, [r3, #3]
}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000ca8 	.word	0x20000ca8
 800415c:	40010c00 	.word	0x40010c00
 8004160:	20001510 	.word	0x20001510

08004164 <StartEeprom>:
void initEeprom(void);
void processaEeprom(void);


void StartEeprom(void const * argument)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	initEeprom();
 800416c:	f000 f80a 	bl	8004184 <initEeprom>

	for(;;)
	{
		processaEeprom();
 8004170:	f000 f8bc 	bl	80042ec <processaEeprom>
		osThreadYield();
 8004174:	f005 fa1c 	bl	80095b0 <osThreadYield>
		osDelay(500);
 8004178:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800417c:	f005 fa2a 	bl	80095d4 <osDelay>
		processaEeprom();
 8004180:	e7f6      	b.n	8004170 <StartEeprom+0xc>
	...

08004184 <initEeprom>:
	}
}

void initEeprom(void){
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 800418a:	4a45      	ldr	r2, [pc, #276]	; (80042a0 <initEeprom+0x11c>)
 800418c:	4945      	ldr	r1, [pc, #276]	; (80042a4 <initEeprom+0x120>)
 800418e:	4846      	ldr	r0, [pc, #280]	; (80042a8 <initEeprom+0x124>)
 8004190:	f7fd fcae 	bl	8001af0 <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	0,		0,		0		,0);
 8004194:	2300      	movs	r3, #0
 8004196:	9304      	str	r3, [sp, #16]
 8004198:	2300      	movs	r3, #0
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	2300      	movs	r3, #0
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	2301      	movs	r3, #1
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	2304      	movs	r3, #4
 80041aa:	4a40      	ldr	r2, [pc, #256]	; (80042ac <initEeprom+0x128>)
 80041ac:	4940      	ldr	r1, [pc, #256]	; (80042b0 <initEeprom+0x12c>)
 80041ae:	483e      	ldr	r0, [pc, #248]	; (80042a8 <initEeprom+0x124>)
 80041b0:	f7fd fcb4 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA8BITS,	0,		0,		0		,0);
 80041b4:	2300      	movs	r3, #0
 80041b6:	9304      	str	r3, [sp, #16]
 80041b8:	2300      	movs	r3, #0
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	2300      	movs	r3, #0
 80041be:	9302      	str	r3, [sp, #8]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	2301      	movs	r3, #1
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	2305      	movs	r3, #5
 80041ca:	4a3a      	ldr	r2, [pc, #232]	; (80042b4 <initEeprom+0x130>)
 80041cc:	493a      	ldr	r1, [pc, #232]	; (80042b8 <initEeprom+0x134>)
 80041ce:	4836      	ldr	r0, [pc, #216]	; (80042a8 <initEeprom+0x124>)
 80041d0:	f7fd fca4 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,0);
 80041d4:	2300      	movs	r3, #0
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	2300      	movs	r3, #0
 80041da:	9303      	str	r3, [sp, #12]
 80041dc:	2300      	movs	r3, #0
 80041de:	9302      	str	r3, [sp, #8]
 80041e0:	2300      	movs	r3, #0
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	2301      	movs	r3, #1
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2306      	movs	r3, #6
 80041ea:	4a34      	ldr	r2, [pc, #208]	; (80042bc <initEeprom+0x138>)
 80041ec:	4934      	ldr	r1, [pc, #208]	; (80042c0 <initEeprom+0x13c>)
 80041ee:	482e      	ldr	r0, [pc, #184]	; (80042a8 <initEeprom+0x124>)
 80041f0:	f7fd fc94 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,0);
 80041f4:	2300      	movs	r3, #0
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	231f      	movs	r3, #31
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9302      	str	r3, [sp, #8]
 8004200:	2301      	movs	r3, #1
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	2301      	movs	r3, #1
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	230c      	movs	r3, #12
 800420a:	4a2e      	ldr	r2, [pc, #184]	; (80042c4 <initEeprom+0x140>)
 800420c:	492e      	ldr	r1, [pc, #184]	; (80042c8 <initEeprom+0x144>)
 800420e:	4826      	ldr	r0, [pc, #152]	; (80042a8 <initEeprom+0x124>)
 8004210:	f7fd fc84 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,0);
 8004214:	2300      	movs	r3, #0
 8004216:	9304      	str	r3, [sp, #16]
 8004218:	230c      	movs	r3, #12
 800421a:	9303      	str	r3, [sp, #12]
 800421c:	2301      	movs	r3, #1
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	2301      	movs	r3, #1
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	2301      	movs	r3, #1
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	230d      	movs	r3, #13
 800422a:	4a28      	ldr	r2, [pc, #160]	; (80042cc <initEeprom+0x148>)
 800422c:	4928      	ldr	r1, [pc, #160]	; (80042d0 <initEeprom+0x14c>)
 800422e:	481e      	ldr	r0, [pc, #120]	; (80042a8 <initEeprom+0x124>)
 8004230:	f7fd fc74 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,0);
 8004234:	2300      	movs	r3, #0
 8004236:	9304      	str	r3, [sp, #16]
 8004238:	2363      	movs	r3, #99	; 0x63
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	2317      	movs	r3, #23
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	2317      	movs	r3, #23
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	2301      	movs	r3, #1
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	230e      	movs	r3, #14
 800424a:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <initEeprom+0x150>)
 800424c:	4922      	ldr	r1, [pc, #136]	; (80042d8 <initEeprom+0x154>)
 800424e:	4816      	ldr	r0, [pc, #88]	; (80042a8 <initEeprom+0x124>)
 8004250:	f7fd fc64 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,0);
 8004254:	2300      	movs	r3, #0
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	2300      	movs	r3, #0
 800425a:	9303      	str	r3, [sp, #12]
 800425c:	2300      	movs	r3, #0
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	2300      	movs	r3, #0
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	2302      	movs	r3, #2
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	230f      	movs	r3, #15
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <initEeprom+0x158>)
 800426c:	491c      	ldr	r1, [pc, #112]	; (80042e0 <initEeprom+0x15c>)
 800426e:	480e      	ldr	r0, [pc, #56]	; (80042a8 <initEeprom+0x124>)
 8004270:	f7fd fc54 	bl	8001b1c <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,0);
 8004274:	2300      	movs	r3, #0
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	2300      	movs	r3, #0
 800427a:	9303      	str	r3, [sp, #12]
 800427c:	2300      	movs	r3, #0
 800427e:	9302      	str	r3, [sp, #8]
 8004280:	2300      	movs	r3, #0
 8004282:	9301      	str	r3, [sp, #4]
 8004284:	2302      	movs	r3, #2
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2314      	movs	r3, #20
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <initEeprom+0x160>)
 800428c:	4916      	ldr	r1, [pc, #88]	; (80042e8 <initEeprom+0x164>)
 800428e:	4806      	ldr	r0, [pc, #24]	; (80042a8 <initEeprom+0x124>)
 8004290:	f7fd fc44 	bl	8001b1c <EepromAddVar>

		RestauraPadraoTudo(&eeprom);
 8004294:	4804      	ldr	r0, [pc, #16]	; (80042a8 <initEeprom+0x124>)
 8004296:	f7fd fdd3 	bl	8001e40 <RestauraPadraoTudo>
//	EepromDownloadValores(&eeprom);


	//	osThreadResume(TaskComandoHandle);
	//	osThreadResume(TaskBluetoothHandle);
}
 800429a:	bf00      	nop
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200013b0 	.word	0x200013b0
 80042a4:	20000c54 	.word	0x20000c54
 80042a8:	200002a0 	.word	0x200002a0
 80042ac:	0800d9bc 	.word	0x0800d9bc
 80042b0:	20000478 	.word	0x20000478
 80042b4:	0800d9cc 	.word	0x0800d9cc
 80042b8:	20000360 	.word	0x20000360
 80042bc:	0800d9dc 	.word	0x0800d9dc
 80042c0:	20000388 	.word	0x20000388
 80042c4:	0800d9ec 	.word	0x0800d9ec
 80042c8:	200003b0 	.word	0x200003b0
 80042cc:	0800d9fc 	.word	0x0800d9fc
 80042d0:	200003d8 	.word	0x200003d8
 80042d4:	0800da0c 	.word	0x0800da0c
 80042d8:	20000400 	.word	0x20000400
 80042dc:	0800da1c 	.word	0x0800da1c
 80042e0:	20000428 	.word	0x20000428
 80042e4:	0800da2c 	.word	0x0800da2c
 80042e8:	20000450 	.word	0x20000450

080042ec <processaEeprom>:

void processaEeprom(void){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <processaEeprom+0x50>)
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	4618      	mov	r0, r3
 80042fe:	f005 fb1b 	bl	8009938 <osMessageGet>
	if (evt.status == osEventMessage) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b10      	cmp	r3, #16
 8004306:	d114      	bne.n	8004332 <processaEeprom+0x46>

		switch ((unsigned int)evt.value.p) {
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d810      	bhi.n	8004330 <processaEeprom+0x44>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <processaEeprom+0x28>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	0800432d 	.word	0x0800432d
 8004318:	08004331 	.word	0x08004331
 800431c:	08004331 	.word	0x08004331
 8004320:	08004331 	.word	0x08004331
 8004324:	08004331 	.word	0x08004331
 8004328:	08004331 	.word	0x08004331

		case CEepromShifiting:
			__NOP();
 800432c:	bf00      	nop
			//usar um semaphore para evitar de shiffiting em duplicidade
			break;
 800432e:	e000      	b.n	8004332 <processaEeprom+0x46>
			//				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK){
			//					Error_Handler();
			//				}
			break;
		default:
			break;
 8004330:	bf00      	nop
		}
	}
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200013b0 	.word	0x200013b0

08004340 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro, TempSPTeto, TempSPLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

	initPID();
 8004348:	f000 f80a 	bl	8004360 <initPID>

	//	osThreadSuspend(TaskTemperaturaHandle);
	for(;;)	{

		computaPID();
 800434c:	f000 f898 	bl	8004480 <computaPID>
		osThreadYield();
 8004350:	f005 f92e 	bl	80095b0 <osThreadYield>
		osDelay(TIME_PID_CALC);
 8004354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004358:	f005 f93c 	bl	80095d4 <osDelay>
		computaPID();
 800435c:	e7f6      	b.n	800434c <StartTemperatura+0xc>
	...

08004360 <initPID>:

	tmp += (*PIDOut / 1000);

	return tmp;
}
void initPID(void){
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af08      	add	r7, sp, #32

	TempSPTeto 		= 0;
 8004366:	493a      	ldr	r1, [pc, #232]	; (8004450 <initPID+0xf0>)
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9c1 2300 	strd	r2, r3, [r1]
	TempSPLastro 	= 0;
 8004374:	4937      	ldr	r1, [pc, #220]	; (8004454 <initPID+0xf4>)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9c1 2300 	strd	r2, r3, [r1]

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8004382:	2300      	movs	r3, #0
 8004384:	9307      	str	r3, [sp, #28]
 8004386:	2301      	movs	r3, #1
 8004388:	9306      	str	r3, [sp, #24]
 800438a:	a32d      	add	r3, pc, #180	; (adr r3, 8004440 <initPID+0xe0>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004394:	a32c      	add	r3, pc, #176	; (adr r3, 8004448 <initPID+0xe8>)
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <initPID+0xf8>)
 80043a4:	e9cd 2300 	strd	r2, r3, [sp]
 80043a8:	4b2c      	ldr	r3, [pc, #176]	; (800445c <initPID+0xfc>)
 80043aa:	4a2d      	ldr	r2, [pc, #180]	; (8004460 <initPID+0x100>)
 80043ac:	492d      	ldr	r1, [pc, #180]	; (8004464 <initPID+0x104>)
 80043ae:	482e      	ldr	r0, [pc, #184]	; (8004468 <initPID+0x108>)
 80043b0:	f7fe fb36 	bl	8002a20 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80043b4:	2300      	movs	r3, #0
 80043b6:	9307      	str	r3, [sp, #28]
 80043b8:	2301      	movs	r3, #1
 80043ba:	9306      	str	r3, [sp, #24]
 80043bc:	a320      	add	r3, pc, #128	; (adr r3, 8004440 <initPID+0xe0>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80043c6:	a320      	add	r3, pc, #128	; (adr r3, 8004448 <initPID+0xe8>)
 80043c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <initPID+0xf8>)
 80043d6:	e9cd 2300 	strd	r2, r3, [sp]
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <initPID+0x10c>)
 80043dc:	4a24      	ldr	r2, [pc, #144]	; (8004470 <initPID+0x110>)
 80043de:	4925      	ldr	r1, [pc, #148]	; (8004474 <initPID+0x114>)
 80043e0:	4825      	ldr	r0, [pc, #148]	; (8004478 <initPID+0x118>)
 80043e2:	f7fe fb1d 	bl	8002a20 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80043e6:	2101      	movs	r1, #1
 80043e8:	481f      	ldr	r0, [pc, #124]	; (8004468 <initPID+0x108>)
 80043ea:	f7fe fc4b 	bl	8002c84 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 80043ee:	2101      	movs	r1, #1
 80043f0:	4821      	ldr	r0, [pc, #132]	; (8004478 <initPID+0x118>)
 80043f2:	f7fe fc47 	bl	8002c84 <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 80043f6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80043fa:	481b      	ldr	r0, [pc, #108]	; (8004468 <initPID+0x108>)
 80043fc:	f7fe fdb0 	bl	8002f60 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004400:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004404:	481c      	ldr	r0, [pc, #112]	; (8004478 <initPID+0x118>)
 8004406:	f7fe fdab 	bl	8002f60 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	4b1b      	ldr	r3, [pc, #108]	; (800447c <initPID+0x11c>)
 8004410:	e9cd 2300 	strd	r2, r3, [sp]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	4812      	ldr	r0, [pc, #72]	; (8004468 <initPID+0x108>)
 800441e:	f7fe fc4f 	bl	8002cc0 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <initPID+0x11c>)
 8004428:	e9cd 2300 	strd	r2, r3, [sp]
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	4810      	ldr	r0, [pc, #64]	; (8004478 <initPID+0x118>)
 8004436:	f7fe fc43 	bl	8002cc0 <PID_SetOutputLimits>
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	33333333 	.word	0x33333333
 8004444:	3fd33333 	.word	0x3fd33333
 8004448:	47ae147b 	.word	0x47ae147b
 800444c:	3f847ae1 	.word	0x3f847ae1
 8004450:	20001620 	.word	0x20001620
 8004454:	20001628 	.word	0x20001628
 8004458:	403e0000 	.word	0x403e0000
 800445c:	20001528 	.word	0x20001528
 8004460:	20001610 	.word	0x20001610
 8004464:	20001518 	.word	0x20001518
 8004468:	20001630 	.word	0x20001630
 800446c:	20001530 	.word	0x20001530
 8004470:	20001618 	.word	0x20001618
 8004474:	20001520 	.word	0x20001520
 8004478:	200016a0 	.word	0x200016a0
 800447c:	40590000 	.word	0x40590000

08004480 <computaPID>:
void computaPID(void){
 8004480:	b598      	push	{r3, r4, r7, lr}
 8004482:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 8004484:	480e      	ldr	r0, [pc, #56]	; (80044c0 <computaPID+0x40>)
 8004486:	f7fe fb13 	bl	8002ab0 <PID_Compute>
	PID_Compute(&TPIDLastro);
 800448a:	480e      	ldr	r0, [pc, #56]	; (80044c4 <computaPID+0x44>)
 800448c:	f7fe fb10 	bl	8002ab0 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <computaPID+0x48>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	490d      	ldr	r1, [pc, #52]	; (80044cc <computaPID+0x4c>)
 8004498:	680c      	ldr	r4, [r1, #0]
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	f7fc fab5 	bl	8000a0c <__aeabi_d2uiz>
 80044a2:	4603      	mov	r3, r0
 80044a4:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <computaPID+0x50>)
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	4907      	ldr	r1, [pc, #28]	; (80044cc <computaPID+0x4c>)
 80044ae:	680c      	ldr	r4, [r1, #0]
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	f7fc faaa 	bl	8000a0c <__aeabi_d2uiz>
 80044b8:	4603      	mov	r3, r0
 80044ba:	6423      	str	r3, [r4, #64]	; 0x40
}
 80044bc:	bf00      	nop
 80044be:	bd98      	pop	{r3, r4, r7, pc}
 80044c0:	20001630 	.word	0x20001630
 80044c4:	200016a0 	.word	0x200016a0
 80044c8:	20001610 	.word	0x20001610
 80044cc:	20000cf0 	.word	0x20000cf0
 80044d0:	20001618 	.word	0x20001618

080044d4 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80044dc:	f006 fe3c 	bl	800b158 <xTaskGetTickCount>
 80044e0:	4603      	mov	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 80044e4:	f000 f8a8 	bl	8004638 <verificaErro>

		funcionamentoTimer();
 80044e8:	f000 f80c 	bl	8004504 <funcionamentoTimer>

		funcionamentoLampada();
 80044ec:	f000 f874 	bl	80045d8 <funcionamentoLampada>

		osThreadYield();
 80044f0:	f005 f85e 	bl	80095b0 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044fc:	4618      	mov	r0, r3
 80044fe:	f005 fabd 	bl	8009a7c <osDelayUntil>
		verificaErro();
 8004502:	e7ef      	b.n	80044e4 <StartTimer+0x10>

08004504 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == decrementando){
 8004508:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <funcionamentoTimer+0xcc>)
 800450a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <funcionamentoTimer+0x3c>
 8004512:	4b2f      	ldr	r3, [pc, #188]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004514:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d111      	bne.n	8004540 <funcionamentoTimer+0x3c>
 800451c:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <funcionamentoTimer+0xcc>)
 800451e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004522:	2b01      	cmp	r3, #1
 8004524:	d10c      	bne.n	8004540 <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004528:	223b      	movs	r2, #59	; 0x3b
 800452a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 800452e:	4b28      	ldr	r3, [pc, #160]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004530:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004534:	3b01      	subs	r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	4b25      	ldr	r3, [pc, #148]	; (80045d0 <funcionamentoTimer+0xcc>)
 800453a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.SetPointLastro	= 0;
			PrimitiveStates.stateTimer = emEspera;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 800453e:	e045      	b.n	80045cc <funcionamentoTimer+0xc8>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == decrementando){
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004542:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <funcionamentoTimer+0x50>
 800454a:	4b21      	ldr	r3, [pc, #132]	; (80045d0 <funcionamentoTimer+0xcc>)
 800454c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d03b      	beq.n	80045cc <funcionamentoTimer+0xc8>
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004556:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800455a:	2b01      	cmp	r3, #1
 800455c:	d136      	bne.n	80045cc <funcionamentoTimer+0xc8>
		PrimitiveStates.RTTimerSegundos--;
 800455e:	4b1c      	ldr	r3, [pc, #112]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004560:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004564:	3b01      	subs	r3, #1
 8004566:	b2da      	uxtb	r2, r3
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <funcionamentoTimer+0xcc>)
 800456a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 800456e:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004570:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d129      	bne.n	80045cc <funcionamentoTimer+0xc8>
 8004578:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <funcionamentoTimer+0xcc>)
 800457a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800457e:	2b00      	cmp	r3, #0
 8004580:	d124      	bne.n	80045cc <funcionamentoTimer+0xc8>
			PrimitiveStates.SetPointTeto 	= 0;
 8004582:	4913      	ldr	r1, [pc, #76]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 8004590:	490f      	ldr	r1, [pc, #60]	; (80045d0 <funcionamentoTimer+0xcc>)
 8004592:	f04f 0200 	mov.w	r2, #0
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 800459e:	490c      	ldr	r1, [pc, #48]	; (80045d0 <funcionamentoTimer+0xcc>)
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 80045ac:	4908      	ldr	r1, [pc, #32]	; (80045d0 <funcionamentoTimer+0xcc>)
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.stateTimer = emEspera;
 80045ba:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <funcionamentoTimer+0xcc>)
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			osThreadResume(TaskBuzzerHandle);
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <funcionamentoTimer+0xd0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f005 fa36 	bl	8009a38 <osThreadResume>
}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20001510 	.word	0x20001510
 80045d4:	20000e58 	.word	0x20000e58

080045d8 <funcionamentoLampada>:

void funcionamentoLampada(void){
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0

	//decremento e apos desligamento lampada
	if(PrimitiveStates.SegundosLampada>0){
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <funcionamentoLampada+0x58>)
 80045de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d021      	beq.n	800462a <funcionamentoLampada+0x52>
		PrimitiveStates.SegundosLampada--;
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <funcionamentoLampada+0x58>)
 80045e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <funcionamentoLampada+0x58>)
 80045f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(PrimitiveStates.SegundosLampada==0){
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <funcionamentoLampada+0x58>)
 80045f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <funcionamentoLampada+0x42>
			LAMPADA_OFF
 8004600:	2200      	movs	r2, #0
 8004602:	2140      	movs	r1, #64	; 0x40
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <funcionamentoLampada+0x5c>)
 8004606:	f001 fab0 	bl	8005b6a <HAL_GPIO_WritePin>
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <funcionamentoLampada+0x58>)
 800460c:	2200      	movs	r2, #0
 800460e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <funcionamentoLampada+0x58>)
 8004614:	2200      	movs	r2, #0
 8004616:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 8004618:	e007      	b.n	800462a <funcionamentoLampada+0x52>
			LAMPADA_ON
 800461a:	2201      	movs	r2, #1
 800461c:	2140      	movs	r1, #64	; 0x40
 800461e:	4805      	ldr	r0, [pc, #20]	; (8004634 <funcionamentoLampada+0x5c>)
 8004620:	f001 faa3 	bl	8005b6a <HAL_GPIO_WritePin>
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <funcionamentoLampada+0x58>)
 8004626:	2201      	movs	r2, #1
 8004628:	70da      	strb	r2, [r3, #3]
}
 800462a:	bf00      	nop
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20001510 	.word	0x20001510
 8004634:	40010c00 	.word	0x40010c00

08004638 <verificaErro>:

void verificaErro(void){
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	2200      	movs	r2, #0
 8004642:	210f      	movs	r1, #15
 8004644:	4618      	mov	r0, r3
 8004646:	f005 f891 	bl	800976c <osSignalWait>
	if (evt.status == osEventSignal){
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d107      	bne.n	8004660 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b0f      	cmp	r3, #15
 8004654:	d104      	bne.n	8004660 <verificaErro+0x28>
			//TODO REVISAR
			osThreadSuspend(TaskTimerHandle);
 8004656:	4b04      	ldr	r3, [pc, #16]	; (8004668 <verificaErro+0x30>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f005 f9e0 	bl	8009a20 <osThreadSuspend>
		}
	}
}
 8004660:	bf00      	nop
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200010fc 	.word	0x200010fc

0800466c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_Init+0x28>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a07      	ldr	r2, [pc, #28]	; (8004694 <HAL_Init+0x28>)
 8004676:	f043 0310 	orr.w	r3, r3, #16
 800467a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800467c:	2003      	movs	r0, #3
 800467e:	f000 fcdb 	bl	8005038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004682:	200f      	movs	r0, #15
 8004684:	f7fe ff5e 	bl	8003544 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004688:	f7fe fca6 	bl	8002fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40022000 	.word	0x40022000

08004698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <HAL_IncTick+0x1c>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_IncTick+0x20>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	4a03      	ldr	r2, [pc, #12]	; (80046b8 <HAL_IncTick+0x20>)
 80046aa:	6013      	str	r3, [r2, #0]
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	20000208 	.word	0x20000208
 80046b8:	20001710 	.word	0x20001710

080046bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  return uwTick;
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <HAL_GetTick+0x10>)
 80046c2:	681b      	ldr	r3, [r3, #0]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	20001710 	.word	0x20001710

080046d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046d8:	f7ff fff0 	bl	80046bc <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e8:	d005      	beq.n	80046f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <HAL_Delay+0x44>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80046f6:	bf00      	nop
 80046f8:	f7ff ffe0 	bl	80046bc <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	429a      	cmp	r2, r3
 8004706:	d8f7      	bhi.n	80046f8 <HAL_Delay+0x28>
  {
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000208 	.word	0x20000208

08004718 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0be      	b.n	80048b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d109      	bne.n	800475c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fe fc76 	bl	8003048 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 faf5 	bl	8004d4c <ADC_ConversionStop_Disable>
 8004762:	4603      	mov	r3, r0
 8004764:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	f040 8099 	bne.w	80048a6 <HAL_ADC_Init+0x18e>
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f040 8095 	bne.w	80048a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004784:	f023 0302 	bic.w	r3, r3, #2
 8004788:	f043 0202 	orr.w	r2, r3, #2
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004798:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7b1b      	ldrb	r3, [r3, #12]
 800479e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b0:	d003      	beq.n	80047ba <HAL_ADC_Init+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d102      	bne.n	80047c0 <HAL_ADC_Init+0xa8>
 80047ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047be:	e000      	b.n	80047c2 <HAL_ADC_Init+0xaa>
 80047c0:	2300      	movs	r3, #0
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	7d1b      	ldrb	r3, [r3, #20]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d119      	bne.n	8004804 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	7b1b      	ldrb	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d109      	bne.n	80047ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	3b01      	subs	r3, #1
 80047de:	035a      	lsls	r2, r3, #13
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e00b      	b.n	8004804 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	f043 0201 	orr.w	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <HAL_ADC_Init+0x1a8>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	68b9      	ldr	r1, [r7, #8]
 8004828:	430b      	orrs	r3, r1
 800482a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004834:	d003      	beq.n	800483e <HAL_ADC_Init+0x126>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d104      	bne.n	8004848 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	3b01      	subs	r3, #1
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	430a      	orrs	r2, r1
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <HAL_ADC_Init+0x1ac>)
 8004864:	4013      	ands	r3, r2
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	d10b      	bne.n	8004884 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	f043 0201 	orr.w	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004882:	e018      	b.n	80048b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f023 0312 	bic.w	r3, r3, #18
 800488c:	f043 0210 	orr.w	r2, r3, #16
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f043 0201 	orr.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048a4:	e007      	b.n	80048b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f043 0210 	orr.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	ffe1f7fd 	.word	0xffe1f7fd
 80048c4:	ff1f0efe 	.word	0xff1f0efe

080048c8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a64      	ldr	r2, [pc, #400]	; (8004a70 <HAL_ADC_Start_DMA+0x1a8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_Start_DMA+0x24>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a63      	ldr	r2, [pc, #396]	; (8004a74 <HAL_ADC_Start_DMA+0x1ac>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d106      	bne.n	80048fa <HAL_ADC_Start_DMA+0x32>
 80048ec:	4b60      	ldr	r3, [pc, #384]	; (8004a70 <HAL_ADC_Start_DMA+0x1a8>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f040 80b3 	bne.w	8004a60 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_ADC_Start_DMA+0x40>
 8004904:	2302      	movs	r3, #2
 8004906:	e0ae      	b.n	8004a66 <HAL_ADC_Start_DMA+0x19e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f9c1 	bl	8004c98 <ADC_Enable>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 809a 	bne.w	8004a56 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a4e      	ldr	r2, [pc, #312]	; (8004a74 <HAL_ADC_Start_DMA+0x1ac>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d105      	bne.n	800494c <HAL_ADC_Start_DMA+0x84>
 8004940:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_ADC_Start_DMA+0x1a8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d115      	bne.n	8004978 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004950:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004962:	2b00      	cmp	r3, #0
 8004964:	d026      	beq.n	80049b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800496e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004976:	e01d      	b.n	80049b4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a39      	ldr	r2, [pc, #228]	; (8004a70 <HAL_ADC_Start_DMA+0x1a8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d004      	beq.n	8004998 <HAL_ADC_Start_DMA+0xd0>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a38      	ldr	r2, [pc, #224]	; (8004a74 <HAL_ADC_Start_DMA+0x1ac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d10d      	bne.n	80049b4 <HAL_ADC_Start_DMA+0xec>
 8004998:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <HAL_ADC_Start_DMA+0x1a8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d006      	beq.n	80049ce <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f023 0206 	bic.w	r2, r3, #6
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80049cc:	e002      	b.n	80049d4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <HAL_ADC_Start_DMA+0x1b0>)
 80049e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <HAL_ADC_Start_DMA+0x1b4>)
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_ADC_Start_DMA+0x1b8>)
 80049f2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a0c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a18      	ldr	r0, [r3, #32]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	334c      	adds	r3, #76	; 0x4c
 8004a18:	4619      	mov	r1, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f000 fc05 	bl	800522c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a2c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a30:	d108      	bne.n	8004a44 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004a40:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004a42:	e00f      	b.n	8004a64 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a52:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004a54:	e006      	b.n	8004a64 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004a5e:	e001      	b.n	8004a64 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40012400 	.word	0x40012400
 8004a74:	40012800 	.word	0x40012800
 8004a78:	08004dcf 	.word	0x08004dcf
 8004a7c:	08004e4b 	.word	0x08004e4b
 8004a80:	08004e67 	.word	0x08004e67

08004a84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x20>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0dc      	b.n	8004c82 <HAL_ADC_ConfigChannel+0x1da>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b06      	cmp	r3, #6
 8004ad6:	d81c      	bhi.n	8004b12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b05      	subs	r3, #5
 8004aea:	221f      	movs	r2, #31
 8004aec:	fa02 f303 	lsl.w	r3, r2, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	4019      	ands	r1, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	3b05      	subs	r3, #5
 8004b04:	fa00 f203 	lsl.w	r2, r0, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34
 8004b10:	e03c      	b.n	8004b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d81c      	bhi.n	8004b54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b23      	subs	r3, #35	; 0x23
 8004b2c:	221f      	movs	r2, #31
 8004b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b32:	43db      	mvns	r3, r3
 8004b34:	4019      	ands	r1, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4413      	add	r3, r2
 8004b44:	3b23      	subs	r3, #35	; 0x23
 8004b46:	fa00 f203 	lsl.w	r2, r0, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
 8004b52:	e01b      	b.n	8004b8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	3b41      	subs	r3, #65	; 0x41
 8004b66:	221f      	movs	r2, #31
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	4019      	ands	r1, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3b41      	subs	r3, #65	; 0x41
 8004b80:	fa00 f203 	lsl.w	r2, r0, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d91c      	bls.n	8004bce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68d9      	ldr	r1, [r3, #12]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3b1e      	subs	r3, #30
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	43db      	mvns	r3, r3
 8004bae:	4019      	ands	r1, r3
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6898      	ldr	r0, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3b1e      	subs	r3, #30
 8004bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	60da      	str	r2, [r3, #12]
 8004bcc:	e019      	b.n	8004c02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6919      	ldr	r1, [r3, #16]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	2207      	movs	r2, #7
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	43db      	mvns	r3, r3
 8004be6:	4019      	ands	r1, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6898      	ldr	r0, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d003      	beq.n	8004c12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c0e:	2b11      	cmp	r3, #17
 8004c10:	d132      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_ADC_ConfigChannel+0x1e4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d125      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d126      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004c38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d11a      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c42:	4b13      	ldr	r3, [pc, #76]	; (8004c90 <HAL_ADC_ConfigChannel+0x1e8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <HAL_ADC_ConfigChannel+0x1ec>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	0c9a      	lsrs	r2, r3, #18
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c58:	e002      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f9      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0x1b2>
 8004c66:	e007      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f043 0220 	orr.w	r2, r3, #32
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr
 8004c8c:	40012400 	.word	0x40012400
 8004c90:	20000200 	.word	0x20000200
 8004c94:	431bde83 	.word	0x431bde83

08004c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d040      	beq.n	8004d38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <ADC_Enable+0xac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <ADC_Enable+0xb0>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	0c9b      	lsrs	r3, r3, #18
 8004cd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cd4:	e002      	b.n	8004cdc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f9      	bne.n	8004cd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ce2:	f7ff fceb 	bl	80046bc <HAL_GetTick>
 8004ce6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004ce8:	e01f      	b.n	8004d2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004cea:	f7ff fce7 	bl	80046bc <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d918      	bls.n	8004d2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d011      	beq.n	8004d2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f043 0210 	orr.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f043 0201 	orr.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e007      	b.n	8004d3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d1d8      	bne.n	8004cea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000200 	.word	0x20000200
 8004d48:	431bde83 	.word	0x431bde83

08004d4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d12e      	bne.n	8004dc4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0201 	bic.w	r2, r2, #1
 8004d74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d76:	f7ff fca1 	bl	80046bc <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004d7c:	e01b      	b.n	8004db6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d7e:	f7ff fc9d 	bl	80046bc <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d914      	bls.n	8004db6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10d      	bne.n	8004db6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	f043 0210 	orr.w	r2, r3, #16
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e007      	b.n	8004dc6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d0dc      	beq.n	8004d7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d127      	bne.n	8004e38 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004dfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004e02:	d115      	bne.n	8004e30 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f043 0201 	orr.w	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7fd fcc7 	bl	80027c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004e36:	e004      	b.n	8004e42 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fe13 	bl	8004a84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fe02 	bl	8004a96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	60d3      	str	r3, [r2, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	3714      	adds	r7, #20
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00

08004ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <__NVIC_GetPriorityGrouping+0x18>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	0a1b      	lsrs	r3, r3, #8
 8004eee:	f003 0307 	and.w	r3, r3, #7
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bc80      	pop	{r7}
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	db0b      	blt.n	8004f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	f003 021f 	and.w	r2, r3, #31
 8004f18:	4906      	ldr	r1, [pc, #24]	; (8004f34 <__NVIC_EnableIRQ+0x34>)
 8004f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	2001      	movs	r0, #1
 8004f22:	fa00 f202 	lsl.w	r2, r0, r2
 8004f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr
 8004f34:	e000e100 	.word	0xe000e100

08004f38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	db12      	blt.n	8004f70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	f003 021f 	and.w	r2, r3, #31
 8004f50:	490a      	ldr	r1, [pc, #40]	; (8004f7c <__NVIC_DisableIRQ+0x44>)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2001      	movs	r0, #1
 8004f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5e:	3320      	adds	r3, #32
 8004f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f64:	f3bf 8f4f 	dsb	sy
}
 8004f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f6a:	f3bf 8f6f 	isb	sy
}
 8004f6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000e100 	.word	0xe000e100

08004f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	6039      	str	r1, [r7, #0]
 8004f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	db0a      	blt.n	8004faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	490c      	ldr	r1, [pc, #48]	; (8004fcc <__NVIC_SetPriority+0x4c>)
 8004f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9e:	0112      	lsls	r2, r2, #4
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa8:	e00a      	b.n	8004fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4908      	ldr	r1, [pc, #32]	; (8004fd0 <__NVIC_SetPriority+0x50>)
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	3b04      	subs	r3, #4
 8004fb8:	0112      	lsls	r2, r2, #4
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	761a      	strb	r2, [r3, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e100 	.word	0xe000e100
 8004fd0:	e000ed00 	.word	0xe000ed00

08004fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f1c3 0307 	rsb	r3, r3, #7
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	bf28      	it	cs
 8004ff2:	2304      	movcs	r3, #4
 8004ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d902      	bls.n	8005004 <NVIC_EncodePriority+0x30>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3b03      	subs	r3, #3
 8005002:	e000      	b.n	8005006 <NVIC_EncodePriority+0x32>
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005008:	f04f 32ff 	mov.w	r2, #4294967295
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43da      	mvns	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	401a      	ands	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800501c:	f04f 31ff 	mov.w	r1, #4294967295
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	43d9      	mvns	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800502c:	4313      	orrs	r3, r2
         );
}
 800502e:	4618      	mov	r0, r3
 8005030:	3724      	adds	r7, #36	; 0x24
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ff2b 	bl	8004e9c <__NVIC_SetPriorityGrouping>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800504e:	b580      	push	{r7, lr}
 8005050:	b086      	sub	sp, #24
 8005052:	af00      	add	r7, sp, #0
 8005054:	4603      	mov	r3, r0
 8005056:	60b9      	str	r1, [r7, #8]
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005060:	f7ff ff40 	bl	8004ee4 <__NVIC_GetPriorityGrouping>
 8005064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	6978      	ldr	r0, [r7, #20]
 800506c:	f7ff ffb2 	bl	8004fd4 <NVIC_EncodePriority>
 8005070:	4602      	mov	r2, r0
 8005072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff81 	bl	8004f80 <__NVIC_SetPriority>
}
 800507e:	bf00      	nop
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	4603      	mov	r3, r0
 800508e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff ff33 	bl	8004f00 <__NVIC_EnableIRQ>
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4603      	mov	r3, r0
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff41 	bl	8004f38 <__NVIC_DisableIRQ>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e043      	b.n	800515e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	4b22      	ldr	r3, [pc, #136]	; (8005168 <HAL_DMA_Init+0xa8>)
 80050de:	4413      	add	r3, r2
 80050e0:	4a22      	ldr	r2, [pc, #136]	; (800516c <HAL_DMA_Init+0xac>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	091b      	lsrs	r3, r3, #4
 80050e8:	009a      	lsls	r2, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_DMA_Init+0xb0>)
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800510a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800510e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	bffdfff8 	.word	0xbffdfff8
 800516c:	cccccccd 	.word	0xcccccccd
 8005170:	40020000 	.word	0x40020000

08005174 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e046      	b.n	8005214 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <HAL_DMA_DeInit+0xac>)
 80051be:	4413      	add	r3, r2
 80051c0:	4a18      	ldr	r2, [pc, #96]	; (8005224 <HAL_DMA_DeInit+0xb0>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	009a      	lsls	r2, r3, #2
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_DMA_DeInit+0xb4>)
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051dc:	2101      	movs	r1, #1
 80051de:	fa01 f202 	lsl.w	r2, r1, r2
 80051e2:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	bffdfff8 	.word	0xbffdfff8
 8005224:	cccccccd 	.word	0xcccccccd
 8005228:	40020000 	.word	0x40020000

0800522c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_DMA_Start_IT+0x20>
 8005248:	2302      	movs	r3, #2
 800524a:	e04b      	b.n	80052e4 <HAL_DMA_Start_IT+0xb8>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d13a      	bne.n	80052d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f9eb 	bl	8005660 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 020e 	orr.w	r2, r2, #14
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e00f      	b.n	80052c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0204 	bic.w	r2, r2, #4
 80052b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 020a 	orr.w	r2, r2, #10
 80052c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	e005      	b.n	80052e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d008      	beq.n	8005316 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2204      	movs	r2, #4
 8005308:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e020      	b.n	8005358 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 020e 	bic.w	r2, r2, #14
 8005324:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	2101      	movs	r1, #1
 8005340:	fa01 f202 	lsl.w	r2, r1, r2
 8005344:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005356:	7bfb      	ldrb	r3, [r7, #15]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr
	...

08005364 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d005      	beq.n	8005388 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2204      	movs	r2, #4
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	e051      	b.n	800542c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 020e 	bic.w	r2, r2, #14
 8005396:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_DMA_Abort_IT+0xd4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d029      	beq.n	8005406 <HAL_DMA_Abort_IT+0xa2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_DMA_Abort_IT+0xd8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d022      	beq.n	8005402 <HAL_DMA_Abort_IT+0x9e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_DMA_Abort_IT+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01a      	beq.n	80053fc <HAL_DMA_Abort_IT+0x98>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <HAL_DMA_Abort_IT+0xe0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d012      	beq.n	80053f6 <HAL_DMA_Abort_IT+0x92>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <HAL_DMA_Abort_IT+0xe4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00a      	beq.n	80053f0 <HAL_DMA_Abort_IT+0x8c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_DMA_Abort_IT+0xe8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d102      	bne.n	80053ea <HAL_DMA_Abort_IT+0x86>
 80053e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053e8:	e00e      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 80053ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053ee:	e00b      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 80053f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053f4:	e008      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 80053f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fa:	e005      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 80053fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005400:	e002      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 8005402:	2310      	movs	r3, #16
 8005404:	e000      	b.n	8005408 <HAL_DMA_Abort_IT+0xa4>
 8005406:	2301      	movs	r3, #1
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <HAL_DMA_Abort_IT+0xec>)
 800540a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
    } 
  }
  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40020008 	.word	0x40020008
 800543c:	4002001c 	.word	0x4002001c
 8005440:	40020030 	.word	0x40020030
 8005444:	40020044 	.word	0x40020044
 8005448:	40020058 	.word	0x40020058
 800544c:	4002006c 	.word	0x4002006c
 8005450:	40020000 	.word	0x40020000

08005454 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	2204      	movs	r2, #4
 8005472:	409a      	lsls	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d04f      	beq.n	800551c <HAL_DMA_IRQHandler+0xc8>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d04a      	beq.n	800551c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d107      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a66      	ldr	r2, [pc, #408]	; (8005644 <HAL_DMA_IRQHandler+0x1f0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d029      	beq.n	8005502 <HAL_DMA_IRQHandler+0xae>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a65      	ldr	r2, [pc, #404]	; (8005648 <HAL_DMA_IRQHandler+0x1f4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d022      	beq.n	80054fe <HAL_DMA_IRQHandler+0xaa>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a63      	ldr	r2, [pc, #396]	; (800564c <HAL_DMA_IRQHandler+0x1f8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01a      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xa4>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a62      	ldr	r2, [pc, #392]	; (8005650 <HAL_DMA_IRQHandler+0x1fc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d012      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x9e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a60      	ldr	r2, [pc, #384]	; (8005654 <HAL_DMA_IRQHandler+0x200>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00a      	beq.n	80054ec <HAL_DMA_IRQHandler+0x98>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_DMA_IRQHandler+0x204>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d102      	bne.n	80054e6 <HAL_DMA_IRQHandler+0x92>
 80054e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054e4:	e00e      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 80054e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80054ea:	e00b      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 80054ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054f0:	e008      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 80054f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054f6:	e005      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 80054f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fc:	e002      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	e000      	b.n	8005504 <HAL_DMA_IRQHandler+0xb0>
 8005502:	2304      	movs	r3, #4
 8005504:	4a55      	ldr	r2, [pc, #340]	; (800565c <HAL_DMA_IRQHandler+0x208>)
 8005506:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8094 	beq.w	800563a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800551a:	e08e      	b.n	800563a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	2202      	movs	r2, #2
 8005522:	409a      	lsls	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d056      	beq.n	80055da <HAL_DMA_IRQHandler+0x186>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d051      	beq.n	80055da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 020a 	bic.w	r2, r2, #10
 8005552:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a38      	ldr	r2, [pc, #224]	; (8005644 <HAL_DMA_IRQHandler+0x1f0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d029      	beq.n	80055ba <HAL_DMA_IRQHandler+0x166>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a37      	ldr	r2, [pc, #220]	; (8005648 <HAL_DMA_IRQHandler+0x1f4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d022      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x162>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a35      	ldr	r2, [pc, #212]	; (800564c <HAL_DMA_IRQHandler+0x1f8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d01a      	beq.n	80055b0 <HAL_DMA_IRQHandler+0x15c>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a34      	ldr	r2, [pc, #208]	; (8005650 <HAL_DMA_IRQHandler+0x1fc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d012      	beq.n	80055aa <HAL_DMA_IRQHandler+0x156>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a32      	ldr	r2, [pc, #200]	; (8005654 <HAL_DMA_IRQHandler+0x200>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00a      	beq.n	80055a4 <HAL_DMA_IRQHandler+0x150>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a31      	ldr	r2, [pc, #196]	; (8005658 <HAL_DMA_IRQHandler+0x204>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d102      	bne.n	800559e <HAL_DMA_IRQHandler+0x14a>
 8005598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800559c:	e00e      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 800559e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a2:	e00b      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 80055a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055a8:	e008      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 80055aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055ae:	e005      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 80055b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b4:	e002      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 80055b6:	2320      	movs	r3, #32
 80055b8:	e000      	b.n	80055bc <HAL_DMA_IRQHandler+0x168>
 80055ba:	2302      	movs	r3, #2
 80055bc:	4a27      	ldr	r2, [pc, #156]	; (800565c <HAL_DMA_IRQHandler+0x208>)
 80055be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d034      	beq.n	800563a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80055d8:	e02f      	b.n	800563a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2208      	movs	r2, #8
 80055e0:	409a      	lsls	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4013      	ands	r3, r2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d028      	beq.n	800563c <HAL_DMA_IRQHandler+0x1e8>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d023      	beq.n	800563c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 020e 	bic.w	r2, r2, #14
 8005602:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f202 	lsl.w	r2, r1, r2
 8005612:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
    }
  }
  return;
 800563a:	bf00      	nop
 800563c:	bf00      	nop
}
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40020008 	.word	0x40020008
 8005648:	4002001c 	.word	0x4002001c
 800564c:	40020030 	.word	0x40020030
 8005650:	40020044 	.word	0x40020044
 8005654:	40020058 	.word	0x40020058
 8005658:	4002006c 	.word	0x4002006c
 800565c:	40020000 	.word	0x40020000

08005660 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f202 	lsl.w	r2, r1, r2
 800567c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d108      	bne.n	80056a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800569e:	e007      	b.n	80056b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056bc:	b480      	push	{r7}
 80056be:	b08b      	sub	sp, #44	; 0x2c
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056c6:	2300      	movs	r3, #0
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ce:	e169      	b.n	80059a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80056d0:	2201      	movs	r2, #1
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	f040 8158 	bne.w	800599e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4a9a      	ldr	r2, [pc, #616]	; (800595c <HAL_GPIO_Init+0x2a0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d05e      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
 80056f8:	4a98      	ldr	r2, [pc, #608]	; (800595c <HAL_GPIO_Init+0x2a0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d875      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 80056fe:	4a98      	ldr	r2, [pc, #608]	; (8005960 <HAL_GPIO_Init+0x2a4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d058      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
 8005704:	4a96      	ldr	r2, [pc, #600]	; (8005960 <HAL_GPIO_Init+0x2a4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d86f      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 800570a:	4a96      	ldr	r2, [pc, #600]	; (8005964 <HAL_GPIO_Init+0x2a8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d052      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
 8005710:	4a94      	ldr	r2, [pc, #592]	; (8005964 <HAL_GPIO_Init+0x2a8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d869      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 8005716:	4a94      	ldr	r2, [pc, #592]	; (8005968 <HAL_GPIO_Init+0x2ac>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04c      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
 800571c:	4a92      	ldr	r2, [pc, #584]	; (8005968 <HAL_GPIO_Init+0x2ac>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d863      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 8005722:	4a92      	ldr	r2, [pc, #584]	; (800596c <HAL_GPIO_Init+0x2b0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d046      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
 8005728:	4a90      	ldr	r2, [pc, #576]	; (800596c <HAL_GPIO_Init+0x2b0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d85d      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 800572e:	2b12      	cmp	r3, #18
 8005730:	d82a      	bhi.n	8005788 <HAL_GPIO_Init+0xcc>
 8005732:	2b12      	cmp	r3, #18
 8005734:	d859      	bhi.n	80057ea <HAL_GPIO_Init+0x12e>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <HAL_GPIO_Init+0x80>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	080057b7 	.word	0x080057b7
 8005740:	08005791 	.word	0x08005791
 8005744:	080057a3 	.word	0x080057a3
 8005748:	080057e5 	.word	0x080057e5
 800574c:	080057eb 	.word	0x080057eb
 8005750:	080057eb 	.word	0x080057eb
 8005754:	080057eb 	.word	0x080057eb
 8005758:	080057eb 	.word	0x080057eb
 800575c:	080057eb 	.word	0x080057eb
 8005760:	080057eb 	.word	0x080057eb
 8005764:	080057eb 	.word	0x080057eb
 8005768:	080057eb 	.word	0x080057eb
 800576c:	080057eb 	.word	0x080057eb
 8005770:	080057eb 	.word	0x080057eb
 8005774:	080057eb 	.word	0x080057eb
 8005778:	080057eb 	.word	0x080057eb
 800577c:	080057eb 	.word	0x080057eb
 8005780:	08005799 	.word	0x08005799
 8005784:	080057ad 	.word	0x080057ad
 8005788:	4a79      	ldr	r2, [pc, #484]	; (8005970 <HAL_GPIO_Init+0x2b4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800578e:	e02c      	b.n	80057ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	623b      	str	r3, [r7, #32]
          break;
 8005796:	e029      	b.n	80057ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	623b      	str	r3, [r7, #32]
          break;
 80057a0:	e024      	b.n	80057ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	3308      	adds	r3, #8
 80057a8:	623b      	str	r3, [r7, #32]
          break;
 80057aa:	e01f      	b.n	80057ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	330c      	adds	r3, #12
 80057b2:	623b      	str	r3, [r7, #32]
          break;
 80057b4:	e01a      	b.n	80057ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d102      	bne.n	80057c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80057be:	2304      	movs	r3, #4
 80057c0:	623b      	str	r3, [r7, #32]
          break;
 80057c2:	e013      	b.n	80057ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057cc:	2308      	movs	r3, #8
 80057ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	611a      	str	r2, [r3, #16]
          break;
 80057d6:	e009      	b.n	80057ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80057d8:	2308      	movs	r3, #8
 80057da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	615a      	str	r2, [r3, #20]
          break;
 80057e2:	e003      	b.n	80057ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80057e4:	2300      	movs	r3, #0
 80057e6:	623b      	str	r3, [r7, #32]
          break;
 80057e8:	e000      	b.n	80057ec <HAL_GPIO_Init+0x130>
          break;
 80057ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2bff      	cmp	r3, #255	; 0xff
 80057f0:	d801      	bhi.n	80057f6 <HAL_GPIO_Init+0x13a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	e001      	b.n	80057fa <HAL_GPIO_Init+0x13e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3304      	adds	r3, #4
 80057fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2bff      	cmp	r3, #255	; 0xff
 8005800:	d802      	bhi.n	8005808 <HAL_GPIO_Init+0x14c>
 8005802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	e002      	b.n	800580e <HAL_GPIO_Init+0x152>
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	3b08      	subs	r3, #8
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	210f      	movs	r1, #15
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	6a39      	ldr	r1, [r7, #32]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 80b1 	beq.w	800599e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800583c:	4b4d      	ldr	r3, [pc, #308]	; (8005974 <HAL_GPIO_Init+0x2b8>)
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	4a4c      	ldr	r2, [pc, #304]	; (8005974 <HAL_GPIO_Init+0x2b8>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6193      	str	r3, [r2, #24]
 8005848:	4b4a      	ldr	r3, [pc, #296]	; (8005974 <HAL_GPIO_Init+0x2b8>)
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	60bb      	str	r3, [r7, #8]
 8005852:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005854:	4a48      	ldr	r2, [pc, #288]	; (8005978 <HAL_GPIO_Init+0x2bc>)
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	3302      	adds	r3, #2
 800585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005860:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	220f      	movs	r2, #15
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	43db      	mvns	r3, r3
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4013      	ands	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <HAL_GPIO_Init+0x2c0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_GPIO_Init+0x1ec>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <HAL_GPIO_Init+0x2c4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00d      	beq.n	80058a4 <HAL_GPIO_Init+0x1e8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3e      	ldr	r2, [pc, #248]	; (8005984 <HAL_GPIO_Init+0x2c8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <HAL_GPIO_Init+0x1e4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3d      	ldr	r2, [pc, #244]	; (8005988 <HAL_GPIO_Init+0x2cc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <HAL_GPIO_Init+0x1e0>
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <HAL_GPIO_Init+0x1ee>
 800589c:	2304      	movs	r3, #4
 800589e:	e004      	b.n	80058aa <HAL_GPIO_Init+0x1ee>
 80058a0:	2302      	movs	r3, #2
 80058a2:	e002      	b.n	80058aa <HAL_GPIO_Init+0x1ee>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_GPIO_Init+0x1ee>
 80058a8:	2300      	movs	r3, #0
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	f002 0203 	and.w	r2, r2, #3
 80058b0:	0092      	lsls	r2, r2, #2
 80058b2:	4093      	lsls	r3, r2
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80058ba:	492f      	ldr	r1, [pc, #188]	; (8005978 <HAL_GPIO_Init+0x2bc>)
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	089b      	lsrs	r3, r3, #2
 80058c0:	3302      	adds	r3, #2
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <HAL_GPIO_Init+0x2d0>)
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	492c      	ldr	r1, [pc, #176]	; (800598c <HAL_GPIO_Init+0x2d0>)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]
 80058e0:	e006      	b.n	80058f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80058e2:	4b2a      	ldr	r3, [pc, #168]	; (800598c <HAL_GPIO_Init+0x2d0>)
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	43db      	mvns	r3, r3
 80058ea:	4928      	ldr	r1, [pc, #160]	; (800598c <HAL_GPIO_Init+0x2d0>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80058fc:	4b23      	ldr	r3, [pc, #140]	; (800598c <HAL_GPIO_Init+0x2d0>)
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	4922      	ldr	r1, [pc, #136]	; (800598c <HAL_GPIO_Init+0x2d0>)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	4313      	orrs	r3, r2
 8005906:	60cb      	str	r3, [r1, #12]
 8005908:	e006      	b.n	8005918 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800590a:	4b20      	ldr	r3, [pc, #128]	; (800598c <HAL_GPIO_Init+0x2d0>)
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	43db      	mvns	r3, r3
 8005912:	491e      	ldr	r1, [pc, #120]	; (800598c <HAL_GPIO_Init+0x2d0>)
 8005914:	4013      	ands	r3, r2
 8005916:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_GPIO_Init+0x2d0>)
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	4918      	ldr	r1, [pc, #96]	; (800598c <HAL_GPIO_Init+0x2d0>)
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	604b      	str	r3, [r1, #4]
 8005930:	e006      	b.n	8005940 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <HAL_GPIO_Init+0x2d0>)
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	43db      	mvns	r3, r3
 800593a:	4914      	ldr	r1, [pc, #80]	; (800598c <HAL_GPIO_Init+0x2d0>)
 800593c:	4013      	ands	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d021      	beq.n	8005990 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800594c:	4b0f      	ldr	r3, [pc, #60]	; (800598c <HAL_GPIO_Init+0x2d0>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_GPIO_Init+0x2d0>)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
 8005958:	e021      	b.n	800599e <HAL_GPIO_Init+0x2e2>
 800595a:	bf00      	nop
 800595c:	10320000 	.word	0x10320000
 8005960:	10310000 	.word	0x10310000
 8005964:	10220000 	.word	0x10220000
 8005968:	10210000 	.word	0x10210000
 800596c:	10120000 	.word	0x10120000
 8005970:	10110000 	.word	0x10110000
 8005974:	40021000 	.word	0x40021000
 8005978:	40010000 	.word	0x40010000
 800597c:	40010800 	.word	0x40010800
 8005980:	40010c00 	.word	0x40010c00
 8005984:	40011000 	.word	0x40011000
 8005988:	40011400 	.word	0x40011400
 800598c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_GPIO_Init+0x304>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	43db      	mvns	r3, r3
 8005998:	4909      	ldr	r1, [pc, #36]	; (80059c0 <HAL_GPIO_Init+0x304>)
 800599a:	4013      	ands	r3, r2
 800599c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	3301      	adds	r3, #1
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f ae8e 	bne.w	80056d0 <HAL_GPIO_Init+0x14>
  }
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	372c      	adds	r7, #44	; 0x2c
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr
 80059c0:	40010400 	.word	0x40010400

080059c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b089      	sub	sp, #36	; 0x24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80059d2:	e09a      	b.n	8005b0a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80059d4:	2201      	movs	r2, #1
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 808d 	beq.w	8005b04 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80059ea:	4a4e      	ldr	r2, [pc, #312]	; (8005b24 <HAL_GPIO_DeInit+0x160>)
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	3302      	adds	r3, #2
 80059f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059f6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	220f      	movs	r2, #15
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	; (8005b28 <HAL_GPIO_DeInit+0x164>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d013      	beq.n	8005a3c <HAL_GPIO_DeInit+0x78>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a45      	ldr	r2, [pc, #276]	; (8005b2c <HAL_GPIO_DeInit+0x168>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00d      	beq.n	8005a38 <HAL_GPIO_DeInit+0x74>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a44      	ldr	r2, [pc, #272]	; (8005b30 <HAL_GPIO_DeInit+0x16c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <HAL_GPIO_DeInit+0x70>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a43      	ldr	r2, [pc, #268]	; (8005b34 <HAL_GPIO_DeInit+0x170>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_GPIO_DeInit+0x6c>
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <HAL_GPIO_DeInit+0x7a>
 8005a30:	2304      	movs	r3, #4
 8005a32:	e004      	b.n	8005a3e <HAL_GPIO_DeInit+0x7a>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e002      	b.n	8005a3e <HAL_GPIO_DeInit+0x7a>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <HAL_GPIO_DeInit+0x7a>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	f002 0203 	and.w	r2, r2, #3
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	4093      	lsls	r3, r2
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d132      	bne.n	8005ab4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005a4e:	4b3a      	ldr	r3, [pc, #232]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	4938      	ldr	r1, [pc, #224]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005a5c:	4b36      	ldr	r3, [pc, #216]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	43db      	mvns	r3, r3
 8005a64:	4934      	ldr	r1, [pc, #208]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005a6a:	4b33      	ldr	r3, [pc, #204]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	4931      	ldr	r1, [pc, #196]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	43db      	mvns	r3, r3
 8005a80:	492d      	ldr	r1, [pc, #180]	; (8005b38 <HAL_GPIO_DeInit+0x174>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	220f      	movs	r2, #15
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005a96:	4a23      	ldr	r2, [pc, #140]	; (8005b24 <HAL_GPIO_DeInit+0x160>)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	089b      	lsrs	r3, r3, #2
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	43da      	mvns	r2, r3
 8005aa6:	481f      	ldr	r0, [pc, #124]	; (8005b24 <HAL_GPIO_DeInit+0x160>)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	400a      	ands	r2, r1
 8005aae:	3302      	adds	r3, #2
 8005ab0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	2bff      	cmp	r3, #255	; 0xff
 8005ab8:	d801      	bhi.n	8005abe <HAL_GPIO_DeInit+0xfa>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	e001      	b.n	8005ac2 <HAL_GPIO_DeInit+0xfe>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	d802      	bhi.n	8005ad0 <HAL_GPIO_DeInit+0x10c>
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	e002      	b.n	8005ad6 <HAL_GPIO_DeInit+0x112>
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3b08      	subs	r3, #8
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	210f      	movs	r1, #15
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae4:	43db      	mvns	r3, r3
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	2104      	movs	r1, #4
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	fa01 f303 	lsl.w	r3, r1, r3
 8005af0:	431a      	orrs	r2, r3
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f47f af5e 	bne.w	80059d4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	3724      	adds	r7, #36	; 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010800 	.word	0x40010800
 8005b2c:	40010c00 	.word	0x40010c00
 8005b30:	40011000 	.word	0x40011000
 8005b34:	40011400 	.word	0x40011400
 8005b38:	40010400 	.word	0x40010400

08005b3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	887b      	ldrh	r3, [r7, #2]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
 8005b58:	e001      	b.n	8005b5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	460b      	mov	r3, r1
 8005b74:	807b      	strh	r3, [r7, #2]
 8005b76:	4613      	mov	r3, r2
 8005b78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b7a:	787b      	ldrb	r3, [r7, #1]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b80:	887a      	ldrh	r2, [r7, #2]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005b86:	e003      	b.n	8005b90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b88:	887b      	ldrh	r3, [r7, #2]
 8005b8a:	041a      	lsls	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	611a      	str	r2, [r3, #16]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e12b      	b.n	8005e06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fd faa8 	bl	8003118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2224      	movs	r2, #36	; 0x24
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0201 	bic.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c00:	f001 f970 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 8005c04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	4a81      	ldr	r2, [pc, #516]	; (8005e10 <HAL_I2C_Init+0x274>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d807      	bhi.n	8005c20 <HAL_I2C_Init+0x84>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a80      	ldr	r2, [pc, #512]	; (8005e14 <HAL_I2C_Init+0x278>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	bf94      	ite	ls
 8005c18:	2301      	movls	r3, #1
 8005c1a:	2300      	movhi	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e006      	b.n	8005c2e <HAL_I2C_Init+0x92>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a7d      	ldr	r2, [pc, #500]	; (8005e18 <HAL_I2C_Init+0x27c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bf94      	ite	ls
 8005c28:	2301      	movls	r3, #1
 8005c2a:	2300      	movhi	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0e7      	b.n	8005e06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4a78      	ldr	r2, [pc, #480]	; (8005e1c <HAL_I2C_Init+0x280>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	0c9b      	lsrs	r3, r3, #18
 8005c40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4a6a      	ldr	r2, [pc, #424]	; (8005e10 <HAL_I2C_Init+0x274>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d802      	bhi.n	8005c70 <HAL_I2C_Init+0xd4>
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	e009      	b.n	8005c84 <HAL_I2C_Init+0xe8>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c76:	fb02 f303 	mul.w	r3, r2, r3
 8005c7a:	4a69      	ldr	r2, [pc, #420]	; (8005e20 <HAL_I2C_Init+0x284>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	3301      	adds	r3, #1
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	495c      	ldr	r1, [pc, #368]	; (8005e10 <HAL_I2C_Init+0x274>)
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	d819      	bhi.n	8005cd8 <HAL_I2C_Init+0x13c>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	1e59      	subs	r1, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cb2:	1c59      	adds	r1, r3, #1
 8005cb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cb8:	400b      	ands	r3, r1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_I2C_Init+0x138>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1e59      	subs	r1, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ccc:	3301      	adds	r3, #1
 8005cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd2:	e051      	b.n	8005d78 <HAL_I2C_Init+0x1dc>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	e04f      	b.n	8005d78 <HAL_I2C_Init+0x1dc>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d111      	bne.n	8005d04 <HAL_I2C_Init+0x168>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1e58      	subs	r0, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6859      	ldr	r1, [r3, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	440b      	add	r3, r1
 8005cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2301      	moveq	r3, #1
 8005cfe:	2300      	movne	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	e012      	b.n	8005d2a <HAL_I2C_Init+0x18e>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1e58      	subs	r0, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	0099      	lsls	r1, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Init+0x196>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e022      	b.n	8005d78 <HAL_I2C_Init+0x1dc>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10e      	bne.n	8005d58 <HAL_I2C_Init+0x1bc>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	1e58      	subs	r0, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	460b      	mov	r3, r1
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	440b      	add	r3, r1
 8005d48:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	e00f      	b.n	8005d78 <HAL_I2C_Init+0x1dc>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1e58      	subs	r0, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6859      	ldr	r1, [r3, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	0099      	lsls	r1, r3, #2
 8005d68:	440b      	add	r3, r1
 8005d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d6e:	3301      	adds	r3, #1
 8005d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d78:	6879      	ldr	r1, [r7, #4]
 8005d7a:	6809      	ldr	r1, [r1, #0]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005da6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6911      	ldr	r1, [r2, #16]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68d2      	ldr	r2, [r2, #12]
 8005db2:	4311      	orrs	r1, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695a      	ldr	r2, [r3, #20]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0201 	orr.w	r2, r2, #1
 8005de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	000186a0 	.word	0x000186a0
 8005e14:	001e847f 	.word	0x001e847f
 8005e18:	003d08ff 	.word	0x003d08ff
 8005e1c:	431bde83 	.word	0x431bde83
 8005e20:	10624dd3 	.word	0x10624dd3

08005e24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	817b      	strh	r3, [r7, #10]
 8005e36:	460b      	mov	r3, r1
 8005e38:	813b      	strh	r3, [r7, #8]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e3e:	f7fe fc3d 	bl	80046bc <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	f040 80d9 	bne.w	8006004 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2319      	movs	r3, #25
 8005e58:	2201      	movs	r2, #1
 8005e5a:	496d      	ldr	r1, [pc, #436]	; (8006010 <HAL_I2C_Mem_Write+0x1ec>)
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fa9f 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0cc      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_Mem_Write+0x56>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0c5      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d007      	beq.n	8005ea0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2221      	movs	r2, #33	; 0x21
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a3a      	ldr	r2, [r7, #32]
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a4d      	ldr	r2, [pc, #308]	; (8006014 <HAL_I2C_Mem_Write+0x1f0>)
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee2:	88f8      	ldrh	r0, [r7, #6]
 8005ee4:	893a      	ldrh	r2, [r7, #8]
 8005ee6:	8979      	ldrh	r1, [r7, #10]
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f9be 	bl	8006274 <I2C_RequestMemoryWrite>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d052      	beq.n	8005fa4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e081      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fb64 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d107      	bne.n	8005f2a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e06b      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	781a      	ldrb	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b04      	cmp	r3, #4
 8005f6a:	d11b      	bne.n	8005fa4 <HAL_I2C_Mem_Write+0x180>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d017      	beq.n	8005fa4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1aa      	bne.n	8005f02 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fb57 	bl	8006664 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00d      	beq.n	8005fd8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d107      	bne.n	8005fd4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e016      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e000      	b.n	8006006 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
  }
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	00100002 	.word	0x00100002
 8006014:	ffff0000 	.word	0xffff0000

08006018 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	460b      	mov	r3, r1
 8006026:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006028:	f7fe fb48 	bl	80046bc <HAL_GetTick>
 800602c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b20      	cmp	r3, #32
 800603c:	f040 8111 	bne.w	8006262 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2319      	movs	r3, #25
 8006046:	2201      	movs	r2, #1
 8006048:	4988      	ldr	r1, [pc, #544]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f9a8 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
 8006058:	e104      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_I2C_IsDeviceReady+0x50>
 8006064:	2302      	movs	r3, #2
 8006066:	e0fd      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	2b01      	cmp	r3, #1
 800607c:	d007      	beq.n	800608e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800609c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2224      	movs	r2, #36	; 0x24
 80060a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4a70      	ldr	r2, [pc, #448]	; (8006270 <HAL_I2C_IsDeviceReady+0x258>)
 80060b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 f966 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00d      	beq.n	80060f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e8:	d103      	bne.n	80060f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e0b6      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060f6:	897b      	ldrh	r3, [r7, #10]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006104:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006106:	f7fe fad9 	bl	80046bc <HAL_GetTick>
 800610a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800612c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800613a:	e025      	b.n	8006188 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800613c:	f7fe fabe 	bl	80046bc <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d302      	bcc.n	8006152 <HAL_I2C_IsDeviceReady+0x13a>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22a0      	movs	r2, #160	; 0xa0
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	bf0c      	ite	eq
 8006168:	2301      	moveq	r3, #1
 800616a:	2300      	movne	r3, #0
 800616c:	b2db      	uxtb	r3, r3
 800616e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2ba0      	cmp	r3, #160	; 0xa0
 8006192:	d005      	beq.n	80061a0 <HAL_I2C_IsDeviceReady+0x188>
 8006194:	7dfb      	ldrb	r3, [r7, #23]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <HAL_I2C_IsDeviceReady+0x188>
 800619a:	7dbb      	ldrb	r3, [r7, #22]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0cd      	beq.n	800613c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d129      	bne.n	800620a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2319      	movs	r3, #25
 80061e2:	2201      	movs	r2, #1
 80061e4:	4921      	ldr	r1, [pc, #132]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f8da 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e036      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	e02c      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006218:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006222:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2319      	movs	r3, #25
 800622a:	2201      	movs	r2, #1
 800622c:	490f      	ldr	r1, [pc, #60]	; (800626c <HAL_I2C_IsDeviceReady+0x254>)
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f8b6 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e012      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	3301      	adds	r3, #1
 8006242:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	f4ff af32 	bcc.w	80060b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2220      	movs	r2, #32
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	00100002 	.word	0x00100002
 8006270:	ffff0000 	.word	0xffff0000

08006274 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af02      	add	r7, sp, #8
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	4608      	mov	r0, r1
 800627e:	4611      	mov	r1, r2
 8006280:	461a      	mov	r2, r3
 8006282:	4603      	mov	r3, r0
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	460b      	mov	r3, r1
 8006288:	813b      	strh	r3, [r7, #8]
 800628a:	4613      	mov	r3, r2
 800628c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 f878 	bl	80063a0 <I2C_WaitOnFlagUntilTimeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c4:	d103      	bne.n	80062ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e05f      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	492d      	ldr	r1, [pc, #180]	; (800639c <I2C_RequestMemoryWrite+0x128>)
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f8d3 	bl	8006494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e04c      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	2300      	movs	r3, #0
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006310:	6a39      	ldr	r1, [r7, #32]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f95e 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d107      	bne.n	8006336 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006334:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02b      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d105      	bne.n	800634c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006340:	893b      	ldrh	r3, [r7, #8]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	611a      	str	r2, [r3, #16]
 800634a:	e021      	b.n	8006390 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	0a1b      	lsrs	r3, r3, #8
 8006350:	b29b      	uxth	r3, r3
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	6a39      	ldr	r1, [r7, #32]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f938 	bl	80065d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b04      	cmp	r3, #4
 8006370:	d107      	bne.n	8006382 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006380:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e005      	b.n	8006392 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	00010002 	.word	0x00010002

080063a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b0:	e048      	b.n	8006444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d044      	beq.n	8006444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ba:	f7fe f97f 	bl	80046bc <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d302      	bcc.n	80063d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d139      	bne.n	8006444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	0c1b      	lsrs	r3, r3, #16
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d10d      	bne.n	80063f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	43da      	mvns	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	4013      	ands	r3, r2
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	e00c      	b.n	8006410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	43da      	mvns	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	429a      	cmp	r2, r3
 8006414:	d116      	bne.n	8006444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e023      	b.n	800648c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b01      	cmp	r3, #1
 800644c:	d10d      	bne.n	800646a <I2C_WaitOnFlagUntilTimeout+0xca>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	43da      	mvns	r2, r3
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	e00c      	b.n	8006484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	43da      	mvns	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4013      	ands	r3, r2
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	bf0c      	ite	eq
 800647c:	2301      	moveq	r3, #1
 800647e:	2300      	movne	r3, #0
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	429a      	cmp	r2, r3
 8006488:	d093      	beq.n	80063b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a2:	e071      	b.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b2:	d123      	bne.n	80064fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	f043 0204 	orr.w	r2, r3, #4
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e067      	b.n	80065cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d041      	beq.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006504:	f7fe f8da 	bl	80046bc <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d302      	bcc.n	800651a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d136      	bne.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b01      	cmp	r3, #1
 8006522:	d10c      	bne.n	800653e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	43da      	mvns	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	b29b      	uxth	r3, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e00b      	b.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	43da      	mvns	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4013      	ands	r3, r2
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f043 0220 	orr.w	r2, r3, #32
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e021      	b.n	80065cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	0c1b      	lsrs	r3, r3, #16
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10c      	bne.n	80065ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	43da      	mvns	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	b29b      	uxth	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e00b      	b.n	80065c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f47f af6d 	bne.w	80064a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e0:	e034      	b.n	800664c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f886 	bl	80066f4 <I2C_IsAcknowledgeFailed>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e034      	b.n	800665c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d028      	beq.n	800664c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fa:	f7fe f85f 	bl	80046bc <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	d302      	bcc.n	8006610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d016      	beq.n	800664c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e007      	b.n	800665c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d1c3      	bne.n	80065e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006670:	e034      	b.n	80066dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f83e 	bl	80066f4 <I2C_IsAcknowledgeFailed>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e034      	b.n	80066ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006688:	d028      	beq.n	80066dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668a:	f7fe f817 	bl	80046bc <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d302      	bcc.n	80066a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d11d      	bne.n	80066dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d016      	beq.n	80066dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e007      	b.n	80066ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d1c3      	bne.n	8006672 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d11b      	bne.n	8006744 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006714:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0204 	orr.w	r2, r3, #4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e272      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8087 	beq.w	800687e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006770:	4b92      	ldr	r3, [pc, #584]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b04      	cmp	r3, #4
 800677a:	d00c      	beq.n	8006796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800677c:	4b8f      	ldr	r3, [pc, #572]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b08      	cmp	r3, #8
 8006786:	d112      	bne.n	80067ae <HAL_RCC_OscConfig+0x5e>
 8006788:	4b8c      	ldr	r3, [pc, #560]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006794:	d10b      	bne.n	80067ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006796:	4b89      	ldr	r3, [pc, #548]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d06c      	beq.n	800687c <HAL_RCC_OscConfig+0x12c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d168      	bne.n	800687c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e24c      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b6:	d106      	bne.n	80067c6 <HAL_RCC_OscConfig+0x76>
 80067b8:	4b80      	ldr	r3, [pc, #512]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a7f      	ldr	r2, [pc, #508]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	e02e      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCC_OscConfig+0x98>
 80067ce:	4b7b      	ldr	r3, [pc, #492]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a7a      	ldr	r2, [pc, #488]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	4b78      	ldr	r3, [pc, #480]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a77      	ldr	r2, [pc, #476]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	e01d      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067f0:	d10c      	bne.n	800680c <HAL_RCC_OscConfig+0xbc>
 80067f2:	4b72      	ldr	r3, [pc, #456]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a71      	ldr	r2, [pc, #452]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80067f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	4b6f      	ldr	r3, [pc, #444]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e00b      	b.n	8006824 <HAL_RCC_OscConfig+0xd4>
 800680c:	4b6b      	ldr	r3, [pc, #428]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a6a      	ldr	r2, [pc, #424]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	4b68      	ldr	r3, [pc, #416]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a67      	ldr	r2, [pc, #412]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800681e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d013      	beq.n	8006854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800682c:	f7fd ff46 	bl	80046bc <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006834:	f7fd ff42 	bl	80046bc <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b64      	cmp	r3, #100	; 0x64
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e200      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006846:	4b5d      	ldr	r3, [pc, #372]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0f0      	beq.n	8006834 <HAL_RCC_OscConfig+0xe4>
 8006852:	e014      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006854:	f7fd ff32 	bl	80046bc <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800685c:	f7fd ff2e 	bl	80046bc <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b64      	cmp	r3, #100	; 0x64
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e1ec      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x10c>
 800687a:	e000      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d063      	beq.n	8006952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800688a:	4b4c      	ldr	r3, [pc, #304]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00b      	beq.n	80068ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006896:	4b49      	ldr	r3, [pc, #292]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d11c      	bne.n	80068dc <HAL_RCC_OscConfig+0x18c>
 80068a2:	4b46      	ldr	r3, [pc, #280]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d116      	bne.n	80068dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068ae:	4b43      	ldr	r3, [pc, #268]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_RCC_OscConfig+0x176>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e1c0      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4939      	ldr	r1, [pc, #228]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068da:	e03a      	b.n	8006952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068e4:	4b36      	ldr	r3, [pc, #216]	; (80069c0 <HAL_RCC_OscConfig+0x270>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fd fee7 	bl	80046bc <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f2:	f7fd fee3 	bl	80046bc <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e1a1      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006904:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0f0      	beq.n	80068f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006910:	4b2a      	ldr	r3, [pc, #168]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4927      	ldr	r1, [pc, #156]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
 8006924:	e015      	b.n	8006952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006926:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <HAL_RCC_OscConfig+0x270>)
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800692c:	f7fd fec6 	bl	80046bc <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006934:	f7fd fec2 	bl	80046bc <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b02      	cmp	r3, #2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e180      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006946:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d03a      	beq.n	80069d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006966:	4b17      	ldr	r3, [pc, #92]	; (80069c4 <HAL_RCC_OscConfig+0x274>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800696c:	f7fd fea6 	bl	80046bc <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006974:	f7fd fea2 	bl	80046bc <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e160      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006986:	4b0d      	ldr	r3, [pc, #52]	; (80069bc <HAL_RCC_OscConfig+0x26c>)
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006992:	2001      	movs	r0, #1
 8006994:	f000 fafe 	bl	8006f94 <RCC_Delay>
 8006998:	e01c      	b.n	80069d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800699a:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <HAL_RCC_OscConfig+0x274>)
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a0:	f7fd fe8c 	bl	80046bc <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a6:	e00f      	b.n	80069c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069a8:	f7fd fe88 	bl	80046bc <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b02      	cmp	r3, #2
 80069b4:	d908      	bls.n	80069c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e146      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
 80069ba:	bf00      	nop
 80069bc:	40021000 	.word	0x40021000
 80069c0:	42420000 	.word	0x42420000
 80069c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c8:	4b92      	ldr	r3, [pc, #584]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e9      	bne.n	80069a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0304 	and.w	r3, r3, #4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80a6 	beq.w	8006b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e6:	4b8b      	ldr	r3, [pc, #556]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f2:	4b88      	ldr	r3, [pc, #544]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4a87      	ldr	r2, [pc, #540]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	61d3      	str	r3, [r2, #28]
 80069fe:	4b85      	ldr	r3, [pc, #532]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a0e:	4b82      	ldr	r3, [pc, #520]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d118      	bne.n	8006a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7e      	ldr	r2, [pc, #504]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a26:	f7fd fe49 	bl	80046bc <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2e:	f7fd fe45 	bl	80046bc <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b64      	cmp	r3, #100	; 0x64
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e103      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a40:	4b75      	ldr	r3, [pc, #468]	; (8006c18 <HAL_RCC_OscConfig+0x4c8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d106      	bne.n	8006a62 <HAL_RCC_OscConfig+0x312>
 8006a54:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	4a6e      	ldr	r2, [pc, #440]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	6213      	str	r3, [r2, #32]
 8006a60:	e02d      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCC_OscConfig+0x334>
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4a69      	ldr	r2, [pc, #420]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	f023 0301 	bic.w	r3, r3, #1
 8006a74:	6213      	str	r3, [r2, #32]
 8006a76:	4b67      	ldr	r3, [pc, #412]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a66      	ldr	r2, [pc, #408]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	6213      	str	r3, [r2, #32]
 8006a82:	e01c      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b05      	cmp	r3, #5
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x356>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	4a60      	ldr	r2, [pc, #384]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a92:	f043 0304 	orr.w	r3, r3, #4
 8006a96:	6213      	str	r3, [r2, #32]
 8006a98:	4b5e      	ldr	r3, [pc, #376]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	4a5d      	ldr	r2, [pc, #372]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	6213      	str	r3, [r2, #32]
 8006aa4:	e00b      	b.n	8006abe <HAL_RCC_OscConfig+0x36e>
 8006aa6:	4b5b      	ldr	r3, [pc, #364]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	4a5a      	ldr	r2, [pc, #360]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	6213      	str	r3, [r2, #32]
 8006ab2:	4b58      	ldr	r3, [pc, #352]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	4a57      	ldr	r2, [pc, #348]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ab8:	f023 0304 	bic.w	r3, r3, #4
 8006abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d015      	beq.n	8006af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ac6:	f7fd fdf9 	bl	80046bc <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006acc:	e00a      	b.n	8006ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ace:	f7fd fdf5 	bl	80046bc <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e0b1      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae4:	4b4b      	ldr	r3, [pc, #300]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ee      	beq.n	8006ace <HAL_RCC_OscConfig+0x37e>
 8006af0:	e014      	b.n	8006b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af2:	f7fd fde3 	bl	80046bc <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af8:	e00a      	b.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006afa:	f7fd fddf 	bl	80046bc <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e09b      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b10:	4b40      	ldr	r3, [pc, #256]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ee      	bne.n	8006afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d105      	bne.n	8006b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b22:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4a3b      	ldr	r2, [pc, #236]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 8087 	beq.w	8006c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 030c 	and.w	r3, r3, #12
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d061      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d146      	bne.n	8006bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4c:	4b33      	ldr	r3, [pc, #204]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b52:	f7fd fdb3 	bl	80046bc <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b58:	e008      	b.n	8006b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b5a:	f7fd fdaf 	bl	80046bc <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e06d      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b6c:	4b29      	ldr	r3, [pc, #164]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1f0      	bne.n	8006b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d108      	bne.n	8006b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006b82:	4b24      	ldr	r3, [pc, #144]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	4921      	ldr	r1, [pc, #132]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b94:	4b1f      	ldr	r3, [pc, #124]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a19      	ldr	r1, [r3, #32]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	430b      	orrs	r3, r1
 8006ba6:	491b      	ldr	r1, [pc, #108]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bac:	4b1b      	ldr	r3, [pc, #108]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb2:	f7fd fd83 	bl	80046bc <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bba:	f7fd fd7f 	bl	80046bc <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e03d      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x46a>
 8006bd8:	e035      	b.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bda:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <HAL_RCC_OscConfig+0x4cc>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fd fd6c 	bl	80046bc <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be8:	f7fd fd68 	bl	80046bc <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e026      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bfa:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x498>
 8006c06:	e01e      	b.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e019      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
 8006c14:	40021000 	.word	0x40021000
 8006c18:	40007000 	.word	0x40007000
 8006c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_OscConfig+0x500>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d106      	bne.n	8006c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d001      	beq.n	8006c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e000      	b.n	8006c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40021000 	.word	0x40021000

08006c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0d0      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c68:	4b6a      	ldr	r3, [pc, #424]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d910      	bls.n	8006c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c76:	4b67      	ldr	r3, [pc, #412]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 0207 	bic.w	r2, r3, #7
 8006c7e:	4965      	ldr	r1, [pc, #404]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c86:	4b63      	ldr	r3, [pc, #396]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d001      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e0b8      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d020      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cb0:	4b59      	ldr	r3, [pc, #356]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a58      	ldr	r2, [pc, #352]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc8:	4b53      	ldr	r3, [pc, #332]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a52      	ldr	r2, [pc, #328]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd4:	4b50      	ldr	r3, [pc, #320]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	494d      	ldr	r1, [pc, #308]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d040      	beq.n	8006d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cfa:	4b47      	ldr	r3, [pc, #284]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d115      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e07f      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d12:	4b41      	ldr	r3, [pc, #260]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e073      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d22:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e06b      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d32:	4b39      	ldr	r3, [pc, #228]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f023 0203 	bic.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	4936      	ldr	r1, [pc, #216]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d44:	f7fd fcba 	bl	80046bc <HAL_GetTick>
 8006d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4a:	e00a      	b.n	8006d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4c:	f7fd fcb6 	bl	80046bc <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e053      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d62:	4b2d      	ldr	r3, [pc, #180]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 020c 	and.w	r2, r3, #12
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d1eb      	bne.n	8006d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d74:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d210      	bcs.n	8006da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d82:	4b24      	ldr	r3, [pc, #144]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f023 0207 	bic.w	r2, r3, #7
 8006d8a:	4922      	ldr	r1, [pc, #136]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d92:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <HAL_RCC_ClockConfig+0x1c0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0307 	and.w	r3, r3, #7
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d001      	beq.n	8006da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e032      	b.n	8006e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4916      	ldr	r1, [pc, #88]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d009      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	00db      	lsls	r3, r3, #3
 8006ddc:	490e      	ldr	r1, [pc, #56]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006de2:	f000 f821 	bl	8006e28 <HAL_RCC_GetSysClockFreq>
 8006de6:	4602      	mov	r2, r0
 8006de8:	4b0b      	ldr	r3, [pc, #44]	; (8006e18 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	091b      	lsrs	r3, r3, #4
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	490a      	ldr	r1, [pc, #40]	; (8006e1c <HAL_RCC_ClockConfig+0x1c8>)
 8006df4:	5ccb      	ldrb	r3, [r1, r3]
 8006df6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dfa:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <HAL_RCC_ClockConfig+0x1cc>)
 8006dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <HAL_RCC_ClockConfig+0x1d0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fc fb9e 	bl	8003544 <HAL_InitTick>

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	40022000 	.word	0x40022000
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	0800da58 	.word	0x0800da58
 8006e20:	20000200 	.word	0x20000200
 8006e24:	20000204 	.word	0x20000204

08006e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
 8006e36:	2300      	movs	r3, #0
 8006e38:	617b      	str	r3, [r7, #20]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006e42:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_GetSysClockFreq+0x30>
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d003      	beq.n	8006e5e <HAL_RCC_GetSysClockFreq+0x36>
 8006e56:	e027      	b.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e58:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e5a:	613b      	str	r3, [r7, #16]
      break;
 8006e5c:	e027      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	0c9b      	lsrs	r3, r3, #18
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
 8006e6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d010      	beq.n	8006e98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <HAL_RCC_GetSysClockFreq+0x94>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	0c5b      	lsrs	r3, r3, #17
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	4a11      	ldr	r2, [pc, #68]	; (8006ec8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006e82:	5cd3      	ldrb	r3, [r2, r3]
 8006e84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006e8a:	fb03 f202 	mul.w	r2, r3, r2
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e004      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a0c      	ldr	r2, [pc, #48]	; (8006ecc <HAL_RCC_GetSysClockFreq+0xa4>)
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	613b      	str	r3, [r7, #16]
      break;
 8006ea6:	e002      	b.n	8006eae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetSysClockFreq+0x98>)
 8006eaa:	613b      	str	r3, [r7, #16]
      break;
 8006eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eae:	693b      	ldr	r3, [r7, #16]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	007a1200 	.word	0x007a1200
 8006ec4:	0800da70 	.word	0x0800da70
 8006ec8:	0800da80 	.word	0x0800da80
 8006ecc:	003d0900 	.word	0x003d0900

08006ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ed4:	4b02      	ldr	r3, [pc, #8]	; (8006ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	20000200 	.word	0x20000200

08006ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ee8:	f7ff fff2 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006eec:	4602      	mov	r2, r0
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	4903      	ldr	r1, [pc, #12]	; (8006f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006efa:	5ccb      	ldrb	r3, [r1, r3]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40021000 	.word	0x40021000
 8006f08:	0800da68 	.word	0x0800da68

08006f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f10:	f7ff ffde 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	0adb      	lsrs	r3, r3, #11
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	4903      	ldr	r1, [pc, #12]	; (8006f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	0800da68 	.word	0x0800da68

08006f34 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	220f      	movs	r2, #15
 8006f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <HAL_RCC_GetClockConfig+0x58>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f003 0203 	and.w	r2, r3, #3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <HAL_RCC_GetClockConfig+0x58>)
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCC_GetClockConfig+0x58>)
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_RCC_GetClockConfig+0x58>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	08db      	lsrs	r3, r3, #3
 8006f6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <HAL_RCC_GetClockConfig+0x5c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0207 	and.w	r2, r3, #7
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	40021000 	.word	0x40021000
 8006f90:	40022000 	.word	0x40022000

08006f94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <RCC_Delay+0x34>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a0a      	ldr	r2, [pc, #40]	; (8006fcc <RCC_Delay+0x38>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	0a5b      	lsrs	r3, r3, #9
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fb0:	bf00      	nop
  }
  while (Delay --);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1e5a      	subs	r2, r3, #1
 8006fb6:	60fa      	str	r2, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f9      	bne.n	8006fb0 <RCC_Delay+0x1c>
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bc80      	pop	{r7}
 8006fc6:	4770      	bx	lr
 8006fc8:	20000200 	.word	0x20000200
 8006fcc:	10624dd3 	.word	0x10624dd3

08006fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d07d      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006fec:	2300      	movs	r3, #0
 8006fee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ff0:	4b4f      	ldr	r3, [pc, #316]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10d      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	4b4c      	ldr	r3, [pc, #304]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	4a4b      	ldr	r2, [pc, #300]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	61d3      	str	r3, [r2, #28]
 8007008:	4b49      	ldr	r3, [pc, #292]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800700a:	69db      	ldr	r3, [r3, #28]
 800700c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007014:	2301      	movs	r3, #1
 8007016:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007018:	4b46      	ldr	r3, [pc, #280]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d118      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007024:	4b43      	ldr	r3, [pc, #268]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a42      	ldr	r2, [pc, #264]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800702a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800702e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007030:	f7fd fb44 	bl	80046bc <HAL_GetTick>
 8007034:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007036:	e008      	b.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007038:	f7fd fb40 	bl	80046bc <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b64      	cmp	r3, #100	; 0x64
 8007044:	d901      	bls.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e06d      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704a:	4b3a      	ldr	r3, [pc, #232]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f0      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007056:	4b36      	ldr	r3, [pc, #216]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02e      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	429a      	cmp	r2, r3
 8007072:	d027      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007074:	4b2e      	ldr	r3, [pc, #184]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800707c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800707e:	4b2e      	ldr	r3, [pc, #184]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007080:	2201      	movs	r2, #1
 8007082:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007084:	4b2c      	ldr	r3, [pc, #176]	; (8007138 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800708a:	4a29      	ldr	r2, [pc, #164]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	2b00      	cmp	r3, #0
 8007098:	d014      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709a:	f7fd fb0f 	bl	80046bc <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070a0:	e00a      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070a2:	f7fd fb0b 	bl	80046bc <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e036      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ba:	6a1b      	ldr	r3, [r3, #32]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0ee      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070c4:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	4917      	ldr	r1, [pc, #92]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070d6:	7dfb      	ldrb	r3, [r7, #23]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d105      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070dc:	4b14      	ldr	r3, [pc, #80]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	4a13      	ldr	r2, [pc, #76]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070f4:	4b0e      	ldr	r3, [pc, #56]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	490b      	ldr	r1, [pc, #44]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007102:	4313      	orrs	r3, r2
 8007104:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	4904      	ldr	r1, [pc, #16]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007120:	4313      	orrs	r3, r2
 8007122:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40021000 	.word	0x40021000
 8007134:	40007000 	.word	0x40007000
 8007138:	42420440 	.word	0x42420440

0800713c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e041      	b.n	80071d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fc f828 	bl	80031b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3304      	adds	r3, #4
 8007178:	4619      	mov	r1, r3
 800717a:	4610      	mov	r0, r2
 800717c:	f000 fc94 	bl	8007aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d001      	beq.n	80071f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e03a      	b.n	800726a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68da      	ldr	r2, [r3, #12]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0201 	orr.w	r2, r2, #1
 800720a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a18      	ldr	r2, [pc, #96]	; (8007274 <HAL_TIM_Base_Start_IT+0x98>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x58>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d009      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x58>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a14      	ldr	r2, [pc, #80]	; (8007278 <HAL_TIM_Base_Start_IT+0x9c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x58>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a13      	ldr	r2, [pc, #76]	; (800727c <HAL_TIM_Base_Start_IT+0xa0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d111      	bne.n	8007258 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b06      	cmp	r3, #6
 8007244:	d010      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007256:	e007      	b.n	8007268 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr
 8007274:	40012c00 	.word	0x40012c00
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800

08007280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e041      	b.n	8007316 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f839 	bl	800731e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3304      	adds	r3, #4
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f000 fbf2 	bl	8007aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d109      	bne.n	8007354 <HAL_TIM_PWM_Start+0x24>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b01      	cmp	r3, #1
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e022      	b.n	800739a <HAL_TIM_PWM_Start+0x6a>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b04      	cmp	r3, #4
 8007358:	d109      	bne.n	800736e <HAL_TIM_PWM_Start+0x3e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b01      	cmp	r3, #1
 8007364:	bf14      	ite	ne
 8007366:	2301      	movne	r3, #1
 8007368:	2300      	moveq	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	e015      	b.n	800739a <HAL_TIM_PWM_Start+0x6a>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d109      	bne.n	8007388 <HAL_TIM_PWM_Start+0x58>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e008      	b.n	800739a <HAL_TIM_PWM_Start+0x6a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	bf14      	ite	ne
 8007394:	2301      	movne	r3, #1
 8007396:	2300      	moveq	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e05e      	b.n	8007460 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_TIM_PWM_Start+0x82>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073b0:	e013      	b.n	80073da <HAL_TIM_PWM_Start+0xaa>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_PWM_Start+0x92>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073c0:	e00b      	b.n	80073da <HAL_TIM_PWM_Start+0xaa>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_PWM_Start+0xa2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073d0:	e003      	b.n	80073da <HAL_TIM_PWM_Start+0xaa>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2201      	movs	r2, #1
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fde0 	bl	8007fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <HAL_TIM_PWM_Start+0x138>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d107      	bne.n	8007402 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007400:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <HAL_TIM_PWM_Start+0x138>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00e      	beq.n	800742a <HAL_TIM_PWM_Start+0xfa>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007414:	d009      	beq.n	800742a <HAL_TIM_PWM_Start+0xfa>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a14      	ldr	r2, [pc, #80]	; (800746c <HAL_TIM_PWM_Start+0x13c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d004      	beq.n	800742a <HAL_TIM_PWM_Start+0xfa>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a12      	ldr	r2, [pc, #72]	; (8007470 <HAL_TIM_PWM_Start+0x140>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d111      	bne.n	800744e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b06      	cmp	r3, #6
 800743a:	d010      	beq.n	800745e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0201 	orr.w	r2, r2, #1
 800744a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800744c:	e007      	b.n	800745e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40000400 	.word	0x40000400
 8007470:	40000800 	.word	0x40000800

08007474 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fd8e 	bl	8007fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a29      	ldr	r2, [pc, #164]	; (8007538 <HAL_TIM_PWM_Stop+0xc4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d117      	bne.n	80074c6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6a1a      	ldr	r2, [r3, #32]
 800749c:	f241 1311 	movw	r3, #4369	; 0x1111
 80074a0:	4013      	ands	r3, r2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10f      	bne.n	80074c6 <HAL_TIM_PWM_Stop+0x52>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a1a      	ldr	r2, [r3, #32]
 80074ac:	f240 4344 	movw	r3, #1092	; 0x444
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d107      	bne.n	80074c6 <HAL_TIM_PWM_Stop+0x52>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80074d0:	4013      	ands	r3, r2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10f      	bne.n	80074f6 <HAL_TIM_PWM_Stop+0x82>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6a1a      	ldr	r2, [r3, #32]
 80074dc:	f240 4344 	movw	r3, #1092	; 0x444
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_PWM_Stop+0x82>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0201 	bic.w	r2, r2, #1
 80074f4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Stop+0x92>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007504:	e013      	b.n	800752e <HAL_TIM_PWM_Stop+0xba>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b04      	cmp	r3, #4
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Stop+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007514:	e00b      	b.n	800752e <HAL_TIM_PWM_Stop+0xba>
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b08      	cmp	r3, #8
 800751a:	d104      	bne.n	8007526 <HAL_TIM_PWM_Stop+0xb2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007524:	e003      	b.n	800752e <HAL_TIM_PWM_Stop+0xba>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40012c00 	.word	0x40012c00

0800753c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d122      	bne.n	8007598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d11b      	bne.n	8007598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0202 	mvn.w	r2, #2
 8007568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa76 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fa69 	bl	8007a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa78 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d122      	bne.n	80075ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d11b      	bne.n	80075ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0204 	mvn.w	r2, #4
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa4c 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 80075d8:	e005      	b.n	80075e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa3f 	bl	8007a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa4e 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d122      	bne.n	8007640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b08      	cmp	r3, #8
 8007606:	d11b      	bne.n	8007640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0208 	mvn.w	r2, #8
 8007610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2204      	movs	r2, #4
 8007616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa22 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 800762c:	e005      	b.n	800763a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa15 	bl	8007a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fa24 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b10      	cmp	r3, #16
 800764c:	d122      	bne.n	8007694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b10      	cmp	r3, #16
 800765a:	d11b      	bne.n	8007694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0210 	mvn.w	r2, #16
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2208      	movs	r2, #8
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f9f8 	bl	8007a70 <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f9eb 	bl	8007a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9fa 	bl	8007a82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0201 	mvn.w	r2, #1
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fb f95c 	bl	8002978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fce9 	bl	80080be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d10e      	bne.n	8007718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d107      	bne.n	8007718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f9be 	bl	8007a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b20      	cmp	r3, #32
 8007724:	d10e      	bne.n	8007744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b20      	cmp	r3, #32
 8007732:	d107      	bne.n	8007744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0220 	mvn.w	r2, #32
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fcb4 	bl	80080ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007766:	2302      	movs	r3, #2
 8007768:	e0ae      	b.n	80078c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0c      	cmp	r3, #12
 8007776:	f200 809f 	bhi.w	80078b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077b5 	.word	0x080077b5
 8007784:	080078b9 	.word	0x080078b9
 8007788:	080078b9 	.word	0x080078b9
 800778c:	080078b9 	.word	0x080078b9
 8007790:	080077f5 	.word	0x080077f5
 8007794:	080078b9 	.word	0x080078b9
 8007798:	080078b9 	.word	0x080078b9
 800779c:	080078b9 	.word	0x080078b9
 80077a0:	08007837 	.word	0x08007837
 80077a4:	080078b9 	.word	0x080078b9
 80077a8:	080078b9 	.word	0x080078b9
 80077ac:	080078b9 	.word	0x080078b9
 80077b0:	08007877 	.word	0x08007877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 f9d6 	bl	8007b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0208 	orr.w	r2, r2, #8
 80077ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0204 	bic.w	r2, r2, #4
 80077de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6999      	ldr	r1, [r3, #24]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	619a      	str	r2, [r3, #24]
      break;
 80077f2:	e064      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fa1c 	bl	8007c38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6999      	ldr	r1, [r3, #24]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	021a      	lsls	r2, r3, #8
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	619a      	str	r2, [r3, #24]
      break;
 8007834:	e043      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fa65 	bl	8007d0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0204 	bic.w	r2, r2, #4
 8007860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	61da      	str	r2, [r3, #28]
      break;
 8007874:	e023      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 faaf 	bl	8007de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69d9      	ldr	r1, [r3, #28]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	021a      	lsls	r2, r3, #8
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	61da      	str	r2, [r3, #28]
      break;
 80078b6:	e002      	b.n	80078be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
      break;
 80078bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_TIM_ConfigClockSource+0x1c>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e0b4      	b.n	8007a56 <HAL_TIM_ConfigClockSource+0x186>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800790a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007924:	d03e      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0xd4>
 8007926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792a:	f200 8087 	bhi.w	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 800792e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007932:	f000 8086 	beq.w	8007a42 <HAL_TIM_ConfigClockSource+0x172>
 8007936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800793a:	d87f      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 800793c:	2b70      	cmp	r3, #112	; 0x70
 800793e:	d01a      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0xa6>
 8007940:	2b70      	cmp	r3, #112	; 0x70
 8007942:	d87b      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 8007944:	2b60      	cmp	r3, #96	; 0x60
 8007946:	d050      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x11a>
 8007948:	2b60      	cmp	r3, #96	; 0x60
 800794a:	d877      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 800794c:	2b50      	cmp	r3, #80	; 0x50
 800794e:	d03c      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0xfa>
 8007950:	2b50      	cmp	r3, #80	; 0x50
 8007952:	d873      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 8007954:	2b40      	cmp	r3, #64	; 0x40
 8007956:	d058      	beq.n	8007a0a <HAL_TIM_ConfigClockSource+0x13a>
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d86f      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 800795c:	2b30      	cmp	r3, #48	; 0x30
 800795e:	d064      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x15a>
 8007960:	2b30      	cmp	r3, #48	; 0x30
 8007962:	d86b      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 8007964:	2b20      	cmp	r3, #32
 8007966:	d060      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x15a>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d867      	bhi.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d05c      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x15a>
 8007970:	2b10      	cmp	r3, #16
 8007972:	d05a      	beq.n	8007a2a <HAL_TIM_ConfigClockSource+0x15a>
 8007974:	e062      	b.n	8007a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007986:	f000 faf0 	bl	8007f6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	609a      	str	r2, [r3, #8]
      break;
 80079a2:	e04f      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079b4:	f000 fad9 	bl	8007f6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079c6:	609a      	str	r2, [r3, #8]
      break;
 80079c8:	e03c      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	461a      	mov	r2, r3
 80079d8:	f000 fa50 	bl	8007e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2150      	movs	r1, #80	; 0x50
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 faa7 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 80079e8:	e02c      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079f6:	461a      	mov	r2, r3
 80079f8:	f000 fa6e 	bl	8007ed8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2160      	movs	r1, #96	; 0x60
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fa97 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007a08:	e01c      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a16:	461a      	mov	r2, r3
 8007a18:	f000 fa30 	bl	8007e7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2140      	movs	r1, #64	; 0x40
 8007a22:	4618      	mov	r0, r3
 8007a24:	f000 fa87 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007a28:	e00c      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f000 fa7e 	bl	8007f36 <TIM_ITRx_SetConfig>
      break;
 8007a3a:	e003      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a40:	e000      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bc80      	pop	{r7}
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bc80      	pop	{r7}
 8007aa4:	4770      	bx	lr
	...

08007aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a29      	ldr	r2, [pc, #164]	; (8007b60 <TIM_Base_SetConfig+0xb8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac6:	d007      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a26      	ldr	r2, [pc, #152]	; (8007b64 <TIM_Base_SetConfig+0xbc>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a25      	ldr	r2, [pc, #148]	; (8007b68 <TIM_Base_SetConfig+0xc0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <TIM_Base_SetConfig+0xb8>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00b      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007af8:	d007      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a19      	ldr	r2, [pc, #100]	; (8007b64 <TIM_Base_SetConfig+0xbc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <TIM_Base_SetConfig+0xc0>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d108      	bne.n	8007b1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a07      	ldr	r2, [pc, #28]	; (8007b60 <TIM_Base_SetConfig+0xb8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d103      	bne.n	8007b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	615a      	str	r2, [r3, #20]
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bc80      	pop	{r7}
 8007b5e:	4770      	bx	lr
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800

08007b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	f023 0201 	bic.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 0302 	bic.w	r3, r3, #2
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a1c      	ldr	r2, [pc, #112]	; (8007c34 <TIM_OC1_SetConfig+0xc8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d10c      	bne.n	8007be2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 0308 	bic.w	r3, r3, #8
 8007bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f023 0304 	bic.w	r3, r3, #4
 8007be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <TIM_OC1_SetConfig+0xc8>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d111      	bne.n	8007c0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	693a      	ldr	r2, [r7, #16]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	621a      	str	r2, [r3, #32]
}
 8007c28:	bf00      	nop
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	40012c00 	.word	0x40012c00

08007c38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f023 0210 	bic.w	r2, r3, #16
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	021b      	lsls	r3, r3, #8
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f023 0320 	bic.w	r3, r3, #32
 8007c82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	011b      	lsls	r3, r3, #4
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <TIM_OC2_SetConfig+0xd0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d10d      	bne.n	8007cb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <TIM_OC2_SetConfig+0xd0>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d113      	bne.n	8007ce4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr
 8007d08:	40012c00 	.word	0x40012c00

08007d0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0303 	bic.w	r3, r3, #3
 8007d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <TIM_OC3_SetConfig+0xd0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d10d      	bne.n	8007d86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a14      	ldr	r2, [pc, #80]	; (8007ddc <TIM_OC3_SetConfig+0xd0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d113      	bne.n	8007db6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	621a      	str	r2, [r3, #32]
}
 8007dd0:	bf00      	nop
 8007dd2:	371c      	adds	r7, #28
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40012c00 	.word	0x40012c00

08007de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	031b      	lsls	r3, r3, #12
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a0f      	ldr	r2, [pc, #60]	; (8007e78 <TIM_OC4_SetConfig+0x98>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d109      	bne.n	8007e54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	019b      	lsls	r3, r3, #6
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr
 8007e78:	40012c00 	.word	0x40012c00

08007e7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b087      	sub	sp, #28
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	60f8      	str	r0, [r7, #12]
 8007e84:	60b9      	str	r1, [r7, #8]
 8007e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f023 030a 	bic.w	r3, r3, #10
 8007eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	621a      	str	r2, [r3, #32]
}
 8007ece:	bf00      	nop
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	f023 0210 	bic.w	r2, r3, #16
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	031b      	lsls	r3, r3, #12
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	011b      	lsls	r3, r3, #4
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	621a      	str	r2, [r3, #32]
}
 8007f2c:	bf00      	nop
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bc80      	pop	{r7}
 8007f34:	4770      	bx	lr

08007f36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f36:	b480      	push	{r7}
 8007f38:	b085      	sub	sp, #20
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f043 0307 	orr.w	r3, r3, #7
 8007f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	609a      	str	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	60f8      	str	r0, [r7, #12]
 8007f72:	60b9      	str	r1, [r7, #8]
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	021a      	lsls	r2, r3, #8
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	609a      	str	r2, [r3, #8]
}
 8007f9e:	bf00      	nop
 8007fa0:	371c      	adds	r7, #28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bc80      	pop	{r7}
 8007fa6:	4770      	bx	lr

08007fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	2201      	movs	r2, #1
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a1a      	ldr	r2, [r3, #32]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	43db      	mvns	r3, r3
 8007fca:	401a      	ands	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1a      	ldr	r2, [r3, #32]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f003 031f 	and.w	r3, r3, #31
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d101      	bne.n	8008008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008004:	2302      	movs	r3, #2
 8008006:	e046      	b.n	8008096 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d00e      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008054:	d009      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a12      	ldr	r2, [pc, #72]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d004      	beq.n	800806a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a10      	ldr	r2, [pc, #64]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d10c      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4313      	orrs	r3, r2
 800807a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr
 80080a0:	40012c00 	.word	0x40012c00
 80080a4:	40000400 	.word	0x40000400
 80080a8:	40000800 	.word	0x40000800

080080ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bc80      	pop	{r7}
 80080bc:	4770      	bx	lr

080080be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e042      	b.n	8008168 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fb f900 	bl	80032fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2224      	movs	r2, #36	; 0x24
 8008100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f941 	bl	800939c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691a      	ldr	r2, [r3, #16]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695a      	ldr	r2, [r3, #20]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68da      	ldr	r2, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e024      	b.n	80081cc <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2224      	movs	r2, #36	; 0x24
 8008186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008198:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7fb f992 	bl	80034c4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af02      	add	r7, sp, #8
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	4613      	mov	r3, r2
 80081e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d16d      	bne.n	80082d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <HAL_UART_Transmit+0x2c>
 80081fa:	88fb      	ldrh	r3, [r7, #6]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e066      	b.n	80082d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2221      	movs	r2, #33	; 0x21
 800820e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008212:	f7fc fa53 	bl	80046bc <HAL_GetTick>
 8008216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	88fa      	ldrh	r2, [r7, #6]
 800821c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	88fa      	ldrh	r2, [r7, #6]
 8008222:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800822c:	d108      	bne.n	8008240 <HAL_UART_Transmit+0x6c>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008236:	2300      	movs	r3, #0
 8008238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	e003      	b.n	8008248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008244:	2300      	movs	r3, #0
 8008246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008248:	e02a      	b.n	80082a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2200      	movs	r2, #0
 8008252:	2180      	movs	r1, #128	; 0x80
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fd77 	bl	8008d48 <UART_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e036      	b.n	80082d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10b      	bne.n	8008282 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	3302      	adds	r3, #2
 800827e:	61bb      	str	r3, [r7, #24]
 8008280:	e007      	b.n	8008292 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	3301      	adds	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008296:	b29b      	uxth	r3, r3
 8008298:	3b01      	subs	r3, #1
 800829a:	b29a      	uxth	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1cf      	bne.n	800824a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2200      	movs	r2, #0
 80082b2:	2140      	movs	r1, #64	; 0x40
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fd47 	bl	8008d48 <UART_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e006      	b.n	80082d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	4613      	mov	r3, r2
 80082e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b20      	cmp	r3, #32
 80082f2:	d121      	bne.n	8008338 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <HAL_UART_Transmit_IT+0x26>
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e01a      	b.n	800833a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	88fa      	ldrh	r2, [r7, #6]
 800830e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2221      	movs	r2, #33	; 0x21
 8008320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008332:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	e000      	b.n	800833a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008338:	2302      	movs	r3, #2
  }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	bc80      	pop	{r7}
 8008342:	4770      	bx	lr

08008344 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b20      	cmp	r3, #32
 800835c:	d112      	bne.n	8008384 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d002      	beq.n	800836a <HAL_UART_Receive_DMA+0x26>
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e00b      	b.n	8008386 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008374:	88fb      	ldrh	r3, [r7, #6]
 8008376:	461a      	mov	r2, r3
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 fd52 	bl	8008e24 <UART_Start_Receive_DMA>
 8008380:	4603      	mov	r3, r0
 8008382:	e000      	b.n	8008386 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008384:	2302      	movs	r3, #2
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b0a2      	sub	sp, #136	; 0x88
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8008398:	2301      	movs	r3, #1
 800839a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083b0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80083b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083c4:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e3      	bne.n	800839e <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3314      	adds	r3, #20
 80083dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80083e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3314      	adds	r3, #20
 80083f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80083f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80083f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80083fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e5      	bne.n	80083d6 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	2b01      	cmp	r3, #1
 8008410:	d119      	bne.n	8008446 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	f023 0310 	bic.w	r3, r3, #16
 8008428:	67bb      	str	r3, [r7, #120]	; 0x78
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	330c      	adds	r3, #12
 8008430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008432:	647a      	str	r2, [r7, #68]	; 0x44
 8008434:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800843a:	e841 2300 	strex	r3, r2, [r1]
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1e5      	bne.n	8008412 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008458:	2b00      	cmp	r3, #0
 800845a:	d004      	beq.n	8008466 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008460:	4a53      	ldr	r2, [pc, #332]	; (80085b0 <HAL_UART_Abort_IT+0x220>)
 8008462:	635a      	str	r2, [r3, #52]	; 0x34
 8008464:	e003      	b.n	800846e <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	2200      	movs	r2, #0
 800846c:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00f      	beq.n	8008496 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008480:	2b00      	cmp	r3, #0
 8008482:	d004      	beq.n	800848e <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008488:	4a4a      	ldr	r2, [pc, #296]	; (80085b4 <HAL_UART_Abort_IT+0x224>)
 800848a:	635a      	str	r2, [r3, #52]	; 0x34
 800848c:	e003      	b.n	8008496 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008492:	2200      	movs	r2, #0
 8008494:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02d      	beq.n	8008500 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	623b      	str	r3, [r7, #32]
   return(result);
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ba:	677b      	str	r3, [r7, #116]	; 0x74
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3314      	adds	r3, #20
 80084c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80084c4:	633a      	str	r2, [r7, #48]	; 0x30
 80084c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00f      	beq.n	8008500 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fc ff3d 	bl	8005364 <HAL_DMA_Abort_IT>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d004      	beq.n	80084fa <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	2200      	movs	r2, #0
 80084f6:	635a      	str	r2, [r3, #52]	; 0x34
 80084f8:	e002      	b.n	8008500 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d030      	beq.n	8008570 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3314      	adds	r3, #20
 8008514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	60fb      	str	r3, [r7, #12]
   return(result);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	673b      	str	r3, [r7, #112]	; 0x70
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3314      	adds	r3, #20
 800852c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800852e:	61fa      	str	r2, [r7, #28]
 8008530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	69b9      	ldr	r1, [r7, #24]
 8008534:	69fa      	ldr	r2, [r7, #28]
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	617b      	str	r3, [r7, #20]
   return(result);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e5      	bne.n	800850e <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d012      	beq.n	8008570 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854e:	4618      	mov	r0, r3
 8008550:	f7fc ff08 	bl	8005364 <HAL_DMA_Abort_IT>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	2200      	movs	r2, #0
 8008560:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8008562:	2301      	movs	r3, #1
 8008564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008568:	e002      	b.n	8008570 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800856a:	2300      	movs	r3, #0
 800856c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8008570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008574:	2b01      	cmp	r3, #1
 8008576:	d116      	bne.n	80085a6 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2220      	movs	r2, #32
 8008596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fabf 	bl	8008b24 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3788      	adds	r7, #136	; 0x88
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	08009093 	.word	0x08009093
 80085b4:	080090f3 	.word	0x080090f3

080085b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b0ba      	sub	sp, #232	; 0xe8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085de:	2300      	movs	r3, #0
 80085e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10f      	bne.n	800861e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <HAL_UART_IRQHandler+0x66>
 800860a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fe02 	bl	8009220 <UART_Receive_IT>
      return;
 800861c:	e25b      	b.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800861e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 80de 	beq.w	80087e4 <HAL_UART_IRQHandler+0x22c>
 8008628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008638:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80d1 	beq.w	80087e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008646:	f003 0301 	and.w	r3, r3, #1
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00b      	beq.n	8008666 <HAL_UART_IRQHandler+0xae>
 800864e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865e:	f043 0201 	orr.w	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00b      	beq.n	800868a <HAL_UART_IRQHandler+0xd2>
 8008672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008682:	f043 0202 	orr.w	r2, r3, #2
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800868a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <HAL_UART_IRQHandler+0xf6>
 8008696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a6:	f043 0204 	orr.w	r2, r3, #4
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0308 	and.w	r3, r3, #8
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d011      	beq.n	80086de <HAL_UART_IRQHandler+0x126>
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ca:	f003 0301 	and.w	r3, r3, #1
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	f043 0208 	orr.w	r2, r3, #8
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 81f2 	beq.w	8008acc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_UART_IRQHandler+0x14e>
 80086f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fd8d 	bl	8009220 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf14      	ite	ne
 8008714:	2301      	movne	r3, #1
 8008716:	2300      	moveq	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <HAL_UART_IRQHandler+0x17a>
 800872a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d04f      	beq.n	80087d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fc37 	bl	8008fa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	695b      	ldr	r3, [r3, #20]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d041      	beq.n	80087ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3314      	adds	r3, #20
 800874c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008754:	e853 3f00 	ldrex	r3, [r3]
 8008758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800875c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3314      	adds	r3, #20
 800876e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800877e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800878a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1d9      	bne.n	8008746 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d013      	beq.n	80087c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879e:	4a7e      	ldr	r2, [pc, #504]	; (8008998 <HAL_UART_IRQHandler+0x3e0>)
 80087a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fc fddc 	bl	8005364 <HAL_DMA_Abort_IT>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d016      	beq.n	80087e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087bc:	4610      	mov	r0, r2
 80087be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	e00e      	b.n	80087e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f9a5 	bl	8008b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	e00a      	b.n	80087e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9a1 	bl	8008b12 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	e006      	b.n	80087e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f99d 	bl	8008b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80087de:	e175      	b.n	8008acc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	bf00      	nop
    return;
 80087e2:	e173      	b.n	8008acc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	f040 814f 	bne.w	8008a8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 8148 	beq.w	8008a8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 8141 	beq.w	8008a8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800880a:	2300      	movs	r3, #0
 800880c:	60bb      	str	r3, [r7, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80b6 	beq.w	800899c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800883c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8145 	beq.w	8008ad0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800884a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800884e:	429a      	cmp	r2, r3
 8008850:	f080 813e 	bcs.w	8008ad0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b20      	cmp	r3, #32
 8008864:	f000 8088 	beq.w	8008978 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008876:	e853 3f00 	ldrex	r3, [r3]
 800887a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800887e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008886:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	330c      	adds	r3, #12
 8008890:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008894:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1d9      	bne.n	8008868 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3314      	adds	r3, #20
 80088ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088be:	e853 3f00 	ldrex	r3, [r3]
 80088c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088c6:	f023 0301 	bic.w	r3, r3, #1
 80088ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3314      	adds	r3, #20
 80088d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e1      	bne.n	80088b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3314      	adds	r3, #20
 80088f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3314      	adds	r3, #20
 8008910:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008914:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008916:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800891a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e3      	bne.n	80088f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	330c      	adds	r3, #12
 800893c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	330c      	adds	r3, #12
 8008956:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800895a:	65ba      	str	r2, [r7, #88]	; 0x58
 800895c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008960:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e3      	bne.n	8008936 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	4618      	mov	r0, r3
 8008974:	f7fc fcba 	bl	80052ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008986:	b29b      	uxth	r3, r3
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	b29b      	uxth	r3, r3
 800898c:	4619      	mov	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f8d1 	bl	8008b36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008994:	e09c      	b.n	8008ad0 <HAL_UART_IRQHandler+0x518>
 8008996:	bf00      	nop
 8008998:	0800906b 	.word	0x0800906b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 808e 	beq.w	8008ad4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80089b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 8089 	beq.w	8008ad4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	330c      	adds	r3, #12
 80089c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	e853 3f00 	ldrex	r3, [r3]
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	330c      	adds	r3, #12
 80089e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089e6:	647a      	str	r2, [r7, #68]	; 0x44
 80089e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ee:	e841 2300 	strex	r3, r2, [r1]
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1e3      	bne.n	80089c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	3314      	adds	r3, #20
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	623b      	str	r3, [r7, #32]
   return(result);
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	f023 0301 	bic.w	r3, r3, #1
 8008a10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3314      	adds	r3, #20
 8008a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a1e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e3      	bne.n	80089fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	330c      	adds	r3, #12
 8008a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0310 	bic.w	r3, r3, #16
 8008a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a64:	61fa      	str	r2, [r7, #28]
 8008a66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	69b9      	ldr	r1, [r7, #24]
 8008a6a:	69fa      	ldr	r2, [r7, #28]
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	617b      	str	r3, [r7, #20]
   return(result);
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e3      	bne.n	8008a40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f856 	bl	8008b36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a8a:	e023      	b.n	8008ad4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <HAL_UART_IRQHandler+0x4f4>
 8008a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fb54 	bl	8009152 <UART_Transmit_IT>
    return;
 8008aaa:	e014      	b.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00e      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
 8008ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fb93 	bl	80091f0 <UART_EndTransmit_IT>
    return;
 8008aca:	e004      	b.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008acc:	bf00      	nop
 8008ace:	e002      	b.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ad0:	bf00      	nop
 8008ad2:	e000      	b.n	8008ad6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ad4:	bf00      	nop
  }
}
 8008ad6:	37e8      	adds	r7, #232	; 0xe8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr

08008aee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bc80      	pop	{r7}
 8008afe:	4770      	bx	lr

08008b00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b1a:	bf00      	nop
 8008b1c:	370c      	adds	r7, #12
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bc80      	pop	{r7}
 8008b22:	4770      	bx	lr

08008b24 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b083      	sub	sp, #12
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b42:	bf00      	nop
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b09c      	sub	sp, #112	; 0x70
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d172      	bne.n	8008c4e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	330c      	adds	r3, #12
 8008b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e5      	bne.n	8008b6e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8008bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8008bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e5      	bne.n	8008ba2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3314      	adds	r3, #20
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	e853 3f00 	ldrex	r3, [r3]
 8008be4:	623b      	str	r3, [r7, #32]
   return(result);
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bec:	663b      	str	r3, [r7, #96]	; 0x60
 8008bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e5      	bne.n	8008bd6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d119      	bne.n	8008c4e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f023 0310 	bic.w	r3, r3, #16
 8008c30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	330c      	adds	r3, #12
 8008c38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c3a:	61fa      	str	r2, [r7, #28]
 8008c3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	69b9      	ldr	r1, [r7, #24]
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	617b      	str	r3, [r7, #20]
   return(result);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e5      	bne.n	8008c1a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c50:	2200      	movs	r2, #0
 8008c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d106      	bne.n	8008c6a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c5e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c60:	4619      	mov	r1, r3
 8008c62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c64:	f7ff ff67 	bl	8008b36 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c68:	e002      	b.n	8008c70 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008c6a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c6c:	f7ff ff3f 	bl	8008aee <HAL_UART_RxCpltCallback>
}
 8008c70:	bf00      	nop
 8008c72:	3770      	adds	r7, #112	; 0x70
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d108      	bne.n	8008ca6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff ff49 	bl	8008b36 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ca4:	e002      	b.n	8008cac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff ff2a 	bl	8008b00 <HAL_UART_RxHalfCpltCallback>
}
 8008cac:	bf00      	nop
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	695b      	ldr	r3, [r3, #20]
 8008ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b21      	cmp	r3, #33	; 0x21
 8008ce6:	d108      	bne.n	8008cfa <UART_DMAError+0x46>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	f000 f92f 	bl	8008f58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bf14      	ite	ne
 8008d08:	2301      	movne	r3, #1
 8008d0a:	2300      	moveq	r3, #0
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b22      	cmp	r3, #34	; 0x22
 8008d1a:	d108      	bne.n	8008d2e <UART_DMAError+0x7a>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d28:	68b8      	ldr	r0, [r7, #8]
 8008d2a:	f000 f93c 	bl	8008fa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d32:	f043 0210 	orr.w	r2, r3, #16
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d3a:	68b8      	ldr	r0, [r7, #8]
 8008d3c:	f7ff fee9 	bl	8008b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b090      	sub	sp, #64	; 0x40
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	4613      	mov	r3, r2
 8008d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d58:	e050      	b.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d04c      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d007      	beq.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d68:	f7fb fca8 	bl	80046bc <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d241      	bcs.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	330c      	adds	r3, #12
 8008d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d98:	637a      	str	r2, [r7, #52]	; 0x34
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e5      	bne.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	3314      	adds	r3, #20
 8008db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	613b      	str	r3, [r7, #16]
   return(result);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f023 0301 	bic.w	r3, r3, #1
 8008dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dcc:	623a      	str	r2, [r7, #32]
 8008dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd0:	69f9      	ldr	r1, [r7, #28]
 8008dd2:	6a3a      	ldr	r2, [r7, #32]
 8008dd4:	e841 2300 	strex	r3, r2, [r1]
 8008dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1e5      	bne.n	8008dac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e00f      	b.n	8008e1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4013      	ands	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d09f      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3740      	adds	r7, #64	; 0x40
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b098      	sub	sp, #96	; 0x60
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2200      	movs	r2, #0
 8008e42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2222      	movs	r2, #34	; 0x22
 8008e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e50:	4a3e      	ldr	r2, [pc, #248]	; (8008f4c <UART_Start_Receive_DMA+0x128>)
 8008e52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e58:	4a3d      	ldr	r2, [pc, #244]	; (8008f50 <UART_Start_Receive_DMA+0x12c>)
 8008e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e60:	4a3c      	ldr	r2, [pc, #240]	; (8008f54 <UART_Start_Receive_DMA+0x130>)
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e68:	2200      	movs	r2, #0
 8008e6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e6c:	f107 0308 	add.w	r3, r7, #8
 8008e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	88fb      	ldrh	r3, [r7, #6]
 8008e84:	f7fc f9d2 	bl	800522c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d019      	beq.n	8008eda <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ebc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	330c      	adds	r3, #12
 8008ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ec6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee4:	e853 3f00 	ldrex	r3, [r3]
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	f043 0301 	orr.w	r3, r3, #1
 8008ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3314      	adds	r3, #20
 8008ef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008efa:	63ba      	str	r2, [r7, #56]	; 0x38
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f02:	e841 2300 	strex	r3, r2, [r1]
 8008f06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1e5      	bne.n	8008eda <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3314      	adds	r3, #20
 8008f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f24:	653b      	str	r3, [r7, #80]	; 0x50
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6a39      	ldr	r1, [r7, #32]
 8008f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e5      	bne.n	8008f0e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3760      	adds	r7, #96	; 0x60
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	08008b4d 	.word	0x08008b4d
 8008f50:	08008c79 	.word	0x08008c79
 8008f54:	08008cb5 	.word	0x08008cb5

08008f58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b089      	sub	sp, #36	; 0x24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	330c      	adds	r3, #12
 8008f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	330c      	adds	r3, #12
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	61ba      	str	r2, [r7, #24]
 8008f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	6979      	ldr	r1, [r7, #20]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e5      	bne.n	8008f60 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008f9c:	bf00      	nop
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b095      	sub	sp, #84	; 0x54
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	330c      	adds	r3, #12
 8008fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fce:	643a      	str	r2, [r7, #64]	; 0x40
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fd6:	e841 2300 	strex	r3, r2, [r1]
 8008fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1e5      	bne.n	8008fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	3314      	adds	r3, #20
 8008fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	f023 0301 	bic.w	r3, r3, #1
 8008ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3314      	adds	r3, #20
 8009000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e5      	bne.n	8008fe2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	2b01      	cmp	r3, #1
 800901c:	d119      	bne.n	8009052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	330c      	adds	r3, #12
 8009024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	60bb      	str	r3, [r7, #8]
   return(result);
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f023 0310 	bic.w	r3, r3, #16
 8009034:	647b      	str	r3, [r7, #68]	; 0x44
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	330c      	adds	r3, #12
 800903c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800903e:	61ba      	str	r2, [r7, #24]
 8009040:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6979      	ldr	r1, [r7, #20]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	613b      	str	r3, [r7, #16]
   return(result);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e5      	bne.n	800901e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009060:	bf00      	nop
 8009062:	3754      	adds	r7, #84	; 0x54
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr

0800906a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7ff fd44 	bl	8008b12 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	2200      	movs	r2, #0
 80090a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d117      	bne.n	80090ea <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f7ff fd1e 	bl	8008b24 <HAL_UART_AbortCpltCallback>
 80090e8:	e000      	b.n	80090ec <UART_DMATxAbortCallback+0x5a>
      return;
 80090ea:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009104:	2200      	movs	r2, #0
 8009106:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	2b00      	cmp	r3, #0
 8009118:	d117      	bne.n	800914a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2220      	movs	r2, #32
 8009130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff fcee 	bl	8008b24 <HAL_UART_AbortCpltCallback>
 8009148:	e000      	b.n	800914c <UART_DMARxAbortCallback+0x5a>
      return;
 800914a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b21      	cmp	r3, #33	; 0x21
 8009164:	d13e      	bne.n	80091e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916e:	d114      	bne.n	800919a <UART_Transmit_IT+0x48>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d110      	bne.n	800919a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800918c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	1c9a      	adds	r2, r3, #2
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	621a      	str	r2, [r3, #32]
 8009198:	e008      	b.n	80091ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	1c59      	adds	r1, r3, #1
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6211      	str	r1, [r2, #32]
 80091a4:	781a      	ldrb	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4619      	mov	r1, r3
 80091ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10f      	bne.n	80091e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091e0:	2300      	movs	r3, #0
 80091e2:	e000      	b.n	80091e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091e4:	2302      	movs	r3, #2
  }
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr

080091f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009206:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2220      	movs	r2, #32
 800920c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7ff fc63 	bl	8008adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08c      	sub	sp, #48	; 0x30
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b22      	cmp	r3, #34	; 0x22
 8009232:	f040 80ae 	bne.w	8009392 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923e:	d117      	bne.n	8009270 <UART_Receive_IT+0x50>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d113      	bne.n	8009270 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009248:	2300      	movs	r3, #0
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	b29b      	uxth	r3, r3
 800925a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925e:	b29a      	uxth	r2, r3
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	1c9a      	adds	r2, r3, #2
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	629a      	str	r2, [r3, #40]	; 0x28
 800926e:	e026      	b.n	80092be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009276:	2300      	movs	r3, #0
 8009278:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	d007      	beq.n	8009294 <UART_Receive_IT+0x74>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <UART_Receive_IT+0x82>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d106      	bne.n	80092a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	b2da      	uxtb	r2, r3
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	701a      	strb	r2, [r3, #0]
 80092a0:	e008      	b.n	80092b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	3b01      	subs	r3, #1
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	4619      	mov	r1, r3
 80092cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d15d      	bne.n	800938e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0220 	bic.w	r2, r2, #32
 80092e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	695a      	ldr	r2, [r3, #20]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2220      	movs	r2, #32
 8009306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	2b01      	cmp	r3, #1
 8009316:	d135      	bne.n	8009384 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800933e:	623a      	str	r2, [r7, #32]
 8009340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	69f9      	ldr	r1, [r7, #28]
 8009344:	6a3a      	ldr	r2, [r7, #32]
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	61bb      	str	r3, [r7, #24]
   return(result);
 800934c:	69bb      	ldr	r3, [r7, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e5      	bne.n	800931e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b10      	cmp	r3, #16
 800935e:	d10a      	bne.n	8009376 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff fbda 	bl	8008b36 <HAL_UARTEx_RxEventCallback>
 8009382:	e002      	b.n	800938a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff fbb2 	bl	8008aee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	e002      	b.n	8009394 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800938e:	2300      	movs	r3, #0
 8009390:	e000      	b.n	8009394 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009392:	2302      	movs	r3, #2
  }
}
 8009394:	4618      	mov	r0, r3
 8009396:	3730      	adds	r7, #48	; 0x30
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68da      	ldr	r2, [r3, #12]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093d6:	f023 030c 	bic.w	r3, r3, #12
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	430b      	orrs	r3, r1
 80093e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699a      	ldr	r2, [r3, #24]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a2c      	ldr	r2, [pc, #176]	; (80094b0 <UART_SetConfig+0x114>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d103      	bne.n	800940c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009404:	f7fd fd82 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	e002      	b.n	8009412 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800940c:	f7fd fd6a 	bl	8006ee4 <HAL_RCC_GetPCLK1Freq>
 8009410:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009a      	lsls	r2, r3, #2
 800941c:	441a      	add	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	fbb2 f3f3 	udiv	r3, r2, r3
 8009428:	4a22      	ldr	r2, [pc, #136]	; (80094b4 <UART_SetConfig+0x118>)
 800942a:	fba2 2303 	umull	r2, r3, r2, r3
 800942e:	095b      	lsrs	r3, r3, #5
 8009430:	0119      	lsls	r1, r3, #4
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	4613      	mov	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4413      	add	r3, r2
 800943a:	009a      	lsls	r2, r3, #2
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	fbb2 f2f3 	udiv	r2, r2, r3
 8009448:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <UART_SetConfig+0x118>)
 800944a:	fba3 0302 	umull	r0, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	2064      	movs	r0, #100	; 0x64
 8009452:	fb00 f303 	mul.w	r3, r0, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	3332      	adds	r3, #50	; 0x32
 800945c:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <UART_SetConfig+0x118>)
 800945e:	fba2 2303 	umull	r2, r3, r2, r3
 8009462:	095b      	lsrs	r3, r3, #5
 8009464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009468:	4419      	add	r1, r3
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009a      	lsls	r2, r3, #2
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009480:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <UART_SetConfig+0x118>)
 8009482:	fba3 0302 	umull	r0, r3, r3, r2
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	2064      	movs	r0, #100	; 0x64
 800948a:	fb00 f303 	mul.w	r3, r0, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	3332      	adds	r3, #50	; 0x32
 8009494:	4a07      	ldr	r2, [pc, #28]	; (80094b4 <UART_SetConfig+0x118>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	440a      	add	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094a8:	bf00      	nop
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40013800 	.word	0x40013800
 80094b4:	51eb851f 	.word	0x51eb851f

080094b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	4603      	mov	r3, r0
 80094c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80094c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094ca:	2b84      	cmp	r3, #132	; 0x84
 80094cc:	d005      	beq.n	80094da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	4413      	add	r3, r2
 80094d6:	3303      	adds	r3, #3
 80094d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094da:	68fb      	ldr	r3, [r7, #12]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bc80      	pop	{r7}
 80094e4:	4770      	bx	lr

080094e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ec:	f3ef 8305 	mrs	r3, IPSR
 80094f0:	607b      	str	r3, [r7, #4]
  return(result);
 80094f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf14      	ite	ne
 80094f8:	2301      	movne	r3, #1
 80094fa:	2300      	moveq	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
}
 80094fe:	4618      	mov	r0, r3
 8009500:	370c      	adds	r7, #12
 8009502:	46bd      	mov	sp, r7
 8009504:	bc80      	pop	{r7}
 8009506:	4770      	bx	lr

08009508 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800950c:	f001 fd0a 	bl	800af24 <vTaskStartScheduler>
  
  return osOK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	bd80      	pop	{r7, pc}

08009516 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009518:	b089      	sub	sp, #36	; 0x24
 800951a:	af04      	add	r7, sp, #16
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	695b      	ldr	r3, [r3, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d020      	beq.n	800956a <osThreadCreate+0x54>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d01c      	beq.n	800956a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685c      	ldr	r4, [r3, #4]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	691e      	ldr	r6, [r3, #16]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff ffb8 	bl	80094b8 <makeFreeRtosPriority>
 8009548:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009552:	9202      	str	r2, [sp, #8]
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	9100      	str	r1, [sp, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	4632      	mov	r2, r6
 800955c:	4629      	mov	r1, r5
 800955e:	4620      	mov	r0, r4
 8009560:	f001 f8f0 	bl	800a744 <xTaskCreateStatic>
 8009564:	4603      	mov	r3, r0
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	e01c      	b.n	80095a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685c      	ldr	r4, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009576:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff ff9a 	bl	80094b8 <makeFreeRtosPriority>
 8009584:	4602      	mov	r2, r0
 8009586:	f107 030c 	add.w	r3, r7, #12
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	9200      	str	r2, [sp, #0]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	4632      	mov	r2, r6
 8009592:	4629      	mov	r1, r5
 8009594:	4620      	mov	r0, r4
 8009596:	f001 f931 	bl	800a7fc <xTaskCreate>
 800959a:	4603      	mov	r3, r0
 800959c:	2b01      	cmp	r3, #1
 800959e:	d001      	beq.n	80095a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e000      	b.n	80095a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80095a4:	68fb      	ldr	r3, [r7, #12]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080095b0 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80095b0:	b480      	push	{r7}
 80095b2:	af00      	add	r7, sp, #0
  taskYIELD();
 80095b4:	4b06      	ldr	r3, [pc, #24]	; (80095d0 <osThreadYield+0x20>)
 80095b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ba:	601a      	str	r2, [r3, #0]
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bc80      	pop	{r7}
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	e000ed04 	.word	0xe000ed04

080095d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <osDelay+0x16>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	e000      	b.n	80095ec <osDelay+0x18>
 80095ea:	2301      	movs	r3, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fac9 	bl	800ab84 <vTaskDelay>
  
  return osOK;
 80095f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	460b      	mov	r3, r1
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d013      	beq.n	800963a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d101      	bne.n	800961c <osTimerCreate+0x20>
 8009618:	2101      	movs	r1, #1
 800961a:	e000      	b.n	800961e <osTimerCreate+0x22>
 800961c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8009626:	9201      	str	r2, [sp, #4]
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	460a      	mov	r2, r1
 800962e:	2101      	movs	r1, #1
 8009630:	480b      	ldr	r0, [pc, #44]	; (8009660 <osTimerCreate+0x64>)
 8009632:	f002 fc20 	bl	800be76 <xTimerCreateStatic>
 8009636:	4603      	mov	r3, r0
 8009638:	e00e      	b.n	8009658 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800963a:	7afb      	ldrb	r3, [r7, #11]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <osTimerCreate+0x48>
 8009640:	2201      	movs	r2, #1
 8009642:	e000      	b.n	8009646 <osTimerCreate+0x4a>
 8009644:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2101      	movs	r1, #1
 8009650:	4803      	ldr	r0, [pc, #12]	; (8009660 <osTimerCreate+0x64>)
 8009652:	f002 fbef 	bl	800be34 <xTimerCreate>
 8009656:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	0800da3c 	.word	0x0800da3c

08009664 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af02      	add	r7, sp, #8
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800966e:	2300      	movs	r3, #0
 8009670:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8009672:	2300      	movs	r3, #0
 8009674:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <osTimerStart+0x20>
    ticks = 1;
 8009680:	2301      	movs	r3, #1
 8009682:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8009684:	f7ff ff2f 	bl	80094e6 <inHandlerMode>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d01a      	beq.n	80096c4 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800968e:	f107 030c 	add.w	r3, r7, #12
 8009692:	2200      	movs	r2, #0
 8009694:	9200      	str	r2, [sp, #0]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	2109      	movs	r1, #9
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f002 fc5a 	bl	800bf54 <xTimerGenericCommand>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d002      	beq.n	80096ac <osTimerStart+0x48>
    {
      result = osErrorOS;
 80096a6:	23ff      	movs	r3, #255	; 0xff
 80096a8:	617b      	str	r3, [r7, #20]
 80096aa:	e018      	b.n	80096de <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d015      	beq.n	80096de <osTimerStart+0x7a>
 80096b2:	4b0d      	ldr	r3, [pc, #52]	; (80096e8 <osTimerStart+0x84>)
 80096b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	e00c      	b.n	80096de <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80096c4:	2300      	movs	r3, #0
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	2300      	movs	r3, #0
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	2104      	movs	r1, #4
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fc40 	bl	800bf54 <xTimerGenericCommand>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d001      	beq.n	80096de <osTimerStart+0x7a>
      result = osErrorOS;
 80096da:	23ff      	movs	r3, #255	; 0xff
 80096dc:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80096de:	697b      	ldr	r3, [r7, #20]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af02      	add	r7, sp, #8
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80096fe:	f7ff fef2 	bl	80094e6 <inHandlerMode>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01c      	beq.n	8009742 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	f107 0208 	add.w	r2, r7, #8
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4613      	mov	r3, r2
 8009716:	2201      	movs	r2, #1
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f002 fa0d 	bl	800bb38 <xTaskGenericNotifyFromISR>
 800971e:	4603      	mov	r3, r0
 8009720:	2b01      	cmp	r3, #1
 8009722:	d002      	beq.n	800972a <osSignalSet+0x3e>
      return 0x80000000;
 8009724:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009728:	e019      	b.n	800975e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d015      	beq.n	800975c <osSignalSet+0x70>
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <osSignalSet+0x7c>)
 8009732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009736:	601a      	str	r2, [r3, #0]
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	e00c      	b.n	800975c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	2201      	movs	r2, #1
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 f94a 	bl	800b9e4 <xTaskGenericNotify>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d002      	beq.n	800975c <osSignalSet+0x70>
    return 0x80000000;
 8009756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800975a:	e000      	b.n	800975e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800975c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800976c:	b590      	push	{r4, r7, lr}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009778:	2300      	movs	r3, #0
 800977a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d103      	bne.n	8009790 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009788:	f04f 33ff 	mov.w	r3, #4294967295
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	e009      	b.n	80097a4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d006      	beq.n	80097a4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <osSignalWait+0x38>
      ticks = 1;
 80097a0:	2301      	movs	r3, #1
 80097a2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80097a4:	f7ff fe9f 	bl	80094e6 <inHandlerMode>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80097ae:	2382      	movs	r3, #130	; 0x82
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	e01b      	b.n	80097ec <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80097b4:	68b9      	ldr	r1, [r7, #8]
 80097b6:	f107 0310 	add.w	r3, r7, #16
 80097ba:	1d1a      	adds	r2, r3, #4
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2000      	movs	r0, #0
 80097c0:	f002 f8b0 	bl	800b924 <xTaskNotifyWait>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d008      	beq.n	80097dc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <osSignalWait+0x6a>
 80097d0:	2300      	movs	r3, #0
 80097d2:	613b      	str	r3, [r7, #16]
 80097d4:	e00a      	b.n	80097ec <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	e007      	b.n	80097ec <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	da02      	bge.n	80097e8 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80097e2:	2386      	movs	r3, #134	; 0x86
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e001      	b.n	80097ec <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80097e8:	2308      	movs	r3, #8
 80097ea:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	461c      	mov	r4, r3
 80097f0:	f107 0310 	add.w	r3, r7, #16
 80097f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	3724      	adds	r7, #36	; 0x24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd90      	pop	{r4, r7, pc}

08009804 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00f      	beq.n	8009836 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d10a      	bne.n	8009832 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2203      	movs	r2, #3
 8009822:	9200      	str	r2, [sp, #0]
 8009824:	2200      	movs	r2, #0
 8009826:	2100      	movs	r1, #0
 8009828:	2001      	movs	r0, #1
 800982a:	f000 fa55 	bl	8009cd8 <xQueueGenericCreateStatic>
 800982e:	4603      	mov	r3, r0
 8009830:	e016      	b.n	8009860 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	e014      	b.n	8009860 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d110      	bne.n	800985e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800983c:	2203      	movs	r2, #3
 800983e:	2100      	movs	r1, #0
 8009840:	2001      	movs	r0, #1
 8009842:	f000 fac0 	bl	8009dc6 <xQueueGenericCreate>
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <osSemaphoreCreate+0x56>
 800984e:	2300      	movs	r3, #0
 8009850:	2200      	movs	r2, #0
 8009852:	2100      	movs	r1, #0
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 fb13 	bl	8009e80 <xQueueGenericSend>
      return sema;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	e000      	b.n	8009860 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800985e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009868:	b590      	push	{r4, r7, lr}
 800986a:	b085      	sub	sp, #20
 800986c:	af02      	add	r7, sp, #8
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d011      	beq.n	800989e <osMessageCreate+0x36>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00d      	beq.n	800989e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6818      	ldr	r0, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6859      	ldr	r1, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689a      	ldr	r2, [r3, #8]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2400      	movs	r4, #0
 8009894:	9400      	str	r4, [sp, #0]
 8009896:	f000 fa1f 	bl	8009cd8 <xQueueGenericCreateStatic>
 800989a:	4603      	mov	r3, r0
 800989c:	e008      	b.n	80098b0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	4619      	mov	r1, r3
 80098aa:	f000 fa8c 	bl	8009dc6 <xQueueGenericCreate>
 80098ae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	370c      	adds	r7, #12
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd90      	pop	{r4, r7, pc}

080098b8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d101      	bne.n	80098d6 <osMessagePut+0x1e>
    ticks = 1;
 80098d2:	2301      	movs	r3, #1
 80098d4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80098d6:	f7ff fe06 	bl	80094e6 <inHandlerMode>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d018      	beq.n	8009912 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80098e0:	f107 0210 	add.w	r2, r7, #16
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	2300      	movs	r3, #0
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fbc6 	bl	800a07c <xQueueGenericSendFromISR>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d001      	beq.n	80098fa <osMessagePut+0x42>
      return osErrorOS;
 80098f6:	23ff      	movs	r3, #255	; 0xff
 80098f8:	e018      	b.n	800992c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d014      	beq.n	800992a <osMessagePut+0x72>
 8009900:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <osMessagePut+0x7c>)
 8009902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009906:	601a      	str	r2, [r3, #0]
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	e00b      	b.n	800992a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009912:	f107 0108 	add.w	r1, r7, #8
 8009916:	2300      	movs	r3, #0
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fab0 	bl	8009e80 <xQueueGenericSend>
 8009920:	4603      	mov	r3, r0
 8009922:	2b01      	cmp	r3, #1
 8009924:	d001      	beq.n	800992a <osMessagePut+0x72>
      return osErrorOS;
 8009926:	23ff      	movs	r3, #255	; 0xff
 8009928:	e000      	b.n	800992c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed04 	.word	0xe000ed04

08009938 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b08b      	sub	sp, #44	; 0x2c
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d10a      	bne.n	8009968 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009952:	2380      	movs	r3, #128	; 0x80
 8009954:	617b      	str	r3, [r7, #20]
    return event;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	461c      	mov	r4, r3
 800995a:	f107 0314 	add.w	r3, r7, #20
 800995e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009962:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009966:	e054      	b.n	8009a12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009968:	2300      	movs	r3, #0
 800996a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d103      	bne.n	8009980 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009978:	f04f 33ff 	mov.w	r3, #4294967295
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
 800997e:	e009      	b.n	8009994 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d006      	beq.n	8009994 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <osMessageGet+0x5c>
      ticks = 1;
 8009990:	2301      	movs	r3, #1
 8009992:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009994:	f7ff fda7 	bl	80094e6 <inHandlerMode>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01c      	beq.n	80099d8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800999e:	f107 0220 	add.w	r2, r7, #32
 80099a2:	f107 0314 	add.w	r3, r7, #20
 80099a6:	3304      	adds	r3, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f000 fcde 	bl	800a36c <xQueueReceiveFromISR>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d102      	bne.n	80099bc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80099b6:	2310      	movs	r3, #16
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e001      	b.n	80099c0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80099bc:	2300      	movs	r3, #0
 80099be:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d01d      	beq.n	8009a02 <osMessageGet+0xca>
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <osMessageGet+0xe4>)
 80099c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	e014      	b.n	8009a02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80099d8:	f107 0314 	add.w	r3, r7, #20
 80099dc:	3304      	adds	r3, #4
 80099de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099e0:	4619      	mov	r1, r3
 80099e2:	68b8      	ldr	r0, [r7, #8]
 80099e4:	f000 fbe2 	bl	800a1ac <xQueueReceive>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d102      	bne.n	80099f4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80099ee:	2310      	movs	r3, #16
 80099f0:	617b      	str	r3, [r7, #20]
 80099f2:	e006      	b.n	8009a02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <osMessageGet+0xc6>
 80099fa:	2300      	movs	r3, #0
 80099fc:	e000      	b.n	8009a00 <osMessageGet+0xc8>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	461c      	mov	r4, r3
 8009a06:	f107 0314 	add.w	r3, r7, #20
 8009a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	372c      	adds	r7, #44	; 0x2c
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd90      	pop	{r4, r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	e000ed04 	.word	0xe000ed04

08009a20 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 f8df 	bl	800abec <vTaskSuspend>
  
  return osOK;
 8009a2e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8009a40:	f7ff fd51 	bl	80094e6 <inHandlerMode>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00e      	beq.n	8009a68 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 f9f8 	bl	800ae40 <xTaskResumeFromISR>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10b      	bne.n	8009a6e <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8009a56:	4b08      	ldr	r3, [pc, #32]	; (8009a78 <osThreadResume+0x40>)
 8009a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5c:	601a      	str	r2, [r3, #0]
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	e002      	b.n	8009a6e <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f001 f98b 	bl	800ad84 <vTaskResume>
  }
  return osOK;
 8009a6e:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	e000ed04 	.word	0xe000ed04

08009a7c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <osDelayUntil+0x18>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	e000      	b.n	8009a96 <osDelayUntil+0x1a>
 8009a94:	2301      	movs	r3, #1
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fff5 	bl	800aa88 <vTaskDelayUntil>
  
  return osOK;
 8009a9e:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f103 0208 	add.w	r2, r3, #8
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f103 0208 	add.w	r2, r3, #8
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f103 0208 	add.w	r2, r3, #8
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009adc:	bf00      	nop
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr

08009ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b083      	sub	sp, #12
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bc80      	pop	{r7}
 8009afc:	4770      	bx	lr

08009afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009afe:	b480      	push	{r7}
 8009b00:	b085      	sub	sp, #20
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
 8009b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	1c5a      	adds	r2, r3, #1
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	601a      	str	r2, [r3, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5a:	d103      	bne.n	8009b64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e00c      	b.n	8009b7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3308      	adds	r3, #8
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	e002      	b.n	8009b72 <vListInsert+0x2e>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d2f6      	bcs.n	8009b6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bc80      	pop	{r7}
 8009bb2:	4770      	bx	lr

08009bb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6892      	ldr	r2, [r2, #8]
 8009bca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6852      	ldr	r2, [r2, #4]
 8009bd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d103      	bne.n	8009be8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	1e5a      	subs	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bc80      	pop	{r7}
 8009c04:	4770      	bx	lr
	...

08009c08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c32:	f002 fd33 	bl	800c69c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	441a      	add	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	3b01      	subs	r3, #1
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	22ff      	movs	r2, #255	; 0xff
 8009c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d114      	bne.n	8009cb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01a      	beq.n	8009cc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3310      	adds	r3, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fbdd 	bl	800b454 <xTaskRemoveFromEventList>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d012      	beq.n	8009cc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ca0:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <xQueueGenericReset+0xcc>)
 8009ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	e009      	b.n	8009cc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3310      	adds	r3, #16
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fef6 	bl	8009aa8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3324      	adds	r3, #36	; 0x24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fef1 	bl	8009aa8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cc6:	f002 fd19 	bl	800c6fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cca:	2301      	movs	r3, #1
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08e      	sub	sp, #56	; 0x38
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <xQueueGenericCreateStatic+0x52>
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <xQueueGenericCreateStatic+0x56>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e000      	b.n	8009d30 <xQueueGenericCreateStatic+0x58>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	623b      	str	r3, [r7, #32]
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d102      	bne.n	8009d56 <xQueueGenericCreateStatic+0x7e>
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <xQueueGenericCreateStatic+0x82>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e000      	b.n	8009d5c <xQueueGenericCreateStatic+0x84>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d10a      	bne.n	8009d76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	61fb      	str	r3, [r7, #28]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d76:	2348      	movs	r3, #72	; 0x48
 8009d78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b48      	cmp	r3, #72	; 0x48
 8009d7e:	d00a      	beq.n	8009d96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	61bb      	str	r3, [r7, #24]
}
 8009d92:	bf00      	nop
 8009d94:	e7fe      	b.n	8009d94 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00d      	beq.n	8009dbc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009da8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4613      	mov	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	68b9      	ldr	r1, [r7, #8]
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f843 	bl	8009e42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3730      	adds	r7, #48	; 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b08a      	sub	sp, #40	; 0x28
 8009dca:	af02      	add	r7, sp, #8
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	613b      	str	r3, [r7, #16]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d102      	bne.n	8009dfc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61fb      	str	r3, [r7, #28]
 8009dfa:	e004      	b.n	8009e06 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	fb02 f303 	mul.w	r3, r2, r3
 8009e04:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	3348      	adds	r3, #72	; 0x48
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f002 fd46 	bl	800c89c <pvPortMalloc>
 8009e10:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00f      	beq.n	8009e38 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	3348      	adds	r3, #72	; 0x48
 8009e1c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e26:	79fa      	ldrb	r2, [r7, #7]
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f000 f805 	bl	8009e42 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009e38:	69bb      	ldr	r3, [r7, #24]
	}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3720      	adds	r7, #32
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	607a      	str	r2, [r7, #4]
 8009e4e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d103      	bne.n	8009e5e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	e002      	b.n	8009e64 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e70:	2101      	movs	r1, #1
 8009e72:	69b8      	ldr	r0, [r7, #24]
 8009e74:	f7ff fec8 	bl	8009c08 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08e      	sub	sp, #56	; 0x38
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10a      	bne.n	8009eb2 <xQueueGenericSend+0x32>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eae:	bf00      	nop
 8009eb0:	e7fe      	b.n	8009eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <xQueueGenericSend+0x40>
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <xQueueGenericSend+0x44>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e000      	b.n	8009ec6 <xQueueGenericSend+0x46>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <xQueueGenericSend+0x60>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009edc:	bf00      	nop
 8009ede:	e7fe      	b.n	8009ede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d103      	bne.n	8009eee <xQueueGenericSend+0x6e>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <xQueueGenericSend+0x72>
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e000      	b.n	8009ef4 <xQueueGenericSend+0x74>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueGenericSend+0x8e>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	623b      	str	r3, [r7, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f0e:	f001 fc65 	bl	800b7dc <xTaskGetSchedulerState>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <xQueueGenericSend+0x9e>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <xQueueGenericSend+0xa2>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e000      	b.n	8009f24 <xQueueGenericSend+0xa4>
 8009f22:	2300      	movs	r3, #0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10a      	bne.n	8009f3e <xQueueGenericSend+0xbe>
	__asm volatile
 8009f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	61fb      	str	r3, [r7, #28]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f3e:	f002 fbad 	bl	800c69c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d302      	bcc.n	8009f54 <xQueueGenericSend+0xd4>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b02      	cmp	r3, #2
 8009f52:	d129      	bne.n	8009fa8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f5a:	f000 fa87 	bl	800a46c <prvCopyDataToQueue>
 8009f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d010      	beq.n	8009f8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6a:	3324      	adds	r3, #36	; 0x24
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fa71 	bl	800b454 <xTaskRemoveFromEventList>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d013      	beq.n	8009fa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f78:	4b3f      	ldr	r3, [pc, #252]	; (800a078 <xQueueGenericSend+0x1f8>)
 8009f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7e:	601a      	str	r2, [r3, #0]
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	e00a      	b.n	8009fa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d007      	beq.n	8009fa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f90:	4b39      	ldr	r3, [pc, #228]	; (800a078 <xQueueGenericSend+0x1f8>)
 8009f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fa0:	f002 fbac 	bl	800c6fc <vPortExitCritical>
				return pdPASS;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e063      	b.n	800a070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fae:	f002 fba5 	bl	800c6fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e05c      	b.n	800a070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fbc:	f107 0314 	add.w	r3, r7, #20
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f001 faa9 	bl	800b518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fca:	f002 fb97 	bl	800c6fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fce:	f001 f819 	bl	800b004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fd2:	f002 fb63 	bl	800c69c <vPortEnterCritical>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fdc:	b25b      	sxtb	r3, r3
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d103      	bne.n	8009fec <xQueueGenericSend+0x16c>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ff2:	b25b      	sxtb	r3, r3
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff8:	d103      	bne.n	800a002 <xQueueGenericSend+0x182>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a002:	f002 fb7b 	bl	800c6fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a006:	1d3a      	adds	r2, r7, #4
 800a008:	f107 0314 	add.w	r3, r7, #20
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 fa98 	bl	800b544 <xTaskCheckForTimeOut>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d124      	bne.n	800a064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a01a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01c:	f000 fb1e 	bl	800a65c <prvIsQueueFull>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d018      	beq.n	800a058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	3310      	adds	r3, #16
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	4611      	mov	r1, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f001 f9c0 	bl	800b3b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a036:	f000 faa9 	bl	800a58c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a03a:	f000 fff1 	bl	800b020 <xTaskResumeAll>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	f47f af7c 	bne.w	8009f3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a046:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <xQueueGenericSend+0x1f8>)
 800a048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04c:	601a      	str	r2, [r3, #0]
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	e772      	b.n	8009f3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a05a:	f000 fa97 	bl	800a58c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a05e:	f000 ffdf 	bl	800b020 <xTaskResumeAll>
 800a062:	e76c      	b.n	8009f3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a066:	f000 fa91 	bl	800a58c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a06a:	f000 ffd9 	bl	800b020 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a06e:	2300      	movs	r3, #0
		}
	}
}
 800a070:	4618      	mov	r0, r3
 800a072:	3738      	adds	r7, #56	; 0x38
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	e000ed04 	.word	0xe000ed04

0800a07c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	; 0x38
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10a      	bne.n	800a0aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a098:	f383 8811 	msr	BASEPRI, r3
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0a6:	bf00      	nop
 800a0a8:	e7fe      	b.n	800a0a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d103      	bne.n	800a0b8 <xQueueGenericSendFromISR+0x3c>
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <xQueueGenericSendFromISR+0x40>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <xQueueGenericSendFromISR+0x42>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10a      	bne.n	800a0d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	623b      	str	r3, [r7, #32]
}
 800a0d4:	bf00      	nop
 800a0d6:	e7fe      	b.n	800a0d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSendFromISR+0x6a>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <xQueueGenericSendFromISR+0x6e>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e000      	b.n	800a0ec <xQueueGenericSendFromISR+0x70>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10a      	bne.n	800a106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	61fb      	str	r3, [r7, #28]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a106:	f002 fb8b 	bl	800c820 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a10a:	f3ef 8211 	mrs	r2, BASEPRI
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	61ba      	str	r2, [r7, #24]
 800a120:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a122:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a124:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d302      	bcc.n	800a138 <xQueueGenericSendFromISR+0xbc>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b02      	cmp	r3, #2
 800a136:	d12c      	bne.n	800a192 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	68b9      	ldr	r1, [r7, #8]
 800a146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a148:	f000 f990 	bl	800a46c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a14c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a150:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a154:	d112      	bne.n	800a17c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	3324      	adds	r3, #36	; 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f001 f976 	bl	800b454 <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00e      	beq.n	800a18c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	e007      	b.n	800a18c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a17c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a180:	3301      	adds	r3, #1
 800a182:	b2db      	uxtb	r3, r3
 800a184:	b25a      	sxtb	r2, r3
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a18c:	2301      	movs	r3, #1
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a190:	e001      	b.n	800a196 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a192:	2300      	movs	r3, #0
 800a194:	637b      	str	r3, [r7, #52]	; 0x34
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a1a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3738      	adds	r7, #56	; 0x38
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	; 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10a      	bne.n	800a1dc <xQueueReceive+0x30>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	623b      	str	r3, [r7, #32]
}
 800a1d8:	bf00      	nop
 800a1da:	e7fe      	b.n	800a1da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d103      	bne.n	800a1ea <xQueueReceive+0x3e>
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <xQueueReceive+0x42>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e000      	b.n	800a1f0 <xQueueReceive+0x44>
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d10a      	bne.n	800a20a <xQueueReceive+0x5e>
	__asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	61fb      	str	r3, [r7, #28]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a20a:	f001 fae7 	bl	800b7dc <xTaskGetSchedulerState>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d102      	bne.n	800a21a <xQueueReceive+0x6e>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <xQueueReceive+0x72>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <xQueueReceive+0x74>
 800a21e:	2300      	movs	r3, #0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xQueueReceive+0x8e>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	61bb      	str	r3, [r7, #24]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a23a:	f002 fa2f 	bl	800c69c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01f      	beq.n	800a28a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a24a:	68b9      	ldr	r1, [r7, #8]
 800a24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a24e:	f000 f977 	bl	800a540 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	1e5a      	subs	r2, r3, #1
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00f      	beq.n	800a282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a264:	3310      	adds	r3, #16
 800a266:	4618      	mov	r0, r3
 800a268:	f001 f8f4 	bl	800b454 <xTaskRemoveFromEventList>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d007      	beq.n	800a282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a272:	4b3d      	ldr	r3, [pc, #244]	; (800a368 <xQueueReceive+0x1bc>)
 800a274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a282:	f002 fa3b 	bl	800c6fc <vPortExitCritical>
				return pdPASS;
 800a286:	2301      	movs	r3, #1
 800a288:	e069      	b.n	800a35e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a290:	f002 fa34 	bl	800c6fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a294:	2300      	movs	r3, #0
 800a296:	e062      	b.n	800a35e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d106      	bne.n	800a2ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a29e:	f107 0310 	add.w	r3, r7, #16
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f001 f938 	bl	800b518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ac:	f002 fa26 	bl	800c6fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2b0:	f000 fea8 	bl	800b004 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2b4:	f002 f9f2 	bl	800c69c <vPortEnterCritical>
 800a2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2be:	b25b      	sxtb	r3, r3
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d103      	bne.n	800a2ce <xQueueReceive+0x122>
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2d4:	b25b      	sxtb	r3, r3
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d103      	bne.n	800a2e4 <xQueueReceive+0x138>
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2e4:	f002 fa0a 	bl	800c6fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2e8:	1d3a      	adds	r2, r7, #4
 800a2ea:	f107 0310 	add.w	r3, r7, #16
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f001 f927 	bl	800b544 <xTaskCheckForTimeOut>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d123      	bne.n	800a344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fe:	f000 f997 	bl	800a630 <prvIsQueueEmpty>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d017      	beq.n	800a338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30a:	3324      	adds	r3, #36	; 0x24
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4611      	mov	r1, r2
 800a310:	4618      	mov	r0, r3
 800a312:	f001 f84f 	bl	800b3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a318:	f000 f938 	bl	800a58c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a31c:	f000 fe80 	bl	800b020 <xTaskResumeAll>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d189      	bne.n	800a23a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <xQueueReceive+0x1bc>)
 800a328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	e780      	b.n	800a23a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33a:	f000 f927 	bl	800a58c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a33e:	f000 fe6f 	bl	800b020 <xTaskResumeAll>
 800a342:	e77a      	b.n	800a23a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a346:	f000 f921 	bl	800a58c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a34a:	f000 fe69 	bl	800b020 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a350:	f000 f96e 	bl	800a630 <prvIsQueueEmpty>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	f43f af6f 	beq.w	800a23a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a35c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3730      	adds	r7, #48	; 0x30
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b08e      	sub	sp, #56	; 0x38
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	623b      	str	r3, [r7, #32]
}
 800a394:	bf00      	nop
 800a396:	e7fe      	b.n	800a396 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <xQueueReceiveFromISR+0x3a>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d101      	bne.n	800a3aa <xQueueReceiveFromISR+0x3e>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e000      	b.n	800a3ac <xQueueReceiveFromISR+0x40>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d10a      	bne.n	800a3c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b4:	f383 8811 	msr	BASEPRI, r3
 800a3b8:	f3bf 8f6f 	isb	sy
 800a3bc:	f3bf 8f4f 	dsb	sy
 800a3c0:	61fb      	str	r3, [r7, #28]
}
 800a3c2:	bf00      	nop
 800a3c4:	e7fe      	b.n	800a3c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3c6:	f002 fa2b 	bl	800c820 <vPortValidateInterruptPriority>
	__asm volatile
 800a3ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	61ba      	str	r2, [r7, #24]
 800a3e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a3e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d02f      	beq.n	800a452 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a400:	f000 f89e 	bl	800a540 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	1e5a      	subs	r2, r3, #1
 800a408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a414:	d112      	bne.n	800a43c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d016      	beq.n	800a44c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	3310      	adds	r3, #16
 800a422:	4618      	mov	r0, r3
 800a424:	f001 f816 	bl	800b454 <xTaskRemoveFromEventList>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00e      	beq.n	800a44c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00b      	beq.n	800a44c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	e007      	b.n	800a44c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a440:	3301      	adds	r3, #1
 800a442:	b2db      	uxtb	r3, r3
 800a444:	b25a      	sxtb	r2, r3
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a44c:	2301      	movs	r3, #1
 800a44e:	637b      	str	r3, [r7, #52]	; 0x34
 800a450:	e001      	b.n	800a456 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a452:	2300      	movs	r3, #0
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f383 8811 	msr	BASEPRI, r3
}
 800a460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a464:	4618      	mov	r0, r3
 800a466:	3738      	adds	r7, #56	; 0x38
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10d      	bne.n	800a4a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d14d      	bne.n	800a52e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	f001 f9be 	bl	800b818 <xTaskPriorityDisinherit>
 800a49c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	605a      	str	r2, [r3, #4]
 800a4a4:	e043      	b.n	800a52e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d119      	bne.n	800a4e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6898      	ldr	r0, [r3, #8]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	68b9      	ldr	r1, [r7, #8]
 800a4b8:	f002 fd54 	bl	800cf64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	689a      	ldr	r2, [r3, #8]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c4:	441a      	add	r2, r3
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d32b      	bcc.n	800a52e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	609a      	str	r2, [r3, #8]
 800a4de:	e026      	b.n	800a52e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	68d8      	ldr	r0, [r3, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	f002 fd3a 	bl	800cf64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	68da      	ldr	r2, [r3, #12]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f8:	425b      	negs	r3, r3
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d207      	bcs.n	800a51c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a514:	425b      	negs	r3, r3
 800a516:	441a      	add	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b02      	cmp	r3, #2
 800a520:	d105      	bne.n	800a52e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1c5a      	adds	r2, r3, #1
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a536:	697b      	ldr	r3, [r7, #20]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d018      	beq.n	800a584 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	441a      	add	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d303      	bcc.n	800a574 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68d9      	ldr	r1, [r3, #12]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57c:	461a      	mov	r2, r3
 800a57e:	6838      	ldr	r0, [r7, #0]
 800a580:	f002 fcf0 	bl	800cf64 <memcpy>
	}
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a594:	f002 f882 	bl	800c69c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a59e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5a0:	e011      	b.n	800a5c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d012      	beq.n	800a5d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3324      	adds	r3, #36	; 0x24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 ff50 	bl	800b454 <xTaskRemoveFromEventList>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5ba:	f001 f825 	bl	800b608 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5be:	7bfb      	ldrb	r3, [r7, #15]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dce9      	bgt.n	800a5a2 <prvUnlockQueue+0x16>
 800a5ce:	e000      	b.n	800a5d2 <prvUnlockQueue+0x46>
					break;
 800a5d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	22ff      	movs	r2, #255	; 0xff
 800a5d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a5da:	f002 f88f 	bl	800c6fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a5de:	f002 f85d 	bl	800c69c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a5ea:	e011      	b.n	800a610 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d012      	beq.n	800a61a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3310      	adds	r3, #16
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 ff2b 	bl	800b454 <xTaskRemoveFromEventList>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d001      	beq.n	800a608 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a604:	f001 f800 	bl	800b608 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a608:	7bbb      	ldrb	r3, [r7, #14]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a614:	2b00      	cmp	r3, #0
 800a616:	dce9      	bgt.n	800a5ec <prvUnlockQueue+0x60>
 800a618:	e000      	b.n	800a61c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a61a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	22ff      	movs	r2, #255	; 0xff
 800a620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a624:	f002 f86a 	bl	800c6fc <vPortExitCritical>
}
 800a628:	bf00      	nop
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a638:	f002 f830 	bl	800c69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d102      	bne.n	800a64a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a644:	2301      	movs	r3, #1
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	e001      	b.n	800a64e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a64e:	f002 f855 	bl	800c6fc <vPortExitCritical>

	return xReturn;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a664:	f002 f81a 	bl	800c69c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a670:	429a      	cmp	r2, r3
 800a672:	d102      	bne.n	800a67a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a674:	2301      	movs	r3, #1
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e001      	b.n	800a67e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a67e:	f002 f83d 	bl	800c6fc <vPortExitCritical>

	return xReturn;
 800a682:	68fb      	ldr	r3, [r7, #12]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e014      	b.n	800a6c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a69c:	4a0e      	ldr	r2, [pc, #56]	; (800a6d8 <vQueueAddToRegistry+0x4c>)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d10b      	bne.n	800a6c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6a8:	490b      	ldr	r1, [pc, #44]	; (800a6d8 <vQueueAddToRegistry+0x4c>)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6b2:	4a09      	ldr	r2, [pc, #36]	; (800a6d8 <vQueueAddToRegistry+0x4c>)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	4413      	add	r3, r2
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a6be:	e006      	b.n	800a6ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2b07      	cmp	r3, #7
 800a6ca:	d9e7      	bls.n	800a69c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a6cc:	bf00      	nop
 800a6ce:	bf00      	nop
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bc80      	pop	{r7}
 800a6d6:	4770      	bx	lr
 800a6d8:	20001714 	.word	0x20001714

0800a6dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b086      	sub	sp, #24
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a6ec:	f001 ffd6 	bl	800c69c <vPortEnterCritical>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6f6:	b25b      	sxtb	r3, r3
 800a6f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fc:	d103      	bne.n	800a706 <vQueueWaitForMessageRestricted+0x2a>
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a70c:	b25b      	sxtb	r3, r3
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	d103      	bne.n	800a71c <vQueueWaitForMessageRestricted+0x40>
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a71c:	f001 ffee 	bl	800c6fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	3324      	adds	r3, #36	; 0x24
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	4618      	mov	r0, r3
 800a732:	f000 fe63 	bl	800b3fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a736:	6978      	ldr	r0, [r7, #20]
 800a738:	f7ff ff28 	bl	800a58c <prvUnlockQueue>
	}
 800a73c:	bf00      	nop
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	; 0x38
 800a748:	af04      	add	r7, sp, #16
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	623b      	str	r3, [r7, #32]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10a      	bne.n	800a78a <xTaskCreateStatic+0x46>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	61fb      	str	r3, [r7, #28]
}
 800a786:	bf00      	nop
 800a788:	e7fe      	b.n	800a788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a78a:	23a0      	movs	r3, #160	; 0xa0
 800a78c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2ba0      	cmp	r3, #160	; 0xa0
 800a792:	d00a      	beq.n	800a7aa <xTaskCreateStatic+0x66>
	__asm volatile
 800a794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a798:	f383 8811 	msr	BASEPRI, r3
 800a79c:	f3bf 8f6f 	isb	sy
 800a7a0:	f3bf 8f4f 	dsb	sy
 800a7a4:	61bb      	str	r3, [r7, #24]
}
 800a7a6:	bf00      	nop
 800a7a8:	e7fe      	b.n	800a7a8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d01e      	beq.n	800a7ee <xTaskCreateStatic+0xaa>
 800a7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01b      	beq.n	800a7ee <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	9303      	str	r3, [sp, #12]
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	9302      	str	r3, [sp, #8]
 800a7d0:	f107 0314 	add.w	r3, r7, #20
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	68b9      	ldr	r1, [r7, #8]
 800a7e0:	68f8      	ldr	r0, [r7, #12]
 800a7e2:	f000 f851 	bl	800a888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a7e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7e8:	f000 f8e4 	bl	800a9b4 <prvAddNewTaskToReadyList>
 800a7ec:	e001      	b.n	800a7f2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a7f2:	697b      	ldr	r3, [r7, #20]
	}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3728      	adds	r7, #40	; 0x28
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08c      	sub	sp, #48	; 0x30
 800a800:	af04      	add	r7, sp, #16
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	603b      	str	r3, [r7, #0]
 800a808:	4613      	mov	r3, r2
 800a80a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4618      	mov	r0, r3
 800a812:	f002 f843 	bl	800c89c <pvPortMalloc>
 800a816:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00e      	beq.n	800a83c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a81e:	20a0      	movs	r0, #160	; 0xa0
 800a820:	f002 f83c 	bl	800c89c <pvPortMalloc>
 800a824:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d003      	beq.n	800a834 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	631a      	str	r2, [r3, #48]	; 0x30
 800a832:	e005      	b.n	800a840 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	f002 f8f5 	bl	800ca24 <vPortFree>
 800a83a:	e001      	b.n	800a840 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a83c:	2300      	movs	r3, #0
 800a83e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d017      	beq.n	800a876 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	2300      	movs	r3, #0
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	68b9      	ldr	r1, [r7, #8]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f80f 	bl	800a888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a86a:	69f8      	ldr	r0, [r7, #28]
 800a86c:	f000 f8a2 	bl	800a9b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a870:	2301      	movs	r3, #1
 800a872:	61bb      	str	r3, [r7, #24]
 800a874:	e002      	b.n	800a87c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a876:	f04f 33ff 	mov.w	r3, #4294967295
 800a87a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a87c:	69bb      	ldr	r3, [r7, #24]
	}
 800a87e:	4618      	mov	r0, r3
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b088      	sub	sp, #32
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	f023 0307 	bic.w	r3, r3, #7
 800a8ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	617b      	str	r3, [r7, #20]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e012      	b.n	800a8fc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	4413      	add	r3, r2
 800a8dc:	7819      	ldrb	r1, [r3, #0]
 800a8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	3334      	adds	r3, #52	; 0x34
 800a8e6:	460a      	mov	r2, r1
 800a8e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d006      	beq.n	800a904 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	61fb      	str	r3, [r7, #28]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	2b0f      	cmp	r3, #15
 800a900:	d9e9      	bls.n	800a8d6 <prvInitialiseNewTask+0x4e>
 800a902:	e000      	b.n	800a906 <prvInitialiseNewTask+0x7e>
		{
			break;
 800a904:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	2b06      	cmp	r3, #6
 800a912:	d901      	bls.n	800a918 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a914:	2306      	movs	r3, #6
 800a916:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a91c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a922:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a926:	2200      	movs	r2, #0
 800a928:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff f8d9 	bl	8009ae6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	3318      	adds	r3, #24
 800a938:	4618      	mov	r0, r3
 800a93a:	f7ff f8d4 	bl	8009ae6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a942:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	f1c3 0207 	rsb	r2, r3, #7
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a952:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a966:	334c      	adds	r3, #76	; 0x4c
 800a968:	224c      	movs	r2, #76	; 0x4c
 800a96a:	2100      	movs	r1, #0
 800a96c:	4618      	mov	r0, r3
 800a96e:	f002 fa41 	bl	800cdf4 <memset>
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	4a0c      	ldr	r2, [pc, #48]	; (800a9a8 <prvInitialiseNewTask+0x120>)
 800a976:	651a      	str	r2, [r3, #80]	; 0x50
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	4a0c      	ldr	r2, [pc, #48]	; (800a9ac <prvInitialiseNewTask+0x124>)
 800a97c:	655a      	str	r2, [r3, #84]	; 0x54
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <prvInitialiseNewTask+0x128>)
 800a982:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	68f9      	ldr	r1, [r7, #12]
 800a988:	69b8      	ldr	r0, [r7, #24]
 800a98a:	f001 fd93 	bl	800c4b4 <pxPortInitialiseStack>
 800a98e:	4602      	mov	r2, r0
 800a990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a992:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a99e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9a0:	bf00      	nop
 800a9a2:	3720      	adds	r7, #32
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20002da4 	.word	0x20002da4
 800a9ac:	20002e0c 	.word	0x20002e0c
 800a9b0:	20002e74 	.word	0x20002e74

0800a9b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b082      	sub	sp, #8
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a9bc:	f001 fe6e 	bl	800c69c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <prvAddNewTaskToReadyList+0xb8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	4a29      	ldr	r2, [pc, #164]	; (800aa6c <prvAddNewTaskToReadyList+0xb8>)
 800a9c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a9ca:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <prvAddNewTaskToReadyList+0xbc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d109      	bne.n	800a9e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a9d2:	4a27      	ldr	r2, [pc, #156]	; (800aa70 <prvAddNewTaskToReadyList+0xbc>)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a9d8:	4b24      	ldr	r3, [pc, #144]	; (800aa6c <prvAddNewTaskToReadyList+0xb8>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d110      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a9e0:	f000 fe36 	bl	800b650 <prvInitialiseTaskLists>
 800a9e4:	e00d      	b.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a9e6:	4b23      	ldr	r3, [pc, #140]	; (800aa74 <prvAddNewTaskToReadyList+0xc0>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d109      	bne.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a9ee:	4b20      	ldr	r3, [pc, #128]	; (800aa70 <prvAddNewTaskToReadyList+0xbc>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d802      	bhi.n	800aa02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a9fc:	4a1c      	ldr	r2, [pc, #112]	; (800aa70 <prvAddNewTaskToReadyList+0xbc>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aa02:	4b1d      	ldr	r3, [pc, #116]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	4a1b      	ldr	r2, [pc, #108]	; (800aa78 <prvAddNewTaskToReadyList+0xc4>)
 800aa0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	2201      	movs	r2, #1
 800aa12:	409a      	lsls	r2, r3
 800aa14:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	4a18      	ldr	r2, [pc, #96]	; (800aa7c <prvAddNewTaskToReadyList+0xc8>)
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	009b      	lsls	r3, r3, #2
 800aa2a:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <prvAddNewTaskToReadyList+0xcc>)
 800aa2c:	441a      	add	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3304      	adds	r3, #4
 800aa32:	4619      	mov	r1, r3
 800aa34:	4610      	mov	r0, r2
 800aa36:	f7ff f862 	bl	8009afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aa3a:	f001 fe5f 	bl	800c6fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <prvAddNewTaskToReadyList+0xc0>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00e      	beq.n	800aa64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa46:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <prvAddNewTaskToReadyList+0xbc>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d207      	bcs.n	800aa64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800aa54:	4b0b      	ldr	r3, [pc, #44]	; (800aa84 <prvAddNewTaskToReadyList+0xd0>)
 800aa56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa5a:	601a      	str	r2, [r3, #0]
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa64:	bf00      	nop
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	20001854 	.word	0x20001854
 800aa70:	20001754 	.word	0x20001754
 800aa74:	20001860 	.word	0x20001860
 800aa78:	20001870 	.word	0x20001870
 800aa7c:	2000185c 	.word	0x2000185c
 800aa80:	20001758 	.word	0x20001758
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b08a      	sub	sp, #40	; 0x28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800aa92:	2300      	movs	r3, #0
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10a      	bne.n	800aab2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800aa9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa0:	f383 8811 	msr	BASEPRI, r3
 800aaa4:	f3bf 8f6f 	isb	sy
 800aaa8:	f3bf 8f4f 	dsb	sy
 800aaac:	617b      	str	r3, [r7, #20]
}
 800aaae:	bf00      	nop
 800aab0:	e7fe      	b.n	800aab0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10a      	bne.n	800aace <vTaskDelayUntil+0x46>
	__asm volatile
 800aab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabc:	f383 8811 	msr	BASEPRI, r3
 800aac0:	f3bf 8f6f 	isb	sy
 800aac4:	f3bf 8f4f 	dsb	sy
 800aac8:	613b      	str	r3, [r7, #16]
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800aace:	4b2a      	ldr	r3, [pc, #168]	; (800ab78 <vTaskDelayUntil+0xf0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <vTaskDelayUntil+0x64>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60fb      	str	r3, [r7, #12]
}
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800aaec:	f000 fa8a 	bl	800b004 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800aaf0:	4b22      	ldr	r3, [pc, #136]	; (800ab7c <vTaskDelayUntil+0xf4>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6a3a      	ldr	r2, [r7, #32]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d20b      	bcs.n	800ab22 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d211      	bcs.n	800ab38 <vTaskDelayUntil+0xb0>
 800ab14:	69fa      	ldr	r2, [r7, #28]
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d90d      	bls.n	800ab38 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab20:	e00a      	b.n	800ab38 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d303      	bcc.n	800ab34 <vTaskDelayUntil+0xac>
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d901      	bls.n	800ab38 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ab34:	2301      	movs	r3, #1
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	69fa      	ldr	r2, [r7, #28]
 800ab3c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d006      	beq.n	800ab52 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f001 f8c3 	bl	800bcd8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ab52:	f000 fa65 	bl	800b020 <xTaskResumeAll>
 800ab56:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d107      	bne.n	800ab6e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ab5e:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <vTaskDelayUntil+0xf8>)
 800ab60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ab6e:	bf00      	nop
 800ab70:	3728      	adds	r7, #40	; 0x28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	2000187c 	.word	0x2000187c
 800ab7c:	20001858 	.word	0x20001858
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d017      	beq.n	800abc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <vTaskDelay+0x60>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <vTaskDelay+0x30>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60bb      	str	r3, [r7, #8]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800abb4:	f000 fa26 	bl	800b004 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abb8:	2100      	movs	r1, #0
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 f88c 	bl	800bcd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abc0:	f000 fa2e 	bl	800b020 <xTaskResumeAll>
 800abc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d107      	bne.n	800abdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <vTaskDelay+0x64>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abdc:	bf00      	nop
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	2000187c 	.word	0x2000187c
 800abe8:	e000ed04 	.word	0xe000ed04

0800abec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800abf4:	f001 fd52 	bl	800c69c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <vTaskSuspend+0x18>
 800abfe:	4b3c      	ldr	r3, [pc, #240]	; (800acf0 <vTaskSuspend+0x104>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	e000      	b.n	800ac06 <vTaskSuspend+0x1a>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3304      	adds	r3, #4
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7fe ffd1 	bl	8009bb4 <uxListRemove>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d115      	bne.n	800ac44 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1c:	4935      	ldr	r1, [pc, #212]	; (800acf4 <vTaskSuspend+0x108>)
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <vTaskSuspend+0x58>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac32:	2201      	movs	r2, #1
 800ac34:	fa02 f303 	lsl.w	r3, r2, r3
 800ac38:	43da      	mvns	r2, r3
 800ac3a:	4b2f      	ldr	r3, [pc, #188]	; (800acf8 <vTaskSuspend+0x10c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	4a2d      	ldr	r2, [pc, #180]	; (800acf8 <vTaskSuspend+0x10c>)
 800ac42:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3318      	adds	r3, #24
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fe ffaf 	bl	8009bb4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4827      	ldr	r0, [pc, #156]	; (800acfc <vTaskSuspend+0x110>)
 800ac5e:	f7fe ff4e 	bl	8009afe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d103      	bne.n	800ac76 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ac76:	f001 fd41 	bl	800c6fc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ac7a:	4b21      	ldr	r3, [pc, #132]	; (800ad00 <vTaskSuspend+0x114>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ac82:	f001 fd0b 	bl	800c69c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ac86:	f000 fd85 	bl	800b794 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ac8a:	f001 fd37 	bl	800c6fc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ac8e:	4b18      	ldr	r3, [pc, #96]	; (800acf0 <vTaskSuspend+0x104>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d127      	bne.n	800ace8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800ac98:	4b19      	ldr	r3, [pc, #100]	; (800ad00 <vTaskSuspend+0x114>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d017      	beq.n	800acd0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800aca0:	4b18      	ldr	r3, [pc, #96]	; (800ad04 <vTaskSuspend+0x118>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00a      	beq.n	800acbe <vTaskSuspend+0xd2>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	60bb      	str	r3, [r7, #8]
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800acbe:	4b12      	ldr	r3, [pc, #72]	; (800ad08 <vTaskSuspend+0x11c>)
 800acc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acce:	e00b      	b.n	800ace8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800acd0:	4b0a      	ldr	r3, [pc, #40]	; (800acfc <vTaskSuspend+0x110>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	4b0d      	ldr	r3, [pc, #52]	; (800ad0c <vTaskSuspend+0x120>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d103      	bne.n	800ace4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800acdc:	4b04      	ldr	r3, [pc, #16]	; (800acf0 <vTaskSuspend+0x104>)
 800acde:	2200      	movs	r2, #0
 800ace0:	601a      	str	r2, [r3, #0]
	}
 800ace2:	e001      	b.n	800ace8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800ace4:	f000 fb04 	bl	800b2f0 <vTaskSwitchContext>
	}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20001754 	.word	0x20001754
 800acf4:	20001758 	.word	0x20001758
 800acf8:	2000185c 	.word	0x2000185c
 800acfc:	20001840 	.word	0x20001840
 800ad00:	20001860 	.word	0x20001860
 800ad04:	2000187c 	.word	0x2000187c
 800ad08:	e000ed04 	.word	0xe000ed04
 800ad0c:	20001854 	.word	0x20001854

0800ad10 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10a      	bne.n	800ad3c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2a:	f383 8811 	msr	BASEPRI, r3
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f3bf 8f4f 	dsb	sy
 800ad36:	60fb      	str	r3, [r7, #12]
}
 800ad38:	bf00      	nop
 800ad3a:	e7fe      	b.n	800ad3a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	4a0e      	ldr	r2, [pc, #56]	; (800ad7c <prvTaskIsTaskSuspended+0x6c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d101      	bne.n	800ad4a <prvTaskIsTaskSuspended+0x3a>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e000      	b.n	800ad4c <prvTaskIsTaskSuspended+0x3c>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00f      	beq.n	800ad70 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad54:	4a0a      	ldr	r2, [pc, #40]	; (800ad80 <prvTaskIsTaskSuspended+0x70>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d00a      	beq.n	800ad70 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <prvTaskIsTaskSuspended+0x56>
 800ad62:	2301      	movs	r3, #1
 800ad64:	e000      	b.n	800ad68 <prvTaskIsTaskSuspended+0x58>
 800ad66:	2300      	movs	r3, #0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad70:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ad72:	4618      	mov	r0, r3
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bc80      	pop	{r7}
 800ad7a:	4770      	bx	lr
 800ad7c:	20001840 	.word	0x20001840
 800ad80:	20001814 	.word	0x20001814

0800ad84 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <vTaskResume+0x28>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	60bb      	str	r3, [r7, #8]
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d039      	beq.n	800ae26 <vTaskResume+0xa2>
 800adb2:	4b1f      	ldr	r3, [pc, #124]	; (800ae30 <vTaskResume+0xac>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d034      	beq.n	800ae26 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800adbc:	f001 fc6e 	bl	800c69c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7ff ffa5 	bl	800ad10 <prvTaskIsTaskSuspended>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d02a      	beq.n	800ae22 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3304      	adds	r3, #4
 800add0:	4618      	mov	r0, r3
 800add2:	f7fe feef 	bl	8009bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adda:	2201      	movs	r2, #1
 800addc:	409a      	lsls	r2, r3
 800adde:	4b15      	ldr	r3, [pc, #84]	; (800ae34 <vTaskResume+0xb0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	4a13      	ldr	r2, [pc, #76]	; (800ae34 <vTaskResume+0xb0>)
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adec:	4613      	mov	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4a10      	ldr	r2, [pc, #64]	; (800ae38 <vTaskResume+0xb4>)
 800adf6:	441a      	add	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3304      	adds	r3, #4
 800adfc:	4619      	mov	r1, r3
 800adfe:	4610      	mov	r0, r2
 800ae00:	f7fe fe7d 	bl	8009afe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae08:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <vTaskResume+0xac>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d307      	bcc.n	800ae22 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <vTaskResume+0xb8>)
 800ae14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800ae22:	f001 fc6b 	bl	800c6fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	20001754 	.word	0x20001754
 800ae34:	2000185c 	.word	0x2000185c
 800ae38:	20001758 	.word	0x20001758
 800ae3c:	e000ed04 	.word	0xe000ed04

0800ae40 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08a      	sub	sp, #40	; 0x28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <xTaskResumeFromISR+0x2c>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	61bb      	str	r3, [r7, #24]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae6c:	f001 fcd8 	bl	800c820 <vPortValidateInterruptPriority>
	__asm volatile
 800ae70:	f3ef 8211 	mrs	r2, BASEPRI
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	617a      	str	r2, [r7, #20]
 800ae86:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae88:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae8a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ae8c:	6a38      	ldr	r0, [r7, #32]
 800ae8e:	f7ff ff3f 	bl	800ad10 <prvTaskIsTaskSuspended>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d02f      	beq.n	800aef8 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae98:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <xTaskResumeFromISR+0xd0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d125      	bne.n	800aeec <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea4:	4b1b      	ldr	r3, [pc, #108]	; (800af14 <xTaskResumeFromISR+0xd4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d301      	bcc.n	800aeb2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fe fe7c 	bl	8009bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec0:	2201      	movs	r2, #1
 800aec2:	409a      	lsls	r2, r3
 800aec4:	4b14      	ldr	r3, [pc, #80]	; (800af18 <xTaskResumeFromISR+0xd8>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	4a13      	ldr	r2, [pc, #76]	; (800af18 <xTaskResumeFromISR+0xd8>)
 800aecc:	6013      	str	r3, [r2, #0]
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed2:	4613      	mov	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4a10      	ldr	r2, [pc, #64]	; (800af1c <xTaskResumeFromISR+0xdc>)
 800aedc:	441a      	add	r2, r3
 800aede:	6a3b      	ldr	r3, [r7, #32]
 800aee0:	3304      	adds	r3, #4
 800aee2:	4619      	mov	r1, r3
 800aee4:	4610      	mov	r0, r2
 800aee6:	f7fe fe0a 	bl	8009afe <vListInsertEnd>
 800aeea:	e005      	b.n	800aef8 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	3318      	adds	r3, #24
 800aef0:	4619      	mov	r1, r3
 800aef2:	480b      	ldr	r0, [pc, #44]	; (800af20 <xTaskResumeFromISR+0xe0>)
 800aef4:	f7fe fe03 	bl	8009afe <vListInsertEnd>
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f383 8811 	msr	BASEPRI, r3
}
 800af02:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800af06:	4618      	mov	r0, r3
 800af08:	3728      	adds	r7, #40	; 0x28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	2000187c 	.word	0x2000187c
 800af14:	20001754 	.word	0x20001754
 800af18:	2000185c 	.word	0x2000185c
 800af1c:	20001758 	.word	0x20001758
 800af20:	20001814 	.word	0x20001814

0800af24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af32:	463a      	mov	r2, r7
 800af34:	1d39      	adds	r1, r7, #4
 800af36:	f107 0308 	add.w	r3, r7, #8
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f6 ffa8 	bl	8001e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	68ba      	ldr	r2, [r7, #8]
 800af46:	9202      	str	r2, [sp, #8]
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	2300      	movs	r3, #0
 800af50:	460a      	mov	r2, r1
 800af52:	4924      	ldr	r1, [pc, #144]	; (800afe4 <vTaskStartScheduler+0xc0>)
 800af54:	4824      	ldr	r0, [pc, #144]	; (800afe8 <vTaskStartScheduler+0xc4>)
 800af56:	f7ff fbf5 	bl	800a744 <xTaskCreateStatic>
 800af5a:	4603      	mov	r3, r0
 800af5c:	4a23      	ldr	r2, [pc, #140]	; (800afec <vTaskStartScheduler+0xc8>)
 800af5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af60:	4b22      	ldr	r3, [pc, #136]	; (800afec <vTaskStartScheduler+0xc8>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d002      	beq.n	800af6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af68:	2301      	movs	r3, #1
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	e001      	b.n	800af72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d102      	bne.n	800af7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af78:	f000 ff14 	bl	800bda4 <xTimerCreateTimerTask>
 800af7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d11b      	bne.n	800afbc <vTaskStartScheduler+0x98>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	613b      	str	r3, [r7, #16]
}
 800af96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af98:	4b15      	ldr	r3, [pc, #84]	; (800aff0 <vTaskStartScheduler+0xcc>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	334c      	adds	r3, #76	; 0x4c
 800af9e:	4a15      	ldr	r2, [pc, #84]	; (800aff4 <vTaskStartScheduler+0xd0>)
 800afa0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afa2:	4b15      	ldr	r3, [pc, #84]	; (800aff8 <vTaskStartScheduler+0xd4>)
 800afa4:	f04f 32ff 	mov.w	r2, #4294967295
 800afa8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afaa:	4b14      	ldr	r3, [pc, #80]	; (800affc <vTaskStartScheduler+0xd8>)
 800afac:	2201      	movs	r2, #1
 800afae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800afb0:	4b13      	ldr	r3, [pc, #76]	; (800b000 <vTaskStartScheduler+0xdc>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afb6:	f001 faff 	bl	800c5b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afba:	e00e      	b.n	800afda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d10a      	bne.n	800afda <vTaskStartScheduler+0xb6>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <vTaskStartScheduler+0xb4>
}
 800afda:	bf00      	nop
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	0800da40 	.word	0x0800da40
 800afe8:	0800b621 	.word	0x0800b621
 800afec:	20001878 	.word	0x20001878
 800aff0:	20001754 	.word	0x20001754
 800aff4:	2000025c 	.word	0x2000025c
 800aff8:	20001874 	.word	0x20001874
 800affc:	20001860 	.word	0x20001860
 800b000:	20001858 	.word	0x20001858

0800b004 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b004:	b480      	push	{r7}
 800b006:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b008:	4b04      	ldr	r3, [pc, #16]	; (800b01c <vTaskSuspendAll+0x18>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	3301      	adds	r3, #1
 800b00e:	4a03      	ldr	r2, [pc, #12]	; (800b01c <vTaskSuspendAll+0x18>)
 800b010:	6013      	str	r3, [r2, #0]
}
 800b012:	bf00      	nop
 800b014:	46bd      	mov	sp, r7
 800b016:	bc80      	pop	{r7}
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	2000187c 	.word	0x2000187c

0800b020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b02a:	2300      	movs	r3, #0
 800b02c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b02e:	4b41      	ldr	r3, [pc, #260]	; (800b134 <xTaskResumeAll+0x114>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10a      	bne.n	800b04c <xTaskResumeAll+0x2c>
	__asm volatile
 800b036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03a:	f383 8811 	msr	BASEPRI, r3
 800b03e:	f3bf 8f6f 	isb	sy
 800b042:	f3bf 8f4f 	dsb	sy
 800b046:	603b      	str	r3, [r7, #0]
}
 800b048:	bf00      	nop
 800b04a:	e7fe      	b.n	800b04a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b04c:	f001 fb26 	bl	800c69c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b050:	4b38      	ldr	r3, [pc, #224]	; (800b134 <xTaskResumeAll+0x114>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3b01      	subs	r3, #1
 800b056:	4a37      	ldr	r2, [pc, #220]	; (800b134 <xTaskResumeAll+0x114>)
 800b058:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b05a:	4b36      	ldr	r3, [pc, #216]	; (800b134 <xTaskResumeAll+0x114>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d161      	bne.n	800b126 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b062:	4b35      	ldr	r3, [pc, #212]	; (800b138 <xTaskResumeAll+0x118>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d05d      	beq.n	800b126 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b06a:	e02e      	b.n	800b0ca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b06c:	4b33      	ldr	r3, [pc, #204]	; (800b13c <xTaskResumeAll+0x11c>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3318      	adds	r3, #24
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fe fd9b 	bl	8009bb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	3304      	adds	r3, #4
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fd96 	bl	8009bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	2201      	movs	r2, #1
 800b08e:	409a      	lsls	r2, r3
 800b090:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <xTaskResumeAll+0x120>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4313      	orrs	r3, r2
 800b096:	4a2a      	ldr	r2, [pc, #168]	; (800b140 <xTaskResumeAll+0x120>)
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4a27      	ldr	r2, [pc, #156]	; (800b144 <xTaskResumeAll+0x124>)
 800b0a8:	441a      	add	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7fe fd24 	bl	8009afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ba:	4b23      	ldr	r3, [pc, #140]	; (800b148 <xTaskResumeAll+0x128>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d302      	bcc.n	800b0ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b0c4:	4b21      	ldr	r3, [pc, #132]	; (800b14c <xTaskResumeAll+0x12c>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0ca:	4b1c      	ldr	r3, [pc, #112]	; (800b13c <xTaskResumeAll+0x11c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1cc      	bne.n	800b06c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0d8:	f000 fb5c 	bl	800b794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0dc:	4b1c      	ldr	r3, [pc, #112]	; (800b150 <xTaskResumeAll+0x130>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0e8:	f000 f844 	bl	800b174 <xTaskIncrementTick>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b0f2:	4b16      	ldr	r3, [pc, #88]	; (800b14c <xTaskResumeAll+0x12c>)
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1f1      	bne.n	800b0e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800b104:	4b12      	ldr	r3, [pc, #72]	; (800b150 <xTaskResumeAll+0x130>)
 800b106:	2200      	movs	r2, #0
 800b108:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b10a:	4b10      	ldr	r3, [pc, #64]	; (800b14c <xTaskResumeAll+0x12c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d009      	beq.n	800b126 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b112:	2301      	movs	r3, #1
 800b114:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b116:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <xTaskResumeAll+0x134>)
 800b118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b126:	f001 fae9 	bl	800c6fc <vPortExitCritical>

	return xAlreadyYielded;
 800b12a:	68bb      	ldr	r3, [r7, #8]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	2000187c 	.word	0x2000187c
 800b138:	20001854 	.word	0x20001854
 800b13c:	20001814 	.word	0x20001814
 800b140:	2000185c 	.word	0x2000185c
 800b144:	20001758 	.word	0x20001758
 800b148:	20001754 	.word	0x20001754
 800b14c:	20001868 	.word	0x20001868
 800b150:	20001864 	.word	0x20001864
 800b154:	e000ed04 	.word	0xe000ed04

0800b158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b15e:	4b04      	ldr	r3, [pc, #16]	; (800b170 <xTaskGetTickCount+0x18>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b164:	687b      	ldr	r3, [r7, #4]
}
 800b166:	4618      	mov	r0, r3
 800b168:	370c      	adds	r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr
 800b170:	20001858 	.word	0x20001858

0800b174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17e:	4b51      	ldr	r3, [pc, #324]	; (800b2c4 <xTaskIncrementTick+0x150>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f040 808d 	bne.w	800b2a2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b188:	4b4f      	ldr	r3, [pc, #316]	; (800b2c8 <xTaskIncrementTick+0x154>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b190:	4a4d      	ldr	r2, [pc, #308]	; (800b2c8 <xTaskIncrementTick+0x154>)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d120      	bne.n	800b1de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b19c:	4b4b      	ldr	r3, [pc, #300]	; (800b2cc <xTaskIncrementTick+0x158>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <xTaskIncrementTick+0x48>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	603b      	str	r3, [r7, #0]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <xTaskIncrementTick+0x46>
 800b1bc:	4b43      	ldr	r3, [pc, #268]	; (800b2cc <xTaskIncrementTick+0x158>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	4b43      	ldr	r3, [pc, #268]	; (800b2d0 <xTaskIncrementTick+0x15c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a41      	ldr	r2, [pc, #260]	; (800b2cc <xTaskIncrementTick+0x158>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	4a41      	ldr	r2, [pc, #260]	; (800b2d0 <xTaskIncrementTick+0x15c>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	4b40      	ldr	r3, [pc, #256]	; (800b2d4 <xTaskIncrementTick+0x160>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4a3f      	ldr	r2, [pc, #252]	; (800b2d4 <xTaskIncrementTick+0x160>)
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	f000 fadb 	bl	800b794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1de:	4b3e      	ldr	r3, [pc, #248]	; (800b2d8 <xTaskIncrementTick+0x164>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d34d      	bcc.n	800b284 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1e8:	4b38      	ldr	r3, [pc, #224]	; (800b2cc <xTaskIncrementTick+0x158>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <xTaskIncrementTick+0x82>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <xTaskIncrementTick+0x84>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fc:	4b36      	ldr	r3, [pc, #216]	; (800b2d8 <xTaskIncrementTick+0x164>)
 800b1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b202:	601a      	str	r2, [r3, #0]
					break;
 800b204:	e03e      	b.n	800b284 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b206:	4b31      	ldr	r3, [pc, #196]	; (800b2cc <xTaskIncrementTick+0x158>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b216:	693a      	ldr	r2, [r7, #16]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d203      	bcs.n	800b226 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b21e:	4a2e      	ldr	r2, [pc, #184]	; (800b2d8 <xTaskIncrementTick+0x164>)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6013      	str	r3, [r2, #0]
						break;
 800b224:	e02e      	b.n	800b284 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3304      	adds	r3, #4
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe fcc2 	bl	8009bb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b234:	2b00      	cmp	r3, #0
 800b236:	d004      	beq.n	800b242 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	3318      	adds	r3, #24
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fe fcb9 	bl	8009bb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b246:	2201      	movs	r2, #1
 800b248:	409a      	lsls	r2, r3
 800b24a:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <xTaskIncrementTick+0x168>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4313      	orrs	r3, r2
 800b250:	4a22      	ldr	r2, [pc, #136]	; (800b2dc <xTaskIncrementTick+0x168>)
 800b252:	6013      	str	r3, [r2, #0]
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b258:	4613      	mov	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4413      	add	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4a1f      	ldr	r2, [pc, #124]	; (800b2e0 <xTaskIncrementTick+0x16c>)
 800b262:	441a      	add	r2, r3
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	3304      	adds	r3, #4
 800b268:	4619      	mov	r1, r3
 800b26a:	4610      	mov	r0, r2
 800b26c:	f7fe fc47 	bl	8009afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b274:	4b1b      	ldr	r3, [pc, #108]	; (800b2e4 <xTaskIncrementTick+0x170>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d3b4      	bcc.n	800b1e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b27e:	2301      	movs	r3, #1
 800b280:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b282:	e7b1      	b.n	800b1e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b284:	4b17      	ldr	r3, [pc, #92]	; (800b2e4 <xTaskIncrementTick+0x170>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28a:	4915      	ldr	r1, [pc, #84]	; (800b2e0 <xTaskIncrementTick+0x16c>)
 800b28c:	4613      	mov	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	440b      	add	r3, r1
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d907      	bls.n	800b2ac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800b29c:	2301      	movs	r3, #1
 800b29e:	617b      	str	r3, [r7, #20]
 800b2a0:	e004      	b.n	800b2ac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b2a2:	4b11      	ldr	r3, [pc, #68]	; (800b2e8 <xTaskIncrementTick+0x174>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <xTaskIncrementTick+0x174>)
 800b2aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b2ac:	4b0f      	ldr	r3, [pc, #60]	; (800b2ec <xTaskIncrementTick+0x178>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b2b8:	697b      	ldr	r3, [r7, #20]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	2000187c 	.word	0x2000187c
 800b2c8:	20001858 	.word	0x20001858
 800b2cc:	2000180c 	.word	0x2000180c
 800b2d0:	20001810 	.word	0x20001810
 800b2d4:	2000186c 	.word	0x2000186c
 800b2d8:	20001874 	.word	0x20001874
 800b2dc:	2000185c 	.word	0x2000185c
 800b2e0:	20001758 	.word	0x20001758
 800b2e4:	20001754 	.word	0x20001754
 800b2e8:	20001864 	.word	0x20001864
 800b2ec:	20001868 	.word	0x20001868

0800b2f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b087      	sub	sp, #28
 800b2f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2f6:	4b29      	ldr	r3, [pc, #164]	; (800b39c <vTaskSwitchContext+0xac>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2fe:	4b28      	ldr	r3, [pc, #160]	; (800b3a0 <vTaskSwitchContext+0xb0>)
 800b300:	2201      	movs	r2, #1
 800b302:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b304:	e044      	b.n	800b390 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b306:	4b26      	ldr	r3, [pc, #152]	; (800b3a0 <vTaskSwitchContext+0xb0>)
 800b308:	2200      	movs	r2, #0
 800b30a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b30c:	4b25      	ldr	r3, [pc, #148]	; (800b3a4 <vTaskSwitchContext+0xb4>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	fab3 f383 	clz	r3, r3
 800b318:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	f1c3 031f 	rsb	r3, r3, #31
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	4921      	ldr	r1, [pc, #132]	; (800b3a8 <vTaskSwitchContext+0xb8>)
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	440b      	add	r3, r1
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d10a      	bne.n	800b34c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	607b      	str	r3, [r7, #4]
}
 800b348:	bf00      	nop
 800b34a:	e7fe      	b.n	800b34a <vTaskSwitchContext+0x5a>
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	4613      	mov	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4a14      	ldr	r2, [pc, #80]	; (800b3a8 <vTaskSwitchContext+0xb8>)
 800b358:	4413      	add	r3, r2
 800b35a:	613b      	str	r3, [r7, #16]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	605a      	str	r2, [r3, #4]
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3308      	adds	r3, #8
 800b36e:	429a      	cmp	r2, r3
 800b370:	d104      	bne.n	800b37c <vTaskSwitchContext+0x8c>
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	605a      	str	r2, [r3, #4]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <vTaskSwitchContext+0xbc>)
 800b384:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b386:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <vTaskSwitchContext+0xbc>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	334c      	adds	r3, #76	; 0x4c
 800b38c:	4a08      	ldr	r2, [pc, #32]	; (800b3b0 <vTaskSwitchContext+0xc0>)
 800b38e:	6013      	str	r3, [r2, #0]
}
 800b390:	bf00      	nop
 800b392:	371c      	adds	r7, #28
 800b394:	46bd      	mov	sp, r7
 800b396:	bc80      	pop	{r7}
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	2000187c 	.word	0x2000187c
 800b3a0:	20001868 	.word	0x20001868
 800b3a4:	2000185c 	.word	0x2000185c
 800b3a8:	20001758 	.word	0x20001758
 800b3ac:	20001754 	.word	0x20001754
 800b3b0:	2000025c 	.word	0x2000025c

0800b3b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b084      	sub	sp, #16
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10a      	bne.n	800b3da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	60fb      	str	r3, [r7, #12]
}
 800b3d6:	bf00      	nop
 800b3d8:	e7fe      	b.n	800b3d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <vTaskPlaceOnEventList+0x44>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3318      	adds	r3, #24
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7fe fbae 	bl	8009b44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	6838      	ldr	r0, [r7, #0]
 800b3ec:	f000 fc74 	bl	800bcd8 <prvAddCurrentTaskToDelayedList>
}
 800b3f0:	bf00      	nop
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	20001754 	.word	0x20001754

0800b3fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b086      	sub	sp, #24
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10a      	bne.n	800b424 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	617b      	str	r3, [r7, #20]
}
 800b420:	bf00      	nop
 800b422:	e7fe      	b.n	800b422 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <vTaskPlaceOnEventListRestricted+0x54>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3318      	adds	r3, #24
 800b42a:	4619      	mov	r1, r3
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f7fe fb66 	bl	8009afe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d002      	beq.n	800b43e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b438:	f04f 33ff 	mov.w	r3, #4294967295
 800b43c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b43e:	6879      	ldr	r1, [r7, #4]
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f000 fc49 	bl	800bcd8 <prvAddCurrentTaskToDelayedList>
	}
 800b446:	bf00      	nop
 800b448:	3718      	adds	r7, #24
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20001754 	.word	0x20001754

0800b454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	68db      	ldr	r3, [r3, #12]
 800b462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d10a      	bne.n	800b480 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46e:	f383 8811 	msr	BASEPRI, r3
 800b472:	f3bf 8f6f 	isb	sy
 800b476:	f3bf 8f4f 	dsb	sy
 800b47a:	60fb      	str	r3, [r7, #12]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	3318      	adds	r3, #24
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fb95 	bl	8009bb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b48a:	4b1d      	ldr	r3, [pc, #116]	; (800b500 <xTaskRemoveFromEventList+0xac>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d11c      	bne.n	800b4cc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	3304      	adds	r3, #4
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fb8c 	bl	8009bb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	409a      	lsls	r2, r3
 800b4a4:	4b17      	ldr	r3, [pc, #92]	; (800b504 <xTaskRemoveFromEventList+0xb0>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	4a16      	ldr	r2, [pc, #88]	; (800b504 <xTaskRemoveFromEventList+0xb0>)
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b2:	4613      	mov	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4413      	add	r3, r2
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4a13      	ldr	r2, [pc, #76]	; (800b508 <xTaskRemoveFromEventList+0xb4>)
 800b4bc:	441a      	add	r2, r3
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f7fe fb1a 	bl	8009afe <vListInsertEnd>
 800b4ca:	e005      	b.n	800b4d8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	480e      	ldr	r0, [pc, #56]	; (800b50c <xTaskRemoveFromEventList+0xb8>)
 800b4d4:	f7fe fb13 	bl	8009afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4dc:	4b0c      	ldr	r3, [pc, #48]	; (800b510 <xTaskRemoveFromEventList+0xbc>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d905      	bls.n	800b4f2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4ea:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <xTaskRemoveFromEventList+0xc0>)
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	e001      	b.n	800b4f6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b4f6:	697b      	ldr	r3, [r7, #20]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	2000187c 	.word	0x2000187c
 800b504:	2000185c 	.word	0x2000185c
 800b508:	20001758 	.word	0x20001758
 800b50c:	20001814 	.word	0x20001814
 800b510:	20001754 	.word	0x20001754
 800b514:	20001868 	.word	0x20001868

0800b518 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b520:	4b06      	ldr	r3, [pc, #24]	; (800b53c <vTaskInternalSetTimeOutState+0x24>)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <vTaskInternalSetTimeOutState+0x28>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	605a      	str	r2, [r3, #4]
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	bc80      	pop	{r7}
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	2000186c 	.word	0x2000186c
 800b540:	20001858 	.word	0x20001858

0800b544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10a      	bne.n	800b56a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	613b      	str	r3, [r7, #16]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10a      	bne.n	800b586 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	60fb      	str	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b586:	f001 f889 	bl	800c69c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b58a:	4b1d      	ldr	r3, [pc, #116]	; (800b600 <xTaskCheckForTimeOut+0xbc>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a2:	d102      	bne.n	800b5aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	e023      	b.n	800b5f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	4b15      	ldr	r3, [pc, #84]	; (800b604 <xTaskCheckForTimeOut+0xc0>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d007      	beq.n	800b5c6 <xTaskCheckForTimeOut+0x82>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d302      	bcc.n	800b5c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	61fb      	str	r3, [r7, #28]
 800b5c4:	e015      	b.n	800b5f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d20b      	bcs.n	800b5e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	1ad2      	subs	r2, r2, r3
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff ff9b 	bl	800b518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	61fb      	str	r3, [r7, #28]
 800b5e6:	e004      	b.n	800b5f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5f2:	f001 f883 	bl	800c6fc <vPortExitCritical>

	return xReturn;
 800b5f6:	69fb      	ldr	r3, [r7, #28]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3720      	adds	r7, #32
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20001858 	.word	0x20001858
 800b604:	2000186c 	.word	0x2000186c

0800b608 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b60c:	4b03      	ldr	r3, [pc, #12]	; (800b61c <vTaskMissedYield+0x14>)
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
}
 800b612:	bf00      	nop
 800b614:	46bd      	mov	sp, r7
 800b616:	bc80      	pop	{r7}
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	20001868 	.word	0x20001868

0800b620 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b628:	f000 f852 	bl	800b6d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <prvIdleTask+0x28>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d9f9      	bls.n	800b628 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <prvIdleTask+0x2c>)
 800b636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b63a:	601a      	str	r2, [r3, #0]
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b644:	e7f0      	b.n	800b628 <prvIdleTask+0x8>
 800b646:	bf00      	nop
 800b648:	20001758 	.word	0x20001758
 800b64c:	e000ed04 	.word	0xe000ed04

0800b650 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b656:	2300      	movs	r3, #0
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	e00c      	b.n	800b676 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4a12      	ldr	r2, [pc, #72]	; (800b6b0 <prvInitialiseTaskLists+0x60>)
 800b668:	4413      	add	r3, r2
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fe fa1c 	bl	8009aa8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	3301      	adds	r3, #1
 800b674:	607b      	str	r3, [r7, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b06      	cmp	r3, #6
 800b67a:	d9ef      	bls.n	800b65c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b67c:	480d      	ldr	r0, [pc, #52]	; (800b6b4 <prvInitialiseTaskLists+0x64>)
 800b67e:	f7fe fa13 	bl	8009aa8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b682:	480d      	ldr	r0, [pc, #52]	; (800b6b8 <prvInitialiseTaskLists+0x68>)
 800b684:	f7fe fa10 	bl	8009aa8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b688:	480c      	ldr	r0, [pc, #48]	; (800b6bc <prvInitialiseTaskLists+0x6c>)
 800b68a:	f7fe fa0d 	bl	8009aa8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b68e:	480c      	ldr	r0, [pc, #48]	; (800b6c0 <prvInitialiseTaskLists+0x70>)
 800b690:	f7fe fa0a 	bl	8009aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b694:	480b      	ldr	r0, [pc, #44]	; (800b6c4 <prvInitialiseTaskLists+0x74>)
 800b696:	f7fe fa07 	bl	8009aa8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b69a:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <prvInitialiseTaskLists+0x78>)
 800b69c:	4a05      	ldr	r2, [pc, #20]	; (800b6b4 <prvInitialiseTaskLists+0x64>)
 800b69e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <prvInitialiseTaskLists+0x7c>)
 800b6a2:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <prvInitialiseTaskLists+0x68>)
 800b6a4:	601a      	str	r2, [r3, #0]
}
 800b6a6:	bf00      	nop
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20001758 	.word	0x20001758
 800b6b4:	200017e4 	.word	0x200017e4
 800b6b8:	200017f8 	.word	0x200017f8
 800b6bc:	20001814 	.word	0x20001814
 800b6c0:	20001828 	.word	0x20001828
 800b6c4:	20001840 	.word	0x20001840
 800b6c8:	2000180c 	.word	0x2000180c
 800b6cc:	20001810 	.word	0x20001810

0800b6d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6d6:	e019      	b.n	800b70c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6d8:	f000 ffe0 	bl	800c69c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b6dc:	4b10      	ldr	r3, [pc, #64]	; (800b720 <prvCheckTasksWaitingTermination+0x50>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7fe fa63 	bl	8009bb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <prvCheckTasksWaitingTermination+0x54>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	4a0b      	ldr	r2, [pc, #44]	; (800b724 <prvCheckTasksWaitingTermination+0x54>)
 800b6f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6f8:	4b0b      	ldr	r3, [pc, #44]	; (800b728 <prvCheckTasksWaitingTermination+0x58>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <prvCheckTasksWaitingTermination+0x58>)
 800b700:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b702:	f000 fffb 	bl	800c6fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f810 	bl	800b72c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b70c:	4b06      	ldr	r3, [pc, #24]	; (800b728 <prvCheckTasksWaitingTermination+0x58>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d1e1      	bne.n	800b6d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b714:	bf00      	nop
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20001828 	.word	0x20001828
 800b724:	20001854 	.word	0x20001854
 800b728:	2000183c 	.word	0x2000183c

0800b72c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	334c      	adds	r3, #76	; 0x4c
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fb79 	bl	800ce30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b744:	2b00      	cmp	r3, #0
 800b746:	d108      	bne.n	800b75a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	4618      	mov	r0, r3
 800b74e:	f001 f969 	bl	800ca24 <vPortFree>
				vPortFree( pxTCB );
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f001 f966 	bl	800ca24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b758:	e018      	b.n	800b78c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b760:	2b01      	cmp	r3, #1
 800b762:	d103      	bne.n	800b76c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 f95d 	bl	800ca24 <vPortFree>
	}
 800b76a:	e00f      	b.n	800b78c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b772:	2b02      	cmp	r3, #2
 800b774:	d00a      	beq.n	800b78c <prvDeleteTCB+0x60>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <prvDeleteTCB+0x5e>
	}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b79a:	4b0e      	ldr	r3, [pc, #56]	; (800b7d4 <prvResetNextTaskUnblockTime+0x40>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <prvResetNextTaskUnblockTime+0x14>
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <prvResetNextTaskUnblockTime+0x16>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7ae:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <prvResetNextTaskUnblockTime+0x44>)
 800b7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7b6:	e008      	b.n	800b7ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b7b8:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <prvResetNextTaskUnblockTime+0x40>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	4a04      	ldr	r2, [pc, #16]	; (800b7d8 <prvResetNextTaskUnblockTime+0x44>)
 800b7c8:	6013      	str	r3, [r2, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc80      	pop	{r7}
 800b7d2:	4770      	bx	lr
 800b7d4:	2000180c 	.word	0x2000180c
 800b7d8:	20001874 	.word	0x20001874

0800b7dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7e2:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <xTaskGetSchedulerState+0x34>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	607b      	str	r3, [r7, #4]
 800b7ee:	e008      	b.n	800b802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f0:	4b08      	ldr	r3, [pc, #32]	; (800b814 <xTaskGetSchedulerState+0x38>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	607b      	str	r3, [r7, #4]
 800b7fc:	e001      	b.n	800b802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7fe:	2300      	movs	r3, #0
 800b800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b802:	687b      	ldr	r3, [r7, #4]
	}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	bc80      	pop	{r7}
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	20001860 	.word	0x20001860
 800b814:	2000187c 	.word	0x2000187c

0800b818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d06e      	beq.n	800b90c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b82e:	4b3a      	ldr	r3, [pc, #232]	; (800b918 <xTaskPriorityDisinherit+0x100>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	429a      	cmp	r2, r3
 800b836:	d00a      	beq.n	800b84e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	60fb      	str	r3, [r7, #12]
}
 800b84a:	bf00      	nop
 800b84c:	e7fe      	b.n	800b84c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60bb      	str	r3, [r7, #8]
}
 800b868:	bf00      	nop
 800b86a:	e7fe      	b.n	800b86a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b870:	1e5a      	subs	r2, r3, #1
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87e:	429a      	cmp	r2, r3
 800b880:	d044      	beq.n	800b90c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b886:	2b00      	cmp	r3, #0
 800b888:	d140      	bne.n	800b90c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fe f990 	bl	8009bb4 <uxListRemove>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d115      	bne.n	800b8c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89e:	491f      	ldr	r1, [pc, #124]	; (800b91c <xTaskPriorityDisinherit+0x104>)
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	440b      	add	r3, r1
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d10a      	bne.n	800b8c6 <xTaskPriorityDisinherit+0xae>
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ba:	43da      	mvns	r2, r3
 800b8bc:	4b18      	ldr	r3, [pc, #96]	; (800b920 <xTaskPriorityDisinherit+0x108>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4013      	ands	r3, r2
 800b8c2:	4a17      	ldr	r2, [pc, #92]	; (800b920 <xTaskPriorityDisinherit+0x108>)
 800b8c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d2:	f1c3 0207 	rsb	r2, r3, #7
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8de:	2201      	movs	r2, #1
 800b8e0:	409a      	lsls	r2, r3
 800b8e2:	4b0f      	ldr	r3, [pc, #60]	; (800b920 <xTaskPriorityDisinherit+0x108>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	4a0d      	ldr	r2, [pc, #52]	; (800b920 <xTaskPriorityDisinherit+0x108>)
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4a08      	ldr	r2, [pc, #32]	; (800b91c <xTaskPriorityDisinherit+0x104>)
 800b8fa:	441a      	add	r2, r3
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4619      	mov	r1, r3
 800b902:	4610      	mov	r0, r2
 800b904:	f7fe f8fb 	bl	8009afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b908:	2301      	movs	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b90c:	697b      	ldr	r3, [r7, #20]
	}
 800b90e:	4618      	mov	r0, r3
 800b910:	3718      	adds	r7, #24
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20001754 	.word	0x20001754
 800b91c:	20001758 	.word	0x20001758
 800b920:	2000185c 	.word	0x2000185c

0800b924 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b932:	f000 feb3 	bl	800c69c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b936:	4b29      	ldr	r3, [pc, #164]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b02      	cmp	r3, #2
 800b942:	d01c      	beq.n	800b97e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b944:	4b25      	ldr	r3, [pc, #148]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	43d2      	mvns	r2, r2
 800b950:	400a      	ands	r2, r1
 800b952:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b956:	4b21      	ldr	r3, [pc, #132]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00b      	beq.n	800b97e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b966:	2101      	movs	r1, #1
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f000 f9b5 	bl	800bcd8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b96e:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <xTaskNotifyWait+0xbc>)
 800b970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b97e:	f000 febd 	bl	800c6fc <vPortExitCritical>

		taskENTER_CRITICAL();
 800b982:	f000 fe8b 	bl	800c69c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d005      	beq.n	800b998 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b98c:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b998:	4b10      	ldr	r3, [pc, #64]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d002      	beq.n	800b9ac <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]
 800b9aa:	e00a      	b.n	800b9c2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	43d2      	mvns	r2, r2
 800b9b8:	400a      	ands	r2, r1
 800b9ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9c2:	4b06      	ldr	r3, [pc, #24]	; (800b9dc <xTaskNotifyWait+0xb8>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800b9cc:	f000 fe96 	bl	800c6fc <vPortExitCritical>

		return xReturn;
 800b9d0:	697b      	ldr	r3, [r7, #20]
	}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20001754 	.word	0x20001754
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08a      	sub	sp, #40	; 0x28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10a      	bne.n	800ba14 <xTaskGenericNotify+0x30>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	61bb      	str	r3, [r7, #24]
}
 800ba10:	bf00      	nop
 800ba12:	e7fe      	b.n	800ba12 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ba18:	f000 fe40 	bl	800c69c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ba32:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	2202      	movs	r2, #2
 800ba38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d82d      	bhi.n	800ba9e <xTaskGenericNotify+0xba>
 800ba42:	a201      	add	r2, pc, #4	; (adr r2, 800ba48 <xTaskGenericNotify+0x64>)
 800ba44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba48:	0800ba9f 	.word	0x0800ba9f
 800ba4c:	0800ba5d 	.word	0x0800ba5d
 800ba50:	0800ba6f 	.word	0x0800ba6f
 800ba54:	0800ba7f 	.word	0x0800ba7f
 800ba58:	0800ba89 	.word	0x0800ba89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	431a      	orrs	r2, r3
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ba6c:	e017      	b.n	800ba9e <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba74:	1c5a      	adds	r2, r3, #1
 800ba76:	6a3b      	ldr	r3, [r7, #32]
 800ba78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ba7c:	e00f      	b.n	800ba9e <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ba7e:	6a3b      	ldr	r3, [r7, #32]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ba86:	e00a      	b.n	800ba9e <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ba88:	7ffb      	ldrb	r3, [r7, #31]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d004      	beq.n	800ba98 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ba96:	e001      	b.n	800ba9c <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ba9c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ba9e:	7ffb      	ldrb	r3, [r7, #31]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d139      	bne.n	800bb18 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	3304      	adds	r3, #4
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe f883 	bl	8009bb4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800baae:	6a3b      	ldr	r3, [r7, #32]
 800bab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab2:	2201      	movs	r2, #1
 800bab4:	409a      	lsls	r2, r3
 800bab6:	4b1c      	ldr	r3, [pc, #112]	; (800bb28 <xTaskGenericNotify+0x144>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4313      	orrs	r3, r2
 800babc:	4a1a      	ldr	r2, [pc, #104]	; (800bb28 <xTaskGenericNotify+0x144>)
 800babe:	6013      	str	r3, [r2, #0]
 800bac0:	6a3b      	ldr	r3, [r7, #32]
 800bac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac4:	4613      	mov	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	4a17      	ldr	r2, [pc, #92]	; (800bb2c <xTaskGenericNotify+0x148>)
 800bace:	441a      	add	r2, r3
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	3304      	adds	r3, #4
 800bad4:	4619      	mov	r1, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	f7fe f811 	bl	8009afe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00a      	beq.n	800bafa <xTaskGenericNotify+0x116>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	617b      	str	r3, [r7, #20]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bafa:	6a3b      	ldr	r3, [r7, #32]
 800bafc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafe:	4b0c      	ldr	r3, [pc, #48]	; (800bb30 <xTaskGenericNotify+0x14c>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d907      	bls.n	800bb18 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bb08:	4b0a      	ldr	r3, [pc, #40]	; (800bb34 <xTaskGenericNotify+0x150>)
 800bb0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0e:	601a      	str	r2, [r3, #0]
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bb18:	f000 fdf0 	bl	800c6fc <vPortExitCritical>

		return xReturn;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3728      	adds	r7, #40	; 0x28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	2000185c 	.word	0x2000185c
 800bb2c:	20001758 	.word	0x20001758
 800bb30:	20001754 	.word	0x20001754
 800bb34:	e000ed04 	.word	0xe000ed04

0800bb38 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b08e      	sub	sp, #56	; 0x38
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	60b9      	str	r1, [r7, #8]
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	4613      	mov	r3, r2
 800bb46:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb68:	f000 fe5a 	bl	800c820 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bb70:	f3ef 8211 	mrs	r2, BASEPRI
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	623a      	str	r2, [r7, #32]
 800bb86:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bb88:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d004      	beq.n	800bb9c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800bbae:	79fb      	ldrb	r3, [r7, #7]
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d82f      	bhi.n	800bc14 <xTaskGenericNotifyFromISR+0xdc>
 800bbb4:	a201      	add	r2, pc, #4	; (adr r2, 800bbbc <xTaskGenericNotifyFromISR+0x84>)
 800bbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbba:	bf00      	nop
 800bbbc:	0800bc15 	.word	0x0800bc15
 800bbc0:	0800bbd1 	.word	0x0800bbd1
 800bbc4:	0800bbe3 	.word	0x0800bbe3
 800bbc8:	0800bbf3 	.word	0x0800bbf3
 800bbcc:	0800bbfd 	.word	0x0800bbfd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800bbe0:	e018      	b.n	800bc14 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800bbf0:	e010      	b.n	800bc14 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800bbfa:	e00b      	b.n	800bc14 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bbfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d004      	beq.n	800bc0e <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	68ba      	ldr	r2, [r7, #8]
 800bc08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bc0c:	e001      	b.n	800bc12 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bc12:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bc14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d146      	bne.n	800bcaa <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00a      	beq.n	800bc3a <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	61bb      	str	r3, [r7, #24]
}
 800bc36:	bf00      	nop
 800bc38:	e7fe      	b.n	800bc38 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc3a:	4b21      	ldr	r3, [pc, #132]	; (800bcc0 <xTaskGenericNotifyFromISR+0x188>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d11c      	bne.n	800bc7c <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	3304      	adds	r3, #4
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd ffb4 	bl	8009bb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	2201      	movs	r2, #1
 800bc52:	409a      	lsls	r2, r3
 800bc54:	4b1b      	ldr	r3, [pc, #108]	; (800bcc4 <xTaskGenericNotifyFromISR+0x18c>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <xTaskGenericNotifyFromISR+0x18c>)
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	4613      	mov	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	4a17      	ldr	r2, [pc, #92]	; (800bcc8 <xTaskGenericNotifyFromISR+0x190>)
 800bc6c:	441a      	add	r2, r3
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	3304      	adds	r3, #4
 800bc72:	4619      	mov	r1, r3
 800bc74:	4610      	mov	r0, r2
 800bc76:	f7fd ff42 	bl	8009afe <vListInsertEnd>
 800bc7a:	e005      	b.n	800bc88 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	3318      	adds	r3, #24
 800bc80:	4619      	mov	r1, r3
 800bc82:	4812      	ldr	r0, [pc, #72]	; (800bccc <xTaskGenericNotifyFromISR+0x194>)
 800bc84:	f7fd ff3b 	bl	8009afe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8c:	4b10      	ldr	r3, [pc, #64]	; (800bcd0 <xTaskGenericNotifyFromISR+0x198>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d909      	bls.n	800bcaa <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bc96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d003      	beq.n	800bca4 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9e:	2201      	movs	r2, #1
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800bca4:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <xTaskGenericNotifyFromISR+0x19c>)
 800bca6:	2201      	movs	r2, #1
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcac:	617b      	str	r3, [r7, #20]
	__asm volatile
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f383 8811 	msr	BASEPRI, r3
}
 800bcb4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800bcb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3738      	adds	r7, #56	; 0x38
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	2000187c 	.word	0x2000187c
 800bcc4:	2000185c 	.word	0x2000185c
 800bcc8:	20001758 	.word	0x20001758
 800bccc:	20001814 	.word	0x20001814
 800bcd0:	20001754 	.word	0x20001754
 800bcd4:	20001868 	.word	0x20001868

0800bcd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bce2:	4b29      	ldr	r3, [pc, #164]	; (800bd88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bce8:	4b28      	ldr	r3, [pc, #160]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3304      	adds	r3, #4
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd ff60 	bl	8009bb4 <uxListRemove>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10b      	bne.n	800bd12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bcfa:	4b24      	ldr	r3, [pc, #144]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd00:	2201      	movs	r2, #1
 800bd02:	fa02 f303 	lsl.w	r3, r2, r3
 800bd06:	43da      	mvns	r2, r3
 800bd08:	4b21      	ldr	r3, [pc, #132]	; (800bd90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	4a20      	ldr	r2, [pc, #128]	; (800bd90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d10a      	bne.n	800bd30 <prvAddCurrentTaskToDelayedList+0x58>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d007      	beq.n	800bd30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd20:	4b1a      	ldr	r3, [pc, #104]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	481a      	ldr	r0, [pc, #104]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd2a:	f7fd fee8 	bl	8009afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd2e:	e026      	b.n	800bd7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4413      	add	r3, r2
 800bd36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd38:	4b14      	ldr	r3, [pc, #80]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd40:	68ba      	ldr	r2, [r7, #8]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d209      	bcs.n	800bd5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd48:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3304      	adds	r3, #4
 800bd52:	4619      	mov	r1, r3
 800bd54:	4610      	mov	r0, r2
 800bd56:	f7fd fef5 	bl	8009b44 <vListInsert>
}
 800bd5a:	e010      	b.n	800bd7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	3304      	adds	r3, #4
 800bd66:	4619      	mov	r1, r3
 800bd68:	4610      	mov	r0, r2
 800bd6a:	f7fd feeb 	bl	8009b44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd6e:	4b0c      	ldr	r3, [pc, #48]	; (800bda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d202      	bcs.n	800bd7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd78:	4a09      	ldr	r2, [pc, #36]	; (800bda0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6013      	str	r3, [r2, #0]
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	20001858 	.word	0x20001858
 800bd8c:	20001754 	.word	0x20001754
 800bd90:	2000185c 	.word	0x2000185c
 800bd94:	20001840 	.word	0x20001840
 800bd98:	20001810 	.word	0x20001810
 800bd9c:	2000180c 	.word	0x2000180c
 800bda0:	20001874 	.word	0x20001874

0800bda4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b08a      	sub	sp, #40	; 0x28
 800bda8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdae:	f000 fb41 	bl	800c434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdb2:	4b1c      	ldr	r3, [pc, #112]	; (800be24 <xTimerCreateTimerTask+0x80>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d021      	beq.n	800bdfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdc2:	1d3a      	adds	r2, r7, #4
 800bdc4:	f107 0108 	add.w	r1, r7, #8
 800bdc8:	f107 030c 	add.w	r3, r7, #12
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f6 f877 	bl	8001ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	9202      	str	r2, [sp, #8]
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	2302      	movs	r3, #2
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	2300      	movs	r3, #0
 800bde2:	460a      	mov	r2, r1
 800bde4:	4910      	ldr	r1, [pc, #64]	; (800be28 <xTimerCreateTimerTask+0x84>)
 800bde6:	4811      	ldr	r0, [pc, #68]	; (800be2c <xTimerCreateTimerTask+0x88>)
 800bde8:	f7fe fcac 	bl	800a744 <xTaskCreateStatic>
 800bdec:	4603      	mov	r3, r0
 800bdee:	4a10      	ldr	r2, [pc, #64]	; (800be30 <xTimerCreateTimerTask+0x8c>)
 800bdf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdf2:	4b0f      	ldr	r3, [pc, #60]	; (800be30 <xTimerCreateTimerTask+0x8c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d001      	beq.n	800bdfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10a      	bne.n	800be1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	613b      	str	r3, [r7, #16]
}
 800be16:	bf00      	nop
 800be18:	e7fe      	b.n	800be18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be1a:	697b      	ldr	r3, [r7, #20]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	200018b0 	.word	0x200018b0
 800be28:	0800da48 	.word	0x0800da48
 800be2c:	0800c071 	.word	0x0800c071
 800be30:	200018b4 	.word	0x200018b4

0800be34 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800be42:	202c      	movs	r0, #44	; 0x2c
 800be44:	f000 fd2a 	bl	800c89c <pvPortMalloc>
 800be48:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00d      	beq.n	800be6c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f000 f846 	bl	800bef0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800be6c:	697b      	ldr	r3, [r7, #20]
	}
 800be6e:	4618      	mov	r0, r3
 800be70:	3718      	adds	r7, #24
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800be76:	b580      	push	{r7, lr}
 800be78:	b08a      	sub	sp, #40	; 0x28
 800be7a:	af02      	add	r7, sp, #8
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	607a      	str	r2, [r7, #4]
 800be82:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800be84:	232c      	movs	r3, #44	; 0x2c
 800be86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	2b2c      	cmp	r3, #44	; 0x2c
 800be8c:	d00a      	beq.n	800bea4 <xTimerCreateStatic+0x2e>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	61bb      	str	r3, [r7, #24]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10a      	bne.n	800bec0 <xTimerCreateStatic+0x4a>
	__asm volatile
 800beaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beae:	f383 8811 	msr	BASEPRI, r3
 800beb2:	f3bf 8f6f 	isb	sy
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	617b      	str	r3, [r7, #20]
}
 800bebc:	bf00      	nop
 800bebe:	e7fe      	b.n	800bebe <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00d      	beq.n	800bee6 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed0:	9300      	str	r3, [sp, #0]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	68b9      	ldr	r1, [r7, #8]
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f000 f809 	bl	800bef0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800bee6:	69fb      	ldr	r3, [r7, #28]
	}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b086      	sub	sp, #24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	607a      	str	r2, [r7, #4]
 800befc:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	617b      	str	r3, [r7, #20]
}
 800bf16:	bf00      	nop
 800bf18:	e7fe      	b.n	800bf18 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d015      	beq.n	800bf4c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bf20:	f000 fa88 	bl	800c434 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800bf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800bf36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf38:	683a      	ldr	r2, [r7, #0]
 800bf3a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3e:	6a3a      	ldr	r2, [r7, #32]
 800bf40:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf44:	3304      	adds	r3, #4
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fd fdcd 	bl	8009ae6 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bf4c:	bf00      	nop
 800bf4e:	3718      	adds	r7, #24
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08a      	sub	sp, #40	; 0x28
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf62:	2300      	movs	r3, #0
 800bf64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10a      	bne.n	800bf82 <xTimerGenericCommand+0x2e>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	623b      	str	r3, [r7, #32]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf82:	4b1a      	ldr	r3, [pc, #104]	; (800bfec <xTimerGenericCommand+0x98>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d02a      	beq.n	800bfe0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b05      	cmp	r3, #5
 800bf9a:	dc18      	bgt.n	800bfce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf9c:	f7ff fc1e 	bl	800b7dc <xTaskGetSchedulerState>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b02      	cmp	r3, #2
 800bfa4:	d109      	bne.n	800bfba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfa6:	4b11      	ldr	r3, [pc, #68]	; (800bfec <xTimerGenericCommand+0x98>)
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	f107 0114 	add.w	r1, r7, #20
 800bfae:	2300      	movs	r3, #0
 800bfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfb2:	f7fd ff65 	bl	8009e80 <xQueueGenericSend>
 800bfb6:	6278      	str	r0, [r7, #36]	; 0x24
 800bfb8:	e012      	b.n	800bfe0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bfba:	4b0c      	ldr	r3, [pc, #48]	; (800bfec <xTimerGenericCommand+0x98>)
 800bfbc:	6818      	ldr	r0, [r3, #0]
 800bfbe:	f107 0114 	add.w	r1, r7, #20
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	f7fd ff5b 	bl	8009e80 <xQueueGenericSend>
 800bfca:	6278      	str	r0, [r7, #36]	; 0x24
 800bfcc:	e008      	b.n	800bfe0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bfce:	4b07      	ldr	r3, [pc, #28]	; (800bfec <xTimerGenericCommand+0x98>)
 800bfd0:	6818      	ldr	r0, [r3, #0]
 800bfd2:	f107 0114 	add.w	r1, r7, #20
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	f7fe f84f 	bl	800a07c <xQueueGenericSendFromISR>
 800bfde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3728      	adds	r7, #40	; 0x28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	200018b0 	.word	0x200018b0

0800bff0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af02      	add	r7, sp, #8
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bffa:	4b1c      	ldr	r3, [pc, #112]	; (800c06c <prvProcessExpiredTimer+0x7c>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	3304      	adds	r3, #4
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fd fdd3 	bl	8009bb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d122      	bne.n	800c05c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	18d1      	adds	r1, r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	6978      	ldr	r0, [r7, #20]
 800c024:	f000 f8c8 	bl	800c1b8 <prvInsertTimerInActiveList>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d016      	beq.n	800c05c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c02e:	2300      	movs	r3, #0
 800c030:	9300      	str	r3, [sp, #0]
 800c032:	2300      	movs	r3, #0
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	2100      	movs	r1, #0
 800c038:	6978      	ldr	r0, [r7, #20]
 800c03a:	f7ff ff8b 	bl	800bf54 <xTimerGenericCommand>
 800c03e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10a      	bne.n	800c05c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800c046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04a:	f383 8811 	msr	BASEPRI, r3
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f3bf 8f4f 	dsb	sy
 800c056:	60fb      	str	r3, [r7, #12]
}
 800c058:	bf00      	nop
 800c05a:	e7fe      	b.n	800c05a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	6978      	ldr	r0, [r7, #20]
 800c062:	4798      	blx	r3
}
 800c064:	bf00      	nop
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	200018a8 	.word	0x200018a8

0800c070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c078:	f107 0308 	add.w	r3, r7, #8
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 f857 	bl	800c130 <prvGetNextExpireTime>
 800c082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	4619      	mov	r1, r3
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f803 	bl	800c094 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c08e:	f000 f8d5 	bl	800c23c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c092:	e7f1      	b.n	800c078 <prvTimerTask+0x8>

0800c094 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c09e:	f7fe ffb1 	bl	800b004 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0a2:	f107 0308 	add.w	r3, r7, #8
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 f866 	bl	800c178 <prvSampleTimeNow>
 800c0ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d130      	bne.n	800c116 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d10a      	bne.n	800c0d0 <prvProcessTimerOrBlockTask+0x3c>
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d806      	bhi.n	800c0d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c0c2:	f7fe ffad 	bl	800b020 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0c6:	68f9      	ldr	r1, [r7, #12]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7ff ff91 	bl	800bff0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0ce:	e024      	b.n	800c11a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d008      	beq.n	800c0e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0d6:	4b13      	ldr	r3, [pc, #76]	; (800c124 <prvProcessTimerOrBlockTask+0x90>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bf0c      	ite	eq
 800c0e0:	2301      	moveq	r3, #1
 800c0e2:	2300      	movne	r3, #0
 800c0e4:	b2db      	uxtb	r3, r3
 800c0e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0e8:	4b0f      	ldr	r3, [pc, #60]	; (800c128 <prvProcessTimerOrBlockTask+0x94>)
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	683a      	ldr	r2, [r7, #0]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7fe faf1 	bl	800a6dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0fa:	f7fe ff91 	bl	800b020 <xTaskResumeAll>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10a      	bne.n	800c11a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c104:	4b09      	ldr	r3, [pc, #36]	; (800c12c <prvProcessTimerOrBlockTask+0x98>)
 800c106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10a:	601a      	str	r2, [r3, #0]
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	f3bf 8f6f 	isb	sy
}
 800c114:	e001      	b.n	800c11a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c116:	f7fe ff83 	bl	800b020 <xTaskResumeAll>
}
 800c11a:	bf00      	nop
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	200018ac 	.word	0x200018ac
 800c128:	200018b0 	.word	0x200018b0
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c138:	4b0e      	ldr	r3, [pc, #56]	; (800c174 <prvGetNextExpireTime+0x44>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	bf0c      	ite	eq
 800c142:	2301      	moveq	r3, #1
 800c144:	2300      	movne	r3, #0
 800c146:	b2db      	uxtb	r3, r3
 800c148:	461a      	mov	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d105      	bne.n	800c162 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c156:	4b07      	ldr	r3, [pc, #28]	; (800c174 <prvGetNextExpireTime+0x44>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	60fb      	str	r3, [r7, #12]
 800c160:	e001      	b.n	800c166 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c166:	68fb      	ldr	r3, [r7, #12]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bc80      	pop	{r7}
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	200018a8 	.word	0x200018a8

0800c178 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c180:	f7fe ffea 	bl	800b158 <xTaskGetTickCount>
 800c184:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c186:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <prvSampleTimeNow+0x3c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d205      	bcs.n	800c19c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c190:	f000 f8ee 	bl	800c370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2201      	movs	r2, #1
 800c198:	601a      	str	r2, [r3, #0]
 800c19a:	e002      	b.n	800c1a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1a2:	4a04      	ldr	r2, [pc, #16]	; (800c1b4 <prvSampleTimeNow+0x3c>)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200018b8 	.word	0x200018b8

0800c1b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1d6:	68ba      	ldr	r2, [r7, #8]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d812      	bhi.n	800c204 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	1ad2      	subs	r2, r2, r3
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d302      	bcc.n	800c1f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	617b      	str	r3, [r7, #20]
 800c1f0:	e01b      	b.n	800c22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1f2:	4b10      	ldr	r3, [pc, #64]	; (800c234 <prvInsertTimerInActiveList+0x7c>)
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f7fd fca1 	bl	8009b44 <vListInsert>
 800c202:	e012      	b.n	800c22a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d206      	bcs.n	800c21a <prvInsertTimerInActiveList+0x62>
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	429a      	cmp	r2, r3
 800c212:	d302      	bcc.n	800c21a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c214:	2301      	movs	r3, #1
 800c216:	617b      	str	r3, [r7, #20]
 800c218:	e007      	b.n	800c22a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c21a:	4b07      	ldr	r3, [pc, #28]	; (800c238 <prvInsertTimerInActiveList+0x80>)
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3304      	adds	r3, #4
 800c222:	4619      	mov	r1, r3
 800c224:	4610      	mov	r0, r2
 800c226:	f7fd fc8d 	bl	8009b44 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c22a:	697b      	ldr	r3, [r7, #20]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	200018ac 	.word	0x200018ac
 800c238:	200018a8 	.word	0x200018a8

0800c23c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b08c      	sub	sp, #48	; 0x30
 800c240:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c242:	e081      	b.n	800c348 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	db7e      	blt.n	800c348 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d004      	beq.n	800c260 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c258:	3304      	adds	r3, #4
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fd fcaa 	bl	8009bb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c260:	1d3b      	adds	r3, r7, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7ff ff88 	bl	800c178 <prvSampleTimeNow>
 800c268:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d86a      	bhi.n	800c346 <prvProcessReceivedCommands+0x10a>
 800c270:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <prvProcessReceivedCommands+0x3c>)
 800c272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c2a1 	.word	0x0800c2a1
 800c27c:	0800c2a1 	.word	0x0800c2a1
 800c280:	0800c2a1 	.word	0x0800c2a1
 800c284:	0800c349 	.word	0x0800c349
 800c288:	0800c2fd 	.word	0x0800c2fd
 800c28c:	0800c335 	.word	0x0800c335
 800c290:	0800c2a1 	.word	0x0800c2a1
 800c294:	0800c2a1 	.word	0x0800c2a1
 800c298:	0800c349 	.word	0x0800c349
 800c29c:	0800c2fd 	.word	0x0800c2fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	18d1      	adds	r1, r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6a3a      	ldr	r2, [r7, #32]
 800c2ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ae:	f7ff ff83 	bl	800c1b8 <prvInsertTimerInActiveList>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d047      	beq.n	800c348 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	69db      	ldr	r3, [r3, #28]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d13f      	bne.n	800c348 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	441a      	add	r2, r3
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2da:	f7ff fe3b 	bl	800bf54 <xTimerGenericCommand>
 800c2de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d130      	bne.n	800c348 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	61bb      	str	r3, [r7, #24]
}
 800c2f8:	bf00      	nop
 800c2fa:	e7fe      	b.n	800c2fa <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c300:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800c30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	617b      	str	r3, [r7, #20]
}
 800c31c:	bf00      	nop
 800c31e:	e7fe      	b.n	800c31e <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	699a      	ldr	r2, [r3, #24]
 800c324:	6a3b      	ldr	r3, [r7, #32]
 800c326:	18d1      	adds	r1, r2, r3
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	6a3a      	ldr	r2, [r7, #32]
 800c32c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c32e:	f7ff ff43 	bl	800c1b8 <prvInsertTimerInActiveList>
					break;
 800c332:	e009      	b.n	800c348 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d104      	bne.n	800c348 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800c33e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c340:	f000 fb70 	bl	800ca24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c344:	e000      	b.n	800c348 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800c346:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c348:	4b08      	ldr	r3, [pc, #32]	; (800c36c <prvProcessReceivedCommands+0x130>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f107 0108 	add.w	r1, r7, #8
 800c350:	2200      	movs	r2, #0
 800c352:	4618      	mov	r0, r3
 800c354:	f7fd ff2a 	bl	800a1ac <xQueueReceive>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f47f af72 	bne.w	800c244 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	3728      	adds	r7, #40	; 0x28
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	200018b0 	.word	0x200018b0

0800c370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b088      	sub	sp, #32
 800c374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c376:	e045      	b.n	800c404 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c378:	4b2c      	ldr	r3, [pc, #176]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	68db      	ldr	r3, [r3, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c382:	4b2a      	ldr	r3, [pc, #168]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	68db      	ldr	r3, [r3, #12]
 800c38a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3304      	adds	r3, #4
 800c390:	4618      	mov	r0, r3
 800c392:	f7fd fc0f 	bl	8009bb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	69db      	ldr	r3, [r3, #28]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d12e      	bne.n	800c404 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d90e      	bls.n	800c3d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3c4:	4b19      	ldr	r3, [pc, #100]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	f7fd fbb8 	bl	8009b44 <vListInsert>
 800c3d4:	e016      	b.n	800c404 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	2100      	movs	r1, #0
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f7ff fdb7 	bl	800bf54 <xTimerGenericCommand>
 800c3e6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10a      	bne.n	800c404 <prvSwitchTimerLists+0x94>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	603b      	str	r3, [r7, #0]
}
 800c400:	bf00      	nop
 800c402:	e7fe      	b.n	800c402 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c404:	4b09      	ldr	r3, [pc, #36]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1b4      	bne.n	800c378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c40e:	4b07      	ldr	r3, [pc, #28]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c414:	4b06      	ldr	r3, [pc, #24]	; (800c430 <prvSwitchTimerLists+0xc0>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a04      	ldr	r2, [pc, #16]	; (800c42c <prvSwitchTimerLists+0xbc>)
 800c41a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c41c:	4a04      	ldr	r2, [pc, #16]	; (800c430 <prvSwitchTimerLists+0xc0>)
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	6013      	str	r3, [r2, #0]
}
 800c422:	bf00      	nop
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200018a8 	.word	0x200018a8
 800c430:	200018ac 	.word	0x200018ac

0800c434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c43a:	f000 f92f 	bl	800c69c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c43e:	4b15      	ldr	r3, [pc, #84]	; (800c494 <prvCheckForValidListAndQueue+0x60>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d120      	bne.n	800c488 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c446:	4814      	ldr	r0, [pc, #80]	; (800c498 <prvCheckForValidListAndQueue+0x64>)
 800c448:	f7fd fb2e 	bl	8009aa8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c44c:	4813      	ldr	r0, [pc, #76]	; (800c49c <prvCheckForValidListAndQueue+0x68>)
 800c44e:	f7fd fb2b 	bl	8009aa8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c452:	4b13      	ldr	r3, [pc, #76]	; (800c4a0 <prvCheckForValidListAndQueue+0x6c>)
 800c454:	4a10      	ldr	r2, [pc, #64]	; (800c498 <prvCheckForValidListAndQueue+0x64>)
 800c456:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c458:	4b12      	ldr	r3, [pc, #72]	; (800c4a4 <prvCheckForValidListAndQueue+0x70>)
 800c45a:	4a10      	ldr	r2, [pc, #64]	; (800c49c <prvCheckForValidListAndQueue+0x68>)
 800c45c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c45e:	2300      	movs	r3, #0
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4b11      	ldr	r3, [pc, #68]	; (800c4a8 <prvCheckForValidListAndQueue+0x74>)
 800c464:	4a11      	ldr	r2, [pc, #68]	; (800c4ac <prvCheckForValidListAndQueue+0x78>)
 800c466:	210c      	movs	r1, #12
 800c468:	200a      	movs	r0, #10
 800c46a:	f7fd fc35 	bl	8009cd8 <xQueueGenericCreateStatic>
 800c46e:	4603      	mov	r3, r0
 800c470:	4a08      	ldr	r2, [pc, #32]	; (800c494 <prvCheckForValidListAndQueue+0x60>)
 800c472:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c474:	4b07      	ldr	r3, [pc, #28]	; (800c494 <prvCheckForValidListAndQueue+0x60>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d005      	beq.n	800c488 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c47c:	4b05      	ldr	r3, [pc, #20]	; (800c494 <prvCheckForValidListAndQueue+0x60>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	490b      	ldr	r1, [pc, #44]	; (800c4b0 <prvCheckForValidListAndQueue+0x7c>)
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe f902 	bl	800a68c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c488:	f000 f938 	bl	800c6fc <vPortExitCritical>
}
 800c48c:	bf00      	nop
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	200018b0 	.word	0x200018b0
 800c498:	20001880 	.word	0x20001880
 800c49c:	20001894 	.word	0x20001894
 800c4a0:	200018a8 	.word	0x200018a8
 800c4a4:	200018ac 	.word	0x200018ac
 800c4a8:	20001934 	.word	0x20001934
 800c4ac:	200018bc 	.word	0x200018bc
 800c4b0:	0800da50 	.word	0x0800da50

0800c4b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3b04      	subs	r3, #4
 800c4c4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	3b04      	subs	r3, #4
 800c4d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f023 0201 	bic.w	r2, r3, #1
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4e4:	4a08      	ldr	r2, [pc, #32]	; (800c508 <pxPortInitialiseStack+0x54>)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3b14      	subs	r3, #20
 800c4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3b20      	subs	r3, #32
 800c4fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	bc80      	pop	{r7}
 800c506:	4770      	bx	lr
 800c508:	0800c50d 	.word	0x0800c50d

0800c50c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c512:	2300      	movs	r3, #0
 800c514:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c516:	4b12      	ldr	r3, [pc, #72]	; (800c560 <prvTaskExitError+0x54>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51e:	d00a      	beq.n	800c536 <prvTaskExitError+0x2a>
	__asm volatile
 800c520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c524:	f383 8811 	msr	BASEPRI, r3
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	60fb      	str	r3, [r7, #12]
}
 800c532:	bf00      	nop
 800c534:	e7fe      	b.n	800c534 <prvTaskExitError+0x28>
	__asm volatile
 800c536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53a:	f383 8811 	msr	BASEPRI, r3
 800c53e:	f3bf 8f6f 	isb	sy
 800c542:	f3bf 8f4f 	dsb	sy
 800c546:	60bb      	str	r3, [r7, #8]
}
 800c548:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c54a:	bf00      	nop
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d0fc      	beq.n	800c54c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	bc80      	pop	{r7}
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	2000020c 	.word	0x2000020c
	...

0800c570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <pxCurrentTCBConst2>)
 800c572:	6819      	ldr	r1, [r3, #0]
 800c574:	6808      	ldr	r0, [r1, #0]
 800c576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c57a:	f380 8809 	msr	PSP, r0
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f04f 0000 	mov.w	r0, #0
 800c586:	f380 8811 	msr	BASEPRI, r0
 800c58a:	f04e 0e0d 	orr.w	lr, lr, #13
 800c58e:	4770      	bx	lr

0800c590 <pxCurrentTCBConst2>:
 800c590:	20001754 	.word	0x20001754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop

0800c598 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c598:	4806      	ldr	r0, [pc, #24]	; (800c5b4 <prvPortStartFirstTask+0x1c>)
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	6800      	ldr	r0, [r0, #0]
 800c59e:	f380 8808 	msr	MSP, r0
 800c5a2:	b662      	cpsie	i
 800c5a4:	b661      	cpsie	f
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	df00      	svc	0
 800c5b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5b2:	bf00      	nop
 800c5b4:	e000ed08 	.word	0xe000ed08

0800c5b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5be:	4b32      	ldr	r3, [pc, #200]	; (800c688 <xPortStartScheduler+0xd0>)
 800c5c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	b2db      	uxtb	r3, r3
 800c5c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	22ff      	movs	r2, #255	; 0xff
 800c5ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c5d8:	78fb      	ldrb	r3, [r7, #3]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c5e0:	b2da      	uxtb	r2, r3
 800c5e2:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <xPortStartScheduler+0xd4>)
 800c5e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5e6:	4b2a      	ldr	r3, [pc, #168]	; (800c690 <xPortStartScheduler+0xd8>)
 800c5e8:	2207      	movs	r2, #7
 800c5ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5ec:	e009      	b.n	800c602 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c5ee:	4b28      	ldr	r3, [pc, #160]	; (800c690 <xPortStartScheduler+0xd8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	4a26      	ldr	r2, [pc, #152]	; (800c690 <xPortStartScheduler+0xd8>)
 800c5f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5f8:	78fb      	ldrb	r3, [r7, #3]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c602:	78fb      	ldrb	r3, [r7, #3]
 800c604:	b2db      	uxtb	r3, r3
 800c606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c60a:	2b80      	cmp	r3, #128	; 0x80
 800c60c:	d0ef      	beq.n	800c5ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c60e:	4b20      	ldr	r3, [pc, #128]	; (800c690 <xPortStartScheduler+0xd8>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f1c3 0307 	rsb	r3, r3, #7
 800c616:	2b04      	cmp	r3, #4
 800c618:	d00a      	beq.n	800c630 <xPortStartScheduler+0x78>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	60bb      	str	r3, [r7, #8]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c630:	4b17      	ldr	r3, [pc, #92]	; (800c690 <xPortStartScheduler+0xd8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	021b      	lsls	r3, r3, #8
 800c636:	4a16      	ldr	r2, [pc, #88]	; (800c690 <xPortStartScheduler+0xd8>)
 800c638:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c63a:	4b15      	ldr	r3, [pc, #84]	; (800c690 <xPortStartScheduler+0xd8>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c642:	4a13      	ldr	r2, [pc, #76]	; (800c690 <xPortStartScheduler+0xd8>)
 800c644:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c64e:	4b11      	ldr	r3, [pc, #68]	; (800c694 <xPortStartScheduler+0xdc>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a10      	ldr	r2, [pc, #64]	; (800c694 <xPortStartScheduler+0xdc>)
 800c654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c658:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c65a:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <xPortStartScheduler+0xdc>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4a0d      	ldr	r2, [pc, #52]	; (800c694 <xPortStartScheduler+0xdc>)
 800c660:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c664:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c666:	f000 f8b9 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c66a:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <xPortStartScheduler+0xe0>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c670:	f7ff ff92 	bl	800c598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c674:	f7fe fe3c 	bl	800b2f0 <vTaskSwitchContext>
	prvTaskExitError();
 800c678:	f7ff ff48 	bl	800c50c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	e000e400 	.word	0xe000e400
 800c68c:	2000197c 	.word	0x2000197c
 800c690:	20001980 	.word	0x20001980
 800c694:	e000ed20 	.word	0xe000ed20
 800c698:	2000020c 	.word	0x2000020c

0800c69c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	607b      	str	r3, [r7, #4]
}
 800c6b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c6b6:	4b0f      	ldr	r3, [pc, #60]	; (800c6f4 <vPortEnterCritical+0x58>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	4a0d      	ldr	r2, [pc, #52]	; (800c6f4 <vPortEnterCritical+0x58>)
 800c6be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c6c0:	4b0c      	ldr	r3, [pc, #48]	; (800c6f4 <vPortEnterCritical+0x58>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d10f      	bne.n	800c6e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6c8:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <vPortEnterCritical+0x5c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d00a      	beq.n	800c6e8 <vPortEnterCritical+0x4c>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	603b      	str	r3, [r7, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <vPortEnterCritical+0x4a>
	}
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bc80      	pop	{r7}
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop
 800c6f4:	2000020c 	.word	0x2000020c
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c702:	4b11      	ldr	r3, [pc, #68]	; (800c748 <vPortExitCritical+0x4c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <vPortExitCritical+0x24>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	607b      	str	r3, [r7, #4]
}
 800c71c:	bf00      	nop
 800c71e:	e7fe      	b.n	800c71e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c720:	4b09      	ldr	r3, [pc, #36]	; (800c748 <vPortExitCritical+0x4c>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	3b01      	subs	r3, #1
 800c726:	4a08      	ldr	r2, [pc, #32]	; (800c748 <vPortExitCritical+0x4c>)
 800c728:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c72a:	4b07      	ldr	r3, [pc, #28]	; (800c748 <vPortExitCritical+0x4c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d105      	bne.n	800c73e <vPortExitCritical+0x42>
 800c732:	2300      	movs	r3, #0
 800c734:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	f383 8811 	msr	BASEPRI, r3
}
 800c73c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c73e:	bf00      	nop
 800c740:	370c      	adds	r7, #12
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr
 800c748:	2000020c 	.word	0x2000020c
 800c74c:	00000000 	.word	0x00000000

0800c750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c750:	f3ef 8009 	mrs	r0, PSP
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	4b0d      	ldr	r3, [pc, #52]	; (800c790 <pxCurrentTCBConst>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c760:	6010      	str	r0, [r2, #0]
 800c762:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c766:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c76a:	f380 8811 	msr	BASEPRI, r0
 800c76e:	f7fe fdbf 	bl	800b2f0 <vTaskSwitchContext>
 800c772:	f04f 0000 	mov.w	r0, #0
 800c776:	f380 8811 	msr	BASEPRI, r0
 800c77a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c77e:	6819      	ldr	r1, [r3, #0]
 800c780:	6808      	ldr	r0, [r1, #0]
 800c782:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c786:	f380 8809 	msr	PSP, r0
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	4770      	bx	lr

0800c790 <pxCurrentTCBConst>:
 800c790:	20001754 	.word	0x20001754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7fe fcdf 	bl	800b174 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	; (800c7d8 <SysTick_Handler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <vPortSetupTimerInterrupt+0x30>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b09      	ldr	r3, [pc, #36]	; (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a09      	ldr	r2, [pc, #36]	; (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a08      	ldr	r2, [pc, #32]	; (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b03      	ldr	r3, [pc, #12]	; (800c80c <vPortSetupTimerInterrupt+0x30>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	bc80      	pop	{r7}
 800c80a:	4770      	bx	lr
 800c80c:	e000e010 	.word	0xe000e010
 800c810:	e000e018 	.word	0xe000e018
 800c814:	20000200 	.word	0x20000200
 800c818:	10624dd3 	.word	0x10624dd3
 800c81c:	e000e014 	.word	0xe000e014

0800c820 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c826:	f3ef 8305 	mrs	r3, IPSR
 800c82a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2b0f      	cmp	r3, #15
 800c830:	d914      	bls.n	800c85c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c832:	4a16      	ldr	r2, [pc, #88]	; (800c88c <vPortValidateInterruptPriority+0x6c>)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4413      	add	r3, r2
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c83c:	4b14      	ldr	r3, [pc, #80]	; (800c890 <vPortValidateInterruptPriority+0x70>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	7afa      	ldrb	r2, [r7, #11]
 800c842:	429a      	cmp	r2, r3
 800c844:	d20a      	bcs.n	800c85c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	607b      	str	r3, [r7, #4]
}
 800c858:	bf00      	nop
 800c85a:	e7fe      	b.n	800c85a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c85c:	4b0d      	ldr	r3, [pc, #52]	; (800c894 <vPortValidateInterruptPriority+0x74>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c864:	4b0c      	ldr	r3, [pc, #48]	; (800c898 <vPortValidateInterruptPriority+0x78>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d90a      	bls.n	800c882 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	603b      	str	r3, [r7, #0]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <vPortValidateInterruptPriority+0x60>
	}
 800c882:	bf00      	nop
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	bc80      	pop	{r7}
 800c88a:	4770      	bx	lr
 800c88c:	e000e3f0 	.word	0xe000e3f0
 800c890:	2000197c 	.word	0x2000197c
 800c894:	e000ed0c 	.word	0xe000ed0c
 800c898:	20001980 	.word	0x20001980

0800c89c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b08a      	sub	sp, #40	; 0x28
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8a8:	f7fe fbac 	bl	800b004 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8ac:	4b58      	ldr	r3, [pc, #352]	; (800ca10 <pvPortMalloc+0x174>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8b4:	f000 f910 	bl	800cad8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8b8:	4b56      	ldr	r3, [pc, #344]	; (800ca14 <pvPortMalloc+0x178>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4013      	ands	r3, r2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f040 808e 	bne.w	800c9e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d01d      	beq.n	800c908 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c8cc:	2208      	movs	r2, #8
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f003 0307 	and.w	r3, r3, #7
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d014      	beq.n	800c908 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f023 0307 	bic.w	r3, r3, #7
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00a      	beq.n	800c908 <pvPortMalloc+0x6c>
	__asm volatile
 800c8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	617b      	str	r3, [r7, #20]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d069      	beq.n	800c9e2 <pvPortMalloc+0x146>
 800c90e:	4b42      	ldr	r3, [pc, #264]	; (800ca18 <pvPortMalloc+0x17c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	429a      	cmp	r2, r3
 800c916:	d864      	bhi.n	800c9e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c918:	4b40      	ldr	r3, [pc, #256]	; (800ca1c <pvPortMalloc+0x180>)
 800c91a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c91c:	4b3f      	ldr	r3, [pc, #252]	; (800ca1c <pvPortMalloc+0x180>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c922:	e004      	b.n	800c92e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	429a      	cmp	r2, r3
 800c936:	d903      	bls.n	800c940 <pvPortMalloc+0xa4>
 800c938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1f1      	bne.n	800c924 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c940:	4b33      	ldr	r3, [pc, #204]	; (800ca10 <pvPortMalloc+0x174>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c946:	429a      	cmp	r2, r3
 800c948:	d04b      	beq.n	800c9e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c94a:	6a3b      	ldr	r3, [r7, #32]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2208      	movs	r2, #8
 800c950:	4413      	add	r3, r2
 800c952:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	1ad2      	subs	r2, r2, r3
 800c964:	2308      	movs	r3, #8
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	429a      	cmp	r2, r3
 800c96a:	d91f      	bls.n	800c9ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c96c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4413      	add	r3, r2
 800c972:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <pvPortMalloc+0xf8>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	613b      	str	r3, [r7, #16]
}
 800c990:	bf00      	nop
 800c992:	e7fe      	b.n	800c992 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	1ad2      	subs	r2, r2, r3
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9a6:	69b8      	ldr	r0, [r7, #24]
 800c9a8:	f000 f8f8 	bl	800cb9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9ac:	4b1a      	ldr	r3, [pc, #104]	; (800ca18 <pvPortMalloc+0x17c>)
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	4a18      	ldr	r2, [pc, #96]	; (800ca18 <pvPortMalloc+0x17c>)
 800c9b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9ba:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <pvPortMalloc+0x17c>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4b18      	ldr	r3, [pc, #96]	; (800ca20 <pvPortMalloc+0x184>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d203      	bcs.n	800c9ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <pvPortMalloc+0x17c>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a15      	ldr	r2, [pc, #84]	; (800ca20 <pvPortMalloc+0x184>)
 800c9cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	4b10      	ldr	r3, [pc, #64]	; (800ca14 <pvPortMalloc+0x178>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	431a      	orrs	r2, r3
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	2200      	movs	r2, #0
 800c9e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9e2:	f7fe fb1d 	bl	800b020 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	f003 0307 	and.w	r3, r3, #7
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00a      	beq.n	800ca06 <pvPortMalloc+0x16a>
	__asm volatile
 800c9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f4:	f383 8811 	msr	BASEPRI, r3
 800c9f8:	f3bf 8f6f 	isb	sy
 800c9fc:	f3bf 8f4f 	dsb	sy
 800ca00:	60fb      	str	r3, [r7, #12]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <pvPortMalloc+0x168>
	return pvReturn;
 800ca06:	69fb      	ldr	r3, [r7, #28]
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3728      	adds	r7, #40	; 0x28
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20002d8c 	.word	0x20002d8c
 800ca14:	20002d98 	.word	0x20002d98
 800ca18:	20002d90 	.word	0x20002d90
 800ca1c:	20002d84 	.word	0x20002d84
 800ca20:	20002d94 	.word	0x20002d94

0800ca24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d048      	beq.n	800cac8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca36:	2308      	movs	r3, #8
 800ca38:	425b      	negs	r3, r3
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	4b21      	ldr	r3, [pc, #132]	; (800cad0 <vPortFree+0xac>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10a      	bne.n	800ca68 <vPortFree+0x44>
	__asm volatile
 800ca52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca56:	f383 8811 	msr	BASEPRI, r3
 800ca5a:	f3bf 8f6f 	isb	sy
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	60fb      	str	r3, [r7, #12]
}
 800ca64:	bf00      	nop
 800ca66:	e7fe      	b.n	800ca66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00a      	beq.n	800ca86 <vPortFree+0x62>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60bb      	str	r3, [r7, #8]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <vPortFree+0xac>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4013      	ands	r3, r2
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d019      	beq.n	800cac8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d115      	bne.n	800cac8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	685a      	ldr	r2, [r3, #4]
 800caa0:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <vPortFree+0xac>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	43db      	mvns	r3, r3
 800caa6:	401a      	ands	r2, r3
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800caac:	f7fe faaa 	bl	800b004 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <vPortFree+0xb0>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4413      	add	r3, r2
 800caba:	4a06      	ldr	r2, [pc, #24]	; (800cad4 <vPortFree+0xb0>)
 800cabc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cabe:	6938      	ldr	r0, [r7, #16]
 800cac0:	f000 f86c 	bl	800cb9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cac4:	f7fe faac 	bl	800b020 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cac8:	bf00      	nop
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20002d98 	.word	0x20002d98
 800cad4:	20002d90 	.word	0x20002d90

0800cad8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cade:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cae2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cae4:	4b27      	ldr	r3, [pc, #156]	; (800cb84 <prvHeapInit+0xac>)
 800cae6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00c      	beq.n	800cb0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3307      	adds	r3, #7
 800caf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f023 0307 	bic.w	r3, r3, #7
 800cafe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb00:	68ba      	ldr	r2, [r7, #8]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	4a1f      	ldr	r2, [pc, #124]	; (800cb84 <prvHeapInit+0xac>)
 800cb08:	4413      	add	r3, r2
 800cb0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb10:	4a1d      	ldr	r2, [pc, #116]	; (800cb88 <prvHeapInit+0xb0>)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb16:	4b1c      	ldr	r3, [pc, #112]	; (800cb88 <prvHeapInit+0xb0>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	4413      	add	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb24:	2208      	movs	r2, #8
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	1a9b      	subs	r3, r3, r2
 800cb2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f023 0307 	bic.w	r3, r3, #7
 800cb32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	4a15      	ldr	r2, [pc, #84]	; (800cb8c <prvHeapInit+0xb4>)
 800cb38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb3a:	4b14      	ldr	r3, [pc, #80]	; (800cb8c <prvHeapInit+0xb4>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb42:	4b12      	ldr	r3, [pc, #72]	; (800cb8c <prvHeapInit+0xb4>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	1ad2      	subs	r2, r2, r3
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb58:	4b0c      	ldr	r3, [pc, #48]	; (800cb8c <prvHeapInit+0xb4>)
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	4a0a      	ldr	r2, [pc, #40]	; (800cb90 <prvHeapInit+0xb8>)
 800cb66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	4a09      	ldr	r2, [pc, #36]	; (800cb94 <prvHeapInit+0xbc>)
 800cb6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb70:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <prvHeapInit+0xc0>)
 800cb72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb76:	601a      	str	r2, [r3, #0]
}
 800cb78:	bf00      	nop
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bc80      	pop	{r7}
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	20001984 	.word	0x20001984
 800cb88:	20002d84 	.word	0x20002d84
 800cb8c:	20002d8c 	.word	0x20002d8c
 800cb90:	20002d94 	.word	0x20002d94
 800cb94:	20002d90 	.word	0x20002d90
 800cb98:	20002d98 	.word	0x20002d98

0800cb9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cba4:	4b27      	ldr	r3, [pc, #156]	; (800cc44 <prvInsertBlockIntoFreeList+0xa8>)
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	e002      	b.n	800cbb0 <prvInsertBlockIntoFreeList+0x14>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d8f7      	bhi.n	800cbaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68ba      	ldr	r2, [r7, #8]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d108      	bne.n	800cbde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	441a      	add	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	441a      	add	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d118      	bne.n	800cc24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <prvInsertBlockIntoFreeList+0xac>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d00d      	beq.n	800cc1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685a      	ldr	r2, [r3, #4]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	441a      	add	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	e008      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc1a:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <prvInsertBlockIntoFreeList+0xac>)
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	601a      	str	r2, [r3, #0]
 800cc22:	e003      	b.n	800cc2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d002      	beq.n	800cc3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	687a      	ldr	r2, [r7, #4]
 800cc38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bc80      	pop	{r7}
 800cc42:	4770      	bx	lr
 800cc44:	20002d84 	.word	0x20002d84
 800cc48:	20002d8c 	.word	0x20002d8c

0800cc4c <malloc>:
 800cc4c:	4b02      	ldr	r3, [pc, #8]	; (800cc58 <malloc+0xc>)
 800cc4e:	4601      	mov	r1, r0
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	f000 b823 	b.w	800cc9c <_malloc_r>
 800cc56:	bf00      	nop
 800cc58:	2000025c 	.word	0x2000025c

0800cc5c <sbrk_aligned>:
 800cc5c:	b570      	push	{r4, r5, r6, lr}
 800cc5e:	4e0e      	ldr	r6, [pc, #56]	; (800cc98 <sbrk_aligned+0x3c>)
 800cc60:	460c      	mov	r4, r1
 800cc62:	6831      	ldr	r1, [r6, #0]
 800cc64:	4605      	mov	r5, r0
 800cc66:	b911      	cbnz	r1, 800cc6e <sbrk_aligned+0x12>
 800cc68:	f000 f938 	bl	800cedc <_sbrk_r>
 800cc6c:	6030      	str	r0, [r6, #0]
 800cc6e:	4621      	mov	r1, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f933 	bl	800cedc <_sbrk_r>
 800cc76:	1c43      	adds	r3, r0, #1
 800cc78:	d00a      	beq.n	800cc90 <sbrk_aligned+0x34>
 800cc7a:	1cc4      	adds	r4, r0, #3
 800cc7c:	f024 0403 	bic.w	r4, r4, #3
 800cc80:	42a0      	cmp	r0, r4
 800cc82:	d007      	beq.n	800cc94 <sbrk_aligned+0x38>
 800cc84:	1a21      	subs	r1, r4, r0
 800cc86:	4628      	mov	r0, r5
 800cc88:	f000 f928 	bl	800cedc <_sbrk_r>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	d101      	bne.n	800cc94 <sbrk_aligned+0x38>
 800cc90:	f04f 34ff 	mov.w	r4, #4294967295
 800cc94:	4620      	mov	r0, r4
 800cc96:	bd70      	pop	{r4, r5, r6, pc}
 800cc98:	20002da0 	.word	0x20002da0

0800cc9c <_malloc_r>:
 800cc9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cca0:	1ccd      	adds	r5, r1, #3
 800cca2:	f025 0503 	bic.w	r5, r5, #3
 800cca6:	3508      	adds	r5, #8
 800cca8:	2d0c      	cmp	r5, #12
 800ccaa:	bf38      	it	cc
 800ccac:	250c      	movcc	r5, #12
 800ccae:	2d00      	cmp	r5, #0
 800ccb0:	4607      	mov	r7, r0
 800ccb2:	db01      	blt.n	800ccb8 <_malloc_r+0x1c>
 800ccb4:	42a9      	cmp	r1, r5
 800ccb6:	d905      	bls.n	800ccc4 <_malloc_r+0x28>
 800ccb8:	230c      	movs	r3, #12
 800ccba:	2600      	movs	r6, #0
 800ccbc:	603b      	str	r3, [r7, #0]
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cd98 <_malloc_r+0xfc>
 800ccc8:	f000 f868 	bl	800cd9c <__malloc_lock>
 800cccc:	f8d8 3000 	ldr.w	r3, [r8]
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	bb5c      	cbnz	r4, 800cd2c <_malloc_r+0x90>
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7ff ffc0 	bl	800cc5c <sbrk_aligned>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	4604      	mov	r4, r0
 800cce0:	d155      	bne.n	800cd8e <_malloc_r+0xf2>
 800cce2:	f8d8 4000 	ldr.w	r4, [r8]
 800cce6:	4626      	mov	r6, r4
 800cce8:	2e00      	cmp	r6, #0
 800ccea:	d145      	bne.n	800cd78 <_malloc_r+0xdc>
 800ccec:	2c00      	cmp	r4, #0
 800ccee:	d048      	beq.n	800cd82 <_malloc_r+0xe6>
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	eb04 0903 	add.w	r9, r4, r3
 800ccfa:	f000 f8ef 	bl	800cedc <_sbrk_r>
 800ccfe:	4581      	cmp	r9, r0
 800cd00:	d13f      	bne.n	800cd82 <_malloc_r+0xe6>
 800cd02:	6821      	ldr	r1, [r4, #0]
 800cd04:	4638      	mov	r0, r7
 800cd06:	1a6d      	subs	r5, r5, r1
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7ff ffa7 	bl	800cc5c <sbrk_aligned>
 800cd0e:	3001      	adds	r0, #1
 800cd10:	d037      	beq.n	800cd82 <_malloc_r+0xe6>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	442b      	add	r3, r5
 800cd16:	6023      	str	r3, [r4, #0]
 800cd18:	f8d8 3000 	ldr.w	r3, [r8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d038      	beq.n	800cd92 <_malloc_r+0xf6>
 800cd20:	685a      	ldr	r2, [r3, #4]
 800cd22:	42a2      	cmp	r2, r4
 800cd24:	d12b      	bne.n	800cd7e <_malloc_r+0xe2>
 800cd26:	2200      	movs	r2, #0
 800cd28:	605a      	str	r2, [r3, #4]
 800cd2a:	e00f      	b.n	800cd4c <_malloc_r+0xb0>
 800cd2c:	6822      	ldr	r2, [r4, #0]
 800cd2e:	1b52      	subs	r2, r2, r5
 800cd30:	d41f      	bmi.n	800cd72 <_malloc_r+0xd6>
 800cd32:	2a0b      	cmp	r2, #11
 800cd34:	d917      	bls.n	800cd66 <_malloc_r+0xca>
 800cd36:	1961      	adds	r1, r4, r5
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	6025      	str	r5, [r4, #0]
 800cd3c:	bf18      	it	ne
 800cd3e:	6059      	strne	r1, [r3, #4]
 800cd40:	6863      	ldr	r3, [r4, #4]
 800cd42:	bf08      	it	eq
 800cd44:	f8c8 1000 	streq.w	r1, [r8]
 800cd48:	5162      	str	r2, [r4, r5]
 800cd4a:	604b      	str	r3, [r1, #4]
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f104 060b 	add.w	r6, r4, #11
 800cd52:	f000 f829 	bl	800cda8 <__malloc_unlock>
 800cd56:	f026 0607 	bic.w	r6, r6, #7
 800cd5a:	1d23      	adds	r3, r4, #4
 800cd5c:	1af2      	subs	r2, r6, r3
 800cd5e:	d0ae      	beq.n	800ccbe <_malloc_r+0x22>
 800cd60:	1b9b      	subs	r3, r3, r6
 800cd62:	50a3      	str	r3, [r4, r2]
 800cd64:	e7ab      	b.n	800ccbe <_malloc_r+0x22>
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	6862      	ldr	r2, [r4, #4]
 800cd6a:	d1dd      	bne.n	800cd28 <_malloc_r+0x8c>
 800cd6c:	f8c8 2000 	str.w	r2, [r8]
 800cd70:	e7ec      	b.n	800cd4c <_malloc_r+0xb0>
 800cd72:	4623      	mov	r3, r4
 800cd74:	6864      	ldr	r4, [r4, #4]
 800cd76:	e7ac      	b.n	800ccd2 <_malloc_r+0x36>
 800cd78:	4634      	mov	r4, r6
 800cd7a:	6876      	ldr	r6, [r6, #4]
 800cd7c:	e7b4      	b.n	800cce8 <_malloc_r+0x4c>
 800cd7e:	4613      	mov	r3, r2
 800cd80:	e7cc      	b.n	800cd1c <_malloc_r+0x80>
 800cd82:	230c      	movs	r3, #12
 800cd84:	4638      	mov	r0, r7
 800cd86:	603b      	str	r3, [r7, #0]
 800cd88:	f000 f80e 	bl	800cda8 <__malloc_unlock>
 800cd8c:	e797      	b.n	800ccbe <_malloc_r+0x22>
 800cd8e:	6025      	str	r5, [r4, #0]
 800cd90:	e7dc      	b.n	800cd4c <_malloc_r+0xb0>
 800cd92:	605b      	str	r3, [r3, #4]
 800cd94:	deff      	udf	#255	; 0xff
 800cd96:	bf00      	nop
 800cd98:	20002d9c 	.word	0x20002d9c

0800cd9c <__malloc_lock>:
 800cd9c:	4801      	ldr	r0, [pc, #4]	; (800cda4 <__malloc_lock+0x8>)
 800cd9e:	f000 b8d7 	b.w	800cf50 <__retarget_lock_acquire_recursive>
 800cda2:	bf00      	nop
 800cda4:	20002ee0 	.word	0x20002ee0

0800cda8 <__malloc_unlock>:
 800cda8:	4801      	ldr	r0, [pc, #4]	; (800cdb0 <__malloc_unlock+0x8>)
 800cdaa:	f000 b8d2 	b.w	800cf52 <__retarget_lock_release_recursive>
 800cdae:	bf00      	nop
 800cdb0:	20002ee0 	.word	0x20002ee0

0800cdb4 <siprintf>:
 800cdb4:	b40e      	push	{r1, r2, r3}
 800cdb6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdba:	b500      	push	{lr}
 800cdbc:	b09c      	sub	sp, #112	; 0x70
 800cdbe:	ab1d      	add	r3, sp, #116	; 0x74
 800cdc0:	9002      	str	r0, [sp, #8]
 800cdc2:	9006      	str	r0, [sp, #24]
 800cdc4:	9107      	str	r1, [sp, #28]
 800cdc6:	9104      	str	r1, [sp, #16]
 800cdc8:	4808      	ldr	r0, [pc, #32]	; (800cdec <siprintf+0x38>)
 800cdca:	4909      	ldr	r1, [pc, #36]	; (800cdf0 <siprintf+0x3c>)
 800cdcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdd0:	9105      	str	r1, [sp, #20]
 800cdd2:	6800      	ldr	r0, [r0, #0]
 800cdd4:	a902      	add	r1, sp, #8
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	f000 f974 	bl	800d0c4 <_svfiprintf_r>
 800cddc:	2200      	movs	r2, #0
 800cdde:	9b02      	ldr	r3, [sp, #8]
 800cde0:	701a      	strb	r2, [r3, #0]
 800cde2:	b01c      	add	sp, #112	; 0x70
 800cde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cde8:	b003      	add	sp, #12
 800cdea:	4770      	bx	lr
 800cdec:	2000025c 	.word	0x2000025c
 800cdf0:	ffff0208 	.word	0xffff0208

0800cdf4 <memset>:
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	4402      	add	r2, r0
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d100      	bne.n	800cdfe <memset+0xa>
 800cdfc:	4770      	bx	lr
 800cdfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ce02:	e7f9      	b.n	800cdf8 <memset+0x4>

0800ce04 <strstr>:
 800ce04:	780a      	ldrb	r2, [r1, #0]
 800ce06:	b570      	push	{r4, r5, r6, lr}
 800ce08:	b96a      	cbnz	r2, 800ce26 <strstr+0x22>
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d109      	bne.n	800ce24 <strstr+0x20>
 800ce10:	460c      	mov	r4, r1
 800ce12:	4605      	mov	r5, r0
 800ce14:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d0f6      	beq.n	800ce0a <strstr+0x6>
 800ce1c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ce20:	429e      	cmp	r6, r3
 800ce22:	d0f7      	beq.n	800ce14 <strstr+0x10>
 800ce24:	3001      	adds	r0, #1
 800ce26:	7803      	ldrb	r3, [r0, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1ef      	bne.n	800ce0c <strstr+0x8>
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	e7ec      	b.n	800ce0a <strstr+0x6>

0800ce30 <_reclaim_reent>:
 800ce30:	4b29      	ldr	r3, [pc, #164]	; (800ced8 <_reclaim_reent+0xa8>)
 800ce32:	b570      	push	{r4, r5, r6, lr}
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4604      	mov	r4, r0
 800ce38:	4283      	cmp	r3, r0
 800ce3a:	d04b      	beq.n	800ced4 <_reclaim_reent+0xa4>
 800ce3c:	69c3      	ldr	r3, [r0, #28]
 800ce3e:	b143      	cbz	r3, 800ce52 <_reclaim_reent+0x22>
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d144      	bne.n	800ced0 <_reclaim_reent+0xa0>
 800ce46:	69e3      	ldr	r3, [r4, #28]
 800ce48:	6819      	ldr	r1, [r3, #0]
 800ce4a:	b111      	cbz	r1, 800ce52 <_reclaim_reent+0x22>
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 f897 	bl	800cf80 <_free_r>
 800ce52:	6961      	ldr	r1, [r4, #20]
 800ce54:	b111      	cbz	r1, 800ce5c <_reclaim_reent+0x2c>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 f892 	bl	800cf80 <_free_r>
 800ce5c:	69e1      	ldr	r1, [r4, #28]
 800ce5e:	b111      	cbz	r1, 800ce66 <_reclaim_reent+0x36>
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 f88d 	bl	800cf80 <_free_r>
 800ce66:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ce68:	b111      	cbz	r1, 800ce70 <_reclaim_reent+0x40>
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 f888 	bl	800cf80 <_free_r>
 800ce70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce72:	b111      	cbz	r1, 800ce7a <_reclaim_reent+0x4a>
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 f883 	bl	800cf80 <_free_r>
 800ce7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ce7c:	b111      	cbz	r1, 800ce84 <_reclaim_reent+0x54>
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 f87e 	bl	800cf80 <_free_r>
 800ce84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce86:	b111      	cbz	r1, 800ce8e <_reclaim_reent+0x5e>
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f000 f879 	bl	800cf80 <_free_r>
 800ce8e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ce90:	b111      	cbz	r1, 800ce98 <_reclaim_reent+0x68>
 800ce92:	4620      	mov	r0, r4
 800ce94:	f000 f874 	bl	800cf80 <_free_r>
 800ce98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ce9a:	b111      	cbz	r1, 800cea2 <_reclaim_reent+0x72>
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 f86f 	bl	800cf80 <_free_r>
 800cea2:	6a23      	ldr	r3, [r4, #32]
 800cea4:	b1b3      	cbz	r3, 800ced4 <_reclaim_reent+0xa4>
 800cea6:	4620      	mov	r0, r4
 800cea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ceac:	4718      	bx	r3
 800ceae:	5949      	ldr	r1, [r1, r5]
 800ceb0:	b941      	cbnz	r1, 800cec4 <_reclaim_reent+0x94>
 800ceb2:	3504      	adds	r5, #4
 800ceb4:	69e3      	ldr	r3, [r4, #28]
 800ceb6:	2d80      	cmp	r5, #128	; 0x80
 800ceb8:	68d9      	ldr	r1, [r3, #12]
 800ceba:	d1f8      	bne.n	800ceae <_reclaim_reent+0x7e>
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 f85f 	bl	800cf80 <_free_r>
 800cec2:	e7c0      	b.n	800ce46 <_reclaim_reent+0x16>
 800cec4:	680e      	ldr	r6, [r1, #0]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 f85a 	bl	800cf80 <_free_r>
 800cecc:	4631      	mov	r1, r6
 800cece:	e7ef      	b.n	800ceb0 <_reclaim_reent+0x80>
 800ced0:	2500      	movs	r5, #0
 800ced2:	e7ef      	b.n	800ceb4 <_reclaim_reent+0x84>
 800ced4:	bd70      	pop	{r4, r5, r6, pc}
 800ced6:	bf00      	nop
 800ced8:	2000025c 	.word	0x2000025c

0800cedc <_sbrk_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	2300      	movs	r3, #0
 800cee0:	4d05      	ldr	r5, [pc, #20]	; (800cef8 <_sbrk_r+0x1c>)
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	602b      	str	r3, [r5, #0]
 800cee8:	f7f6 fbf8 	bl	80036dc <_sbrk>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d102      	bne.n	800cef6 <_sbrk_r+0x1a>
 800cef0:	682b      	ldr	r3, [r5, #0]
 800cef2:	b103      	cbz	r3, 800cef6 <_sbrk_r+0x1a>
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	20002edc 	.word	0x20002edc

0800cefc <__errno>:
 800cefc:	4b01      	ldr	r3, [pc, #4]	; (800cf04 <__errno+0x8>)
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	2000025c 	.word	0x2000025c

0800cf08 <__libc_init_array>:
 800cf08:	b570      	push	{r4, r5, r6, lr}
 800cf0a:	2600      	movs	r6, #0
 800cf0c:	4d0c      	ldr	r5, [pc, #48]	; (800cf40 <__libc_init_array+0x38>)
 800cf0e:	4c0d      	ldr	r4, [pc, #52]	; (800cf44 <__libc_init_array+0x3c>)
 800cf10:	1b64      	subs	r4, r4, r5
 800cf12:	10a4      	asrs	r4, r4, #2
 800cf14:	42a6      	cmp	r6, r4
 800cf16:	d109      	bne.n	800cf2c <__libc_init_array+0x24>
 800cf18:	f000 fbc6 	bl	800d6a8 <_init>
 800cf1c:	2600      	movs	r6, #0
 800cf1e:	4d0a      	ldr	r5, [pc, #40]	; (800cf48 <__libc_init_array+0x40>)
 800cf20:	4c0a      	ldr	r4, [pc, #40]	; (800cf4c <__libc_init_array+0x44>)
 800cf22:	1b64      	subs	r4, r4, r5
 800cf24:	10a4      	asrs	r4, r4, #2
 800cf26:	42a6      	cmp	r6, r4
 800cf28:	d105      	bne.n	800cf36 <__libc_init_array+0x2e>
 800cf2a:	bd70      	pop	{r4, r5, r6, pc}
 800cf2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf30:	4798      	blx	r3
 800cf32:	3601      	adds	r6, #1
 800cf34:	e7ee      	b.n	800cf14 <__libc_init_array+0xc>
 800cf36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf3a:	4798      	blx	r3
 800cf3c:	3601      	adds	r6, #1
 800cf3e:	e7f2      	b.n	800cf26 <__libc_init_array+0x1e>
 800cf40:	0800dab8 	.word	0x0800dab8
 800cf44:	0800dab8 	.word	0x0800dab8
 800cf48:	0800dab8 	.word	0x0800dab8
 800cf4c:	0800dabc 	.word	0x0800dabc

0800cf50 <__retarget_lock_acquire_recursive>:
 800cf50:	4770      	bx	lr

0800cf52 <__retarget_lock_release_recursive>:
 800cf52:	4770      	bx	lr

0800cf54 <strcpy>:
 800cf54:	4603      	mov	r3, r0
 800cf56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf5a:	f803 2b01 	strb.w	r2, [r3], #1
 800cf5e:	2a00      	cmp	r2, #0
 800cf60:	d1f9      	bne.n	800cf56 <strcpy+0x2>
 800cf62:	4770      	bx	lr

0800cf64 <memcpy>:
 800cf64:	440a      	add	r2, r1
 800cf66:	4291      	cmp	r1, r2
 800cf68:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf6c:	d100      	bne.n	800cf70 <memcpy+0xc>
 800cf6e:	4770      	bx	lr
 800cf70:	b510      	push	{r4, lr}
 800cf72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf76:	4291      	cmp	r1, r2
 800cf78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf7c:	d1f9      	bne.n	800cf72 <memcpy+0xe>
 800cf7e:	bd10      	pop	{r4, pc}

0800cf80 <_free_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4605      	mov	r5, r0
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d040      	beq.n	800d00a <_free_r+0x8a>
 800cf88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf8c:	1f0c      	subs	r4, r1, #4
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	bfb8      	it	lt
 800cf92:	18e4      	addlt	r4, r4, r3
 800cf94:	f7ff ff02 	bl	800cd9c <__malloc_lock>
 800cf98:	4a1c      	ldr	r2, [pc, #112]	; (800d00c <_free_r+0x8c>)
 800cf9a:	6813      	ldr	r3, [r2, #0]
 800cf9c:	b933      	cbnz	r3, 800cfac <_free_r+0x2c>
 800cf9e:	6063      	str	r3, [r4, #4]
 800cfa0:	6014      	str	r4, [r2, #0]
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfa8:	f7ff befe 	b.w	800cda8 <__malloc_unlock>
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	d908      	bls.n	800cfc2 <_free_r+0x42>
 800cfb0:	6820      	ldr	r0, [r4, #0]
 800cfb2:	1821      	adds	r1, r4, r0
 800cfb4:	428b      	cmp	r3, r1
 800cfb6:	bf01      	itttt	eq
 800cfb8:	6819      	ldreq	r1, [r3, #0]
 800cfba:	685b      	ldreq	r3, [r3, #4]
 800cfbc:	1809      	addeq	r1, r1, r0
 800cfbe:	6021      	streq	r1, [r4, #0]
 800cfc0:	e7ed      	b.n	800cf9e <_free_r+0x1e>
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	b10b      	cbz	r3, 800cfcc <_free_r+0x4c>
 800cfc8:	42a3      	cmp	r3, r4
 800cfca:	d9fa      	bls.n	800cfc2 <_free_r+0x42>
 800cfcc:	6811      	ldr	r1, [r2, #0]
 800cfce:	1850      	adds	r0, r2, r1
 800cfd0:	42a0      	cmp	r0, r4
 800cfd2:	d10b      	bne.n	800cfec <_free_r+0x6c>
 800cfd4:	6820      	ldr	r0, [r4, #0]
 800cfd6:	4401      	add	r1, r0
 800cfd8:	1850      	adds	r0, r2, r1
 800cfda:	4283      	cmp	r3, r0
 800cfdc:	6011      	str	r1, [r2, #0]
 800cfde:	d1e0      	bne.n	800cfa2 <_free_r+0x22>
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	4408      	add	r0, r1
 800cfe6:	6010      	str	r0, [r2, #0]
 800cfe8:	6053      	str	r3, [r2, #4]
 800cfea:	e7da      	b.n	800cfa2 <_free_r+0x22>
 800cfec:	d902      	bls.n	800cff4 <_free_r+0x74>
 800cfee:	230c      	movs	r3, #12
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	e7d6      	b.n	800cfa2 <_free_r+0x22>
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	1821      	adds	r1, r4, r0
 800cff8:	428b      	cmp	r3, r1
 800cffa:	bf01      	itttt	eq
 800cffc:	6819      	ldreq	r1, [r3, #0]
 800cffe:	685b      	ldreq	r3, [r3, #4]
 800d000:	1809      	addeq	r1, r1, r0
 800d002:	6021      	streq	r1, [r4, #0]
 800d004:	6063      	str	r3, [r4, #4]
 800d006:	6054      	str	r4, [r2, #4]
 800d008:	e7cb      	b.n	800cfa2 <_free_r+0x22>
 800d00a:	bd38      	pop	{r3, r4, r5, pc}
 800d00c:	20002d9c 	.word	0x20002d9c

0800d010 <__ssputs_r>:
 800d010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d014:	461f      	mov	r7, r3
 800d016:	688e      	ldr	r6, [r1, #8]
 800d018:	4682      	mov	sl, r0
 800d01a:	42be      	cmp	r6, r7
 800d01c:	460c      	mov	r4, r1
 800d01e:	4690      	mov	r8, r2
 800d020:	680b      	ldr	r3, [r1, #0]
 800d022:	d82c      	bhi.n	800d07e <__ssputs_r+0x6e>
 800d024:	898a      	ldrh	r2, [r1, #12]
 800d026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d02a:	d026      	beq.n	800d07a <__ssputs_r+0x6a>
 800d02c:	6965      	ldr	r5, [r4, #20]
 800d02e:	6909      	ldr	r1, [r1, #16]
 800d030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d034:	eba3 0901 	sub.w	r9, r3, r1
 800d038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d03c:	1c7b      	adds	r3, r7, #1
 800d03e:	444b      	add	r3, r9
 800d040:	106d      	asrs	r5, r5, #1
 800d042:	429d      	cmp	r5, r3
 800d044:	bf38      	it	cc
 800d046:	461d      	movcc	r5, r3
 800d048:	0553      	lsls	r3, r2, #21
 800d04a:	d527      	bpl.n	800d09c <__ssputs_r+0x8c>
 800d04c:	4629      	mov	r1, r5
 800d04e:	f7ff fe25 	bl	800cc9c <_malloc_r>
 800d052:	4606      	mov	r6, r0
 800d054:	b360      	cbz	r0, 800d0b0 <__ssputs_r+0xa0>
 800d056:	464a      	mov	r2, r9
 800d058:	6921      	ldr	r1, [r4, #16]
 800d05a:	f7ff ff83 	bl	800cf64 <memcpy>
 800d05e:	89a3      	ldrh	r3, [r4, #12]
 800d060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d068:	81a3      	strh	r3, [r4, #12]
 800d06a:	6126      	str	r6, [r4, #16]
 800d06c:	444e      	add	r6, r9
 800d06e:	6026      	str	r6, [r4, #0]
 800d070:	463e      	mov	r6, r7
 800d072:	6165      	str	r5, [r4, #20]
 800d074:	eba5 0509 	sub.w	r5, r5, r9
 800d078:	60a5      	str	r5, [r4, #8]
 800d07a:	42be      	cmp	r6, r7
 800d07c:	d900      	bls.n	800d080 <__ssputs_r+0x70>
 800d07e:	463e      	mov	r6, r7
 800d080:	4632      	mov	r2, r6
 800d082:	4641      	mov	r1, r8
 800d084:	6820      	ldr	r0, [r4, #0]
 800d086:	f000 faaf 	bl	800d5e8 <memmove>
 800d08a:	2000      	movs	r0, #0
 800d08c:	68a3      	ldr	r3, [r4, #8]
 800d08e:	1b9b      	subs	r3, r3, r6
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	4433      	add	r3, r6
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d09c:	462a      	mov	r2, r5
 800d09e:	f000 facb 	bl	800d638 <_realloc_r>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1e0      	bne.n	800d06a <__ssputs_r+0x5a>
 800d0a8:	4650      	mov	r0, sl
 800d0aa:	6921      	ldr	r1, [r4, #16]
 800d0ac:	f7ff ff68 	bl	800cf80 <_free_r>
 800d0b0:	230c      	movs	r3, #12
 800d0b2:	f8ca 3000 	str.w	r3, [sl]
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	e7e9      	b.n	800d098 <__ssputs_r+0x88>

0800d0c4 <_svfiprintf_r>:
 800d0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	4698      	mov	r8, r3
 800d0ca:	898b      	ldrh	r3, [r1, #12]
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	061b      	lsls	r3, r3, #24
 800d0d0:	460d      	mov	r5, r1
 800d0d2:	4614      	mov	r4, r2
 800d0d4:	b09d      	sub	sp, #116	; 0x74
 800d0d6:	d50e      	bpl.n	800d0f6 <_svfiprintf_r+0x32>
 800d0d8:	690b      	ldr	r3, [r1, #16]
 800d0da:	b963      	cbnz	r3, 800d0f6 <_svfiprintf_r+0x32>
 800d0dc:	2140      	movs	r1, #64	; 0x40
 800d0de:	f7ff fddd 	bl	800cc9c <_malloc_r>
 800d0e2:	6028      	str	r0, [r5, #0]
 800d0e4:	6128      	str	r0, [r5, #16]
 800d0e6:	b920      	cbnz	r0, 800d0f2 <_svfiprintf_r+0x2e>
 800d0e8:	230c      	movs	r3, #12
 800d0ea:	603b      	str	r3, [r7, #0]
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	e0d0      	b.n	800d294 <_svfiprintf_r+0x1d0>
 800d0f2:	2340      	movs	r3, #64	; 0x40
 800d0f4:	616b      	str	r3, [r5, #20]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0fa:	2320      	movs	r3, #32
 800d0fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d100:	2330      	movs	r3, #48	; 0x30
 800d102:	f04f 0901 	mov.w	r9, #1
 800d106:	f8cd 800c 	str.w	r8, [sp, #12]
 800d10a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2ac <_svfiprintf_r+0x1e8>
 800d10e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d112:	4623      	mov	r3, r4
 800d114:	469a      	mov	sl, r3
 800d116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d11a:	b10a      	cbz	r2, 800d120 <_svfiprintf_r+0x5c>
 800d11c:	2a25      	cmp	r2, #37	; 0x25
 800d11e:	d1f9      	bne.n	800d114 <_svfiprintf_r+0x50>
 800d120:	ebba 0b04 	subs.w	fp, sl, r4
 800d124:	d00b      	beq.n	800d13e <_svfiprintf_r+0x7a>
 800d126:	465b      	mov	r3, fp
 800d128:	4622      	mov	r2, r4
 800d12a:	4629      	mov	r1, r5
 800d12c:	4638      	mov	r0, r7
 800d12e:	f7ff ff6f 	bl	800d010 <__ssputs_r>
 800d132:	3001      	adds	r0, #1
 800d134:	f000 80a9 	beq.w	800d28a <_svfiprintf_r+0x1c6>
 800d138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d13a:	445a      	add	r2, fp
 800d13c:	9209      	str	r2, [sp, #36]	; 0x24
 800d13e:	f89a 3000 	ldrb.w	r3, [sl]
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 80a1 	beq.w	800d28a <_svfiprintf_r+0x1c6>
 800d148:	2300      	movs	r3, #0
 800d14a:	f04f 32ff 	mov.w	r2, #4294967295
 800d14e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d152:	f10a 0a01 	add.w	sl, sl, #1
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	9307      	str	r3, [sp, #28]
 800d15a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d15e:	931a      	str	r3, [sp, #104]	; 0x68
 800d160:	4654      	mov	r4, sl
 800d162:	2205      	movs	r2, #5
 800d164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d168:	4850      	ldr	r0, [pc, #320]	; (800d2ac <_svfiprintf_r+0x1e8>)
 800d16a:	f000 fa57 	bl	800d61c <memchr>
 800d16e:	9a04      	ldr	r2, [sp, #16]
 800d170:	b9d8      	cbnz	r0, 800d1aa <_svfiprintf_r+0xe6>
 800d172:	06d0      	lsls	r0, r2, #27
 800d174:	bf44      	itt	mi
 800d176:	2320      	movmi	r3, #32
 800d178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d17c:	0711      	lsls	r1, r2, #28
 800d17e:	bf44      	itt	mi
 800d180:	232b      	movmi	r3, #43	; 0x2b
 800d182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d186:	f89a 3000 	ldrb.w	r3, [sl]
 800d18a:	2b2a      	cmp	r3, #42	; 0x2a
 800d18c:	d015      	beq.n	800d1ba <_svfiprintf_r+0xf6>
 800d18e:	4654      	mov	r4, sl
 800d190:	2000      	movs	r0, #0
 800d192:	f04f 0c0a 	mov.w	ip, #10
 800d196:	9a07      	ldr	r2, [sp, #28]
 800d198:	4621      	mov	r1, r4
 800d19a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d19e:	3b30      	subs	r3, #48	; 0x30
 800d1a0:	2b09      	cmp	r3, #9
 800d1a2:	d94d      	bls.n	800d240 <_svfiprintf_r+0x17c>
 800d1a4:	b1b0      	cbz	r0, 800d1d4 <_svfiprintf_r+0x110>
 800d1a6:	9207      	str	r2, [sp, #28]
 800d1a8:	e014      	b.n	800d1d4 <_svfiprintf_r+0x110>
 800d1aa:	eba0 0308 	sub.w	r3, r0, r8
 800d1ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d1b2:	4313      	orrs	r3, r2
 800d1b4:	46a2      	mov	sl, r4
 800d1b6:	9304      	str	r3, [sp, #16]
 800d1b8:	e7d2      	b.n	800d160 <_svfiprintf_r+0x9c>
 800d1ba:	9b03      	ldr	r3, [sp, #12]
 800d1bc:	1d19      	adds	r1, r3, #4
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	9103      	str	r1, [sp, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	bfbb      	ittet	lt
 800d1c6:	425b      	neglt	r3, r3
 800d1c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1cc:	9307      	strge	r3, [sp, #28]
 800d1ce:	9307      	strlt	r3, [sp, #28]
 800d1d0:	bfb8      	it	lt
 800d1d2:	9204      	strlt	r2, [sp, #16]
 800d1d4:	7823      	ldrb	r3, [r4, #0]
 800d1d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1d8:	d10c      	bne.n	800d1f4 <_svfiprintf_r+0x130>
 800d1da:	7863      	ldrb	r3, [r4, #1]
 800d1dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d1de:	d134      	bne.n	800d24a <_svfiprintf_r+0x186>
 800d1e0:	9b03      	ldr	r3, [sp, #12]
 800d1e2:	3402      	adds	r4, #2
 800d1e4:	1d1a      	adds	r2, r3, #4
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	9203      	str	r2, [sp, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	bfb8      	it	lt
 800d1ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1f2:	9305      	str	r3, [sp, #20]
 800d1f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2b0 <_svfiprintf_r+0x1ec>
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	4650      	mov	r0, sl
 800d1fc:	7821      	ldrb	r1, [r4, #0]
 800d1fe:	f000 fa0d 	bl	800d61c <memchr>
 800d202:	b138      	cbz	r0, 800d214 <_svfiprintf_r+0x150>
 800d204:	2240      	movs	r2, #64	; 0x40
 800d206:	9b04      	ldr	r3, [sp, #16]
 800d208:	eba0 000a 	sub.w	r0, r0, sl
 800d20c:	4082      	lsls	r2, r0
 800d20e:	4313      	orrs	r3, r2
 800d210:	3401      	adds	r4, #1
 800d212:	9304      	str	r3, [sp, #16]
 800d214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d218:	2206      	movs	r2, #6
 800d21a:	4826      	ldr	r0, [pc, #152]	; (800d2b4 <_svfiprintf_r+0x1f0>)
 800d21c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d220:	f000 f9fc 	bl	800d61c <memchr>
 800d224:	2800      	cmp	r0, #0
 800d226:	d038      	beq.n	800d29a <_svfiprintf_r+0x1d6>
 800d228:	4b23      	ldr	r3, [pc, #140]	; (800d2b8 <_svfiprintf_r+0x1f4>)
 800d22a:	bb1b      	cbnz	r3, 800d274 <_svfiprintf_r+0x1b0>
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	3307      	adds	r3, #7
 800d230:	f023 0307 	bic.w	r3, r3, #7
 800d234:	3308      	adds	r3, #8
 800d236:	9303      	str	r3, [sp, #12]
 800d238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d23a:	4433      	add	r3, r6
 800d23c:	9309      	str	r3, [sp, #36]	; 0x24
 800d23e:	e768      	b.n	800d112 <_svfiprintf_r+0x4e>
 800d240:	460c      	mov	r4, r1
 800d242:	2001      	movs	r0, #1
 800d244:	fb0c 3202 	mla	r2, ip, r2, r3
 800d248:	e7a6      	b.n	800d198 <_svfiprintf_r+0xd4>
 800d24a:	2300      	movs	r3, #0
 800d24c:	f04f 0c0a 	mov.w	ip, #10
 800d250:	4619      	mov	r1, r3
 800d252:	3401      	adds	r4, #1
 800d254:	9305      	str	r3, [sp, #20]
 800d256:	4620      	mov	r0, r4
 800d258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d25c:	3a30      	subs	r2, #48	; 0x30
 800d25e:	2a09      	cmp	r2, #9
 800d260:	d903      	bls.n	800d26a <_svfiprintf_r+0x1a6>
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0c6      	beq.n	800d1f4 <_svfiprintf_r+0x130>
 800d266:	9105      	str	r1, [sp, #20]
 800d268:	e7c4      	b.n	800d1f4 <_svfiprintf_r+0x130>
 800d26a:	4604      	mov	r4, r0
 800d26c:	2301      	movs	r3, #1
 800d26e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d272:	e7f0      	b.n	800d256 <_svfiprintf_r+0x192>
 800d274:	ab03      	add	r3, sp, #12
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	462a      	mov	r2, r5
 800d27a:	4638      	mov	r0, r7
 800d27c:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <_svfiprintf_r+0x1f8>)
 800d27e:	a904      	add	r1, sp, #16
 800d280:	f3af 8000 	nop.w
 800d284:	1c42      	adds	r2, r0, #1
 800d286:	4606      	mov	r6, r0
 800d288:	d1d6      	bne.n	800d238 <_svfiprintf_r+0x174>
 800d28a:	89ab      	ldrh	r3, [r5, #12]
 800d28c:	065b      	lsls	r3, r3, #25
 800d28e:	f53f af2d 	bmi.w	800d0ec <_svfiprintf_r+0x28>
 800d292:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d294:	b01d      	add	sp, #116	; 0x74
 800d296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29a:	ab03      	add	r3, sp, #12
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	462a      	mov	r2, r5
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	4b06      	ldr	r3, [pc, #24]	; (800d2bc <_svfiprintf_r+0x1f8>)
 800d2a4:	a904      	add	r1, sp, #16
 800d2a6:	f000 f87d 	bl	800d3a4 <_printf_i>
 800d2aa:	e7eb      	b.n	800d284 <_svfiprintf_r+0x1c0>
 800d2ac:	0800da82 	.word	0x0800da82
 800d2b0:	0800da88 	.word	0x0800da88
 800d2b4:	0800da8c 	.word	0x0800da8c
 800d2b8:	00000000 	.word	0x00000000
 800d2bc:	0800d011 	.word	0x0800d011

0800d2c0 <_printf_common>:
 800d2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2c4:	4616      	mov	r6, r2
 800d2c6:	4699      	mov	r9, r3
 800d2c8:	688a      	ldr	r2, [r1, #8]
 800d2ca:	690b      	ldr	r3, [r1, #16]
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	bfb8      	it	lt
 800d2d2:	4613      	movlt	r3, r2
 800d2d4:	6033      	str	r3, [r6, #0]
 800d2d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d2da:	460c      	mov	r4, r1
 800d2dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d2e0:	b10a      	cbz	r2, 800d2e6 <_printf_common+0x26>
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	6033      	str	r3, [r6, #0]
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	0699      	lsls	r1, r3, #26
 800d2ea:	bf42      	ittt	mi
 800d2ec:	6833      	ldrmi	r3, [r6, #0]
 800d2ee:	3302      	addmi	r3, #2
 800d2f0:	6033      	strmi	r3, [r6, #0]
 800d2f2:	6825      	ldr	r5, [r4, #0]
 800d2f4:	f015 0506 	ands.w	r5, r5, #6
 800d2f8:	d106      	bne.n	800d308 <_printf_common+0x48>
 800d2fa:	f104 0a19 	add.w	sl, r4, #25
 800d2fe:	68e3      	ldr	r3, [r4, #12]
 800d300:	6832      	ldr	r2, [r6, #0]
 800d302:	1a9b      	subs	r3, r3, r2
 800d304:	42ab      	cmp	r3, r5
 800d306:	dc2b      	bgt.n	800d360 <_printf_common+0xa0>
 800d308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d30c:	1e13      	subs	r3, r2, #0
 800d30e:	6822      	ldr	r2, [r4, #0]
 800d310:	bf18      	it	ne
 800d312:	2301      	movne	r3, #1
 800d314:	0692      	lsls	r2, r2, #26
 800d316:	d430      	bmi.n	800d37a <_printf_common+0xba>
 800d318:	4649      	mov	r1, r9
 800d31a:	4638      	mov	r0, r7
 800d31c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d320:	47c0      	blx	r8
 800d322:	3001      	adds	r0, #1
 800d324:	d023      	beq.n	800d36e <_printf_common+0xae>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	6922      	ldr	r2, [r4, #16]
 800d32a:	f003 0306 	and.w	r3, r3, #6
 800d32e:	2b04      	cmp	r3, #4
 800d330:	bf14      	ite	ne
 800d332:	2500      	movne	r5, #0
 800d334:	6833      	ldreq	r3, [r6, #0]
 800d336:	f04f 0600 	mov.w	r6, #0
 800d33a:	bf08      	it	eq
 800d33c:	68e5      	ldreq	r5, [r4, #12]
 800d33e:	f104 041a 	add.w	r4, r4, #26
 800d342:	bf08      	it	eq
 800d344:	1aed      	subeq	r5, r5, r3
 800d346:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d34a:	bf08      	it	eq
 800d34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d350:	4293      	cmp	r3, r2
 800d352:	bfc4      	itt	gt
 800d354:	1a9b      	subgt	r3, r3, r2
 800d356:	18ed      	addgt	r5, r5, r3
 800d358:	42b5      	cmp	r5, r6
 800d35a:	d11a      	bne.n	800d392 <_printf_common+0xd2>
 800d35c:	2000      	movs	r0, #0
 800d35e:	e008      	b.n	800d372 <_printf_common+0xb2>
 800d360:	2301      	movs	r3, #1
 800d362:	4652      	mov	r2, sl
 800d364:	4649      	mov	r1, r9
 800d366:	4638      	mov	r0, r7
 800d368:	47c0      	blx	r8
 800d36a:	3001      	adds	r0, #1
 800d36c:	d103      	bne.n	800d376 <_printf_common+0xb6>
 800d36e:	f04f 30ff 	mov.w	r0, #4294967295
 800d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d376:	3501      	adds	r5, #1
 800d378:	e7c1      	b.n	800d2fe <_printf_common+0x3e>
 800d37a:	2030      	movs	r0, #48	; 0x30
 800d37c:	18e1      	adds	r1, r4, r3
 800d37e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d382:	1c5a      	adds	r2, r3, #1
 800d384:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d388:	4422      	add	r2, r4
 800d38a:	3302      	adds	r3, #2
 800d38c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d390:	e7c2      	b.n	800d318 <_printf_common+0x58>
 800d392:	2301      	movs	r3, #1
 800d394:	4622      	mov	r2, r4
 800d396:	4649      	mov	r1, r9
 800d398:	4638      	mov	r0, r7
 800d39a:	47c0      	blx	r8
 800d39c:	3001      	adds	r0, #1
 800d39e:	d0e6      	beq.n	800d36e <_printf_common+0xae>
 800d3a0:	3601      	adds	r6, #1
 800d3a2:	e7d9      	b.n	800d358 <_printf_common+0x98>

0800d3a4 <_printf_i>:
 800d3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a8:	7e0f      	ldrb	r7, [r1, #24]
 800d3aa:	4691      	mov	r9, r2
 800d3ac:	2f78      	cmp	r7, #120	; 0x78
 800d3ae:	4680      	mov	r8, r0
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	469a      	mov	sl, r3
 800d3b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3ba:	d807      	bhi.n	800d3cc <_printf_i+0x28>
 800d3bc:	2f62      	cmp	r7, #98	; 0x62
 800d3be:	d80a      	bhi.n	800d3d6 <_printf_i+0x32>
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	f000 80d5 	beq.w	800d570 <_printf_i+0x1cc>
 800d3c6:	2f58      	cmp	r7, #88	; 0x58
 800d3c8:	f000 80c1 	beq.w	800d54e <_printf_i+0x1aa>
 800d3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3d4:	e03a      	b.n	800d44c <_printf_i+0xa8>
 800d3d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d3da:	2b15      	cmp	r3, #21
 800d3dc:	d8f6      	bhi.n	800d3cc <_printf_i+0x28>
 800d3de:	a101      	add	r1, pc, #4	; (adr r1, 800d3e4 <_printf_i+0x40>)
 800d3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3e4:	0800d43d 	.word	0x0800d43d
 800d3e8:	0800d451 	.word	0x0800d451
 800d3ec:	0800d3cd 	.word	0x0800d3cd
 800d3f0:	0800d3cd 	.word	0x0800d3cd
 800d3f4:	0800d3cd 	.word	0x0800d3cd
 800d3f8:	0800d3cd 	.word	0x0800d3cd
 800d3fc:	0800d451 	.word	0x0800d451
 800d400:	0800d3cd 	.word	0x0800d3cd
 800d404:	0800d3cd 	.word	0x0800d3cd
 800d408:	0800d3cd 	.word	0x0800d3cd
 800d40c:	0800d3cd 	.word	0x0800d3cd
 800d410:	0800d557 	.word	0x0800d557
 800d414:	0800d47d 	.word	0x0800d47d
 800d418:	0800d511 	.word	0x0800d511
 800d41c:	0800d3cd 	.word	0x0800d3cd
 800d420:	0800d3cd 	.word	0x0800d3cd
 800d424:	0800d579 	.word	0x0800d579
 800d428:	0800d3cd 	.word	0x0800d3cd
 800d42c:	0800d47d 	.word	0x0800d47d
 800d430:	0800d3cd 	.word	0x0800d3cd
 800d434:	0800d3cd 	.word	0x0800d3cd
 800d438:	0800d519 	.word	0x0800d519
 800d43c:	682b      	ldr	r3, [r5, #0]
 800d43e:	1d1a      	adds	r2, r3, #4
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	602a      	str	r2, [r5, #0]
 800d444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d44c:	2301      	movs	r3, #1
 800d44e:	e0a0      	b.n	800d592 <_printf_i+0x1ee>
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	682b      	ldr	r3, [r5, #0]
 800d454:	0607      	lsls	r7, r0, #24
 800d456:	f103 0104 	add.w	r1, r3, #4
 800d45a:	6029      	str	r1, [r5, #0]
 800d45c:	d501      	bpl.n	800d462 <_printf_i+0xbe>
 800d45e:	681e      	ldr	r6, [r3, #0]
 800d460:	e003      	b.n	800d46a <_printf_i+0xc6>
 800d462:	0646      	lsls	r6, r0, #25
 800d464:	d5fb      	bpl.n	800d45e <_printf_i+0xba>
 800d466:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d46a:	2e00      	cmp	r6, #0
 800d46c:	da03      	bge.n	800d476 <_printf_i+0xd2>
 800d46e:	232d      	movs	r3, #45	; 0x2d
 800d470:	4276      	negs	r6, r6
 800d472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d476:	230a      	movs	r3, #10
 800d478:	4859      	ldr	r0, [pc, #356]	; (800d5e0 <_printf_i+0x23c>)
 800d47a:	e012      	b.n	800d4a2 <_printf_i+0xfe>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	6820      	ldr	r0, [r4, #0]
 800d480:	1d19      	adds	r1, r3, #4
 800d482:	6029      	str	r1, [r5, #0]
 800d484:	0605      	lsls	r5, r0, #24
 800d486:	d501      	bpl.n	800d48c <_printf_i+0xe8>
 800d488:	681e      	ldr	r6, [r3, #0]
 800d48a:	e002      	b.n	800d492 <_printf_i+0xee>
 800d48c:	0641      	lsls	r1, r0, #25
 800d48e:	d5fb      	bpl.n	800d488 <_printf_i+0xe4>
 800d490:	881e      	ldrh	r6, [r3, #0]
 800d492:	2f6f      	cmp	r7, #111	; 0x6f
 800d494:	bf0c      	ite	eq
 800d496:	2308      	moveq	r3, #8
 800d498:	230a      	movne	r3, #10
 800d49a:	4851      	ldr	r0, [pc, #324]	; (800d5e0 <_printf_i+0x23c>)
 800d49c:	2100      	movs	r1, #0
 800d49e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4a2:	6865      	ldr	r5, [r4, #4]
 800d4a4:	2d00      	cmp	r5, #0
 800d4a6:	bfa8      	it	ge
 800d4a8:	6821      	ldrge	r1, [r4, #0]
 800d4aa:	60a5      	str	r5, [r4, #8]
 800d4ac:	bfa4      	itt	ge
 800d4ae:	f021 0104 	bicge.w	r1, r1, #4
 800d4b2:	6021      	strge	r1, [r4, #0]
 800d4b4:	b90e      	cbnz	r6, 800d4ba <_printf_i+0x116>
 800d4b6:	2d00      	cmp	r5, #0
 800d4b8:	d04b      	beq.n	800d552 <_printf_i+0x1ae>
 800d4ba:	4615      	mov	r5, r2
 800d4bc:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4c0:	fb03 6711 	mls	r7, r3, r1, r6
 800d4c4:	5dc7      	ldrb	r7, [r0, r7]
 800d4c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4ca:	4637      	mov	r7, r6
 800d4cc:	42bb      	cmp	r3, r7
 800d4ce:	460e      	mov	r6, r1
 800d4d0:	d9f4      	bls.n	800d4bc <_printf_i+0x118>
 800d4d2:	2b08      	cmp	r3, #8
 800d4d4:	d10b      	bne.n	800d4ee <_printf_i+0x14a>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	07de      	lsls	r6, r3, #31
 800d4da:	d508      	bpl.n	800d4ee <_printf_i+0x14a>
 800d4dc:	6923      	ldr	r3, [r4, #16]
 800d4de:	6861      	ldr	r1, [r4, #4]
 800d4e0:	4299      	cmp	r1, r3
 800d4e2:	bfde      	ittt	le
 800d4e4:	2330      	movle	r3, #48	; 0x30
 800d4e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d4ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d4ee:	1b52      	subs	r2, r2, r5
 800d4f0:	6122      	str	r2, [r4, #16]
 800d4f2:	464b      	mov	r3, r9
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f8cd a000 	str.w	sl, [sp]
 800d4fc:	aa03      	add	r2, sp, #12
 800d4fe:	f7ff fedf 	bl	800d2c0 <_printf_common>
 800d502:	3001      	adds	r0, #1
 800d504:	d14a      	bne.n	800d59c <_printf_i+0x1f8>
 800d506:	f04f 30ff 	mov.w	r0, #4294967295
 800d50a:	b004      	add	sp, #16
 800d50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	f043 0320 	orr.w	r3, r3, #32
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	2778      	movs	r7, #120	; 0x78
 800d51a:	4832      	ldr	r0, [pc, #200]	; (800d5e4 <_printf_i+0x240>)
 800d51c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d520:	6823      	ldr	r3, [r4, #0]
 800d522:	6829      	ldr	r1, [r5, #0]
 800d524:	061f      	lsls	r7, r3, #24
 800d526:	f851 6b04 	ldr.w	r6, [r1], #4
 800d52a:	d402      	bmi.n	800d532 <_printf_i+0x18e>
 800d52c:	065f      	lsls	r7, r3, #25
 800d52e:	bf48      	it	mi
 800d530:	b2b6      	uxthmi	r6, r6
 800d532:	07df      	lsls	r7, r3, #31
 800d534:	bf48      	it	mi
 800d536:	f043 0320 	orrmi.w	r3, r3, #32
 800d53a:	6029      	str	r1, [r5, #0]
 800d53c:	bf48      	it	mi
 800d53e:	6023      	strmi	r3, [r4, #0]
 800d540:	b91e      	cbnz	r6, 800d54a <_printf_i+0x1a6>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	f023 0320 	bic.w	r3, r3, #32
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	2310      	movs	r3, #16
 800d54c:	e7a6      	b.n	800d49c <_printf_i+0xf8>
 800d54e:	4824      	ldr	r0, [pc, #144]	; (800d5e0 <_printf_i+0x23c>)
 800d550:	e7e4      	b.n	800d51c <_printf_i+0x178>
 800d552:	4615      	mov	r5, r2
 800d554:	e7bd      	b.n	800d4d2 <_printf_i+0x12e>
 800d556:	682b      	ldr	r3, [r5, #0]
 800d558:	6826      	ldr	r6, [r4, #0]
 800d55a:	1d18      	adds	r0, r3, #4
 800d55c:	6961      	ldr	r1, [r4, #20]
 800d55e:	6028      	str	r0, [r5, #0]
 800d560:	0635      	lsls	r5, r6, #24
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	d501      	bpl.n	800d56a <_printf_i+0x1c6>
 800d566:	6019      	str	r1, [r3, #0]
 800d568:	e002      	b.n	800d570 <_printf_i+0x1cc>
 800d56a:	0670      	lsls	r0, r6, #25
 800d56c:	d5fb      	bpl.n	800d566 <_printf_i+0x1c2>
 800d56e:	8019      	strh	r1, [r3, #0]
 800d570:	2300      	movs	r3, #0
 800d572:	4615      	mov	r5, r2
 800d574:	6123      	str	r3, [r4, #16]
 800d576:	e7bc      	b.n	800d4f2 <_printf_i+0x14e>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	2100      	movs	r1, #0
 800d57c:	1d1a      	adds	r2, r3, #4
 800d57e:	602a      	str	r2, [r5, #0]
 800d580:	681d      	ldr	r5, [r3, #0]
 800d582:	6862      	ldr	r2, [r4, #4]
 800d584:	4628      	mov	r0, r5
 800d586:	f000 f849 	bl	800d61c <memchr>
 800d58a:	b108      	cbz	r0, 800d590 <_printf_i+0x1ec>
 800d58c:	1b40      	subs	r0, r0, r5
 800d58e:	6060      	str	r0, [r4, #4]
 800d590:	6863      	ldr	r3, [r4, #4]
 800d592:	6123      	str	r3, [r4, #16]
 800d594:	2300      	movs	r3, #0
 800d596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d59a:	e7aa      	b.n	800d4f2 <_printf_i+0x14e>
 800d59c:	462a      	mov	r2, r5
 800d59e:	4649      	mov	r1, r9
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	47d0      	blx	sl
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d0ad      	beq.n	800d506 <_printf_i+0x162>
 800d5aa:	6823      	ldr	r3, [r4, #0]
 800d5ac:	079b      	lsls	r3, r3, #30
 800d5ae:	d413      	bmi.n	800d5d8 <_printf_i+0x234>
 800d5b0:	68e0      	ldr	r0, [r4, #12]
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	4298      	cmp	r0, r3
 800d5b6:	bfb8      	it	lt
 800d5b8:	4618      	movlt	r0, r3
 800d5ba:	e7a6      	b.n	800d50a <_printf_i+0x166>
 800d5bc:	2301      	movs	r3, #1
 800d5be:	4632      	mov	r2, r6
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	47d0      	blx	sl
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	d09d      	beq.n	800d506 <_printf_i+0x162>
 800d5ca:	3501      	adds	r5, #1
 800d5cc:	68e3      	ldr	r3, [r4, #12]
 800d5ce:	9903      	ldr	r1, [sp, #12]
 800d5d0:	1a5b      	subs	r3, r3, r1
 800d5d2:	42ab      	cmp	r3, r5
 800d5d4:	dcf2      	bgt.n	800d5bc <_printf_i+0x218>
 800d5d6:	e7eb      	b.n	800d5b0 <_printf_i+0x20c>
 800d5d8:	2500      	movs	r5, #0
 800d5da:	f104 0619 	add.w	r6, r4, #25
 800d5de:	e7f5      	b.n	800d5cc <_printf_i+0x228>
 800d5e0:	0800da93 	.word	0x0800da93
 800d5e4:	0800daa4 	.word	0x0800daa4

0800d5e8 <memmove>:
 800d5e8:	4288      	cmp	r0, r1
 800d5ea:	b510      	push	{r4, lr}
 800d5ec:	eb01 0402 	add.w	r4, r1, r2
 800d5f0:	d902      	bls.n	800d5f8 <memmove+0x10>
 800d5f2:	4284      	cmp	r4, r0
 800d5f4:	4623      	mov	r3, r4
 800d5f6:	d807      	bhi.n	800d608 <memmove+0x20>
 800d5f8:	1e43      	subs	r3, r0, #1
 800d5fa:	42a1      	cmp	r1, r4
 800d5fc:	d008      	beq.n	800d610 <memmove+0x28>
 800d5fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d602:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d606:	e7f8      	b.n	800d5fa <memmove+0x12>
 800d608:	4601      	mov	r1, r0
 800d60a:	4402      	add	r2, r0
 800d60c:	428a      	cmp	r2, r1
 800d60e:	d100      	bne.n	800d612 <memmove+0x2a>
 800d610:	bd10      	pop	{r4, pc}
 800d612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d616:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d61a:	e7f7      	b.n	800d60c <memmove+0x24>

0800d61c <memchr>:
 800d61c:	4603      	mov	r3, r0
 800d61e:	b510      	push	{r4, lr}
 800d620:	b2c9      	uxtb	r1, r1
 800d622:	4402      	add	r2, r0
 800d624:	4293      	cmp	r3, r2
 800d626:	4618      	mov	r0, r3
 800d628:	d101      	bne.n	800d62e <memchr+0x12>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e003      	b.n	800d636 <memchr+0x1a>
 800d62e:	7804      	ldrb	r4, [r0, #0]
 800d630:	3301      	adds	r3, #1
 800d632:	428c      	cmp	r4, r1
 800d634:	d1f6      	bne.n	800d624 <memchr+0x8>
 800d636:	bd10      	pop	{r4, pc}

0800d638 <_realloc_r>:
 800d638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d63c:	4680      	mov	r8, r0
 800d63e:	4614      	mov	r4, r2
 800d640:	460e      	mov	r6, r1
 800d642:	b921      	cbnz	r1, 800d64e <_realloc_r+0x16>
 800d644:	4611      	mov	r1, r2
 800d646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d64a:	f7ff bb27 	b.w	800cc9c <_malloc_r>
 800d64e:	b92a      	cbnz	r2, 800d65c <_realloc_r+0x24>
 800d650:	f7ff fc96 	bl	800cf80 <_free_r>
 800d654:	4625      	mov	r5, r4
 800d656:	4628      	mov	r0, r5
 800d658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d65c:	f000 f81b 	bl	800d696 <_malloc_usable_size_r>
 800d660:	4284      	cmp	r4, r0
 800d662:	4607      	mov	r7, r0
 800d664:	d802      	bhi.n	800d66c <_realloc_r+0x34>
 800d666:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d66a:	d812      	bhi.n	800d692 <_realloc_r+0x5a>
 800d66c:	4621      	mov	r1, r4
 800d66e:	4640      	mov	r0, r8
 800d670:	f7ff fb14 	bl	800cc9c <_malloc_r>
 800d674:	4605      	mov	r5, r0
 800d676:	2800      	cmp	r0, #0
 800d678:	d0ed      	beq.n	800d656 <_realloc_r+0x1e>
 800d67a:	42bc      	cmp	r4, r7
 800d67c:	4622      	mov	r2, r4
 800d67e:	4631      	mov	r1, r6
 800d680:	bf28      	it	cs
 800d682:	463a      	movcs	r2, r7
 800d684:	f7ff fc6e 	bl	800cf64 <memcpy>
 800d688:	4631      	mov	r1, r6
 800d68a:	4640      	mov	r0, r8
 800d68c:	f7ff fc78 	bl	800cf80 <_free_r>
 800d690:	e7e1      	b.n	800d656 <_realloc_r+0x1e>
 800d692:	4635      	mov	r5, r6
 800d694:	e7df      	b.n	800d656 <_realloc_r+0x1e>

0800d696 <_malloc_usable_size_r>:
 800d696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d69a:	1f18      	subs	r0, r3, #4
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfbc      	itt	lt
 800d6a0:	580b      	ldrlt	r3, [r1, r0]
 800d6a2:	18c0      	addlt	r0, r0, r3
 800d6a4:	4770      	bx	lr
	...

0800d6a8 <_init>:
 800d6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6aa:	bf00      	nop
 800d6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ae:	bc08      	pop	{r3}
 800d6b0:	469e      	mov	lr, r3
 800d6b2:	4770      	bx	lr

0800d6b4 <_fini>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	bf00      	nop
 800d6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ba:	bc08      	pop	{r3}
 800d6bc:	469e      	mov	lr, r3
 800d6be:	4770      	bx	lr
