
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b744  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc90  0800bc90  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc90  0800bc90  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc90  0800bc90  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc90  0800bc90  0001bc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000308c  20000070  0800bd04  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200030fc  0800bd04  000230fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035e8b  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000078f8  00000000  00000000  00055f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00010526  00000000  00000000  0005d85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001998  00000000  00000000  0006dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b9a  00000000  00000000  0006f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f7d8  00000000  00000000  000712ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000315af  00000000  00000000  00090a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a206f  00000000  00000000  000c2041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005bb8  00000000  00000000  001640b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00169c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b83c 	.word	0x0800b83c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800b83c 	.word	0x0800b83c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <bluetooth1000ms>:
 * \param 	*ble - Ponteiro para o objeto pai.
 */
void 			bluetooth1000ms(volatile Bluetooth* ble){

	// caso algum ponteiro seja nulo, retorna.
	if (ble == NULL)
 8001094:	b140      	cbz	r0, 80010a8 <bluetooth1000ms+0x14>
		return;

	// decrementa janela de conexao.
	if(ble->JanelaConexao>0)
 8001096:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 800109a:	b12b      	cbz	r3, 80010a8 <bluetooth1000ms+0x14>
		ble->JanelaConexao--;
 800109c:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80010a0:	3b01      	subs	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
}
 80010a8:	4770      	bx	lr

080010aa <putQueueComando>:
 * \param 	Cmd - comando que esta enviando o Aknowladge.
 */
void 			sendAknowladge(volatile Bluetooth* ble,uint8_t Cmd){
	putQueueComando(ble, TX_AKNOWLADGE);
}
void putQueueComando(volatile Bluetooth *ble, ConexaoBleRX comando) {
 80010aa:	b510      	push	{r4, lr}
 80010ac:	4604      	mov	r4, r0
	ble->myQ_bleCom->insert(ble->myQ_bleCom, comando);
 80010ae:	6883      	ldr	r3, [r0, #8]
 80010b0:	6880      	ldr	r0, [r0, #8]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	4798      	blx	r3
	osSignalSet(ble->Task, newMessage);
 80010b6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80010b8:	210a      	movs	r1, #10
}
 80010ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSignalSet(ble->Task, newMessage);
 80010be:	f007 b890 	b.w	80081e2 <osSignalSet>

080010c2 <bluetoothActivitymonitor>:
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_HIGH)?ble->msIdle++:0;
 80010c2:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80010c6:	2b1e      	cmp	r3, #30
 80010c8:	bf9f      	itttt	ls
 80010ca:	f890 3033 	ldrbls.w	r3, [r0, #51]	; 0x33
 80010ce:	3301      	addls	r3, #1
 80010d0:	b2db      	uxtbls	r3, r3
 80010d2:	f880 3033 	strbls.w	r3, [r0, #51]	; 0x33
	if(ble->JanelaConexao>0 && (ble->MaquinaConexao == RX_CONECTADO || ble->MaquinaConexao == RX_VALIDADO)){
 80010d6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80010da:	b173      	cbz	r3, 80010fa <bluetoothActivitymonitor+0x38>
 80010dc:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d003      	beq.n	80010ec <bluetoothActivitymonitor+0x2a>
 80010e4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d106      	bne.n	80010fa <bluetoothActivitymonitor+0x38>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)
 80010ec:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80010f0:	2b1e      	cmp	r3, #30
 80010f2:	d90e      	bls.n	8001112 <bluetoothActivitymonitor+0x50>
			putQueueComando(ble, TX_DESCONECTA);
 80010f4:	21ef      	movs	r1, #239	; 0xef
 80010f6:	f7ff bfd8 	b.w	80010aa <putQueueComando>
	else if(ble->MaquinaConexao == RX_CONECTADO || ble->MaquinaConexao == RX_VALIDADO){
 80010fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d003      	beq.n	800110a <bluetoothActivitymonitor+0x48>
 8001102:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8001106:	2b03      	cmp	r3, #3
 8001108:	d103      	bne.n	8001112 <bluetoothActivitymonitor+0x50>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)
 800110a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800110e:	2b16      	cmp	r3, #22
 8001110:	e7ef      	b.n	80010f2 <bluetoothActivitymonitor+0x30>
}
 8001112:	4770      	bx	lr

08001114 <sendAknowladge>:
	putQueueComando(ble, TX_AKNOWLADGE);
 8001114:	21ff      	movs	r1, #255	; 0xff
 8001116:	f7ff bfc8 	b.w	80010aa <putQueueComando>

0800111a <putQueueDataRx>:
void putQueueDataRx(volatile Bluetooth *ble, ComandosBleRX comando) {
 800111a:	b538      	push	{r3, r4, r5, lr}
	// permitir apenas um item por vez na fila. evitando dessincronia com dado recebida.
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 800111c:	68c3      	ldr	r3, [r0, #12]
void putQueueDataRx(volatile Bluetooth *ble, ComandosBleRX comando) {
 800111e:	4604      	mov	r4, r0
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	68c0      	ldr	r0, [r0, #12]
void putQueueDataRx(volatile Bluetooth *ble, ComandosBleRX comando) {
 8001124:	460d      	mov	r5, r1
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 8001126:	4798      	blx	r3
 8001128:	b150      	cbz	r0, 8001140 <putQueueDataRx+0x26>
		ble->myQ_dataRx->insert(ble->myQ_dataRx, comando);
 800112a:	68e3      	ldr	r3, [r4, #12]
 800112c:	4629      	mov	r1, r5
 800112e:	68e0      	ldr	r0, [r4, #12]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	4798      	blx	r3
		osSignalSet(ble->Task, newMessage);
 8001134:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001136:	210a      	movs	r1, #10
	}
}
 8001138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osSignalSet(ble->Task, newMessage);
 800113c:	f007 b851 	b.w	80081e2 <osSignalSet>
}
 8001140:	bd38      	pop	{r3, r4, r5, pc}

08001142 <putQueueDataTx>:
void putQueueDataTx(volatile Bluetooth *ble, ComandosBleTX comando) {
 8001142:	b510      	push	{r4, lr}
 8001144:	4604      	mov	r4, r0
	ble->myQ_dataTx->insert(ble->myQ_dataTx, comando);
 8001146:	6903      	ldr	r3, [r0, #16]
 8001148:	6900      	ldr	r0, [r0, #16]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	4798      	blx	r3
	osSignalSet(ble->Task, newMessage);
 800114e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001150:	210a      	movs	r1, #10
}
 8001152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSignalSet(ble->Task, newMessage);
 8001156:	f007 b844 	b.w	80081e2 <osSignalSet>
	...

0800115c <bleError_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void 			bleError_Handler(ErrorCode erro)
{
 800115c:	4601      	mov	r1, r0
 800115e:	b508      	push	{r3, lr}
	//	__disable_irq();
	while (1)
	{
		ErrorBuffer_add(&eeprom, erro);
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <bleError_Handler+0x24>)
 8001162:	f000 ffcf 	bl	8002104 <ErrorBuffer_add>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001166:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800116a:	4906      	ldr	r1, [pc, #24]	; (8001184 <bleError_Handler+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <bleError_Handler+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800116e:	68ca      	ldr	r2, [r1, #12]
 8001170:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001174:	4313      	orrs	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
 8001178:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800117c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800117e:	e7fd      	b.n	800117c <bleError_Handler+0x20>
 8001180:	20001b98 	.word	0x20001b98
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	05fa0004 	.word	0x05fa0004

0800118c <bleAddComp>:
void 			bleAddComp(volatile Bluetooth* ble, BleComando* _blecomm, ComandosBleRX __comando){
 800118c:	b508      	push	{r3, lr}
	if (ble == NULL || _blecomm == NULL || __comando == 0) {
 800118e:	b108      	cbz	r0, 8001194 <bleAddComp+0x8>
 8001190:	b101      	cbz	r1, 8001194 <bleAddComp+0x8>
 8001192:	b912      	cbnz	r2, 800119a <bleAddComp+0xe>
		bleError_Handler(BLE_OBJETO_NULO);
 8001194:	2005      	movs	r0, #5
		bleError_Handler(BLE_EXCEDEU_LIMITE);
 8001196:	f7ff ffe1 	bl	800115c <bleError_Handler>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 800119a:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800119e:	2b1d      	cmp	r3, #29
 80011a0:	d901      	bls.n	80011a6 <bleAddComp+0x1a>
		bleError_Handler(BLE_EXCEDEU_LIMITE);
 80011a2:	200b      	movs	r0, #11
 80011a4:	e7f7      	b.n	8001196 <bleAddComp+0xa>
	_blecomm->_tipo 	= ComandoBasico;
 80011a6:	2300      	movs	r3, #0
	_blecomm->_comando 	= __comando;
 80011a8:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoBasico;
 80011aa:	704b      	strb	r3, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80011ac:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80011b0:	3310      	adds	r3, #16
 80011b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	ble->contComandos++;
 80011b6:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
}
 80011c2:	bd08      	pop	{r3, pc}

080011c4 <createBleComp>:
BleComando* 	createBleComp(volatile Bluetooth* ble, ComandosBleRX __comando) {
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	4605      	mov	r5, r0
	BleComando *me = (BleComando*)malloc(sizeof(BleComando));
 80011c8:	2002      	movs	r0, #2
BleComando* 	createBleComp(volatile Bluetooth* ble, ComandosBleRX __comando) {
 80011ca:	460e      	mov	r6, r1
	BleComando *me = (BleComando*)malloc(sizeof(BleComando));
 80011cc:	f009 f934 	bl	800a438 <malloc>
	if (me == NULL) {
 80011d0:	4604      	mov	r4, r0
 80011d2:	b120      	cbz	r0, 80011de <createBleComp+0x1a>
	bleAddComp(ble, me, __comando);
 80011d4:	4601      	mov	r1, r0
 80011d6:	4632      	mov	r2, r6
 80011d8:	4628      	mov	r0, r5
 80011da:	f7ff ffd7 	bl	800118c <bleAddComp>
}
 80011de:	4620      	mov	r0, r4
 80011e0:	bd70      	pop	{r4, r5, r6, pc}

080011e2 <bleAddCompConexao>:
void 			bleAddCompConexao(volatile Bluetooth* ble, volatile BleComando* _blecomm, ConexaoBleTX __comando){
 80011e2:	b508      	push	{r3, lr}
	if (ble == NULL || _blecomm == NULL || __comando == 0) {
 80011e4:	b108      	cbz	r0, 80011ea <bleAddCompConexao+0x8>
 80011e6:	b101      	cbz	r1, 80011ea <bleAddCompConexao+0x8>
 80011e8:	b912      	cbnz	r2, 80011f0 <bleAddCompConexao+0xe>
		bleError_Handler(BLE_OBJETO_NULO);
 80011ea:	2005      	movs	r0, #5
		bleError_Handler(BLE_COM_EXCEDEU_LIMITE);
 80011ec:	f7ff ffb6 	bl	800115c <bleError_Handler>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 80011f0:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80011f4:	2b1d      	cmp	r3, #29
 80011f6:	d901      	bls.n	80011fc <bleAddCompConexao+0x1a>
		bleError_Handler(BLE_COM_EXCEDEU_LIMITE);
 80011f8:	200c      	movs	r0, #12
 80011fa:	e7f7      	b.n	80011ec <bleAddCompConexao+0xa>
	_blecomm->_tipo 	= ComandoConexao;
 80011fc:	2301      	movs	r3, #1
	_blecomm->_comando 	= __comando;
 80011fe:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoConexao;
 8001200:	704b      	strb	r3, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 8001202:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 8001206:	3310      	adds	r3, #16
 8001208:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	ble->contComandos++;
 800120c:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 8001210:	3301      	adds	r3, #1
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
}
 8001218:	bd08      	pop	{r3, pc}

0800121a <bluetoothErroCRC>:
bool 			bluetoothErroCRC(volatile Bluetooth* ble){
 800121a:	b538      	push	{r3, r4, r5, lr}
	if (ble == NULL){
 800121c:	4604      	mov	r4, r0
 800121e:	b910      	cbnz	r0, 8001226 <bluetoothErroCRC+0xc>
		bleError_Handler(BLE_OBJETO_NULO);
 8001220:	2005      	movs	r0, #5
 8001222:	f7ff ff9b 	bl	800115c <bleError_Handler>
	if (ble->RxSize < 4) {
 8001226:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001228:	2b03      	cmp	r3, #3
 800122a:	d804      	bhi.n	8001236 <bluetoothErroCRC+0x1c>
		putQueueComando(ble, TX_ERRO_CRC);
 800122c:	21ee      	movs	r1, #238	; 0xee
		putQueueComando(ble, TX_ERRO_CRC); // erro de crc.
 800122e:	f7ff ff3c 	bl	80010aa <putQueueComando>
		return 1;
 8001232:	2001      	movs	r0, #1
}
 8001234:	bd38      	pop	{r3, r4, r5, pc}
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 8001236:	f04f 0500 	mov.w	r5, #0
 800123a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800123c:	3b02      	subs	r3, #2
 800123e:	4403      	add	r3, r0
 8001240:	7d1b      	ldrb	r3, [r3, #20]
 8001242:	f363 0507 	bfi	r5, r3, #0, #8
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 8001246:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001248:	3b01      	subs	r3, #1
 800124a:	4403      	add	r3, r0
 800124c:	7d1b      	ldrb	r3, [r3, #20]
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800124e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001250:	3014      	adds	r0, #20
 8001252:	3902      	subs	r1, #2
 8001254:	b289      	uxth	r1, r1
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 8001256:	f363 250f 	bfi	r5, r3, #8, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 800125a:	f000 fc6d 	bl	8001b38 <CRC16>
 800125e:	4601      	mov	r1, r0
	if(validaCRC(CRCKey,CRCReceive)){
 8001260:	4628      	mov	r0, r5
 8001262:	f000 fc7f 	bl	8001b64 <validaCRC>
 8001266:	2800      	cmp	r0, #0
 8001268:	d0e4      	beq.n	8001234 <bluetoothErroCRC+0x1a>
		putQueueComando(ble, TX_ERRO_CRC); // erro de crc.
 800126a:	21ee      	movs	r1, #238	; 0xee
 800126c:	4620      	mov	r0, r4
 800126e:	e7de      	b.n	800122e <bluetoothErroCRC+0x14>

08001270 <readComando>:
void		 	readComando(volatile Bluetooth* ble, TypeComandoBle tipo){
 8001270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001272:	460d      	mov	r5, r1
	if (ble == NULL) {
 8001274:	4604      	mov	r4, r0
 8001276:	b910      	cbnz	r0, 800127e <readComando+0xe>
		bleError_Handler(BLE_OBJETO_NULO);
 8001278:	2005      	movs	r0, #5
 800127a:	f7ff ff6f 	bl	800115c <bleError_Handler>
	if(bluetoothErroCRC(ble)) {
 800127e:	f7ff ffcc 	bl	800121a <bluetoothErroCRC>
 8001282:	bb00      	cbnz	r0, 80012c6 <readComando+0x56>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 8001284:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8001288:	b2c3      	uxtb	r3, r0
 800128a:	4293      	cmp	r3, r2
 800128c:	d306      	bcc.n	800129c <readComando+0x2c>
	putQueueComando(ble, TX_ERRO_CRC);
 800128e:	21ee      	movs	r1, #238	; 0xee
 8001290:	4620      	mov	r0, r4
}
 8001292:	b003      	add	sp, #12
 8001294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	putQueueComando(ble, TX_ERRO_CRC);
 8001298:	f7ff bf07 	b.w	80010aa <putQueueComando>
		localComandoRX = *ble->_BleCommArr[i];
 800129c:	3310      	adds	r3, #16
 800129e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80012a2:	881b      	ldrh	r3, [r3, #0]
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 80012a4:	7d62      	ldrb	r2, [r4, #21]
		localComandoRX = *ble->_BleCommArr[i];
 80012a6:	f8ad 3004 	strh.w	r3, [sp, #4]
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 80012aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
		localComandoRX = *ble->_BleCommArr[i];
 80012ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 80012b2:	4291      	cmp	r1, r2
 80012b4:	d11a      	bne.n	80012ec <readComando+0x7c>
 80012b6:	429d      	cmp	r5, r3
 80012b8:	d118      	bne.n	80012ec <readComando+0x7c>
			ble->ComandoAtual = localComandoRX;
 80012ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80012be:	86e3      	strh	r3, [r4, #54]	; 0x36
			switch (tipo) {
 80012c0:	b11d      	cbz	r5, 80012ca <readComando+0x5a>
 80012c2:	2d01      	cmp	r5, #1
 80012c4:	d009      	beq.n	80012da <readComando+0x6a>
}
 80012c6:	b003      	add	sp, #12
 80012c8:	bd30      	pop	{r4, r5, pc}
				putQueueDataRx(ble, ble->ComandoAtual._comando);
 80012ca:	4620      	mov	r0, r4
 80012cc:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 80012d0:	f7ff ff23 	bl	800111a <putQueueDataRx>
				ble->msIdle=0;
 80012d4:	f884 5033 	strb.w	r5, [r4, #51]	; 0x33
				break;
 80012d8:	e7f5      	b.n	80012c6 <readComando+0x56>
				putQueueComando(ble, ble->ComandoAtual._comando);
 80012da:	4620      	mov	r0, r4
 80012dc:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
 80012e0:	f7ff fee3 	bl	80010aa <putQueueComando>
				ble->msIdle=0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
				break;
 80012ea:	e7ec      	b.n	80012c6 <readComando+0x56>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 80012ec:	3001      	adds	r0, #1
 80012ee:	e7c9      	b.n	8001284 <readComando+0x14>

080012f0 <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 80012f0:	6843      	ldr	r3, [r0, #4]
void 			BLEDMA_IrqHandler (volatile Bluetooth *ble){
 80012f2:	b570      	push	{r4, r5, r6, lr}
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 80012f4:	681b      	ldr	r3, [r3, #0]
void 			BLEDMA_IrqHandler (volatile Bluetooth *ble){
 80012f6:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 80012f8:	681b      	ldr	r3, [r3, #0]
void 			BLEDMA_IrqHandler (volatile Bluetooth *ble){
 80012fa:	b08a      	sub	sp, #40	; 0x28
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 80012fc:	079b      	lsls	r3, r3, #30
 80012fe:	f140 809d 	bpl.w	800143c <BLEDMA_IrqHandler+0x14c>
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001302:	6843      	ldr	r3, [r0, #4]
 8001304:	4a6b      	ldr	r2, [pc, #428]	; (80014b4 <BLEDMA_IrqHandler+0x1c4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4293      	cmp	r3, r2
 800130a:	d056      	beq.n	80013ba <BLEDMA_IrqHandler+0xca>
 800130c:	6843      	ldr	r3, [r0, #4]
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <BLEDMA_IrqHandler+0x1c8>)
 8001312:	4299      	cmp	r1, r3
 8001314:	d053      	beq.n	80013be <BLEDMA_IrqHandler+0xce>
 8001316:	6843      	ldr	r3, [r0, #4]
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b68      	ldr	r3, [pc, #416]	; (80014bc <BLEDMA_IrqHandler+0x1cc>)
 800131c:	4299      	cmp	r1, r3
 800131e:	d050      	beq.n	80013c2 <BLEDMA_IrqHandler+0xd2>
 8001320:	6843      	ldr	r3, [r0, #4]
 8001322:	6819      	ldr	r1, [r3, #0]
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <BLEDMA_IrqHandler+0x1d0>)
 8001326:	4299      	cmp	r1, r3
 8001328:	d04e      	beq.n	80013c8 <BLEDMA_IrqHandler+0xd8>
 800132a:	6843      	ldr	r3, [r0, #4]
 800132c:	6819      	ldr	r1, [r3, #0]
 800132e:	4b65      	ldr	r3, [pc, #404]	; (80014c4 <BLEDMA_IrqHandler+0x1d4>)
 8001330:	4299      	cmp	r1, r3
 8001332:	d04c      	beq.n	80013ce <BLEDMA_IrqHandler+0xde>
 8001334:	6843      	ldr	r3, [r0, #4]
 8001336:	4964      	ldr	r1, [pc, #400]	; (80014c8 <BLEDMA_IrqHandler+0x1d8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	428b      	cmp	r3, r1
 800133c:	bf0c      	ite	eq
 800133e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8001342:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001346:	4961      	ldr	r1, [pc, #388]	; (80014cc <BLEDMA_IrqHandler+0x1dc>)
 8001348:	604b      	str	r3, [r1, #4]
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_GI_FLAG_INDEX(ble->UARTDMAHandle));
 800134a:	6863      	ldr	r3, [r4, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4293      	cmp	r3, r2
 8001350:	d040      	beq.n	80013d4 <BLEDMA_IrqHandler+0xe4>
 8001352:	6863      	ldr	r3, [r4, #4]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <BLEDMA_IrqHandler+0x1c8>)
 8001358:	429a      	cmp	r2, r3
 800135a:	d03d      	beq.n	80013d8 <BLEDMA_IrqHandler+0xe8>
 800135c:	6863      	ldr	r3, [r4, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b56      	ldr	r3, [pc, #344]	; (80014bc <BLEDMA_IrqHandler+0x1cc>)
 8001362:	429a      	cmp	r2, r3
 8001364:	d03a      	beq.n	80013dc <BLEDMA_IrqHandler+0xec>
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b55      	ldr	r3, [pc, #340]	; (80014c0 <BLEDMA_IrqHandler+0x1d0>)
 800136c:	429a      	cmp	r2, r3
 800136e:	d038      	beq.n	80013e2 <BLEDMA_IrqHandler+0xf2>
 8001370:	6863      	ldr	r3, [r4, #4]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b53      	ldr	r3, [pc, #332]	; (80014c4 <BLEDMA_IrqHandler+0x1d4>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d036      	beq.n	80013e8 <BLEDMA_IrqHandler+0xf8>
 800137a:	6863      	ldr	r3, [r4, #4]
 800137c:	4a52      	ldr	r2, [pc, #328]	; (80014c8 <BLEDMA_IrqHandler+0x1d8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4293      	cmp	r3, r2
 8001382:	bf0c      	ite	eq
 8001384:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8001388:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800138c:	4a4f      	ldr	r2, [pc, #316]	; (80014cc <BLEDMA_IrqHandler+0x1dc>)
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800138e:	f104 0614 	add.w	r6, r4, #20
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_GI_FLAG_INDEX(ble->UARTDMAHandle));
 8001392:	6053      	str	r3, [r2, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001394:	6863      	ldr	r3, [r4, #4]
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 8001396:	ad04      	add	r5, sp, #16
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001398:	681b      	ldr	r3, [r3, #0]
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800139a:	4631      	mov	r1, r6
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 800139c:	685b      	ldr	r3, [r3, #4]
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800139e:	4628      	mov	r0, r5
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 80013a0:	f1c3 0318 	rsb	r3, r3, #24
 80013a4:	62e3      	str	r3, [r4, #44]	; 0x2c
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 80013a6:	f009 fc2e 	bl	800ac06 <strcpy>
		switch(ble->MaquinaConexao){
 80013aa:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d837      	bhi.n	8001422 <BLEDMA_IrqHandler+0x132>
 80013b2:	e8df f003 	tbb	[pc, r3]
 80013b6:	451c      	.short	0x451c
 80013b8:	6f5c      	.short	0x6f5c
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80013ba:	2302      	movs	r3, #2
 80013bc:	e7c3      	b.n	8001346 <BLEDMA_IrqHandler+0x56>
 80013be:	2320      	movs	r3, #32
 80013c0:	e7c1      	b.n	8001346 <BLEDMA_IrqHandler+0x56>
 80013c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c6:	e7be      	b.n	8001346 <BLEDMA_IrqHandler+0x56>
 80013c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013cc:	e7bb      	b.n	8001346 <BLEDMA_IrqHandler+0x56>
 80013ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d2:	e7b8      	b.n	8001346 <BLEDMA_IrqHandler+0x56>
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_GI_FLAG_INDEX(ble->UARTDMAHandle));
 80013d4:	2301      	movs	r3, #1
 80013d6:	e7d9      	b.n	800138c <BLEDMA_IrqHandler+0x9c>
 80013d8:	2310      	movs	r3, #16
 80013da:	e7d7      	b.n	800138c <BLEDMA_IrqHandler+0x9c>
 80013dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e0:	e7d4      	b.n	800138c <BLEDMA_IrqHandler+0x9c>
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	e7d1      	b.n	800138c <BLEDMA_IrqHandler+0x9c>
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	e7ce      	b.n	800138c <BLEDMA_IrqHandler+0x9c>
			ble->msIdle=0;
 80013ee:	2300      	movs	r3, #0
			ss = strstr(StringRecebida, "OK+ADDR:");
 80013f0:	4628      	mov	r0, r5
 80013f2:	4937      	ldr	r1, [pc, #220]	; (80014d0 <BLEDMA_IrqHandler+0x1e0>)
			ble->msIdle=0;
 80013f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			ss = strstr(StringRecebida, "OK+ADDR:");
 80013f8:	f009 fb16 	bl	800aa28 <strstr>
			if (ss != NULL){
 80013fc:	b188      	cbz	r0, 8001422 <BLEDMA_IrqHandler+0x132>
				PontoExato = ss - StringRecebida;
 80013fe:	1b40      	subs	r0, r0, r5
				for (int i = 0; i < 12; i++) {
 8001400:	a901      	add	r1, sp, #4
 8001402:	f100 0208 	add.w	r2, r0, #8
 8001406:	f100 0314 	add.w	r3, r0, #20
 800140a:	4608      	mov	r0, r1
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 800140c:	18a5      	adds	r5, r4, r2
 800140e:	7d2d      	ldrb	r5, [r5, #20]
				for (int i = 0; i < 12; i++) {
 8001410:	3201      	adds	r2, #1
 8001412:	429a      	cmp	r2, r3
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 8001414:	f801 5b01 	strb.w	r5, [r1], #1
				for (int i = 0; i < 12; i++) {
 8001418:	d1f8      	bne.n	800140c <BLEDMA_IrqHandler+0x11c>
				ble->chave = CRC16(addr8Bits,12);
 800141a:	210c      	movs	r1, #12
 800141c:	f000 fb8c 	bl	8001b38 <CRC16>
 8001420:	86a0      	strh	r0, [r4, #52]	; 0x34
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
 8001422:	2218      	movs	r2, #24
		ble->UARTDMAHandle->Instance->CMAR 	= (uint32_t)ble->_RxDataArr; 	/* Set memory address for DMA again */
 8001424:	6863      	ldr	r3, [r4, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60de      	str	r6, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    		/* Set number of bytes to receive */
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            		/* Start DMA transfer */
 8001430:	6863      	ldr	r3, [r4, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	6813      	ldr	r3, [r2, #0]
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	b00a      	add	sp, #40	; 0x28
 800143e:	bd70      	pop	{r4, r5, r6, pc}
			ble->msIdle=0;
 8001440:	2300      	movs	r3, #0
			ss = strstr(StringRecebida, "OK+CONN");
 8001442:	4628      	mov	r0, r5
 8001444:	4923      	ldr	r1, [pc, #140]	; (80014d4 <BLEDMA_IrqHandler+0x1e4>)
			ble->msIdle=0;
 8001446:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			ss = strstr(StringRecebida, "OK+CONN");
 800144a:	f009 faed 	bl	800aa28 <strstr>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 800144e:	b130      	cbz	r0, 800145e <BLEDMA_IrqHandler+0x16e>
 8001450:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001452:	2b07      	cmp	r3, #7
 8001454:	d103      	bne.n	800145e <BLEDMA_IrqHandler+0x16e>
				ble->MaquinaConexao = RX_CONECTADO;
 8001456:	2302      	movs	r3, #2
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001458:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
				break;
 800145c:	e7e1      	b.n	8001422 <BLEDMA_IrqHandler+0x132>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	481d      	ldr	r0, [pc, #116]	; (80014d8 <BLEDMA_IrqHandler+0x1e8>)
 8001464:	f004 fb9a 	bl	8005b9c <HAL_GPIO_ReadPin>
 8001468:	2800      	cmp	r0, #0
 800146a:	d1f4      	bne.n	8001456 <BLEDMA_IrqHandler+0x166>
 800146c:	e7d9      	b.n	8001422 <BLEDMA_IrqHandler+0x132>
			ss = strstr(StringRecebida, "LOST");
 800146e:	4628      	mov	r0, r5
 8001470:	491a      	ldr	r1, [pc, #104]	; (80014dc <BLEDMA_IrqHandler+0x1ec>)
 8001472:	f009 fad9 	bl	800aa28 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001476:	b108      	cbz	r0, 800147c <BLEDMA_IrqHandler+0x18c>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001478:	2301      	movs	r3, #1
 800147a:	e7ed      	b.n	8001458 <BLEDMA_IrqHandler+0x168>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800147c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <BLEDMA_IrqHandler+0x1e8>)
 8001482:	f004 fb8b 	bl	8005b9c <HAL_GPIO_ReadPin>
 8001486:	2800      	cmp	r0, #0
 8001488:	d0f6      	beq.n	8001478 <BLEDMA_IrqHandler+0x188>
			readComando(ble,ComandoConexao);
 800148a:	2101      	movs	r1, #1
			readComando(ble,ComandoBasico);
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff feef 	bl	8001270 <readComando>
			break;
 8001492:	e7c6      	b.n	8001422 <BLEDMA_IrqHandler+0x132>
			ss = strstr(StringRecebida, "LOST");
 8001494:	4628      	mov	r0, r5
 8001496:	4911      	ldr	r1, [pc, #68]	; (80014dc <BLEDMA_IrqHandler+0x1ec>)
 8001498:	f009 fac6 	bl	800aa28 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800149c:	4605      	mov	r5, r0
 800149e:	2800      	cmp	r0, #0
 80014a0:	d1ea      	bne.n	8001478 <BLEDMA_IrqHandler+0x188>
 80014a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014a6:	480c      	ldr	r0, [pc, #48]	; (80014d8 <BLEDMA_IrqHandler+0x1e8>)
 80014a8:	f004 fb78 	bl	8005b9c <HAL_GPIO_ReadPin>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d0e3      	beq.n	8001478 <BLEDMA_IrqHandler+0x188>
			readComando(ble,ComandoBasico);
 80014b0:	4629      	mov	r1, r5
 80014b2:	e7eb      	b.n	800148c <BLEDMA_IrqHandler+0x19c>
 80014b4:	40020008 	.word	0x40020008
 80014b8:	4002001c 	.word	0x4002001c
 80014bc:	40020030 	.word	0x40020030
 80014c0:	40020044 	.word	0x40020044
 80014c4:	40020058 	.word	0x40020058
 80014c8:	4002006c 	.word	0x4002006c
 80014cc:	40020000 	.word	0x40020000
 80014d0:	0800b8f0 	.word	0x0800b8f0
 80014d4:	0800b8f9 	.word	0x0800b8f9
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	0800b901 	.word	0x0800b901

080014e0 <BLEUSART_IrqHandler>:
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    	/* if Idle flag is set */
 80014e0:	6802      	ldr	r2, [r0, #0]
void 			BLEUSART_IrqHandler(volatile Bluetooth *ble){
 80014e2:	b082      	sub	sp, #8
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    	/* if Idle flag is set */
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	06d2      	lsls	r2, r2, #27
 80014ea:	d510      	bpl.n	800150e <BLEUSART_IrqHandler+0x2e>
		tmp = ble->UARTHandle->Instance->SR;                 	/* Read status register */
 80014ec:	6802      	ldr	r2, [r0, #0]
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	9201      	str	r2, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 	/* Read data register */
 80014f4:	6802      	ldr	r2, [r0, #0]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	6852      	ldr	r2, [r2, #4]
 80014fa:	9201      	str	r2, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       			/* Disabling DMA will force transfer complete interrupt if enabled */
 80014fc:	6843      	ldr	r3, [r0, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 800150a:	f7ff bef1 	b.w	80012f0 <BLEDMA_IrqHandler>
}
 800150e:	b002      	add	sp, #8
 8001510:	4770      	bx	lr

08001512 <bluetoothEnviaComando>:
{
 8001512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t	TX_Buffer[size+3];
 8001516:	f102 030a 	add.w	r3, r2, #10
 800151a:	f023 0307 	bic.w	r3, r3, #7
{
 800151e:	af00      	add	r7, sp, #0
	uint8_t	TX_Buffer[size+3];
 8001520:	ebad 0d03 	sub.w	sp, sp, r3
{
 8001524:	468a      	mov	sl, r1
 8001526:	4614      	mov	r4, r2
	uint8_t	TX_Buffer[size+3];
 8001528:	46e8      	mov	r8, sp
	if (ble == NULL)
 800152a:	4606      	mov	r6, r0
	uint8_t	TX_Buffer[size+3];
 800152c:	f102 0902 	add.w	r9, r2, #2
	if (ble == NULL)
 8001530:	b328      	cbz	r0, 800157e <bluetoothEnviaComando+0x6c>
		TX_Buffer[i]=_out[i];
 8001532:	1c55      	adds	r5, r2, #1
 8001534:	1c53      	adds	r3, r2, #1
 8001536:	bfac      	ite	ge
 8001538:	462a      	movge	r2, r5
 800153a:	2200      	movlt	r2, #0
	CRCVar = CRC16(_out,size+1);
 800153c:	b2a4      	uxth	r4, r4
		TX_Buffer[i]=_out[i];
 800153e:	4668      	mov	r0, sp
 8001540:	f009 fb69 	bl	800ac16 <memcpy>
	CRCVar = CRC16(_out,size+1);
 8001544:	1c61      	adds	r1, r4, #1
 8001546:	4650      	mov	r0, sl
 8001548:	b289      	uxth	r1, r1
 800154a:	f000 faf5 	bl	8001b38 <CRC16>
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 800154e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001552:	f80d 3009 	strb.w	r3, [sp, r9]
	TX_Buffer[size+1] = (unsigned char) CRCVar.byte.hi;
 8001556:	f80d 0005 	strb.w	r0, [sp, r5]
	while (tries++ < MAX_TRIES) {
 800155a:	250b      	movs	r5, #11
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 800155c:	3403      	adds	r4, #3
 800155e:	b2a4      	uxth	r4, r4
	while (tries++ < MAX_TRIES) {
 8001560:	3d01      	subs	r5, #1
 8001562:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001566:	d007      	beq.n	8001578 <bluetoothEnviaComando+0x66>
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	4622      	mov	r2, r4
 800156c:	4641      	mov	r1, r8
 800156e:	6830      	ldr	r0, [r6, #0]
 8001570:	f006 fa21 	bl	80079b6 <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 8001574:	2800      	cmp	r0, #0
 8001576:	d1f3      	bne.n	8001560 <bluetoothEnviaComando+0x4e>
}
 8001578:	46bd      	mov	sp, r7
 800157a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bleError_Handler(BLE_OBJETO_NULO);
 800157e:	2005      	movs	r0, #5
 8001580:	f7ff fdec 	bl	800115c <bleError_Handler>

08001584 <bluetoothEnviaComandoSCRC>:
void		 	bluetoothEnviaComandoSCRC(volatile Bluetooth *ble,unsigned char _out[], int size){
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	460f      	mov	r7, r1
	if (ble == NULL)
 8001588:	4606      	mov	r6, r0
 800158a:	b910      	cbnz	r0, 8001592 <bluetoothEnviaComandoSCRC+0xe>
		bleError_Handler(BLE_OBJETO_NULO);
 800158c:	2005      	movs	r0, #5
 800158e:	f7ff fde5 	bl	800115c <bleError_Handler>
 8001592:	240b      	movs	r4, #11
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)_out, size,50);
 8001594:	b295      	uxth	r5, r2
	while (tries++ < MAX_TRIES) {
 8001596:	3c01      	subs	r4, #1
 8001598:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800159c:	d007      	beq.n	80015ae <bluetoothEnviaComandoSCRC+0x2a>
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)_out, size,50);
 800159e:	2332      	movs	r3, #50	; 0x32
 80015a0:	462a      	mov	r2, r5
 80015a2:	4639      	mov	r1, r7
 80015a4:	6830      	ldr	r0, [r6, #0]
 80015a6:	f006 fa06 	bl	80079b6 <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d1f3      	bne.n	8001596 <bluetoothEnviaComandoSCRC+0x12>
}
 80015ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080015b0 <comandHM10>:
void 			comandHM10(volatile Bluetooth *ble, char _out[], uint16_t delay){
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	460f      	mov	r7, r1
 80015b6:	4615      	mov	r5, r2
	if (ble == NULL)
 80015b8:	4606      	mov	r6, r0
 80015ba:	b910      	cbnz	r0, 80015c2 <comandHM10+0x12>
		bleError_Handler(BLE_OBJETO_NULO);
 80015bc:	2005      	movs	r0, #5
 80015be:	f7ff fdcd 	bl	800115c <bleError_Handler>
 80015c2:	2406      	movs	r4, #6
	while (tries++ < MAX_TRIES) {
 80015c4:	3c01      	subs	r4, #1
 80015c6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80015ca:	d00c      	beq.n	80015e6 <comandHM10+0x36>
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80015cc:	4638      	mov	r0, r7
 80015ce:	f7fe fdbf 	bl	8000150 <strlen>
 80015d2:	f8d6 8000 	ldr.w	r8, [r6]
 80015d6:	b282      	uxth	r2, r0
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	4639      	mov	r1, r7
 80015dc:	4640      	mov	r0, r8
 80015de:	f006 f9ea 	bl	80079b6 <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d1ee      	bne.n	80015c4 <comandHM10+0x14>
	if(delay != 0){
 80015e6:	b125      	cbz	r5, 80015f2 <comandHM10+0x42>
		osDelay(delay);
 80015e8:	4628      	mov	r0, r5
}
 80015ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		osDelay(delay);
 80015ee:	f006 bdaf 	b.w	8008150 <osDelay>
}
 80015f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080015f8 <bluetoothDescon>:
void 			bluetoothDescon(volatile Bluetooth* ble){
 80015f8:	b538      	push	{r3, r4, r5, lr}
 80015fa:	4604      	mov	r4, r0
	comandHM10(ble,"AT",50);//DESCONECTA
 80015fc:	4d05      	ldr	r5, [pc, #20]	; (8001614 <bluetoothDescon+0x1c>)
 80015fe:	2232      	movs	r2, #50	; 0x32
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff ffd5 	bl	80015b0 <comandHM10>
	comandHM10(ble,"AT",50);//DESCONECTA
 8001606:	4629      	mov	r1, r5
 8001608:	4620      	mov	r0, r4
}
 800160a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	comandHM10(ble,"AT",50);//DESCONECTA
 800160e:	2232      	movs	r2, #50	; 0x32
 8001610:	f7ff bfce 	b.w	80015b0 <comandHM10>
 8001614:	0800b906 	.word	0x0800b906

08001618 <txBleComando>:
void 			txBleComando(volatile Bluetooth *ble){
 8001618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (ble == NULL)
 800161a:	4604      	mov	r4, r0
 800161c:	b910      	cbnz	r0, 8001624 <txBleComando+0xc>
		bleError_Handler(BLE_OBJETO_NULO);
 800161e:	2005      	movs	r0, #5
 8001620:	f7ff fd9c 	bl	800115c <bleError_Handler>
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom))
 8001624:	6883      	ldr	r3, [r0, #8]
 8001626:	6880      	ldr	r0, [r0, #8]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	4798      	blx	r3
 800162c:	2800      	cmp	r0, #0
 800162e:	d137      	bne.n	80016a0 <txBleComando+0x88>
	buffQueue = ble->myQ_bleCom->remove(ble->myQ_bleCom);
 8001630:	68a3      	ldr	r3, [r4, #8]
 8001632:	68a0      	ldr	r0, [r4, #8]
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4798      	blx	r3
	if (buffQueue > 0) {
 8001638:	2800      	cmp	r0, #0
 800163a:	dd31      	ble.n	80016a0 <txBleComando+0x88>
		switch ((uint8_t)buffQueue) {
 800163c:	b2c0      	uxtb	r0, r0
 800163e:	28ef      	cmp	r0, #239	; 0xef
 8001640:	d04b      	beq.n	80016da <txBleComando+0xc2>
 8001642:	dc09      	bgt.n	8001658 <txBleComando+0x40>
 8001644:	2840      	cmp	r0, #64	; 0x40
 8001646:	d032      	beq.n	80016ae <txBleComando+0x96>
 8001648:	2842      	cmp	r0, #66	; 0x42
 800164a:	d015      	beq.n	8001678 <txBleComando+0x60>
			Buffer[0] = 0x01;
 800164c:	f64e 6301 	movw	r3, #60929	; 0xee01
 8001650:	f8ad 3004 	strh.w	r3, [sp, #4]
			Buffer[2] = 0xEE;
 8001654:	23ee      	movs	r3, #238	; 0xee
 8001656:	e007      	b.n	8001668 <txBleComando+0x50>
		switch ((uint8_t)buffQueue) {
 8001658:	28ff      	cmp	r0, #255	; 0xff
 800165a:	d1f7      	bne.n	800164c <txBleComando+0x34>
			Buffer[0] = 0x01;
 800165c:	f64f 7301 	movw	r3, #65281	; 0xff01
 8001660:	f8ad 3004 	strh.w	r3, [sp, #4]
			Buffer[2] = ble->ComandoAtual._comando;
 8001664:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
			bluetoothEnviaComandoSCRC(ble,Buffer, 2);
 8001668:	2202      	movs	r2, #2
 800166a:	4620      	mov	r0, r4
 800166c:	a901      	add	r1, sp, #4
			Buffer[2] = 0xEE;
 800166e:	f88d 3006 	strb.w	r3, [sp, #6]
			bluetoothEnviaComandoSCRC(ble,Buffer, 2);
 8001672:	f7ff ff87 	bl	8001584 <bluetoothEnviaComandoSCRC>
			break;
 8001676:	e013      	b.n	80016a0 <txBleComando+0x88>
			if(ble->JanelaConexao > 0){
 8001678:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800167c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001680:	b183      	cbz	r3, 80016a4 <txBleComando+0x8c>
				Buffer[0] 	= 0x01;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <txBleComando+0xdc>)
 8001684:	9301      	str	r3, [sp, #4]
				Buffer[4] 	= ble->chave.byte.hi	;
 8001686:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800168a:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[5] 	= ble->chave.byte.lo	;
 800168e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001692:	f88d 3009 	strb.w	r3, [sp, #9]
				bluetoothEnviaComando(ble,Buffer, 5);
 8001696:	2205      	movs	r2, #5
				bluetoothEnviaComando(ble,Buffer, 3);
 8001698:	4620      	mov	r0, r4
 800169a:	a901      	add	r1, sp, #4
 800169c:	f7ff ff39 	bl	8001512 <bluetoothEnviaComando>
}
 80016a0:	b004      	add	sp, #16
 80016a2:	bd10      	pop	{r4, pc}
				Buffer[0] 	= 0x01;
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <txBleComando+0xe0>)
				Buffer[4] 	= 0x00;
 80016a6:	f8ad 2008 	strh.w	r2, [sp, #8]
				Buffer[0] 	= 0x01;
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	e7f3      	b.n	8001696 <txBleComando+0x7e>
			chaveApp.byte.hi = ble->_RxDataArr[3];
 80016ae:	f04f 0100 	mov.w	r1, #0
 80016b2:	7de3      	ldrb	r3, [r4, #23]
 80016b4:	f363 0107 	bfi	r1, r3, #0, #8
			chaveApp.byte.lo = ble->_RxDataArr[4];
 80016b8:	7e23      	ldrb	r3, [r4, #24]
			if(validaCRC(ble->chave, chaveApp)){
 80016ba:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
			chaveApp.byte.lo = ble->_RxDataArr[4];
 80016bc:	f363 210f 	bfi	r1, r3, #8, #8
			if(validaCRC(ble->chave, chaveApp)){
 80016c0:	f000 fa50 	bl	8001b64 <validaCRC>
 80016c4:	b118      	cbz	r0, 80016ce <txBleComando+0xb6>
				Buffer[0] 	= 0x01;
 80016c6:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <txBleComando+0xe4>)
				bluetoothEnviaComando(ble,Buffer, 3);
 80016c8:	2203      	movs	r2, #3
				Buffer[0] 	= 0x01;
 80016ca:	9301      	str	r3, [sp, #4]
				bluetoothEnviaComando(ble,Buffer, 3);
 80016cc:	e7e4      	b.n	8001698 <txBleComando+0x80>
				ble->MaquinaConexao	= RX_VALIDADO;
 80016ce:	2203      	movs	r2, #3
				Buffer[0] 	= 0x01;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <txBleComando+0xe8>)
				ble->MaquinaConexao	= RX_VALIDADO;
 80016d2:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
				Buffer[0] 	= 0x01;
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	e7de      	b.n	8001698 <txBleComando+0x80>
			comandHM10(ble,"AT",50);//DESCONECTA
 80016da:	4620      	mov	r0, r4
 80016dc:	2232      	movs	r2, #50	; 0x32
 80016de:	4909      	ldr	r1, [pc, #36]	; (8001704 <txBleComando+0xec>)
 80016e0:	f7ff ff66 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT",50);//DESCONECTA
 80016e4:	2232      	movs	r2, #50	; 0x32
 80016e6:	4620      	mov	r0, r4
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <txBleComando+0xec>)
}
 80016ea:	b004      	add	sp, #16
 80016ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			comandHM10(ble,"AT",50);//DESCONECTA
 80016f0:	f7ff bf5e 	b.w	80015b0 <comandHM10>
 80016f4:	01515101 	.word	0x01515101
 80016f8:	00515101 	.word	0x00515101
 80016fc:	00525201 	.word	0x00525201
 8001700:	01525201 	.word	0x01525201
 8001704:	0800b906 	.word	0x0800b906

08001708 <iniciaBleHm10>:
void		 	iniciaBleHm10(volatile Bluetooth* ble){
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (ble == NULL)
 800170a:	4604      	mov	r4, r0
void		 	iniciaBleHm10(volatile Bluetooth* ble){
 800170c:	b089      	sub	sp, #36	; 0x24
	if (ble == NULL)
 800170e:	b158      	cbz	r0, 8001728 <iniciaBleHm10+0x20>
		switch (sequenciaBLE) {
 8001710:	4db8      	ldr	r5, [pc, #736]	; (80019f4 <iniciaBleHm10+0x2ec>)
			while (tryingAddr < max_attempts) {
 8001712:	4eb9      	ldr	r6, [pc, #740]	; (80019f8 <iniciaBleHm10+0x2f0>)
		switch (sequenciaBLE) {
 8001714:	782b      	ldrb	r3, [r5, #0]
 8001716:	2b04      	cmp	r3, #4
 8001718:	d8fd      	bhi.n	8001716 <iniciaBleHm10+0xe>
 800171a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800171e:	0008      	.short	0x0008
 8001720:	00e8003a 	.word	0x00e8003a
 8001724:	01690136 	.word	0x01690136
		bleError_Handler(BLE_OBJETO_NULO);
 8001728:	2005      	movs	r0, #5
			bleError_Handler(BLE_EXTRAPOLOU_TRY);
 800172a:	f7ff fd17 	bl	800115c <bleError_Handler>
			MACRO_RESET_BLE						// hm10 reset via hardware.
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001734:	48b1      	ldr	r0, [pc, #708]	; (80019fc <iniciaBleHm10+0x2f4>)
 8001736:	f004 fa37 	bl	8005ba8 <HAL_GPIO_WritePin>
 800173a:	20c8      	movs	r0, #200	; 0xc8
 800173c:	f006 fd08 	bl	8008150 <osDelay>
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001746:	48ad      	ldr	r0, [pc, #692]	; (80019fc <iniciaBleHm10+0x2f4>)
 8001748:	f004 fa2e 	bl	8005ba8 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT+ADTY3"	,100);	// hm10 bloqueia conexao.
 800174c:	2264      	movs	r2, #100	; 0x64
 800174e:	4620      	mov	r0, r4
 8001750:	49ab      	ldr	r1, [pc, #684]	; (8001a00 <iniciaBleHm10+0x2f8>)
 8001752:	f7ff ff2d 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+ADTY3"	,100);	// hm10 bloqueia conexao.
 8001756:	49aa      	ldr	r1, [pc, #680]	; (8001a00 <iniciaBleHm10+0x2f8>)
 8001758:	2264      	movs	r2, #100	; 0x64
 800175a:	4620      	mov	r0, r4
 800175c:	f7ff ff28 	bl	80015b0 <comandHM10>
			SETUP_UART(115200)					// stm32 baudrate em 115200.
 8001760:	6820      	ldr	r0, [r4, #0]
 8001762:	f006 f9ad 	bl	8007ac0 <HAL_UART_Abort_IT>
 8001766:	6820      	ldr	r0, [r4, #0]
 8001768:	f006 f90b 	bl	8007982 <HAL_UART_DeInit>
 800176c:	2032      	movs	r0, #50	; 0x32
 800176e:	f006 fcef 	bl	8008150 <osDelay>
 8001772:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	6820      	ldr	r0, [r4, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	f006 f8d2 	bl	8007924 <HAL_UART_Init>
 8001780:	2032      	movs	r0, #50	; 0x32
 8001782:	f006 fce5 	bl	8008150 <osDelay>
			bluetoothDescon(ble);				// stm32 desconecta hm10.
 8001786:	4620      	mov	r0, r4
 8001788:	f7ff ff36 	bl	80015f8 <bluetoothDescon>
			sequenciaBLE = redefineBle;			// proxima sequencia.
 800178c:	2301      	movs	r3, #1
				sequenciaBLE = erro;	// extrapolou as tentativas.
 800178e:	702b      	strb	r3, [r5, #0]
 8001790:	e7c0      	b.n	8001714 <iniciaBleHm10+0xc>
			SETUP_UART(115200)					// stm32 seta baudrate em 115200.
 8001792:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	f006 f992 	bl	8007ac0 <HAL_UART_Abort_IT>
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	f006 f8f0 	bl	8007982 <HAL_UART_DeInit>
 80017a2:	2032      	movs	r0, #50	; 0x32
 80017a4:	f006 fcd4 	bl	8008150 <osDelay>
 80017a8:	6823      	ldr	r3, [r4, #0]
 80017aa:	6820      	ldr	r0, [r4, #0]
 80017ac:	605f      	str	r7, [r3, #4]
 80017ae:	f006 f8b9 	bl	8007924 <HAL_UART_Init>
 80017b2:	2032      	movs	r0, #50	; 0x32
 80017b4:	f006 fccc 	bl	8008150 <osDelay>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 80017b8:	2264      	movs	r2, #100	; 0x64
 80017ba:	4620      	mov	r0, r4
 80017bc:	4991      	ldr	r1, [pc, #580]	; (8001a04 <iniciaBleHm10+0x2fc>)
 80017be:	f7ff fef7 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 80017c2:	2264      	movs	r2, #100	; 0x64
 80017c4:	4620      	mov	r0, r4
 80017c6:	498f      	ldr	r1, [pc, #572]	; (8001a04 <iniciaBleHm10+0x2fc>)
 80017c8:	f7ff fef2 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+RENEW"	,1000); // hm10 restaura padroes de fabrica.
 80017cc:	498e      	ldr	r1, [pc, #568]	; (8001a08 <iniciaBleHm10+0x300>)
 80017ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff feec 	bl	80015b0 <comandHM10>
			SETUP_UART(9600)					// stm32 seta baudrate em 9600
 80017d8:	6820      	ldr	r0, [r4, #0]
 80017da:	f006 f971 	bl	8007ac0 <HAL_UART_Abort_IT>
 80017de:	6820      	ldr	r0, [r4, #0]
 80017e0:	f006 f8cf 	bl	8007982 <HAL_UART_DeInit>
 80017e4:	2032      	movs	r0, #50	; 0x32
 80017e6:	f006 fcb3 	bl	8008150 <osDelay>
 80017ea:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	6820      	ldr	r0, [r4, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	f006 f896 	bl	8007924 <HAL_UART_Init>
 80017f8:	2032      	movs	r0, #50	; 0x32
 80017fa:	f006 fca9 	bl	8008150 <osDelay>
			comandHM10(ble,"AT+RENEW"	,1000); // hm10 restaura padroes de fabrica.
 80017fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001802:	4620      	mov	r0, r4
 8001804:	4980      	ldr	r1, [pc, #512]	; (8001a08 <iniciaBleHm10+0x300>)
 8001806:	f7ff fed3 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 800180a:	2264      	movs	r2, #100	; 0x64
 800180c:	4620      	mov	r0, r4
 800180e:	497d      	ldr	r1, [pc, #500]	; (8001a04 <iniciaBleHm10+0x2fc>)
 8001810:	f7ff fece 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 8001814:	2264      	movs	r2, #100	; 0x64
 8001816:	4620      	mov	r0, r4
 8001818:	497a      	ldr	r1, [pc, #488]	; (8001a04 <iniciaBleHm10+0x2fc>)
 800181a:	f7ff fec9 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+ADTY3"	,300);	// hm10 bloqueia conexao.
 800181e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001822:	4620      	mov	r0, r4
 8001824:	4976      	ldr	r1, [pc, #472]	; (8001a00 <iniciaBleHm10+0x2f8>)
 8001826:	f7ff fec3 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+BAUD4"	,300);	// hm10 define baudrate 115200.
 800182a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800182e:	4977      	ldr	r1, [pc, #476]	; (8001a0c <iniciaBleHm10+0x304>)
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff febd 	bl	80015b0 <comandHM10>
			SETUP_UART(115200)					// stm32 baudrate em 115200.
 8001836:	6820      	ldr	r0, [r4, #0]
 8001838:	f006 f942 	bl	8007ac0 <HAL_UART_Abort_IT>
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	f006 f8a0 	bl	8007982 <HAL_UART_DeInit>
 8001842:	2032      	movs	r0, #50	; 0x32
 8001844:	f006 fc84 	bl	8008150 <osDelay>
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	605f      	str	r7, [r3, #4]
 800184e:	f006 f869 	bl	8007924 <HAL_UART_Init>
 8001852:	2032      	movs	r0, #50	; 0x32
 8001854:	f006 fc7c 	bl	8008150 <osDelay>
			MACRO_RESET_BLE						// hm10 reset via hardware.
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185e:	4867      	ldr	r0, [pc, #412]	; (80019fc <iniciaBleHm10+0x2f4>)
 8001860:	f004 f9a2 	bl	8005ba8 <HAL_GPIO_WritePin>
 8001864:	20c8      	movs	r0, #200	; 0xc8
 8001866:	f006 fc73 	bl	8008150 <osDelay>
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001870:	4862      	ldr	r0, [pc, #392]	; (80019fc <iniciaBleHm10+0x2f4>)
 8001872:	f004 f999 	bl	8005ba8 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 8001876:	2264      	movs	r2, #100	; 0x64
 8001878:	4620      	mov	r0, r4
 800187a:	4962      	ldr	r1, [pc, #392]	; (8001a04 <iniciaBleHm10+0x2fc>)
 800187c:	f7ff fe98 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT"			,100);	// hm10 envia comando AT.
 8001880:	2264      	movs	r2, #100	; 0x64
 8001882:	4620      	mov	r0, r4
 8001884:	495f      	ldr	r1, [pc, #380]	; (8001a04 <iniciaBleHm10+0x2fc>)
 8001886:	f7ff fe93 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+POWE3"	,300);	// hm10 em potencia maxima.
 800188a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800188e:	4620      	mov	r0, r4
 8001890:	495f      	ldr	r1, [pc, #380]	; (8001a10 <iniciaBleHm10+0x308>)
 8001892:	f7ff fe8d 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+SHOW3"	,300);	// hm10 mostra nome e rssi.
 8001896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800189a:	4620      	mov	r0, r4
 800189c:	495d      	ldr	r1, [pc, #372]	; (8001a14 <iniciaBleHm10+0x30c>)
 800189e:	f7ff fe87 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+GAIN1"	,300);	// hm10 ganho de antena maximo.
 80018a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a6:	4620      	mov	r0, r4
 80018a8:	495b      	ldr	r1, [pc, #364]	; (8001a18 <iniciaBleHm10+0x310>)
 80018aa:	f7ff fe81 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+NOTI1"	,300);	// hm10 notifica quando conectado.
 80018ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018b2:	4620      	mov	r0, r4
 80018b4:	4959      	ldr	r1, [pc, #356]	; (8001a1c <iniciaBleHm10+0x314>)
 80018b6:	f7ff fe7b 	bl	80015b0 <comandHM10>
			comandHM10(ble,"AT+PIO11"	,300);	// 1 - CONECT = 1  \  DISC = 0.
 80018ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018be:	4620      	mov	r0, r4
 80018c0:	4957      	ldr	r1, [pc, #348]	; (8001a20 <iniciaBleHm10+0x318>)
 80018c2:	f7ff fe75 	bl	80015b0 <comandHM10>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80018c6:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <iniciaBleHm10+0x31c>)
 80018c8:	211e      	movs	r1, #30
 80018ca:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <iniciaBleHm10+0x320>)
 80018cc:	4668      	mov	r0, sp
 80018ce:	f008 ff97 	bl	800a800 <sniprintf>
			comandHM10(ble,comando, 400); 		// stm32 seta nome do hm10.
 80018d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018d6:	4669      	mov	r1, sp
 80018d8:	4620      	mov	r0, r4
 80018da:	f7ff fe69 	bl	80015b0 <comandHM10>
			M_BLE_RESET							// hm10 reset via software.
 80018de:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80018e2:	4620      	mov	r0, r4
 80018e4:	4951      	ldr	r1, [pc, #324]	; (8001a2c <iniciaBleHm10+0x324>)
 80018e6:	f7ff fe63 	bl	80015b0 <comandHM10>
			sequenciaBLE = capturaAddr;			// proxima sequencia.
 80018ea:	2302      	movs	r3, #2
 80018ec:	e74f      	b.n	800178e <iniciaBleHm10+0x86>
 80018ee:	466b      	mov	r3, sp
			MACRO_DEFINE_INTERRUPT
 80018f0:	2200      	movs	r2, #0
 80018f2:	461f      	mov	r7, r3
 80018f4:	18a1      	adds	r1, r4, r2
 80018f6:	7d09      	ldrb	r1, [r1, #20]
 80018f8:	3201      	adds	r2, #1
 80018fa:	2a18      	cmp	r2, #24
 80018fc:	f803 1b01 	strb.w	r1, [r3], #1
 8001900:	d1f8      	bne.n	80018f4 <iniciaBleHm10+0x1ec>
 8001902:	6823      	ldr	r3, [r4, #0]
 8001904:	6819      	ldr	r1, [r3, #0]
 8001906:	68cb      	ldr	r3, [r1, #12]
 8001908:	f043 0310 	orr.w	r3, r3, #16
 800190c:	60cb      	str	r3, [r1, #12]
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	6819      	ldr	r1, [r3, #0]
 8001912:	680b      	ldr	r3, [r1, #0]
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	600b      	str	r3, [r1, #0]
 800191a:	6820      	ldr	r0, [r4, #0]
 800191c:	4639      	mov	r1, r7
 800191e:	f006 fbcd 	bl	80080bc <HAL_UART_Receive_DMA>
			while (tryingAddr < max_attempts) {
 8001922:	7833      	ldrb	r3, [r6, #0]
 8001924:	2b0e      	cmp	r3, #14
 8001926:	d901      	bls.n	800192c <iniciaBleHm10+0x224>
				sequenciaBLE = erro;	// extrapolou as tentativas.
 8001928:	2304      	movs	r3, #4
 800192a:	e730      	b.n	800178e <iniciaBleHm10+0x86>
				comandHM10(ble,"AT+ADDR?",300); // stm32 pede addr do hm10.
 800192c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001930:	4620      	mov	r0, r4
 8001932:	493f      	ldr	r1, [pc, #252]	; (8001a30 <iniciaBleHm10+0x328>)
 8001934:	f7ff fe3c 	bl	80015b0 <comandHM10>
				MACRO_DEFINE_INTERRUPT
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	18a1      	adds	r1, r4, r2
 800193e:	7d09      	ldrb	r1, [r1, #20]
 8001940:	3201      	adds	r2, #1
 8001942:	2a18      	cmp	r2, #24
 8001944:	f803 1b01 	strb.w	r1, [r3], #1
 8001948:	d1f8      	bne.n	800193c <iniciaBleHm10+0x234>
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	6819      	ldr	r1, [r3, #0]
 800194e:	68cb      	ldr	r3, [r1, #12]
 8001950:	f043 0310 	orr.w	r3, r3, #16
 8001954:	60cb      	str	r3, [r1, #12]
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	680b      	ldr	r3, [r1, #0]
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	600b      	str	r3, [r1, #0]
 8001962:	6820      	ldr	r0, [r4, #0]
 8001964:	4639      	mov	r1, r7
 8001966:	f006 fba9 	bl	80080bc <HAL_UART_Receive_DMA>
				if (ble->chave.hilo != 0){
 800196a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800196c:	b21b      	sxth	r3, r3
 800196e:	b123      	cbz	r3, 800197a <iniciaBleHm10+0x272>
					sequenciaBLE = final;	// capturou o addr e vai para a proxima sequencia.
 8001970:	2303      	movs	r3, #3
 8001972:	702b      	strb	r3, [r5, #0]
					tryingAddr=0;
 8001974:	2300      	movs	r3, #0
 8001976:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 8001978:	e6cc      	b.n	8001714 <iniciaBleHm10+0xc>
					tryingAddr++;
 800197a:	7833      	ldrb	r3, [r6, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	b2db      	uxtb	r3, r3
			if(tryingAddr >= max_attempts){
 8001980:	2b0e      	cmp	r3, #14
					tryingAddr++;
 8001982:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 8001984:	f67f aec6 	bls.w	8001714 <iniciaBleHm10+0xc>
 8001988:	e7ce      	b.n	8001928 <iniciaBleHm10+0x220>
			comandHM10(ble,"AT+ADTY0",300);	// hm10 desbloqueia conexao.
 800198a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800198e:	4620      	mov	r0, r4
 8001990:	4928      	ldr	r1, [pc, #160]	; (8001a34 <iniciaBleHm10+0x32c>)
 8001992:	f7ff fe0d 	bl	80015b0 <comandHM10>
			MACRO_RESET_BLE
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199c:	4817      	ldr	r0, [pc, #92]	; (80019fc <iniciaBleHm10+0x2f4>)
 800199e:	f004 f903 	bl	8005ba8 <HAL_GPIO_WritePin>
 80019a2:	20c8      	movs	r0, #200	; 0xc8
 80019a4:	f006 fbd4 	bl	8008150 <osDelay>
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <iniciaBleHm10+0x2f4>)
 80019b0:	f004 f8fa 	bl	8005ba8 <HAL_GPIO_WritePin>
			MACRO_DEFINE_INTERRUPT
 80019b4:	466b      	mov	r3, sp
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	18a0      	adds	r0, r4, r2
 80019bc:	7d00      	ldrb	r0, [r0, #20]
 80019be:	3201      	adds	r2, #1
 80019c0:	2a18      	cmp	r2, #24
 80019c2:	f803 0b01 	strb.w	r0, [r3], #1
 80019c6:	d1f8      	bne.n	80019ba <iniciaBleHm10+0x2b2>
 80019c8:	6823      	ldr	r3, [r4, #0]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	68c3      	ldr	r3, [r0, #12]
 80019ce:	f043 0310 	orr.w	r3, r3, #16
 80019d2:	60c3      	str	r3, [r0, #12]
 80019d4:	6863      	ldr	r3, [r4, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	6803      	ldr	r3, [r0, #0]
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	6003      	str	r3, [r0, #0]
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	f006 fb6b 	bl	80080bc <HAL_UART_Receive_DMA>
			ble->MaquinaConexao = RX_DESCONECTADO;
 80019e6:	2301      	movs	r3, #1
 80019e8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
}
 80019ec:	b009      	add	sp, #36	; 0x24
 80019ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bleError_Handler(BLE_EXTRAPOLOU_TRY);
 80019f0:	2006      	movs	r0, #6
 80019f2:	e69a      	b.n	800172a <iniciaBleHm10+0x22>
 80019f4:	2000008c 	.word	0x2000008c
 80019f8:	2000008d 	.word	0x2000008d
 80019fc:	40010c00 	.word	0x40010c00
 8001a00:	0800b909 	.word	0x0800b909
 8001a04:	0800b906 	.word	0x0800b906
 8001a08:	0800b912 	.word	0x0800b912
 8001a0c:	0800b91b 	.word	0x0800b91b
 8001a10:	0800b924 	.word	0x0800b924
 8001a14:	0800b92d 	.word	0x0800b92d
 8001a18:	0800b936 	.word	0x0800b936
 8001a1c:	0800b93f 	.word	0x0800b93f
 8001a20:	0800b948 	.word	0x0800b948
 8001a24:	0800b951 	.word	0x0800b951
 8001a28:	0800b95b 	.word	0x0800b95b
 8001a2c:	0800b965 	.word	0x0800b965
 8001a30:	0800b96e 	.word	0x0800b96e
 8001a34:	0800b977 	.word	0x0800b977

08001a38 <bleConstrutora>:
void	 		bleConstrutora(volatile Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osThreadId Task){
 8001a38:	b538      	push	{r3, r4, r5, lr}
 8001a3a:	461d      	mov	r5, r3
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL)
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	b108      	cbz	r0, 8001a44 <bleConstrutora+0xc>
 8001a40:	b101      	cbz	r1, 8001a44 <bleConstrutora+0xc>
 8001a42:	b912      	cbnz	r2, 8001a4a <bleConstrutora+0x12>
		bleError_Handler(BLE_OBJETO_NULO);
 8001a44:	2005      	movs	r0, #5
 8001a46:	f7ff fb89 	bl	800115c <bleError_Handler>
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 8001a4a:	2300      	movs	r3, #0
	ble->UARTHandle 	= UARTHandle;
 8001a4c:	6001      	str	r1, [r0, #0]
	ble->UARTDMAHandle 	= UARTDMAHandle;
 8001a4e:	6042      	str	r2, [r0, #4]
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 8001a50:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 8001a54:	2378      	movs	r3, #120	; 0x78
 8001a56:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
	ble->myQ_bleCom = Queue_create();
 8001a5a:	f001 fb83 	bl	8003164 <Queue_create>
 8001a5e:	60a0      	str	r0, [r4, #8]
	ble->myQ_dataRx = Queue_create();
 8001a60:	f001 fb80 	bl	8003164 <Queue_create>
 8001a64:	60e0      	str	r0, [r4, #12]
	ble->myQ_dataTx = Queue_create();
 8001a66:	f001 fb7d 	bl	8003164 <Queue_create>
 8001a6a:	6120      	str	r0, [r4, #16]
	ble->Task 		= Task;
 8001a6c:	63e5      	str	r5, [r4, #60]	; 0x3c
	osSignalSet(ble->Task, newMessage);
 8001a6e:	210a      	movs	r1, #10
 8001a70:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001a72:	f006 fbb6 	bl	80081e2 <osSignalSet>
	bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA);
 8001a76:	2242      	movs	r2, #66	; 0x42
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8001a7e:	f7ff fbb0 	bl	80011e2 <bleAddCompConexao>
	bleAddCompConexao(ble, &ble->BLERecebeuSenha, RX_RECEBEU_SENHA);
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	4620      	mov	r0, r4
 8001a86:	f104 013a 	add.w	r1, r4, #58	; 0x3a
 8001a8a:	f7ff fbaa 	bl	80011e2 <bleAddCompConexao>
	iniciaBleHm10(ble);
 8001a8e:	4620      	mov	r0, r4
 8001a90:	f7ff fe3a 	bl	8001708 <iniciaBleHm10>
	ble->aknowladge	= sendAknowladge;
 8001a94:	4b01      	ldr	r3, [pc, #4]	; (8001a9c <bleConstrutora+0x64>)
 8001a96:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 8001a9a:	bd38      	pop	{r3, r4, r5, pc}
 8001a9c:	08001115 	.word	0x08001115

08001aa0 <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, volatile uint8_t *vetor, uint8_t inicio) {
 8001aa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001aa4:	4605      	mov	r5, r0
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 8001aa6:	2400      	movs	r4, #0
		myValue.bytes[i] = vetor[inicio + i] ;
		printf("%d \n",myValue.bytes[i]);
 8001aa8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001ad4 <vetor4b_TO_Double+0x34>
 8001aac:	af01      	add	r7, sp, #4
 8001aae:	188e      	adds	r6, r1, r2
		myValue.bytes[i] = vetor[inicio + i] ;
 8001ab0:	5d31      	ldrb	r1, [r6, r4]
		printf("%d \n",myValue.bytes[i]);
 8001ab2:	4640      	mov	r0, r8
		myValue.bytes[i] = vetor[inicio + i] ;
 8001ab4:	b2c9      	uxtb	r1, r1
	for (int i = 0; i < 4; ++i) {
 8001ab6:	3401      	adds	r4, #1
		myValue.bytes[i] = vetor[inicio + i] ;
 8001ab8:	f807 1b01 	strb.w	r1, [r7], #1
		printf("%d \n",myValue.bytes[i]);
 8001abc:	f008 fe32 	bl	800a724 <iprintf>
	for (int i = 0; i < 4; ++i) {
 8001ac0:	2c04      	cmp	r4, #4
 8001ac2:	d1f5      	bne.n	8001ab0 <vetor4b_TO_Double+0x10>
	}

	*destino = (double)myValue.value;
 8001ac4:	9801      	ldr	r0, [sp, #4]
 8001ac6:	f7fe fcaf 	bl	8000428 <__aeabi_f2d>
 8001aca:	e9c5 0100 	strd	r0, r1, [r5]
}
 8001ace:	b002      	add	sp, #8
 8001ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ad4:	0800b980 	.word	0x0800b980

08001ad8 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, volatile uint8_t *vetor, uint8_t inicio) {
 8001ad8:	b410      	push	{r4}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001ada:	b100      	cbz	r0, 8001ade <vetor2b_TO_uint16+0x6>
 8001adc:	b919      	cbnz	r1, 8001ae6 <vetor2b_TO_uint16+0xe>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001ade:	4806      	ldr	r0, [pc, #24]	; (8001af8 <vetor2b_TO_uint16+0x20>)
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001ae0:	bc10      	pop	{r4}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001ae2:	f008 be85 	b.w	800a7f0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001ae6:	5c8c      	ldrb	r4, [r1, r2]
 8001ae8:	3201      	adds	r2, #1
 8001aea:	5c8b      	ldrb	r3, [r1, r2]
 8001aec:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001af0:	8003      	strh	r3, [r0, #0]
}
 8001af2:	bc10      	pop	{r4}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	0800b985 	.word	0x0800b985

08001afc <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, volatile uint8_t *vetor, uint8_t inicio) {
 8001afc:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001afe:	4604      	mov	r4, r0
 8001b00:	b100      	cbz	r0, 8001b04 <vetor2b_TO_Double+0x8>
 8001b02:	b921      	cbnz	r1, 8001b0e <vetor2b_TO_Double+0x12>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001b08:	4806      	ldr	r0, [pc, #24]	; (8001b24 <vetor2b_TO_Double+0x28>)
 8001b0a:	f008 be71 	b.w	800a7f0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001b0e:	5c88      	ldrb	r0, [r1, r2]
 8001b10:	3201      	adds	r2, #1
 8001b12:	5c8b      	ldrb	r3, [r1, r2]
 8001b14:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001b18:	f7fe fc74 	bl	8000404 <__aeabi_i2d>
 8001b1c:	e9c4 0100 	strd	r0, r1, [r4]
}
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	bf00      	nop
 8001b24:	0800b985 	.word	0x0800b985

08001b28 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	4615      	mov	r5, r2
 8001b2c:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 8001b2e:	f7fe ff8d 	bl	8000a4c <__aeabi_d2f>

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
		vetor[inicio + i] = myValue.bytes[i];
 8001b32:	5128      	str	r0, [r5, r4]
	}
}
 8001b34:	bd38      	pop	{r3, r4, r5, pc}
	...

08001b38 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001b38:	23ff      	movs	r3, #255	; 0xff
{
 8001b3a:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001b3c:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001b3e:	4d07      	ldr	r5, [pc, #28]	; (8001b5c <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 8001b40:	4e07      	ldr	r6, [pc, #28]	; (8001b60 <CRC16+0x28>)
 8001b42:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 8001b44:	4281      	cmp	r1, r0
 8001b46:	d102      	bne.n	8001b4e <CRC16+0x16>
	}
	ret.hilo = (uchCRCHi << 8 | uchCRCLo);

	return ret ;
}
 8001b48:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b52:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001b54:	5cab      	ldrb	r3, [r5, r2]
 8001b56:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 8001b58:	5cb4      	ldrb	r4, [r6, r2]
 8001b5a:	e7f3      	b.n	8001b44 <CRC16+0xc>
 8001b5c:	0800b9ca 	.word	0x0800b9ca
 8001b60:	0800baca 	.word	0x0800baca

08001b64 <validaCRC>:

uint8_t validaCRC(CRC_short referencia, CRC_short chave){
	if(referencia.byte.hi != chave.byte.hi ||referencia.byte.lo != chave.byte.lo  ){
 8001b64:	b289      	uxth	r1, r1
 8001b66:	b280      	uxth	r0, r0
		return 1;
	}
	return 0;
}
 8001b68:	1a40      	subs	r0, r0, r1
 8001b6a:	bf18      	it	ne
 8001b6c:	2001      	movne	r0, #1
uint8_t validaCRC(CRC_short referencia, CRC_short chave){
 8001b6e:	b082      	sub	sp, #8
}
 8001b70:	b002      	add	sp, #8
 8001b72:	4770      	bx	lr

08001b74 <set_StdValues8bits>:
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
	if (errCode != EEPROM_SUCCESS)
		eepromError_Handler(self->parentEeprom, errCode);
}
void 				set_StdValues8bits(eepromVarArr* 	self, uint8_t 	min, uint8_t 	def, uint8_t 	max) {
	self->minValue.intValue 	= min;
 8001b74:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001b76:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001b78:	6203      	str	r3, [r0, #32]
}
 8001b7a:	4770      	bx	lr

08001b7c <set_StdValues16bits>:
void 				set_StdValues16bits(eepromVarArr* 	self, uint16_t 	min, uint16_t 	def, uint16_t 	max) {
	self->minValue.intValue 	= min;
 8001b7c:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001b7e:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001b80:	6203      	str	r3, [r0, #32]
}
 8001b82:	4770      	bx	lr

08001b84 <set_StdValues32bits>:
void 				set_StdValues32bits(eepromVarArr* 	self, uint32_t 	min, uint32_t 	def, uint32_t 	max) {
	self->minValue.intValue 	= min;
 8001b84:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001b86:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001b88:	6203      	str	r3, [r0, #32]
}
 8001b8a:	4770      	bx	lr

08001b8c <set_StdValuesFloat>:
void 				set_StdValuesFloat(eepromVarArr* 	self, float 	min, float 		def, float 		max) {
	self->minValue.floatValue 		= min;
 8001b8c:	6181      	str	r1, [r0, #24]
	self->defaultValue.floatValue 	= def;
 8001b8e:	6102      	str	r2, [r0, #16]
	self->maxValue.floatValue 		= max;
 8001b90:	6203      	str	r3, [r0, #32]
}
 8001b92:	4770      	bx	lr

08001b94 <set_StdValuesDouble>:
void 				set_StdValuesDouble(eepromVarArr* 	self, double 	min, double 	def, double 	max) {
	self->minValue.doubleValue 		= min;
 8001b94:	e9c0 2306 	strd	r2, r3, [r0, #24]
	self->defaultValue.doubleValue 	= def;
 8001b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b9c:	e9c0 2304 	strd	r2, r3, [r0, #16]
	self->maxValue.doubleValue 		= max;
 8001ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001ba4:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8001ba8:	4770      	bx	lr
	...

08001bac <objArrEeprom_init>:
ErrorCode 	objArrEeprom_init(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar){
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	9d06      	ldr	r5, [sp, #24]
 8001bb2:	4688      	mov	r8, r1
 8001bb4:	4617      	mov	r7, r2
 8001bb6:	461e      	mov	r6, r3
	if (self == NULL || _addrVar == NULL)
 8001bb8:	4604      	mov	r4, r0
 8001bba:	b300      	cbz	r0, 8001bfe <objArrEeprom_init+0x52>
 8001bbc:	b1fd      	cbz	r5, 8001bfe <objArrEeprom_init+0x52>
	if (addr == 0)
 8001bbe:	b302      	cbz	r2, 8001c02 <objArrEeprom_init+0x56>
	memset(self, 0, sizeof(*self));
 8001bc0:	2248      	movs	r2, #72	; 0x48
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	f008 ff28 	bl	800aa18 <memset>
	self->typeVar 		= type;
 8001bc8:	7126      	strb	r6, [r4, #4]
	self->typeReset 	= typeReset;
 8001bca:	f884 8000 	strb.w	r8, [r4]
	self->_addrEprom 	= addr;
 8001bce:	8067      	strh	r7, [r4, #2]
	switch (self->typeVar) {
 8001bd0:	2e04      	cmp	r6, #4
 8001bd2:	d818      	bhi.n	8001c06 <objArrEeprom_init+0x5a>
 8001bd4:	e8df f006 	tbb	[pc, r6]
 8001bd8:	03030303 	.word	0x03030303
 8001bdc:	03          	.byte	0x03
 8001bdd:	00          	.byte	0x00
	return EEPROM_SUCCESS;
 8001bde:	2000      	movs	r0, #0
	self->M_setStdValues8bits		= set_StdValues8bits;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <objArrEeprom_init+0x60>)
	case DATA_DOUBLE:	self->ptrDouble	= (double *)_addrVar;	break;
 8001be2:	62a5      	str	r5, [r4, #40]	; 0x28
	self->M_setStdValues8bits		= set_StdValues8bits;
 8001be4:	6323      	str	r3, [r4, #48]	; 0x30
	self->M_setStdValues16bits		= set_StdValues16bits;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <objArrEeprom_init+0x64>)
 8001be8:	6363      	str	r3, [r4, #52]	; 0x34
	self->M_setStdValues32bits		= set_StdValues32bits;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <objArrEeprom_init+0x68>)
 8001bec:	63a3      	str	r3, [r4, #56]	; 0x38
	self->M_setStdValuesFloat		= set_StdValuesFloat;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <objArrEeprom_init+0x6c>)
 8001bf0:	63e3      	str	r3, [r4, #60]	; 0x3c
	self->M_setStdValuesDouble		= set_StdValuesDouble;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <objArrEeprom_init+0x70>)
 8001bf4:	6423      	str	r3, [r4, #64]	; 0x40
	self->M_update_eepromValue 		= update_eepromObjArr;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <objArrEeprom_init+0x74>)
 8001bf8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return EEPROM_OBJETO_NULO;
 8001bfe:	2029      	movs	r0, #41	; 0x29
 8001c00:	e7fb      	b.n	8001bfa <objArrEeprom_init+0x4e>
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001c02:	2030      	movs	r0, #48	; 0x30
 8001c04:	e7f9      	b.n	8001bfa <objArrEeprom_init+0x4e>
	switch (self->typeVar) {
 8001c06:	202a      	movs	r0, #42	; 0x2a
 8001c08:	e7f7      	b.n	8001bfa <objArrEeprom_init+0x4e>
 8001c0a:	bf00      	nop
 8001c0c:	08001b75 	.word	0x08001b75
 8001c10:	08001b7d 	.word	0x08001b7d
 8001c14:	08001b85 	.word	0x08001b85
 8001c18:	08001b8d 	.word	0x08001b8d
 8001c1c:	08001b95 	.word	0x08001b95
 8001c20:	080021b3 	.word	0x080021b3

08001c24 <eeprom_AddVarOnArr>:
ErrorCode 	eepromVarArr_deinit(eepromVarArr*	self){
	__NOP();
	return EEPROM_SUCCESS;
}

ErrorCode 	eeprom_AddVarOnArr(Eeprom* eeprom, eepromVarArr* self) {
 8001c24:	b570      	push	{r4, r5, r6, lr}

	if (eeprom->arrCount >= EEPROM_MAX_COMP_COUNT)
 8001c26:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 8001c2a:	2c1d      	cmp	r4, #29
 8001c2c:	d820      	bhi.n	8001c70 <eeprom_AddVarOnArr+0x4c>
		return EEPROM_LISTA_CHEIA;
	if (self->_addrEprom == 0)
 8001c2e:	884b      	ldrh	r3, [r1, #2]
 8001c30:	b303      	cbz	r3, 8001c74 <eeprom_AddVarOnArr+0x50>
		return EEPROM_ERRO_ENDERECO_OBJ;

	// Calcula o início da próxima página
	uint16_t inicioProximaPagina = ((self->_addrEprom / PAGE_SIZE) + 1) * PAGE_SIZE;
 8001c32:	095a      	lsrs	r2, r3, #5
 8001c34:	3201      	adds	r2, #1

	// Verifica se o endereço inicial + tamanho da variável ultrapassa o início da próxima página
	uint16_t fimVar;

	switch (self->typeVar) {
 8001c36:	790d      	ldrb	r5, [r1, #4]
	uint16_t inicioProximaPagina = ((self->_addrEprom / PAGE_SIZE) + 1) * PAGE_SIZE;
 8001c38:	0152      	lsls	r2, r2, #5
 8001c3a:	b292      	uxth	r2, r2
	switch (self->typeVar) {
 8001c3c:	2d04      	cmp	r5, #4
 8001c3e:	d81b      	bhi.n	8001c78 <eeprom_AddVarOnArr+0x54>
 8001c40:	e8df f005 	tbb	[pc, r5]
 8001c44:	12121003 	.word	0x12121003
 8001c48:	14          	.byte	0x14
 8001c49:	00          	.byte	0x00
	case DATA_8BITS:
		fimVar = self->_addrEprom + sizeof(uint8_t);
 8001c4a:	3301      	adds	r3, #1
		break;
	case DATA_FLOAT:
		fimVar = self->_addrEprom + sizeof(float);
		break;
	case DATA_DOUBLE:
		fimVar = self->_addrEprom + sizeof(double);
 8001c4c:	b29b      	uxth	r3, r3
	default:
		return EEPROM_TIPO_DESCONHECIDO;
	}

	// Se a próxima varável começa no início de uma nova página, então essa variável cruzou a fronteira de uma página
	if (fimVar > inicioProximaPagina)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d814      	bhi.n	8001c7c <eeprom_AddVarOnArr+0x58>
		return EEPROM_QUEBRA_ENDERECO_OBJ;

	// Configuração do ponteiro parent
	self->parentEeprom = eeprom;
	// Adicionar a variável ao próximo slot livre
	eeprom->arrVar[eeprom->arrCount] = self;
 8001c52:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	eeprom->arrCount++;
 8001c56:	3401      	adds	r4, #1
	self->parentEeprom = eeprom;
 8001c58:	62c8      	str	r0, [r1, #44]	; 0x2c
	eeprom->arrVar[eeprom->arrCount] = self;
 8001c5a:	60d9      	str	r1, [r3, #12]
	eeprom->arrCount++;
 8001c5c:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84

	return EEPROM_SUCCESS;
 8001c60:	2000      	movs	r0, #0
}
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
		fimVar = self->_addrEprom + sizeof(uint16_t);
 8001c64:	3302      	adds	r3, #2
 8001c66:	e7f1      	b.n	8001c4c <eeprom_AddVarOnArr+0x28>
		fimVar = self->_addrEprom + sizeof(float);
 8001c68:	3304      	adds	r3, #4
 8001c6a:	e7ef      	b.n	8001c4c <eeprom_AddVarOnArr+0x28>
		fimVar = self->_addrEprom + sizeof(double);
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	e7ed      	b.n	8001c4c <eeprom_AddVarOnArr+0x28>
		return EEPROM_LISTA_CHEIA;
 8001c70:	202c      	movs	r0, #44	; 0x2c
 8001c72:	e7f6      	b.n	8001c62 <eeprom_AddVarOnArr+0x3e>
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001c74:	2030      	movs	r0, #48	; 0x30
 8001c76:	e7f4      	b.n	8001c62 <eeprom_AddVarOnArr+0x3e>
	switch (self->typeVar) {
 8001c78:	2032      	movs	r0, #50	; 0x32
 8001c7a:	e7f2      	b.n	8001c62 <eeprom_AddVarOnArr+0x3e>
		return EEPROM_QUEBRA_ENDERECO_OBJ;
 8001c7c:	2031      	movs	r0, #49	; 0x31
 8001c7e:	e7f0      	b.n	8001c62 <eeprom_AddVarOnArr+0x3e>

08001c80 <eepromObjArr_update>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(self, errCode);
	}
}

ErrorCode 	eepromObjArr_update(eepromVarArr* obj) {
 8001c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	HAL_StatusTypeDef result;
	uint8_t tries = 0, MAX_TRIES = 5;
	uint8_t buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)

	LIBERA_EEPROM
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	; 0x80
ErrorCode 	eepromObjArr_update(eepromVarArr* obj) {
 8001c88:	b087      	sub	sp, #28
 8001c8a:	4605      	mov	r5, r0
	LIBERA_EEPROM
 8001c8c:	4864      	ldr	r0, [pc, #400]	; (8001e20 <eepromObjArr_update+0x1a0>)
 8001c8e:	f003 ff8b 	bl	8005ba8 <HAL_GPIO_WritePin>
 8001c92:	2005      	movs	r0, #5
 8001c94:	f006 fa5c 	bl	8008150 <osDelay>
	uint8_t tries = 0, MAX_TRIES = 5;
 8001c98:	2400      	movs	r4, #0

	//verifica disponibilidade da eeprom
	while (tries++ < MAX_TRIES) {
		result = HAL_I2C_IsDeviceReady(obj->parentEeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001c9a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	2232      	movs	r2, #50	; 0x32
 8001ca2:	21a2      	movs	r1, #162	; 0xa2
 8001ca4:	6840      	ldr	r0, [r0, #4]
 8001ca6:	f004 fbf7 	bl	8006498 <HAL_I2C_IsDeviceReady>
	while (tries++ < MAX_TRIES) {
 8001caa:	3401      	adds	r4, #1
		if (result == HAL_OK)	break;
 8001cac:	4606      	mov	r6, r0
	while (tries++ < MAX_TRIES) {
 8001cae:	b2e4      	uxtb	r4, r4
		if (result == HAL_OK)	break;
 8001cb0:	b938      	cbnz	r0, 8001cc2 <eepromObjArr_update+0x42>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
	}

	switch (obj->typeVar) {
 8001cb2:	792b      	ldrb	r3, [r5, #4]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d817      	bhi.n	8001ce8 <eepromObjArr_update+0x68>
 8001cb8:	e8df f003 	tbb	[pc, r3]
 8001cbc:	72543607 	.word	0x72543607
 8001cc0:	8f          	.byte	0x8f
 8001cc1:	00          	.byte	0x00
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 8001cc2:	2c05      	cmp	r4, #5
 8001cc4:	d1e9      	bne.n	8001c9a <eepromObjArr_update+0x1a>
 8001cc6:	262d      	movs	r6, #45	; 0x2d
 8001cc8:	e02a      	b.n	8001d20 <eepromObjArr_update+0xa0>
	case DATA_8BITS:
		obj->value.intValue 	= *obj->ptr8;
		*((uint8_t*)&buffer) 	= *obj->ptr8;
		// limita as tentativas de escrita.
		while (tries++ < MAX_TRIES) {
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001cca:	27c8      	movs	r7, #200	; 0xc8
 8001ccc:	f04f 0801 	mov.w	r8, #1
		obj->value.intValue 	= *obj->ptr8;
 8001cd0:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001cd2:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr8;
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	60aa      	str	r2, [r5, #8]
		*((uint8_t*)&buffer) 	= *obj->ptr8;
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	f88d 3010 	strb.w	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001ce0:	3401      	adds	r4, #1
 8001ce2:	b2e4      	uxtb	r4, r4
 8001ce4:	2c06      	cmp	r4, #6
 8001ce6:	d10b      	bne.n	8001d00 <eepromObjArr_update+0x80>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
		}
		tries=0;
		break;
	}
	osDelay(40);
 8001ce8:	2028      	movs	r0, #40	; 0x28
 8001cea:	f006 fa31 	bl	8008150 <osDelay>
	TRAVA_EEPROM
 8001cee:	2005      	movs	r0, #5
 8001cf0:	f006 fa2e 	bl	8008150 <osDelay>
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	4849      	ldr	r0, [pc, #292]	; (8001e20 <eepromObjArr_update+0x1a0>)
 8001cfa:	f003 ff55 	bl	8005ba8 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS;
 8001cfe:	e00f      	b.n	8001d20 <eepromObjArr_update+0xa0>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001d00:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001d04:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d06:	f8cd 9000 	str.w	r9, [sp]
 8001d0a:	2310      	movs	r3, #16
 8001d0c:	21a2      	movs	r1, #162	; 0xa2
 8001d0e:	886a      	ldrh	r2, [r5, #2]
 8001d10:	6840      	ldr	r0, [r0, #4]
 8001d12:	f004 f9f3 	bl	80060fc <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001d16:	2800      	cmp	r0, #0
 8001d18:	d0e6      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001d1a:	2c05      	cmp	r4, #5
 8001d1c:	d1e0      	bne.n	8001ce0 <eepromObjArr_update+0x60>
 8001d1e:	262e      	movs	r6, #46	; 0x2e
}
 8001d20:	4630      	mov	r0, r6
 8001d22:	b007      	add	sp, #28
 8001d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001d28:	27c8      	movs	r7, #200	; 0xc8
 8001d2a:	f04f 0802 	mov.w	r8, #2
		obj->value.intValue 	= *obj->ptr16;
 8001d2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001d30:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr16;
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	60ab      	str	r3, [r5, #8]
		*((uint16_t*)&buffer) 	= *obj->ptr16;
 8001d38:	f8ad 3010 	strh.w	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001d3c:	3401      	adds	r4, #1
 8001d3e:	b2e4      	uxtb	r4, r4
 8001d40:	2c06      	cmp	r4, #6
 8001d42:	d0d1      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001d44:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001d48:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d4a:	f8cd 9000 	str.w	r9, [sp]
 8001d4e:	2310      	movs	r3, #16
 8001d50:	21a2      	movs	r1, #162	; 0xa2
 8001d52:	886a      	ldrh	r2, [r5, #2]
 8001d54:	6840      	ldr	r0, [r0, #4]
 8001d56:	f004 f9d1 	bl	80060fc <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	d0c4      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001d5e:	2c05      	cmp	r4, #5
 8001d60:	d1ec      	bne.n	8001d3c <eepromObjArr_update+0xbc>
 8001d62:	e7dc      	b.n	8001d1e <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001d64:	27c8      	movs	r7, #200	; 0xc8
 8001d66:	f04f 0804 	mov.w	r8, #4
		obj->value.intValue 	= *obj->ptr32;
 8001d6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001d6c:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr32;
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	60aa      	str	r2, [r5, #8]
		*((uint32_t*)&buffer) 	= *obj->ptr32;
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	9304      	str	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001d78:	3401      	adds	r4, #1
 8001d7a:	b2e4      	uxtb	r4, r4
 8001d7c:	2c06      	cmp	r4, #6
 8001d7e:	d0b3      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001d80:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001d84:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001d86:	f8cd 9000 	str.w	r9, [sp]
 8001d8a:	2310      	movs	r3, #16
 8001d8c:	21a2      	movs	r1, #162	; 0xa2
 8001d8e:	886a      	ldrh	r2, [r5, #2]
 8001d90:	6840      	ldr	r0, [r0, #4]
 8001d92:	f004 f9b3 	bl	80060fc <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d0a6      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001d9a:	2c05      	cmp	r4, #5
 8001d9c:	d1ec      	bne.n	8001d78 <eepromObjArr_update+0xf8>
 8001d9e:	e7be      	b.n	8001d1e <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001da0:	27c8      	movs	r7, #200	; 0xc8
 8001da2:	f04f 0804 	mov.w	r8, #4
		obj->value.floatValue 	= *obj->ptrFloat;
 8001da6:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001da8:	f10d 0910 	add.w	r9, sp, #16
		obj->value.floatValue 	= *obj->ptrFloat;
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	60ab      	str	r3, [r5, #8]
		*((float*)&buffer) 		= *obj->ptrFloat;
 8001db0:	9304      	str	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001db2:	3401      	adds	r4, #1
 8001db4:	b2e4      	uxtb	r4, r4
 8001db6:	2c06      	cmp	r4, #6
 8001db8:	d096      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001dba:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001dbe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001dc0:	f8cd 9000 	str.w	r9, [sp]
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	21a2      	movs	r1, #162	; 0xa2
 8001dc8:	886a      	ldrh	r2, [r5, #2]
 8001dca:	6840      	ldr	r0, [r0, #4]
 8001dcc:	f004 f996 	bl	80060fc <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d089      	beq.n	8001ce8 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001dd4:	2c05      	cmp	r4, #5
 8001dd6:	d1ec      	bne.n	8001db2 <eepromObjArr_update+0x132>
 8001dd8:	e7a1      	b.n	8001d1e <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001dda:	27c8      	movs	r7, #200	; 0xc8
 8001ddc:	f04f 0808 	mov.w	r8, #8
		obj->value.doubleValue 	= *obj->ptrDouble;
 8001de0:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001de2:	f10d 0910 	add.w	r9, sp, #16
		obj->value.doubleValue 	= *obj->ptrDouble;
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	e9c5 2302 	strd	r2, r3, [r5, #8]
		*((double*)&buffer) 	= (double)obj->value.doubleValue;
 8001dee:	e9cd 2304 	strd	r2, r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001df2:	3401      	adds	r4, #1
 8001df4:	b2e4      	uxtb	r4, r4
 8001df6:	2c06      	cmp	r4, #6
 8001df8:	f43f af76 	beq.w	8001ce8 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001dfc:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001e00:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001e02:	f8cd 9000 	str.w	r9, [sp]
 8001e06:	2310      	movs	r3, #16
 8001e08:	21a2      	movs	r1, #162	; 0xa2
 8001e0a:	886a      	ldrh	r2, [r5, #2]
 8001e0c:	6840      	ldr	r0, [r0, #4]
 8001e0e:	f004 f975 	bl	80060fc <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001e12:	2800      	cmp	r0, #0
 8001e14:	f43f af68 	beq.w	8001ce8 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001e18:	2c05      	cmp	r4, #5
 8001e1a:	d1ea      	bne.n	8001df2 <eepromObjArr_update+0x172>
 8001e1c:	e77f      	b.n	8001d1e <eepromObjArr_update+0x9e>
 8001e1e:	bf00      	nop
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <containerEeprom_download>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(obj->parentEeprom, errCode);
	}
}

ErrorCode 	containerEeprom_download	(Eeprom *eeprom){
 8001e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e28:	4605      	mov	r5, r0
	uint8_t tries = 0, MAX_TRIES = 5;
	uint8_t 		firstStart,	buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)
	eepromVarArr		*var;

	//verifica disponibilidade da eeprom
	while (tries++ < MAX_TRIES) {
 8001e2a:	2405      	movs	r4, #5
ErrorCode 	containerEeprom_download	(Eeprom *eeprom){
 8001e2c:	b089      	sub	sp, #36	; 0x24
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	2232      	movs	r2, #50	; 0x32
 8001e34:	21a2      	movs	r1, #162	; 0xa2
 8001e36:	6868      	ldr	r0, [r5, #4]
 8001e38:	f004 fb2e 	bl	8006498 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)	break;
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	bb48      	cbnz	r0, 8001e94 <containerEeprom_download+0x70>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
	}
	tries=0;

	// verifica flag primeiro start.
	eeprom->read(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001e40:	f10d 0317 	add.w	r3, sp, #23
 8001e44:	2201      	movs	r2, #1
 8001e46:	214d      	movs	r1, #77	; 0x4d
 8001e48:	4628      	mov	r0, r5
 8001e4a:	f8d5 40a0 	ldr.w	r4, [r5, #160]	; 0xa0
 8001e4e:	47a0      	blx	r4
	if (firstStart != STD_REF_MEM) {
 8001e50:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001e54:	2bb2      	cmp	r3, #178	; 0xb2
 8001e56:	d00f      	beq.n	8001e78 <containerEeprom_download+0x54>
		// salvar na eeprom o primeiro start.
		eeprom->M_resetAllVar(eeprom, HARD_RESET);
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001e60:	4798      	blx	r3
		firstStart = STD_REF_MEM;
 8001e62:	23b2      	movs	r3, #178	; 0xb2
		eeprom->write(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001e64:	2201      	movs	r2, #1
		firstStart = STD_REF_MEM;
 8001e66:	f88d 3017 	strb.w	r3, [sp, #23]
		eeprom->write(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001e6a:	214d      	movs	r1, #77	; 0x4d
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
 8001e72:	f10d 0317 	add.w	r3, sp, #23
 8001e76:	47a0      	blx	r4

		// limpe o buffer,
		memset(&buffer, 0, sizeof(uint8_t[8]));

		// Realiza leitura da EEPROM.
		while (tries++ < MAX_TRIES) {
 8001e78:	f04f 0a00 	mov.w	sl, #0
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001e7c:	f10d 0b18 	add.w	fp, sp, #24
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001e80:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
 8001e84:	fa5f f38a 	uxtb.w	r3, sl
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d809      	bhi.n	8001ea0 <containerEeprom_download+0x7c>
			break;
		}
	}
	// testa se valor referencia é diferente do valor da eeprom
	return EEPROM_SUCCESS;
}
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	b009      	add	sp, #36	; 0x24
 8001e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 8001e94:	3c01      	subs	r4, #1
 8001e96:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001e9a:	d1c8      	bne.n	8001e2e <containerEeprom_download+0xa>
 8001e9c:	262d      	movs	r6, #45	; 0x2d
 8001e9e:	e7f5      	b.n	8001e8c <containerEeprom_download+0x68>
		var = eeprom->arrVar[i];
 8001ea0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001ea4:	68dc      	ldr	r4, [r3, #12]
		if (var->_addrEprom == 0) {
 8001ea6:	8863      	ldrh	r3, [r4, #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 8086 	beq.w	8001fba <containerEeprom_download+0x196>
		switch (var->typeVar) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	7922      	ldrb	r2, [r4, #4]
		while (tries++ < MAX_TRIES) {
 8001eb2:	2705      	movs	r7, #5
 8001eb4:	2a04      	cmp	r2, #4
		switch (var->typeVar) {
 8001eb6:	bf88      	it	hi
 8001eb8:	4698      	movhi	r8, r3
			result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT,buffer, dataSize, 200);
 8001eba:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8001ebe:	bf98      	it	ls
 8001ec0:	493f      	ldrls	r1, [pc, #252]	; (8001fc0 <containerEeprom_download+0x19c>)
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001ec2:	e9cb 3300 	strd	r3, r3, [fp]
 8001ec6:	bf98      	it	ls
 8001ec8:	f811 8002 	ldrbls.w	r8, [r1, r2]
			result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT,buffer, dataSize, 200);
 8001ecc:	fa1f f888 	uxth.w	r8, r8
 8001ed0:	8862      	ldrh	r2, [r4, #2]
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	21a3      	movs	r1, #163	; 0xa3
 8001ed6:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001eda:	6868      	ldr	r0, [r5, #4]
 8001edc:	f8cd b000 	str.w	fp, [sp]
 8001ee0:	f004 f99c 	bl	800621c <HAL_I2C_Mem_Read>
			if (result == HAL_OK)	break;
 8001ee4:	b938      	cbnz	r0, 8001ef6 <containerEeprom_download+0xd2>
		switch (var->typeVar) {
 8001ee6:	7923      	ldrb	r3, [r4, #4]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d818      	bhi.n	8001f1e <containerEeprom_download+0xfa>
 8001eec:	e8df f003 	tbb	[pc, r3]
 8001ef0:	37291a09 	.word	0x37291a09
 8001ef4:	49          	.byte	0x49
 8001ef5:	00          	.byte	0x00
			if (tries == MAX_TRIES)	return EEPROM_ERRO_LEITURA;
 8001ef6:	3f01      	subs	r7, #1
 8001ef8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8001efc:	d1e8      	bne.n	8001ed0 <containerEeprom_download+0xac>
 8001efe:	262f      	movs	r6, #47	; 0x2f
 8001f00:	e7c4      	b.n	8001e8c <containerEeprom_download+0x68>
			var->value.intValue = *((uint8_t*)&buffer);
 8001f02:	f89d 3018 	ldrb.w	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f06:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint8_t*)&buffer);
 8001f08:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <containerEeprom_download+0xf0>
 8001f0e:	69a2      	ldr	r2, [r4, #24]
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d201      	bcs.n	8001f18 <containerEeprom_download+0xf4>
				var->value.intValue = var->defaultValue.intValue;
 8001f14:	6923      	ldr	r3, [r4, #16]
 8001f16:	60a3      	str	r3, [r4, #8]
			*var->ptr8 = var->value.intValue; 	// envio para ponteiro.
 8001f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f1a:	68a2      	ldr	r2, [r4, #8]
 8001f1c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001f1e:	f10a 0a01 	add.w	sl, sl, #1
 8001f22:	e7ad      	b.n	8001e80 <containerEeprom_download+0x5c>
			var->value.intValue = *((uint16_t*)&buffer);
 8001f24:	f8bd 3018 	ldrh.w	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f28:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint16_t*)&buffer);
 8001f2a:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d802      	bhi.n	8001f36 <containerEeprom_download+0x112>
 8001f30:	69a2      	ldr	r2, [r4, #24]
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d201      	bcs.n	8001f3a <containerEeprom_download+0x116>
				var->value.intValue = var->defaultValue.intValue;
 8001f36:	6923      	ldr	r3, [r4, #16]
 8001f38:	60a3      	str	r3, [r4, #8]
			*var->ptr16 = var->value.intValue; 	// envio para ponteiro
 8001f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f3c:	68a2      	ldr	r2, [r4, #8]
 8001f3e:	801a      	strh	r2, [r3, #0]
			break;
 8001f40:	e7ed      	b.n	8001f1e <containerEeprom_download+0xfa>
			var->value.intValue = *((uint32_t*)&buffer);
 8001f42:	9b06      	ldr	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f44:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint32_t*)&buffer);
 8001f46:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d802      	bhi.n	8001f52 <containerEeprom_download+0x12e>
 8001f4c:	69a2      	ldr	r2, [r4, #24]
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d201      	bcs.n	8001f56 <containerEeprom_download+0x132>
				var->value.intValue = var->defaultValue.intValue;
 8001f52:	6923      	ldr	r3, [r4, #16]
 8001f54:	60a3      	str	r3, [r4, #8]
			*var->ptr32 = var->value.intValue;
 8001f56:	68a2      	ldr	r2, [r4, #8]
 8001f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f5a:	601a      	str	r2, [r3, #0]
			break;
 8001f5c:	e7df      	b.n	8001f1e <containerEeprom_download+0xfa>
			var->value.floatValue = *((float*)&buffer);
 8001f5e:	9f06      	ldr	r7, [sp, #24]
			if (var->value.floatValue > var->maxValue.floatValue || var->value.floatValue < var->minValue.floatValue) {
 8001f60:	6a21      	ldr	r1, [r4, #32]
 8001f62:	4638      	mov	r0, r7
			var->value.floatValue = *((float*)&buffer);
 8001f64:	60a7      	str	r7, [r4, #8]
			if (var->value.floatValue > var->maxValue.floatValue || var->value.floatValue < var->minValue.floatValue) {
 8001f66:	f7ff f88b 	bl	8001080 <__aeabi_fcmpgt>
 8001f6a:	b920      	cbnz	r0, 8001f76 <containerEeprom_download+0x152>
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	69a1      	ldr	r1, [r4, #24]
 8001f70:	f7ff f868 	bl	8001044 <__aeabi_fcmplt>
 8001f74:	b108      	cbz	r0, 8001f7a <containerEeprom_download+0x156>
				var->value.floatValue = var->defaultValue.floatValue;
 8001f76:	6923      	ldr	r3, [r4, #16]
 8001f78:	60a3      	str	r3, [r4, #8]
			*var->ptrFloat = var->value.floatValue;
 8001f7a:	68a2      	ldr	r2, [r4, #8]
 8001f7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001f7e:	601a      	str	r2, [r3, #0]
			break;
 8001f80:	e7cd      	b.n	8001f1e <containerEeprom_download+0xfa>
			var->value.doubleValue = *((double*)&buffer);
 8001f82:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
			if (var->value.doubleValue > var->maxValue.doubleValue || var->value.doubleValue < var->minValue.doubleValue) {
 8001f86:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	4649      	mov	r1, r9
			var->value.doubleValue = *((double*)&buffer);
 8001f8e:	e9c4 8902 	strd	r8, r9, [r4, #8]
			if (var->value.doubleValue > var->maxValue.doubleValue || var->value.doubleValue < var->minValue.doubleValue) {
 8001f92:	f7fe fd31 	bl	80009f8 <__aeabi_dcmpgt>
 8001f96:	b930      	cbnz	r0, 8001fa6 <containerEeprom_download+0x182>
 8001f98:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8001f9c:	4640      	mov	r0, r8
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	f7fe fd0c 	bl	80009bc <__aeabi_dcmplt>
 8001fa4:	b118      	cbz	r0, 8001fae <containerEeprom_download+0x18a>
				var->value.doubleValue = var->defaultValue.doubleValue;
 8001fa6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001faa:	e9c4 2302 	strd	r2, r3, [r4, #8]
			*var->ptrDouble = var->value.doubleValue;
 8001fae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8001fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001fb4:	e9c3 0100 	strd	r0, r1, [r3]
			break;
 8001fb8:	e7b1      	b.n	8001f1e <containerEeprom_download+0xfa>
			return EEPROM_ERRO_ENDERECO_OBJ;
 8001fba:	2630      	movs	r6, #48	; 0x30
 8001fbc:	e766      	b.n	8001e8c <containerEeprom_download+0x68>
 8001fbe:	bf00      	nop
 8001fc0:	0800bbca 	.word	0x0800bbca

08001fc4 <eepromAddr_write>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(eeprom, errCode);
	}
}

ErrorCode eepromAddr_write(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 8001fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc8:	4688      	mov	r8, r1
 8001fca:	4691      	mov	r9, r2
 8001fcc:	461f      	mov	r7, r3
	if (eeprom == NULL || data == NULL) {
 8001fce:	4606      	mov	r6, r0
ErrorCode eepromAddr_write(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 8001fd0:	b085      	sub	sp, #20
	if (eeprom == NULL || data == NULL) {
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d046      	beq.n	8002064 <eepromAddr_write+0xa0>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d044      	beq.n	8002064 <eepromAddr_write+0xa0>
	}

	HAL_StatusTypeDef result;
	uint8_t tries = 0,MAX_TRIES = 5;;

	LIBERA_EEPROM
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <eepromAddr_write+0xa8>)
 8001fe0:	f003 fde2 	bl	8005ba8 <HAL_GPIO_WritePin>
 8001fe4:	2005      	movs	r0, #5
 8001fe6:	f006 f8b3 	bl	8008150 <osDelay>
 8001fea:	2505      	movs	r5, #5

	// Verifica se a EEPROM está pronta para operações de escrita
	while (tries < MAX_TRIES) {
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR, 1, HAL_MAX_DELAY);
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	21a2      	movs	r1, #162	; 0xa2
 8001ff4:	6870      	ldr	r0, [r6, #4]
 8001ff6:	f004 fa4f 	bl	8006498 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK) {
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	b168      	cbz	r0, 800201a <eepromAddr_write+0x56>
	while (tries < MAX_TRIES) {
 8001ffe:	3d01      	subs	r5, #1
 8002000:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002004:	d1f2      	bne.n	8001fec <eepromAddr_write+0x28>
		}
		tries++;
	}

	if (tries >= MAX_TRIES) {
		TRAVA_EEPROM
 8002006:	2005      	movs	r0, #5
 8002008:	f006 f8a2 	bl	8008150 <osDelay>
 800200c:	2201      	movs	r2, #1
 800200e:	2180      	movs	r1, #128	; 0x80
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <eepromAddr_write+0xa8>)
 8002012:	f003 fdc9 	bl	8005ba8 <HAL_GPIO_WritePin>
		return EEPROM_I2C_ERROR; // EEPROM não está pronta após várias tentativas
 8002016:	242d      	movs	r4, #45	; 0x2d
 8002018:	e020      	b.n	800205c <eepromAddr_write+0x98>
 800201a:	4605      	mov	r5, r0
	}

	// Escrita dos dados na EEPROM utilizando a função HAL_I2C_Mem_Write
	tries = 0; // Reinicializa o contador de tentativas
	while (tries < MAX_TRIES) {
		result = HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 800201c:	f04f 3bff 	mov.w	fp, #4294967295
 8002020:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002024:	9700      	str	r7, [sp, #0]
 8002026:	2310      	movs	r3, #16
 8002028:	4642      	mov	r2, r8
 800202a:	21a2      	movs	r1, #162	; 0xa2
 800202c:	6870      	ldr	r0, [r6, #4]
 800202e:	fa5f fa85 	uxtb.w	sl, r5
 8002032:	f004 f863 	bl	80060fc <HAL_I2C_Mem_Write>
		if (result == HAL_OK) {
 8002036:	b118      	cbz	r0, 8002040 <eepromAddr_write+0x7c>
	while (tries < MAX_TRIES) {
 8002038:	3501      	adds	r5, #1
 800203a:	2d05      	cmp	r5, #5
 800203c:	d1f0      	bne.n	8002020 <eepromAddr_write+0x5c>
 800203e:	46aa      	mov	sl, r5
			break; // Dados gravados com sucesso
		}
		tries++;
	}

	TRAVA_EEPROM
 8002040:	2005      	movs	r0, #5
 8002042:	f006 f885 	bl	8008150 <osDelay>
 8002046:	2201      	movs	r2, #1
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	4808      	ldr	r0, [pc, #32]	; (800206c <eepromAddr_write+0xa8>)
 800204c:	f003 fdac 	bl	8005ba8 <HAL_GPIO_WritePin>
	if (tries >= MAX_TRIES) {
 8002050:	f1ba 0f05 	cmp.w	sl, #5
 8002054:	d008      	beq.n	8002068 <eepromAddr_write+0xa4>
		return EEPROM_ERRO_ESCRITA; // Falha ao escrever após várias tentativas
	}

	osDelay(5); // Pequeno atraso para garantir que a escrita tenha tempo para se estabelecer
 8002056:	2005      	movs	r0, #5
 8002058:	f006 f87a 	bl	8008150 <osDelay>
	return EEPROM_SUCCESS; // Dados gravados com sucesso
}
 800205c:	4620      	mov	r0, r4
 800205e:	b005      	add	sp, #20
 8002060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return EEPROM_OBJETO_NULO;
 8002064:	2429      	movs	r4, #41	; 0x29
 8002066:	e7f9      	b.n	800205c <eepromAddr_write+0x98>
		return EEPROM_ERRO_ESCRITA; // Falha ao escrever após várias tentativas
 8002068:	242e      	movs	r4, #46	; 0x2e
 800206a:	e7f7      	b.n	800205c <eepromAddr_write+0x98>
 800206c:	40010c00 	.word	0x40010c00

08002070 <eepromAddr_read>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(eeprom, errCode);
	}
}

ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 8002070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002074:	4606      	mov	r6, r0
 8002076:	460f      	mov	r7, r1

	HAL_StatusTypeDef result;
	uint8_t tries = 0;
	const uint8_t MAX_TRIES = 5;

	LIBERA_EEPROM
 8002078:	481e      	ldr	r0, [pc, #120]	; (80020f4 <eepromAddr_read+0x84>)
 800207a:	2180      	movs	r1, #128	; 0x80
ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 800207c:	4691      	mov	r9, r2
	LIBERA_EEPROM
 800207e:	2200      	movs	r2, #0
ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 8002080:	4698      	mov	r8, r3
	LIBERA_EEPROM
 8002082:	f003 fd91 	bl	8005ba8 <HAL_GPIO_WritePin>
 8002086:	2005      	movs	r0, #5
 8002088:	f006 f862 	bl	8008150 <osDelay>

	// verifica disponibilidade da eeprom.
	while (tries++ < MAX_TRIES) {
 800208c:	2405      	movs	r4, #5
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR, 50, HAL_MAX_DELAY);
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
 8002092:	2232      	movs	r2, #50	; 0x32
 8002094:	21a3      	movs	r1, #163	; 0xa3
 8002096:	6870      	ldr	r0, [r6, #4]
 8002098:	f004 f9fe 	bl	8006498 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)    break;
 800209c:	b9e8      	cbnz	r0, 80020da <eepromAddr_read+0x6a>
 800209e:	2505      	movs	r5, #5
	}

	// limita as tentativas de leitura.
	tries = 0;
	while (tries++ < MAX_TRIES) {
		result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, _addrEprom, I2C_MEMADD_SIZE_16BIT, value, size, 200);
 80020a0:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
 80020a4:	2310      	movs	r3, #16
 80020a6:	463a      	mov	r2, r7
 80020a8:	21a3      	movs	r1, #163	; 0xa3
 80020aa:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80020ae:	6870      	ldr	r0, [r6, #4]
 80020b0:	f8cd 8000 	str.w	r8, [sp]
 80020b4:	f004 f8b2 	bl	800621c <HAL_I2C_Mem_Read>
		if (result == HAL_OK)    break;
 80020b8:	4604      	mov	r4, r0
 80020ba:	b9a0      	cbnz	r0, 80020e6 <eepromAddr_read+0x76>
		if (tries == MAX_TRIES)  return EEPROM_ERRO_LEITURA;
	}

	osDelay(40);
 80020bc:	2028      	movs	r0, #40	; 0x28
 80020be:	f006 f847 	bl	8008150 <osDelay>
	TRAVA_EEPROM
 80020c2:	2005      	movs	r0, #5
 80020c4:	f006 f844 	bl	8008150 <osDelay>
 80020c8:	2201      	movs	r2, #1
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	4809      	ldr	r0, [pc, #36]	; (80020f4 <eepromAddr_read+0x84>)
 80020ce:	f003 fd6b 	bl	8005ba8 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS;
}
 80020d2:	4620      	mov	r0, r4
 80020d4:	b004      	add	sp, #16
 80020d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tries == MAX_TRIES)  return EEPROM_I2C_ERROR;
 80020da:	3c01      	subs	r4, #1
 80020dc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80020e0:	d1d5      	bne.n	800208e <eepromAddr_read+0x1e>
 80020e2:	242d      	movs	r4, #45	; 0x2d
 80020e4:	e7f5      	b.n	80020d2 <eepromAddr_read+0x62>
		if (tries == MAX_TRIES)  return EEPROM_ERRO_LEITURA;
 80020e6:	3d01      	subs	r5, #1
 80020e8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80020ec:	d1da      	bne.n	80020a4 <eepromAddr_read+0x34>
 80020ee:	242f      	movs	r4, #47	; 0x2f
 80020f0:	e7ef      	b.n	80020d2 <eepromAddr_read+0x62>
 80020f2:	bf00      	nop
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <ErrorBuffer_init>:
		ErrorBuffer_add(eeprom, erro);
		NVIC_SystemReset();
	}
}
void ErrorBuffer_init(ErrorBuffer* ebuffer) {
	memset(ebuffer->errors, 0, sizeof(ebuffer->errors)); // Preenche com 0xFFFF que é valor padrão para EEPROM limpa
 80020f8:	2300      	movs	r3, #0
 80020fa:	6003      	str	r3, [r0, #0]
 80020fc:	6043      	str	r3, [r0, #4]
 80020fe:	8103      	strh	r3, [r0, #8]
	ebuffer->errorCount = 0;
 8002100:	7283      	strb	r3, [r0, #10]
}
 8002102:	4770      	bx	lr

08002104 <ErrorBuffer_add>:

ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 8002104:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Verifica se o errorCode já está no buffer
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 8002106:	2200      	movs	r2, #0
ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 8002108:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 800210a:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 800210e:	f88d 1007 	strb.w	r1, [sp, #7]
 8002112:	3084      	adds	r0, #132	; 0x84
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 8002114:	b2d5      	uxtb	r5, r2
 8002116:	42ab      	cmp	r3, r5
 8002118:	d817      	bhi.n	800214a <ErrorBuffer_add+0x46>
			return EEPROM_ERROR_EXISTS; // Erro já foi adicionado anteriormente
		}
	}

	// Adiciona o erro se houver espaço no buffer
	if (eeprom->errorBuffer.errorCount < MAX_ERRORS) {
 800211a:	2b0a      	cmp	r3, #10
 800211c:	d01c      	beq.n	8002158 <ErrorBuffer_add+0x54>
		eeprom->errorBuffer.errors[eeprom->errorBuffer.errorCount] = errorCode;
 800211e:	18e2      	adds	r2, r4, r3
 8002120:	f882 1085 	strb.w	r1, [r2, #133]	; 0x85
		eeprom->write(eeprom, addrINIT_ERR + eeprom->errorBuffer.errorCount * sizeof(uint16_t), sizeof(uint8_t), &errorCode); // Grava novo erro na EEPROM
 8002124:	2201      	movs	r2, #1
 8002126:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 800212a:	b2c9      	uxtb	r1, r1
 800212c:	4620      	mov	r0, r4
 800212e:	f10d 0307 	add.w	r3, sp, #7
 8002132:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 8002136:	4091      	lsls	r1, r2
 8002138:	47a8      	blx	r5
		eeprom->errorBuffer.errorCount++;
		return EEPROM_SUCCESS;
 800213a:	2000      	movs	r0, #0
		eeprom->errorBuffer.errorCount++;
 800213c:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 8002140:	3301      	adds	r3, #1
 8002142:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
	}

	return EEPROM_ERROR_FULL; // Buffer de erros cheio
}
 8002146:	b003      	add	sp, #12
 8002148:	bd30      	pop	{r4, r5, pc}
		if (eeprom->errorBuffer.errors[i] == errorCode) {
 800214a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800214e:	3201      	adds	r2, #1
 8002150:	428d      	cmp	r5, r1
 8002152:	d1df      	bne.n	8002114 <ErrorBuffer_add+0x10>
			return EEPROM_ERROR_EXISTS; // Erro já foi adicionado anteriormente
 8002154:	2035      	movs	r0, #53	; 0x35
 8002156:	e7f6      	b.n	8002146 <ErrorBuffer_add+0x42>
	return EEPROM_ERROR_FULL; // Buffer de erros cheio
 8002158:	2034      	movs	r0, #52	; 0x34
 800215a:	e7f4      	b.n	8002146 <ErrorBuffer_add+0x42>

0800215c <eepromError_Handler>:
void 			eepromError_Handler(Eeprom *eeprom, ErrorCode erro){
 800215c:	b508      	push	{r3, lr}
		ErrorBuffer_add(eeprom, erro);
 800215e:	f7ff ffd1 	bl	8002104 <ErrorBuffer_add>
 8002162:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002166:	4905      	ldr	r1, [pc, #20]	; (800217c <eepromError_Handler+0x20>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <eepromError_Handler+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800216a:	68ca      	ldr	r2, [r1, #12]
 800216c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002170:	4313      	orrs	r3, r2
 8002172:	60cb      	str	r3, [r1, #12]
 8002174:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002178:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800217a:	e7fd      	b.n	8002178 <eepromError_Handler+0x1c>
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	05fa0004 	.word	0x05fa0004

08002184 <init_objArrEeprom>:
void 				init_objArrEeprom(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar) {
 8002184:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
 8002186:	9d06      	ldr	r5, [sp, #24]
void 				init_objArrEeprom(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar) {
 8002188:	4604      	mov	r4, r0
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
 800218a:	9500      	str	r5, [sp, #0]
 800218c:	f7ff fd0e 	bl	8001bac <objArrEeprom_init>
	if (errCode != EEPROM_SUCCESS)
 8002190:	4601      	mov	r1, r0
 8002192:	b110      	cbz	r0, 800219a <init_objArrEeprom+0x16>
		eepromError_Handler(self->parentEeprom, errCode);
 8002194:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002196:	f7ff ffe1 	bl	800215c <eepromError_Handler>
}
 800219a:	b003      	add	sp, #12
 800219c:	bd30      	pop	{r4, r5, pc}

0800219e <addVarOnContainerEeprom>:
void 				addVarOnContainerEeprom(Eeprom* self, eepromVarArr* var){
 800219e:	b510      	push	{r4, lr}
 80021a0:	4604      	mov	r4, r0
	ErrorCode errCode = eeprom_AddVarOnArr(self, var);
 80021a2:	f7ff fd3f 	bl	8001c24 <eeprom_AddVarOnArr>
	if (errCode != EEPROM_SUCCESS) {
 80021a6:	4601      	mov	r1, r0
 80021a8:	b110      	cbz	r0, 80021b0 <addVarOnContainerEeprom+0x12>
		eepromError_Handler(self, errCode);
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ffd6 	bl	800215c <eepromError_Handler>
}
 80021b0:	bd10      	pop	{r4, pc}

080021b2 <update_eepromObjArr>:
void 				update_eepromObjArr(eepromVarArr* obj) {
 80021b2:	b510      	push	{r4, lr}
 80021b4:	4604      	mov	r4, r0
	ErrorCode errCode = eepromObjArr_update(obj);
 80021b6:	f7ff fd63 	bl	8001c80 <eepromObjArr_update>
	if (errCode != EEPROM_SUCCESS) {
 80021ba:	4601      	mov	r1, r0
 80021bc:	b110      	cbz	r0, 80021c4 <update_eepromObjArr+0x12>
		eepromError_Handler(obj->parentEeprom, errCode);
 80021be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021c0:	f7ff ffcc 	bl	800215c <eepromError_Handler>
}
 80021c4:	bd10      	pop	{r4, pc}

080021c6 <download_containerEeprom>:
void 				download_containerEeprom	(Eeprom *eeprom){
 80021c6:	b510      	push	{r4, lr}
 80021c8:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_download(eeprom);
 80021ca:	f7ff fe2b 	bl	8001e24 <containerEeprom_download>
	if (errCode != EEPROM_SUCCESS) {
 80021ce:	4601      	mov	r1, r0
 80021d0:	b110      	cbz	r0, 80021d8 <download_containerEeprom+0x12>
		eepromError_Handler(eeprom, errCode);
 80021d2:	4620      	mov	r0, r4
 80021d4:	f7ff ffc2 	bl	800215c <eepromError_Handler>
}
 80021d8:	bd10      	pop	{r4, pc}

080021da <write_eepromAddr>:
void 				write_eepromAddr(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 80021da:	b510      	push	{r4, lr}
 80021dc:	4604      	mov	r4, r0
	ErrorCode errCode = eepromAddr_write(eeprom,addr,size,data);
 80021de:	f7ff fef1 	bl	8001fc4 <eepromAddr_write>
	if (errCode != EEPROM_SUCCESS) {
 80021e2:	4601      	mov	r1, r0
 80021e4:	b110      	cbz	r0, 80021ec <write_eepromAddr+0x12>
		eepromError_Handler(eeprom, errCode);
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ffb8 	bl	800215c <eepromError_Handler>
}
 80021ec:	bd10      	pop	{r4, pc}

080021ee <read_eepromAddr>:
void 				read_eepromAddr(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 80021ee:	b510      	push	{r4, lr}
 80021f0:	4604      	mov	r4, r0
	ErrorCode errCode = eepromAddr_read(eeprom, _addrEprom,size, value);
 80021f2:	f7ff ff3d 	bl	8002070 <eepromAddr_read>
	if (errCode != EEPROM_SUCCESS) {
 80021f6:	4601      	mov	r1, r0
 80021f8:	b110      	cbz	r0, 8002200 <read_eepromAddr+0x12>
		eepromError_Handler(eeprom, errCode);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f7ff ffae 	bl	800215c <eepromError_Handler>
}
 8002200:	bd10      	pop	{r4, pc}

08002202 <ErrorBuffer_read>:
ErrorCode ErrorBuffer_read(Eeprom *eeprom) {
 8002202:	b570      	push	{r4, r5, r6, lr}
	if (eeprom == NULL ) {
 8002204:	4604      	mov	r4, r0
ErrorCode ErrorBuffer_read(Eeprom *eeprom) {
 8002206:	b088      	sub	sp, #32
	if (eeprom == NULL ) {
 8002208:	b1f8      	cbz	r0, 800224a <ErrorBuffer_read+0x48>
	HAL_StatusTypeDef result;
	uint8_t buffer[MAX_ERRORS];  // Buffer para ler os erros da EEPROM (2 bytes por erro)
	int i;

	// Lê os erros da EEPROM
	result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, addrINIT_ERR,I2C_MEMADD_SIZE_16BIT, buffer, MAX_ERRORS, HAL_MAX_DELAY);
 800220a:	230a      	movs	r3, #10
 800220c:	f04f 32ff 	mov.w	r2, #4294967295
 8002210:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002214:	ad05      	add	r5, sp, #20
 8002216:	9500      	str	r5, [sp, #0]
 8002218:	2310      	movs	r3, #16
 800221a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800221e:	21a3      	movs	r1, #163	; 0xa3
 8002220:	6840      	ldr	r0, [r0, #4]
 8002222:	f003 fffb 	bl	800621c <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8002226:	b990      	cbnz	r0, 800224e <ErrorBuffer_read+0x4c>
		return EEPROM_ERRO_LEITURA;
	}

	// Armazena os erros lidos no ErrorBuffer
	for (i = 0; i < MAX_ERRORS; i++) {
 8002228:	4602      	mov	r2, r0
		if (buffer[i] != 0) {
 800222a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800222e:	b139      	cbz	r1, 8002240 <ErrorBuffer_read+0x3e>
			eeprom->errorBuffer.errors[eeprom->errorBuffer.errorCount++] = buffer[i];
 8002230:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 8002234:	1c5e      	adds	r6, r3, #1
 8002236:	4423      	add	r3, r4
 8002238:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
 800223c:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
	for (i = 0; i < MAX_ERRORS; i++) {
 8002240:	3201      	adds	r2, #1
 8002242:	2a0a      	cmp	r2, #10
 8002244:	d1f1      	bne.n	800222a <ErrorBuffer_read+0x28>
		}
	}

	return EEPROM_SUCCESS;
}
 8002246:	b008      	add	sp, #32
 8002248:	bd70      	pop	{r4, r5, r6, pc}
		return EEPROM_OBJETO_NULO;
 800224a:	2029      	movs	r0, #41	; 0x29
 800224c:	e7fb      	b.n	8002246 <ErrorBuffer_read+0x44>
		return EEPROM_ERRO_LEITURA;
 800224e:	202f      	movs	r0, #47	; 0x2f
 8002250:	e7f9      	b.n	8002246 <ErrorBuffer_read+0x44>
	...

08002254 <containerEeprom_init>:
ErrorCode 	containerEeprom_init(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460e      	mov	r6, r1
 8002258:	4615      	mov	r5, r2
	if (self == NULL || i2c == NULL || fila == NULL)
 800225a:	4604      	mov	r4, r0
 800225c:	b1f8      	cbz	r0, 800229e <containerEeprom_init+0x4a>
 800225e:	b1f1      	cbz	r1, 800229e <containerEeprom_init+0x4a>
 8002260:	b1ea      	cbz	r2, 800229e <containerEeprom_init+0x4a>
	memset(self, 0, sizeof(*self));
 8002262:	22a4      	movs	r2, #164	; 0xa4
 8002264:	2100      	movs	r1, #0
 8002266:	f008 fbd7 	bl	800aa18 <memset>
	ErrorBuffer_init(&self->errorBuffer);
 800226a:	f104 0085 	add.w	r0, r4, #133	; 0x85
	self->filaComandos 			= fila; // fila de salvamento.
 800226e:	e9c4 6501 	strd	r6, r5, [r4, #4]
	ErrorBuffer_init(&self->errorBuffer);
 8002272:	f7ff ff41 	bl	80020f8 <ErrorBuffer_init>
	ErrorBuffer_read(self);
 8002276:	4620      	mov	r0, r4
 8002278:	f7ff ffc3 	bl	8002202 <ErrorBuffer_read>
	self->read = read_eepromAddr;
 800227c:	2000      	movs	r0, #0
	self->M_AddOnArr = addVarOnContainerEeprom;
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <containerEeprom_init+0x50>)
 8002280:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	self->M_downloadAllVar = download_containerEeprom;
 8002284:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <containerEeprom_init+0x54>)
 8002286:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	self->M_resetAllVar = reset_containerEeprom;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <containerEeprom_init+0x58>)
 800228c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	self->write = write_eepromAddr;
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <containerEeprom_init+0x5c>)
 8002292:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	self->read = read_eepromAddr;
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <containerEeprom_init+0x60>)
 8002298:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
 800229c:	bd70      	pop	{r4, r5, r6, pc}
		return EEPROM_OBJETO_NULO;
 800229e:	2029      	movs	r0, #41	; 0x29
 80022a0:	e7fc      	b.n	800229c <containerEeprom_init+0x48>
 80022a2:	bf00      	nop
 80022a4:	0800219f 	.word	0x0800219f
 80022a8:	080021c7 	.word	0x080021c7
 80022ac:	08002509 	.word	0x08002509
 80022b0:	080021db 	.word	0x080021db
 80022b4:	080021ef 	.word	0x080021ef

080022b8 <init_containerEeprom>:
void 				init_containerEeprom(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila) {
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_init(self, i2c, fila);
 80022bc:	f7ff ffca 	bl	8002254 <containerEeprom_init>
	if (errCode != EEPROM_SUCCESS) {
 80022c0:	4601      	mov	r1, r0
 80022c2:	b110      	cbz	r0, 80022ca <init_containerEeprom+0x12>
		eepromError_Handler(self, errCode);
 80022c4:	4620      	mov	r0, r4
 80022c6:	f7ff ff49 	bl	800215c <eepromError_Handler>
}
 80022ca:	bd10      	pop	{r4, pc}

080022cc <ErrorBuffer_clear>:
void ErrorBuffer_clear(Eeprom* eeprom) {
 80022cc:	b570      	push	{r4, r5, r6, lr}
	memset(eeprom->errorBuffer.errors, 0, sizeof(eeprom->errorBuffer.errors)); // Zera o buffer de erro
 80022ce:	2500      	movs	r5, #0
void ErrorBuffer_clear(Eeprom* eeprom) {
 80022d0:	4604      	mov	r4, r0
	memset(eeprom->errorBuffer.errors, 0, sizeof(eeprom->errorBuffer.errors)); // Zera o buffer de erro
 80022d2:	f100 0385 	add.w	r3, r0, #133	; 0x85
 80022d6:	f8c0 5085 	str.w	r5, [r0, #133]	; 0x85
 80022da:	f8c0 5089 	str.w	r5, [r0, #137]	; 0x89
 80022de:	811d      	strh	r5, [r3, #8]
	eeprom->write(eeprom, addrINIT_ERR, sizeof(eeprom->errorBuffer.errors), eeprom->errorBuffer.errors); // Zera o registro na EEPROM
 80022e0:	220a      	movs	r2, #10
 80022e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80022e6:	f8d0 609c 	ldr.w	r6, [r0, #156]	; 0x9c
 80022ea:	47b0      	blx	r6
	eeprom->errorBuffer.errorCount = 0;
 80022ec:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
}
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080022f4 <containerEeprom_reset>:
ErrorCode 	containerEeprom_reset(Eeprom *eeprom, TypeRestauracao resetType) {
 80022f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f8:	b089      	sub	sp, #36	; 0x24
	if (!eeprom) {
 80022fa:	4606      	mov	r6, r0
ErrorCode 	containerEeprom_reset(Eeprom *eeprom, TypeRestauracao resetType) {
 80022fc:	9105      	str	r1, [sp, #20]
	if (!eeprom) {
 80022fe:	2800      	cmp	r0, #0
 8002300:	f000 80fe 	beq.w	8002500 <containerEeprom_reset+0x20c>
	LIBERA_EEPROM
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	487e      	ldr	r0, [pc, #504]	; (8002504 <containerEeprom_reset+0x210>)
 800230a:	f003 fc4d 	bl	8005ba8 <HAL_GPIO_WritePin>
 800230e:	2005      	movs	r0, #5
 8002310:	f005 ff1e 	bl	8008150 <osDelay>
 8002314:	2405      	movs	r4, #5
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	2232      	movs	r2, #50	; 0x32
 800231c:	21a2      	movs	r1, #162	; 0xa2
 800231e:	6870      	ldr	r0, [r6, #4]
 8002320:	f004 f8ba 	bl	8006498 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)	break;
 8002324:	4605      	mov	r5, r0
 8002326:	b910      	cbnz	r0, 800232e <containerEeprom_reset+0x3a>
 8002328:	4682      	mov	sl, r0
		memset(&buffer, 0, sizeof(uint8_t[8]));
 800232a:	af06      	add	r7, sp, #24
 800232c:	e015      	b.n	800235a <containerEeprom_reset+0x66>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 800232e:	3c01      	subs	r4, #1
 8002330:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002334:	d1ef      	bne.n	8002316 <containerEeprom_reset+0x22>
 8002336:	252d      	movs	r5, #45	; 0x2d
 8002338:	e04a      	b.n	80023d0 <containerEeprom_reset+0xdc>
		var = eeprom->arrVar[i];
 800233a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800233e:	68dc      	ldr	r4, [r3, #12]
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8002340:	2300      	movs	r3, #0
 8002342:	e9c7 3300 	strd	r3, r3, [r7]
		if (resetType == HARD_RESET || var->typeReset == SOFT_RESET) {
 8002346:	9b05      	ldr	r3, [sp, #20]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d018      	beq.n	800237e <containerEeprom_reset+0x8a>
 800234c:	7823      	ldrb	r3, [r4, #0]
 800234e:	b1b3      	cbz	r3, 800237e <containerEeprom_reset+0x8a>
		osDelay(20);
 8002350:	2014      	movs	r0, #20
 8002352:	f005 fefd 	bl	8008150 <osDelay>
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8002356:	f10a 0a01 	add.w	sl, sl, #1
 800235a:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 800235e:	fa5f f38a 	uxtb.w	r3, sl
 8002362:	429a      	cmp	r2, r3
 8002364:	d8e9      	bhi.n	800233a <containerEeprom_reset+0x46>
	ErrorBuffer_clear(eeprom); // Limpa o buffer de erros)
 8002366:	4630      	mov	r0, r6
 8002368:	f7ff ffb0 	bl	80022cc <ErrorBuffer_clear>
	TRAVA_EEPROM
 800236c:	2005      	movs	r0, #5
 800236e:	f005 feef 	bl	8008150 <osDelay>
 8002372:	2201      	movs	r2, #1
 8002374:	2180      	movs	r1, #128	; 0x80
 8002376:	4863      	ldr	r0, [pc, #396]	; (8002504 <containerEeprom_reset+0x210>)
 8002378:	f003 fc16 	bl	8005ba8 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS; // Retorna sucesso se todos os valores foram resetados
 800237c:	e028      	b.n	80023d0 <containerEeprom_reset+0xdc>
			switch (var->typeVar) {
 800237e:	7923      	ldrb	r3, [r4, #4]
 8002380:	2b04      	cmp	r3, #4
 8002382:	f200 80bb 	bhi.w	80024fc <containerEeprom_reset+0x208>
 8002386:	e8df f003 	tbb	[pc, r3]
 800238a:	2703      	.short	0x2703
 800238c:	6346      	.short	0x6346
 800238e:	8c          	.byte	0x8c
 800238f:	00          	.byte	0x00
				while (tries++ < MAX_TRIES) {
 8002390:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8002394:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 8002398:	f04f 0901 	mov.w	r9, #1
				*var->ptr8 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 800239c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800239e:	6922      	ldr	r2, [r4, #16]
 80023a0:	701a      	strb	r2, [r3, #0]
				var->value.intValue		= *var->ptr8;
 80023a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	60a3      	str	r3, [r4, #8]
				*((uint8_t*)&buffer) 	= var->value.intValue;
 80023a8:	f88d 3018 	strb.w	r3, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 80023ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023ae:	8862      	ldrh	r2, [r4, #2]
 80023b0:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 80023b4:	9700      	str	r7, [sp, #0]
 80023b6:	2310      	movs	r3, #16
 80023b8:	21a2      	movs	r1, #162	; 0xa2
 80023ba:	6840      	ldr	r0, [r0, #4]
 80023bc:	f003 fe9e 	bl	80060fc <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d0c5      	beq.n	8002350 <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 80023c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80023c8:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80023cc:	d1ee      	bne.n	80023ac <containerEeprom_reset+0xb8>
 80023ce:	252e      	movs	r5, #46	; 0x2e
}
 80023d0:	4628      	mov	r0, r5
 80023d2:	b009      	add	sp, #36	; 0x24
 80023d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while (tries++ < MAX_TRIES) {
 80023d8:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 80023dc:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 80023e0:	f04f 0902 	mov.w	r9, #2
				*var->ptr16 = (var->defaultValue.intValue ? var->defaultValue.intValue : 0);
 80023e4:	6923      	ldr	r3, [r4, #16]
 80023e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	800a      	strh	r2, [r1, #0]
				var->value.intValue 	= *var->ptr16;
 80023ec:	60a2      	str	r2, [r4, #8]
				*((uint16_t*)&buffer) 	= var->value.intValue;
 80023ee:	f8ad 2018 	strh.w	r2, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 80023f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80023f4:	8862      	ldrh	r2, [r4, #2]
 80023f6:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 80023fa:	9700      	str	r7, [sp, #0]
 80023fc:	2310      	movs	r3, #16
 80023fe:	21a2      	movs	r1, #162	; 0xa2
 8002400:	6840      	ldr	r0, [r0, #4]
 8002402:	f003 fe7b 	bl	80060fc <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 8002406:	2800      	cmp	r0, #0
 8002408:	d0a2      	beq.n	8002350 <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 800240a:	f108 38ff 	add.w	r8, r8, #4294967295
 800240e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8002412:	d1ee      	bne.n	80023f2 <containerEeprom_reset+0xfe>
 8002414:	e7db      	b.n	80023ce <containerEeprom_reset+0xda>
				while (tries++ < MAX_TRIES) {
 8002416:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 800241a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 800241e:	f04f 0904 	mov.w	r9, #4
				*var->ptr32 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 8002422:	6923      	ldr	r3, [r4, #16]
 8002424:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002426:	6013      	str	r3, [r2, #0]
				var->value.intValue 	= *var->ptr32;
 8002428:	60a3      	str	r3, [r4, #8]
				*((uint32_t*)&buffer) 	= var->value.intValue;
 800242a:	9306      	str	r3, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 800242c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800242e:	8862      	ldrh	r2, [r4, #2]
 8002430:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002434:	9700      	str	r7, [sp, #0]
 8002436:	2310      	movs	r3, #16
 8002438:	21a2      	movs	r1, #162	; 0xa2
 800243a:	6840      	ldr	r0, [r0, #4]
 800243c:	f003 fe5e 	bl	80060fc <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 8002440:	2800      	cmp	r0, #0
 8002442:	d085      	beq.n	8002350 <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8002444:	f108 38ff 	add.w	r8, r8, #4294967295
 8002448:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800244c:	d1ee      	bne.n	800242c <containerEeprom_reset+0x138>
 800244e:	e7be      	b.n	80023ce <containerEeprom_reset+0xda>
				*var->ptrFloat = var->defaultValue.floatValue ? var->defaultValue.floatValue : 0.0;
 8002450:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8002454:	2100      	movs	r1, #0
 8002456:	4640      	mov	r0, r8
 8002458:	f7fe fdea 	bl	8001030 <__aeabi_fcmpeq>
 800245c:	b108      	cbz	r0, 8002462 <containerEeprom_reset+0x16e>
 800245e:	f04f 0800 	mov.w	r8, #0
 8002462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8002464:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
				*var->ptrFloat = var->defaultValue.floatValue ? var->defaultValue.floatValue : 0.0;
 8002468:	f8c3 8000 	str.w	r8, [r3]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 800246c:	f04f 0904 	mov.w	r9, #4
				var->value.floatValue 	= *var->ptrFloat;
 8002470:	f8c4 8008 	str.w	r8, [r4, #8]
				*((float*)&buffer) 		= var->value.floatValue;
 8002474:	f8cd 8018 	str.w	r8, [sp, #24]
				while (tries++ < MAX_TRIES) {
 8002478:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 800247c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800247e:	8862      	ldrh	r2, [r4, #2]
 8002480:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002484:	9700      	str	r7, [sp, #0]
 8002486:	2310      	movs	r3, #16
 8002488:	21a2      	movs	r1, #162	; 0xa2
 800248a:	6840      	ldr	r0, [r0, #4]
 800248c:	f003 fe36 	bl	80060fc <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 8002490:	2800      	cmp	r0, #0
 8002492:	f43f af5d 	beq.w	8002350 <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8002496:	f108 38ff 	add.w	r8, r8, #4294967295
 800249a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800249e:	d1ed      	bne.n	800247c <containerEeprom_reset+0x188>
 80024a0:	e795      	b.n	80023ce <containerEeprom_reset+0xda>
				*var->ptrDouble = var->defaultValue.doubleValue ? var->defaultValue.doubleValue : 0.0;
 80024a2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 80024a6:	2200      	movs	r2, #0
 80024a8:	2300      	movs	r3, #0
 80024aa:	4640      	mov	r0, r8
 80024ac:	4649      	mov	r1, r9
 80024ae:	f7fe fa7b 	bl	80009a8 <__aeabi_dcmpeq>
 80024b2:	b118      	cbz	r0, 80024bc <containerEeprom_reset+0x1c8>
 80024b4:	f04f 0800 	mov.w	r8, #0
 80024b8:	f04f 0900 	mov.w	r9, #0
 80024bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 80024be:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
				*var->ptrDouble = var->defaultValue.doubleValue ? var->defaultValue.doubleValue : 0.0;
 80024c2:	e9c3 8900 	strd	r8, r9, [r3]
				var->value.doubleValue 	= *var->ptrDouble;
 80024c6:	e9c4 8902 	strd	r8, r9, [r4, #8]
				*((double*)&buffer) 	= (double)*var->ptrDouble;
 80024ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
				while (tries++ < MAX_TRIES) {
 80024ce:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 80024d2:	f04f 0908 	mov.w	r9, #8
 80024d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80024d8:	8862      	ldrh	r2, [r4, #2]
 80024da:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 80024de:	9700      	str	r7, [sp, #0]
 80024e0:	2310      	movs	r3, #16
 80024e2:	21a2      	movs	r1, #162	; 0xa2
 80024e4:	6840      	ldr	r0, [r0, #4]
 80024e6:	f003 fe09 	bl	80060fc <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 80024ea:	2800      	cmp	r0, #0
 80024ec:	f43f af30 	beq.w	8002350 <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 80024f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80024f4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80024f8:	d1ed      	bne.n	80024d6 <containerEeprom_reset+0x1e2>
 80024fa:	e768      	b.n	80023ce <containerEeprom_reset+0xda>
			switch (var->typeVar) {
 80024fc:	252a      	movs	r5, #42	; 0x2a
 80024fe:	e767      	b.n	80023d0 <containerEeprom_reset+0xdc>
		return EEPROM_OBJETO_NULO;
 8002500:	2529      	movs	r5, #41	; 0x29
 8002502:	e765      	b.n	80023d0 <containerEeprom_reset+0xdc>
 8002504:	40010c00 	.word	0x40010c00

08002508 <reset_containerEeprom>:
void 				reset_containerEeprom(Eeprom *eeprom, TypeRestauracao resetType) {
 8002508:	b510      	push	{r4, lr}
 800250a:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_reset(eeprom, resetType);
 800250c:	f7ff fef2 	bl	80022f4 <containerEeprom_reset>
	if (errCode != EEPROM_SUCCESS) {
 8002510:	4601      	mov	r1, r0
 8002512:	b110      	cbz	r0, 800251a <reset_containerEeprom+0x12>
		eepromError_Handler(eeprom, errCode);
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fe21 	bl	800215c <eepromError_Handler>
}
 800251a:	bd10      	pop	{r4, pc}

0800251c <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

OUTPUT_ErrorCode OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 800251c:	b530      	push	{r4, r5, lr}
 800251e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8002522:	f8bd 4014 	ldrh.w	r4, [sp, #20]

	// Caso algum ponteiro seja nulo, retorne código de erro correspondente.
	if (Output == NULL || _individ == NULL || _portaOUT == NULL ) {
 8002526:	b108      	cbz	r0, 800252c <OutputAddDigital+0x10>
 8002528:	b101      	cbz	r1, 800252c <OutputAddDigital+0x10>
 800252a:	b90b      	cbnz	r3, 8002530 <OutputAddDigital+0x14>
  __ASM volatile ("cpsid i" : : : "memory");
 800252c:	b672      	cpsid	i
void outputError_Handler(OUTPUT_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800252e:	e7fe      	b.n	800252e <OutputAddDigital+0x12>
	if(limitOn && limitOff){
 8002530:	b115      	cbz	r5, 8002538 <OutputAddDigital+0x1c>
 8002532:	b10c      	cbz	r4, 8002538 <OutputAddDigital+0x1c>
 8002534:	b672      	cpsid	i
	while (1)
 8002536:	e7fe      	b.n	8002536 <OutputAddDigital+0x1a>
	_individ->GPIOx		= _portaOUT;	// porta a ser controlada.
 8002538:	604b      	str	r3, [r1, #4]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 800253a:	9b03      	ldr	r3, [sp, #12]
	_individ->GPIO_Pin	= _pinoOUT;		// pino a ser controlado.
 800253c:	800a      	strh	r2, [r1, #0]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 800253e:	614b      	str	r3, [r1, #20]
	_individ->limitOn 	= limitOn;		// se houver limite ligado.
 8002540:	81cd      	strh	r5, [r1, #14]
	_individ->limitOff 	= limitOff;		// se houver limite desligado.
 8002542:	820c      	strh	r4, [r1, #16]
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 8002544:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002548:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	Output->_DigitalCount++;
 800254c:	3301      	adds	r3, #1
 800254e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 8002552:	2000      	movs	r0, #0
 8002554:	bd30      	pop	{r4, r5, pc}

08002556 <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 8002556:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8002558:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 800255a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	6840      	ldr	r0, [r0, #4]
 8002560:	f003 fb22 	bl	8005ba8 <HAL_GPIO_WritePin>
	outPut->_state = on;
 8002564:	2301      	movs	r3, #1
 8002566:	7223      	strb	r3, [r4, #8]
}
 8002568:	bd10      	pop	{r4, pc}

0800256a <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 800256a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 800256c:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 800256e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	6840      	ldr	r0, [r0, #4]
 8002574:	f003 fb18 	bl	8005ba8 <HAL_GPIO_WritePin>
	outPut->_state = off;
 8002578:	2300      	movs	r3, #0
 800257a:	7223      	strb	r3, [r4, #8]
}
 800257c:	bd10      	pop	{r4, pc}

0800257e <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 800257e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002582:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 8002584:	4605      	mov	r5, r0
 8002586:	4626      	mov	r6, r4
 8002588:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800258c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8002590:	fa5f f884 	uxtb.w	r8, r4
 8002594:	4543      	cmp	r3, r8
 8002596:	d80b      	bhi.n	80025b0 <contadorOutput+0x32>
 8002598:	f04f 0a00 	mov.w	sl, #0
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 800259c:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 80025a0:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80025a4:	fa5f f38a 	uxtb.w	r3, sl
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d825      	bhi.n	80025f8 <contadorOutput+0x7a>
}
 80025ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 80025b0:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80025b4:	7a1a      	ldrb	r2, [r3, #8]
 80025b6:	2a01      	cmp	r2, #1
 80025b8:	d117      	bne.n	80025ea <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 80025ba:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 80025bc:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 80025be:	42ba      	cmp	r2, r7
 80025c0:	d001      	beq.n	80025c6 <contadorOutput+0x48>
 80025c2:	3201      	adds	r2, #1
 80025c4:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 80025c6:	89da      	ldrh	r2, [r3, #14]
 80025c8:	b122      	cbz	r2, 80025d4 <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 80025ca:	8959      	ldrh	r1, [r3, #10]
 80025cc:	4291      	cmp	r1, r2
 80025ce:	d301      	bcc.n	80025d4 <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 80025d4:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 80025d8:	8a1a      	ldrh	r2, [r3, #16]
 80025da:	b122      	cbz	r2, 80025e6 <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 80025dc:	8999      	ldrh	r1, [r3, #12]
 80025de:	4291      	cmp	r1, r2
 80025e0:	d301      	bcc.n	80025e6 <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 80025e6:	3401      	adds	r4, #1
 80025e8:	e7d0      	b.n	800258c <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80025ea:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 80025ec:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 80025ee:	42ba      	cmp	r2, r7
 80025f0:	bf1c      	itt	ne
 80025f2:	3201      	addne	r2, #1
 80025f4:	819a      	strhne	r2, [r3, #12]
 80025f6:	e7e6      	b.n	80025c6 <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 80025f8:	3306      	adds	r3, #6
 80025fa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 80025fe:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 8002602:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 8002606:	4640      	mov	r0, r8
 8002608:	4632      	mov	r2, r6
 800260a:	463b      	mov	r3, r7
 800260c:	4649      	mov	r1, r9
 800260e:	f7fe f9e9 	bl	80009e4 <__aeabi_dcmpge>
 8002612:	bb08      	cbnz	r0, 8002658 <contadorOutput+0xda>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 8002614:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 8002616:	f7fd fef5 	bl	8000404 <__aeabi_i2d>
 800261a:	4642      	mov	r2, r8
 800261c:	464b      	mov	r3, r9
 800261e:	f7fd fda5 	bl	800016c <__adddf3>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4630      	mov	r0, r6
 8002628:	4639      	mov	r1, r7
 800262a:	f7fe f9c7 	bl	80009bc <__aeabi_dcmplt>
 800262e:	b1c8      	cbz	r0, 8002664 <contadorOutput+0xe6>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8002630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002634:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002636:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 800263a:	4293      	cmp	r3, r2
 800263c:	d001      	beq.n	8002642 <contadorOutput+0xc4>
 800263e:	3301      	adds	r3, #1
 8002640:	87e3      	strh	r3, [r4, #62]	; 0x3e
		if(Output->_OutPidArr[i]->limiteOn != 0){
 8002642:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8002646:	b123      	cbz	r3, 8002652 <contadorOutput+0xd4>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 8002648:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800264a:	429a      	cmp	r2, r3
 800264c:	d301      	bcc.n	8002652 <contadorOutput+0xd4>
				Output->_OutPidArr[i]->timeOut();//chama callback de timeout
 800264e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002650:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8002652:	f10a 0a01 	add.w	sl, sl, #1
 8002656:	e7a3      	b.n	80025a0 <contadorOutput+0x22>
 8002658:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 800265a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			Output->_OutPidArr[i]->timeOn=0;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e7ed      	b.n	8002640 <contadorOutput+0xc2>
 8002664:	2301      	movs	r3, #1
 8002666:	e7f8      	b.n	800265a <contadorOutput+0xdc>

08002668 <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 8002668:	b5d0      	push	{r4, r6, r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	4604      	mov	r4, r0
 800266e:	461f      	mov	r7, r3
 8002670:	4616      	mov	r6, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002672:	2100      	movs	r1, #0
 8002674:	2214      	movs	r2, #20
 8002676:	a803      	add	r0, sp, #12
 8002678:	f008 f9ce 	bl	800aa18 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800267c:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800267e:	4639      	mov	r1, r7
 8002680:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002682:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002684:	f7fe f9c2 	bl	8000a0c <__aeabi_d2uiz>
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002688:	6862      	ldr	r2, [r4, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800268a:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 800268c:	a901      	add	r1, sp, #4
 800268e:	6820      	ldr	r0, [r4, #0]
 8002690:	f004 fee2 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002694:	b108      	cbz	r0, 800269a <IndviduoPID_SetPWMValue+0x32>
 8002696:	b672      	cpsid	i
	while (1)
 8002698:	e7fe      	b.n	8002698 <IndviduoPID_SetPWMValue+0x30>
	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 800269a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800269e:	f005 f835 	bl	800770c <HAL_TIM_PWM_Start>
 80026a2:	b108      	cbz	r0, 80026a8 <IndviduoPID_SetPWMValue+0x40>
 80026a4:	b672      	cpsid	i
	while (1)
 80026a6:	e7fe      	b.n	80026a6 <IndviduoPID_SetPWMValue+0x3e>
}
 80026a8:	b008      	add	sp, #32
 80026aa:	bdd0      	pop	{r4, r6, r7, pc}

080026ac <OutputAddPID>:
		uint16_t limit_on,void (*callback)()){
 80026ac:	b508      	push	{r3, lr}
	if (Output == NULL || _individ == NULL || htim == NULL ) {
 80026ae:	b108      	cbz	r0, 80026b4 <OutputAddPID+0x8>
 80026b0:	b101      	cbz	r1, 80026b4 <OutputAddPID+0x8>
 80026b2:	b90a      	cbnz	r2, 80026b8 <OutputAddPID+0xc>
 80026b4:	b672      	cpsid	i
	while (1)
 80026b6:	e7fe      	b.n	80026b6 <OutputAddPID+0xa>
	_individ->Channel   = Channel;	// channel do timer.
 80026b8:	e9c1 2300 	strd	r2, r3, [r1]
	_individ->kp	= Kp;
 80026bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80026c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 80026c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80026c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 80026cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80026d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;// histerese dada em graus.
 80026d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80026d8:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;	// callback caso extrapole tempo de acionamento.
 80026da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026dc:	644b      	str	r3, [r1, #68]	; 0x44
	Output->_OutPidArr[Output->_PidCount] = _individ;
 80026de:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80026e2:	1d9a      	adds	r2, r3, #6
	Output->_PidCount++;
 80026e4:	3301      	adds	r3, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 80026e6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	Output->_PidCount++;
 80026ea:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	IndviduoPID_SetPWMValue(_individ, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	4608      	mov	r0, r1
 80026f2:	2300      	movs	r3, #0
 80026f4:	f7ff ffb8 	bl	8002668 <IndviduoPID_SetPWMValue>
}
 80026f8:	2000      	movs	r0, #0
 80026fa:	bd08      	pop	{r3, pc}

080026fc <IndviduoPID_SetPWMValueDirect>:
	volatile uint32_t *ccrAddress = &pid->TimHandle->Instance->CCR1 + (pid->Channel >> 2);
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	6842      	ldr	r2, [r0, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0892      	lsrs	r2, r2, #2
 8002704:	3334      	adds	r3, #52	; 0x34
	*ccrAddress = pwmValue;
 8002706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800270a:	4770      	bx	lr

0800270c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <vApplicationGetIdleTaskMemory+0x10>)
 800270e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <vApplicationGetIdleTaskMemory+0x14>)
 8002712:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000290 	.word	0x20000290
 8002720:	20000090 	.word	0x20000090

08002724 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <vApplicationGetTimerTaskMemory+0x10>)
 8002726:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <vApplicationGetTimerTaskMemory+0x14>)
 800272a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800272c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002730:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002732:	4770      	bx	lr
 8002734:	20000730 	.word	0x20000730
 8002738:	20000330 	.word	0x20000330

0800273c <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 800273c:	b510      	push	{r4, lr}
	//callback apontada no OutPut dos canais de aquecimento
	//essa funcao é chamada no momento que a contagem atinge seu limite

	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5){
 800273e:	4c14      	ldr	r4, [pc, #80]	; (8002790 <timeoutAquecimento+0x54>)
 8002740:	2200      	movs	r2, #0
 8002742:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <timeoutAquecimento+0x58>)
 8002748:	f7fd fd0e 	bl	8000168 <__aeabi_dsub>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8002754:	f7fe f932 	bl	80009bc <__aeabi_dcmplt>
 8002758:	b128      	cbz	r0, 8002766 <timeoutAquecimento+0x2a>
		//todo incluir no buffer erros
		PrimitiveStates.Erro.bit.IdleLastro=1;
 800275a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	}

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5){
 8002766:	2200      	movs	r2, #0
 8002768:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
 800276c:	4b09      	ldr	r3, [pc, #36]	; (8002794 <timeoutAquecimento+0x58>)
 800276e:	f7fd fcfb 	bl	8000168 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 800277a:	f7fe f91f 	bl	80009bc <__aeabi_dcmplt>
 800277e:	b128      	cbz	r0, 800278c <timeoutAquecimento+0x50>
		//todo incluir no buffer erros
		PrimitiveStates.Erro.bit.IdleTeto=1;
 8002780:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	}
}
 800278c:	bd10      	pop	{r4, pc}
 800278e:	bf00      	nop
 8002790:	200007e8 	.word	0x200007e8
 8002794:	40140000 	.word	0x40140000

08002798 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 8002798:	4801      	ldr	r0, [pc, #4]	; (80027a0 <timeoutDesligaLampada+0x8>)
 800279a:	f7ff bee6 	b.w	800256a <offDigital>
 800279e:	bf00      	nop
 80027a0:	200007e8 	.word	0x200007e8

080027a4 <CBTimer100ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer100ms function */
void CBTimer100ms(void const * argument)
{
 80027a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CBTimer100ms */
	static TypeMaquinaConexao LocalMaquinaConexao;

	bluetoothActivitymonitor(&bluetooth);
 80027a6:	4c0c      	ldr	r4, [pc, #48]	; (80027d8 <CBTimer100ms+0x34>)
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe fc8a 	bl	80010c2 <bluetoothActivitymonitor>

	//sinal sonoro e luminosos de conexao
	if (LocalMaquinaConexao != bluetooth.MaquinaConexao) {
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <CBTimer100ms+0x38>)
 80027b0:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80027b4:	7811      	ldrb	r1, [r2, #0]
 80027b6:	4299      	cmp	r1, r3
 80027b8:	d00c      	beq.n	80027d4 <CBTimer100ms+0x30>
		LocalMaquinaConexao = bluetooth.MaquinaConexao;
 80027ba:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80027be:	b2db      	uxtb	r3, r3
		if(LocalMaquinaConexao == RX_VALIDADO){
 80027c0:	2b03      	cmp	r3, #3
		LocalMaquinaConexao = bluetooth.MaquinaConexao;
 80027c2:	7013      	strb	r3, [r2, #0]
		if(LocalMaquinaConexao == RX_VALIDADO){
 80027c4:	d106      	bne.n	80027d4 <CBTimer100ms+0x30>
			osSignalSet(TaskBuzzerHandle, SINAL_CONECTOU);
		}
	}
  /* USER CODE END CBTimer100ms */
}
 80027c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osSignalSet(TaskBuzzerHandle, SINAL_CONECTOU);
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <CBTimer100ms+0x3c>)
 80027cc:	2110      	movs	r1, #16
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	f005 bd07 	b.w	80081e2 <osSignalSet>
}
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	200012ec 	.word	0x200012ec
 80027dc:	200007e4 	.word	0x200007e4
 80027e0:	2000103c 	.word	0x2000103c

080027e4 <desligaForno>:
	PrimitiveStates.SPTimerMinutos 	= 0;
 80027e4:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 80027e6:	2000      	movs	r0, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <desligaForno+0x20>)
 80027ec:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
	PrimitiveStates.Teto.setPoint 	= 0;
 80027f0:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
	PrimitiveStates.SPTimerMinutos 	= 0;
 80027f4:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	PrimitiveStates.SPTimerSegundos = 0;
 80027f8:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	PrimitiveStates.RTTimerSegundos = 0;
 80027fc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	200007e8 	.word	0x200007e8

08002808 <controleCooler>:
void controleCooler(void){
 8002808:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>ON_FAN_TEMPERATURA || PrimitiveStates.Teto.realtime>ON_FAN_TEMPERATURA){
 800280c:	4c1a      	ldr	r4, [pc, #104]	; (8002878 <controleCooler+0x70>)
 800280e:	2200      	movs	r2, #0
 8002810:	e9d4 893a 	ldrd	r8, r9, [r4, #232]	; 0xe8
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <controleCooler+0x74>)
 8002816:	4640      	mov	r0, r8
 8002818:	4649      	mov	r1, r9
 800281a:	f7fe f8ed 	bl	80009f8 <__aeabi_dcmpgt>
 800281e:	b940      	cbnz	r0, 8002832 <controleCooler+0x2a>
 8002820:	e9d4 6728 	ldrd	r6, r7, [r4, #160]	; 0xa0
 8002824:	2200      	movs	r2, #0
 8002826:	4630      	mov	r0, r6
 8002828:	4639      	mov	r1, r7
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <controleCooler+0x74>)
 800282c:	f7fe f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 8002830:	b120      	cbz	r0, 800283c <controleCooler+0x34>
}
 8002832:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 8002836:	4812      	ldr	r0, [pc, #72]	; (8002880 <controleCooler+0x78>)
 8002838:	f7ff be8d 	b.w	8002556 <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<ON_FAN_TEMPERATURA-5 && PrimitiveStates.Teto.realtime<ON_FAN_TEMPERATURA-5){
 800283c:	4640      	mov	r0, r8
 800283e:	a30c      	add	r3, pc, #48	; (adr r3, 8002870 <controleCooler+0x68>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	4649      	mov	r1, r9
 8002846:	f7fe f8b9 	bl	80009bc <__aeabi_dcmplt>
 800284a:	b168      	cbz	r0, 8002868 <controleCooler+0x60>
 800284c:	a308      	add	r3, pc, #32	; (adr r3, 8002870 <controleCooler+0x68>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	4630      	mov	r0, r6
 8002854:	4639      	mov	r1, r7
 8002856:	f7fe f8b1 	bl	80009bc <__aeabi_dcmplt>
 800285a:	b128      	cbz	r0, 8002868 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 800285c:	f104 0018 	add.w	r0, r4, #24
}
 8002860:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 8002864:	f7ff be81 	b.w	800256a <offDigital>
}
 8002868:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800286c:	f3af 8000 	nop.w
 8002870:	00000000 	.word	0x00000000
 8002874:	40686000 	.word	0x40686000
 8002878:	200007e8 	.word	0x200007e8
 800287c:	40690000 	.word	0x40690000
 8002880:	20000800 	.word	0x20000800

08002884 <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CBTimer1000ms */
	bluetooth1000ms(&bluetooth);
 8002886:	480a      	ldr	r0, [pc, #40]	; (80028b0 <CBTimer1000ms+0x2c>)
 8002888:	f7fe fc04 	bl	8001094 <bluetooth1000ms>
	taskTemperatura1sec();
 800288c:	f002 fb72 	bl	8004f74 <taskTemperatura1sec>
	taskBluetooth1sec();
 8002890:	f001 fa44 	bl	8003d1c <taskBluetooth1sec>
	controleCooler();
 8002894:	f7ff ffb8 	bl	8002808 <controleCooler>

	//contadores de todas as saidas digitais
	contadorOutput(&outPuts);
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <CBTimer1000ms+0x30>)
 800289a:	f7ff fe70 	bl	800257e <contadorOutput>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <CBTimer1000ms+0x34>)
 80028a0:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80028a4:	b11b      	cbz	r3, 80028ae <CBTimer1000ms+0x2a>
		desligaForno();
	}
  /* USER CODE END CBTimer1000ms */
}
 80028a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		desligaForno();
 80028aa:	f7ff bf9b 	b.w	80027e4 <desligaForno>
}
 80028ae:	bd08      	pop	{r3, pc}
 80028b0:	200012ec 	.word	0x200012ec
 80028b4:	20001640 	.word	0x20001640
 80028b8:	200007e8 	.word	0x200007e8

080028bc <HAL_ADC_ConvCpltCallback>:
{
 80028bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 80028c0:	4e24      	ldr	r6, [pc, #144]	; (8002954 <HAL_ADC_ConvCpltCallback+0x98>)
		somatorio1+=buffer_ADC[1]; // somatorio
 80028c2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002958 <HAL_ADC_ConvCpltCallback+0x9c>
	if(i<TAM){
 80028c6:	8834      	ldrh	r4, [r6, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80028c8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800295c <HAL_ADC_ConvCpltCallback+0xa0>
	if(i<TAM){
 80028cc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 80028d0:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 80028d4:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 80028d8:	d20d      	bcs.n	80028f6 <HAL_ADC_ConvCpltCallback+0x3a>
		somatorio1+=buffer_ADC[1]; // somatorio
 80028da:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_ADC_ConvCpltCallback+0xa4>)
		i++;
 80028dc:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 80028de:	6853      	ldr	r3, [r2, #4]
		i++;
 80028e0:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 80028e2:	4403      	add	r3, r0
 80028e4:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	442b      	add	r3, r5
 80028ec:	f8c8 3000 	str.w	r3, [r8]
		i++;
 80028f0:	8034      	strh	r4, [r6, #0]
}
 80028f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 80028f6:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 80028fa:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 80028fe:	0100      	lsls	r0, r0, #4
 8002900:	f7fe f9ae 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 8002904:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 8002908:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 800290a:	4607      	mov	r7, r0
		Temp2 = somatorio2*16; 	//calc valor final
 800290c:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 800290e:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 8002912:	f7fe f9a5 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 8002916:	4913      	ldr	r1, [pc, #76]	; (8002964 <HAL_ADC_ConvCpltCallback+0xa8>)
		Temp2 = somatorio2*16; 	//calc valor final
 8002918:	4605      	mov	r5, r0
		somatorio2 = 0; 		//zera somatorio
 800291a:	f8c8 4000 	str.w	r4, [r8]
		Temp1 = Temp1/100;
 800291e:	4638      	mov	r0, r7
 8002920:	f7fe faa6 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp1;
 8002924:	f7fd fd80 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 8002928:	2200      	movs	r2, #0
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_ADC_ConvCpltCallback+0xac>)
 800292c:	f7fd fc1c 	bl	8000168 <__aeabi_dsub>
 8002930:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800296c <HAL_ADC_ConvCpltCallback+0xb0>
 8002934:	e9c8 0128 	strd	r0, r1, [r8, #160]	; 0xa0
		Temp2 = Temp2/100;
 8002938:	490a      	ldr	r1, [pc, #40]	; (8002964 <HAL_ADC_ConvCpltCallback+0xa8>)
 800293a:	4628      	mov	r0, r5
 800293c:	f7fe fa98 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp2;
 8002940:	f7fd fd72 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 8002944:	2200      	movs	r2, #0
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_ADC_ConvCpltCallback+0xac>)
 8002948:	f7fd fc0e 	bl	8000168 <__aeabi_dsub>
 800294c:	e9c8 013a 	strd	r0, r1, [r8, #232]	; 0xe8
		i=0;
 8002950:	e7ce      	b.n	80028f0 <HAL_ADC_ConvCpltCallback+0x34>
 8002952:	bf00      	nop
 8002954:	2000163c 	.word	0x2000163c
 8002958:	2000166c 	.word	0x2000166c
 800295c:	20001670 	.word	0x20001670
 8002960:	200013ac 	.word	0x200013ac
 8002964:	42c80000 	.word	0x42c80000
 8002968:	40410000 	.word	0x40410000
 800296c:	200007e8 	.word	0x200007e8

08002970 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	4b03      	ldr	r3, [pc, #12]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002974:	429a      	cmp	r2, r3
 8002976:	d101      	bne.n	800297c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002978:	f002 bb84 	b.w	8005084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00

08002984 <Error_Handler>:
 8002984:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 8002986:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800298a:	4905      	ldr	r1, [pc, #20]	; (80029a0 <Error_Handler+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <Error_Handler+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800298e:	68ca      	ldr	r2, [r1, #12]
 8002990:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002994:	4313      	orrs	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	f3bf 8f4f 	dsb	sy
    __NOP();
 800299c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800299e:	e7fd      	b.n	800299c <Error_Handler+0x18>
 80029a0:	e000ed00 	.word	0xe000ed00
 80029a4:	05fa0004 	.word	0x05fa0004

080029a8 <SystemClock_Config>:
{
 80029a8:	b530      	push	{r4, r5, lr}
 80029aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ac:	2220      	movs	r2, #32
 80029ae:	2100      	movs	r1, #0
 80029b0:	a80b      	add	r0, sp, #44	; 0x2c
 80029b2:	f008 f831 	bl	800aa18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b6:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b8:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029ba:	2100      	movs	r1, #0
 80029bc:	eb0d 0002 	add.w	r0, sp, r2
 80029c0:	f008 f82a 	bl	800aa18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c4:	462a      	mov	r2, r5
 80029c6:	2100      	movs	r1, #0
 80029c8:	a801      	add	r0, sp, #4
 80029ca:	f008 f825 	bl	800aa18 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ce:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029d0:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d2:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029d6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d8:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80029da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029de:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029e0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e2:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 80029e4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e6:	f003 fe0d 	bl	8006604 <HAL_RCC_OscConfig>
 80029ea:	b108      	cbz	r0, 80029f0 <SystemClock_Config+0x48>
    Error_Handler();
 80029ec:	f7ff ffca 	bl	8002984 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f2:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fa:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fc:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a00:	4621      	mov	r1, r4
 8002a02:	a805      	add	r0, sp, #20
 8002a04:	f003 ffc0 	bl	8006988 <HAL_RCC_ClockConfig>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d1ef      	bne.n	80029ec <SystemClock_Config+0x44>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	2203      	movs	r2, #3
 8002a12:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002a16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a1a:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002a1c:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a1e:	f004 f88d 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8002a22:	2800      	cmp	r0, #0
 8002a24:	d1e2      	bne.n	80029ec <SystemClock_Config+0x44>
}
 8002a26:	b015      	add	sp, #84	; 0x54
 8002a28:	bd30      	pop	{r4, r5, pc}
 8002a2a:	0000      	movs	r0, r0
 8002a2c:	0000      	movs	r0, r0
	...

08002a30 <main>:
{
 8002a30:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	2710      	movs	r7, #16
{
 8002a36:	b0bb      	sub	sp, #236	; 0xec
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a38:	4d4c      	ldr	r5, [pc, #304]	; (8002b6c <main+0x13c>)
  HAL_Init();
 8002a3a:	f002 fb11 	bl	8005060 <HAL_Init>
  SystemClock_Config();
 8002a3e:	f7ff ffb3 	bl	80029a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	463a      	mov	r2, r7
 8002a44:	2100      	movs	r1, #0
 8002a46:	a833      	add	r0, sp, #204	; 0xcc
 8002a48:	f007 ffe6 	bl	800aa18 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002a4e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	61ab      	str	r3, [r5, #24]
 8002a56:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002a58:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002a66:	4842      	ldr	r0, [pc, #264]	; (8002b70 <main+0x140>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a68:	f043 0308 	orr.w	r3, r3, #8
 8002a6c:	61ab      	str	r3, [r5, #24]
 8002a6e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a70:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	930c      	str	r3, [sp, #48]	; 0x30
 8002a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002a7a:	f003 f895 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a84:	483b      	ldr	r0, [pc, #236]	; (8002b74 <main+0x144>)
 8002a86:	f003 f88f 	bl	8005ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	21f8      	movs	r1, #248	; 0xf8
 8002a8e:	4838      	ldr	r0, [pc, #224]	; (8002b70 <main+0x140>)
 8002a90:	f003 f88a 	bl	8005ba8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a94:	f04f 0801 	mov.w	r8, #1
 8002a98:	f246 0378 	movw	r3, #24696	; 0x6078
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9c:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aa0:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002aa4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	4831      	ldr	r0, [pc, #196]	; (8002b70 <main+0x140>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aaa:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8002b78 <main+0x148>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	a933      	add	r1, sp, #204	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	e9cd 3833 	strd	r3, r8, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	e9cd 4935 	strd	r4, r9, [sp, #212]	; 0xd4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f002 ff28 	bl	800590c <HAL_GPIO_Init>
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002abc:	482c      	ldr	r0, [pc, #176]	; (8002b70 <main+0x140>)
 8002abe:	a933      	add	r1, sp, #204	; 0xcc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	9435      	str	r4, [sp, #212]	; 0xd4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac2:	e9cd ab33 	strd	sl, fp, [sp, #204]	; 0xcc
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	f002 ff21 	bl	800590c <HAL_GPIO_Init>
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002aca:	482a      	ldr	r0, [pc, #168]	; (8002b74 <main+0x144>)
 8002acc:	a933      	add	r1, sp, #204	; 0xcc
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	9435      	str	r4, [sp, #212]	; 0xd4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ad0:	e9cd 6b33 	strd	r6, fp, [sp, #204]	; 0xcc
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002ad4:	f002 ff1a 	bl	800590c <HAL_GPIO_Init>
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002ad8:	4826      	ldr	r0, [pc, #152]	; (8002b74 <main+0x144>)
 8002ada:	a933      	add	r1, sp, #204	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	e9cd 4935 	strd	r4, r9, [sp, #212]	; 0xd4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae0:	e9cd a833 	strd	sl, r8, [sp, #204]	; 0xcc
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f002 ff12 	bl	800590c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002ae8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002aea:	4821      	ldr	r0, [pc, #132]	; (8002b70 <main+0x140>)
 8002aec:	a933      	add	r1, sp, #204	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aee:	e9cd 3833 	strd	r3, r8, [sp, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	e9cd 9935 	strd	r9, r9, [sp, #212]	; 0xd4
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002af6:	f002 ff09 	bl	800590c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afa:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002afc:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002afe:	ea43 0308 	orr.w	r3, r3, r8
 8002b02:	616b      	str	r3, [r5, #20]
 8002b04:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002b06:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b08:	ea03 0308 	and.w	r3, r3, r8
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002b0c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b0e:	930a      	str	r3, [sp, #40]	; 0x28
 8002b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002b12:	f002 fd15 	bl	8005540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b16:	200b      	movs	r0, #11
 8002b18:	f002 fd42 	bl	80055a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	2105      	movs	r1, #5
 8002b20:	200d      	movs	r0, #13
 8002b22:	f002 fd0d 	bl	8005540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002b26:	200d      	movs	r0, #13
 8002b28:	f002 fd3a 	bl	80055a0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	2105      	movs	r1, #5
 8002b30:	200f      	movs	r0, #15
 8002b32:	f002 fd05 	bl	8005540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002b36:	200f      	movs	r0, #15
 8002b38:	f002 fd32 	bl	80055a0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8002b3c:	4d0f      	ldr	r5, [pc, #60]	; (8002b7c <main+0x14c>)
 8002b3e:	4b10      	ldr	r3, [pc, #64]	; (8002b80 <main+0x150>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b40:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  hadc1.Instance = ADC1;
 8002b44:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b46:	f44f 7380 	mov.w	r3, #256	; 0x100
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b4a:	9419      	str	r4, [sp, #100]	; 0x64
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b4c:	60ab      	str	r3, [r5, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b4e:	752c      	strb	r4, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b50:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b54:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002b56:	2403      	movs	r4, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b58:	4628      	mov	r0, r5
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b5a:	f885 800c 	strb.w	r8, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b5e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.NbrOfConversion = 3;
 8002b60:	612c      	str	r4, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b62:	f002 fc5d 	bl	8005420 <HAL_ADC_Init>
 8002b66:	b168      	cbz	r0, 8002b84 <main+0x154>
    Error_Handler();
 8002b68:	f7ff ff0c 	bl	8002984 <Error_Handler>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40010c00 	.word	0x40010c00
 8002b74:	40010800 	.word	0x40010800
 8002b78:	10110000 	.word	0x10110000
 8002b7c:	200013b8 	.word	0x200013b8
 8002b80:	40012400 	.word	0x40012400
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002b84:	2306      	movs	r3, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b86:	e9cd 0817 	strd	r0, r8, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b8a:	a917      	add	r1, sp, #92	; 0x5c
 8002b8c:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002b8e:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b90:	f002 fad8 	bl	8005144 <HAL_ADC_ConfigChannel>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	d1e7      	bne.n	8002b68 <main+0x138>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b98:	4628      	mov	r0, r5
 8002b9a:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b9c:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba0:	f002 fad0 	bl	8005144 <HAL_ADC_ConfigChannel>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d1df      	bne.n	8002b68 <main+0x138>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba8:	4628      	mov	r0, r5
 8002baa:	a917      	add	r1, sp, #92	; 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002bac:	e9cd 7417 	strd	r7, r4, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb0:	f002 fac8 	bl	8005144 <HAL_ADC_ConfigChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2800      	cmp	r0, #0
 8002bb8:	d1d6      	bne.n	8002b68 <main+0x138>
  hi2c1.Instance = I2C1;
 8002bba:	48c1      	ldr	r0, [pc, #772]	; (8002ec0 <main+0x490>)
  hi2c1.Init.ClockSpeed = 100000;
 8002bbc:	f8df c304 	ldr.w	ip, [pc, #772]	; 8002ec4 <main+0x494>
 8002bc0:	4ac1      	ldr	r2, [pc, #772]	; (8002ec8 <main+0x498>)
  hi2c1.Init.OwnAddress1 = 0;
 8002bc2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002bc6:	e9c0 c200 	strd	ip, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bce:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bd8:	f003 f9e8 	bl	8005fac <HAL_I2C_Init>
 8002bdc:	4605      	mov	r5, r0
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d1c2      	bne.n	8002b68 <main+0x138>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002be2:	463a      	mov	r2, r7
 8002be4:	4601      	mov	r1, r0
 8002be6:	a825      	add	r0, sp, #148	; 0x94
 8002be8:	f007 ff16 	bl	800aa18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bec:	221c      	movs	r2, #28
 8002bee:	4629      	mov	r1, r5
 8002bf0:	a833      	add	r0, sp, #204	; 0xcc
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf2:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bf6:	f007 ff0f 	bl	800aa18 <memset>
  htim3.Init.Prescaler = 4000-1;
 8002bfa:	f640 739f 	movw	r3, #3999	; 0xf9f
  htim3.Instance = TIM3;
 8002bfe:	4cb3      	ldr	r4, [pc, #716]	; (8002ecc <main+0x49c>)
  htim3.Init.Prescaler = 4000-1;
 8002c00:	4fb3      	ldr	r7, [pc, #716]	; (8002ed0 <main+0x4a0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c02:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 4000-1;
 8002c04:	e9c4 7300 	strd	r7, r3, [r4]
  htim3.Init.Period = 100-1;
 8002c08:	2363      	movs	r3, #99	; 0x63
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0a:	60a5      	str	r5, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c0c:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c10:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c12:	f004 fb9d 	bl	8007350 <HAL_TIM_Base_Init>
 8002c16:	2800      	cmp	r0, #0
 8002c18:	d1a6      	bne.n	8002b68 <main+0x138>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	a925      	add	r1, sp, #148	; 0x94
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1e:	9625      	str	r6, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c20:	f004 fc7d 	bl	800751e <HAL_TIM_ConfigClockSource>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	d19f      	bne.n	8002b68 <main+0x138>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f004 fbbd 	bl	80073a8 <HAL_TIM_PWM_Init>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d19a      	bne.n	8002b68 <main+0x138>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c32:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c36:	a913      	add	r1, sp, #76	; 0x4c
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f004 fda5 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d191      	bne.n	8002b68 <main+0x138>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c44:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002c46:	e9cd 3033 	strd	r3, r0, [sp, #204]	; 0xcc
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c4a:	2304      	movs	r3, #4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c4c:	9035      	str	r0, [sp, #212]	; 0xd4
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c4e:	a933      	add	r1, sp, #204	; 0xcc
 8002c50:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002c52:	9337      	str	r3, [sp, #220]	; 0xdc
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c54:	f004 fc00 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002c58:	2800      	cmp	r0, #0
 8002c5a:	d185      	bne.n	8002b68 <main+0x138>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	4620      	mov	r0, r4
 8002c60:	a933      	add	r1, sp, #204	; 0xcc
 8002c62:	f004 fbf9 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002c66:	2800      	cmp	r0, #0
 8002c68:	f47f af7e 	bne.w	8002b68 <main+0x138>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4620      	mov	r0, r4
 8002c70:	a933      	add	r1, sp, #204	; 0xcc
 8002c72:	f004 fbf1 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002c76:	2800      	cmp	r0, #0
 8002c78:	f47f af76 	bne.w	8002b68 <main+0x138>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4620      	mov	r0, r4
 8002c80:	a933      	add	r1, sp, #204	; 0xcc
 8002c82:	f004 fbe9 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002c86:	4605      	mov	r5, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	f47f af6d 	bne.w	8002b68 <main+0x138>
  HAL_TIM_MspPostInit(&htim3);
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f000 fd98 	bl	80037c4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c94:	2210      	movs	r2, #16
 8002c96:	4629      	mov	r1, r5
 8002c98:	a81e      	add	r0, sp, #120	; 0x78
 8002c9a:	f007 febd 	bl	800aa18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c9e:	221c      	movs	r2, #28
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	a82c      	add	r0, sp, #176	; 0xb0
  htim2.Init.Prescaler = 165-1;
 8002ca4:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ca8:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cac:	f007 feb4 	bl	800aa18 <memset>
  htim2.Init.Prescaler = 165-1;
 8002cb0:	23a4      	movs	r3, #164	; 0xa4
  htim2.Instance = TIM2;
 8002cb2:	4c88      	ldr	r4, [pc, #544]	; (8002ed4 <main+0x4a4>)
  htim2.Init.Prescaler = 165-1;
 8002cb4:	e9c4 6300 	strd	r6, r3, [r4]
  htim2.Init.Period = 100-1;
 8002cb8:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cba:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc2:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cc4:	f004 fb44 	bl	8007350 <HAL_TIM_Base_Init>
 8002cc8:	2800      	cmp	r0, #0
 8002cca:	f47f af4d 	bne.w	8002b68 <main+0x138>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	a91e      	add	r1, sp, #120	; 0x78
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd6:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cd8:	f004 fc21 	bl	800751e <HAL_TIM_ConfigClockSource>
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	f47f af43 	bne.w	8002b68 <main+0x138>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f004 fb60 	bl	80073a8 <HAL_TIM_PWM_Init>
 8002ce8:	2800      	cmp	r0, #0
 8002cea:	f47f af3d 	bne.w	8002b68 <main+0x138>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cf2:	a911      	add	r1, sp, #68	; 0x44
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f004 fd47 	bl	8007788 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	f47f af34 	bne.w	8002b68 <main+0x138>
  sConfigOC.Pulse = 50;
 8002d00:	2560      	movs	r5, #96	; 0x60
 8002d02:	2332      	movs	r3, #50	; 0x32
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d04:	902e      	str	r0, [sp, #184]	; 0xb8
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d06:	9030      	str	r0, [sp, #192]	; 0xc0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d08:	220c      	movs	r2, #12
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	a92c      	add	r1, sp, #176	; 0xb0
  sConfigOC.Pulse = 50;
 8002d0e:	e9cd 532c 	strd	r5, r3, [sp, #176]	; 0xb0
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d12:	f004 fba1 	bl	8007458 <HAL_TIM_PWM_ConfigChannel>
 8002d16:	4605      	mov	r5, r0
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f47f af25 	bne.w	8002b68 <main+0x138>
  HAL_TIM_MspPostInit(&htim2);
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f000 fd50 	bl	80037c4 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8002d24:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8002d28:	486b      	ldr	r0, [pc, #428]	; (8002ed8 <main+0x4a8>)
  huart1.Init.BaudRate = 9600;
 8002d2a:	4c6c      	ldr	r4, [pc, #432]	; (8002edc <main+0x4ac>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8002d30:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d34:	240c      	movs	r4, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d36:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d38:	e9c0 4505 	strd	r4, r5, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d3c:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d3e:	f004 fdf1 	bl	8007924 <HAL_UART_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2800      	cmp	r0, #0
 8002d46:	f47f af0f 	bne.w	8002b68 <main+0x138>
  huart3.Init.BaudRate = 115200;
 8002d4a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 8002d4e:	4864      	ldr	r0, [pc, #400]	; (8002ee0 <main+0x4b0>)
  huart3.Init.BaudRate = 115200;
 8002d50:	4964      	ldr	r1, [pc, #400]	; (8002ee4 <main+0x4b4>)
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d52:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8002d56:	e9c0 1200 	strd	r1, r2, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d5a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d62:	f004 fddf 	bl	8007924 <HAL_UART_Init>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	f47f aefe 	bne.w	8002b68 <main+0x138>
  RTC_TimeTypeDef sTime = {0};
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8002d72:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  RTC_DateTypeDef DateToUpdate = {0};
 8002d76:	930f      	str	r3, [sp, #60]	; 0x3c
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
  hrtc.Instance = RTC;
 8002d7c:	4c5a      	ldr	r4, [pc, #360]	; (8002ee8 <main+0x4b8>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	; (8002eec <main+0x4bc>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d80:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002d82:	e9c4 2300 	strd	r2, r3, [r4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8a:	60a3      	str	r3, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d8c:	f004 f91a 	bl	8006fc4 <HAL_RTC_Init>
 8002d90:	2800      	cmp	r0, #0
 8002d92:	f47f aee9 	bne.w	8002b68 <main+0x138>
  sTime.Hours = 0x0;
 8002d96:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
  sTime.Seconds = 0x0;
 8002d9a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4620      	mov	r0, r4
 8002da2:	a90d      	add	r1, sp, #52	; 0x34
 8002da4:	f004 f84b 	bl	8006e3e <HAL_RTC_SetTime>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	f47f aedd 	bne.w	8002b68 <main+0x138>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <main+0x4c0>)
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002db0:	4620      	mov	r0, r4
 8002db2:	2201      	movs	r2, #1
 8002db4:	a90f      	add	r1, sp, #60	; 0x3c
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002db6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002db8:	f004 f892 	bl	8006ee0 <HAL_RTC_SetDate>
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	2800      	cmp	r0, #0
 8002dc0:	f47f aed2 	bne.w	8002b68 <main+0x138>
	OutputAddPID	(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002dc4:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 8002dc8:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002dcc:	a73a      	add	r7, pc, #232	; (adr r7, 8002eb8 <main+0x488>)
 8002dce:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Delay(1000);
 8002dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd6:	f002 f967 	bl	80050a8 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4945      	ldr	r1, [pc, #276]	; (8002ef4 <main+0x4c4>)
 8002dde:	4846      	ldr	r0, [pc, #280]	; (8002ef8 <main+0x4c8>)
 8002de0:	f002 fa6a 	bl	80052b8 <HAL_ADC_Start_DMA>
	OutputAddDigital(&outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,TIME_LAMPADA	,0);
 8002de4:	232d      	movs	r3, #45	; 0x2d
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	4b44      	ldr	r3, [pc, #272]	; (8002efc <main+0x4cc>)
 8002dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dee:	4944      	ldr	r1, [pc, #272]	; (8002f00 <main+0x4d0>)
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4844      	ldr	r0, [pc, #272]	; (8002f04 <main+0x4d4>)
 8002df4:	4b44      	ldr	r3, [pc, #272]	; (8002f08 <main+0x4d8>)
 8002df6:	9402      	str	r4, [sp, #8]
 8002df8:	f7ff fb90 	bl	800251c <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <main+0x4dc>)
 8002e00:	4943      	ldr	r1, [pc, #268]	; (8002f10 <main+0x4e0>)
 8002e02:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e06:	483f      	ldr	r0, [pc, #252]	; (8002f04 <main+0x4d4>)
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	f7ff fb87 	bl	800251c <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002e0e:	2210      	movs	r2, #16
 8002e10:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <main+0x4dc>)
 8002e12:	4940      	ldr	r1, [pc, #256]	; (8002f14 <main+0x4e4>)
 8002e14:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e18:	483a      	ldr	r0, [pc, #232]	; (8002f04 <main+0x4d4>)
 8002e1a:	9400      	str	r4, [sp, #0]
 8002e1c:	f7ff fb7e 	bl	800251c <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 8002e20:	2220      	movs	r2, #32
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <main+0x4dc>)
 8002e24:	493c      	ldr	r1, [pc, #240]	; (8002f18 <main+0x4e8>)
 8002e26:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e2a:	4836      	ldr	r0, [pc, #216]	; (8002f04 <main+0x4d4>)
 8002e2c:	9400      	str	r4, [sp, #0]
 8002e2e:	f7ff fb75 	bl	800251c <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <main+0x4dc>)
 8002e36:	4939      	ldr	r1, [pc, #228]	; (8002f1c <main+0x4ec>)
 8002e38:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002e3c:	4831      	ldr	r0, [pc, #196]	; (8002f04 <main+0x4d4>)
 8002e3e:	9400      	str	r4, [sp, #0]
 8002e40:	f7ff fb6c 	bl	800251c <OutputAddDigital>
	OutputAddPID	(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002e44:	2503      	movs	r5, #3
 8002e46:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8002f20 <main+0x4f0>
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <main+0x4f4>)
 8002e52:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 8002e56:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002e5a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e62:	4931      	ldr	r1, [pc, #196]	; (8002f28 <main+0x4f8>)
 8002e64:	230c      	movs	r3, #12
 8002e66:	4a19      	ldr	r2, [pc, #100]	; (8002ecc <main+0x49c>)
 8002e68:	4826      	ldr	r0, [pc, #152]	; (8002f04 <main+0x4d4>)
 8002e6a:	f8cd b020 	str.w	fp, [sp, #32]
 8002e6e:	f7ff fc1d 	bl	80026ac <OutputAddPID>
	OutputAddPID	(&outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002e72:	2200      	movs	r2, #0
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <main+0x4f4>)
 8002e76:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002e7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002e7e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e82:	e9cd ab07 	strd	sl, fp, [sp, #28]
 8002e86:	2308      	movs	r3, #8
 8002e88:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <main+0x49c>)
 8002e8a:	4928      	ldr	r1, [pc, #160]	; (8002f2c <main+0x4fc>)
 8002e8c:	9506      	str	r5, [sp, #24]
 8002e8e:	481d      	ldr	r0, [pc, #116]	; (8002f04 <main+0x4d4>)
 8002e90:	f7ff fc0c 	bl	80026ac <OutputAddPID>
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002e94:	2101      	movs	r1, #1
 8002e96:	a80d      	add	r0, sp, #52	; 0x34
  osSemaphoreDef(BinSemUartTx);
 8002e98:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002e9c:	f005 fa11 	bl	80082c2 <osSemaphoreCreate>
 8002ea0:	4f23      	ldr	r7, [pc, #140]	; (8002f30 <main+0x500>)
  osTimerDef(timer100ms, CBTimer100ms);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <main+0x504>)
  timer100msHandle = osTimerCreate(osTimer(timer100ms), osTimerPeriodic, NULL);
 8002ea4:	4622      	mov	r2, r4
 8002ea6:	2101      	movs	r1, #1
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002ea8:	6038      	str	r0, [r7, #0]
  timer100msHandle = osTimerCreate(osTimer(timer100ms), osTimerPeriodic, NULL);
 8002eaa:	a80f      	add	r0, sp, #60	; 0x3c
 8002eac:	e044      	b.n	8002f38 <main+0x508>
 8002eae:	bf00      	nop
 8002eb0:	33333333 	.word	0x33333333
 8002eb4:	3fd33333 	.word	0x3fd33333
 8002eb8:	47ae147b 	.word	0x47ae147b
 8002ebc:	3f847ae1 	.word	0x3f847ae1
 8002ec0:	200014b4 	.word	0x200014b4
 8002ec4:	40005400 	.word	0x40005400
 8002ec8:	000186a0 	.word	0x000186a0
 8002ecc:	20001564 	.word	0x20001564
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	2000151c 	.word	0x2000151c
 8002ed8:	200015ac 	.word	0x200015ac
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	200015f4 	.word	0x200015f4
 8002ee4:	40004800 	.word	0x40004800
 8002ee8:	20001508 	.word	0x20001508
 8002eec:	40002800 	.word	0x40002800
 8002ef0:	00010101 	.word	0x00010101
 8002ef4:	200013ac 	.word	0x200013ac
 8002ef8:	200013b8 	.word	0x200013b8
 8002efc:	08002799 	.word	0x08002799
 8002f00:	200007e8 	.word	0x200007e8
 8002f04:	20001640 	.word	0x20001640
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	20000800 	.word	0x20000800
 8002f14:	20000848 	.word	0x20000848
 8002f18:	20000830 	.word	0x20000830
 8002f1c:	20000818 	.word	0x20000818
 8002f20:	0800273d 	.word	0x0800273d
 8002f24:	403e0000 	.word	0x403e0000
 8002f28:	20000860 	.word	0x20000860
 8002f2c:	200008a8 	.word	0x200008a8
 8002f30:	200007d0 	.word	0x200007d0
 8002f34:	080027a5 	.word	0x080027a5
  osTimerDef(timer100ms, CBTimer100ms);
 8002f38:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  timer100msHandle = osTimerCreate(osTimer(timer100ms), osTimerPeriodic, NULL);
 8002f3c:	f005 f910 	bl	8008160 <osTimerCreate>
 8002f40:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8003044 <main+0x614>
  osTimerDef(timer1000ms, CBTimer1000ms);
 8002f44:	4b40      	ldr	r3, [pc, #256]	; (8003048 <main+0x618>)
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002f46:	4622      	mov	r2, r4
 8002f48:	2101      	movs	r1, #1
  timer100msHandle = osTimerCreate(osTimer(timer100ms), osTimerPeriodic, NULL);
 8002f4a:	f8c9 0000 	str.w	r0, [r9]
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002f4e:	a811      	add	r0, sp, #68	; 0x44
  osTimerDef(timer1000ms, CBTimer1000ms);
 8002f50:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002f54:	f005 f904 	bl	8008160 <osTimerCreate>
  osMessageQDef(FilaEeprom, 5, uint8_t);
 8002f58:	4d3c      	ldr	r5, [pc, #240]	; (800304c <main+0x61c>)
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002f5a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8003050 <main+0x620>
  osMessageQDef(FilaEeprom, 5, uint8_t);
 8002f5e:	ae13      	add	r6, sp, #76	; 0x4c
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002f60:	f8c8 0000 	str.w	r0, [r8]
  osMessageQDef(FilaEeprom, 5, uint8_t);
 8002f64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f68:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4630      	mov	r0, r6
 8002f70:	f005 f9cc 	bl	800830c <osMessageCreate>
 8002f74:	4b37      	ldr	r3, [pc, #220]	; (8003054 <main+0x624>)
  osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 8002f76:	f105 0c10 	add.w	ip, r5, #16
 8002f7a:	ae17      	add	r6, sp, #92	; 0x5c
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002f7c:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256, TaskBluetoothBuffer, &TaskBluetoothControlBlock);
 8002f7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002f84:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002f88:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	a817      	add	r0, sp, #92	; 0x5c
 8002f90:	f005 f8aa 	bl	80080e8 <osThreadCreate>
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <main+0x628>)
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002f96:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
 8002f9a:	ae1e      	add	r6, sp, #120	; 0x78
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002f9c:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002f9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fa2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002fa4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fa8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002fac:	4621      	mov	r1, r4
 8002fae:	a81e      	add	r0, sp, #120	; 0x78
 8002fb0:	f005 f89a 	bl	80080e8 <osThreadCreate>
 8002fb4:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800305c <main+0x62c>
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002fb8:	f105 0c48 	add.w	ip, r5, #72	; 0x48
 8002fbc:	ae25      	add	r6, sp, #148	; 0x94
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002fbe:	f8ca 0000 	str.w	r0, [sl]
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002fc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002fc8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fcc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	a825      	add	r0, sp, #148	; 0x94
 8002fd4:	f005 f888 	bl	80080e8 <osThreadCreate>
 8002fd8:	4b21      	ldr	r3, [pc, #132]	; (8003060 <main+0x630>)
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002fda:	f105 0c64 	add.w	ip, r5, #100	; 0x64
 8002fde:	ae2c      	add	r6, sp, #176	; 0xb0
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002fe0:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002fe6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002fe8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002fec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	a82c      	add	r0, sp, #176	; 0xb0
 8002ff4:	f005 f878 	bl	80080e8 <osThreadCreate>
 8002ff8:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <main+0x634>)
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002ffa:	ae33      	add	r6, sp, #204	; 0xcc
 8002ffc:	3580      	adds	r5, #128	; 0x80
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002ffe:	6018      	str	r0, [r3, #0]
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8003000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003002:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003004:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003008:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 800300c:	4621      	mov	r1, r4
 800300e:	a833      	add	r0, sp, #204	; 0xcc
 8003010:	f005 f86a 	bl	80080e8 <osThreadCreate>
 8003014:	4b14      	ldr	r3, [pc, #80]	; (8003068 <main+0x638>)
 8003016:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 8003018:	f8da 0000 	ldr.w	r0, [sl]
 800301c:	f005 f9ea 	bl	80083f4 <osThreadSuspend>
	osTimerStart(timer100msHandle,100);
 8003020:	2164      	movs	r1, #100	; 0x64
 8003022:	f8d9 0000 	ldr.w	r0, [r9]
 8003026:	f005 f8b3 	bl	8008190 <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 800302a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800302e:	f8d8 0000 	ldr.w	r0, [r8]
 8003032:	f005 f8ad 	bl	8008190 <osTimerStart>
	osSemaphoreRelease(BinSemUartTxHandle);
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f005 f966 	bl	8008308 <osSemaphoreRelease>
  osKernelStart();
 800303c:	f005 f84f 	bl	80080de <osKernelStart>
	while (1)
 8003040:	e7fe      	b.n	8003040 <main+0x610>
 8003042:	bf00      	nop
 8003044:	20001678 	.word	0x20001678
 8003048:	08002885 	.word	0x08002885
 800304c:	0800b854 	.word	0x0800b854
 8003050:	20001674 	.word	0x20001674
 8003054:	200007e0 	.word	0x200007e0
 8003058:	20000d98 	.word	0x20000d98
 800305c:	20001044 	.word	0x20001044
 8003060:	2000103c 	.word	0x2000103c
 8003064:	200012e8 	.word	0x200012e8
 8003068:	20001040 	.word	0x20001040

0800306c <Queue_is_full>:
        Queue_cleanup(me);
        free(me);
    }
}

int  Queue_is_full  (Queue* volatile const me) {
 800306c:	b082      	sub	sp, #8
 800306e:	9001      	str	r0, [sp, #4]
    return (me->head + 1) % QUEUE_SIZE == me->tail;
 8003070:	9b01      	ldr	r3, [sp, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	9a01      	ldr	r2, [sp, #4]
 8003076:	3301      	adds	r3, #1
 8003078:	6990      	ldr	r0, [r2, #24]
 800307a:	2205      	movs	r2, #5
 800307c:	fb93 f2f2 	sdiv	r2, r3, r2
 8003080:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003084:	1a9b      	subs	r3, r3, r2
}
 8003086:	1a1b      	subs	r3, r3, r0
 8003088:	4258      	negs	r0, r3
 800308a:	4158      	adcs	r0, r3
 800308c:	b002      	add	sp, #8
 800308e:	4770      	bx	lr

08003090 <Queue_is_empty>:

int  Queue_is_empty (Queue* volatile const me) {
 8003090:	b082      	sub	sp, #8
 8003092:	9001      	str	r0, [sp, #4]
    return (me->head == me->tail);
 8003094:	9b01      	ldr	r3, [sp, #4]
 8003096:	6958      	ldr	r0, [r3, #20]
 8003098:	9b01      	ldr	r3, [sp, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
}
 800309c:	1ac3      	subs	r3, r0, r3
 800309e:	4258      	negs	r0, r3
 80030a0:	4158      	adcs	r0, r3
 80030a2:	b002      	add	sp, #8
 80030a4:	4770      	bx	lr

080030a6 <Queue_get_size>:

int  Queue_get_size (Queue* volatile const me) {
 80030a6:	b082      	sub	sp, #8
 80030a8:	9001      	str	r0, [sp, #4]
    return me->size;
 80030aa:	9b01      	ldr	r3, [sp, #4]
 80030ac:	69d8      	ldr	r0, [r3, #28]
}
 80030ae:	b002      	add	sp, #8
 80030b0:	4770      	bx	lr

080030b2 <Queue_insert>:

void Queue_insert   (Queue* volatile const me, int k) {
 80030b2:	b513      	push	{r0, r1, r4, lr}
 80030b4:	9001      	str	r0, [sp, #4]
    if (!me->is_full(me)) {
 80030b6:	9b01      	ldr	r3, [sp, #4]
 80030b8:	9801      	ldr	r0, [sp, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
void Queue_insert   (Queue* volatile const me, int k) {
 80030bc:	460c      	mov	r4, r1
    if (!me->is_full(me)) {
 80030be:	4798      	blx	r3
 80030c0:	b998      	cbnz	r0, 80030ea <Queue_insert+0x38>
        me->buffer[me->head] = k;
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	9a01      	ldr	r2, [sp, #4]
 80030c6:	6952      	ldr	r2, [r2, #20]
 80030c8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
        me->head = (me->head + 1) % QUEUE_SIZE;
 80030cc:	2205      	movs	r2, #5
 80030ce:	9b01      	ldr	r3, [sp, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	9901      	ldr	r1, [sp, #4]
 80030d4:	3301      	adds	r3, #1
 80030d6:	fb93 f2f2 	sdiv	r2, r3, r2
 80030da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	614b      	str	r3, [r1, #20]
        ++me->size;
 80030e2:	9a01      	ldr	r2, [sp, #4]
 80030e4:	69d3      	ldr	r3, [r2, #28]
 80030e6:	3301      	adds	r3, #1
 80030e8:	61d3      	str	r3, [r2, #28]
    }
}
 80030ea:	b002      	add	sp, #8
 80030ec:	bd10      	pop	{r4, pc}
	...

080030f0 <Queue_remove>:

int  Queue_remove   (Queue* volatile const me) {
 80030f0:	b507      	push	{r0, r1, r2, lr}
 80030f2:	9001      	str	r0, [sp, #4]
    int value = -9999; // sentinel value
    if (!me->is_empty(me)) {
 80030f4:	9b01      	ldr	r3, [sp, #4]
 80030f6:	9801      	ldr	r0, [sp, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	4798      	blx	r3
 80030fc:	b9b0      	cbnz	r0, 800312c <Queue_remove+0x3c>
        value = me->buffer[me->tail];
 80030fe:	9b01      	ldr	r3, [sp, #4]
 8003100:	9a01      	ldr	r2, [sp, #4]
 8003102:	6992      	ldr	r2, [r2, #24]
 8003104:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
        me->tail = (me->tail + 1) % QUEUE_SIZE;
 8003108:	2205      	movs	r2, #5
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	9901      	ldr	r1, [sp, #4]
 8003110:	3301      	adds	r3, #1
 8003112:	fb93 f2f2 	sdiv	r2, r3, r2
 8003116:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	618b      	str	r3, [r1, #24]
        --me->size;
 800311e:	9a01      	ldr	r2, [sp, #4]
 8003120:	69d3      	ldr	r3, [r2, #28]
 8003122:	3b01      	subs	r3, #1
 8003124:	61d3      	str	r3, [r2, #28]
    }
    return value;
}
 8003126:	b003      	add	sp, #12
 8003128:	f85d fb04 	ldr.w	pc, [sp], #4
    int value = -9999; // sentinel value
 800312c:	4800      	ldr	r0, [pc, #0]	; (8003130 <Queue_remove+0x40>)
    return value;
 800312e:	e7fa      	b.n	8003126 <Queue_remove+0x36>
 8003130:	ffffd8f1 	.word	0xffffd8f1

08003134 <Queue_init>:
               ) {
 8003134:	b513      	push	{r0, r1, r4, lr}
 8003136:	9001      	str	r0, [sp, #4]
    me->head  = 0;
 8003138:	2000      	movs	r0, #0
 800313a:	9c01      	ldr	r4, [sp, #4]
 800313c:	6160      	str	r0, [r4, #20]
    me->tail  = 0;
 800313e:	9c01      	ldr	r4, [sp, #4]
 8003140:	61a0      	str	r0, [r4, #24]
    me->size  = 0;
 8003142:	9c01      	ldr	r4, [sp, #4]
 8003144:	61e0      	str	r0, [r4, #28]
    me->is_full    = pFn_is_full;
 8003146:	9801      	ldr	r0, [sp, #4]
 8003148:	6201      	str	r1, [r0, #32]
    me->is_empty   = pFn_is_empty;
 800314a:	9901      	ldr	r1, [sp, #4]
 800314c:	624a      	str	r2, [r1, #36]	; 0x24
    me->get_size   = pFn_get_size;
 800314e:	9a01      	ldr	r2, [sp, #4]
 8003150:	6293      	str	r3, [r2, #40]	; 0x28
    me->insert     = pFn_insert;
 8003152:	9b01      	ldr	r3, [sp, #4]
 8003154:	9a04      	ldr	r2, [sp, #16]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c
    me->remove     = pFn_remove;
 8003158:	9b01      	ldr	r3, [sp, #4]
 800315a:	9a05      	ldr	r2, [sp, #20]
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800315e:	b002      	add	sp, #8
 8003160:	bd10      	pop	{r4, pc}
	...

08003164 <Queue_create>:
Queue* Queue_create() {
 8003164:	b513      	push	{r0, r1, r4, lr}
    Queue* me = (Queue*) malloc(sizeof(Queue));
 8003166:	2034      	movs	r0, #52	; 0x34
 8003168:	f007 f966 	bl	800a438 <malloc>
    if (me == NULL)
 800316c:	4604      	mov	r4, r0
 800316e:	b140      	cbz	r0, 8003182 <Queue_create+0x1e>
    Queue_init(me,
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <Queue_create+0x24>)
 8003172:	4a06      	ldr	r2, [pc, #24]	; (800318c <Queue_create+0x28>)
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <Queue_create+0x2c>)
 8003178:	4906      	ldr	r1, [pc, #24]	; (8003194 <Queue_create+0x30>)
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <Queue_create+0x34>)
 800317e:	f7ff ffd9 	bl	8003134 <Queue_init>
}
 8003182:	4620      	mov	r0, r4
 8003184:	b002      	add	sp, #8
 8003186:	bd10      	pop	{r4, pc}
 8003188:	080030f1 	.word	0x080030f1
 800318c:	08003091 	.word	0x08003091
 8003190:	080030b3 	.word	0x080030b3
 8003194:	0800306d 	.word	0x0800306d
 8003198:	080030a7 	.word	0x080030a7

0800319c <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800319c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800319e:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 80031a2:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 80031a6:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 80031aa:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80031ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 80031b0:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 80031b6:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 80031b8:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 80031bc:	4642      	mov	r2, r8
 80031be:	464b      	mov	r3, r9
 80031c0:	4630      	mov	r0, r6
 80031c2:	f7fd fc19 	bl	80009f8 <__aeabi_dcmpgt>
 80031c6:	b110      	cbz	r0, 80031ce <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 80031c8:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 80031cc:	e009      	b.n	80031e2 <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 80031ce:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 80031d2:	4630      	mov	r0, r6
 80031d4:	4642      	mov	r2, r8
 80031d6:	464b      	mov	r3, r9
 80031d8:	4639      	mov	r1, r7
 80031da:	f7fd fbef 	bl	80009bc <__aeabi_dcmplt>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d1f2      	bne.n	80031c8 <PID_Init+0x2c>
}
 80031e2:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

080031e6 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80031e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80031ea:	7843      	ldrb	r3, [r0, #1]
{
 80031ec:	4604      	mov	r4, r0
 80031ee:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 80031f0:	b91b      	cbnz	r3, 80031fa <PID_Compute+0x14>
	{
		return _FALSE;
 80031f2:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 80031f4:	b009      	add	sp, #36	; 0x24
 80031f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 80031fa:	f001 ff4f 	bl	800509c <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 80031fe:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 8003200:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 8003202:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8003204:	429a      	cmp	r2, r3
	now        = GetTime();
 8003206:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 8003208:	d8f3      	bhi.n	80031f2 <PID_Compute+0xc>
		input   = *uPID->MyInput;
 800320a:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 800320c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 800320e:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 8003212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003216:	4652      	mov	r2, sl
 8003218:	465b      	mov	r3, fp
 800321a:	f7fc ffa5 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 800321e:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 8003222:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8003226:	4650      	mov	r0, sl
 8003228:	4659      	mov	r1, fp
 800322a:	f7fc ff9d 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 800322e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 8003232:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 8003236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800323a:	f7fd f94d 	bl	80004d8 <__aeabi_dmul>
 800323e:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8003242:	f7fc ff93 	bl	800016c <__adddf3>
 8003246:	4606      	mov	r6, r0
 8003248:	460f      	mov	r7, r1
		if (!uPID->POnE)
 800324a:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 800324c:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	b96b      	cbnz	r3, 8003270 <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8003254:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800325c:	f7fd f93c 	bl	80004d8 <__aeabi_dmul>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4630      	mov	r0, r6
 8003266:	4639      	mov	r1, r7
 8003268:	f7fc ff7e 	bl	8000168 <__aeabi_dsub>
 800326c:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8003270:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8003274:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 8003278:	4640      	mov	r0, r8
 800327a:	4632      	mov	r2, r6
 800327c:	463b      	mov	r3, r7
 800327e:	4649      	mov	r1, r9
 8003280:	f7fd fbba 	bl	80009f8 <__aeabi_dcmpgt>
 8003284:	2800      	cmp	r0, #0
 8003286:	d038      	beq.n	80032fa <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 8003288:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 800328c:	9b01      	ldr	r3, [sp, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d042      	beq.n	8003318 <PID_Compute+0x132>
			output = uPID->Kp * error;
 8003292:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800329a:	f7fd f91d 	bl	80004d8 <__aeabi_dmul>
 800329e:	4680      	mov	r8, r0
 80032a0:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 80032a2:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80032a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032aa:	f7fd f915 	bl	80004d8 <__aeabi_dmul>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80032b6:	f7fc ff57 	bl	8000168 <__aeabi_dsub>
 80032ba:	4642      	mov	r2, r8
 80032bc:	464b      	mov	r3, r9
 80032be:	f7fc ff55 	bl	800016c <__adddf3>
 80032c2:	4680      	mov	r8, r0
 80032c4:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4630      	mov	r0, r6
 80032cc:	4639      	mov	r1, r7
 80032ce:	f7fd fb75 	bl	80009bc <__aeabi_dcmplt>
 80032d2:	b950      	cbnz	r0, 80032ea <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 80032d4:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	4630      	mov	r0, r6
 80032de:	4639      	mov	r1, r7
 80032e0:	f7fd fb8a 	bl	80009f8 <__aeabi_dcmpgt>
 80032e4:	b908      	cbnz	r0, 80032ea <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 80032e6:	4646      	mov	r6, r8
 80032e8:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 80032ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 80032ec:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 80032ee:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 80032f2:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 80032f6:	6065      	str	r5, [r4, #4]
		return _TRUE;
 80032f8:	e77c      	b.n	80031f4 <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 80032fa:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003306:	f7fd fb59 	bl	80009bc <__aeabi_dcmplt>
 800330a:	2800      	cmp	r0, #0
 800330c:	d0be      	beq.n	800328c <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 800330e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003312:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8003316:	e7b9      	b.n	800328c <PID_Compute+0xa6>
			output = 0;
 8003318:	f04f 0800 	mov.w	r8, #0
 800331c:	f04f 0900 	mov.w	r9, #0
 8003320:	e7bf      	b.n	80032a2 <PID_Compute+0xbc>

08003322 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003322:	2901      	cmp	r1, #1
{
 8003324:	b538      	push	{r3, r4, r5, lr}
 8003326:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003328:	bf0c      	ite	eq
 800332a:	2501      	moveq	r5, #1
 800332c:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 800332e:	d103      	bne.n	8003338 <PID_SetMode+0x16>
 8003330:	7843      	ldrb	r3, [r0, #1]
 8003332:	b90b      	cbnz	r3, 8003338 <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 8003334:	f7ff ff32 	bl	800319c <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003338:	7065      	strb	r5, [r4, #1]
	
}
 800333a:	bd38      	pop	{r3, r4, r5, pc}

0800333c <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800333c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003340:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800334a:	4632      	mov	r2, r6
 800334c:	463b      	mov	r3, r7
 800334e:	4620      	mov	r0, r4
 8003350:	4629      	mov	r1, r5
 8003352:	f7fd fb47 	bl	80009e4 <__aeabi_dcmpge>
 8003356:	2800      	cmp	r0, #0
 8003358:	d137      	bne.n	80033ca <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800335a:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 800335e:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 8003362:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 8003366:	2b00      	cmp	r3, #0
 8003368:	d02f      	beq.n	80033ca <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800336a:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 800336e:	4632      	mov	r2, r6
 8003370:	e9db 8900 	ldrd	r8, r9, [fp]
 8003374:	463b      	mov	r3, r7
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fd fb3d 	bl	80009f8 <__aeabi_dcmpgt>
 800337e:	b178      	cbz	r0, 80033a0 <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003380:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003384:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 8003388:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 800338c:	4630      	mov	r0, r6
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	4639      	mov	r1, r7
 8003394:	f7fd fb30 	bl	80009f8 <__aeabi_dcmpgt>
 8003398:	b168      	cbz	r0, 80033b6 <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 800339a:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 800339e:	e014      	b.n	80033ca <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 80033a0:	4622      	mov	r2, r4
 80033a2:	462b      	mov	r3, r5
 80033a4:	4640      	mov	r0, r8
 80033a6:	4649      	mov	r1, r9
 80033a8:	f7fd fb08 	bl	80009bc <__aeabi_dcmplt>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	d0e9      	beq.n	8003384 <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 80033b0:	e9cb 4500 	strd	r4, r5, [fp]
 80033b4:	e7e6      	b.n	8003384 <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 80033b6:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 80033ba:	4630      	mov	r0, r6
 80033bc:	4622      	mov	r2, r4
 80033be:	462b      	mov	r3, r5
 80033c0:	4639      	mov	r1, r7
 80033c2:	f7fd fafb 	bl	80009bc <__aeabi_dcmplt>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d1e7      	bne.n	800339a <PID_SetOutputLimits+0x5e>
		
	}
	
}
 80033ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080033d0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80033d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80033d8:	4614      	mov	r4, r2
 80033da:	461d      	mov	r5, r3
 80033dc:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80033de:	2200      	movs	r2, #0
 80033e0:	2300      	movs	r3, #0
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
{
 80033e6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80033ea:	f7fd fae7 	bl	80009bc <__aeabi_dcmplt>
 80033ee:	2800      	cmp	r0, #0
 80033f0:	d15a      	bne.n	80034a8 <PID_SetTunings2+0xd8>
 80033f2:	2200      	movs	r2, #0
 80033f4:	2300      	movs	r3, #0
 80033f6:	4640      	mov	r0, r8
 80033f8:	4649      	mov	r1, r9
 80033fa:	f7fd fadf 	bl	80009bc <__aeabi_dcmplt>
 80033fe:	2800      	cmp	r0, #0
 8003400:	d152      	bne.n	80034a8 <PID_SetTunings2+0xd8>
 8003402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003406:	2200      	movs	r2, #0
 8003408:	2300      	movs	r3, #0
 800340a:	f7fd fad7 	bl	80009bc <__aeabi_dcmplt>
 800340e:	2800      	cmp	r0, #0
 8003410:	d14a      	bne.n	80034a8 <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003412:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 8003414:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003418:	425e      	negs	r6, r3
 800341a:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 800341c:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 8003420:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003424:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 8003428:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 800342c:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003430:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003434:	f7fc ffd6 	bl	80003e4 <__aeabi_ui2d>
 8003438:	2200      	movs	r2, #0
 800343a:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <PID_SetTunings2+0xdc>)
 800343c:	f7fd f976 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8003440:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003444:	4606      	mov	r6, r0
 8003446:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4640      	mov	r0, r8
 800344e:	4649      	mov	r1, r9
 8003450:	f7fd f842 	bl	80004d8 <__aeabi_dmul>
 8003454:	4680      	mov	r8, r0
 8003456:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8003458:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800345c:	463b      	mov	r3, r7
 800345e:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8003460:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8003464:	f7fd f962 	bl	800072c <__aeabi_ddiv>
 8003468:	4606      	mov	r6, r0
 800346a:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 800346c:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 8003470:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003474:	2b01      	cmp	r3, #1
 8003476:	d117      	bne.n	80034a8 <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003478:	4622      	mov	r2, r4
 800347a:	462b      	mov	r3, r5
 800347c:	2000      	movs	r0, #0
 800347e:	2100      	movs	r1, #0
 8003480:	f7fc fe72 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8003484:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 8003486:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800348a:	464b      	mov	r3, r9
 800348c:	2000      	movs	r0, #0
 800348e:	2100      	movs	r1, #0
 8003490:	f7fc fe6a 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8003494:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 8003496:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800349a:	463b      	mov	r3, r7
 800349c:	2000      	movs	r0, #0
 800349e:	2100      	movs	r1, #0
 80034a0:	f7fc fe62 	bl	8000168 <__aeabi_dsub>
 80034a4:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ac:	408f4000 	.word	0x408f4000

080034b0 <PID_SetTunings>:
{
 80034b0:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80034b2:	7881      	ldrb	r1, [r0, #2]
{
 80034b4:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80034b6:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80034ba:	9104      	str	r1, [sp, #16]
 80034bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80034c0:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80034c4:	e9cd 4500 	strd	r4, r5, [sp]
 80034c8:	f7ff ff82 	bl	80033d0 <PID_SetTunings2>
}
 80034cc:	b007      	add	sp, #28
 80034ce:	bd30      	pop	{r4, r5, pc}

080034d0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80034d0:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80034d2:	7843      	ldrb	r3, [r0, #1]
{
 80034d4:	4604      	mov	r4, r0
 80034d6:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80034d8:	b1d3      	cbz	r3, 8003510 <PID_SetControllerDirection+0x40>
 80034da:	78c3      	ldrb	r3, [r0, #3]
 80034dc:	428b      	cmp	r3, r1
 80034de:	d017      	beq.n	8003510 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80034e0:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80034e4:	2100      	movs	r1, #0
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fc fe3e 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 80034ec:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 80034f0:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80034f4:	2000      	movs	r0, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	f7fc fe36 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 80034fc:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8003500:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003504:	2000      	movs	r0, #0
 8003506:	2100      	movs	r1, #0
 8003508:	f7fc fe2e 	bl	8000168 <__aeabi_dsub>
 800350c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003510:	70e5      	strb	r5, [r4, #3]
	
}
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	0000      	movs	r0, r0
	...

08003518 <PID>:
{
 8003518:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 800351a:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800351c:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 800351e:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003522:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 8003524:	2200      	movs	r2, #0
 8003526:	2300      	movs	r3, #0
 8003528:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 800352c:	a312      	add	r3, pc, #72	; (adr r3, 8003578 <PID+0x60>)
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003536:	2364      	movs	r3, #100	; 0x64
{
 8003538:	4604      	mov	r4, r0
 800353a:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 800353c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003540:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003542:	f7ff ffc5 	bl	80034d0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003546:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800354a:	4620      	mov	r0, r4
 800354c:	9304      	str	r3, [sp, #16]
 800354e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003552:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003556:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800355a:	e9cd 2300 	strd	r2, r3, [sp]
 800355e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003562:	f7ff ff35 	bl	80033d0 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8003566:	f001 fd99 	bl	800509c <HAL_GetTick>
 800356a:	68a3      	ldr	r3, [r4, #8]
 800356c:	1ac0      	subs	r0, r0, r3
 800356e:	6060      	str	r0, [r4, #4]
}
 8003570:	b006      	add	sp, #24
 8003572:	bd10      	pop	{r4, pc}
 8003574:	f3af 8000 	nop.w
 8003578:	00000000 	.word	0x00000000
 800357c:	406fe000 	.word	0x406fe000

08003580 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003582:	1e0d      	subs	r5, r1, #0
{
 8003584:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 8003586:	dd20      	ble.n	80035ca <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003588:	4628      	mov	r0, r5
 800358a:	f7fc ff3b 	bl	8000404 <__aeabi_i2d>
 800358e:	4606      	mov	r6, r0
 8003590:	68a0      	ldr	r0, [r4, #8]
 8003592:	460f      	mov	r7, r1
 8003594:	f7fc ff26 	bl	80003e4 <__aeabi_ui2d>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4630      	mov	r0, r6
 800359e:	4639      	mov	r1, r7
 80035a0:	f7fd f8c4 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80035a8:	4606      	mov	r6, r0
 80035aa:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 80035ac:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80035b0:	f7fc ff92 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 80035b4:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 80035b6:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 80035ba:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80035be:	463b      	mov	r3, r7
 80035c0:	f7fd f8b4 	bl	800072c <__aeabi_ddiv>
 80035c4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80035c8:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 80035ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <HAL_MspInit+0x48>)
{
 80035ce:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80035d0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035d2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	619a      	str	r2, [r3, #24]
 80035da:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035dc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80035e0:	f002 0201 	and.w	r2, r2, #1
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	69da      	ldr	r2, [r3, #28]
 80035ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035ee:	61da      	str	r2, [r3, #28]
 80035f0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035f2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035fc:	f001 ffa0 	bl	8005540 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003600:	4a05      	ldr	r2, [pc, #20]	; (8003618 <HAL_MspInit+0x4c>)
 8003602:	6853      	ldr	r3, [r2, #4]
 8003604:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800360e:	b003      	add	sp, #12
 8003610:	f85d fb04 	ldr.w	pc, [sp], #4
 8003614:	40021000 	.word	0x40021000
 8003618:	40010000 	.word	0x40010000

0800361c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800361c:	b530      	push	{r4, r5, lr}
 800361e:	4605      	mov	r5, r0
 8003620:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003622:	2210      	movs	r2, #16
 8003624:	2100      	movs	r1, #0
 8003626:	a802      	add	r0, sp, #8
 8003628:	f007 f9f6 	bl	800aa18 <memset>
  if(hadc->Instance==ADC1)
 800362c:	682a      	ldr	r2, [r5, #0]
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_ADC_MspInit+0x84>)
 8003630:	429a      	cmp	r2, r3
 8003632:	d133      	bne.n	800369c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003634:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003638:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363a:	481a      	ldr	r0, [pc, #104]	; (80036a4 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800363c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003640:	619a      	str	r2, [r3, #24]
 8003642:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003646:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003650:	4c15      	ldr	r4, [pc, #84]	; (80036a8 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003652:	f042 0204 	orr.w	r2, r2, #4
 8003656:	619a      	str	r2, [r3, #24]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f003 0304 	and.w	r3, r3, #4
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003662:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003664:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003668:	f002 f950 	bl	800590c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800366c:	2300      	movs	r3, #0
 800366e:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003670:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003672:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800367a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800367e:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003682:	2220      	movs	r2, #32
 8003684:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003688:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800368a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800368c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800368e:	f001 ffa7 	bl	80055e0 <HAL_DMA_Init>
 8003692:	b108      	cbz	r0, 8003698 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003694:	f7ff f976 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003698:	622c      	str	r4, [r5, #32]
 800369a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800369c:	b007      	add	sp, #28
 800369e:	bd30      	pop	{r4, r5, pc}
 80036a0:	40012400 	.word	0x40012400
 80036a4:	40010800 	.word	0x40010800
 80036a8:	200013e8 	.word	0x200013e8
 80036ac:	40020008 	.word	0x40020008

080036b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4604      	mov	r4, r0
 80036b4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b6:	2210      	movs	r2, #16
 80036b8:	2100      	movs	r1, #0
 80036ba:	a802      	add	r0, sp, #8
 80036bc:	f007 f9ac 	bl	800aa18 <memset>
  if(hi2c->Instance==I2C1)
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_I2C_MspInit+0x68>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d124      	bne.n	8003712 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c8:	4c14      	ldr	r4, [pc, #80]	; (800371c <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036ca:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d0:	4813      	ldr	r0, [pc, #76]	; (8003720 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	61a3      	str	r3, [r4, #24]
 80036d8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036da:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036e4:	2312      	movs	r3, #18
 80036e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ea:	2303      	movs	r3, #3
 80036ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ee:	f002 f90d 	bl	800590c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80036f2:	4a0c      	ldr	r2, [pc, #48]	; (8003724 <HAL_I2C_MspInit+0x74>)
 80036f4:	6853      	ldr	r3, [r2, #4]
 80036f6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003700:	69e3      	ldr	r3, [r4, #28]
 8003702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003706:	61e3      	str	r3, [r4, #28]
 8003708:	69e3      	ldr	r3, [r4, #28]
 800370a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003712:	b006      	add	sp, #24
 8003714:	bd10      	pop	{r4, pc}
 8003716:	bf00      	nop
 8003718:	40005400 	.word	0x40005400
 800371c:	40021000 	.word	0x40021000
 8003720:	40010c00 	.word	0x40010c00
 8003724:	40010000 	.word	0x40010000

08003728 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003728:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_RTC_MspInit+0x30>)
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d10f      	bne.n	8003752 <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003732:	f002 ff61 	bl	80065f8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RTC_MspInit+0x34>)
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800373e:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003740:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <HAL_RTC_MspInit+0x38>)
 800374e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003752:	b003      	add	sp, #12
 8003754:	f85d fb04 	ldr.w	pc, [sp], #4
 8003758:	40002800 	.word	0x40002800
 800375c:	40021000 	.word	0x40021000
 8003760:	42420000 	.word	0x42420000

08003764 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003764:	6803      	ldr	r3, [r0, #0]
{
 8003766:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8003768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376c:	d10d      	bne.n	800378a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800376e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	f042 0201 	orr.w	r2, r2, #1
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003784:	b003      	add	sp, #12
 8003786:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800378a:	4a0c      	ldr	r2, [pc, #48]	; (80037bc <HAL_TIM_Base_MspInit+0x58>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d1f9      	bne.n	8003784 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003792:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003794:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003796:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003798:	f042 0202 	orr.w	r2, r2, #2
 800379c:	61da      	str	r2, [r3, #28]
 800379e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037a0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	9301      	str	r3, [sp, #4]
 80037a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80037aa:	f001 fec9 	bl	8005540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037ae:	201d      	movs	r0, #29
}
 80037b0:	b003      	add	sp, #12
 80037b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037b6:	f001 bef3 	b.w	80055a0 <HAL_NVIC_EnableIRQ>
 80037ba:	bf00      	nop
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40021000 	.word	0x40021000

080037c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c4:	2210      	movs	r2, #16
{
 80037c6:	b510      	push	{r4, lr}
 80037c8:	4604      	mov	r4, r0
 80037ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	2100      	movs	r1, #0
 80037ce:	eb0d 0002 	add.w	r0, sp, r2
 80037d2:	f007 f921 	bl	800aa18 <memset>
  if(htim->Instance==TIM2)
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d115      	bne.n	800380a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80037e2:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e4:	481c      	ldr	r0, [pc, #112]	; (8003858 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	f042 0204 	orr.w	r2, r2, #4
 80037ea:	619a      	str	r2, [r3, #24]
 80037ec:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003800:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003802:	f002 f883 	bl	800590c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003806:	b008      	add	sp, #32
 8003808:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 800380a:	4a14      	ldr	r2, [pc, #80]	; (800385c <HAL_TIM_MspPostInit+0x98>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d1fa      	bne.n	8003806 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003812:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	4810      	ldr	r0, [pc, #64]	; (8003858 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003818:	f042 0204 	orr.w	r2, r2, #4
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	f002 0204 	and.w	r2, r2, #4
 8003826:	9202      	str	r2, [sp, #8]
 8003828:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	f042 0208 	orr.w	r2, r2, #8
 8003830:	619a      	str	r2, [r3, #24]
 8003832:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003834:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	9303      	str	r3, [sp, #12]
 800383c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	23c0      	movs	r3, #192	; 0xc0
 8003840:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003844:	f002 f862 	bl	800590c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003848:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384a:	4806      	ldr	r0, [pc, #24]	; (8003864 <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003850:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003852:	a904      	add	r1, sp, #16
 8003854:	e7d5      	b.n	8003802 <HAL_TIM_MspPostInit+0x3e>
 8003856:	bf00      	nop
 8003858:	40010800 	.word	0x40010800
 800385c:	40000400 	.word	0x40000400
 8003860:	40021000 	.word	0x40021000
 8003864:	40010c00 	.word	0x40010c00

08003868 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	2210      	movs	r2, #16
{
 800386a:	b570      	push	{r4, r5, r6, lr}
 800386c:	4605      	mov	r5, r0
 800386e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	eb0d 0002 	add.w	r0, sp, r2
 8003874:	2100      	movs	r1, #0
 8003876:	f007 f8cf 	bl	800aa18 <memset>
  if(huart->Instance==USART1)
 800387a:	682b      	ldr	r3, [r5, #0]
 800387c:	4a44      	ldr	r2, [pc, #272]	; (8003990 <HAL_UART_MspInit+0x128>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d146      	bne.n	8003910 <HAL_UART_MspInit+0xa8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003882:	4b44      	ldr	r3, [pc, #272]	; (8003994 <HAL_UART_MspInit+0x12c>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8003888:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388a:	4843      	ldr	r0, [pc, #268]	; (8003998 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800388c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003890:	619a      	str	r2, [r3, #24]
 8003892:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003894:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8003896:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800389a:	9200      	str	r2, [sp, #0]
 800389c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80038a0:	4c3e      	ldr	r4, [pc, #248]	; (800399c <HAL_UART_MspInit+0x134>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a2:	f042 0204 	orr.w	r2, r2, #4
 80038a6:	619a      	str	r2, [r3, #24]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b2:	2302      	movs	r3, #2
 80038b4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038b8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f002 f825 	bl	800590c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c6:	4834      	ldr	r0, [pc, #208]	; (8003998 <HAL_UART_MspInit+0x130>)
 80038c8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ca:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d0:	f002 f81c 	bl	800590c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_UART_MspInit+0x138>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038d6:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038d8:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038dc:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038de:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038e6:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ea:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80038ec:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038ee:	f001 fe77 	bl	80055e0 <HAL_DMA_Init>
 80038f2:	b108      	cbz	r0, 80038f8 <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 80038f4:	f7ff f846 	bl	8002984 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80038f8:	2025      	movs	r0, #37	; 0x25
 80038fa:	2200      	movs	r2, #0
 80038fc:	2106      	movs	r1, #6
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038fe:	63ec      	str	r4, [r5, #60]	; 0x3c
 8003900:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8003902:	f001 fe1d 	bl	8005540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003906:	2025      	movs	r0, #37	; 0x25
 8003908:	f001 fe4a 	bl	80055a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800390c:	b008      	add	sp, #32
 800390e:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 8003910:	4a24      	ldr	r2, [pc, #144]	; (80039a4 <HAL_UART_MspInit+0x13c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d1fa      	bne.n	800390c <HAL_UART_MspInit+0xa4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003916:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_UART_MspInit+0x12c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	4823      	ldr	r0, [pc, #140]	; (80039a8 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800391a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 800391e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003922:	61da      	str	r2, [r3, #28]
 8003924:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003926:	2600      	movs	r6, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8003928:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800392c:	9202      	str	r2, [sp, #8]
 800392e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003930:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003932:	4c1e      	ldr	r4, [pc, #120]	; (80039ac <HAL_UART_MspInit+0x144>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003934:	f042 0208 	orr.w	r2, r2, #8
 8003938:	619a      	str	r2, [r3, #24]
 800393a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800394e:	2303      	movs	r3, #3
 8003950:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f001 ffdb 	bl	800590c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003956:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395a:	4813      	ldr	r0, [pc, #76]	; (80039a8 <HAL_UART_MspInit+0x140>)
 800395c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800395e:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003964:	f001 ffd2 	bl	800590c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003968:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_UART_MspInit+0x148>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800396a:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800396c:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003970:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003972:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003976:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003978:	60a6      	str	r6, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800397a:	e9c4 3606 	strd	r3, r6, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800397e:	6166      	str	r6, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003980:	f001 fe2e 	bl	80055e0 <HAL_DMA_Init>
 8003984:	b108      	cbz	r0, 800398a <HAL_UART_MspInit+0x122>
      Error_Handler();
 8003986:	f7fe fffd 	bl	8002984 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800398a:	63ec      	str	r4, [r5, #60]	; 0x3c
 800398c:	6265      	str	r5, [r4, #36]	; 0x24
}
 800398e:	e7bd      	b.n	800390c <HAL_UART_MspInit+0xa4>
 8003990:	40013800 	.word	0x40013800
 8003994:	40021000 	.word	0x40021000
 8003998:	40010800 	.word	0x40010800
 800399c:	2000142c 	.word	0x2000142c
 80039a0:	40020058 	.word	0x40020058
 80039a4:	40004800 	.word	0x40004800
 80039a8:	40010c00 	.word	0x40010c00
 80039ac:	20001470 	.word	0x20001470
 80039b0:	40020030 	.word	0x40020030

080039b4 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 80039b4:	6803      	ldr	r3, [r0, #0]
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <HAL_UART_MspDeInit+0x5c>)
{
 80039b8:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 80039ba:	4293      	cmp	r3, r2
{
 80039bc:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 80039be:	d112      	bne.n	80039e6 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80039c0:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80039c4:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 80039ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039ce:	4811      	ldr	r0, [pc, #68]	; (8003a14 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 80039d0:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80039d2:	f002 f875 	bl	8005ac0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80039d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80039d8:	f001 fe34 	bl	8005644 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80039dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80039e0:	2025      	movs	r0, #37	; 0x25
 80039e2:	f001 bdeb 	b.w	80055bc <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 80039e6:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <HAL_UART_MspDeInit+0x64>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10f      	bne.n	8003a0c <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 80039ec:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 80039f0:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80039f2:	480a      	ldr	r0, [pc, #40]	; (8003a1c <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80039f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80039f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 80039fc:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 80039fe:	f002 f85f 	bl	8005ac0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003a02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 8003a08:	f001 be1c 	b.w	8005644 <HAL_DMA_DeInit>
}
 8003a0c:	bd10      	pop	{r4, pc}
 8003a0e:	bf00      	nop
 8003a10:	40013800 	.word	0x40013800
 8003a14:	40010800 	.word	0x40010800
 8003a18:	40004800 	.word	0x40004800
 8003a1c:	40010c00 	.word	0x40010c00

08003a20 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_InitTick+0x7c>)
{
 8003a22:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a24:	699a      	ldr	r2, [r3, #24]
{
 8003a26:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2c:	619a      	str	r2, [r3, #24]
 8003a2e:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a30:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a36:	9302      	str	r3, [sp, #8]
{
 8003a38:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a3a:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003a3c:	4d18      	ldr	r5, [pc, #96]	; (8003aa0 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a3e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a40:	f003 f85e 	bl	8006b00 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003a44:	f003 f84c 	bl	8006ae0 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_InitTick+0x84>)
 8003a4a:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003a4c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003a50:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_InitTick+0x88>)
 8003a54:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003a58:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a5a:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003a5c:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8003a5e:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8003a60:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a62:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 8003a66:	f003 fc73 	bl	8007350 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	b980      	cbnz	r0, 8003a90 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f003 fb64 	bl	800713c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8003a74:	4604      	mov	r4, r0
 8003a76:	b958      	cbnz	r0, 8003a90 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003a78:	2019      	movs	r0, #25
 8003a7a:	f001 fd91 	bl	80055a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7e:	2e0f      	cmp	r6, #15
 8003a80:	d809      	bhi.n	8003a96 <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003a82:	4622      	mov	r2, r4
 8003a84:	4631      	mov	r1, r6
 8003a86:	2019      	movs	r0, #25
 8003a88:	f001 fd5a 	bl	8005540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_InitTick+0x8c>)
 8003a8e:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8003a90:	4620      	mov	r0, r4
 8003a92:	b008      	add	sp, #32
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 8003a96:	2401      	movs	r4, #1
 8003a98:	e7fa      	b.n	8003a90 <HAL_InitTick+0x70>
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	2000167c 	.word	0x2000167c
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	000f4240 	.word	0x000f4240
 8003aac:	20000008 	.word	0x20000008

08003ab0 <__NVIC_SystemReset>:
 8003ab0:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ab4:	4905      	ldr	r1, [pc, #20]	; (8003acc <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ab8:	68ca      	ldr	r2, [r1, #12]
 8003aba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60cb      	str	r3, [r1, #12]
 8003ac2:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003ac6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003ac8:	e7fd      	b.n	8003ac6 <__NVIC_SystemReset+0x16>
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00
 8003ad0:	05fa0004 	.word	0x05fa0004

08003ad4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad4:	e7fe      	b.n	8003ad4 <NMI_Handler>
	...

08003ad8 <HardFault_Handler>:
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  //todo revisar
	  ErrorBuffer_add(&eeprom, ERRO_HARDFAULT);
 8003ad8:	2101      	movs	r1, #1
{
 8003ada:	b508      	push	{r3, lr}
	  ErrorBuffer_add(&eeprom, ERRO_HARDFAULT);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <HardFault_Handler+0x10>)
 8003ade:	f7fe fb11 	bl	8002104 <ErrorBuffer_add>
	  NVIC_SystemReset();
 8003ae2:	f7ff ffe5 	bl	8003ab0 <__NVIC_SystemReset>
 8003ae6:	bf00      	nop
 8003ae8:	20001b98 	.word	0x20001b98

08003aec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <MemManage_Handler>
	...

08003af0 <BusFault_Handler>:

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ErrorBuffer_add(&eeprom, ERRO_BUS_HARDFAULT);
 8003af0:	2102      	movs	r1, #2
{
 8003af2:	b508      	push	{r3, lr}
	  ErrorBuffer_add(&eeprom, ERRO_BUS_HARDFAULT);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <BusFault_Handler+0x10>)
 8003af6:	f7fe fb05 	bl	8002104 <ErrorBuffer_add>
	  NVIC_SystemReset();
 8003afa:	f7ff ffd9 	bl	8003ab0 <__NVIC_SystemReset>
 8003afe:	bf00      	nop
 8003b00:	20001b98 	.word	0x20001b98

08003b04 <UsageFault_Handler>:

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ErrorBuffer_add(&eeprom, ERRO_USAGE_FAULT);
 8003b04:	2103      	movs	r1, #3
{
 8003b06:	b508      	push	{r3, lr}
	  ErrorBuffer_add(&eeprom, ERRO_USAGE_FAULT);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <UsageFault_Handler+0x10>)
 8003b0a:	f7fe fafb 	bl	8002104 <ErrorBuffer_add>
	  NVIC_SystemReset();
 8003b0e:	f7ff ffcf 	bl	8003ab0 <__NVIC_SystemReset>
 8003b12:	bf00      	nop
 8003b14:	20001b98 	.word	0x20001b98

08003b18 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b18:	4770      	bx	lr
	...

08003b1c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b1c:	4801      	ldr	r0, [pc, #4]	; (8003b24 <DMA1_Channel1_IRQHandler+0x8>)
 8003b1e:	f001 be61 	b.w	80057e4 <HAL_DMA_IRQHandler>
 8003b22:	bf00      	nop
 8003b24:	200013e8 	.word	0x200013e8

08003b28 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b28:	4801      	ldr	r0, [pc, #4]	; (8003b30 <DMA1_Channel3_IRQHandler+0x8>)
 8003b2a:	f001 be5b 	b.w	80057e4 <HAL_DMA_IRQHandler>
 8003b2e:	bf00      	nop
 8003b30:	20001470 	.word	0x20001470

08003b34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003b34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003b36:	4804      	ldr	r0, [pc, #16]	; (8003b48 <DMA1_Channel5_IRQHandler+0x14>)
 8003b38:	f001 fe54 	bl	80057e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <DMA1_Channel5_IRQHandler+0x18>)
 8003b42:	f7fd bbd5 	b.w	80012f0 <BLEDMA_IrqHandler>
 8003b46:	bf00      	nop
 8003b48:	2000142c 	.word	0x2000142c
 8003b4c:	200012ec 	.word	0x200012ec

08003b50 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b50:	4801      	ldr	r0, [pc, #4]	; (8003b58 <TIM1_UP_IRQHandler+0x8>)
 8003b52:	f003 bb22 	b.w	800719a <HAL_TIM_IRQHandler>
 8003b56:	bf00      	nop
 8003b58:	2000167c 	.word	0x2000167c

08003b5c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b5c:	4801      	ldr	r0, [pc, #4]	; (8003b64 <TIM3_IRQHandler+0x8>)
 8003b5e:	f003 bb1c 	b.w	800719a <HAL_TIM_IRQHandler>
 8003b62:	bf00      	nop
 8003b64:	20001564 	.word	0x20001564

08003b68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b6a:	4804      	ldr	r0, [pc, #16]	; (8003b7c <USART1_IRQHandler+0x14>)
 8003b6c:	f004 f910 	bl	8007d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 8003b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <USART1_IRQHandler+0x18>)
 8003b76:	f7fd bcb3 	b.w	80014e0 <BLEUSART_IrqHandler>
 8003b7a:	bf00      	nop
 8003b7c:	200015ac 	.word	0x200015ac
 8003b80:	200012ec 	.word	0x200012ec

08003b84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	460d      	mov	r5, r1
 8003b88:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	460e      	mov	r6, r1
 8003b8c:	1b73      	subs	r3, r6, r5
 8003b8e:	429c      	cmp	r4, r3
 8003b90:	dc01      	bgt.n	8003b96 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003b92:	4620      	mov	r0, r4
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003b96:	f3af 8000 	nop.w
 8003b9a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9e:	e7f5      	b.n	8003b8c <_read+0x8>

08003ba0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	460d      	mov	r5, r1
 8003ba4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba6:	460e      	mov	r6, r1
 8003ba8:	1b73      	subs	r3, r6, r5
 8003baa:	429c      	cmp	r4, r3
 8003bac:	dc01      	bgt.n	8003bb2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8003bae:	4620      	mov	r0, r4
 8003bb0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8003bb2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003bb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bba:	e7f5      	b.n	8003ba8 <_write+0x8>

08003bbc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	4770      	bx	lr

08003bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8003bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8003bc6:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8003bc8:	604b      	str	r3, [r1, #4]
}
 8003bca:	4770      	bx	lr

08003bcc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8003bcc:	2001      	movs	r0, #1
 8003bce:	4770      	bx	lr

08003bd0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	4770      	bx	lr

08003bd4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <_sbrk+0x30>)
{
 8003bd6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8003bd8:	6811      	ldr	r1, [r2, #0]
{
 8003bda:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8003bdc:	b909      	cbnz	r1, 8003be2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8003bde:	490a      	ldr	r1, [pc, #40]	; (8003c08 <_sbrk+0x34>)
 8003be0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be2:	6810      	ldr	r0, [r2, #0]
 8003be4:	4909      	ldr	r1, [pc, #36]	; (8003c0c <_sbrk+0x38>)
 8003be6:	4c0a      	ldr	r4, [pc, #40]	; (8003c10 <_sbrk+0x3c>)
 8003be8:	4403      	add	r3, r0
 8003bea:	1b09      	subs	r1, r1, r4
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d906      	bls.n	8003bfe <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8003bf0:	f006 ffdc 	bl	800abac <__errno>
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003bf8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8003bfc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8003bfe:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8003c00:	e7fc      	b.n	8003bfc <_sbrk+0x28>
 8003c02:	bf00      	nop
 8003c04:	200016c4 	.word	0x200016c4
 8003c08:	20003100 	.word	0x20003100
 8003c0c:	20005000 	.word	0x20005000
 8003c10:	00000400 	.word	0x00000400

08003c14 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c14:	4770      	bx	lr
	...

08003c18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c18:	f7ff fffc 	bl	8003c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c1c:	480b      	ldr	r0, [pc, #44]	; (8003c4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003c1e:	490c      	ldr	r1, [pc, #48]	; (8003c50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003c20:	4a0c      	ldr	r2, [pc, #48]	; (8003c54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c24:	e002      	b.n	8003c2c <LoopCopyDataInit>

08003c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c2a:	3304      	adds	r3, #4

08003c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c30:	d3f9      	bcc.n	8003c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003c34:	4c09      	ldr	r4, [pc, #36]	; (8003c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c38:	e001      	b.n	8003c3e <LoopFillZerobss>

08003c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c3c:	3204      	adds	r2, #4

08003c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c40:	d3fb      	bcc.n	8003c3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c42:	f006 ffb9 	bl	800abb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c46:	f7fe fef3 	bl	8002a30 <main>
  bx lr
 8003c4a:	4770      	bx	lr
  ldr r0, =_sdata
 8003c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003c54:	0800bc98 	.word	0x0800bc98
  ldr r2, =_sbss
 8003c58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003c5c:	200030fc 	.word	0x200030fc

08003c60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c60:	e7fe      	b.n	8003c60 <ADC1_2_IRQHandler>
	...

08003c64 <initBluetooth>:

		osThreadYield();
		osDelay(40);
	}
}
void initBluetooth(void){
 8003c64:	b510      	push	{r4, lr}

	bleConstrutora(&bluetooth, &huart1, &hdma_usart1_rx, TaskBluetoothHandle);
 8003c66:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <initBluetooth+0xa8>)
 8003c68:	4c29      	ldr	r4, [pc, #164]	; (8003d10 <initBluetooth+0xac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <initBluetooth+0xb0>)
 8003c6e:	4620      	mov	r0, r4
 8003c70:	4929      	ldr	r1, [pc, #164]	; (8003d18 <initBluetooth+0xb4>)
 8003c72:	f7fd fee1 	bl	8001a38 <bleConstrutora>

	//possiveis comandos a serem recebidos pelo bluetooth
	createBleComp(&bluetooth, RX_SOLICITA_REALTIME);
 8003c76:	2115      	movs	r1, #21
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7fd faa3 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_SOLICITA_SINCRONIA);
 8003c7e:	2117      	movs	r1, #23
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7fd fa9f 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_TEMPERATURA);
 8003c86:	2126      	movs	r1, #38	; 0x26
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fd fa9b 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA);
 8003c8e:	2110      	movs	r1, #16
 8003c90:	4620      	mov	r0, r4
 8003c92:	f7fd fa97 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA_HARD);
 8003c96:	2109      	movs	r1, #9
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7fd fa93 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_TETO);
 8003c9e:	2121      	movs	r1, #33	; 0x21
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7fd fa8f 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_LASTRO);
 8003ca6:	2122      	movs	r1, #34	; 0x22
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7fd fa8b 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMPO);
 8003cae:	2123      	movs	r1, #35	; 0x23
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7fd fa87 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_TEMPO);
 8003cb6:	2124      	movs	r1, #36	; 0x24
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7fd fa83 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_RECEITA);
 8003cbe:	2125      	movs	r1, #37	; 0x25
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f7fd fa7f 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_LIGA_LAMPADA);
 8003cc6:	2127      	movs	r1, #39	; 0x27
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7fd fa7b 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_DESLIGA_LAMPADA);
 8003cce:	2128      	movs	r1, #40	; 0x28
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7fd fa77 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_LAMPADA);
 8003cd6:	2130      	movs	r1, #48	; 0x30
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7fd fa73 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_CANCELA_PROCESSO);
 8003cde:	2129      	movs	r1, #41	; 0x29
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7fd fa6f 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_TETO);
 8003ce6:	2133      	movs	r1, #51	; 0x33
 8003ce8:	4620      	mov	r0, r4
 8003cea:	f7fd fa6b 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_LASTRO);
 8003cee:	2134      	movs	r1, #52	; 0x34
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	f7fd fa67 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_BUZZER);
 8003cf6:	2135      	movs	r1, #53	; 0x35
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7fd fa63 	bl	80011c4 <createBleComp>
	createBleComp(&bluetooth, RX_APAGA_ERROS);
 8003cfe:	4620      	mov	r0, r4

}
 8003d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	createBleComp(&bluetooth, RX_APAGA_ERROS);
 8003d04:	2175      	movs	r1, #117	; 0x75
 8003d06:	f7fd ba5d 	b.w	80011c4 <createBleComp>
 8003d0a:	bf00      	nop
 8003d0c:	20000d98 	.word	0x20000d98
 8003d10:	200012ec 	.word	0x200012ec
 8003d14:	2000142c 	.word	0x2000142c
 8003d18:	200015ac 	.word	0x200015ac

08003d1c <taskBluetooth1sec>:
void taskBluetooth1sec(void){

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003d1c:	4a0c      	ldr	r2, [pc, #48]	; (8003d50 <taskBluetooth1sec+0x34>)
void taskBluetooth1sec(void){
 8003d1e:	b508      	push	{r3, lr}
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003d20:	8813      	ldrh	r3, [r2, #0]
 8003d22:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003d26:	d30b      	bcc.n	8003d40 <taskBluetooth1sec+0x24>
		desligaForno();
 8003d28:	f7fe fd5c 	bl	80027e4 <desligaForno>
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
		tempoSemAtividade++;
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <taskBluetooth1sec+0x38>)
 8003d2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d32:	2b01      	cmp	r3, #1
		FlagSincronia.cont=0;
 8003d34:	bf01      	itttt	eq
 8003d36:	2200      	moveq	r2, #0
 8003d38:	4b07      	ldreq	r3, [pc, #28]	; (8003d58 <taskBluetooth1sec+0x3c>)
 8003d3a:	705a      	strbeq	r2, [r3, #1]
		FlagSincronia.flag=0;
 8003d3c:	701a      	strbeq	r2, [r3, #0]
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 8003d3e:	bd08      	pop	{r3, pc}
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 8003d40:	4906      	ldr	r1, [pc, #24]	; (8003d5c <taskBluetooth1sec+0x40>)
 8003d42:	f891 110d 	ldrb.w	r1, [r1, #269]	; 0x10d
 8003d46:	2901      	cmp	r1, #1
		tempoSemAtividade++;
 8003d48:	bf1c      	itt	ne
 8003d4a:	3301      	addne	r3, #1
 8003d4c:	8013      	strhne	r3, [r2, #0]
 8003d4e:	e7ed      	b.n	8003d2c <taskBluetooth1sec+0x10>
 8003d50:	200016ca 	.word	0x200016ca
 8003d54:	200012ec 	.word	0x200012ec
 8003d58:	200016c8 	.word	0x200016c8
 8003d5c:	200007e8 	.word	0x200007e8

08003d60 <txBluetooth>:
void txBluetooth(void){
 8003d60:	b530      	push	{r4, r5, lr}
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	int bufferQ_dataTx;

	// exite item na lista.
	if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx)) {
 8003d62:	4c9b      	ldr	r4, [pc, #620]	; (8003fd0 <txBluetooth+0x270>)
void txBluetooth(void){
 8003d64:	b087      	sub	sp, #28
	if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx)) {
 8003d66:	6920      	ldr	r0, [r4, #16]
 8003d68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d6a:	4798      	blx	r3
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b9e8      	cbnz	r0, 8003dac <txBluetooth+0x4c>

		// remove item da lista.
		bufferQ_dataTx = bluetooth.myQ_dataTx->remove(bluetooth.myQ_dataTx);
 8003d70:	6920      	ldr	r0, [r4, #16]
 8003d72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003d74:	4798      	blx	r3
		if (bufferQ_dataTx > 0) {
 8003d76:	1e03      	subs	r3, r0, #0
 8003d78:	dd18      	ble.n	8003dac <txBluetooth+0x4c>

			switch ((uint8_t)bufferQ_dataTx) {
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	dc0c      	bgt.n	8003d9a <txBluetooth+0x3a>
 8003d80:	2b15      	cmp	r3, #21
 8003d82:	dd13      	ble.n	8003dac <txBluetooth+0x4c>
 8003d84:	3b16      	subs	r3, #22
 8003d86:	2b0a      	cmp	r3, #10
 8003d88:	d810      	bhi.n	8003dac <txBluetooth+0x4c>
 8003d8a:	e8df f003 	tbb	[pc, r3]
 8003d8e:	5411      	.short	0x5411
 8003d90:	0f0fa182 	.word	0x0f0fa182
 8003d94:	0f0f0f0f 	.word	0x0f0f0f0f
 8003d98:	c4          	.byte	0xc4
 8003d99:	00          	.byte	0x00
 8003d9a:	2b30      	cmp	r3, #48	; 0x30
 8003d9c:	f000 80e4 	beq.w	8003f68 <txBluetooth+0x208>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	f000 80e6 	beq.w	8003f72 <txBluetooth+0x212>
 8003da6:	2b29      	cmp	r3, #41	; 0x29
 8003da8:	f000 80d4 	beq.w	8003f54 <txBluetooth+0x1f4>
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
				break;
			}
		}
	}
}
 8003dac:	b007      	add	sp, #28
 8003dae:	bd30      	pop	{r4, r5, pc}
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003db0:	f241 6301 	movw	r3, #5633	; 0x1601
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003db4:	4c87      	ldr	r4, [pc, #540]	; (8003fd4 <txBluetooth+0x274>)
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003db6:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003dba:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003dbe:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003dc2:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003dc6:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8003dca:	f88d 3003 	strb.w	r3, [sp, #3]
				Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 8003dce:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8003dd2:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003dd6:	f7fc fe19 	bl	8000a0c <__aeabi_d2uiz>
 8003dda:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 8003dde:	f88d 0006 	strb.w	r0, [sp, #6]
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003de2:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003de6:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003dea:	f7fc fe0f 	bl	8000a0c <__aeabi_d2uiz>
 8003dee:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003df2:	f88d 0008 	strb.w	r0, [sp, #8]
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003df6:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003dfa:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003dfe:	f7fc fe05 	bl	8000a0c <__aeabi_d2uiz>
 8003e02:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003e06:	f88d 000a 	strb.w	r0, [sp, #10]
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003e0a:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003e0e:	f88d 3009 	strb.w	r3, [sp, #9]
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003e12:	f7fc fdfb 	bl	8000a0c <__aeabi_d2uiz>
				bluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003e16:	220d      	movs	r2, #13
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003e18:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003e1c:	f88d 300b 	strb.w	r3, [sp, #11]
				Buffer[13] 	= PrimitiveStates.Buzzer;
 8003e20:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
				Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 8003e24:	f88d 000c 	strb.w	r0, [sp, #12]
				Buffer[13] 	= PrimitiveStates.Buzzer;
 8003e28:	f88d 300d 	strb.w	r3, [sp, #13]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003e2c:	4669      	mov	r1, sp
 8003e2e:	4868      	ldr	r0, [pc, #416]	; (8003fd0 <txBluetooth+0x270>)
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003e30:	f7fd fb6f 	bl	8001512 <bluetoothEnviaComando>
}
 8003e34:	e7ba      	b.n	8003dac <txBluetooth+0x4c>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e36:	f241 7301 	movw	r3, #5889	; 0x1701
 8003e3a:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <txBluetooth+0x274>)
 8003e40:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8003e44:	f88d 2002 	strb.w	r2, [sp, #2]
				Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 8003e48:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8003e4c:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 8003e50:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8003e54:	f88d 2004 	strb.w	r2, [sp, #4]
				Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 8003e58:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003e5c:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003e60:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
				Buffer[10]	= PrimitiveStates.Lampada._state;
 8003e64:	7a1b      	ldrb	r3, [r3, #8]
				Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003e66:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003e6a:	4a5b      	ldr	r2, [pc, #364]	; (8003fd8 <txBluetooth+0x278>)
				Buffer[10]	= PrimitiveStates.Lampada._state;
 8003e6c:	f88d 300a 	strb.w	r3, [sp, #10]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003e70:	8811      	ldrh	r1, [r2, #0]
				Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003e72:	8893      	ldrh	r3, [r2, #4]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003e74:	0a08      	lsrs	r0, r1, #8
				Buffer[8] 	= (uint16_t)Calendario.Horimetro_horas & 0x00FF;
 8003e76:	f88d 1008 	strb.w	r1, [sp, #8]
				Buffer[9] 	= (uint8_t)Calendario.Horimetro_parcial_min;
 8003e7a:	7891      	ldrb	r1, [r2, #2]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003e7c:	f88d 0007 	strb.w	r0, [sp, #7]
				Buffer[9] 	= (uint8_t)Calendario.Horimetro_parcial_min;
 8003e80:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003e84:	0a1a      	lsrs	r2, r3, #8
 8003e86:	f88d 200b 	strb.w	r2, [sp, #11]
				Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 8003e8a:	f88d 300c 	strb.w	r3, [sp, #12]
				bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003e8e:	220c      	movs	r2, #12
 8003e90:	e7cc      	b.n	8003e2c <txBluetooth+0xcc>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e92:	f641 0301 	movw	r3, #6145	; 0x1801
 8003e96:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= 0x01;									// Modelo
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <txBluetooth+0x274>)
 8003ea2:	89db      	ldrh	r3, [r3, #14]
 8003ea4:	0a1a      	lsrs	r2, r3, #8
				Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 8003ea6:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint8_t)0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[6] 	= (uint8_t)0;
 8003eb0:	f8ad 3006 	strh.w	r3, [sp, #6]
				Buffer[8]	= VERSAO;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <txBluetooth+0x278>)
				Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003ebc:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003ec0:	88da      	ldrh	r2, [r3, #6]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003ec2:	891b      	ldrh	r3, [r3, #8]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003ec4:	0a11      	lsrs	r1, r2, #8
 8003ec6:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 8003eca:	f88d 200a 	strb.w	r2, [sp, #10]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003ece:	e7d9      	b.n	8003e84 <txBluetooth+0x124>
				Buffer[0] = 0x01;
 8003ed0:	f641 1301 	movw	r3, #6401	; 0x1901
				float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003ed4:	4c3f      	ldr	r4, [pc, #252]	; (8003fd4 <txBluetooth+0x274>)
 8003ed6:	466a      	mov	r2, sp
 8003ed8:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
				Buffer[0] = 0x01;
 8003edc:	f8ad 3000 	strh.w	r3, [sp]
				float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	f7fd fe21 	bl	8001b28 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003ee6:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	; 0x88
 8003eea:	2306      	movs	r3, #6
 8003eec:	466a      	mov	r2, sp
 8003eee:	f7fd fe1b 	bl	8001b28 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003ef2:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 8003ef6:	230a      	movs	r3, #10
 8003ef8:	466a      	mov	r2, sp
 8003efa:	f7fd fe15 	bl	8001b28 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003efe:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8003f02:	ba5b      	rev16	r3, r3
 8003f04:	f8ad 300e 	strh.w	r3, [sp, #14]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 8003f08:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003f0c:	ba5b      	rev16	r3, r3
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003f0e:	2211      	movs	r2, #17
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003f10:	f8ad 3010 	strh.w	r3, [sp, #16]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003f14:	e78a      	b.n	8003e2c <txBluetooth+0xcc>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f16:	f242 0301 	movw	r3, #8193	; 0x2001
				float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003f1a:	4c2e      	ldr	r4, [pc, #184]	; (8003fd4 <txBluetooth+0x274>)
 8003f1c:	466a      	mov	r2, sp
 8003f1e:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f22:	f8ad 3000 	strh.w	r3, [sp]
				float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003f26:	2302      	movs	r3, #2
 8003f28:	f7fd fdfe 	bl	8001b28 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 8003f2c:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8003f30:	2306      	movs	r3, #6
 8003f32:	466a      	mov	r2, sp
 8003f34:	f7fd fdf8 	bl	8001b28 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 8003f38:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8003f3c:	230a      	movs	r3, #10
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7fd fdf2 	bl	8001b28 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 8003f44:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8003f48:	ba5b      	rev16	r3, r3
 8003f4a:	f8ad 300e 	strh.w	r3, [sp, #14]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003f4e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003f52:	e7db      	b.n	8003f0c <txBluetooth+0x1ac>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f54:	f642 1201 	movw	r2, #10497	; 0x2901
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f58:	f8ad 2000 	strh.w	r2, [sp]
				bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003f5c:	2202      	movs	r2, #2
				Buffer[2] 	= 0x30;									// FUNÇÃO -
 8003f5e:	f88d 3002 	strb.w	r3, [sp, #2]
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003f62:	4669      	mov	r1, sp
 8003f64:	4620      	mov	r0, r4
 8003f66:	e763      	b.n	8003e30 <txBluetooth+0xd0>
				FlagSincronia.flag=0;
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <txBluetooth+0x27c>)
 8003f6a:	7015      	strb	r5, [r2, #0]
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f6c:	f243 0201 	movw	r2, #12289	; 0x3001
 8003f70:	e7f2      	b.n	8003f58 <txBluetooth+0x1f8>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003f72:	f247 0301 	movw	r3, #28673	; 0x7001
 8003f76:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= eeprom.errorBuffer.errors[0];
 8003f7a:	4b19      	ldr	r3, [pc, #100]	; (8003fe0 <txBluetooth+0x280>)
 8003f7c:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8003f80:	f88d 2002 	strb.w	r2, [sp, #2]
				Buffer[3] 	= eeprom.errorBuffer.errors[1];
 8003f84:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003f88:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= eeprom.errorBuffer.errors[2];
 8003f8c:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8003f90:	f88d 2004 	strb.w	r2, [sp, #4]
				Buffer[5] 	= eeprom.errorBuffer.errors[3];
 8003f94:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8003f98:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[6] 	= eeprom.errorBuffer.errors[4];
 8003f9c:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8003fa0:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[7] 	= eeprom.errorBuffer.errors[5];
 8003fa4:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8003fa8:	f88d 2007 	strb.w	r2, [sp, #7]
				Buffer[8] 	= eeprom.errorBuffer.errors[6];
 8003fac:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8003fb0:	f88d 2008 	strb.w	r2, [sp, #8]
				Buffer[9] 	= eeprom.errorBuffer.errors[7];
 8003fb4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8003fb8:	f88d 2009 	strb.w	r2, [sp, #9]
				Buffer[10] 	= eeprom.errorBuffer.errors[8];
 8003fbc:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
				Buffer[11] 	= eeprom.errorBuffer.errors[9];
 8003fc0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
				Buffer[10] 	= eeprom.errorBuffer.errors[8];
 8003fc4:	f88d 200a 	strb.w	r2, [sp, #10]
				Buffer[11] 	= eeprom.errorBuffer.errors[9];
 8003fc8:	f88d 300b 	strb.w	r3, [sp, #11]
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003fcc:	220b      	movs	r2, #11
 8003fce:	e7c8      	b.n	8003f62 <txBluetooth+0x202>
 8003fd0:	200012ec 	.word	0x200012ec
 8003fd4:	200007e8 	.word	0x200007e8
 8003fd8:	200007d4 	.word	0x200007d4
 8003fdc:	200016c8 	.word	0x200016c8
 8003fe0:	20001b98 	.word	0x20001b98

08003fe4 <verificaLimiteSetpoint>:
			}
			osSemaphoreRelease (BinSemUartTxHandle);
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003fe4:	b538      	push	{r3, r4, r5, lr}
	if(canal->setPoint < canal->limite)
 8003fe6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003fe8:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003fea:	4628      	mov	r0, r5
 8003fec:	f7fc fa0a 	bl	8000404 <__aeabi_i2d>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003ff8:	f7fc fce0 	bl	80009bc <__aeabi_dcmplt>
 8003ffc:	b920      	cbnz	r0, 8004008 <verificaLimiteSetpoint+0x24>
		return;

	canal->setPoint = canal->limite;
 8003ffe:	4628      	mov	r0, r5
 8004000:	f7fc f9f0 	bl	80003e4 <__aeabi_ui2d>
 8004004:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8004008:	bd38      	pop	{r3, r4, r5, pc}
	...

0800400c <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <sincAutomatico+0x20>)
 800400e:	7818      	ldrb	r0, [r3, #0]
 8004010:	b950      	cbnz	r0, 8004028 <sincAutomatico+0x1c>
		if(FlagSincronia.cont<ENVIO_DE_SINCRONIAS){
 8004012:	2101      	movs	r1, #1
 8004014:	785a      	ldrb	r2, [r3, #1]
 8004016:	2a02      	cmp	r2, #2
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8004018:	bf9d      	ittte	ls
 800401a:	1852      	addls	r2, r2, r1
			return 1;
 800401c:	4608      	movls	r0, r1
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 800401e:	705a      	strbls	r2, [r3, #1]
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8004020:	7058      	strbhi	r0, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8004022:	bf88      	it	hi
 8004024:	7019      	strbhi	r1, [r3, #0]
			return 0;
 8004026:	4770      	bx	lr
		}
	}
	return 0;
 8004028:	2000      	movs	r0, #0
}
 800402a:	4770      	bx	lr
 800402c:	200016c8 	.word	0x200016c8

08004030 <rxBluetooth>:
void rxBluetooth(void){
 8004030:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!bluetooth.myQ_dataRx->is_empty(bluetooth.myQ_dataRx)) {
 8004032:	4ca2      	ldr	r4, [pc, #648]	; (80042bc <rxBluetooth+0x28c>)
 8004034:	68e0      	ldr	r0, [r4, #12]
 8004036:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004038:	4798      	blx	r3
 800403a:	4606      	mov	r6, r0
 800403c:	2800      	cmp	r0, #0
 800403e:	f040 8225 	bne.w	800448c <rxBluetooth+0x45c>
		if (bluetooth.myQ_dataRx->remove(bluetooth.myQ_dataRx) > 0) {
 8004042:	68e0      	ldr	r0, [r4, #12]
 8004044:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004046:	4798      	blx	r3
 8004048:	2800      	cmp	r0, #0
 800404a:	f340 821f 	ble.w	800448c <rxBluetooth+0x45c>
			switch (bluetooth.ComandoAtual._comando) {
 800404e:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 8004052:	2d35      	cmp	r5, #53	; 0x35
 8004054:	d833      	bhi.n	80040be <rxBluetooth+0x8e>
 8004056:	2d08      	cmp	r5, #8
 8004058:	d934      	bls.n	80040c4 <rxBluetooth+0x94>
 800405a:	3d09      	subs	r5, #9
 800405c:	2d2c      	cmp	r5, #44	; 0x2c
 800405e:	d831      	bhi.n	80040c4 <rxBluetooth+0x94>
 8004060:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004064:	00300056 	.word	0x00300056
 8004068:	00300030 	.word	0x00300030
 800406c:	00300030 	.word	0x00300030
 8004070:	00650030 	.word	0x00650030
 8004074:	00300030 	.word	0x00300030
 8004078:	00300030 	.word	0x00300030
 800407c:	00300037 	.word	0x00300037
 8004080:	00300054 	.word	0x00300054
 8004084:	00300030 	.word	0x00300030
 8004088:	00300030 	.word	0x00300030
 800408c:	00300030 	.word	0x00300030
 8004090:	00300030 	.word	0x00300030
 8004094:	00790068 	.word	0x00790068
 8004098:	009c0088 	.word	0x009c0088
 800409c:	003000dd 	.word	0x003000dd
 80040a0:	01440119 	.word	0x01440119
 80040a4:	0030016d 	.word	0x0030016d
 80040a8:	00300030 	.word	0x00300030
 80040ac:	00300030 	.word	0x00300030
 80040b0:	01570030 	.word	0x01570030
 80040b4:	00300030 	.word	0x00300030
 80040b8:	01ad0178 	.word	0x01ad0178
 80040bc:	01e2      	.short	0x01e2
 80040be:	2d75      	cmp	r5, #117	; 0x75
 80040c0:	f000 81d2 	beq.w	8004468 <rxBluetooth+0x438>
			osSemaphoreRelease (BinSemUartTxHandle);
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <rxBluetooth+0x290>)
 80040c6:	6818      	ldr	r0, [r3, #0]
}
 80040c8:	b004      	add	sp, #16
 80040ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osSemaphoreRelease (BinSemUartTxHandle);
 80040ce:	f004 b91b 	b.w	8008308 <osSemaphoreRelease>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA);
 80040d2:	2116      	movs	r1, #22
 80040d4:	4879      	ldr	r0, [pc, #484]	; (80042bc <rxBluetooth+0x28c>)
 80040d6:	f7fd f834 	bl	8001142 <putQueueDataTx>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 80040da:	2117      	movs	r1, #23
 80040dc:	4877      	ldr	r0, [pc, #476]	; (80042bc <rxBluetooth+0x28c>)
 80040de:	f7fd f830 	bl	8001142 <putQueueDataTx>
				if(sincAutomatico()){
 80040e2:	f7ff ff93 	bl	800400c <sincAutomatico>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d0ec      	beq.n	80040c4 <rxBluetooth+0x94>
					putQueueDataTx(&bluetooth, TX_SINCRONIA);
 80040ea:	2118      	movs	r1, #24
 80040ec:	4873      	ldr	r0, [pc, #460]	; (80042bc <rxBluetooth+0x28c>)
 80040ee:	f7fd f828 	bl	8001142 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 80040f2:	2119      	movs	r1, #25
 80040f4:	4871      	ldr	r0, [pc, #452]	; (80042bc <rxBluetooth+0x28c>)
 80040f6:	f7fd f824 	bl	8001142 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 80040fa:	2120      	movs	r1, #32
 80040fc:	486f      	ldr	r0, [pc, #444]	; (80042bc <rxBluetooth+0x28c>)
 80040fe:	f7fd f820 	bl	8001142 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_ERROS);
 8004102:	2170      	movs	r1, #112	; 0x70
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8004104:	486d      	ldr	r0, [pc, #436]	; (80042bc <rxBluetooth+0x28c>)
 8004106:	f7fd f81c 	bl	8001142 <putQueueDataTx>
				break;
 800410a:	e7db      	b.n	80040c4 <rxBluetooth+0x94>
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 800410c:	2118      	movs	r1, #24
 800410e:	e7f9      	b.n	8004104 <rxBluetooth+0xd4>
				osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8004110:	2200      	movs	r2, #0
 8004112:	2101      	movs	r1, #1
				osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8004114:	4b6b      	ldr	r3, [pc, #428]	; (80042c4 <rxBluetooth+0x294>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	f004 f90a 	bl	8008330 <osMessagePut>
				putQueueDataTx(&bluetooth, TX_RESETANDO);
 800411c:	2129      	movs	r1, #41	; 0x29
 800411e:	4867      	ldr	r0, [pc, #412]	; (80042bc <rxBluetooth+0x28c>)
 8004120:	f7fd f80f 	bl	8001142 <putQueueDataTx>
				osDelay(50);
 8004124:	2032      	movs	r0, #50	; 0x32
 8004126:	f004 f813 	bl	8008150 <osDelay>
				putQueueDataTx(&bluetooth, TX_RESETADO_OK);
 800412a:	2130      	movs	r1, #48	; 0x30
 800412c:	e7ea      	b.n	8004104 <rxBluetooth+0xd4>
				osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2102      	movs	r1, #2
 8004132:	e7ef      	b.n	8004114 <rxBluetooth+0xe4>
				MACRO_ANULA_INATIVIDADE
 8004134:	2200      	movs	r2, #0
 8004136:	4b64      	ldr	r3, [pc, #400]	; (80042c8 <rxBluetooth+0x298>)
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8004138:	4964      	ldr	r1, [pc, #400]	; (80042cc <rxBluetooth+0x29c>)
				MACRO_ANULA_INATIVIDADE
 800413a:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 800413c:	4864      	ldr	r0, [pc, #400]	; (80042d0 <rxBluetooth+0x2a0>)
 800413e:	2202      	movs	r2, #2
 8004140:	f7fd fcdc 	bl	8001afc <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8004144:	4863      	ldr	r0, [pc, #396]	; (80042d4 <rxBluetooth+0x2a4>)
 8004146:	f7ff ff4d 	bl	8003fe4 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_TETO);
 800414a:	2121      	movs	r1, #33	; 0x21
 800414c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
				bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 8004150:	485a      	ldr	r0, [pc, #360]	; (80042bc <rxBluetooth+0x28c>)
				bluetooth.aknowladge(&bluetooth,RX_APAGA_ERROS);
 8004152:	4798      	blx	r3
				break;
 8004154:	e7b6      	b.n	80040c4 <rxBluetooth+0x94>
				MACRO_ANULA_INATIVIDADE
 8004156:	2200      	movs	r2, #0
 8004158:	4b5b      	ldr	r3, [pc, #364]	; (80042c8 <rxBluetooth+0x298>)
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 800415a:	495c      	ldr	r1, [pc, #368]	; (80042cc <rxBluetooth+0x29c>)
				MACRO_ANULA_INATIVIDADE
 800415c:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 800415e:	485e      	ldr	r0, [pc, #376]	; (80042d8 <rxBluetooth+0x2a8>)
 8004160:	2202      	movs	r2, #2
 8004162:	f7fd fccb 	bl	8001afc <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8004166:	485d      	ldr	r0, [pc, #372]	; (80042dc <rxBluetooth+0x2ac>)
 8004168:	f7ff ff3c 	bl	8003fe4 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_LASTRO);
 800416c:	2122      	movs	r1, #34	; 0x22
 800416e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004172:	e7ed      	b.n	8004150 <rxBluetooth+0x120>
				MACRO_ANULA_INATIVIDADE
 8004174:	2200      	movs	r2, #0
 8004176:	4b54      	ldr	r3, [pc, #336]	; (80042c8 <rxBluetooth+0x298>)
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8004178:	7da1      	ldrb	r1, [r4, #22]
				MACRO_ANULA_INATIVIDADE
 800417a:	801a      	strh	r2, [r3, #0]
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 800417c:	7de2      	ldrb	r2, [r4, #23]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 800417e:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <rxBluetooth+0x2b0>)
 8004180:	b2c9      	uxtb	r1, r1
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8004182:	b2d2      	uxtb	r2, r2
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8004184:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004188:	f883 110b 	strb.w	r1, [r3, #267]	; 0x10b
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 800418c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004190:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMPO);
 8004194:	2123      	movs	r1, #35	; 0x23
 8004196:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800419a:	e7d9      	b.n	8004150 <rxBluetooth+0x120>
				MACRO_ANULA_INATIVIDADE
 800419c:	2200      	movs	r2, #0
 800419e:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <rxBluetooth+0x298>)
 80041a0:	801a      	strh	r2, [r3, #0]
				switch (PrimitiveStates.stateTimer) {
 80041a2:	4b4f      	ldr	r3, [pc, #316]	; (80042e0 <rxBluetooth+0x2b0>)
 80041a4:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	d036      	beq.n	800421a <rxBluetooth+0x1ea>
 80041ac:	2a02      	cmp	r2, #2
 80041ae:	d01e      	beq.n	80041ee <rxBluetooth+0x1be>
 80041b0:	bb7a      	cbnz	r2, 8004212 <rxBluetooth+0x1e2>
					PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 80041b2:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80041b6:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
					PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 80041ba:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 80041be:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041c2:	4a48      	ldr	r2, [pc, #288]	; (80042e4 <rxBluetooth+0x2b4>)
 80041c4:	6810      	ldr	r0, [r2, #0]
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80041c6:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80041ca:	2a01      	cmp	r2, #1
 80041cc:	d00a      	beq.n	80041e4 <rxBluetooth+0x1b4>
 80041ce:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80041d2:	2a01      	cmp	r2, #1
 80041d4:	d006      	beq.n	80041e4 <rxBluetooth+0x1b4>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80041d6:	2201      	movs	r2, #1
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041d8:	2104      	movs	r1, #4
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80041da:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041de:	f004 f800 	bl	80081e2 <osSignalSet>
					break;
 80041e2:	e016      	b.n	8004212 <rxBluetooth+0x1e2>
						PrimitiveStates.stateTimer = TIMER_idle;
 80041e4:	2200      	movs	r2, #0
						osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 80041e6:	2102      	movs	r1, #2
						PrimitiveStates.stateTimer = TIMER_idle;
 80041e8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
						osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 80041ec:	e7f7      	b.n	80041de <rxBluetooth+0x1ae>
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 80041ee:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80041f2:	2a01      	cmp	r2, #1
 80041f4:	d00a      	beq.n	800420c <rxBluetooth+0x1dc>
 80041f6:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80041fa:	2a01      	cmp	r2, #1
 80041fc:	d006      	beq.n	800420c <rxBluetooth+0x1dc>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 80041fe:	2201      	movs	r2, #1
					PrimitiveStates.stateTimer 	= TIMER_pausado;
 8004200:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004204:	4b37      	ldr	r3, [pc, #220]	; (80042e4 <rxBluetooth+0x2b4>)
 8004206:	2104      	movs	r1, #4
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	e7e8      	b.n	80041de <rxBluetooth+0x1ae>
						PrimitiveStates.stateTimer = TIMER_idle;
 800420c:	2200      	movs	r2, #0
 800420e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_TEMPO);
 8004212:	2124      	movs	r1, #36	; 0x24
 8004214:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004218:	e79a      	b.n	8004150 <rxBluetooth+0x120>
					PrimitiveStates.stateTimer 	= TIMER_pausado;
 800421a:	2202      	movs	r2, #2
 800421c:	e7f0      	b.n	8004200 <rxBluetooth+0x1d0>
				MACRO_ANULA_INATIVIDADE
 800421e:	2200      	movs	r2, #0
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <rxBluetooth+0x298>)
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8004222:	492a      	ldr	r1, [pc, #168]	; (80042cc <rxBluetooth+0x29c>)
				MACRO_ANULA_INATIVIDADE
 8004224:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8004226:	482a      	ldr	r0, [pc, #168]	; (80042d0 <rxBluetooth+0x2a0>)
 8004228:	2202      	movs	r2, #2
 800422a:	f7fd fc67 	bl	8001afc <vetor2b_TO_Double>
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 800422e:	2204      	movs	r2, #4
 8004230:	4926      	ldr	r1, [pc, #152]	; (80042cc <rxBluetooth+0x29c>)
 8004232:	4829      	ldr	r0, [pc, #164]	; (80042d8 <rxBluetooth+0x2a8>)
 8004234:	f7fd fc62 	bl	8001afc <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8004238:	4828      	ldr	r0, [pc, #160]	; (80042dc <rxBluetooth+0x2ac>)
 800423a:	f7ff fed3 	bl	8003fe4 <verificaLimiteSetpoint>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 800423e:	4825      	ldr	r0, [pc, #148]	; (80042d4 <rxBluetooth+0x2a4>)
 8004240:	f7ff fed0 	bl	8003fe4 <verificaLimiteSetpoint>
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004244:	7ea2      	ldrb	r2, [r4, #26]
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8004246:	7ee3      	ldrb	r3, [r4, #27]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004248:	4d25      	ldr	r5, [pc, #148]	; (80042e0 <rxBluetooth+0x2b0>)
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 800424a:	b2db      	uxtb	r3, r3
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 800424c:	b2d2      	uxtb	r2, r2
				contadorOutput(&outPuts);
 800424e:	4826      	ldr	r0, [pc, #152]	; (80042e8 <rxBluetooth+0x2b8>)
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8004250:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004254:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004258:	f885 2109 	strb.w	r2, [r5, #265]	; 0x109
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 800425c:	f885 210b 	strb.w	r2, [r5, #267]	; 0x10b
				contadorOutput(&outPuts);
 8004260:	f7fe f98d 	bl	800257e <contadorOutput>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8004264:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
 8004268:	2b01      	cmp	r3, #1
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <rxBluetooth+0x2b4>)
 800426c:	d00e      	beq.n	800428c <rxBluetooth+0x25c>
 800426e:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 8004272:	2a01      	cmp	r2, #1
 8004274:	d00a      	beq.n	800428c <rxBluetooth+0x25c>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8004276:	2201      	movs	r2, #1
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004278:	2104      	movs	r1, #4
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 800427a:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	f003 ffaf 	bl	80081e2 <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_RECEITA);
 8004284:	2125      	movs	r1, #37	; 0x25
 8004286:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800428a:	e761      	b.n	8004150 <rxBluetooth+0x120>
					PrimitiveStates.stateTimer = TIMER_idle;
 800428c:	2200      	movs	r2, #0
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 800428e:	2102      	movs	r1, #2
					PrimitiveStates.stateTimer = TIMER_idle;
 8004290:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8004294:	e7f3      	b.n	800427e <rxBluetooth+0x24e>
				MACRO_ANULA_INATIVIDADE
 8004296:	2200      	movs	r2, #0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <rxBluetooth+0x298>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800429a:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 800429c:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800429e:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <rxBluetooth+0x2b4>)
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	f003 ff9e 	bl	80081e2 <osSignalSet>
				onDigital(&PrimitiveStates.Lampada);
 80042a6:	480e      	ldr	r0, [pc, #56]	; (80042e0 <rxBluetooth+0x2b0>)
 80042a8:	f7fe f955 	bl	8002556 <onDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 80042ac:	2117      	movs	r1, #23
 80042ae:	4803      	ldr	r0, [pc, #12]	; (80042bc <rxBluetooth+0x28c>)
 80042b0:	f7fc ff47 	bl	8001142 <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_LIGA_LAMPADA);
 80042b4:	2127      	movs	r1, #39	; 0x27
 80042b6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80042ba:	e749      	b.n	8004150 <rxBluetooth+0x120>
 80042bc:	200012ec 	.word	0x200012ec
 80042c0:	200007d0 	.word	0x200007d0
 80042c4:	200007e0 	.word	0x200007e0
 80042c8:	200016ca 	.word	0x200016ca
 80042cc:	20001300 	.word	0x20001300
 80042d0:	20000890 	.word	0x20000890
 80042d4:	20000860 	.word	0x20000860
 80042d8:	200008d8 	.word	0x200008d8
 80042dc:	200008a8 	.word	0x200008a8
 80042e0:	200007e8 	.word	0x200007e8
 80042e4:	2000103c 	.word	0x2000103c
 80042e8:	20001640 	.word	0x20001640
				MACRO_ANULA_INATIVIDADE
 80042ec:	2200      	movs	r2, #0
 80042ee:	4b68      	ldr	r3, [pc, #416]	; (8004490 <rxBluetooth+0x460>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80042f0:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 80042f2:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80042f4:	4b67      	ldr	r3, [pc, #412]	; (8004494 <rxBluetooth+0x464>)
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	f003 ff73 	bl	80081e2 <osSignalSet>
				offDigital(&PrimitiveStates.Lampada);
 80042fc:	4866      	ldr	r0, [pc, #408]	; (8004498 <rxBluetooth+0x468>)
 80042fe:	f7fe f934 	bl	800256a <offDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 8004302:	2117      	movs	r1, #23
 8004304:	4865      	ldr	r0, [pc, #404]	; (800449c <rxBluetooth+0x46c>)
 8004306:	f7fc ff1c 	bl	8001142 <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_DESLIGA_LAMPADA);
 800430a:	2128      	movs	r1, #40	; 0x28
 800430c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004310:	e71e      	b.n	8004150 <rxBluetooth+0x120>
				PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8004312:	7de2      	ldrb	r2, [r4, #23]
 8004314:	4b60      	ldr	r3, [pc, #384]	; (8004498 <rxBluetooth+0x468>)
				osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8004316:	2104      	movs	r1, #4
				PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 8004318:	81da      	strh	r2, [r3, #14]
				osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 800431a:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <rxBluetooth+0x470>)
 800431c:	2200      	movs	r2, #0
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	f004 f806 	bl	8008330 <osMessagePut>
				FlagSincronia.cont=0;
 8004324:	2200      	movs	r2, #0
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8004326:	2118      	movs	r1, #24
				FlagSincronia.cont=0;
 8004328:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <rxBluetooth+0x474>)
 800432a:	705a      	strb	r2, [r3, #1]
				putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 800432c:	485b      	ldr	r0, [pc, #364]	; (800449c <rxBluetooth+0x46c>)
 800432e:	f7fc ff08 	bl	8001142 <putQueueDataTx>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004332:	4b58      	ldr	r3, [pc, #352]	; (8004494 <rxBluetooth+0x464>)
 8004334:	2104      	movs	r1, #4
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	f003 ff53 	bl	80081e2 <osSignalSet>
				break;
 800433c:	e6c2      	b.n	80040c4 <rxBluetooth+0x94>
				desligaForno();
 800433e:	f7fe fa51 	bl	80027e4 <desligaForno>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004342:	4b54      	ldr	r3, [pc, #336]	; (8004494 <rxBluetooth+0x464>)
 8004344:	2104      	movs	r1, #4
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	f003 ff4b 	bl	80081e2 <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 800434c:	2129      	movs	r1, #41	; 0x29
 800434e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004352:	e6fd      	b.n	8004150 <rxBluetooth+0x120>
				MACRO_ANULA_INATIVIDADE
 8004354:	2400      	movs	r4, #0
 8004356:	4b4e      	ldr	r3, [pc, #312]	; (8004490 <rxBluetooth+0x460>)
				vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8004358:	2202      	movs	r2, #2
 800435a:	4953      	ldr	r1, [pc, #332]	; (80044a8 <rxBluetooth+0x478>)
 800435c:	4853      	ldr	r0, [pc, #332]	; (80044ac <rxBluetooth+0x47c>)
				MACRO_ANULA_INATIVIDADE
 800435e:	801c      	strh	r4, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8004360:	f7fd fb9e 	bl	8001aa0 <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8004364:	2206      	movs	r2, #6
 8004366:	4950      	ldr	r1, [pc, #320]	; (80044a8 <rxBluetooth+0x478>)
 8004368:	4851      	ldr	r0, [pc, #324]	; (80044b0 <rxBluetooth+0x480>)
 800436a:	f7fd fb99 	bl	8001aa0 <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 800436e:	220a      	movs	r2, #10
 8004370:	494d      	ldr	r1, [pc, #308]	; (80044a8 <rxBluetooth+0x478>)
 8004372:	4850      	ldr	r0, [pc, #320]	; (80044b4 <rxBluetooth+0x484>)
 8004374:	f7fd fb94 	bl	8001aa0 <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8004378:	220e      	movs	r2, #14
 800437a:	494b      	ldr	r1, [pc, #300]	; (80044a8 <rxBluetooth+0x478>)
 800437c:	484e      	ldr	r0, [pc, #312]	; (80044b8 <rxBluetooth+0x488>)
 800437e:	f7fd fbab 	bl	8001ad8 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8004382:	2210      	movs	r2, #16
 8004384:	4948      	ldr	r1, [pc, #288]	; (80044a8 <rxBluetooth+0x478>)
 8004386:	484d      	ldr	r0, [pc, #308]	; (80044bc <rxBluetooth+0x48c>)
 8004388:	f7fd fba6 	bl	8001ad8 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 800438c:	484c      	ldr	r0, [pc, #304]	; (80044c0 <rxBluetooth+0x490>)
 800438e:	f7ff fe29 	bl	8003fe4 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8004392:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <rxBluetooth+0x470>)
 8004394:	4622      	mov	r2, r4
 8004396:	2108      	movs	r1, #8
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	f003 ffc9 	bl	8008330 <osMessagePut>
				PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 800439e:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <rxBluetooth+0x468>)
 80043a0:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80043a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043a8:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80043ac:	e9cd 0100 	strd	r0, r1, [sp]
 80043b0:	4844      	ldr	r0, [pc, #272]	; (80044c4 <rxBluetooth+0x494>)
 80043b2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043b6:	f7ff f87b 	bl	80034b0 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 80043ba:	2119      	movs	r1, #25
 80043bc:	e7b6      	b.n	800432c <rxBluetooth+0x2fc>
				MACRO_ANULA_INATIVIDADE
 80043be:	2400      	movs	r4, #0
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <rxBluetooth+0x460>)
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 80043c2:	2202      	movs	r2, #2
 80043c4:	4938      	ldr	r1, [pc, #224]	; (80044a8 <rxBluetooth+0x478>)
 80043c6:	4840      	ldr	r0, [pc, #256]	; (80044c8 <rxBluetooth+0x498>)
				MACRO_ANULA_INATIVIDADE
 80043c8:	801c      	strh	r4, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 80043ca:	f7fd fb69 	bl	8001aa0 <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 80043ce:	2206      	movs	r2, #6
 80043d0:	4935      	ldr	r1, [pc, #212]	; (80044a8 <rxBluetooth+0x478>)
 80043d2:	483e      	ldr	r0, [pc, #248]	; (80044cc <rxBluetooth+0x49c>)
 80043d4:	f7fd fb64 	bl	8001aa0 <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 80043d8:	220a      	movs	r2, #10
 80043da:	4933      	ldr	r1, [pc, #204]	; (80044a8 <rxBluetooth+0x478>)
 80043dc:	483c      	ldr	r0, [pc, #240]	; (80044d0 <rxBluetooth+0x4a0>)
 80043de:	f7fd fb5f 	bl	8001aa0 <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 80043e2:	220e      	movs	r2, #14
 80043e4:	4930      	ldr	r1, [pc, #192]	; (80044a8 <rxBluetooth+0x478>)
 80043e6:	483b      	ldr	r0, [pc, #236]	; (80044d4 <rxBluetooth+0x4a4>)
 80043e8:	f7fd fb76 	bl	8001ad8 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 80043ec:	2210      	movs	r2, #16
 80043ee:	492e      	ldr	r1, [pc, #184]	; (80044a8 <rxBluetooth+0x478>)
 80043f0:	4839      	ldr	r0, [pc, #228]	; (80044d8 <rxBluetooth+0x4a8>)
 80043f2:	f7fd fb71 	bl	8001ad8 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 80043f6:	4839      	ldr	r0, [pc, #228]	; (80044dc <rxBluetooth+0x4ac>)
 80043f8:	f7ff fdf4 	bl	8003fe4 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <rxBluetooth+0x470>)
 80043fe:	4622      	mov	r2, r4
 8004400:	2108      	movs	r1, #8
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	f003 ff94 	bl	8008330 <osMessagePut>
				PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 8004408:	4b23      	ldr	r3, [pc, #140]	; (8004498 <rxBluetooth+0x468>)
 800440a:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 800440e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004412:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 8004416:	e9cd 0100 	strd	r0, r1, [sp]
 800441a:	4831      	ldr	r0, [pc, #196]	; (80044e0 <rxBluetooth+0x4b0>)
 800441c:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 8004420:	f7ff f846 	bl	80034b0 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 8004424:	2120      	movs	r1, #32
 8004426:	e781      	b.n	800432c <rxBluetooth+0x2fc>
				MACRO_ANULA_INATIVIDADE
 8004428:	2200      	movs	r2, #0
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800442a:	4d1a      	ldr	r5, [pc, #104]	; (8004494 <rxBluetooth+0x464>)
				MACRO_ANULA_INATIVIDADE
 800442c:	4b18      	ldr	r3, [pc, #96]	; (8004490 <rxBluetooth+0x460>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800442e:	2104      	movs	r1, #4
 8004430:	6828      	ldr	r0, [r5, #0]
				MACRO_ANULA_INATIVIDADE
 8004432:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004434:	f003 fed5 	bl	80081e2 <osSignalSet>
				PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 8004438:	4b17      	ldr	r3, [pc, #92]	; (8004498 <rxBluetooth+0x468>)
 800443a:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 800443e:	2a00      	cmp	r2, #0
 8004440:	bf0c      	ite	eq
 8004442:	2201      	moveq	r2, #1
 8004444:	2200      	movne	r2, #0
 8004446:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				if(PrimitiveStates.Buzzer){
 800444a:	d103      	bne.n	8004454 <rxBluetooth+0x424>
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800444c:	2104      	movs	r1, #4
 800444e:	6828      	ldr	r0, [r5, #0]
 8004450:	f003 fec7 	bl	80081e2 <osSignalSet>
				osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8004454:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <rxBluetooth+0x470>)
 8004456:	2109      	movs	r1, #9
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	f003 ff68 	bl	8008330 <osMessagePut>
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 8004460:	2135      	movs	r1, #53	; 0x35
 8004462:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004466:	e673      	b.n	8004150 <rxBluetooth+0x120>
				MACRO_ANULA_INATIVIDADE
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <rxBluetooth+0x460>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800446a:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 800446c:	801e      	strh	r6, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <rxBluetooth+0x464>)
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f003 feb6 	bl	80081e2 <osSignalSet>
				osMessagePut(FilaEepromHandle, CEepromClearErrors, 0);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <rxBluetooth+0x470>)
 8004478:	210a      	movs	r1, #10
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	4632      	mov	r2, r6
 800447e:	f003 ff57 	bl	8008330 <osMessagePut>
				bluetooth.aknowladge(&bluetooth,RX_APAGA_ERROS);
 8004482:	4629      	mov	r1, r5
 8004484:	4620      	mov	r0, r4
 8004486:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800448a:	e662      	b.n	8004152 <rxBluetooth+0x122>
}
 800448c:	b004      	add	sp, #16
 800448e:	bd70      	pop	{r4, r5, r6, pc}
 8004490:	200016ca 	.word	0x200016ca
 8004494:	2000103c 	.word	0x2000103c
 8004498:	200007e8 	.word	0x200007e8
 800449c:	200012ec 	.word	0x200012ec
 80044a0:	200007e0 	.word	0x200007e0
 80044a4:	200016c8 	.word	0x200016c8
 80044a8:	20001300 	.word	0x20001300
 80044ac:	20000868 	.word	0x20000868
 80044b0:	20000870 	.word	0x20000870
 80044b4:	20000878 	.word	0x20000878
 80044b8:	2000089a 	.word	0x2000089a
 80044bc:	20000898 	.word	0x20000898
 80044c0:	20000860 	.word	0x20000860
 80044c4:	20001cb0 	.word	0x20001cb0
 80044c8:	200008b0 	.word	0x200008b0
 80044cc:	200008b8 	.word	0x200008b8
 80044d0:	200008c0 	.word	0x200008c0
 80044d4:	200008e2 	.word	0x200008e2
 80044d8:	200008e0 	.word	0x200008e0
 80044dc:	200008a8 	.word	0x200008a8
 80044e0:	20001c40 	.word	0x20001c40

080044e4 <StartBluetooth>:
{
 80044e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	initBluetooth();
 80044e6:	f7ff fbbd 	bl	8003c64 <initBluetooth>
			txBleComando(&bluetooth);
 80044ea:	4c0f      	ldr	r4, [pc, #60]	; (8004528 <StartBluetooth+0x44>)
		evt = osSignalWait(newMessage, osWaitForever);
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	210a      	movs	r1, #10
 80044f2:	a801      	add	r0, sp, #4
 80044f4:	f003 fe9e 	bl	8008234 <osSignalWait>
		if (evt.status == osEventSignal) {
 80044f8:	9b01      	ldr	r3, [sp, #4]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d106      	bne.n	800450c <StartBluetooth+0x28>
			txBleComando(&bluetooth);
 80044fe:	4620      	mov	r0, r4
 8004500:	f7fd f88a 	bl	8001618 <txBleComando>
			rxBluetooth();
 8004504:	f7ff fd94 	bl	8004030 <rxBluetooth>
			txBluetooth();
 8004508:	f7ff fc2a 	bl	8003d60 <txBluetooth>
		if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx))
 800450c:	6920      	ldr	r0, [r4, #16]
 800450e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004510:	4798      	blx	r3
 8004512:	b918      	cbnz	r0, 800451c <StartBluetooth+0x38>
			osSignalSet(bluetooth.Task, newMessage);
 8004514:	210a      	movs	r1, #10
 8004516:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004518:	f003 fe63 	bl	80081e2 <osSignalSet>
		osThreadYield();
 800451c:	f003 fe0c 	bl	8008138 <osThreadYield>
		osDelay(40);
 8004520:	2028      	movs	r0, #40	; 0x28
 8004522:	f003 fe15 	bl	8008150 <osDelay>
		evt = osSignalWait(newMessage, osWaitForever);
 8004526:	e7e1      	b.n	80044ec <StartBluetooth+0x8>
 8004528:	200012ec 	.word	0x200012ec

0800452c <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 800452c:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 800452e:	4d0a      	ldr	r5, [pc, #40]	; (8004558 <sequencia2Buzzer+0x2c>)
	onDigital(&PrimitiveStates.Lampada);
 8004530:	4c0a      	ldr	r4, [pc, #40]	; (800455c <sequencia2Buzzer+0x30>)
	M_BUZZER_ON
 8004532:	210c      	movs	r1, #12
 8004534:	4628      	mov	r0, r5
 8004536:	f003 f8e9 	bl	800770c <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 800453a:	4620      	mov	r0, r4
 800453c:	f7fe f80b 	bl	8002556 <onDigital>
	osDelay(100);
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	f003 fe05 	bl	8008150 <osDelay>
	M_BUZZER_OFF
 8004546:	4628      	mov	r0, r5
 8004548:	210c      	movs	r1, #12
 800454a:	f003 f91b 	bl	8007784 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 800454e:	4620      	mov	r0, r4
}
 8004550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 8004554:	f7fe b809 	b.w	800256a <offDigital>
 8004558:	2000151c 	.word	0x2000151c
 800455c:	200007e8 	.word	0x200007e8

08004560 <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 8004560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004562:	b085      	sub	sp, #20
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO | SINAL_CONECTOU;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	211f      	movs	r1, #31
 800456a:	a801      	add	r0, sp, #4
 800456c:	f003 fe62 	bl	8008234 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 8004570:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 8004574:	2b08      	cmp	r3, #8
 8004576:	f040 80c0 	bne.w	80046fa <waitBuzzerSignal+0x19a>

		if (evt.value.signals & SINAL_TEMP_REACH) {
 800457a:	07e5      	lsls	r5, r4, #31
 800457c:	d514      	bpl.n	80045a8 <waitBuzzerSignal+0x48>
			onDigital(&PrimitiveStates.Lampada);
 800457e:	4860      	ldr	r0, [pc, #384]	; (8004700 <waitBuzzerSignal+0x1a0>)
 8004580:	f7fd ffe9 	bl	8002556 <onDigital>
 8004584:	2505      	movs	r5, #5
			// execute o padrão de buzzer para SINAL_TEMP_REACH
			for (int i = 0; i < 5; ++i) {
				M_BUZZER_ON
 8004586:	4e5f      	ldr	r6, [pc, #380]	; (8004704 <waitBuzzerSignal+0x1a4>)
 8004588:	210c      	movs	r1, #12
 800458a:	4630      	mov	r0, r6
 800458c:	f003 f8be 	bl	800770c <HAL_TIM_PWM_Start>
				osDelay(50);
 8004590:	2032      	movs	r0, #50	; 0x32
 8004592:	f003 fddd 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 8004596:	210c      	movs	r1, #12
 8004598:	4630      	mov	r0, r6
 800459a:	f003 f8f3 	bl	8007784 <HAL_TIM_PWM_Stop>
				osDelay(30);
 800459e:	201e      	movs	r0, #30
 80045a0:	f003 fdd6 	bl	8008150 <osDelay>
			for (int i = 0; i < 5; ++i) {
 80045a4:	3d01      	subs	r5, #1
 80045a6:	d1ef      	bne.n	8004588 <waitBuzzerSignal+0x28>
			}
		}

		if (evt.value.signals & SINAL_COMFIRMA) {
 80045a8:	0760      	lsls	r0, r4, #29
 80045aa:	d519      	bpl.n	80045e0 <waitBuzzerSignal+0x80>
			//retorna caso buzzer desabilitado
			if(!PrimitiveStates.Buzzer){
 80045ac:	4b54      	ldr	r3, [pc, #336]	; (8004700 <waitBuzzerSignal+0x1a0>)
 80045ae:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80045b2:	b933      	cbnz	r3, 80045c2 <waitBuzzerSignal+0x62>
				M_BUZZER_OFF
 80045b4:	210c      	movs	r1, #12
 80045b6:	4853      	ldr	r0, [pc, #332]	; (8004704 <waitBuzzerSignal+0x1a4>)
			offDigital(&PrimitiveStates.LedVerde);
			osDelay(150);

		}
	}
}
 80045b8:	b005      	add	sp, #20
 80045ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				M_BUZZER_OFF
 80045be:	f003 b8e1 	b.w	8007784 <HAL_TIM_PWM_Stop>
			M_BUZZER_ON
 80045c2:	210c      	movs	r1, #12
 80045c4:	484f      	ldr	r0, [pc, #316]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80045c6:	f003 f8a1 	bl	800770c <HAL_TIM_PWM_Start>
			osDelay(70);
 80045ca:	2046      	movs	r0, #70	; 0x46
 80045cc:	f003 fdc0 	bl	8008150 <osDelay>
			M_BUZZER_OFF
 80045d0:	210c      	movs	r1, #12
 80045d2:	484c      	ldr	r0, [pc, #304]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80045d4:	f003 f8d6 	bl	8007784 <HAL_TIM_PWM_Stop>
			osDelay(500);
 80045d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045dc:	f003 fdb8 	bl	8008150 <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 80045e0:	07a1      	lsls	r1, r4, #30
 80045e2:	d520      	bpl.n	8004626 <waitBuzzerSignal+0xc6>
			if(!PrimitiveStates.Buzzer){
 80045e4:	4b46      	ldr	r3, [pc, #280]	; (8004700 <waitBuzzerSignal+0x1a0>)
 80045e6:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0e2      	beq.n	80045b4 <waitBuzzerSignal+0x54>
				M_BUZZER_ON
 80045ee:	210c      	movs	r1, #12
 80045f0:	4844      	ldr	r0, [pc, #272]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80045f2:	f003 f88b 	bl	800770c <HAL_TIM_PWM_Start>
				osDelay(70);
 80045f6:	2046      	movs	r0, #70	; 0x46
 80045f8:	f003 fdaa 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 80045fc:	210c      	movs	r1, #12
 80045fe:	4841      	ldr	r0, [pc, #260]	; (8004704 <waitBuzzerSignal+0x1a4>)
 8004600:	f003 f8c0 	bl	8007784 <HAL_TIM_PWM_Stop>
				osDelay(50);
 8004604:	2032      	movs	r0, #50	; 0x32
 8004606:	f003 fda3 	bl	8008150 <osDelay>
				M_BUZZER_ON
 800460a:	210c      	movs	r1, #12
 800460c:	483d      	ldr	r0, [pc, #244]	; (8004704 <waitBuzzerSignal+0x1a4>)
 800460e:	f003 f87d 	bl	800770c <HAL_TIM_PWM_Start>
				osDelay(70);
 8004612:	2046      	movs	r0, #70	; 0x46
 8004614:	f003 fd9c 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 8004618:	210c      	movs	r1, #12
 800461a:	483a      	ldr	r0, [pc, #232]	; (8004704 <waitBuzzerSignal+0x1a4>)
 800461c:	f003 f8b2 	bl	8007784 <HAL_TIM_PWM_Stop>
				osDelay(50);
 8004620:	2032      	movs	r0, #50	; 0x32
 8004622:	f003 fd95 	bl	8008150 <osDelay>
		if (evt.value.signals & SINAL_PRONTO) {
 8004626:	0722      	lsls	r2, r4, #28
 8004628:	d51b      	bpl.n	8004662 <waitBuzzerSignal+0x102>
 800462a:	250a      	movs	r5, #10
				M_BUZZER_ON
 800462c:	4f35      	ldr	r7, [pc, #212]	; (8004704 <waitBuzzerSignal+0x1a4>)
				onDigital(&PrimitiveStates.Lampada);
 800462e:	4e34      	ldr	r6, [pc, #208]	; (8004700 <waitBuzzerSignal+0x1a0>)
				M_BUZZER_ON
 8004630:	210c      	movs	r1, #12
 8004632:	4638      	mov	r0, r7
 8004634:	f003 f86a 	bl	800770c <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8004638:	4630      	mov	r0, r6
 800463a:	f7fd ff8c 	bl	8002556 <onDigital>
				osDelay(250);
 800463e:	20fa      	movs	r0, #250	; 0xfa
 8004640:	f003 fd86 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 8004644:	210c      	movs	r1, #12
 8004646:	4638      	mov	r0, r7
 8004648:	f003 f89c 	bl	8007784 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 800464c:	4630      	mov	r0, r6
 800464e:	f7fd ff8c 	bl	800256a <offDigital>
				osDelay(100);
 8004652:	2064      	movs	r0, #100	; 0x64
 8004654:	f003 fd7c 	bl	8008150 <osDelay>
			for (int i = 0; i < N_REP_SINAL_PRONTO; ++i) {
 8004658:	3d01      	subs	r5, #1
 800465a:	d1e9      	bne.n	8004630 <waitBuzzerSignal+0xd0>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 800465c:	4828      	ldr	r0, [pc, #160]	; (8004700 <waitBuzzerSignal+0x1a0>)
 800465e:	f7fd ff7a 	bl	8002556 <onDigital>
		if (evt.value.signals & SINAL_CONECTOU) {
 8004662:	06e3      	lsls	r3, r4, #27
 8004664:	d549      	bpl.n	80046fa <waitBuzzerSignal+0x19a>
			if(!PrimitiveStates.Buzzer){
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <waitBuzzerSignal+0x1a0>)
				M_BUZZER_OFF
 8004668:	210c      	movs	r1, #12
			if(!PrimitiveStates.Buzzer){
 800466a:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
				M_BUZZER_OFF
 800466e:	4825      	ldr	r0, [pc, #148]	; (8004704 <waitBuzzerSignal+0x1a4>)
			if(!PrimitiveStates.Buzzer){
 8004670:	bb43      	cbnz	r3, 80046c4 <waitBuzzerSignal+0x164>
				M_BUZZER_OFF
 8004672:	f003 f887 	bl	8007784 <HAL_TIM_PWM_Stop>
			onDigital(&PrimitiveStates.LedTeto);
 8004676:	4824      	ldr	r0, [pc, #144]	; (8004708 <waitBuzzerSignal+0x1a8>)
 8004678:	f7fd ff6d 	bl	8002556 <onDigital>
			osDelay(150);
 800467c:	2096      	movs	r0, #150	; 0x96
 800467e:	f003 fd67 	bl	8008150 <osDelay>
			onDigital(&PrimitiveStates.LedLastro);
 8004682:	4822      	ldr	r0, [pc, #136]	; (800470c <waitBuzzerSignal+0x1ac>)
 8004684:	f7fd ff67 	bl	8002556 <onDigital>
			osDelay(150);
 8004688:	2096      	movs	r0, #150	; 0x96
 800468a:	f003 fd61 	bl	8008150 <osDelay>
			onDigital(&PrimitiveStates.LedVerde);
 800468e:	4820      	ldr	r0, [pc, #128]	; (8004710 <waitBuzzerSignal+0x1b0>)
 8004690:	f7fd ff61 	bl	8002556 <onDigital>
			osDelay(150);
 8004694:	2096      	movs	r0, #150	; 0x96
 8004696:	f003 fd5b 	bl	8008150 <osDelay>
			offDigital(&PrimitiveStates.LedTeto);
 800469a:	481b      	ldr	r0, [pc, #108]	; (8004708 <waitBuzzerSignal+0x1a8>)
 800469c:	f7fd ff65 	bl	800256a <offDigital>
			osDelay(150);
 80046a0:	2096      	movs	r0, #150	; 0x96
 80046a2:	f003 fd55 	bl	8008150 <osDelay>
			offDigital(&PrimitiveStates.LedLastro);
 80046a6:	4819      	ldr	r0, [pc, #100]	; (800470c <waitBuzzerSignal+0x1ac>)
 80046a8:	f7fd ff5f 	bl	800256a <offDigital>
			osDelay(150);
 80046ac:	2096      	movs	r0, #150	; 0x96
 80046ae:	f003 fd4f 	bl	8008150 <osDelay>
			offDigital(&PrimitiveStates.LedVerde);
 80046b2:	4817      	ldr	r0, [pc, #92]	; (8004710 <waitBuzzerSignal+0x1b0>)
 80046b4:	f7fd ff59 	bl	800256a <offDigital>
			osDelay(150);
 80046b8:	2096      	movs	r0, #150	; 0x96
}
 80046ba:	b005      	add	sp, #20
 80046bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			osDelay(150);
 80046c0:	f003 bd46 	b.w	8008150 <osDelay>
				M_BUZZER_ON
 80046c4:	f003 f822 	bl	800770c <HAL_TIM_PWM_Start>
				osDelay(30);
 80046c8:	201e      	movs	r0, #30
 80046ca:	f003 fd41 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 80046ce:	210c      	movs	r1, #12
 80046d0:	480c      	ldr	r0, [pc, #48]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80046d2:	f003 f857 	bl	8007784 <HAL_TIM_PWM_Stop>
				osDelay(20);
 80046d6:	2014      	movs	r0, #20
 80046d8:	f003 fd3a 	bl	8008150 <osDelay>
				M_BUZZER_ON
 80046dc:	210c      	movs	r1, #12
 80046de:	4809      	ldr	r0, [pc, #36]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80046e0:	f003 f814 	bl	800770c <HAL_TIM_PWM_Start>
				osDelay(30);
 80046e4:	201e      	movs	r0, #30
 80046e6:	f003 fd33 	bl	8008150 <osDelay>
				M_BUZZER_OFF
 80046ea:	210c      	movs	r1, #12
 80046ec:	4805      	ldr	r0, [pc, #20]	; (8004704 <waitBuzzerSignal+0x1a4>)
 80046ee:	f003 f849 	bl	8007784 <HAL_TIM_PWM_Stop>
				osDelay(20);
 80046f2:	2014      	movs	r0, #20
 80046f4:	f003 fd2c 	bl	8008150 <osDelay>
 80046f8:	e7bd      	b.n	8004676 <waitBuzzerSignal+0x116>
}
 80046fa:	b005      	add	sp, #20
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fe:	bf00      	nop
 8004700:	200007e8 	.word	0x200007e8
 8004704:	2000151c 	.word	0x2000151c
 8004708:	20000830 	.word	0x20000830
 800470c:	20000848 	.word	0x20000848
 8004710:	20000818 	.word	0x20000818

08004714 <StartBuzzer>:
{
 8004714:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 8004716:	f7ff ff09 	bl	800452c <sequencia2Buzzer>
		waitBuzzerSignal();
 800471a:	f7ff ff21 	bl	8004560 <waitBuzzerSignal>
		osThreadYield();
 800471e:	f003 fd0b 	bl	8008138 <osThreadYield>
		osDelay(100);
 8004722:	2064      	movs	r0, #100	; 0x64
 8004724:	f003 fd14 	bl	8008150 <osDelay>
	for(;;)
 8004728:	e7f7      	b.n	800471a <StartBuzzer+0x6>
 800472a:	0000      	movs	r0, r0
 800472c:	0000      	movs	r0, r0
	...

08004730 <setupEepromVarArr>:
		osThreadYield();
		osDelay(500);
	}
}

void setupEepromVarArr(void){
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	// tempo de LUZ.
	init_objArrEeprom(&E_tempoDelayLuz, SOFT_RESET, addrTEMPO_LUZ, DATA_16BITS, &PrimitiveStates.Lampada.limitOn);
 8004734:	2301      	movs	r3, #1
 8004736:	f8df a318 	ldr.w	sl, [pc, #792]	; 8004a50 <setupEepromVarArr+0x320>
 800473a:	4cc6      	ldr	r4, [pc, #792]	; (8004a54 <setupEepromVarArr+0x324>)
	E_tempoDelayLuz.M_setStdValues16bits(&E_tempoDelayLuz, 0 ,TIME_LAMPADA,6000);
	eeprom.M_AddOnArr(&eeprom,	&E_tempoDelayLuz);
 800473c:	4fc6      	ldr	r7, [pc, #792]	; (8004a58 <setupEepromVarArr+0x328>)
	init_objArrEeprom(&E_tempoDelayLuz, SOFT_RESET, addrTEMPO_LUZ, DATA_16BITS, &PrimitiveStates.Lampada.limitOn);
 800473e:	461a      	mov	r2, r3
 8004740:	4620      	mov	r0, r4
 8004742:	2100      	movs	r1, #0
 8004744:	f8cd a000 	str.w	sl, [sp]
 8004748:	f7fd fd1c 	bl	8002184 <init_objArrEeprom>
	E_tempoDelayLuz.M_setStdValues16bits(&E_tempoDelayLuz, 0 ,TIME_LAMPADA,6000);
 800474c:	222d      	movs	r2, #45	; 0x2d
 800474e:	4620      	mov	r0, r4
 8004750:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004752:	f241 7370 	movw	r3, #6000	; 0x1770
 8004756:	2100      	movs	r1, #0
 8004758:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_tempoDelayLuz);
 800475a:	4621      	mov	r1, r4
 800475c:	4638      	mov	r0, r7
 800475e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004762:	4798      	blx	r3

	// HORIMETRO, total apenas de HORAS em funcionamento.
	init_objArrEeprom(&E_horimetroHoras, HARD_RESET, addrHORIMETRO, DATA_16BITS, &Calendario.Horimetro_horas);
 8004764:	2301      	movs	r3, #1
 8004766:	4ebd      	ldr	r6, [pc, #756]	; (8004a5c <setupEepromVarArr+0x32c>)
 8004768:	4cbd      	ldr	r4, [pc, #756]	; (8004a60 <setupEepromVarArr+0x330>)
 800476a:	4619      	mov	r1, r3
 800476c:	4630      	mov	r0, r6
 800476e:	9400      	str	r4, [sp, #0]
 8004770:	2203      	movs	r2, #3
 8004772:	f7fd fd07 	bl	8002184 <init_objArrEeprom>
	E_horimetroHoras.M_setStdValues16bits(&E_horimetroHoras, 0,0,60000);
 8004776:	2200      	movs	r2, #0
 8004778:	4630      	mov	r0, r6
 800477a:	4611      	mov	r1, r2
 800477c:	6b75      	ldr	r5, [r6, #52]	; 0x34
 800477e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004782:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroHoras);
 8004784:	4631      	mov	r1, r6
 8004786:	4638      	mov	r0, r7

	// HORIMETRO, parte em MINUTOS do total.
	init_objArrEeprom(&E_horimetroMinutos, HARD_RESET, addrMINUTIMETRO, DATA_8BITS, &Calendario.Horimetro_parcial_min);
 8004788:	4eb6      	ldr	r6, [pc, #728]	; (8004a64 <setupEepromVarArr+0x334>)
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroHoras);
 800478a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800478e:	4798      	blx	r3
	init_objArrEeprom(&E_horimetroMinutos, HARD_RESET, addrMINUTIMETRO, DATA_8BITS, &Calendario.Horimetro_parcial_min);
 8004790:	1ca3      	adds	r3, r4, #2
 8004792:	4630      	mov	r0, r6
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2205      	movs	r2, #5
 8004798:	2300      	movs	r3, #0
 800479a:	2101      	movs	r1, #1
 800479c:	f7fd fcf2 	bl	8002184 <init_objArrEeprom>
	E_horimetroMinutos.M_setStdValues8bits(&E_horimetroMinutos, 0,0,60);
 80047a0:	2200      	movs	r2, #0
 80047a2:	4630      	mov	r0, r6
 80047a4:	4611      	mov	r1, r2
 80047a6:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80047a8:	233c      	movs	r3, #60	; 0x3c
 80047aa:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroMinutos);
 80047ac:	4631      	mov	r1, r6
 80047ae:	4638      	mov	r0, r7
 80047b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047b4:	4798      	blx	r3

	// contagem total de ciclos realizados pelo TIMER.
	init_objArrEeprom(&E_totalCiclos, HARD_RESET, addrTOTAL_GERAL, DATA_16BITS, &Calendario.TotalCiclos);
 80047b6:	1d23      	adds	r3, r4, #4
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	2301      	movs	r3, #1
 80047bc:	4eaa      	ldr	r6, [pc, #680]	; (8004a68 <setupEepromVarArr+0x338>)
 80047be:	4619      	mov	r1, r3
 80047c0:	4630      	mov	r0, r6
 80047c2:	2209      	movs	r2, #9
 80047c4:	f7fd fcde 	bl	8002184 <init_objArrEeprom>
	E_totalCiclos.M_setStdValues16bits(&E_totalCiclos, 0,0,60000);
 80047c8:	2200      	movs	r2, #0
 80047ca:	4630      	mov	r0, r6
 80047cc:	4611      	mov	r1, r2
 80047ce:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80047d0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047d4:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_totalCiclos);
 80047d6:	4631      	mov	r1, r6
 80047d8:	4638      	mov	r0, r7
 80047da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047de:	4798      	blx	r3

	// contagem total de vezes que o sensor de TETO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContTetoMax, HARD_RESET, addrCONT_MAX_TETO, DATA_16BITS, &Calendario.ContMaxTeto);
 80047e0:	1da3      	adds	r3, r4, #6
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	2301      	movs	r3, #1
 80047e6:	4ea1      	ldr	r6, [pc, #644]	; (8004a6c <setupEepromVarArr+0x33c>)
 80047e8:	4619      	mov	r1, r3
 80047ea:	4630      	mov	r0, r6
 80047ec:	220b      	movs	r2, #11
 80047ee:	f7fd fcc9 	bl	8002184 <init_objArrEeprom>
	E_ContTetoMax.M_setStdValues16bits(&E_ContTetoMax, 0,0,60000);
 80047f2:	2200      	movs	r2, #0
 80047f4:	4630      	mov	r0, r6
 80047f6:	4611      	mov	r1, r2
 80047f8:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80047fa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80047fe:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_ContTetoMax);
 8004800:	4631      	mov	r1, r6
 8004802:	4638      	mov	r0, r7
 8004804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004808:	4798      	blx	r3

	// contagem total de vezes que o sensor de LASTRO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContLastroMax, HARD_RESET, addrCONT_MAX_LASTRO, DATA_16BITS, &Calendario.ContMaxLastro);
 800480a:	2301      	movs	r3, #1
 800480c:	4d98      	ldr	r5, [pc, #608]	; (8004a70 <setupEepromVarArr+0x340>)
 800480e:	3408      	adds	r4, #8
 8004810:	4619      	mov	r1, r3
 8004812:	4628      	mov	r0, r5
 8004814:	9400      	str	r4, [sp, #0]
 8004816:	220d      	movs	r2, #13
 8004818:	f7fd fcb4 	bl	8002184 <init_objArrEeprom>
	E_ContLastroMax.M_setStdValues16bits(&E_ContLastroMax, 0,0,60000);
 800481c:	2200      	movs	r2, #0
 800481e:	4628      	mov	r0, r5
 8004820:	4611      	mov	r1, r2
 8004822:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8004824:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004828:	47a0      	blx	r4
	eeprom.M_AddOnArr(&eeprom,	&E_ContLastroMax);

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE TETO -----------------*/
	// HISTERESE em graus do TETO.
	init_objArrEeprom(&E_hitereseStateTeto, SOFT_RESET, addrTETO_HIST, DATA_16BITS, &PrimitiveStates.Teto.histerese);
 800482a:	4c92      	ldr	r4, [pc, #584]	; (8004a74 <setupEepromVarArr+0x344>)
	eeprom.M_AddOnArr(&eeprom,	&E_ContLastroMax);
 800482c:	4629      	mov	r1, r5
 800482e:	4638      	mov	r0, r7
 8004830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004834:	4798      	blx	r3
	init_objArrEeprom(&E_hitereseStateTeto, SOFT_RESET, addrTETO_HIST, DATA_16BITS, &PrimitiveStates.Teto.histerese);
 8004836:	f10a 03a4 	add.w	r3, sl, #164	; 0xa4
 800483a:	4620      	mov	r0, r4
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	2229      	movs	r2, #41	; 0x29
 8004840:	2301      	movs	r3, #1
 8004842:	2100      	movs	r1, #0
 8004844:	f7fd fc9e 	bl	8002184 <init_objArrEeprom>
	E_hitereseStateTeto.M_setStdValues16bits(&E_hitereseStateTeto, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 8004848:	2203      	movs	r2, #3
 800484a:	4620      	mov	r0, r4
 800484c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800484e:	2314      	movs	r3, #20
 8004850:	2100      	movs	r1, #0
 8004852:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateTeto);
 8004854:	4621      	mov	r1, r4
 8004856:	4638      	mov	r0, r7

	// LIMITE para TETO.
	init_objArrEeprom(&E_limiteTeto, SOFT_RESET, addrTETO_LIMIT, DATA_16BITS, &PrimitiveStates.Teto.limite);
 8004858:	4c87      	ldr	r4, [pc, #540]	; (8004a78 <setupEepromVarArr+0x348>)
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateTeto);
 800485a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800485e:	4798      	blx	r3
	init_objArrEeprom(&E_limiteTeto, SOFT_RESET, addrTETO_LIMIT, DATA_16BITS, &PrimitiveStates.Teto.limite);
 8004860:	f10a 03a2 	add.w	r3, sl, #162	; 0xa2
 8004864:	4620      	mov	r0, r4
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	222b      	movs	r2, #43	; 0x2b
 800486a:	2301      	movs	r3, #1
 800486c:	2100      	movs	r1, #0
 800486e:	f7fd fc89 	bl	8002184 <init_objArrEeprom>
	E_limiteTeto.M_setStdValues16bits(&E_limiteTeto, 0 ,STD_LIMITETETO,STD_LIMITE_TEMP);
 8004872:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8004876:	4620      	mov	r0, r4
 8004878:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800487a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800487e:	2100      	movs	r1, #0
 8004880:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_limiteTeto);

	// KP value para TETO.
	init_objArrEeprom(&E_kPTeto, SOFT_RESET, addrTETO_KP, DATA_DOUBLE, &PrimitiveStates.Teto.kp);
 8004882:	4e7e      	ldr	r6, [pc, #504]	; (8004a7c <setupEepromVarArr+0x34c>)
	eeprom.M_AddOnArr(&eeprom,	&E_limiteTeto);
 8004884:	4621      	mov	r1, r4
 8004886:	4638      	mov	r0, r7
 8004888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800488c:	4798      	blx	r3
	init_objArrEeprom(&E_kPTeto, SOFT_RESET, addrTETO_KP, DATA_DOUBLE, &PrimitiveStates.Teto.kp);
 800488e:	f10a 0372 	add.w	r3, sl, #114	; 0x72
 8004892:	4630      	mov	r0, r6
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	220f      	movs	r2, #15
 8004898:	2304      	movs	r3, #4
 800489a:	2100      	movs	r1, #0
 800489c:	f7fd fc72 	bl	8002184 <init_objArrEeprom>
	E_kPTeto.M_setStdValuesDouble(&E_kPTeto, 0 ,STD_KP,1000);
 80048a0:	f04f 0800 	mov.w	r8, #0
 80048a4:	2200      	movs	r2, #0
 80048a6:	2400      	movs	r4, #0
 80048a8:	2500      	movs	r5, #0
 80048aa:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004a80 <setupEepromVarArr+0x350>
 80048ae:	4b75      	ldr	r3, [pc, #468]	; (8004a84 <setupEepromVarArr+0x354>)
 80048b0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048b4:	e9cd 2300 	strd	r2, r3, [sp]
 80048b8:	4630      	mov	r0, r6
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80048c0:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPTeto);
 80048c2:	4631      	mov	r1, r6
 80048c4:	4638      	mov	r0, r7

	// KI value para TETO.
	init_objArrEeprom(&E_kITeto, SOFT_RESET, addrTETO_KI, DATA_DOUBLE, &PrimitiveStates.Teto.ki);
 80048c6:	4e70      	ldr	r6, [pc, #448]	; (8004a88 <setupEepromVarArr+0x358>)
	eeprom.M_AddOnArr(&eeprom,	&E_kPTeto);
 80048c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048cc:	4798      	blx	r3
	init_objArrEeprom(&E_kITeto, SOFT_RESET, addrTETO_KI, DATA_DOUBLE, &PrimitiveStates.Teto.ki);
 80048ce:	f10a 037a 	add.w	r3, sl, #122	; 0x7a
 80048d2:	4630      	mov	r0, r6
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2217      	movs	r2, #23
 80048d8:	2304      	movs	r3, #4
 80048da:	2100      	movs	r1, #0
 80048dc:	f7fd fc52 	bl	8002184 <init_objArrEeprom>
	E_kITeto.M_setStdValuesDouble(&E_kITeto, 0 ,STD_KI,1000);
 80048e0:	a257      	add	r2, pc, #348	; (adr r2, 8004a40 <setupEepromVarArr+0x310>)
 80048e2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80048e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048ea:	e9cd 1200 	strd	r1, r2, [sp]
 80048ee:	462b      	mov	r3, r5
 80048f0:	4622      	mov	r2, r4
 80048f2:	4630      	mov	r0, r6
 80048f4:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80048f6:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kITeto);
 80048f8:	4631      	mov	r1, r6
 80048fa:	4638      	mov	r0, r7

	// KD value para TETO.
	init_objArrEeprom(&E_kDTeto, SOFT_RESET, addrTETO_KD, DATA_DOUBLE, &PrimitiveStates.Teto.kd);
 80048fc:	4e63      	ldr	r6, [pc, #396]	; (8004a8c <setupEepromVarArr+0x35c>)
	eeprom.M_AddOnArr(&eeprom,	&E_kITeto);
 80048fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004902:	4798      	blx	r3
	init_objArrEeprom(&E_kDTeto, SOFT_RESET, addrTETO_KD, DATA_DOUBLE, &PrimitiveStates.Teto.kd);
 8004904:	f10a 0382 	add.w	r3, sl, #130	; 0x82
 8004908:	4630      	mov	r0, r6
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2221      	movs	r2, #33	; 0x21
 800490e:	2304      	movs	r3, #4
 8004910:	2100      	movs	r1, #0
 8004912:	f7fd fc37 	bl	8002184 <init_objArrEeprom>
	E_kDTeto.M_setStdValuesDouble(&E_kDTeto, 0 ,STD_KD,1000);
 8004916:	a14c      	add	r1, pc, #304	; (adr r1, 8004a48 <setupEepromVarArr+0x318>)
 8004918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800491c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004920:	e9cd 0100 	strd	r0, r1, [sp]
 8004924:	4622      	mov	r2, r4
 8004926:	462b      	mov	r3, r5
 8004928:	4630      	mov	r0, r6
 800492a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800492c:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDTeto);
 800492e:	4631      	mov	r1, r6
 8004930:	4638      	mov	r0, r7

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE LASTRO -----------------*/
	// HISTERESE em graus do LASTRO.
	init_objArrEeprom(&E_hitereseStateLastro, SOFT_RESET, addrLASTRO_HIST, DATA_16BITS, &PrimitiveStates.Lastro.histerese);
 8004932:	4e57      	ldr	r6, [pc, #348]	; (8004a90 <setupEepromVarArr+0x360>)
	eeprom.M_AddOnArr(&eeprom,	&E_kDTeto);
 8004934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004938:	4798      	blx	r3
	init_objArrEeprom(&E_hitereseStateLastro, SOFT_RESET, addrLASTRO_HIST, DATA_16BITS, &PrimitiveStates.Lastro.histerese);
 800493a:	f10a 03ec 	add.w	r3, sl, #236	; 0xec
 800493e:	4630      	mov	r0, r6
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2249      	movs	r2, #73	; 0x49
 8004944:	2301      	movs	r3, #1
 8004946:	2100      	movs	r1, #0
 8004948:	f7fd fc1c 	bl	8002184 <init_objArrEeprom>
	E_hitereseStateLastro.M_setStdValues16bits(&E_hitereseStateLastro, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 800494c:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
 8004950:	2203      	movs	r2, #3
 8004952:	4630      	mov	r0, r6
 8004954:	2314      	movs	r3, #20
 8004956:	2100      	movs	r1, #0
 8004958:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateLastro);
 800495a:	4631      	mov	r1, r6
 800495c:	4638      	mov	r0, r7

	// LIMITE para LASTRO.
	init_objArrEeprom(&E_limiteLastro, SOFT_RESET, addrLASTRO_LIMIT, DATA_16BITS, &PrimitiveStates.Lastro.limite);
 800495e:	4e4d      	ldr	r6, [pc, #308]	; (8004a94 <setupEepromVarArr+0x364>)
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateLastro);
 8004960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004964:	4798      	blx	r3
	init_objArrEeprom(&E_limiteLastro, SOFT_RESET, addrLASTRO_LIMIT, DATA_16BITS, &PrimitiveStates.Lastro.limite);
 8004966:	f10a 03ea 	add.w	r3, sl, #234	; 0xea
 800496a:	4630      	mov	r0, r6
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	224b      	movs	r2, #75	; 0x4b
 8004970:	2301      	movs	r3, #1
 8004972:	2100      	movs	r1, #0
 8004974:	f7fd fc06 	bl	8002184 <init_objArrEeprom>
	E_limiteLastro.M_setStdValues16bits(&E_limiteLastro, 0 ,STD_LIMITELASTRO,STD_LIMITE_TEMP);
 8004978:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
 800497c:	f240 12db 	movw	r2, #475	; 0x1db
 8004980:	4630      	mov	r0, r6
 8004982:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004986:	2100      	movs	r1, #0
 8004988:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_limiteLastro);
 800498a:	4631      	mov	r1, r6
 800498c:	4638      	mov	r0, r7

	// KP value para LASTRO.
	init_objArrEeprom(&E_kPLastro, SOFT_RESET, addrLASTRO_KP, DATA_DOUBLE, &PrimitiveStates.Lastro.kp);
 800498e:	4e42      	ldr	r6, [pc, #264]	; (8004a98 <setupEepromVarArr+0x368>)
	eeprom.M_AddOnArr(&eeprom,	&E_limiteLastro);
 8004990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004994:	4798      	blx	r3
	init_objArrEeprom(&E_kPLastro, SOFT_RESET, addrLASTRO_KP, DATA_DOUBLE, &PrimitiveStates.Lastro.kp);
 8004996:	f10a 03ba 	add.w	r3, sl, #186	; 0xba
 800499a:	4630      	mov	r0, r6
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	222d      	movs	r2, #45	; 0x2d
 80049a0:	2304      	movs	r3, #4
 80049a2:	2100      	movs	r1, #0
 80049a4:	f7fd fbee 	bl	8002184 <init_objArrEeprom>
	E_kPLastro.M_setStdValuesDouble(&E_kPLastro, 0 ,STD_KP,1000);
 80049a8:	2200      	movs	r2, #0
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <setupEepromVarArr+0x354>)
 80049ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80049b0:	e9cd 2300 	strd	r2, r3, [sp]
 80049b4:	4630      	mov	r0, r6
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80049bc:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPLastro);
 80049be:	4631      	mov	r1, r6
 80049c0:	4638      	mov	r0, r7

	// KI value para LASTRO.
	init_objArrEeprom(&E_kILastro, SOFT_RESET, addrLASTRO_KI, DATA_DOUBLE, &PrimitiveStates.Lastro.ki);
 80049c2:	4e36      	ldr	r6, [pc, #216]	; (8004a9c <setupEepromVarArr+0x36c>)
	eeprom.M_AddOnArr(&eeprom,	&E_kPLastro);
 80049c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049c8:	4798      	blx	r3
	init_objArrEeprom(&E_kILastro, SOFT_RESET, addrLASTRO_KI, DATA_DOUBLE, &PrimitiveStates.Lastro.ki);
 80049ca:	f10a 03c2 	add.w	r3, sl, #194	; 0xc2
 80049ce:	4630      	mov	r0, r6
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	2235      	movs	r2, #53	; 0x35
 80049d4:	2304      	movs	r3, #4
 80049d6:	2100      	movs	r1, #0
 80049d8:	f7fd fbd4 	bl	8002184 <init_objArrEeprom>
	E_kILastro.M_setStdValuesDouble(&E_kILastro, 0 ,STD_KI,1000);
 80049dc:	a218      	add	r2, pc, #96	; (adr r2, 8004a40 <setupEepromVarArr+0x310>)
 80049de:	e9d2 1200 	ldrd	r1, r2, [r2]
 80049e2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80049e6:	e9cd 1200 	strd	r1, r2, [sp]
 80049ea:	462b      	mov	r3, r5
 80049ec:	4622      	mov	r2, r4
 80049ee:	4630      	mov	r0, r6
 80049f0:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80049f2:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kILastro);
 80049f4:	4631      	mov	r1, r6
 80049f6:	4638      	mov	r0, r7

	// KD value para LASTRO.
	init_objArrEeprom(&E_kDLastro, SOFT_RESET, addrLASTRO_KD, DATA_DOUBLE, &PrimitiveStates.Lastro.kd);
 80049f8:	4e29      	ldr	r6, [pc, #164]	; (8004aa0 <setupEepromVarArr+0x370>)
	eeprom.M_AddOnArr(&eeprom,	&E_kILastro);
 80049fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049fe:	4798      	blx	r3
	init_objArrEeprom(&E_kDLastro, SOFT_RESET, addrLASTRO_KD, DATA_DOUBLE, &PrimitiveStates.Lastro.kd);
 8004a00:	f10a 03ca 	add.w	r3, sl, #202	; 0xca
 8004a04:	4630      	mov	r0, r6
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	2241      	movs	r2, #65	; 0x41
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	f7fd fbb9 	bl	8002184 <init_objArrEeprom>
	E_kDLastro.M_setStdValuesDouble(&E_kDLastro, 0 ,STD_KD,1000);
 8004a12:	a10d      	add	r1, pc, #52	; (adr r1, 8004a48 <setupEepromVarArr+0x318>)
 8004a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004a1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004a20:	4622      	mov	r2, r4
 8004a22:	462b      	mov	r3, r5
 8004a24:	4630      	mov	r0, r6
 8004a26:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8004a28:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDLastro);
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4638      	mov	r0, r7
 8004a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a32:	4798      	blx	r3

	//flag buzzer
	init_objArrEeprom(&E_FlagBuzzer, SOFT_RESET, addrBUZZER, DATA_8BITS, &PrimitiveStates.Buzzer);
 8004a34:	f10a 03fa 	add.w	r3, sl, #250	; 0xfa
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e032      	b.n	8004aa4 <setupEepromVarArr+0x374>
 8004a3e:	bf00      	nop
 8004a40:	47ae147b 	.word	0x47ae147b
 8004a44:	3f847ae1 	.word	0x3f847ae1
 8004a48:	33333333 	.word	0x33333333
 8004a4c:	3fd33333 	.word	0x3fd33333
 8004a50:	200007f6 	.word	0x200007f6
 8004a54:	20001b08 	.word	0x20001b08
 8004a58:	20001b98 	.word	0x20001b98
 8004a5c:	20001838 	.word	0x20001838
 8004a60:	200007d4 	.word	0x200007d4
 8004a64:	20001880 	.word	0x20001880
 8004a68:	20001b50 	.word	0x20001b50
 8004a6c:	20001718 	.word	0x20001718
 8004a70:	200016d0 	.word	0x200016d0
 8004a74:	200017f0 	.word	0x200017f0
 8004a78:	20001ac0 	.word	0x20001ac0
 8004a7c:	20001a30 	.word	0x20001a30
 8004a80:	408f4000 	.word	0x408f4000
 8004a84:	403e0000 	.word	0x403e0000
 8004a88:	200019a0 	.word	0x200019a0
 8004a8c:	20001910 	.word	0x20001910
 8004a90:	200017a8 	.word	0x200017a8
 8004a94:	20001a78 	.word	0x20001a78
 8004a98:	200019e8 	.word	0x200019e8
 8004a9c:	20001958 	.word	0x20001958
 8004aa0:	200018c8 	.word	0x200018c8
 8004aa4:	4c09      	ldr	r4, [pc, #36]	; (8004acc <setupEepromVarArr+0x39c>)
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	223d      	movs	r2, #61	; 0x3d
 8004aac:	f7fd fb6a 	bl	8002184 <init_objArrEeprom>
	E_FlagBuzzer.M_setStdValues8bits(&E_FlagBuzzer, 0,0,1);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004aba:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_FlagBuzzer);
 8004abc:	4621      	mov	r1, r4
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90

}
 8004ac4:	b004      	add	sp, #16
 8004ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	eeprom.M_AddOnArr(&eeprom,	&E_FlagBuzzer);
 8004aca:	4718      	bx	r3
 8004acc:	20001760 	.word	0x20001760

08004ad0 <processaEeprom>:

void processaEeprom(void){
 8004ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004ad2:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <processaEeprom+0xcc>)
 8004ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	a801      	add	r0, sp, #4
 8004adc:	f003 fc50 	bl	8008380 <osMessageGet>
	if (evt.status == osEventMessage) {
 8004ae0:	9b01      	ldr	r3, [sp, #4]
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d157      	bne.n	8004b96 <processaEeprom+0xc6>

		switch ((unsigned int)evt.value.p) {
 8004ae6:	9b02      	ldr	r3, [sp, #8]
 8004ae8:	2b0a      	cmp	r3, #10
 8004aea:	d854      	bhi.n	8004b96 <processaEeprom+0xc6>
 8004aec:	e8df f003 	tbb	[pc, r3]
 8004af0:	1e11190c 	.word	0x1e11190c
 8004af4:	2b250623 	.word	0x2b250623
 8004af8:	4b31      	.short	0x4b31
 8004afa:	4d          	.byte	0x4d
 8004afb:	00          	.byte	0x00

		case CEepromNewCile:
			E_totalCiclos.M_update_eepromValue(&E_totalCiclos);
 8004afc:	4828      	ldr	r0, [pc, #160]	; (8004ba0 <processaEeprom+0xd0>)
			break;
		case CEepromHorimetro:
			E_horimetroHoras.M_update_eepromValue(&E_horimetroHoras);
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 8004afe:	6c43      	ldr	r3, [r0, #68]	; 0x44
			break;
		default:
			break;
		}
	}
}
 8004b00:	b005      	add	sp, #20
 8004b02:	f85d eb04 	ldr.w	lr, [sp], #4
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 8004b06:	4718      	bx	r3
			E_horimetroHoras.M_update_eepromValue(&E_horimetroHoras);
 8004b08:	4826      	ldr	r0, [pc, #152]	; (8004ba4 <processaEeprom+0xd4>)
 8004b0a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b0c:	4798      	blx	r3
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 8004b0e:	4826      	ldr	r0, [pc, #152]	; (8004ba8 <processaEeprom+0xd8>)
 8004b10:	e7f5      	b.n	8004afe <processaEeprom+0x2e>
			eeprom.M_resetAllVar(&eeprom,SOFT_RESET);
 8004b12:	2100      	movs	r1, #0
 8004b14:	4825      	ldr	r0, [pc, #148]	; (8004bac <processaEeprom+0xdc>)
 8004b16:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
}
 8004b1a:	b005      	add	sp, #20
 8004b1c:	f85d eb04 	ldr.w	lr, [sp], #4
			eeprom.M_resetAllVar(&eeprom,HARD_RESET);
 8004b20:	4718      	bx	r3
 8004b22:	4822      	ldr	r0, [pc, #136]	; (8004bac <processaEeprom+0xdc>)
 8004b24:	2101      	movs	r1, #1
 8004b26:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8004b2a:	e7f6      	b.n	8004b1a <processaEeprom+0x4a>
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 8004b2c:	4820      	ldr	r0, [pc, #128]	; (8004bb0 <processaEeprom+0xe0>)
			E_kDLastro.M_update_eepromValue(&E_kDLastro);
 8004b2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b30:	4798      	blx	r3
			E_limiteLastro.M_update_eepromValue(&E_limiteLastro);
 8004b32:	4820      	ldr	r0, [pc, #128]	; (8004bb4 <processaEeprom+0xe4>)
 8004b34:	e7e3      	b.n	8004afe <processaEeprom+0x2e>
			E_tempoDelayLuz.M_update_eepromValue(&E_tempoDelayLuz);
 8004b36:	4820      	ldr	r0, [pc, #128]	; (8004bb8 <processaEeprom+0xe8>)
 8004b38:	e7e1      	b.n	8004afe <processaEeprom+0x2e>
			Calendario.ContMaxTeto+=1;
 8004b3a:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <processaEeprom+0xec>)
			E_ContTetoMax.M_update_eepromValue(&E_ContTetoMax);
 8004b3c:	4820      	ldr	r0, [pc, #128]	; (8004bc0 <processaEeprom+0xf0>)
			Calendario.ContMaxTeto+=1;
 8004b3e:	88d3      	ldrh	r3, [r2, #6]
 8004b40:	3301      	adds	r3, #1
 8004b42:	80d3      	strh	r3, [r2, #6]
			E_ContTetoMax.M_update_eepromValue(&E_ContTetoMax);
 8004b44:	e7db      	b.n	8004afe <processaEeprom+0x2e>
			Calendario.ContMaxLastro+=1;
 8004b46:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <processaEeprom+0xec>)
			E_ContLastroMax.M_update_eepromValue(&E_ContLastroMax);
 8004b48:	481e      	ldr	r0, [pc, #120]	; (8004bc4 <processaEeprom+0xf4>)
			Calendario.ContMaxLastro+=1;
 8004b4a:	8913      	ldrh	r3, [r2, #8]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	8113      	strh	r3, [r2, #8]
			E_ContLastroMax.M_update_eepromValue(&E_ContLastroMax);
 8004b50:	e7d5      	b.n	8004afe <processaEeprom+0x2e>
			E_hitereseStateTeto.M_update_eepromValue(&E_hitereseStateTeto);
 8004b52:	481d      	ldr	r0, [pc, #116]	; (8004bc8 <processaEeprom+0xf8>)
 8004b54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b56:	4798      	blx	r3
			E_kPTeto.M_update_eepromValue(&E_kPTeto);
 8004b58:	481c      	ldr	r0, [pc, #112]	; (8004bcc <processaEeprom+0xfc>)
 8004b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b5c:	4798      	blx	r3
			E_kITeto.M_update_eepromValue(&E_kITeto);
 8004b5e:	481c      	ldr	r0, [pc, #112]	; (8004bd0 <processaEeprom+0x100>)
 8004b60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b62:	4798      	blx	r3
			E_kDTeto.M_update_eepromValue(&E_kDTeto);
 8004b64:	481b      	ldr	r0, [pc, #108]	; (8004bd4 <processaEeprom+0x104>)
 8004b66:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b68:	4798      	blx	r3
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 8004b6a:	4811      	ldr	r0, [pc, #68]	; (8004bb0 <processaEeprom+0xe0>)
 8004b6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b6e:	4798      	blx	r3
			E_hitereseStateLastro.M_update_eepromValue(&E_hitereseStateLastro);
 8004b70:	4819      	ldr	r0, [pc, #100]	; (8004bd8 <processaEeprom+0x108>)
 8004b72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b74:	4798      	blx	r3
			E_kPLastro.M_update_eepromValue(&E_kPLastro);
 8004b76:	4819      	ldr	r0, [pc, #100]	; (8004bdc <processaEeprom+0x10c>)
 8004b78:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b7a:	4798      	blx	r3
			E_kILastro.M_update_eepromValue(&E_kILastro);
 8004b7c:	4818      	ldr	r0, [pc, #96]	; (8004be0 <processaEeprom+0x110>)
 8004b7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b80:	4798      	blx	r3
			E_kDLastro.M_update_eepromValue(&E_kDLastro);
 8004b82:	4818      	ldr	r0, [pc, #96]	; (8004be4 <processaEeprom+0x114>)
 8004b84:	e7d3      	b.n	8004b2e <processaEeprom+0x5e>
			E_FlagBuzzer.M_update_eepromValue(&E_FlagBuzzer);
 8004b86:	4818      	ldr	r0, [pc, #96]	; (8004be8 <processaEeprom+0x118>)
 8004b88:	e7b9      	b.n	8004afe <processaEeprom+0x2e>
			ErrorBuffer_clear(&eeprom);
 8004b8a:	4808      	ldr	r0, [pc, #32]	; (8004bac <processaEeprom+0xdc>)
}
 8004b8c:	b005      	add	sp, #20
 8004b8e:	f85d eb04 	ldr.w	lr, [sp], #4
			ErrorBuffer_clear(&eeprom);
 8004b92:	f7fd bb9b 	b.w	80022cc <ErrorBuffer_clear>
}
 8004b96:	b005      	add	sp, #20
 8004b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b9c:	200007e0 	.word	0x200007e0
 8004ba0:	20001b50 	.word	0x20001b50
 8004ba4:	20001838 	.word	0x20001838
 8004ba8:	20001880 	.word	0x20001880
 8004bac:	20001b98 	.word	0x20001b98
 8004bb0:	20001ac0 	.word	0x20001ac0
 8004bb4:	20001a78 	.word	0x20001a78
 8004bb8:	20001b08 	.word	0x20001b08
 8004bbc:	200007d4 	.word	0x200007d4
 8004bc0:	20001718 	.word	0x20001718
 8004bc4:	200016d0 	.word	0x200016d0
 8004bc8:	200017f0 	.word	0x200017f0
 8004bcc:	20001a30 	.word	0x20001a30
 8004bd0:	200019a0 	.word	0x200019a0
 8004bd4:	20001910 	.word	0x20001910
 8004bd8:	200017a8 	.word	0x200017a8
 8004bdc:	200019e8 	.word	0x200019e8
 8004be0:	20001958 	.word	0x20001958
 8004be4:	200018c8 	.word	0x200018c8
 8004be8:	20001760 	.word	0x20001760

08004bec <StartEeprom>:
	init_containerEeprom(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004bec:	4c0c      	ldr	r4, [pc, #48]	; (8004c20 <StartEeprom+0x34>)
{
 8004bee:	b508      	push	{r3, lr}
	init_containerEeprom(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <StartEeprom+0x38>)
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <StartEeprom+0x3c>)
 8004bf6:	f7fd fb5f 	bl	80022b8 <init_containerEeprom>
	setupEepromVarArr();
 8004bfa:	f7ff fd99 	bl	8004730 <setupEepromVarArr>
	eeprom.M_downloadAllVar(&eeprom);	//le
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004c04:	4798      	blx	r3
	osThreadResume(TaskTemperaturaHandle);
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <StartEeprom+0x40>)
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	f003 fbf8 	bl	80083fe <osThreadResume>
		processaEeprom();
 8004c0e:	f7ff ff5f 	bl	8004ad0 <processaEeprom>
		osThreadYield();
 8004c12:	f003 fa91 	bl	8008138 <osThreadYield>
		osDelay(500);
 8004c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c1a:	f003 fa99 	bl	8008150 <osDelay>
	for(;;)
 8004c1e:	e7f6      	b.n	8004c0e <StartEeprom+0x22>
 8004c20:	20001b98 	.word	0x20001b98
 8004c24:	200007e0 	.word	0x200007e0
 8004c28:	200014b4 	.word	0x200014b4
 8004c2c:	20001044 	.word	0x20001044

08004c30 <initPID>:

	}
}


void initPID(void){
 8004c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004c34:	f04f 0801 	mov.w	r8, #1
 8004c38:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 8004c3c:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004c3e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004c42:	4c2b      	ldr	r4, [pc, #172]	; (8004cf0 <initPID+0xc0>)
 8004c44:	4f2b      	ldr	r7, [pc, #172]	; (8004cf4 <initPID+0xc4>)
 8004c46:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8004c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c4e:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 8004c52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c56:	4638      	mov	r0, r7
 8004c58:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8004c5c:	f1a4 0108 	sub.w	r1, r4, #8
 8004c60:	e9cd 2300 	strd	r2, r3, [sp]
 8004c64:	4623      	mov	r3, r4
 8004c66:	f1a4 0210 	sub.w	r2, r4, #16
 8004c6a:	f7fe fc55 	bl	8003518 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004c6e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004c72:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004c76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c7a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004c7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c82:	4e1d      	ldr	r6, [pc, #116]	; (8004cf8 <initPID+0xc8>)
 8004c84:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8004c88:	4630      	mov	r0, r6
 8004c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8004c8e:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004c92:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8004c96:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8004c9a:	f7fe fc3d 	bl	8003518 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7fe fb3e 	bl	8003322 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004ca6:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004ca8:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004caa:	2500      	movs	r5, #0
 8004cac:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f7fe fb36 	bl	8003322 <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004cb6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004cfc <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004cc0:	f7fe fc5e 	bl	8003580 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004cc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7fe fc59 	bl	8003580 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004cce:	4622      	mov	r2, r4
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	e9cd 8900 	strd	r8, r9, [sp]
 8004cd8:	f7fe fb30 	bl	800333c <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004cdc:	4622      	mov	r2, r4
 8004cde:	462b      	mov	r3, r5
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	e9cd 8900 	strd	r8, r9, [sp]
 8004ce6:	f7fe fb29 	bl	800333c <PID_SetOutputLimits>
}
 8004cea:	b009      	add	sp, #36	; 0x24
 8004cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cf0:	20000890 	.word	0x20000890
 8004cf4:	20001cb0 	.word	0x20001cb0
 8004cf8:	20001c40 	.word	0x20001c40
 8004cfc:	40590000 	.word	0x40590000

08004d00 <computaPID>:
void computaPID(void){
 8004d00:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004d02:	480d      	ldr	r0, [pc, #52]	; (8004d38 <computaPID+0x38>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 8004d04:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <computaPID+0x3c>)
	PID_Compute(&TPIDTeto);
 8004d06:	f7fe fa6e 	bl	80031e6 <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004d0a:	480d      	ldr	r0, [pc, #52]	; (8004d40 <computaPID+0x40>)
 8004d0c:	f7fe fa6b 	bl	80031e6 <PID_Compute>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 8004d10:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 8004d14:	f7fb fe7a 	bl	8000a0c <__aeabi_d2uiz>
 8004d18:	4601      	mov	r1, r0
 8004d1a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8004d1e:	f7fd fced 	bl	80026fc <IndviduoPID_SetPWMValueDirect>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 8004d22:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
 8004d26:	f7fb fe71 	bl	8000a0c <__aeabi_d2uiz>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0

}
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 8004d34:	f7fd bce2 	b.w	80026fc <IndviduoPID_SetPWMValueDirect>
 8004d38:	20001cb0 	.word	0x20001cb0
 8004d3c:	200007e8 	.word	0x200007e8
 8004d40:	20001c40 	.word	0x20001c40

08004d44 <StartTemperatura>:
void StartTemperatura(void const * argument){
 8004d44:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8004d46:	f004 fa5b 	bl	8009200 <xTaskGetTickCount>
 8004d4a:	9001      	str	r0, [sp, #4]
	initPID();
 8004d4c:	f7ff ff70 	bl	8004c30 <initPID>
		computaPID();
 8004d50:	f7ff ffd6 	bl	8004d00 <computaPID>
		osThreadYield();
 8004d54:	f003 f9f0 	bl	8008138 <osThreadYield>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 8004d58:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004d5c:	a801      	add	r0, sp, #4
 8004d5e:	f003 fb65 	bl	800842c <osDelayUntil>
	for(;;)	{
 8004d62:	e7f5      	b.n	8004d50 <StartTemperatura+0xc>

08004d64 <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004d66:	4c3a      	ldr	r4, [pc, #232]	; (8004e50 <WatchDogLimitesTemperatura+0xec>)
		if(!flagMaxTeto){
 8004d68:	4e3a      	ldr	r6, [pc, #232]	; (8004e54 <WatchDogLimitesTemperatura+0xf0>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004d6a:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 8004d6e:	f7fb fb49 	bl	8000404 <__aeabi_i2d>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004d7a:	f7fb fe3d 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxTeto){
 8004d7e:	7837      	ldrb	r7, [r6, #0]
 8004d80:	4d35      	ldr	r5, [pc, #212]	; (8004e58 <WatchDogLimitesTemperatura+0xf4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004d82:	b1a0      	cbz	r0, 8004dae <WatchDogLimitesTemperatura+0x4a>
		if(!flagMaxTeto){
 8004d84:	b93f      	cbnz	r7, 8004d96 <WatchDogLimitesTemperatura+0x32>
			flagMaxTeto = 1;
 8004d86:	2301      	movs	r3, #1
 8004d88:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004d8a:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <WatchDogLimitesTemperatura+0xf8>)
 8004d8c:	463a      	mov	r2, r7
 8004d8e:	2106      	movs	r1, #6
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	f003 facd 	bl	8008330 <osMessagePut>
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004d96:	782a      	ldrb	r2, [r5, #0]
 8004d98:	b94a      	cbnz	r2, 8004dae <WatchDogLimitesTemperatura+0x4a>
 8004d9a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d105      	bne.n	8004dae <WatchDogLimitesTemperatura+0x4a>
			flagTimer = 1;
 8004da2:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <WatchDogLimitesTemperatura+0xf8>)
 8004da6:	2106      	movs	r1, #6
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	f003 fac1 	bl	8008330 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004dae:	7833      	ldrb	r3, [r6, #0]
 8004db0:	b16b      	cbz	r3, 8004dce <WatchDogLimitesTemperatura+0x6a>
 8004db2:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 8004db6:	3814      	subs	r0, #20
 8004db8:	f7fb fb24 	bl	8000404 <__aeabi_i2d>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004dc4:	f7fb fdfa 	bl	80009bc <__aeabi_dcmplt>
 8004dc8:	b108      	cbz	r0, 8004dce <WatchDogLimitesTemperatura+0x6a>
		flagMaxTeto = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	7033      	strb	r3, [r6, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004dce:	782b      	ldrb	r3, [r5, #0]
 8004dd0:	b11b      	cbz	r3, 8004dda <WatchDogLimitesTemperatura+0x76>
 8004dd2:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004dd6:	b903      	cbnz	r3, 8004dda <WatchDogLimitesTemperatura+0x76>
		flagTimer=0;
 8004dd8:	702b      	strb	r3, [r5, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004dda:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 8004dde:	f7fb fb11 	bl	8000404 <__aeabi_i2d>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8004dea:	f7fb fe05 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxLastro){
 8004dee:	4e1c      	ldr	r6, [pc, #112]	; (8004e60 <WatchDogLimitesTemperatura+0xfc>)
 8004df0:	4d1c      	ldr	r5, [pc, #112]	; (8004e64 <WatchDogLimitesTemperatura+0x100>)
 8004df2:	7837      	ldrb	r7, [r6, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004df4:	b1a0      	cbz	r0, 8004e20 <WatchDogLimitesTemperatura+0xbc>
		if(!flagMaxLastro){
 8004df6:	b93f      	cbnz	r7, 8004e08 <WatchDogLimitesTemperatura+0xa4>
			flagMaxLastro = 1;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004dfc:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <WatchDogLimitesTemperatura+0xf8>)
 8004dfe:	463a      	mov	r2, r7
 8004e00:	2107      	movs	r1, #7
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	f003 fa94 	bl	8008330 <osMessagePut>
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004e08:	782a      	ldrb	r2, [r5, #0]
 8004e0a:	b94a      	cbnz	r2, 8004e20 <WatchDogLimitesTemperatura+0xbc>
 8004e0c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d105      	bne.n	8004e20 <WatchDogLimitesTemperatura+0xbc>
			flagTimerLastro = 1;
 8004e14:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <WatchDogLimitesTemperatura+0xf8>)
 8004e18:	2107      	movs	r1, #7
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	f003 fa88 	bl	8008330 <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004e20:	7833      	ldrb	r3, [r6, #0]
 8004e22:	b16b      	cbz	r3, 8004e40 <WatchDogLimitesTemperatura+0xdc>
 8004e24:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 8004e28:	3814      	subs	r0, #20
 8004e2a:	f7fb faeb 	bl	8000404 <__aeabi_i2d>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8004e36:	f7fb fdc1 	bl	80009bc <__aeabi_dcmplt>
 8004e3a:	b108      	cbz	r0, 8004e40 <WatchDogLimitesTemperatura+0xdc>
		flagMaxLastro = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	7033      	strb	r3, [r6, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004e40:	782b      	ldrb	r3, [r5, #0]
 8004e42:	b11b      	cbz	r3, 8004e4c <WatchDogLimitesTemperatura+0xe8>
 8004e44:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004e48:	b903      	cbnz	r3, 8004e4c <WatchDogLimitesTemperatura+0xe8>
		flagTimerLastro=0;
 8004e4a:	702b      	strb	r3, [r5, #0]


}
 8004e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200007e8 	.word	0x200007e8
 8004e54:	20001d23 	.word	0x20001d23
 8004e58:	20001d24 	.word	0x20001d24
 8004e5c:	200007e0 	.word	0x200007e0
 8004e60:	20001d22 	.word	0x20001d22
 8004e64:	20001d25 	.word	0x20001d25

08004e68 <SaidasLeds>:
void SaidasLeds(void){
 8004e68:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 8004e6a:	4c14      	ldr	r4, [pc, #80]	; (8004ebc <SaidasLeds+0x54>)
 8004e6c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d017      	beq.n	8004ea4 <SaidasLeds+0x3c>
 8004e74:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d013      	beq.n	8004ea4 <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 8004e7c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004e80:	f7fd fb69 	bl	8002556 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004e84:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		onDigital(&PrimitiveStates.LedTeto);
 8004e88:	480d      	ldr	r0, [pc, #52]	; (8004ec0 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d10e      	bne.n	8004eac <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 8004e8e:	f7fd fb62 	bl	8002556 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004e92:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
		onDigital(&PrimitiveStates.LedLastro);
 8004e96:	480b      	ldr	r0, [pc, #44]	; (8004ec4 <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d10a      	bne.n	8004eb2 <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 8004e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 8004ea0:	f7fd bb59 	b.w	8002556 <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 8004ea4:	4808      	ldr	r0, [pc, #32]	; (8004ec8 <SaidasLeds+0x60>)
 8004ea6:	f7fd fb60 	bl	800256a <offDigital>
 8004eaa:	e7eb      	b.n	8004e84 <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 8004eac:	f7fd fb5d 	bl	800256a <offDigital>
 8004eb0:	e7ef      	b.n	8004e92 <SaidasLeds+0x2a>
}
 8004eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 8004eb6:	f7fd bb58 	b.w	800256a <offDigital>
 8004eba:	bf00      	nop
 8004ebc:	200007e8 	.word	0x200007e8
 8004ec0:	20000830 	.word	0x20000830
 8004ec4:	20000848 	.word	0x20000848
 8004ec8:	20000818 	.word	0x20000818

08004ecc <Horimetro>:
void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004ecc:	4a12      	ldr	r2, [pc, #72]	; (8004f18 <Horimetro+0x4c>)
 8004ece:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004ed2:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	4a10      	ldr	r2, [pc, #64]	; (8004f1c <Horimetro+0x50>)
 8004eda:	d01b      	beq.n	8004f14 <Horimetro+0x48>
		segundos++;
 8004edc:	7813      	ldrb	r3, [r2, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 8004ee2:	2b3c      	cmp	r3, #60	; 0x3c
 8004ee4:	d001      	beq.n	8004eea <Horimetro+0x1e>
			}
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 8004ee6:	7013      	strb	r3, [r2, #0]
	}
}
 8004ee8:	4770      	bx	lr
			segundos = 0;
 8004eea:	2100      	movs	r1, #0
			if(Calendario.Horimetro_parcial_min<59){
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <Horimetro+0x54>)
			segundos = 0;
 8004eee:	7011      	strb	r1, [r2, #0]
			if(Calendario.Horimetro_parcial_min<59){
 8004ef0:	789a      	ldrb	r2, [r3, #2]
 8004ef2:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_horas++;
 8004ef4:	bf8b      	itete	hi
 8004ef6:	881a      	ldrhhi	r2, [r3, #0]
				Calendario.Horimetro_parcial_min++;
 8004ef8:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 8004efa:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 8004efc:	709a      	strbls	r2, [r3, #2]
				Calendario.Horimetro_horas++;
 8004efe:	bf88      	it	hi
 8004f00:	801a      	strhhi	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004f02:	f04f 0200 	mov.w	r2, #0
				Calendario.Horimetro_parcial_min=0;
 8004f06:	bf88      	it	hi
 8004f08:	7099      	strbhi	r1, [r3, #2]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004f0a:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <Horimetro+0x58>)
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	f003 ba0e 	b.w	8008330 <osMessagePut>
		segundos = 1;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e7e6      	b.n	8004ee6 <Horimetro+0x1a>
 8004f18:	200007e8 	.word	0x200007e8
 8004f1c:	20001d26 	.word	0x20001d26
 8004f20:	200007d4 	.word	0x200007d4
 8004f24:	200007e0 	.word	0x200007e0

08004f28 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004f28:	b570      	push	{r4, r5, r6, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004f2a:	4e0e      	ldr	r6, [pc, #56]	; (8004f64 <sinalizacaoReachTemp+0x3c>)
 8004f2c:	4d0e      	ldr	r5, [pc, #56]	; (8004f68 <sinalizacaoReachTemp+0x40>)
 8004f2e:	7833      	ldrb	r3, [r6, #0]
 8004f30:	4c0e      	ldr	r4, [pc, #56]	; (8004f6c <sinalizacaoReachTemp+0x44>)
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d002      	beq.n	8004f3c <sinalizacaoReachTemp+0x14>
 8004f36:	782b      	ldrb	r3, [r5, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10c      	bne.n	8004f56 <sinalizacaoReachTemp+0x2e>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004f3c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d008      	beq.n	8004f56 <sinalizacaoReachTemp+0x2e>
 8004f44:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d004      	beq.n	8004f56 <sinalizacaoReachTemp+0x2e>
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004f4c:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <sinalizacaoReachTemp+0x48>)
 8004f4e:	2101      	movs	r1, #1
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	f003 f946 	bl	80081e2 <osSignalSet>
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004f56:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004f5a:	7033      	strb	r3, [r6, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004f5c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004f60:	702b      	strb	r3, [r5, #0]


}
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	20001d21 	.word	0x20001d21
 8004f68:	20001d20 	.word	0x20001d20
 8004f6c:	200007e8 	.word	0x200007e8
 8004f70:	2000103c 	.word	0x2000103c

08004f74 <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004f74:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 8004f76:	f7ff fef5 	bl	8004d64 <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004f7a:	f7ff ffd5 	bl	8004f28 <sinalizacaoReachTemp>
	SaidasLeds();
 8004f7e:	f7ff ff73 	bl	8004e68 <SaidasLeds>
}
 8004f82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 8004f86:	f7ff bfa1 	b.w	8004ecc <Horimetro>
	...

08004f8c <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 8004f8c:	b570      	push	{r4, r5, r6, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004f8e:	4c1c      	ldr	r4, [pc, #112]	; (8005000 <funcionamentoTimer+0x74>)
 8004f90:	f894 510b 	ldrb.w	r5, [r4, #267]	; 0x10b
 8004f94:	b15d      	cbz	r5, 8004fae <funcionamentoTimer+0x22>
 8004f96:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8004f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9e:	d10a      	bne.n	8004fb6 <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004fa0:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 8004fa2:	3d01      	subs	r5, #1
		PrimitiveStates.RTTimerSegundos = 59;
 8004fa4:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		PrimitiveStates.RTTimerMinutos--;
 8004fa8:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004fae:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0fa      	beq.n	8004fac <funcionamentoTimer+0x20>
 8004fb6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d1f6      	bne.n	8004fac <funcionamentoTimer+0x20>
		PrimitiveStates.RTTimerSegundos--;
 8004fbe:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1ee      	bne.n	8004fac <funcionamentoTimer+0x20>
 8004fce:	2d00      	cmp	r5, #0
 8004fd0:	d1ec      	bne.n	8004fac <funcionamentoTimer+0x20>
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <funcionamentoTimer+0x78>)
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004fd4:	4e0c      	ldr	r6, [pc, #48]	; (8005008 <funcionamentoTimer+0x7c>)
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004fd6:	8893      	ldrh	r3, [r2, #4]
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004fd8:	2105      	movs	r1, #5
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004fda:	3301      	adds	r3, #1
 8004fdc:	8093      	strh	r3, [r2, #4]
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004fde:	4b0b      	ldr	r3, [pc, #44]	; (800500c <funcionamentoTimer+0x80>)
 8004fe0:	462a      	mov	r2, r5
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f003 f9a4 	bl	8008330 <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004fe8:	6830      	ldr	r0, [r6, #0]
 8004fea:	2108      	movs	r1, #8
 8004fec:	f003 f8f9 	bl	80081e2 <osSignalSet>
			osThreadResume(TaskBuzzerHandle);
 8004ff0:	6830      	ldr	r0, [r6, #0]
			PrimitiveStates.stateTimer = TIMER_idle;
 8004ff2:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
}
 8004ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osThreadResume(TaskBuzzerHandle);
 8004ffa:	f003 ba00 	b.w	80083fe <osThreadResume>
 8004ffe:	bf00      	nop
 8005000:	200007e8 	.word	0x200007e8
 8005004:	200007d4 	.word	0x200007d4
 8005008:	2000103c 	.word	0x2000103c
 800500c:	200007e0 	.word	0x200007e0

08005010 <verificaErro>:


void verificaErro(void){
 8005010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	210f      	movs	r1, #15
 8005016:	a801      	add	r0, sp, #4
 8005018:	f003 f90c 	bl	8008234 <osSignalWait>
	if (evt.status == osEventSignal){
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	2b08      	cmp	r3, #8
 8005020:	d109      	bne.n	8005036 <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	2b0f      	cmp	r3, #15
 8005026:	d106      	bne.n	8005036 <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <verificaErro+0x2c>)
 800502a:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 800502c:	b005      	add	sp, #20
 800502e:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 8005032:	f003 b9df 	b.w	80083f4 <osThreadSuspend>
}
 8005036:	b005      	add	sp, #20
 8005038:	f85d fb04 	ldr.w	pc, [sp], #4
 800503c:	200012e8 	.word	0x200012e8

08005040 <StartTimer>:
{
 8005040:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8005042:	f004 f8dd 	bl	8009200 <xTaskGetTickCount>
 8005046:	9001      	str	r0, [sp, #4]
		verificaErro();
 8005048:	f7ff ffe2 	bl	8005010 <verificaErro>
		funcionamentoTimer();
 800504c:	f7ff ff9e 	bl	8004f8c <funcionamentoTimer>
		osThreadYield();
 8005050:	f003 f872 	bl	8008138 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8005054:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005058:	a801      	add	r0, sp, #4
 800505a:	f003 f9e7 	bl	800842c <osDelayUntil>
	for(;;)
 800505e:	e7f3      	b.n	8005048 <StartTimer+0x8>

08005060 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005060:	4a07      	ldr	r2, [pc, #28]	; (8005080 <HAL_Init+0x20>)
{
 8005062:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005064:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005066:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005068:	f043 0310 	orr.w	r3, r3, #16
 800506c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800506e:	f000 fa55 	bl	800551c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005072:	200f      	movs	r0, #15
 8005074:	f7fe fcd4 	bl	8003a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005078:	f7fe faa8 	bl	80035cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800507c:	2000      	movs	r0, #0
 800507e:	bd08      	pop	{r3, pc}
 8005080:	40022000 	.word	0x40022000

08005084 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005084:	4a03      	ldr	r2, [pc, #12]	; (8005094 <HAL_IncTick+0x10>)
 8005086:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_IncTick+0x14>)
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	440b      	add	r3, r1
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	20001d28 	.word	0x20001d28
 8005098:	20000004 	.word	0x20000004

0800509c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800509c:	4b01      	ldr	r3, [pc, #4]	; (80050a4 <HAL_GetTick+0x8>)
 800509e:	6818      	ldr	r0, [r3, #0]
}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20001d28 	.word	0x20001d28

080050a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7ff fff6 	bl	800509c <HAL_GetTick>
 80050b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050b2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80050b4:	bf1e      	ittt	ne
 80050b6:	4b04      	ldrne	r3, [pc, #16]	; (80050c8 <HAL_Delay+0x20>)
 80050b8:	781b      	ldrbne	r3, [r3, #0]
 80050ba:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050bc:	f7ff ffee 	bl	800509c <HAL_GetTick>
 80050c0:	1b43      	subs	r3, r0, r5
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	d3fa      	bcc.n	80050bc <HAL_Delay+0x14>
  {
  }
}
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20000004 	.word	0x20000004

080050cc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80050ce:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80050d6:	d11b      	bne.n	8005110 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	6892      	ldr	r2, [r2, #8]
 80050e4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80050e8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80050ec:	d10c      	bne.n	8005108 <ADC_DMAConvCplt+0x3c>
 80050ee:	7b1a      	ldrb	r2, [r3, #12]
 80050f0:	b952      	cbnz	r2, 8005108 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80050f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fc:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050fe:	bf5e      	ittt	pl
 8005100:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8005102:	f042 0201 	orrpl.w	r2, r2, #1
 8005106:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd fbd7 	bl	80028bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800510e:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005110:	6a1b      	ldr	r3, [r3, #32]
}
 8005112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4718      	bx	r3

0800511a <HAL_ADC_ConvHalfCpltCallback>:
 800511a:	4770      	bx	lr

0800511c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800511c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800511e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005120:	f7ff fffb 	bl	800511a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005124:	bd08      	pop	{r3, pc}

08005126 <HAL_ADC_ErrorCallback>:
 8005126:	4770      	bx	lr

08005128 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005128:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800512a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800512c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800512e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005132:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005134:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005136:	f043 0304 	orr.w	r3, r3, #4
 800513a:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800513c:	f7ff fff3 	bl	8005126 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005140:	bd08      	pop	{r3, pc}
	...

08005144 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8005144:	2300      	movs	r3, #0
{ 
 8005146:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005148:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800514a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800514e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005150:	2b01      	cmp	r3, #1
 8005152:	d06c      	beq.n	800522e <HAL_ADC_ConfigChannel+0xea>
 8005154:	2301      	movs	r3, #1
 8005156:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800515a:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800515c:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800515e:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8005166:	d822      	bhi.n	80051ae <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005168:	261f      	movs	r6, #31
 800516a:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800516c:	3b05      	subs	r3, #5
 800516e:	409e      	lsls	r6, r3
 8005170:	ea25 0506 	bic.w	r5, r5, r6
 8005174:	fa00 f303 	lsl.w	r3, r0, r3
 8005178:	432b      	orrs	r3, r5
 800517a:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800517c:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800517e:	688b      	ldr	r3, [r1, #8]
 8005180:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005184:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005188:	d929      	bls.n	80051de <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800518a:	68d6      	ldr	r6, [r2, #12]
 800518c:	3d1e      	subs	r5, #30
 800518e:	40a9      	lsls	r1, r5
 8005190:	ea26 0101 	bic.w	r1, r6, r1
 8005194:	40ab      	lsls	r3, r5
 8005196:	430b      	orrs	r3, r1
 8005198:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800519a:	f1a0 0310 	sub.w	r3, r0, #16
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d925      	bls.n	80051ee <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051a2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80051a4:	2300      	movs	r3, #0
 80051a6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80051aa:	b002      	add	sp, #8
 80051ac:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80051ae:	2d0c      	cmp	r5, #12
 80051b0:	f04f 051f 	mov.w	r5, #31
 80051b4:	d809      	bhi.n	80051ca <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80051b6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80051b8:	3b23      	subs	r3, #35	; 0x23
 80051ba:	409d      	lsls	r5, r3
 80051bc:	ea26 0505 	bic.w	r5, r6, r5
 80051c0:	fa00 f303 	lsl.w	r3, r0, r3
 80051c4:	432b      	orrs	r3, r5
 80051c6:	6313      	str	r3, [r2, #48]	; 0x30
 80051c8:	e7d8      	b.n	800517c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80051ca:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80051cc:	3b41      	subs	r3, #65	; 0x41
 80051ce:	409d      	lsls	r5, r3
 80051d0:	ea26 0505 	bic.w	r5, r6, r5
 80051d4:	fa00 f303 	lsl.w	r3, r0, r3
 80051d8:	432b      	orrs	r3, r5
 80051da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051dc:	e7ce      	b.n	800517c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80051de:	6910      	ldr	r0, [r2, #16]
 80051e0:	40a9      	lsls	r1, r5
 80051e2:	ea20 0101 	bic.w	r1, r0, r1
 80051e6:	40ab      	lsls	r3, r5
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6113      	str	r3, [r2, #16]
 80051ec:	e7d9      	b.n	80051a2 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <HAL_ADC_ConfigChannel+0xf0>)
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d116      	bne.n	8005222 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80051f4:	6893      	ldr	r3, [r2, #8]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	d4d3      	bmi.n	80051a2 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80051fa:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051fc:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80051fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005202:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005204:	d1cd      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_ADC_ConfigChannel+0xf4>)
 8005208:	4a0c      	ldr	r2, [pc, #48]	; (800523c <HAL_ADC_ConfigChannel+0xf8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005210:	220a      	movs	r2, #10
 8005212:	4353      	muls	r3, r2
            wait_loop_index--;
 8005214:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0c2      	beq.n	80051a2 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 800521c:	9b01      	ldr	r3, [sp, #4]
 800521e:	3b01      	subs	r3, #1
 8005220:	e7f8      	b.n	8005214 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8005224:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005226:	f043 0320 	orr.w	r3, r3, #32
 800522a:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800522c:	e7ba      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 800522e:	2002      	movs	r0, #2
 8005230:	e7bb      	b.n	80051aa <HAL_ADC_ConfigChannel+0x66>
 8005232:	bf00      	nop
 8005234:	40012400 	.word	0x40012400
 8005238:	20000000 	.word	0x20000000
 800523c:	000f4240 	.word	0x000f4240

08005240 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8005240:	2300      	movs	r3, #0
{
 8005242:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005244:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005246:	6803      	ldr	r3, [r0, #0]
{
 8005248:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	07d2      	lsls	r2, r2, #31
 800524e:	d502      	bpl.n	8005256 <ADC_Enable+0x16>
  return HAL_OK;
 8005250:	2000      	movs	r0, #0
}
 8005252:	b003      	add	sp, #12
 8005254:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	f042 0201 	orr.w	r2, r2, #1
 800525c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <ADC_Enable+0x70>)
 8005260:	4a14      	ldr	r2, [pc, #80]	; (80052b4 <ADC_Enable+0x74>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005268:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	b9e3      	cbnz	r3, 80052a8 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800526e:	f7ff ff15 	bl	800509c <HAL_GetTick>
 8005272:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	07db      	lsls	r3, r3, #31
 800527a:	d4e9      	bmi.n	8005250 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800527c:	f7ff ff0e 	bl	800509c <HAL_GetTick>
 8005280:	1b40      	subs	r0, r0, r5
 8005282:	2802      	cmp	r0, #2
 8005284:	d9f6      	bls.n	8005274 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f013 0301 	ands.w	r3, r3, #1
 800528e:	d1f1      	bne.n	8005274 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005290:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 8005292:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005294:	f042 0210 	orr.w	r2, r2, #16
 8005298:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800529a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 800529c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80052a6:	e7d4      	b.n	8005252 <ADC_Enable+0x12>
      wait_loop_index--;
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	e7dc      	b.n	8005268 <ADC_Enable+0x28>
 80052ae:	bf00      	nop
 80052b0:	20000000 	.word	0x20000000
 80052b4:	000f4240 	.word	0x000f4240

080052b8 <HAL_ADC_Start_DMA>:
{
 80052b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80052bc:	4b40      	ldr	r3, [pc, #256]	; (80053c0 <HAL_ADC_Start_DMA+0x108>)
{
 80052be:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80052c0:	6802      	ldr	r2, [r0, #0]
{
 80052c2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80052c4:	429a      	cmp	r2, r3
{
 80052c6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80052c8:	d002      	beq.n	80052d0 <HAL_ADC_Start_DMA+0x18>
 80052ca:	493e      	ldr	r1, [pc, #248]	; (80053c4 <HAL_ADC_Start_DMA+0x10c>)
 80052cc:	428a      	cmp	r2, r1
 80052ce:	d103      	bne.n	80052d8 <HAL_ADC_Start_DMA+0x20>
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80052d6:	d16e      	bne.n	80053b6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80052d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d06c      	beq.n	80053ba <HAL_ADC_Start_DMA+0x102>
 80052e0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80052e2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80052e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80052e8:	f7ff ffaa 	bl	8005240 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80052ec:	4606      	mov	r6, r0
 80052ee:	2800      	cmp	r0, #0
 80052f0:	d15d      	bne.n	80053ae <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80052f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80052f4:	6821      	ldr	r1, [r4, #0]
 80052f6:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80052f8:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80052fc:	f025 0501 	bic.w	r5, r5, #1
 8005300:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005304:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8005306:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005308:	d104      	bne.n	8005314 <HAL_ADC_Start_DMA+0x5c>
 800530a:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <HAL_ADC_Start_DMA+0x108>)
 800530c:	6853      	ldr	r3, [r2, #4]
 800530e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8005312:	d13e      	bne.n	8005392 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005314:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005316:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800531a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800531c:	684b      	ldr	r3, [r1, #4]
 800531e:	055a      	lsls	r2, r3, #21
 8005320:	d505      	bpl.n	800532e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005322:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005324:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800532c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800532e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005330:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005332:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005336:	bf18      	it	ne
 8005338:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800533a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800533c:	bf18      	it	ne
 800533e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005342:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8005344:	2300      	movs	r3, #0
 8005346:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800534a:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800534c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800534e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005350:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <HAL_ADC_Start_DMA+0x114>)
 8005352:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005354:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <HAL_ADC_Start_DMA+0x118>)
 8005356:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005358:	f06f 0302 	mvn.w	r3, #2
 800535c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005360:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8005364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005368:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800536c:	4643      	mov	r3, r8
 800536e:	f000 f993 	bl	8005698 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800537a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	bf0c      	ite	eq
 8005382:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005386:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800538a:	609a      	str	r2, [r3, #8]
}
 800538c:	4630      	mov	r0, r6
 800538e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005398:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800539a:	6853      	ldr	r3, [r2, #4]
 800539c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800539e:	bf41      	itttt	mi
 80053a0:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 80053a2:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80053a6:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80053aa:	62a0      	strmi	r0, [r4, #40]	; 0x28
 80053ac:	e7bf      	b.n	800532e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 80053ae:	2300      	movs	r3, #0
 80053b0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80053b4:	e7ea      	b.n	800538c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 80053b6:	2601      	movs	r6, #1
 80053b8:	e7e8      	b.n	800538c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 80053ba:	2602      	movs	r6, #2
 80053bc:	e7e6      	b.n	800538c <HAL_ADC_Start_DMA+0xd4>
 80053be:	bf00      	nop
 80053c0:	40012400 	.word	0x40012400
 80053c4:	40012800 	.word	0x40012800
 80053c8:	080050cd 	.word	0x080050cd
 80053cc:	0800511d 	.word	0x0800511d
 80053d0:	08005129 	.word	0x08005129

080053d4 <ADC_ConversionStop_Disable>:
{
 80053d4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80053d6:	6803      	ldr	r3, [r0, #0]
{
 80053d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	07d1      	lsls	r1, r2, #31
 80053de:	d401      	bmi.n	80053e4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80053e0:	2000      	movs	r0, #0
}
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	f022 0201 	bic.w	r2, r2, #1
 80053ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80053ec:	f7ff fe56 	bl	800509c <HAL_GetTick>
 80053f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	07db      	lsls	r3, r3, #31
 80053f8:	d5f2      	bpl.n	80053e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053fa:	f7ff fe4f 	bl	800509c <HAL_GetTick>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	2802      	cmp	r0, #2
 8005402:	d9f6      	bls.n	80053f2 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005404:	6823      	ldr	r3, [r4, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	07da      	lsls	r2, r3, #31
 800540a:	d5f2      	bpl.n	80053f2 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 800540e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	f043 0310 	orr.w	r3, r3, #16
 8005414:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800541e:	e7e0      	b.n	80053e2 <ADC_ConversionStop_Disable+0xe>

08005420 <HAL_ADC_Init>:
{
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8005422:	4604      	mov	r4, r0
 8005424:	2800      	cmp	r0, #0
 8005426:	d06d      	beq.n	8005504 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005428:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800542a:	b923      	cbnz	r3, 8005436 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800542c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800542e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8005432:	f7fe f8f3 	bl	800361c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005436:	4620      	mov	r0, r4
 8005438:	f7ff ffcc 	bl	80053d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800543c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800543e:	f013 0310 	ands.w	r3, r3, #16
 8005442:	d161      	bne.n	8005508 <HAL_ADC_Init+0xe8>
 8005444:	2800      	cmp	r0, #0
 8005446:	d15f      	bne.n	8005508 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8005448:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800544a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800544c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005450:	f022 0202 	bic.w	r2, r2, #2
 8005454:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005458:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800545a:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800545c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800545e:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005460:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005462:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005466:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800546a:	d036      	beq.n	80054da <HAL_ADC_Init+0xba>
 800546c:	1e77      	subs	r7, r6, #1
 800546e:	427d      	negs	r5, r7
 8005470:	417d      	adcs	r5, r7
 8005472:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005474:	7d27      	ldrb	r7, [r4, #20]
 8005476:	2f01      	cmp	r7, #1
 8005478:	d106      	bne.n	8005488 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800547a:	bb82      	cbnz	r2, 80054de <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800547c:	69a2      	ldr	r2, [r4, #24]
 800547e:	3a01      	subs	r2, #1
 8005480:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8005484:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8005488:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800548a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800548e:	6857      	ldr	r7, [r2, #4]
 8005490:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8005494:	ea45 0507 	orr.w	r5, r5, r7
 8005498:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800549a:	6897      	ldr	r7, [r2, #8]
 800549c:	4d1d      	ldr	r5, [pc, #116]	; (8005514 <HAL_ADC_Init+0xf4>)
 800549e:	ea05 0507 	and.w	r5, r5, r7
 80054a2:	ea45 0501 	orr.w	r5, r5, r1
 80054a6:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80054a8:	d001      	beq.n	80054ae <HAL_ADC_Init+0x8e>
 80054aa:	2e01      	cmp	r6, #1
 80054ac:	d102      	bne.n	80054b4 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80054b4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80054b6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80054ba:	432b      	orrs	r3, r5
 80054bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80054be:	6892      	ldr	r2, [r2, #8]
 80054c0:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_ADC_Init+0xf8>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	4299      	cmp	r1, r3
 80054c6:	d113      	bne.n	80054f0 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 80054c8:	2300      	movs	r3, #0
 80054ca:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80054cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80054d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80054da:	4635      	mov	r5, r6
 80054dc:	e7ca      	b.n	8005474 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80054e0:	f042 0220 	orr.w	r2, r2, #32
 80054e4:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054e8:	f042 0201 	orr.w	r2, r2, #1
 80054ec:	62e2      	str	r2, [r4, #44]	; 0x2c
 80054ee:	e7cb      	b.n	8005488 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80054f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054f2:	f023 0312 	bic.w	r3, r3, #18
 80054f6:	f043 0310 	orr.w	r3, r3, #16
 80054fa:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8005504:	2001      	movs	r0, #1
 8005506:	e7e7      	b.n	80054d8 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005508:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800550a:	f043 0310 	orr.w	r3, r3, #16
 800550e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005510:	e7f8      	b.n	8005504 <HAL_ADC_Init+0xe4>
 8005512:	bf00      	nop
 8005514:	ffe1f7fd 	.word	0xffe1f7fd
 8005518:	ff1f0efe 	.word	0xff1f0efe

0800551c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800551c:	4907      	ldr	r1, [pc, #28]	; (800553c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800551e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005520:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005522:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005526:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800552a:	0412      	lsls	r2, r2, #16
 800552c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800552e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005538:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800553a:	4770      	bx	lr
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005542:	b530      	push	{r4, r5, lr}
 8005544:	68dc      	ldr	r4, [r3, #12]
 8005546:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800554a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005550:	2b04      	cmp	r3, #4
 8005552:	bf28      	it	cs
 8005554:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005556:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005558:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800555c:	bf94      	ite	ls
 800555e:	2400      	movls	r4, #0
 8005560:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005562:	fa05 f303 	lsl.w	r3, r5, r3
 8005566:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800556a:	40a5      	lsls	r5, r4
 800556c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005570:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8005572:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005574:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005578:	bfac      	ite	ge
 800557a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800557e:	4a07      	ldrlt	r2, [pc, #28]	; (800559c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005580:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005584:	b2db      	uxtb	r3, r3
 8005586:	bfab      	itete	ge
 8005588:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005590:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005594:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005596:	bd30      	pop	{r4, r5, pc}
 8005598:	e000ed00 	.word	0xe000ed00
 800559c:	e000ed14 	.word	0xe000ed14

080055a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80055a0:	2800      	cmp	r0, #0
 80055a2:	db07      	blt.n	80055b4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a4:	2301      	movs	r3, #1
 80055a6:	0941      	lsrs	r1, r0, #5
 80055a8:	4a03      	ldr	r2, [pc, #12]	; (80055b8 <HAL_NVIC_EnableIRQ+0x18>)
 80055aa:	f000 001f 	and.w	r0, r0, #31
 80055ae:	4083      	lsls	r3, r0
 80055b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	e000e100 	.word	0xe000e100

080055bc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80055bc:	2800      	cmp	r0, #0
 80055be:	db0c      	blt.n	80055da <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c0:	2201      	movs	r2, #1
 80055c2:	4906      	ldr	r1, [pc, #24]	; (80055dc <HAL_NVIC_DisableIRQ+0x20>)
 80055c4:	0943      	lsrs	r3, r0, #5
 80055c6:	f000 001f 	and.w	r0, r0, #31
 80055ca:	4082      	lsls	r2, r0
 80055cc:	3320      	adds	r3, #32
 80055ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80055d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80055d6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80055da:	4770      	bx	lr
 80055dc:	e000e100 	.word	0xe000e100

080055e0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055e0:	4603      	mov	r3, r0
{
 80055e2:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80055e4:	b340      	cbz	r0, 8005638 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055e6:	2114      	movs	r1, #20
 80055e8:	6800      	ldr	r0, [r0, #0]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <HAL_DMA_Init+0x5c>)
 80055ec:	4402      	add	r2, r0
 80055ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80055f2:	0092      	lsls	r2, r2, #2
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80055f6:	4a12      	ldr	r2, [pc, #72]	; (8005640 <HAL_DMA_Init+0x60>)
 80055f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005600:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8005604:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8005608:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	4322      	orrs	r2, r4
 800560c:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800560e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005612:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005614:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005616:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561a:	4322      	orrs	r2, r4
 800561c:	699c      	ldr	r4, [r3, #24]
 800561e:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005620:	69dc      	ldr	r4, [r3, #28]
 8005622:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8005624:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005626:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005628:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800562a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800562c:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800562e:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8005632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 8005636:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005638:	2001      	movs	r0, #1
 800563a:	e7fc      	b.n	8005636 <HAL_DMA_Init+0x56>
 800563c:	bffdfff8 	.word	0xbffdfff8
 8005640:	40020000 	.word	0x40020000

08005644 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005644:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005646:	b308      	cbz	r0, 800568c <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005648:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800564a:	4a11      	ldr	r2, [pc, #68]	; (8005690 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 800564c:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800564e:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 800565a:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 800565c:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 800565e:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005660:	2114      	movs	r1, #20
 8005662:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005666:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005668:	4c0a      	ldr	r4, [pc, #40]	; (8005694 <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 8005672:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005674:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005676:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 8005678:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 800567c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005680:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005684:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8005688:	4618      	mov	r0, r3
}
 800568a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800568c:	2001      	movs	r0, #1
 800568e:	e7fc      	b.n	800568a <HAL_DMA_DeInit+0x46>
 8005690:	bffdfff8 	.word	0xbffdfff8
 8005694:	40020000 	.word	0x40020000

08005698 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800569a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800569c:	f890 0020 	ldrb.w	r0, [r0, #32]
 80056a0:	2801      	cmp	r0, #1
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_Start_IT+0x7a>
 80056a4:	2001      	movs	r0, #1
 80056a6:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056aa:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 80056ae:	2400      	movs	r4, #0
 80056b0:	2801      	cmp	r0, #1
 80056b2:	b2c6      	uxtb	r6, r0
 80056b4:	f04f 0002 	mov.w	r0, #2
 80056b8:	d128      	bne.n	800570c <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ba:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056be:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056c0:	682c      	ldr	r4, [r5, #0]
 80056c2:	6820      	ldr	r0, [r4, #0]
 80056c4:	f020 0001 	bic.w	r0, r0, #1
 80056c8:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056ca:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 80056ce:	fa06 f000 	lsl.w	r0, r6, r0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056d4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056d6:	686b      	ldr	r3, [r5, #4]
 80056d8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80056da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80056dc:	bf0b      	itete	eq
 80056de:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80056e0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80056e2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80056e4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80056e6:	b14b      	cbz	r3, 80056fc <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80056f0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6023      	str	r3, [r4, #0]
}
 80056fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	f023 0304 	bic.w	r3, r3, #4
 8005702:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	f043 030a 	orr.w	r3, r3, #10
 800570a:	e7f0      	b.n	80056ee <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 800570c:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 8005710:	e7f3      	b.n	80056fa <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8005712:	2002      	movs	r0, #2
 8005714:	e7f1      	b.n	80056fa <HAL_DMA_Start_IT+0x62>

08005716 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005716:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800571a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800571c:	2a02      	cmp	r2, #2
 800571e:	d006      	beq.n	800572e <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005720:	2204      	movs	r2, #4
 8005722:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 8005724:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2020 	strb.w	r2, [r3, #32]
}
 800572c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800572e:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005730:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005732:	6811      	ldr	r1, [r2, #0]
 8005734:	f021 010e 	bic.w	r1, r1, #14
 8005738:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800573a:	6811      	ldr	r1, [r2, #0]
 800573c:	f021 0101 	bic.w	r1, r1, #1
 8005740:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005742:	2101      	movs	r1, #1
 8005744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005746:	fa01 f202 	lsl.w	r2, r1, r2
 800574a:	6042      	str	r2, [r0, #4]
  return status; 
 800574c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800574e:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 8005752:	e7e8      	b.n	8005726 <HAL_DMA_Abort+0x10>

08005754 <HAL_DMA_Abort_IT>:
{  
 8005754:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005756:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800575a:	2b02      	cmp	r3, #2
 800575c:	d003      	beq.n	8005766 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800575e:	2304      	movs	r3, #4
 8005760:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005762:	2001      	movs	r0, #1
}
 8005764:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005766:	6803      	ldr	r3, [r0, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	f022 020e 	bic.w	r2, r2, #14
 800576e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005778:	4a18      	ldr	r2, [pc, #96]	; (80057dc <HAL_DMA_Abort_IT+0x88>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01f      	beq.n	80057be <HAL_DMA_Abort_IT+0x6a>
 800577e:	3214      	adds	r2, #20
 8005780:	4293      	cmp	r3, r2
 8005782:	d01e      	beq.n	80057c2 <HAL_DMA_Abort_IT+0x6e>
 8005784:	3214      	adds	r2, #20
 8005786:	4293      	cmp	r3, r2
 8005788:	d01d      	beq.n	80057c6 <HAL_DMA_Abort_IT+0x72>
 800578a:	3214      	adds	r2, #20
 800578c:	4293      	cmp	r3, r2
 800578e:	d01d      	beq.n	80057cc <HAL_DMA_Abort_IT+0x78>
 8005790:	3214      	adds	r2, #20
 8005792:	4293      	cmp	r3, r2
 8005794:	d01d      	beq.n	80057d2 <HAL_DMA_Abort_IT+0x7e>
 8005796:	3214      	adds	r2, #20
 8005798:	4293      	cmp	r3, r2
 800579a:	bf0c      	ite	eq
 800579c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80057a0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80057a4:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 80057a6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80057a8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80057aa:	2301      	movs	r3, #1
 80057ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 80057b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80057b2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80057b6:	b17b      	cbz	r3, 80057d8 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 80057b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	4620      	mov	r0, r4
 80057bc:	e7d2      	b.n	8005764 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80057be:	2301      	movs	r3, #1
 80057c0:	e7f0      	b.n	80057a4 <HAL_DMA_Abort_IT+0x50>
 80057c2:	2310      	movs	r3, #16
 80057c4:	e7ee      	b.n	80057a4 <HAL_DMA_Abort_IT+0x50>
 80057c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ca:	e7eb      	b.n	80057a4 <HAL_DMA_Abort_IT+0x50>
 80057cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057d0:	e7e8      	b.n	80057a4 <HAL_DMA_Abort_IT+0x50>
 80057d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057d6:	e7e5      	b.n	80057a4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	4618      	mov	r0, r3
 80057da:	e7c3      	b.n	8005764 <HAL_DMA_Abort_IT+0x10>
 80057dc:	40020008 	.word	0x40020008
 80057e0:	40020000 	.word	0x40020000

080057e4 <HAL_DMA_IRQHandler>:
{
 80057e4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057e6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057e8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057ec:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80057ee:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057f0:	4095      	lsls	r5, r2
 80057f2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80057f4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80057f6:	d032      	beq.n	800585e <HAL_DMA_IRQHandler+0x7a>
 80057f8:	074d      	lsls	r5, r1, #29
 80057fa:	d530      	bpl.n	800585e <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005800:	bf5e      	ittt	pl
 8005802:	681a      	ldrpl	r2, [r3, #0]
 8005804:	f022 0204 	bicpl.w	r2, r2, #4
 8005808:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800580a:	4a3e      	ldr	r2, [pc, #248]	; (8005904 <HAL_DMA_IRQHandler+0x120>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d019      	beq.n	8005844 <HAL_DMA_IRQHandler+0x60>
 8005810:	3214      	adds	r2, #20
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_DMA_IRQHandler+0x64>
 8005816:	3214      	adds	r2, #20
 8005818:	4293      	cmp	r3, r2
 800581a:	d017      	beq.n	800584c <HAL_DMA_IRQHandler+0x68>
 800581c:	3214      	adds	r2, #20
 800581e:	4293      	cmp	r3, r2
 8005820:	d017      	beq.n	8005852 <HAL_DMA_IRQHandler+0x6e>
 8005822:	3214      	adds	r2, #20
 8005824:	4293      	cmp	r3, r2
 8005826:	d017      	beq.n	8005858 <HAL_DMA_IRQHandler+0x74>
 8005828:	3214      	adds	r2, #20
 800582a:	4293      	cmp	r3, r2
 800582c:	bf0c      	ite	eq
 800582e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005832:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005836:	4a34      	ldr	r2, [pc, #208]	; (8005908 <HAL_DMA_IRQHandler+0x124>)
 8005838:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800583a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05e      	beq.n	80058fe <HAL_DMA_IRQHandler+0x11a>
}
 8005840:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005842:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005844:	2304      	movs	r3, #4
 8005846:	e7f6      	b.n	8005836 <HAL_DMA_IRQHandler+0x52>
 8005848:	2340      	movs	r3, #64	; 0x40
 800584a:	e7f4      	b.n	8005836 <HAL_DMA_IRQHandler+0x52>
 800584c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005850:	e7f1      	b.n	8005836 <HAL_DMA_IRQHandler+0x52>
 8005852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005856:	e7ee      	b.n	8005836 <HAL_DMA_IRQHandler+0x52>
 8005858:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800585c:	e7eb      	b.n	8005836 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800585e:	2502      	movs	r5, #2
 8005860:	4095      	lsls	r5, r2
 8005862:	4225      	tst	r5, r4
 8005864:	d035      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xee>
 8005866:	078d      	lsls	r5, r1, #30
 8005868:	d533      	bpl.n	80058d2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	0694      	lsls	r4, r2, #26
 800586e:	d406      	bmi.n	800587e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f022 020a 	bic.w	r2, r2, #10
 8005876:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005878:	2201      	movs	r2, #1
 800587a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800587e:	4a21      	ldr	r2, [pc, #132]	; (8005904 <HAL_DMA_IRQHandler+0x120>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d019      	beq.n	80058b8 <HAL_DMA_IRQHandler+0xd4>
 8005884:	3214      	adds	r2, #20
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <HAL_DMA_IRQHandler+0xd8>
 800588a:	3214      	adds	r2, #20
 800588c:	4293      	cmp	r3, r2
 800588e:	d017      	beq.n	80058c0 <HAL_DMA_IRQHandler+0xdc>
 8005890:	3214      	adds	r2, #20
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <HAL_DMA_IRQHandler+0xe2>
 8005896:	3214      	adds	r2, #20
 8005898:	4293      	cmp	r3, r2
 800589a:	d017      	beq.n	80058cc <HAL_DMA_IRQHandler+0xe8>
 800589c:	3214      	adds	r2, #20
 800589e:	4293      	cmp	r3, r2
 80058a0:	bf0c      	ite	eq
 80058a2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80058a6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80058aa:	4a17      	ldr	r2, [pc, #92]	; (8005908 <HAL_DMA_IRQHandler+0x124>)
 80058ac:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80058ae:	2300      	movs	r3, #0
 80058b0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80058b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80058b6:	e7c1      	b.n	800583c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80058b8:	2302      	movs	r3, #2
 80058ba:	e7f6      	b.n	80058aa <HAL_DMA_IRQHandler+0xc6>
 80058bc:	2320      	movs	r3, #32
 80058be:	e7f4      	b.n	80058aa <HAL_DMA_IRQHandler+0xc6>
 80058c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c4:	e7f1      	b.n	80058aa <HAL_DMA_IRQHandler+0xc6>
 80058c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058ca:	e7ee      	b.n	80058aa <HAL_DMA_IRQHandler+0xc6>
 80058cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058d0:	e7eb      	b.n	80058aa <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80058d2:	2508      	movs	r5, #8
 80058d4:	4095      	lsls	r5, r2
 80058d6:	4225      	tst	r5, r4
 80058d8:	d011      	beq.n	80058fe <HAL_DMA_IRQHandler+0x11a>
 80058da:	0709      	lsls	r1, r1, #28
 80058dc:	d50f      	bpl.n	80058fe <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	f021 010e 	bic.w	r1, r1, #14
 80058e4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058e6:	2301      	movs	r3, #1
 80058e8:	fa03 f202 	lsl.w	r2, r3, r2
 80058ec:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058ee:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80058f0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80058f4:	2300      	movs	r3, #0
 80058f6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80058fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80058fc:	e79e      	b.n	800583c <HAL_DMA_IRQHandler+0x58>
}
 80058fe:	bc70      	pop	{r4, r5, r6}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40020008 	.word	0x40020008
 8005908:	40020000 	.word	0x40020000

0800590c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005910:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8005912:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005914:	4f64      	ldr	r7, [pc, #400]	; (8005aa8 <HAL_GPIO_Init+0x19c>)
 8005916:	4b65      	ldr	r3, [pc, #404]	; (8005aac <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8005918:	f8df c194 	ldr.w	ip, [pc, #404]	; 8005ab0 <HAL_GPIO_Init+0x1a4>
 800591c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8005ab4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005920:	680d      	ldr	r5, [r1, #0]
 8005922:	fa35 f406 	lsrs.w	r4, r5, r6
 8005926:	d102      	bne.n	800592e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8005928:	b003      	add	sp, #12
 800592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800592e:	f04f 0801 	mov.w	r8, #1
 8005932:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005936:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800593a:	ea38 0505 	bics.w	r5, r8, r5
 800593e:	d17a      	bne.n	8005a36 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8005940:	684d      	ldr	r5, [r1, #4]
 8005942:	2d03      	cmp	r5, #3
 8005944:	d807      	bhi.n	8005956 <HAL_GPIO_Init+0x4a>
 8005946:	3d01      	subs	r5, #1
 8005948:	2d02      	cmp	r5, #2
 800594a:	f200 8087 	bhi.w	8005a5c <HAL_GPIO_Init+0x150>
 800594e:	e8df f005 	tbb	[pc, r5]
 8005952:	9a95      	.short	0x9a95
 8005954:	a0          	.byte	0xa0
 8005955:	00          	.byte	0x00
 8005956:	2d12      	cmp	r5, #18
 8005958:	f000 8098 	beq.w	8005a8c <HAL_GPIO_Init+0x180>
 800595c:	d86d      	bhi.n	8005a3a <HAL_GPIO_Init+0x12e>
 800595e:	2d11      	cmp	r5, #17
 8005960:	f000 808e 	beq.w	8005a80 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005964:	2cff      	cmp	r4, #255	; 0xff
 8005966:	bf98      	it	ls
 8005968:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800596a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800596e:	bf88      	it	hi
 8005970:	f100 0a04 	addhi.w	sl, r0, #4
 8005974:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005978:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800597c:	bf88      	it	hi
 800597e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005980:	fa09 fb05 	lsl.w	fp, r9, r5
 8005984:	ea28 080b 	bic.w	r8, r8, fp
 8005988:	fa02 f505 	lsl.w	r5, r2, r5
 800598c:	ea48 0505 	orr.w	r5, r8, r5
 8005990:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005994:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005998:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800599c:	d04b      	beq.n	8005a36 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800599e:	69bd      	ldr	r5, [r7, #24]
 80059a0:	f026 0803 	bic.w	r8, r6, #3
 80059a4:	f045 0501 	orr.w	r5, r5, #1
 80059a8:	61bd      	str	r5, [r7, #24]
 80059aa:	69bd      	ldr	r5, [r7, #24]
 80059ac:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80059b0:	f005 0501 	and.w	r5, r5, #1
 80059b4:	9501      	str	r5, [sp, #4]
 80059b6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059ba:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059be:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80059c4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80059c8:	fa09 f90b 	lsl.w	r9, r9, fp
 80059cc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059d0:	4d39      	ldr	r5, [pc, #228]	; (8005ab8 <HAL_GPIO_Init+0x1ac>)
 80059d2:	42a8      	cmp	r0, r5
 80059d4:	d061      	beq.n	8005a9a <HAL_GPIO_Init+0x18e>
 80059d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059da:	42a8      	cmp	r0, r5
 80059dc:	d05f      	beq.n	8005a9e <HAL_GPIO_Init+0x192>
 80059de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059e2:	42a8      	cmp	r0, r5
 80059e4:	d05d      	beq.n	8005aa2 <HAL_GPIO_Init+0x196>
 80059e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059ea:	42a8      	cmp	r0, r5
 80059ec:	bf0c      	ite	eq
 80059ee:	2503      	moveq	r5, #3
 80059f0:	2504      	movne	r5, #4
 80059f2:	fa05 f50b 	lsl.w	r5, r5, fp
 80059f6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80059fa:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80059fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a00:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a04:	bf14      	ite	ne
 8005a06:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a08:	43a5      	biceq	r5, r4
 8005a0a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a0c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a0e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005a12:	bf14      	ite	ne
 8005a14:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005a16:	43a5      	biceq	r5, r4
 8005a18:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8005a1a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a1c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005a20:	bf14      	ite	ne
 8005a22:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005a24:	43a5      	biceq	r5, r4
 8005a26:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8005a28:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a2a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005a2e:	bf14      	ite	ne
 8005a30:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005a32:	43a5      	biceq	r5, r4
 8005a34:	601d      	str	r5, [r3, #0]
	position++;
 8005a36:	3601      	adds	r6, #1
 8005a38:	e772      	b.n	8005920 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005a3a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005abc <HAL_GPIO_Init+0x1b0>
 8005a3e:	454d      	cmp	r5, r9
 8005a40:	d00c      	beq.n	8005a5c <HAL_GPIO_Init+0x150>
 8005a42:	d817      	bhi.n	8005a74 <HAL_GPIO_Init+0x168>
 8005a44:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005a48:	454d      	cmp	r5, r9
 8005a4a:	d007      	beq.n	8005a5c <HAL_GPIO_Init+0x150>
 8005a4c:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005a50:	454d      	cmp	r5, r9
 8005a52:	d003      	beq.n	8005a5c <HAL_GPIO_Init+0x150>
 8005a54:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005a58:	454d      	cmp	r5, r9
 8005a5a:	d183      	bne.n	8005964 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a5c:	688a      	ldr	r2, [r1, #8]
 8005a5e:	b1d2      	cbz	r2, 8005a96 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a60:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005a62:	bf08      	it	eq
 8005a64:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005a68:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005a6c:	bf18      	it	ne
 8005a6e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8005a72:	e777      	b.n	8005964 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005a74:	4565      	cmp	r5, ip
 8005a76:	d0f1      	beq.n	8005a5c <HAL_GPIO_Init+0x150>
 8005a78:	4575      	cmp	r5, lr
 8005a7a:	e7ee      	b.n	8005a5a <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a7c:	68ca      	ldr	r2, [r1, #12]
          break;
 8005a7e:	e771      	b.n	8005964 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a80:	68ca      	ldr	r2, [r1, #12]
 8005a82:	3204      	adds	r2, #4
          break;
 8005a84:	e76e      	b.n	8005964 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a86:	68ca      	ldr	r2, [r1, #12]
 8005a88:	3208      	adds	r2, #8
          break;
 8005a8a:	e76b      	b.n	8005964 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a8c:	68ca      	ldr	r2, [r1, #12]
 8005a8e:	320c      	adds	r2, #12
          break;
 8005a90:	e768      	b.n	8005964 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8005a92:	2200      	movs	r2, #0
 8005a94:	e766      	b.n	8005964 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a96:	2204      	movs	r2, #4
 8005a98:	e764      	b.n	8005964 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	e7a9      	b.n	80059f2 <HAL_GPIO_Init+0xe6>
 8005a9e:	2501      	movs	r5, #1
 8005aa0:	e7a7      	b.n	80059f2 <HAL_GPIO_Init+0xe6>
 8005aa2:	2502      	movs	r5, #2
 8005aa4:	e7a5      	b.n	80059f2 <HAL_GPIO_Init+0xe6>
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40010400 	.word	0x40010400
 8005ab0:	10310000 	.word	0x10310000
 8005ab4:	10320000 	.word	0x10320000
 8005ab8:	40010800 	.word	0x40010800
 8005abc:	10220000 	.word	0x10220000

08005ac0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005ac4:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8005ac8:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005aca:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005ace:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ad2:	eb00 030b 	add.w	r3, r0, fp
 8005ad6:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005ad8:	4b2e      	ldr	r3, [pc, #184]	; (8005b94 <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 8005ada:	fa31 f402 	lsrs.w	r4, r1, r2
 8005ade:	d102      	bne.n	8005ae6 <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8005ae0:	b003      	add	sp, #12
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ae6:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 8005aea:	400f      	ands	r7, r1
 8005aec:	d049      	beq.n	8005b82 <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 8005aee:	f022 0403 	bic.w	r4, r2, #3
 8005af2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8005af6:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005afa:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8005afe:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005b00:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005b04:	fa08 f90c 	lsl.w	r9, r8, ip
 8005b08:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005b0c:	4d22      	ldr	r5, [pc, #136]	; (8005b98 <HAL_GPIO_DeInit+0xd8>)
 8005b0e:	42a8      	cmp	r0, r5
 8005b10:	d039      	beq.n	8005b86 <HAL_GPIO_DeInit+0xc6>
 8005b12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b16:	42a8      	cmp	r0, r5
 8005b18:	d037      	beq.n	8005b8a <HAL_GPIO_DeInit+0xca>
 8005b1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b1e:	42a8      	cmp	r0, r5
 8005b20:	d035      	beq.n	8005b8e <HAL_GPIO_DeInit+0xce>
 8005b22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b26:	42a8      	cmp	r0, r5
 8005b28:	bf0c      	ite	eq
 8005b2a:	2503      	moveq	r5, #3
 8005b2c:	2504      	movne	r5, #4
 8005b2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8005b32:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005b34:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005b38:	d10f      	bne.n	8005b5a <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005b3a:	681d      	ldr	r5, [r3, #0]
 8005b3c:	4035      	ands	r5, r6
 8005b3e:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005b40:	685d      	ldr	r5, [r3, #4]
 8005b42:	4035      	ands	r5, r6
 8005b44:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005b46:	68dd      	ldr	r5, [r3, #12]
 8005b48:	4035      	ands	r5, r6
 8005b4a:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005b4c:	689d      	ldr	r5, [r3, #8]
 8005b4e:	4035      	ands	r5, r6
 8005b50:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005b52:	68a5      	ldr	r5, [r4, #8]
 8005b54:	ea25 0509 	bic.w	r5, r5, r9
 8005b58:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b5a:	2fff      	cmp	r7, #255	; 0xff
 8005b5c:	bf94      	ite	ls
 8005b5e:	4607      	movls	r7, r0
 8005b60:	9f01      	ldrhi	r7, [sp, #4]
 8005b62:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005b66:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b68:	bf88      	it	hi
 8005b6a:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005b6c:	fa08 fc04 	lsl.w	ip, r8, r4
 8005b70:	ea25 050c 	bic.w	r5, r5, ip
 8005b74:	fa0b f404 	lsl.w	r4, fp, r4
 8005b78:	4325      	orrs	r5, r4
 8005b7a:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005b7c:	68c4      	ldr	r4, [r0, #12]
 8005b7e:	4034      	ands	r4, r6
 8005b80:	60c4      	str	r4, [r0, #12]
    position++;
 8005b82:	3201      	adds	r2, #1
 8005b84:	e7a9      	b.n	8005ada <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005b86:	2500      	movs	r5, #0
 8005b88:	e7d1      	b.n	8005b2e <HAL_GPIO_DeInit+0x6e>
 8005b8a:	2501      	movs	r5, #1
 8005b8c:	e7cf      	b.n	8005b2e <HAL_GPIO_DeInit+0x6e>
 8005b8e:	2502      	movs	r5, #2
 8005b90:	e7cd      	b.n	8005b2e <HAL_GPIO_DeInit+0x6e>
 8005b92:	bf00      	nop
 8005b94:	40010400 	.word	0x40010400
 8005b98:	40010800 	.word	0x40010800

08005b9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b9c:	6883      	ldr	r3, [r0, #8]
 8005b9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005ba0:	bf14      	ite	ne
 8005ba2:	2001      	movne	r0, #1
 8005ba4:	2000      	moveq	r0, #0
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ba8:	b10a      	cbz	r2, 8005bae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005baa:	6101      	str	r1, [r0, #16]
  }
}
 8005bac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bae:	0409      	lsls	r1, r1, #16
 8005bb0:	e7fb      	b.n	8005baa <HAL_GPIO_WritePin+0x2>

08005bb2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bb2:	6801      	ldr	r1, [r0, #0]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	694b      	ldr	r3, [r1, #20]
 8005bb8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005bbc:	d010      	beq.n	8005be0 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005bc2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd0:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd6:	f043 0304 	orr.w	r3, r3, #4
 8005bda:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8005bdc:	2001      	movs	r0, #1
 8005bde:	4770      	bx	lr
  }
  return HAL_OK;
 8005be0:	4618      	mov	r0, r3
}
 8005be2:	4770      	bx	lr

08005be4 <I2C_WaitOnFlagUntilTimeout>:
{
 8005be4:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8005be8:	4606      	mov	r6, r0
 8005bea:	460f      	mov	r7, r1
 8005bec:	4691      	mov	r9, r2
 8005bee:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	f1ba 0f01 	cmp.w	sl, #1
 8005bfa:	bf0c      	ite	eq
 8005bfc:	695c      	ldreq	r4, [r3, #20]
 8005bfe:	699c      	ldrne	r4, [r3, #24]
 8005c00:	ea27 0404 	bic.w	r4, r7, r4
 8005c04:	b2a4      	uxth	r4, r4
 8005c06:	fab4 f484 	clz	r4, r4
 8005c0a:	0964      	lsrs	r4, r4, #5
 8005c0c:	45a1      	cmp	r9, r4
 8005c0e:	d001      	beq.n	8005c14 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005c10:	2000      	movs	r0, #0
 8005c12:	e025      	b.n	8005c60 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8005c14:	1c6a      	adds	r2, r5, #1
 8005c16:	d0ee      	beq.n	8005bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c18:	f7ff fa40 	bl	800509c <HAL_GetTick>
 8005c1c:	9b08      	ldr	r3, [sp, #32]
 8005c1e:	1ac0      	subs	r0, r0, r3
 8005c20:	42a8      	cmp	r0, r5
 8005c22:	d801      	bhi.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	d1e5      	bne.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	f1ba 0f01 	cmp.w	sl, #1
 8005c2e:	bf0c      	ite	eq
 8005c30:	695b      	ldreq	r3, [r3, #20]
 8005c32:	699b      	ldrne	r3, [r3, #24]
 8005c34:	ea27 0303 	bic.w	r3, r7, r3
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	fab3 f383 	clz	r3, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	4599      	cmp	r9, r3
 8005c42:	d1d7      	bne.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c44:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c46:	2220      	movs	r2, #32
          return HAL_ERROR;
 8005c48:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005c4a:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005c4c:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c50:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c54:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005c56:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c5a:	f042 0220 	orr.w	r2, r2, #32
 8005c5e:	6432      	str	r2, [r6, #64]	; 0x40
}
 8005c60:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c70:	6825      	ldr	r5, [r4, #0]
 8005c72:	6968      	ldr	r0, [r5, #20]
 8005c74:	ea27 0000 	bic.w	r0, r7, r0
 8005c78:	b280      	uxth	r0, r0
 8005c7a:	b1b8      	cbz	r0, 8005cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c7c:	696b      	ldr	r3, [r5, #20]
 8005c7e:	055a      	lsls	r2, r3, #21
 8005c80:	d516      	bpl.n	8005cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c84:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005c90:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c96:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ca0:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8005ca4:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca6:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005ca8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005cb0:	1c73      	adds	r3, r6, #1
 8005cb2:	d0de      	beq.n	8005c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb4:	f7ff f9f2 	bl	800509c <HAL_GetTick>
 8005cb8:	eba0 0008 	sub.w	r0, r0, r8
 8005cbc:	42b0      	cmp	r0, r6
 8005cbe:	d801      	bhi.n	8005cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8005cc0:	2e00      	cmp	r6, #0
 8005cc2:	d1d5      	bne.n	8005c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	ea27 0202 	bic.w	r2, r7, r2
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	2a00      	cmp	r2, #0
 8005cd0:	d0ce      	beq.n	8005c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cd4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cd6:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	e7dd      	b.n	8005ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08005ce8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	4604      	mov	r4, r0
 8005cec:	460d      	mov	r5, r1
 8005cee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	d501      	bpl.n	8005cfc <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005cf8:	2000      	movs	r0, #0
}
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7ff ff58 	bl	8005bb2 <I2C_IsAcknowledgeFailed>
 8005d02:	b9c8      	cbnz	r0, 8005d38 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005d04:	1c6a      	adds	r2, r5, #1
 8005d06:	d0f3      	beq.n	8005cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d08:	f7ff f9c8 	bl	800509c <HAL_GetTick>
 8005d0c:	1b80      	subs	r0, r0, r6
 8005d0e:	42a8      	cmp	r0, r5
 8005d10:	d801      	bhi.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005d12:	2d00      	cmp	r5, #0
 8005d14:	d1ec      	bne.n	8005cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005d1e:	d1e7      	bne.n	8005cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d20:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d22:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d24:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d2c:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005d2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d32:	f042 0220 	orr.w	r2, r2, #32
 8005d36:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
 8005d3a:	e7de      	b.n	8005cfa <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08005d3c <I2C_RequestMemoryWrite>:
{
 8005d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d40:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d42:	6802      	ldr	r2, [r0, #0]
{
 8005d44:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d46:	6813      	ldr	r3, [r2, #0]
{
 8005d48:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4e:	6013      	str	r3, [r2, #0]
{
 8005d50:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005d54:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d56:	463b      	mov	r3, r7
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d5e:	f8cd 8000 	str.w	r8, [sp]
{
 8005d62:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d64:	f7ff ff3e 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	b138      	cbz	r0, 8005d7c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	05db      	lsls	r3, r3, #23
 8005d70:	d502      	bpl.n	8005d78 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d76:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005d78:	2003      	movs	r0, #3
 8005d7a:	e00a      	b.n	8005d92 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d7c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005d80:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d82:	463a      	mov	r2, r7
 8005d84:	4643      	mov	r3, r8
 8005d86:	4620      	mov	r0, r4
 8005d88:	4917      	ldr	r1, [pc, #92]	; (8005de8 <I2C_RequestMemoryWrite+0xac>)
 8005d8a:	f7ff ff6b 	bl	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d8e:	b118      	cbz	r0, 8005d98 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8005d90:	2001      	movs	r0, #1
}
 8005d92:	b005      	add	sp, #20
 8005d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d98:	6823      	ldr	r3, [r4, #0]
 8005d9a:	9003      	str	r0, [sp, #12]
 8005d9c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da0:	9203      	str	r2, [sp, #12]
 8005da2:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da4:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da8:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005daa:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dac:	f7ff ff9c 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db0:	b140      	cbz	r0, 8005dc4 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db6:	bf01      	itttt	eq
 8005db8:	6822      	ldreq	r2, [r4, #0]
 8005dba:	6813      	ldreq	r3, [r2, #0]
 8005dbc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005dc0:	6013      	streq	r3, [r2, #0]
 8005dc2:	e7e5      	b.n	8005d90 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dc4:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dca:	d102      	bne.n	8005dd2 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dcc:	b2ed      	uxtb	r5, r5
 8005dce:	611d      	str	r5, [r3, #16]
 8005dd0:	e7df      	b.n	8005d92 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005dd2:	0a2a      	lsrs	r2, r5, #8
 8005dd4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dd6:	4639      	mov	r1, r7
 8005dd8:	4642      	mov	r2, r8
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff84 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d1e6      	bne.n	8005db2 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	e7f1      	b.n	8005dcc <I2C_RequestMemoryWrite+0x90>
 8005de8:	00010002 	.word	0x00010002

08005dec <I2C_RequestMemoryRead>:
{
 8005dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005df0:	469a      	mov	sl, r3
 8005df2:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	6803      	ldr	r3, [r0, #0]
{
 8005df8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfa:	681a      	ldr	r2, [r3, #0]
{
 8005dfc:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e04:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e0e:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e10:	463b      	mov	r3, r7
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8cd 8000 	str.w	r8, [sp]
{
 8005e18:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1a:	f7ff fee3 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	b148      	cbz	r0, 8005e36 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e22:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e24:	05db      	lsls	r3, r3, #23
 8005e26:	d502      	bpl.n	8005e2e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e2c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005e2e:	2003      	movs	r0, #3
}
 8005e30:	b004      	add	sp, #16
 8005e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e36:	fa5f f986 	uxtb.w	r9, r6
 8005e3a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005e3e:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e40:	463a      	mov	r2, r7
 8005e42:	4643      	mov	r3, r8
 8005e44:	4620      	mov	r0, r4
 8005e46:	4929      	ldr	r1, [pc, #164]	; (8005eec <I2C_RequestMemoryRead+0x100>)
 8005e48:	f7ff ff0c 	bl	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e4c:	b108      	cbz	r0, 8005e52 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7ee      	b.n	8005e30 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	9003      	str	r0, [sp, #12]
 8005e56:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e58:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5e:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e60:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e62:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e64:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e66:	f7ff ff3f 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6a:	b140      	cbz	r0, 8005e7e <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e6e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e70:	bf01      	itttt	eq
 8005e72:	6822      	ldreq	r2, [r4, #0]
 8005e74:	6813      	ldreq	r3, [r2, #0]
 8005e76:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005e7a:	6013      	streq	r3, [r2, #0]
 8005e7c:	e7e7      	b.n	8005e4e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e7e:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e82:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e84:	d11a      	bne.n	8005ebc <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e86:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e88:	4642      	mov	r2, r8
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e90:	f7ff ff2a 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e94:	4602      	mov	r2, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d1e8      	bne.n	8005e6c <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9a:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e9c:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9e:	680b      	ldr	r3, [r1, #0]
 8005ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea4:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eac:	f8cd 8000 	str.w	r8, [sp]
 8005eb0:	f7ff fe98 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	b160      	cbz	r0, 8005ed2 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eb8:	6813      	ldr	r3, [r2, #0]
 8005eba:	e7b3      	b.n	8005e24 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ebc:	0a2a      	lsrs	r2, r5, #8
 8005ebe:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	4642      	mov	r2, r8
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff ff0f 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d1ce      	bne.n	8005e6c <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	e7d9      	b.n	8005e86 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ed2:	f049 0301 	orr.w	r3, r9, #1
 8005ed6:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4643      	mov	r3, r8
 8005edc:	463a      	mov	r2, r7
 8005ede:	4903      	ldr	r1, [pc, #12]	; (8005eec <I2C_RequestMemoryRead+0x100>)
 8005ee0:	f7ff fec0 	bl	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8005ee4:	3800      	subs	r0, #0
 8005ee6:	bf18      	it	ne
 8005ee8:	2001      	movne	r0, #1
 8005eea:	e7a1      	b.n	8005e30 <I2C_RequestMemoryRead+0x44>
 8005eec:	00010002 	.word	0x00010002

08005ef0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	460d      	mov	r5, r1
 8005ef6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	075b      	lsls	r3, r3, #29
 8005efe:	d501      	bpl.n	8005f04 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005f00:	2000      	movs	r0, #0
}
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f04:	4620      	mov	r0, r4
 8005f06:	f7ff fe54 	bl	8005bb2 <I2C_IsAcknowledgeFailed>
 8005f0a:	b9c8      	cbnz	r0, 8005f40 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005f0c:	1c6a      	adds	r2, r5, #1
 8005f0e:	d0f3      	beq.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f10:	f7ff f8c4 	bl	800509c <HAL_GetTick>
 8005f14:	1b80      	subs	r0, r0, r6
 8005f16:	42a8      	cmp	r0, r5
 8005f18:	d801      	bhi.n	8005f1e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005f1a:	2d00      	cmp	r5, #0
 8005f1c:	d1ec      	bne.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f013 0304 	ands.w	r3, r3, #4
 8005f26:	d1e7      	bne.n	8005ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f28:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2a:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f2c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f34:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005f36:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f3a:	f042 0220 	orr.w	r2, r2, #32
 8005f3e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005f40:	2001      	movs	r0, #1
 8005f42:	e7de      	b.n	8005f02 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4604      	mov	r4, r0
 8005f48:	460d      	mov	r5, r1
 8005f4a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f4c:	6821      	ldr	r1, [r4, #0]
 8005f4e:	694b      	ldr	r3, [r1, #20]
 8005f50:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005f54:	d001      	beq.n	8005f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005f56:	2000      	movs	r0, #0
 8005f58:	e010      	b.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f5a:	694a      	ldr	r2, [r1, #20]
 8005f5c:	06d2      	lsls	r2, r2, #27
 8005f5e:	d50e      	bpl.n	8005f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f66:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f68:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f6a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005f74:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f76:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005f78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7ff f88d 	bl	800509c <HAL_GetTick>
 8005f82:	1b80      	subs	r0, r0, r6
 8005f84:	42a8      	cmp	r0, r5
 8005f86:	d801      	bhi.n	8005f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	d1df      	bne.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005f94:	d1da      	bne.n	8005f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f98:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fa4:	f042 0220 	orr.w	r2, r2, #32
 8005fa8:	e7e4      	b.n	8005f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005fac <HAL_I2C_Init>:
{
 8005fac:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005fae:	4604      	mov	r4, r0
 8005fb0:	b908      	cbnz	r0, 8005fb6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005fb2:	2001      	movs	r0, #1
}
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005fba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005fbe:	b91b      	cbnz	r3, 8005fc8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005fc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005fc4:	f7fd fb74 	bl	80036b0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005fc8:	2324      	movs	r3, #36	; 0x24
 8005fca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fe6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f000 fd6a 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fec:	4b3f      	ldr	r3, [pc, #252]	; (80060ec <HAL_I2C_Init+0x140>)
 8005fee:	6865      	ldr	r5, [r4, #4]
 8005ff0:	429d      	cmp	r5, r3
 8005ff2:	bf94      	ite	ls
 8005ff4:	4b3e      	ldrls	r3, [pc, #248]	; (80060f0 <HAL_I2C_Init+0x144>)
 8005ff6:	4b3f      	ldrhi	r3, [pc, #252]	; (80060f4 <HAL_I2C_Init+0x148>)
 8005ff8:	4298      	cmp	r0, r3
 8005ffa:	bf8c      	ite	hi
 8005ffc:	2300      	movhi	r3, #0
 8005ffe:	2301      	movls	r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1d6      	bne.n	8005fb2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006004:	4e39      	ldr	r6, [pc, #228]	; (80060ec <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8006006:	4b3c      	ldr	r3, [pc, #240]	; (80060f8 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006008:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800600a:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800600e:	bf88      	it	hi
 8006010:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006014:	6822      	ldr	r2, [r4, #0]
 8006016:	6851      	ldr	r1, [r2, #4]
 8006018:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800601c:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006020:	bf82      	ittt	hi
 8006022:	4373      	mulhi	r3, r6
 8006024:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8006028:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800602c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800602e:	6a11      	ldr	r1, [r2, #32]
 8006030:	3301      	adds	r3, #1
 8006032:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006036:	430b      	orrs	r3, r1
 8006038:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800603a:	69d1      	ldr	r1, [r2, #28]
 800603c:	1e43      	subs	r3, r0, #1
 800603e:	482b      	ldr	r0, [pc, #172]	; (80060ec <HAL_I2C_Init+0x140>)
 8006040:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006044:	4285      	cmp	r5, r0
 8006046:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800604a:	d832      	bhi.n	80060b2 <HAL_I2C_Init+0x106>
 800604c:	006d      	lsls	r5, r5, #1
 800604e:	fbb3 f3f5 	udiv	r3, r3, r5
 8006052:	f640 70fc 	movw	r0, #4092	; 0xffc
 8006056:	3301      	adds	r3, #1
 8006058:	4203      	tst	r3, r0
 800605a:	d042      	beq.n	80060e2 <HAL_I2C_Init+0x136>
 800605c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006060:	4319      	orrs	r1, r3
 8006062:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006064:	6811      	ldr	r1, [r2, #0]
 8006066:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800606a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800606e:	4303      	orrs	r3, r0
 8006070:	430b      	orrs	r3, r1
 8006072:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006074:	6891      	ldr	r1, [r2, #8]
 8006076:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800607a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800607e:	4303      	orrs	r3, r0
 8006080:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006084:	430b      	orrs	r3, r1
 8006086:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006088:	68d1      	ldr	r1, [r2, #12]
 800608a:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800608e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006092:	4303      	orrs	r3, r0
 8006094:	430b      	orrs	r3, r1
 8006096:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006098:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800609a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060a4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ac:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80060b0:	e780      	b.n	8005fb4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060b2:	68a0      	ldr	r0, [r4, #8]
 80060b4:	b950      	cbnz	r0, 80060cc <HAL_I2C_Init+0x120>
 80060b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060ba:	fbb3 f3f5 	udiv	r3, r3, r5
 80060be:	3301      	adds	r3, #1
 80060c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060c4:	b17b      	cbz	r3, 80060e6 <HAL_I2C_Init+0x13a>
 80060c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ca:	e7c9      	b.n	8006060 <HAL_I2C_Init+0xb4>
 80060cc:	2019      	movs	r0, #25
 80060ce:	4368      	muls	r0, r5
 80060d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80060d4:	3301      	adds	r3, #1
 80060d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060da:	b123      	cbz	r3, 80060e6 <HAL_I2C_Init+0x13a>
 80060dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e0:	e7be      	b.n	8006060 <HAL_I2C_Init+0xb4>
 80060e2:	2304      	movs	r3, #4
 80060e4:	e7bc      	b.n	8006060 <HAL_I2C_Init+0xb4>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e7ba      	b.n	8006060 <HAL_I2C_Init+0xb4>
 80060ea:	bf00      	nop
 80060ec:	000186a0 	.word	0x000186a0
 80060f0:	001e847f 	.word	0x001e847f
 80060f4:	003d08ff 	.word	0x003d08ff
 80060f8:	000f4240 	.word	0x000f4240

080060fc <HAL_I2C_Mem_Write>:
{
 80060fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006100:	4604      	mov	r4, r0
 8006102:	4699      	mov	r9, r3
 8006104:	460f      	mov	r7, r1
 8006106:	4690      	mov	r8, r2
 8006108:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800610a:	f7fe ffc7 	bl	800509c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800610e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006112:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006114:	2b20      	cmp	r3, #32
 8006116:	d003      	beq.n	8006120 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8006118:	2002      	movs	r0, #2
}
 800611a:	b003      	add	sp, #12
 800611c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006120:	9000      	str	r0, [sp, #0]
 8006122:	2319      	movs	r3, #25
 8006124:	2201      	movs	r2, #1
 8006126:	4620      	mov	r0, r4
 8006128:	493a      	ldr	r1, [pc, #232]	; (8006214 <HAL_I2C_Mem_Write+0x118>)
 800612a:	f7ff fd5b 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 800612e:	2800      	cmp	r0, #0
 8006130:	d1f2      	bne.n	8006118 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8006132:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006136:	2b01      	cmp	r3, #1
 8006138:	d0ee      	beq.n	8006118 <HAL_I2C_Mem_Write+0x1c>
 800613a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800613c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800613e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006142:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006144:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006146:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006148:	bf58      	it	pl
 800614a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800614c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800614e:	bf5c      	itt	pl
 8006150:	f043 0301 	orrpl.w	r3, r3, #1
 8006154:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800615e:	2321      	movs	r3, #33	; 0x21
 8006160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006164:	2340      	movs	r3, #64	; 0x40
 8006166:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616a:	2300      	movs	r3, #0
 800616c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800616e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006170:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006172:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006174:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006178:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 800617c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800617e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006180:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006182:	4b25      	ldr	r3, [pc, #148]	; (8006218 <HAL_I2C_Mem_Write+0x11c>)
 8006184:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006186:	464b      	mov	r3, r9
 8006188:	f7ff fdd8 	bl	8005d3c <I2C_RequestMemoryWrite>
 800618c:	2800      	cmp	r0, #0
 800618e:	d02a      	beq.n	80061e6 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8006190:	2001      	movs	r0, #1
 8006192:	e7c2      	b.n	800611a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006194:	f7ff fda8 	bl	8005ce8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	b140      	cbz	r0, 80061ac <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800619c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619e:	bf01      	itttt	eq
 80061a0:	6822      	ldreq	r2, [r4, #0]
 80061a2:	6813      	ldreq	r3, [r2, #0]
 80061a4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80061a8:	6013      	streq	r3, [r2, #0]
 80061aa:	e7f1      	b.n	8006190 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ae:	6827      	ldr	r7, [r4, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80061b6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80061b8:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80061ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80061bc:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80061be:	3a01      	subs	r2, #1
 80061c0:	b292      	uxth	r2, r2
 80061c2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061c4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80061c6:	1e48      	subs	r0, r1, #1
 80061c8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ca:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80061cc:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ce:	d50a      	bpl.n	80061e6 <HAL_I2C_Mem_Write+0xea>
 80061d0:	b148      	cbz	r0, 80061e6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061d2:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80061d4:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061d6:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80061d8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80061da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80061dc:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80061e2:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80061e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e8:	462a      	mov	r2, r5
 80061ea:	4631      	mov	r1, r6
 80061ec:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1d0      	bne.n	8006194 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f2:	f7ff fe7d 	bl	8005ef0 <I2C_WaitOnBTFFlagUntilTimeout>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d1cf      	bne.n	800619a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	6822      	ldr	r2, [r4, #0]
 80061fc:	6813      	ldr	r3, [r2, #0]
 80061fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006202:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8006206:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800620a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800620e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8006212:	e782      	b.n	800611a <HAL_I2C_Mem_Write+0x1e>
 8006214:	00100002 	.word	0x00100002
 8006218:	ffff0000 	.word	0xffff0000

0800621c <HAL_I2C_Mem_Read>:
{
 800621c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006220:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8006222:	2300      	movs	r3, #0
{
 8006224:	4604      	mov	r4, r0
 8006226:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8006228:	9303      	str	r3, [sp, #12]
{
 800622a:	460d      	mov	r5, r1
 800622c:	4690      	mov	r8, r2
 800622e:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8006230:	f7fe ff34 	bl	800509c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006234:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006238:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800623a:	2b20      	cmp	r3, #32
 800623c:	d004      	beq.n	8006248 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 800623e:	2502      	movs	r5, #2
}
 8006240:	4628      	mov	r0, r5
 8006242:	b009      	add	sp, #36	; 0x24
 8006244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006248:	9000      	str	r0, [sp, #0]
 800624a:	2319      	movs	r3, #25
 800624c:	2201      	movs	r2, #1
 800624e:	4620      	mov	r0, r4
 8006250:	498d      	ldr	r1, [pc, #564]	; (8006488 <HAL_I2C_Mem_Read+0x26c>)
 8006252:	f7ff fcc7 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8006256:	2800      	cmp	r0, #0
 8006258:	d1f1      	bne.n	800623e <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 800625a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d0ed      	beq.n	800623e <HAL_I2C_Mem_Read+0x22>
 8006262:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006264:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8006266:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800626a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800626c:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800626e:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006270:	bf58      	it	pl
 8006272:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006274:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8006276:	bf5c      	itt	pl
 8006278:	f043 0301 	orrpl.w	r3, r3, #1
 800627c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800627e:	6803      	ldr	r3, [r0, #0]
 8006280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006284:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006286:	2322      	movs	r3, #34	; 0x22
 8006288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006292:	2300      	movs	r3, #0
 8006294:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006296:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006298:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800629a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800629c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062a0:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 80062a4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062a8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062aa:	4b78      	ldr	r3, [pc, #480]	; (800648c <HAL_I2C_Mem_Read+0x270>)
 80062ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ae:	464b      	mov	r3, r9
 80062b0:	f7ff fd9c 	bl	8005dec <I2C_RequestMemoryRead>
 80062b4:	4605      	mov	r5, r0
 80062b6:	b108      	cbz	r0, 80062bc <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 80062b8:	2501      	movs	r5, #1
 80062ba:	e7c1      	b.n	8006240 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 80062bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062be:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80062c0:	b9c2      	cbnz	r2, 80062f4 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c2:	9004      	str	r0, [sp, #16]
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	9204      	str	r2, [sp, #16]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	9204      	str	r2, [sp, #16]
 80062cc:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062d4:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006490 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80062da:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8006494 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 80062de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d137      	bne.n	8006354 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 80062e4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80062e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80062ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80062f2:	e7a5      	b.n	8006240 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	d111      	bne.n	800631c <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006300:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	9005      	str	r0, [sp, #20]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	9205      	str	r2, [sp, #20]
 800630a:	699a      	ldr	r2, [r3, #24]
 800630c:	9205      	str	r2, [sp, #20]
 800630e:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006318:	b662      	cpsie	i
}
 800631a:	e7dc      	b.n	80062d6 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 800631c:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800631e:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8006320:	d10e      	bne.n	8006340 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006326:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006328:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	9006      	str	r0, [sp, #24]
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	9206      	str	r2, [sp, #24]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	9206      	str	r2, [sp, #24]
 8006336:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633e:	e7ea      	b.n	8006316 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006344:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006346:	9007      	str	r0, [sp, #28]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	9207      	str	r2, [sp, #28]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	9307      	str	r3, [sp, #28]
 8006350:	9b07      	ldr	r3, [sp, #28]
 8006352:	e7c0      	b.n	80062d6 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8006354:	2b03      	cmp	r3, #3
 8006356:	d878      	bhi.n	800644a <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8006358:	2b01      	cmp	r3, #1
 800635a:	d115      	bne.n	8006388 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800635c:	4632      	mov	r2, r6
 800635e:	4639      	mov	r1, r7
 8006360:	4620      	mov	r0, r4
 8006362:	f7ff fdef 	bl	8005f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006366:	2800      	cmp	r0, #0
 8006368:	d1a6      	bne.n	80062b8 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	691a      	ldr	r2, [r3, #16]
 800636e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006370:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006374:	3301      	adds	r3, #1
 8006376:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006378:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800637e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006380:	3b01      	subs	r3, #1
 8006382:	b29b      	uxth	r3, r3
 8006384:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006386:	e7aa      	b.n	80062de <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8006388:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	463b      	mov	r3, r7
 8006390:	4641      	mov	r1, r8
 8006392:	4620      	mov	r0, r4
 8006394:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8006396:	d118      	bne.n	80063ca <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006398:	f7ff fc24 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 800639c:	2800      	cmp	r0, #0
 800639e:	d18b      	bne.n	80062b8 <HAL_I2C_Mem_Read+0x9c>
 80063a0:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063aa:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80063b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b4:	3301      	adds	r3, #1
 80063b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80063b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80063ba:	3b01      	subs	r3, #1
 80063bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80063be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80063c6:	b662      	cpsie	i
 80063c8:	e7cf      	b.n	800636a <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063ca:	f7ff fc0b 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f47f af72 	bne.w	80062b8 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d4:	6822      	ldr	r2, [r4, #0]
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063dc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063de:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063e0:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80063ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80063ee:	1c53      	adds	r3, r2, #1
 80063f0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80063f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80063f4:	3b01      	subs	r3, #1
 80063f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80063f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006400:	f8d9 3000 	ldr.w	r3, [r9]
 8006404:	fbb3 f3f1 	udiv	r3, r3, r1
 8006408:	2123      	movs	r1, #35	; 0x23
 800640a:	434b      	muls	r3, r1
 800640c:	9303      	str	r3, [sp, #12]
            count--;
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	3b01      	subs	r3, #1
 8006412:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	b96b      	cbnz	r3, 8006434 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8006418:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800641a:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800641c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006420:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006424:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006426:	f042 0220 	orr.w	r2, r2, #32
 800642a:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800642c:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800642e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8006432:	e741      	b.n	80062b8 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	6959      	ldr	r1, [r3, #20]
 8006438:	0748      	lsls	r0, r1, #29
 800643a:	d5e8      	bpl.n	800640e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006442:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	7053      	strb	r3, [r2, #1]
 8006448:	e7b3      	b.n	80063b2 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800644a:	4632      	mov	r2, r6
 800644c:	4639      	mov	r1, r7
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff fd78 	bl	8005f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006454:	2800      	cmp	r0, #0
 8006456:	f47f af2f 	bne.w	80062b8 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006460:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006462:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006464:	1c53      	adds	r3, r2, #1
 8006466:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006468:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800646a:	3b01      	subs	r3, #1
 800646c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800646e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006470:	3b01      	subs	r3, #1
 8006472:	b29b      	uxth	r3, r3
 8006474:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	6959      	ldr	r1, [r3, #20]
 800647a:	0749      	lsls	r1, r1, #29
 800647c:	f57f af2f 	bpl.w	80062de <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	7053      	strb	r3, [r2, #1]
 8006484:	e775      	b.n	8006372 <HAL_I2C_Mem_Read+0x156>
 8006486:	bf00      	nop
 8006488:	00100002 	.word	0x00100002
 800648c:	ffff0000 	.word	0xffff0000
 8006490:	00010004 	.word	0x00010004
 8006494:	20000000 	.word	0x20000000

08006498 <HAL_I2C_IsDeviceReady>:
{
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	b085      	sub	sp, #20
 80064a0:	461f      	mov	r7, r3
 80064a2:	4688      	mov	r8, r1
 80064a4:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80064a6:	f7fe fdf9 	bl	800509c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80064ae:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	d003      	beq.n	80064bc <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80064b4:	2002      	movs	r0, #2
}
 80064b6:	b005      	add	sp, #20
 80064b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064bc:	9000      	str	r0, [sp, #0]
 80064be:	2319      	movs	r3, #25
 80064c0:	2201      	movs	r2, #1
 80064c2:	4620      	mov	r0, r4
 80064c4:	494a      	ldr	r1, [pc, #296]	; (80065f0 <HAL_I2C_IsDeviceReady+0x158>)
 80064c6:	f7ff fb8d 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d1f2      	bne.n	80064b4 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 80064ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d0ee      	beq.n	80064b4 <HAL_I2C_IsDeviceReady+0x1c>
 80064d6:	2301      	movs	r3, #1
 80064d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064dc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064de:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e0:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064e2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80065f0 <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064e6:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80064e8:	bf58      	it	pl
 80064ea:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ec:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80064f0:	bf5c      	itt	pl
 80064f2:	f042 0201 	orrpl.w	r2, r2, #1
 80064f6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064fe:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006500:	2324      	movs	r3, #36	; 0x24
 8006502:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006506:	4b3b      	ldr	r3, [pc, #236]	; (80065f4 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006508:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800650a:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800650c:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800650e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006512:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006514:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800651c:	463b      	mov	r3, r7
 800651e:	2200      	movs	r2, #0
 8006520:	9500      	str	r5, [sp, #0]
 8006522:	f7ff fb5f 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	b138      	cbz	r0, 800653a <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	05db      	lsls	r3, r3, #23
 800652e:	d502      	bpl.n	8006536 <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006534:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006536:	2003      	movs	r0, #3
 8006538:	e7bd      	b.n	80064b6 <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800653a:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 800653e:	f7fe fdad 	bl	800509c <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006542:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 8006546:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800654c:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800654e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006552:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006556:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800655a:	29a0      	cmp	r1, #160	; 0xa0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_IsDeviceReady+0xca>
 800655e:	4313      	orrs	r3, r2
 8006560:	d01d      	beq.n	800659e <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 8006562:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006566:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8006568:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800656c:	695a      	ldr	r2, [r3, #20]
 800656e:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006578:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800657a:	d025      	beq.n	80065c8 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657c:	2200      	movs	r2, #0
 800657e:	9203      	str	r2, [sp, #12]
 8006580:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006582:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006584:	9203      	str	r2, [sp, #12]
 8006586:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006588:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800658a:	9303      	str	r3, [sp, #12]
 800658c:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800658e:	4918      	ldr	r1, [pc, #96]	; (80065f0 <HAL_I2C_IsDeviceReady+0x158>)
 8006590:	2319      	movs	r3, #25
 8006592:	9500      	str	r5, [sp, #0]
 8006594:	f7ff fb26 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 8006598:	b188      	cbz	r0, 80065be <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 800659a:	2001      	movs	r0, #1
 800659c:	e78b      	b.n	80064b6 <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800659e:	f7fe fd7d 	bl	800509c <HAL_GetTick>
 80065a2:	1b40      	subs	r0, r0, r5
 80065a4:	42b8      	cmp	r0, r7
 80065a6:	d800      	bhi.n	80065aa <HAL_I2C_IsDeviceReady+0x112>
 80065a8:	b90f      	cbnz	r7, 80065ae <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80065aa:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065b2:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80065b4:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80065b8:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80065bc:	e7cb      	b.n	8006556 <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 80065be:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80065c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80065c6:	e776      	b.n	80064b6 <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065cc:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ce:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d0:	4620      	mov	r0, r4
 80065d2:	2319      	movs	r3, #25
 80065d4:	2201      	movs	r2, #1
 80065d6:	9500      	str	r5, [sp, #0]
 80065d8:	f7ff fb04 	bl	8005be4 <I2C_WaitOnFlagUntilTimeout>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1dc      	bne.n	800659a <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 80065e0:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 80065e2:	4556      	cmp	r6, sl
 80065e4:	d392      	bcc.n	800650c <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80065ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80065ee:	e7d4      	b.n	800659a <HAL_I2C_IsDeviceReady+0x102>
 80065f0:	00100002 	.word	0x00100002
 80065f4:	ffff0000 	.word	0xffff0000

080065f8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80065f8:	2201      	movs	r2, #1
 80065fa:	4b01      	ldr	r3, [pc, #4]	; (8006600 <HAL_PWR_EnableBkUpAccess+0x8>)
 80065fc:	621a      	str	r2, [r3, #32]
}
 80065fe:	4770      	bx	lr
 8006600:	420e0000 	.word	0x420e0000

08006604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006608:	4605      	mov	r5, r0
 800660a:	b338      	cbz	r0, 800665c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800660c:	6803      	ldr	r3, [r0, #0]
 800660e:	07db      	lsls	r3, r3, #31
 8006610:	d410      	bmi.n	8006634 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	079f      	lsls	r7, r3, #30
 8006616:	d45e      	bmi.n	80066d6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	0719      	lsls	r1, r3, #28
 800661c:	f100 8095 	bmi.w	800674a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	075a      	lsls	r2, r3, #29
 8006624:	f100 80c1 	bmi.w	80067aa <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006628:	69e8      	ldr	r0, [r5, #28]
 800662a:	2800      	cmp	r0, #0
 800662c:	f040 812c 	bne.w	8006888 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006630:	2000      	movs	r0, #0
 8006632:	e029      	b.n	8006688 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006634:	4c90      	ldr	r4, [pc, #576]	; (8006878 <HAL_RCC_OscConfig+0x274>)
 8006636:	6863      	ldr	r3, [r4, #4]
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b04      	cmp	r3, #4
 800663e:	d007      	beq.n	8006650 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006640:	6863      	ldr	r3, [r4, #4]
 8006642:	f003 030c 	and.w	r3, r3, #12
 8006646:	2b08      	cmp	r3, #8
 8006648:	d10a      	bne.n	8006660 <HAL_RCC_OscConfig+0x5c>
 800664a:	6863      	ldr	r3, [r4, #4]
 800664c:	03de      	lsls	r6, r3, #15
 800664e:	d507      	bpl.n	8006660 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	039c      	lsls	r4, r3, #14
 8006654:	d5dd      	bpl.n	8006612 <HAL_RCC_OscConfig+0xe>
 8006656:	686b      	ldr	r3, [r5, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1da      	bne.n	8006612 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800665c:	2001      	movs	r0, #1
 800665e:	e013      	b.n	8006688 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006660:	686b      	ldr	r3, [r5, #4]
 8006662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006666:	d112      	bne.n	800668e <HAL_RCC_OscConfig+0x8a>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800666e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006670:	f7fe fd14 	bl	800509c <HAL_GetTick>
 8006674:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	0398      	lsls	r0, r3, #14
 800667a:	d4ca      	bmi.n	8006612 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800667c:	f7fe fd0e 	bl	800509c <HAL_GetTick>
 8006680:	1b80      	subs	r0, r0, r6
 8006682:	2864      	cmp	r0, #100	; 0x64
 8006684:	d9f7      	bls.n	8006676 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006686:	2003      	movs	r0, #3
}
 8006688:	b002      	add	sp, #8
 800668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668e:	b99b      	cbnz	r3, 80066b8 <HAL_RCC_OscConfig+0xb4>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006696:	6023      	str	r3, [r4, #0]
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80066a0:	f7fe fcfc 	bl	800509c <HAL_GetTick>
 80066a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0399      	lsls	r1, r3, #14
 80066aa:	d5b2      	bpl.n	8006612 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ac:	f7fe fcf6 	bl	800509c <HAL_GetTick>
 80066b0:	1b80      	subs	r0, r0, r6
 80066b2:	2864      	cmp	r0, #100	; 0x64
 80066b4:	d9f7      	bls.n	80066a6 <HAL_RCC_OscConfig+0xa2>
 80066b6:	e7e6      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	d103      	bne.n	80066c8 <HAL_RCC_OscConfig+0xc4>
 80066c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	e7cf      	b.n	8006668 <HAL_RCC_OscConfig+0x64>
 80066c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066d4:	e7cb      	b.n	800666e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066d6:	4c68      	ldr	r4, [pc, #416]	; (8006878 <HAL_RCC_OscConfig+0x274>)
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	f013 0f0c 	tst.w	r3, #12
 80066de:	d007      	beq.n	80066f0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d110      	bne.n	800670c <HAL_RCC_OscConfig+0x108>
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	03da      	lsls	r2, r3, #15
 80066ee:	d40d      	bmi.n	800670c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	079b      	lsls	r3, r3, #30
 80066f4:	d502      	bpl.n	80066fc <HAL_RCC_OscConfig+0xf8>
 80066f6:	692b      	ldr	r3, [r5, #16]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d1af      	bne.n	800665c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	696a      	ldr	r2, [r5, #20]
 8006700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006704:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	e785      	b.n	8006618 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800670c:	692a      	ldr	r2, [r5, #16]
 800670e:	4b5b      	ldr	r3, [pc, #364]	; (800687c <HAL_RCC_OscConfig+0x278>)
 8006710:	b16a      	cbz	r2, 800672e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006712:	2201      	movs	r2, #1
 8006714:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006716:	f7fe fcc1 	bl	800509c <HAL_GetTick>
 800671a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079f      	lsls	r7, r3, #30
 8006720:	d4ec      	bmi.n	80066fc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006722:	f7fe fcbb 	bl	800509c <HAL_GetTick>
 8006726:	1b80      	subs	r0, r0, r6
 8006728:	2802      	cmp	r0, #2
 800672a:	d9f7      	bls.n	800671c <HAL_RCC_OscConfig+0x118>
 800672c:	e7ab      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800672e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006730:	f7fe fcb4 	bl	800509c <HAL_GetTick>
 8006734:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0798      	lsls	r0, r3, #30
 800673a:	f57f af6d 	bpl.w	8006618 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673e:	f7fe fcad 	bl	800509c <HAL_GetTick>
 8006742:	1b80      	subs	r0, r0, r6
 8006744:	2802      	cmp	r0, #2
 8006746:	d9f6      	bls.n	8006736 <HAL_RCC_OscConfig+0x132>
 8006748:	e79d      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800674a:	69aa      	ldr	r2, [r5, #24]
 800674c:	4e4a      	ldr	r6, [pc, #296]	; (8006878 <HAL_RCC_OscConfig+0x274>)
 800674e:	4b4b      	ldr	r3, [pc, #300]	; (800687c <HAL_RCC_OscConfig+0x278>)
 8006750:	b1e2      	cbz	r2, 800678c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006752:	2201      	movs	r2, #1
 8006754:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006758:	f7fe fca0 	bl	800509c <HAL_GetTick>
 800675c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006760:	079b      	lsls	r3, r3, #30
 8006762:	d50d      	bpl.n	8006780 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006764:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006768:	4b45      	ldr	r3, [pc, #276]	; (8006880 <HAL_RCC_OscConfig+0x27c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006770:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006772:	bf00      	nop
  }
  while (Delay --);
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	1e5a      	subs	r2, r3, #1
 8006778:	9201      	str	r2, [sp, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f9      	bne.n	8006772 <HAL_RCC_OscConfig+0x16e>
 800677e:	e74f      	b.n	8006620 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006780:	f7fe fc8c 	bl	800509c <HAL_GetTick>
 8006784:	1b00      	subs	r0, r0, r4
 8006786:	2802      	cmp	r0, #2
 8006788:	d9e9      	bls.n	800675e <HAL_RCC_OscConfig+0x15a>
 800678a:	e77c      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800678c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006790:	f7fe fc84 	bl	800509c <HAL_GetTick>
 8006794:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006796:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006798:	079f      	lsls	r7, r3, #30
 800679a:	f57f af41 	bpl.w	8006620 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679e:	f7fe fc7d 	bl	800509c <HAL_GetTick>
 80067a2:	1b00      	subs	r0, r0, r4
 80067a4:	2802      	cmp	r0, #2
 80067a6:	d9f6      	bls.n	8006796 <HAL_RCC_OscConfig+0x192>
 80067a8:	e76d      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067aa:	4c33      	ldr	r4, [pc, #204]	; (8006878 <HAL_RCC_OscConfig+0x274>)
 80067ac:	69e3      	ldr	r3, [r4, #28]
 80067ae:	00d8      	lsls	r0, r3, #3
 80067b0:	d424      	bmi.n	80067fc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80067b2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b4:	69e3      	ldr	r3, [r4, #28]
 80067b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ba:	61e3      	str	r3, [r4, #28]
 80067bc:	69e3      	ldr	r3, [r4, #28]
 80067be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c6:	4e2f      	ldr	r6, [pc, #188]	; (8006884 <HAL_RCC_OscConfig+0x280>)
 80067c8:	6833      	ldr	r3, [r6, #0]
 80067ca:	05d9      	lsls	r1, r3, #23
 80067cc:	d518      	bpl.n	8006800 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ce:	68eb      	ldr	r3, [r5, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d126      	bne.n	8006822 <HAL_RCC_OscConfig+0x21e>
 80067d4:	6a23      	ldr	r3, [r4, #32]
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80067dc:	f7fe fc5e 	bl	800509c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80067e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067e6:	6a23      	ldr	r3, [r4, #32]
 80067e8:	079b      	lsls	r3, r3, #30
 80067ea:	d53f      	bpl.n	800686c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80067ec:	2f00      	cmp	r7, #0
 80067ee:	f43f af1b 	beq.w	8006628 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f2:	69e3      	ldr	r3, [r4, #28]
 80067f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f8:	61e3      	str	r3, [r4, #28]
 80067fa:	e715      	b.n	8006628 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80067fc:	2700      	movs	r7, #0
 80067fe:	e7e2      	b.n	80067c6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006800:	6833      	ldr	r3, [r6, #0]
 8006802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006806:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006808:	f7fe fc48 	bl	800509c <HAL_GetTick>
 800680c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	05da      	lsls	r2, r3, #23
 8006812:	d4dc      	bmi.n	80067ce <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006814:	f7fe fc42 	bl	800509c <HAL_GetTick>
 8006818:	eba0 0008 	sub.w	r0, r0, r8
 800681c:	2864      	cmp	r0, #100	; 0x64
 800681e:	d9f6      	bls.n	800680e <HAL_RCC_OscConfig+0x20a>
 8006820:	e731      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006822:	b9ab      	cbnz	r3, 8006850 <HAL_RCC_OscConfig+0x24c>
 8006824:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006826:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800682a:	f023 0301 	bic.w	r3, r3, #1
 800682e:	6223      	str	r3, [r4, #32]
 8006830:	6a23      	ldr	r3, [r4, #32]
 8006832:	f023 0304 	bic.w	r3, r3, #4
 8006836:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006838:	f7fe fc30 	bl	800509c <HAL_GetTick>
 800683c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800683e:	6a23      	ldr	r3, [r4, #32]
 8006840:	0798      	lsls	r0, r3, #30
 8006842:	d5d3      	bpl.n	80067ec <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fe fc2a 	bl	800509c <HAL_GetTick>
 8006848:	1b80      	subs	r0, r0, r6
 800684a:	4540      	cmp	r0, r8
 800684c:	d9f7      	bls.n	800683e <HAL_RCC_OscConfig+0x23a>
 800684e:	e71a      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006850:	2b05      	cmp	r3, #5
 8006852:	6a23      	ldr	r3, [r4, #32]
 8006854:	d103      	bne.n	800685e <HAL_RCC_OscConfig+0x25a>
 8006856:	f043 0304 	orr.w	r3, r3, #4
 800685a:	6223      	str	r3, [r4, #32]
 800685c:	e7ba      	b.n	80067d4 <HAL_RCC_OscConfig+0x1d0>
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	6223      	str	r3, [r4, #32]
 8006864:	6a23      	ldr	r3, [r4, #32]
 8006866:	f023 0304 	bic.w	r3, r3, #4
 800686a:	e7b6      	b.n	80067da <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800686c:	f7fe fc16 	bl	800509c <HAL_GetTick>
 8006870:	1b80      	subs	r0, r0, r6
 8006872:	4540      	cmp	r0, r8
 8006874:	d9b7      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1e2>
 8006876:	e706      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
 8006878:	40021000 	.word	0x40021000
 800687c:	42420000 	.word	0x42420000
 8006880:	20000000 	.word	0x20000000
 8006884:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006888:	4c2a      	ldr	r4, [pc, #168]	; (8006934 <HAL_RCC_OscConfig+0x330>)
 800688a:	6863      	ldr	r3, [r4, #4]
 800688c:	f003 030c 	and.w	r3, r3, #12
 8006890:	2b08      	cmp	r3, #8
 8006892:	d03e      	beq.n	8006912 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006894:	2200      	movs	r2, #0
 8006896:	4b28      	ldr	r3, [pc, #160]	; (8006938 <HAL_RCC_OscConfig+0x334>)
 8006898:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800689a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800689c:	d12c      	bne.n	80068f8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800689e:	f7fe fbfd 	bl	800509c <HAL_GetTick>
 80068a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	0199      	lsls	r1, r3, #6
 80068a8:	d420      	bmi.n	80068ec <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068aa:	6a2b      	ldr	r3, [r5, #32]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d105      	bne.n	80068be <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068b2:	6862      	ldr	r2, [r4, #4]
 80068b4:	68a9      	ldr	r1, [r5, #8]
 80068b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80068ba:	430a      	orrs	r2, r1
 80068bc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068be:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80068c0:	6862      	ldr	r2, [r4, #4]
 80068c2:	430b      	orrs	r3, r1
 80068c4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80068c8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80068ca:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068cc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80068ce:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <HAL_RCC_OscConfig+0x334>)
 80068d0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80068d2:	f7fe fbe3 	bl	800509c <HAL_GetTick>
 80068d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	019a      	lsls	r2, r3, #6
 80068dc:	f53f aea8 	bmi.w	8006630 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fe fbdc 	bl	800509c <HAL_GetTick>
 80068e4:	1b40      	subs	r0, r0, r5
 80068e6:	2802      	cmp	r0, #2
 80068e8:	d9f6      	bls.n	80068d8 <HAL_RCC_OscConfig+0x2d4>
 80068ea:	e6cc      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ec:	f7fe fbd6 	bl	800509c <HAL_GetTick>
 80068f0:	1b80      	subs	r0, r0, r6
 80068f2:	2802      	cmp	r0, #2
 80068f4:	d9d6      	bls.n	80068a4 <HAL_RCC_OscConfig+0x2a0>
 80068f6:	e6c6      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80068f8:	f7fe fbd0 	bl	800509c <HAL_GetTick>
 80068fc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	019b      	lsls	r3, r3, #6
 8006902:	f57f ae95 	bpl.w	8006630 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006906:	f7fe fbc9 	bl	800509c <HAL_GetTick>
 800690a:	1b40      	subs	r0, r0, r5
 800690c:	2802      	cmp	r0, #2
 800690e:	d9f6      	bls.n	80068fe <HAL_RCC_OscConfig+0x2fa>
 8006910:	e6b9      	b.n	8006686 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006912:	2801      	cmp	r0, #1
 8006914:	f43f aeb8 	beq.w	8006688 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006918:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800691a:	6a2a      	ldr	r2, [r5, #32]
 800691c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006920:	4291      	cmp	r1, r2
 8006922:	f47f ae9b 	bne.w	800665c <HAL_RCC_OscConfig+0x58>
 8006926:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006928:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800692c:	4293      	cmp	r3, r2
 800692e:	f43f ae7f 	beq.w	8006630 <HAL_RCC_OscConfig+0x2c>
 8006932:	e693      	b.n	800665c <HAL_RCC_OscConfig+0x58>
 8006934:	40021000 	.word	0x40021000
 8006938:	42420000 	.word	0x42420000

0800693c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800693c:	4a0d      	ldr	r2, [pc, #52]	; (8006974 <HAL_RCC_GetSysClockFreq+0x38>)
 800693e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006940:	f003 010c 	and.w	r1, r3, #12
 8006944:	2908      	cmp	r1, #8
 8006946:	d112      	bne.n	800696e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006948:	480b      	ldr	r0, [pc, #44]	; (8006978 <HAL_RCC_GetSysClockFreq+0x3c>)
 800694a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800694e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006950:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006952:	d509      	bpl.n	8006968 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006954:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006956:	4a09      	ldr	r2, [pc, #36]	; (800697c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006958:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800695c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800695e:	4a08      	ldr	r2, [pc, #32]	; (8006980 <HAL_RCC_GetSysClockFreq+0x44>)
 8006960:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006962:	fbb0 f0f3 	udiv	r0, r0, r3
 8006966:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCC_GetSysClockFreq+0x48>)
 800696a:	4358      	muls	r0, r3
 800696c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800696e:	4803      	ldr	r0, [pc, #12]	; (800697c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40021000 	.word	0x40021000
 8006978:	0800bc25 	.word	0x0800bc25
 800697c:	007a1200 	.word	0x007a1200
 8006980:	0800bc35 	.word	0x0800bc35
 8006984:	003d0900 	.word	0x003d0900

08006988 <HAL_RCC_ClockConfig>:
{
 8006988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800698e:	4604      	mov	r4, r0
 8006990:	b910      	cbnz	r0, 8006998 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006992:	2001      	movs	r0, #1
}
 8006994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006998:	4a44      	ldr	r2, [pc, #272]	; (8006aac <HAL_RCC_ClockConfig+0x124>)
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	428b      	cmp	r3, r1
 80069a2:	d328      	bcc.n	80069f6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069a4:	6821      	ldr	r1, [r4, #0]
 80069a6:	078e      	lsls	r6, r1, #30
 80069a8:	d430      	bmi.n	8006a0c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069aa:	07ca      	lsls	r2, r1, #31
 80069ac:	d443      	bmi.n	8006a36 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ae:	4a3f      	ldr	r2, [pc, #252]	; (8006aac <HAL_RCC_ClockConfig+0x124>)
 80069b0:	6813      	ldr	r3, [r2, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	d865      	bhi.n	8006a86 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ba:	6822      	ldr	r2, [r4, #0]
 80069bc:	4d3c      	ldr	r5, [pc, #240]	; (8006ab0 <HAL_RCC_ClockConfig+0x128>)
 80069be:	f012 0f04 	tst.w	r2, #4
 80069c2:	d16c      	bne.n	8006a9e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c4:	0713      	lsls	r3, r2, #28
 80069c6:	d506      	bpl.n	80069d6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069c8:	686b      	ldr	r3, [r5, #4]
 80069ca:	6922      	ldr	r2, [r4, #16]
 80069cc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80069d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80069d4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069d6:	f7ff ffb1 	bl	800693c <HAL_RCC_GetSysClockFreq>
 80069da:	686b      	ldr	r3, [r5, #4]
 80069dc:	4a35      	ldr	r2, [pc, #212]	; (8006ab4 <HAL_RCC_ClockConfig+0x12c>)
 80069de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80069e2:	5cd3      	ldrb	r3, [r2, r3]
 80069e4:	40d8      	lsrs	r0, r3
 80069e6:	4b34      	ldr	r3, [pc, #208]	; (8006ab8 <HAL_RCC_ClockConfig+0x130>)
 80069e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80069ea:	4b34      	ldr	r3, [pc, #208]	; (8006abc <HAL_RCC_ClockConfig+0x134>)
 80069ec:	6818      	ldr	r0, [r3, #0]
 80069ee:	f7fd f817 	bl	8003a20 <HAL_InitTick>
  return HAL_OK;
 80069f2:	2000      	movs	r0, #0
 80069f4:	e7ce      	b.n	8006994 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	f023 0307 	bic.w	r3, r3, #7
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a00:	6813      	ldr	r3, [r2, #0]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	428b      	cmp	r3, r1
 8006a08:	d1c3      	bne.n	8006992 <HAL_RCC_ClockConfig+0xa>
 8006a0a:	e7cb      	b.n	80069a4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0c:	4b28      	ldr	r3, [pc, #160]	; (8006ab0 <HAL_RCC_ClockConfig+0x128>)
 8006a0e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a12:	bf1e      	ittt	ne
 8006a14:	685a      	ldrne	r2, [r3, #4]
 8006a16:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8006a1a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a1e:	bf42      	ittt	mi
 8006a20:	685a      	ldrmi	r2, [r3, #4]
 8006a22:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006a26:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68a0      	ldr	r0, [r4, #8]
 8006a2c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006a30:	4302      	orrs	r2, r0
 8006a32:	605a      	str	r2, [r3, #4]
 8006a34:	e7b9      	b.n	80069aa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	4e1d      	ldr	r6, [pc, #116]	; (8006ab0 <HAL_RCC_ClockConfig+0x128>)
 8006a3a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3e:	d11a      	bne.n	8006a76 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a44:	d0a5      	beq.n	8006992 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a46:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a48:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a4c:	f023 0303 	bic.w	r3, r3, #3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006a54:	f7fe fb22 	bl	800509c <HAL_GetTick>
 8006a58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a5a:	6873      	ldr	r3, [r6, #4]
 8006a5c:	6862      	ldr	r2, [r4, #4]
 8006a5e:	f003 030c 	and.w	r3, r3, #12
 8006a62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a66:	d0a2      	beq.n	80069ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a68:	f7fe fb18 	bl	800509c <HAL_GetTick>
 8006a6c:	1bc0      	subs	r0, r0, r7
 8006a6e:	4540      	cmp	r0, r8
 8006a70:	d9f3      	bls.n	8006a5a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006a72:	2003      	movs	r0, #3
 8006a74:	e78e      	b.n	8006994 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a76:	2a02      	cmp	r2, #2
 8006a78:	d102      	bne.n	8006a80 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a7a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a7e:	e7e1      	b.n	8006a44 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a80:	f013 0f02 	tst.w	r3, #2
 8006a84:	e7de      	b.n	8006a44 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	f023 0307 	bic.w	r3, r3, #7
 8006a8c:	432b      	orrs	r3, r5
 8006a8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a90:	6813      	ldr	r3, [r2, #0]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	42ab      	cmp	r3, r5
 8006a98:	f47f af7b 	bne.w	8006992 <HAL_RCC_ClockConfig+0xa>
 8006a9c:	e78d      	b.n	80069ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a9e:	686b      	ldr	r3, [r5, #4]
 8006aa0:	68e1      	ldr	r1, [r4, #12]
 8006aa2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006aa6:	430b      	orrs	r3, r1
 8006aa8:	606b      	str	r3, [r5, #4]
 8006aaa:	e78b      	b.n	80069c4 <HAL_RCC_ClockConfig+0x3c>
 8006aac:	40022000 	.word	0x40022000
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	0800bc0d 	.word	0x0800bc0d
 8006ab8:	20000000 	.word	0x20000000
 8006abc:	20000008 	.word	0x20000008

08006ac0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006ac2:	4a05      	ldr	r2, [pc, #20]	; (8006ad8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006aca:	5cd3      	ldrb	r3, [r2, r3]
 8006acc:	4a03      	ldr	r2, [pc, #12]	; (8006adc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006ace:	6810      	ldr	r0, [r2, #0]
}
 8006ad0:	40d8      	lsrs	r0, r3
 8006ad2:	4770      	bx	lr
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	0800bc1d 	.word	0x0800bc1d
 8006adc:	20000000 	.word	0x20000000

08006ae0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006ae2:	4a05      	ldr	r2, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006aea:	5cd3      	ldrb	r3, [r2, r3]
 8006aec:	4a03      	ldr	r2, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006aee:	6810      	ldr	r0, [r2, #0]
}
 8006af0:	40d8      	lsrs	r0, r3
 8006af2:	4770      	bx	lr
 8006af4:	40021000 	.word	0x40021000
 8006af8:	0800bc1d 	.word	0x0800bc1d
 8006afc:	20000000 	.word	0x20000000

08006b00 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b00:	230f      	movs	r3, #15
 8006b02:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b04:	4b0b      	ldr	r3, [pc, #44]	; (8006b34 <HAL_RCC_GetClockConfig+0x34>)
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	f002 0203 	and.w	r2, r2, #3
 8006b0c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006b14:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006b1c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	08db      	lsrs	r3, r3, #3
 8006b22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b26:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b28:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <HAL_RCC_GetClockConfig+0x38>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	600b      	str	r3, [r1, #0]
}
 8006b32:	4770      	bx	lr
 8006b34:	40021000 	.word	0x40021000
 8006b38:	40022000 	.word	0x40022000

08006b3c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b3c:	6803      	ldr	r3, [r0, #0]
{
 8006b3e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b42:	07d9      	lsls	r1, r3, #31
{
 8006b44:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006b46:	d521      	bpl.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b48:	4c36      	ldr	r4, [pc, #216]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b4a:	69e3      	ldr	r3, [r4, #28]
 8006b4c:	00da      	lsls	r2, r3, #3
 8006b4e:	d433      	bmi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006b50:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b52:	69e3      	ldr	r3, [r4, #28]
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	61e3      	str	r3, [r4, #28]
 8006b5a:	69e3      	ldr	r3, [r4, #28]
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b64:	4f30      	ldr	r7, [pc, #192]	; (8006c28 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	05db      	lsls	r3, r3, #23
 8006b6a:	d527      	bpl.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b6c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b6e:	686a      	ldr	r2, [r5, #4]
 8006b70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006b74:	d136      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b76:	6a23      	ldr	r3, [r4, #32]
 8006b78:	686a      	ldr	r2, [r5, #4]
 8006b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b82:	b11e      	cbz	r6, 8006b8c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b84:	69e3      	ldr	r3, [r4, #28]
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	0783      	lsls	r3, r0, #30
 8006b90:	d506      	bpl.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b92:	4924      	ldr	r1, [pc, #144]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006b94:	68ab      	ldr	r3, [r5, #8]
 8006b96:	684a      	ldr	r2, [r1, #4]
 8006b98:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ba0:	f010 0010 	ands.w	r0, r0, #16
 8006ba4:	d01b      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ba6:	4a1f      	ldr	r2, [pc, #124]	; (8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ba8:	68e9      	ldr	r1, [r5, #12]
 8006baa:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006bac:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6053      	str	r3, [r2, #4]
 8006bb6:	e012      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8006bb8:	2600      	movs	r6, #0
 8006bba:	e7d3      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006bc4:	f7fe fa6a 	bl	800509c <HAL_GetTick>
 8006bc8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	05d8      	lsls	r0, r3, #23
 8006bce:	d4cd      	bmi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd0:	f7fe fa64 	bl	800509c <HAL_GetTick>
 8006bd4:	eba0 0008 	sub.w	r0, r0, r8
 8006bd8:	2864      	cmp	r0, #100	; 0x64
 8006bda:	d9f6      	bls.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 8006bdc:	2003      	movs	r0, #3
}
 8006bde:	b002      	add	sp, #8
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d0c4      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bec:	2001      	movs	r0, #1
 8006bee:	4a0f      	ldr	r2, [pc, #60]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bf8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bfc:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8006c00:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c02:	07d9      	lsls	r1, r3, #31
 8006c04:	d5b7      	bpl.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8006c06:	f7fe fa49 	bl	800509c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006c0e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	6a23      	ldr	r3, [r4, #32]
 8006c12:	079a      	lsls	r2, r3, #30
 8006c14:	d4af      	bmi.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fe fa41 	bl	800509c <HAL_GetTick>
 8006c1a:	1bc0      	subs	r0, r0, r7
 8006c1c:	4540      	cmp	r0, r8
 8006c1e:	d9f7      	bls.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006c20:	e7dc      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8006c22:	bf00      	nop
 8006c24:	40021000 	.word	0x40021000
 8006c28:	40007000 	.word	0x40007000
 8006c2c:	42420000 	.word	0x42420000

08006c30 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006c30:	2802      	cmp	r0, #2
{
 8006c32:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8006c34:	d044      	beq.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8006c36:	2810      	cmp	r0, #16
 8006c38:	d003      	beq.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8006c3a:	2801      	cmp	r0, #1
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8006c3e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8006c40:	e034      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006c44:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8006c4c:	d02e      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c4e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8006c52:	4822      	ldr	r0, [pc, #136]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c54:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c56:	bf48      	it	mi
 8006c58:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c5a:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c5c:	bf41      	itttt	mi
 8006c5e:	4920      	ldrmi	r1, [pc, #128]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c60:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006c64:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006c66:	4a1f      	ldrmi	r2, [pc, #124]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006c68:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006c6a:	bf4c      	ite	mi
 8006c6c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c70:	4a1d      	ldrpl	r2, [pc, #116]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006c72:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c74:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006c78:	d418      	bmi.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006c7e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006c82:	e013      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006c84:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8006c88:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006c8a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006c8c:	4019      	ands	r1, r3
 8006c8e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8006c92:	d01e      	beq.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9c:	d107      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8006c9e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006ca2:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8006ca4:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8006ca8:	bf18      	it	ne
 8006caa:	4618      	movne	r0, r3
}
 8006cac:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb2:	d1c4      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8006cb4:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8006cb6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006cba:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006cbe:	e7f3      	b.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006cc0:	f7ff ff0e 	bl	8006ae0 <HAL_RCC_GetPCLK2Freq>
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8006ccc:	3301      	adds	r3, #1
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	e7d5      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8006cd2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006cd6:	e7e9      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	0800bc37 	.word	0x0800bc37
 8006ce0:	0800bc47 	.word	0x0800bc47
 8006ce4:	007a1200 	.word	0x007a1200
 8006ce8:	003d0900 	.word	0x003d0900

08006cec <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006cec:	6803      	ldr	r3, [r0, #0]
{
 8006cee:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006cf0:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006cf2:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006cf4:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8006cf6:	b295      	uxth	r5, r2
 8006cf8:	b28c      	uxth	r4, r1
 8006cfa:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006cfc:	bf17      	itett	ne
 8006cfe:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006d00:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006d02:	b280      	uxthne	r0, r0
 8006d04:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006d08:	bf08      	it	eq
 8006d0a:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8006d0e:	bd30      	pop	{r4, r5, pc}

08006d10 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006d10:	6803      	ldr	r3, [r0, #0]
 8006d12:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8006d16:	b29b      	uxth	r3, r3
}
 8006d18:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006d1c:	4770      	bx	lr

08006d1e <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8006d1e:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006d20:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8006d22:	f000 000f 	and.w	r0, r0, #15
 8006d26:	fb02 0003 	mla	r0, r2, r3, r0
}
 8006d2a:	b2c0      	uxtb	r0, r0
 8006d2c:	4770      	bx	lr

08006d2e <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006d2e:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006d30:	2517      	movs	r5, #23
 8006d32:	2309      	movs	r3, #9
 8006d34:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8006d36:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006d38:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 8006d3c:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8006d40:	d817      	bhi.n	8006d72 <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006d42:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8006d46:	1d10      	adds	r0, r2, #4
 8006d48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d50:	4420      	add	r0, r4
 8006d52:	4428      	add	r0, r5
 8006d54:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8006d58:	4410      	add	r0, r2
 8006d5a:	2264      	movs	r2, #100	; 0x64
 8006d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d60:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006d62:	2307      	movs	r3, #7
 8006d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d68:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d6c:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8006d6e:	b2c0      	uxtb	r0, r0
 8006d70:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006d72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006d76:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d7a:	1c90      	adds	r0, r2, #2
 8006d7c:	4420      	add	r0, r4
 8006d7e:	4428      	add	r0, r5
 8006d80:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8006d84:	4418      	add	r0, r3
 8006d86:	2364      	movs	r3, #100	; 0x64
 8006d88:	fbb4 f4f3 	udiv	r4, r4, r3
 8006d8c:	1b00      	subs	r0, r0, r4
 8006d8e:	e7e8      	b.n	8006d62 <RTC_WeekDayNum+0x34>

08006d90 <RTC_EnterInitMode>:
{
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8006d94:	f7fe f982 	bl	800509c <HAL_GetTick>
 8006d98:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	0692      	lsls	r2, r2, #26
 8006da0:	d505      	bpl.n	8006dae <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8006da2:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	f042 0210 	orr.w	r2, r2, #16
 8006daa:	605a      	str	r2, [r3, #4]
}
 8006dac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006dae:	f7fe f975 	bl	800509c <HAL_GetTick>
 8006db2:	1b40      	subs	r0, r0, r5
 8006db4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006db8:	d9ef      	bls.n	8006d9a <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8006dba:	2003      	movs	r0, #3
 8006dbc:	e7f6      	b.n	8006dac <RTC_EnterInitMode+0x1c>

08006dbe <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dbe:	6802      	ldr	r2, [r0, #0]
{
 8006dc0:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dc2:	6853      	ldr	r3, [r2, #4]
{
 8006dc4:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dc6:	f023 0310 	bic.w	r3, r3, #16
 8006dca:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006dcc:	f7fe f966 	bl	800509c <HAL_GetTick>
 8006dd0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	069b      	lsls	r3, r3, #26
 8006dd8:	d501      	bpl.n	8006dde <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8006dda:	2000      	movs	r0, #0
}
 8006ddc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006dde:	f7fe f95d 	bl	800509c <HAL_GetTick>
 8006de2:	1b40      	subs	r0, r0, r5
 8006de4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006de8:	d9f3      	bls.n	8006dd2 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8006dea:	2003      	movs	r0, #3
 8006dec:	e7f6      	b.n	8006ddc <RTC_ExitInitMode+0x1e>

08006dee <RTC_WriteTimeCounter>:
{
 8006dee:	b538      	push	{r3, r4, r5, lr}
 8006df0:	4605      	mov	r5, r0
 8006df2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006df4:	f7ff ffcc 	bl	8006d90 <RTC_EnterInitMode>
 8006df8:	b958      	cbnz	r0, 8006e12 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006dfe:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006e00:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e02:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006e04:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e06:	f7ff ffda 	bl	8006dbe <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006e0a:	3800      	subs	r0, #0
 8006e0c:	bf18      	it	ne
 8006e0e:	2001      	movne	r0, #1
}
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006e12:	2001      	movs	r0, #1
 8006e14:	e7fc      	b.n	8006e10 <RTC_WriteTimeCounter+0x22>

08006e16 <RTC_WriteAlarmCounter>:
{
 8006e16:	b538      	push	{r3, r4, r5, lr}
 8006e18:	4605      	mov	r5, r0
 8006e1a:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e1c:	f7ff ffb8 	bl	8006d90 <RTC_EnterInitMode>
 8006e20:	b958      	cbnz	r0, 8006e3a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006e26:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006e28:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e2a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006e2c:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006e2e:	f7ff ffc6 	bl	8006dbe <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006e32:	3800      	subs	r0, #0
 8006e34:	bf18      	it	ne
 8006e36:	2001      	movne	r0, #1
}
 8006e38:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7fc      	b.n	8006e38 <RTC_WriteAlarmCounter+0x22>

08006e3e <HAL_RTC_SetTime>:
{
 8006e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8006e40:	4604      	mov	r4, r0
 8006e42:	b1e0      	cbz	r0, 8006e7e <HAL_RTC_SetTime+0x40>
 8006e44:	b1d9      	cbz	r1, 8006e7e <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006e46:	7c03      	ldrb	r3, [r0, #16]
 8006e48:	2502      	movs	r5, #2
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d045      	beq.n	8006eda <HAL_RTC_SetTime+0x9c>
 8006e4e:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e50:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8006e52:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006e54:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006e56:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006e58:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8006e5a:	b992      	cbnz	r2, 8006e82 <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006e5c:	233c      	movs	r3, #60	; 0x3c
 8006e5e:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006e60:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006e64:	fb03 6600 	mla	r6, r3, r0, r6
 8006e68:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006e6a:	4631      	mov	r1, r6
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7ff ffbe 	bl	8006dee <RTC_WriteTimeCounter>
 8006e72:	4605      	mov	r5, r0
 8006e74:	b1b8      	cbz	r0, 8006ea6 <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e76:	2304      	movs	r3, #4
 8006e78:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006e7e:	2501      	movs	r5, #1
 8006e80:	e02b      	b.n	8006eda <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006e82:	f7ff ff4c 	bl	8006d1e <RTC_Bcd2ToByte>
 8006e86:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f7ff ff48 	bl	8006d1e <RTC_Bcd2ToByte>
 8006e8e:	233c      	movs	r3, #60	; 0x3c
 8006e90:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006e94:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006e98:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006e9a:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006e9e:	f7ff ff3e 	bl	8006d1e <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006ea2:	1846      	adds	r6, r0, r1
 8006ea4:	e7e1      	b.n	8006e6a <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006ea6:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006ea8:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006eaa:	6853      	ldr	r3, [r2, #4]
 8006eac:	f023 0305 	bic.w	r3, r3, #5
 8006eb0:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006eb2:	f7ff ff2d 	bl	8006d10 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006eb6:	4286      	cmp	r6, r0
 8006eb8:	d90b      	bls.n	8006ed2 <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006eba:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006ebe:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7ff ffa7 	bl	8006e16 <RTC_WriteAlarmCounter>
 8006ec8:	b118      	cbz	r0, 8006ed2 <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006eca:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006ecc:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006ece:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006ed0:	e7d5      	b.n	8006e7e <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	7423      	strb	r3, [r4, #16]
}
 8006eda:	4628      	mov	r0, r5
 8006edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ee0 <HAL_RTC_SetDate>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	b348      	cbz	r0, 8006f3c <HAL_RTC_SetDate+0x5c>
 8006ee8:	b341      	cbz	r1, 8006f3c <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8006eea:	7c03      	ldrb	r3, [r0, #16]
 8006eec:	2002      	movs	r0, #2
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d047      	beq.n	8006f82 <HAL_RTC_SetDate+0xa2>
 8006ef2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ef4:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8006ef6:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8006ef8:	78c8      	ldrb	r0, [r1, #3]
 8006efa:	bb0a      	cbnz	r2, 8006f40 <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006efc:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006efe:	784b      	ldrb	r3, [r1, #1]
 8006f00:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006f02:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006f04:	7b61      	ldrb	r1, [r4, #13]
 8006f06:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006f08:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006f0a:	f7ff ff10 	bl	8006d2e <RTC_WeekDayNum>
 8006f0e:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006f10:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff feea 	bl	8006cec <RTC_ReadTimeCounter>
  if (hours > 24U)
 8006f18:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_RTC_SetDate+0xa4>)
 8006f1a:	4298      	cmp	r0, r3
 8006f1c:	d92d      	bls.n	8006f7a <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006f1e:	4d1a      	ldr	r5, [pc, #104]	; (8006f88 <HAL_RTC_SetDate+0xa8>)
 8006f20:	fbb0 f2f5 	udiv	r2, r0, r5
 8006f24:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006f28:	4620      	mov	r0, r4
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7ff ff5f 	bl	8006dee <RTC_WriteTimeCounter>
 8006f30:	4606      	mov	r6, r0
 8006f32:	b188      	cbz	r0, 8006f58 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f34:	2304      	movs	r3, #4
 8006f36:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	e020      	b.n	8006f82 <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006f40:	f7ff feed 	bl	8006d1e <RTC_Bcd2ToByte>
 8006f44:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006f46:	7848      	ldrb	r0, [r1, #1]
 8006f48:	f7ff fee9 	bl	8006d1e <RTC_Bcd2ToByte>
 8006f4c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006f4e:	7888      	ldrb	r0, [r1, #2]
 8006f50:	f7ff fee5 	bl	8006d1e <RTC_Bcd2ToByte>
 8006f54:	4602      	mov	r2, r0
 8006f56:	e7d5      	b.n	8006f04 <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f7ff fed9 	bl	8006d10 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006f5e:	4285      	cmp	r5, r0
 8006f60:	d90b      	bls.n	8006f7a <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006f62:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006f66:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f7ff ff53 	bl	8006e16 <RTC_WriteAlarmCounter>
 8006f70:	b118      	cbz	r0, 8006f7a <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f72:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006f74:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f76:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006f78:	e7e0      	b.n	8006f3c <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006f7a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006f7c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8006f7e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8006f80:	7420      	strb	r0, [r4, #16]
}
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	00015f8f 	.word	0x00015f8f
 8006f88:	00015180 	.word	0x00015180

08006f8c <HAL_RTC_WaitForSynchro>:
{
 8006f8c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8006f8e:	4604      	mov	r4, r0
 8006f90:	b1a8      	cbz	r0, 8006fbe <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006f92:	6802      	ldr	r2, [r0, #0]
 8006f94:	6853      	ldr	r3, [r2, #4]
 8006f96:	f023 0308 	bic.w	r3, r3, #8
 8006f9a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006f9c:	f7fe f87e 	bl	800509c <HAL_GetTick>
 8006fa0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	071b      	lsls	r3, r3, #28
 8006fa8:	d501      	bpl.n	8006fae <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006faa:	2000      	movs	r0, #0
}
 8006fac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006fae:	f7fe f875 	bl	800509c <HAL_GetTick>
 8006fb2:	1b40      	subs	r0, r0, r5
 8006fb4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006fb8:	d9f3      	bls.n	8006fa2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006fba:	2003      	movs	r0, #3
 8006fbc:	e7f6      	b.n	8006fac <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8006fbe:	2001      	movs	r0, #1
 8006fc0:	e7f4      	b.n	8006fac <HAL_RTC_WaitForSynchro+0x20>
	...

08006fc4 <HAL_RTC_Init>:
{
 8006fc4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	b170      	cbz	r0, 8006fe8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006fca:	7c43      	ldrb	r3, [r0, #17]
 8006fcc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006fd0:	b913      	cbnz	r3, 8006fd8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8006fd2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006fd4:	f7fc fba8 	bl	8003728 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fd8:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fda:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fdc:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fde:	f7ff ffd5 	bl	8006f8c <HAL_RTC_WaitForSynchro>
 8006fe2:	b118      	cbz	r0, 8006fec <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8006fe8:	2001      	movs	r0, #1
 8006fea:	e02f      	b.n	800704c <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7ff fecf 	bl	8006d90 <RTC_EnterInitMode>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d1f6      	bne.n	8006fe4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006ff6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006ff8:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006ffa:	6853      	ldr	r3, [r2, #4]
 8006ffc:	f023 0307 	bic.w	r3, r3, #7
 8007000:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <HAL_RTC_Init+0x8c>)
 8007004:	b119      	cbz	r1, 800700e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007006:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800700e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007010:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8007014:	430b      	orrs	r3, r1
 8007016:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007018:	6860      	ldr	r0, [r4, #4]
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d105      	bne.n	800702a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800701e:	2001      	movs	r0, #1
 8007020:	f7ff fe06 	bl	8006c30 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8007024:	2800      	cmp	r0, #0
 8007026:	d0dd      	beq.n	8006fe4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8007028:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007030:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007032:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007034:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007036:	4620      	mov	r0, r4
 8007038:	f7ff fec1 	bl	8006dbe <RTC_ExitInitMode>
 800703c:	2301      	movs	r3, #1
 800703e:	b110      	cbz	r0, 8007046 <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007040:	2204      	movs	r2, #4
 8007042:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8007044:	e7d0      	b.n	8006fe8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007046:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007048:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800704a:	7463      	strb	r3, [r4, #17]
}
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	40006c00 	.word	0x40006c00

08007054 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007054:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007056:	6a02      	ldr	r2, [r0, #32]
{
 8007058:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007060:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007062:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007066:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800706a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800706c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800706e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007072:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007074:	4d0a      	ldr	r5, [pc, #40]	; (80070a0 <TIM_OC1_SetConfig+0x4c>)
 8007076:	42a8      	cmp	r0, r5
 8007078:	d10b      	bne.n	8007092 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800707a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800707c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007080:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007082:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007086:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800708a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800708c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007090:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007092:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007094:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007096:	684a      	ldr	r2, [r1, #4]
 8007098:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709a:	6203      	str	r3, [r0, #32]
}
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	bf00      	nop
 80070a0:	40012c00 	.word	0x40012c00

080070a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070a6:	6a02      	ldr	r2, [r0, #32]
{
 80070a8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ae:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80070ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80070be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070c6:	4d0b      	ldr	r5, [pc, #44]	; (80070f4 <TIM_OC3_SetConfig+0x50>)
 80070c8:	42a8      	cmp	r0, r5
 80070ca:	d10d      	bne.n	80070e8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80070ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070d6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070da:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80070de:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80070e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070e4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ec:	684a      	ldr	r2, [r1, #4]
 80070ee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f0:	6203      	str	r3, [r0, #32]
}
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	40012c00 	.word	0x40012c00

080070f8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fa:	6a02      	ldr	r2, [r0, #32]
{
 80070fc:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007102:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007104:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007108:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800710a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800710e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007112:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007114:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007118:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711c:	4d06      	ldr	r5, [pc, #24]	; (8007138 <TIM_OC4_SetConfig+0x40>)
 800711e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007120:	bf02      	ittt	eq
 8007122:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007124:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007128:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800712c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007130:	684a      	ldr	r2, [r1, #4]
 8007132:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007134:	6203      	str	r3, [r0, #32]
}
 8007136:	bd30      	pop	{r4, r5, pc}
 8007138:	40012c00 	.word	0x40012c00

0800713c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800713c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007140:	2b01      	cmp	r3, #1
 8007142:	d120      	bne.n	8007186 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	2302      	movs	r3, #2
 8007146:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800714a:	6803      	ldr	r3, [r0, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <HAL_TIM_Base_Start_IT+0x50>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00a      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x34>
 800715a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800715e:	d007      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x34>
 8007160:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007164:	4293      	cmp	r3, r2
 8007166:	d003      	beq.n	8007170 <HAL_TIM_Base_Start_IT+0x34>
 8007168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800716c:	4293      	cmp	r3, r2
 800716e:	d104      	bne.n	800717a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007176:	2a06      	cmp	r2, #6
 8007178:	d003      	beq.n	8007182 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	f042 0201 	orr.w	r2, r2, #1
 8007180:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007182:	2000      	movs	r0, #0
}
 8007184:	4770      	bx	lr
    return HAL_ERROR;
 8007186:	2001      	movs	r0, #1
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	40012c00 	.word	0x40012c00

08007190 <HAL_TIM_PWM_MspInit>:
 8007190:	4770      	bx	lr

08007192 <HAL_TIM_OC_DelayElapsedCallback>:
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_IC_CaptureCallback>:
 8007194:	4770      	bx	lr

08007196 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007196:	4770      	bx	lr

08007198 <HAL_TIM_TriggerCallback>:
 8007198:	4770      	bx	lr

0800719a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719a:	6803      	ldr	r3, [r0, #0]
{
 800719c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719e:	691a      	ldr	r2, [r3, #16]
{
 80071a0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071a2:	0791      	lsls	r1, r2, #30
 80071a4:	d50e      	bpl.n	80071c4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	0792      	lsls	r2, r2, #30
 80071aa:	d50b      	bpl.n	80071c4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071ac:	f06f 0202 	mvn.w	r2, #2
 80071b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071b2:	2201      	movs	r2, #1
 80071b4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	079b      	lsls	r3, r3, #30
 80071ba:	d077      	beq.n	80072ac <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80071bc:	f7ff ffea 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c0:	2300      	movs	r3, #0
 80071c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	691a      	ldr	r2, [r3, #16]
 80071c8:	0750      	lsls	r0, r2, #29
 80071ca:	d510      	bpl.n	80071ee <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	0751      	lsls	r1, r2, #29
 80071d0:	d50d      	bpl.n	80071ee <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d2:	f06f 0204 	mvn.w	r2, #4
 80071d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071d8:	2202      	movs	r2, #2
 80071da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071dc:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80071de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80071e4:	d068      	beq.n	80072b8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80071e6:	f7ff ffd5 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	2300      	movs	r3, #0
 80071ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	0712      	lsls	r2, r2, #28
 80071f4:	d50f      	bpl.n	8007216 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	0710      	lsls	r0, r2, #28
 80071fa:	d50c      	bpl.n	8007216 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071fc:	f06f 0208 	mvn.w	r2, #8
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007202:	2204      	movs	r2, #4
 8007204:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007206:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007208:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800720a:	0799      	lsls	r1, r3, #30
 800720c:	d05a      	beq.n	80072c4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800720e:	f7ff ffc1 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007212:	2300      	movs	r3, #0
 8007214:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	691a      	ldr	r2, [r3, #16]
 800721a:	06d2      	lsls	r2, r2, #27
 800721c:	d510      	bpl.n	8007240 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	06d0      	lsls	r0, r2, #27
 8007222:	d50d      	bpl.n	8007240 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007224:	f06f 0210 	mvn.w	r2, #16
 8007228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800722a:	2208      	movs	r2, #8
 800722c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800722e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007230:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007232:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007236:	d04b      	beq.n	80072d0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007238:	f7ff ffac 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723c:	2300      	movs	r3, #0
 800723e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	07d1      	lsls	r1, r2, #31
 8007246:	d508      	bpl.n	800725a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	07d2      	lsls	r2, r2, #31
 800724c:	d505      	bpl.n	800725a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800724e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007252:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007254:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007256:	f7fb fb8b 	bl	8002970 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	0610      	lsls	r0, r2, #24
 8007260:	d508      	bpl.n	8007274 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	0611      	lsls	r1, r2, #24
 8007266:	d505      	bpl.n	8007274 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007268:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800726c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800726e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007270:	f000 fab9 	bl	80077e6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	0652      	lsls	r2, r2, #25
 800727a:	d508      	bpl.n	800728e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	0650      	lsls	r0, r2, #25
 8007280:	d505      	bpl.n	800728e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007282:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007286:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007288:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800728a:	f7ff ff85 	bl	8007198 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	691a      	ldr	r2, [r3, #16]
 8007292:	0691      	lsls	r1, r2, #26
 8007294:	d522      	bpl.n	80072dc <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	0692      	lsls	r2, r2, #26
 800729a:	d51f      	bpl.n	80072dc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800729c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80072a0:	4620      	mov	r0, r4
}
 80072a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80072a8:	f000 ba9c 	b.w	80077e4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ac:	f7ff ff71 	bl	8007192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff ff70 	bl	8007196 <HAL_TIM_PWM_PulseFinishedCallback>
 80072b6:	e783      	b.n	80071c0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b8:	f7ff ff6b 	bl	8007192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	4620      	mov	r0, r4
 80072be:	f7ff ff6a 	bl	8007196 <HAL_TIM_PWM_PulseFinishedCallback>
 80072c2:	e792      	b.n	80071ea <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c4:	f7ff ff65 	bl	8007192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	4620      	mov	r0, r4
 80072ca:	f7ff ff64 	bl	8007196 <HAL_TIM_PWM_PulseFinishedCallback>
 80072ce:	e7a0      	b.n	8007212 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072d0:	f7ff ff5f 	bl	8007192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	4620      	mov	r0, r4
 80072d6:	f7ff ff5e 	bl	8007196 <HAL_TIM_PWM_PulseFinishedCallback>
 80072da:	e7af      	b.n	800723c <HAL_TIM_IRQHandler+0xa2>
}
 80072dc:	bd10      	pop	{r4, pc}
	...

080072e0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e0:	4a1a      	ldr	r2, [pc, #104]	; (800734c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80072e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e4:	4290      	cmp	r0, r2
 80072e6:	d00a      	beq.n	80072fe <TIM_Base_SetConfig+0x1e>
 80072e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80072ec:	d007      	beq.n	80072fe <TIM_Base_SetConfig+0x1e>
 80072ee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80072f2:	4290      	cmp	r0, r2
 80072f4:	d003      	beq.n	80072fe <TIM_Base_SetConfig+0x1e>
 80072f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072fa:	4290      	cmp	r0, r2
 80072fc:	d115      	bne.n	800732a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80072fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007304:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007306:	4a11      	ldr	r2, [pc, #68]	; (800734c <TIM_Base_SetConfig+0x6c>)
 8007308:	4290      	cmp	r0, r2
 800730a:	d00a      	beq.n	8007322 <TIM_Base_SetConfig+0x42>
 800730c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007310:	d007      	beq.n	8007322 <TIM_Base_SetConfig+0x42>
 8007312:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007316:	4290      	cmp	r0, r2
 8007318:	d003      	beq.n	8007322 <TIM_Base_SetConfig+0x42>
 800731a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800731e:	4290      	cmp	r0, r2
 8007320:	d103      	bne.n	800732a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007322:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007328:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800732a:	694a      	ldr	r2, [r1, #20]
 800732c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007330:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007332:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007334:	688b      	ldr	r3, [r1, #8]
 8007336:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007338:	680b      	ldr	r3, [r1, #0]
 800733a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800733c:	4b03      	ldr	r3, [pc, #12]	; (800734c <TIM_Base_SetConfig+0x6c>)
 800733e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8007340:	bf04      	itt	eq
 8007342:	690b      	ldreq	r3, [r1, #16]
 8007344:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007346:	2301      	movs	r3, #1
 8007348:	6143      	str	r3, [r0, #20]
}
 800734a:	4770      	bx	lr
 800734c:	40012c00 	.word	0x40012c00

08007350 <HAL_TIM_Base_Init>:
{
 8007350:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007352:	4604      	mov	r4, r0
 8007354:	b330      	cbz	r0, 80073a4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007356:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800735a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800735e:	b91b      	cbnz	r3, 8007368 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007360:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007364:	f7fc f9fe 	bl	8003764 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800736a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800736c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007370:	1d21      	adds	r1, r4, #4
 8007372:	f7ff ffb5 	bl	80072e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007376:	2301      	movs	r3, #1
  return HAL_OK;
 8007378:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800737a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007382:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007386:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800738a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007396:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800739a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800739e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80073a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073a4:	2001      	movs	r0, #1
 80073a6:	e7fc      	b.n	80073a2 <HAL_TIM_Base_Init+0x52>

080073a8 <HAL_TIM_PWM_Init>:
{
 80073a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80073aa:	4604      	mov	r4, r0
 80073ac:	b330      	cbz	r0, 80073fc <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80073ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80073b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073b6:	b91b      	cbnz	r3, 80073c0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80073b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80073bc:	f7ff fee8 	bl	8007190 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80073c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c8:	1d21      	adds	r1, r4, #4
 80073ca:	f7ff ff89 	bl	80072e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ce:	2301      	movs	r3, #1
  return HAL_OK;
 80073d0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80073da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80073de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80073e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80073f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80073f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80073fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7fc      	b.n	80073fa <HAL_TIM_PWM_Init+0x52>

08007400 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8007400:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007402:	6a02      	ldr	r2, [r0, #32]
{
 8007404:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007406:	f022 0210 	bic.w	r2, r2, #16
 800740a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800740c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800740e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007410:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007412:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007416:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800741a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800741c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007420:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007424:	4d0b      	ldr	r5, [pc, #44]	; (8007454 <TIM_OC2_SetConfig+0x54>)
 8007426:	42a8      	cmp	r0, r5
 8007428:	d10d      	bne.n	8007446 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800742a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800742c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007430:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007434:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007438:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800743c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800743e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007442:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8007446:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007448:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800744a:	684a      	ldr	r2, [r1, #4]
 800744c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800744e:	6203      	str	r3, [r0, #32]
}
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	bf00      	nop
 8007454:	40012c00 	.word	0x40012c00

08007458 <HAL_TIM_PWM_ConfigChannel>:
{
 8007458:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800745a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800745e:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8007460:	2b01      	cmp	r3, #1
 8007462:	d050      	beq.n	8007506 <HAL_TIM_PWM_ConfigChannel+0xae>
 8007464:	2301      	movs	r3, #1
  switch (Channel)
 8007466:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8007468:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800746c:	d03b      	beq.n	80074e6 <HAL_TIM_PWM_ConfigChannel+0x8e>
 800746e:	d807      	bhi.n	8007480 <HAL_TIM_PWM_ConfigChannel+0x28>
 8007470:	b1c2      	cbz	r2, 80074a4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8007472:	2a04      	cmp	r2, #4
 8007474:	d027      	beq.n	80074c6 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8007476:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8007478:	2300      	movs	r3, #0
 800747a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800747e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8007480:	2a0c      	cmp	r2, #12
 8007482:	d1f8      	bne.n	8007476 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007484:	6800      	ldr	r0, [r0, #0]
 8007486:	f7ff fe37 	bl	80070f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800748c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007492:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007494:	69c3      	ldr	r3, [r0, #28]
 8007496:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800749a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800749c:	69c3      	ldr	r3, [r0, #28]
 800749e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074a2:	e02e      	b.n	8007502 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a4:	6800      	ldr	r0, [r0, #0]
 80074a6:	f7ff fdd5 	bl	8007054 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074aa:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074ac:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074ae:	f043 0308 	orr.w	r3, r3, #8
 80074b2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074b4:	6983      	ldr	r3, [r0, #24]
 80074b6:	f023 0304 	bic.w	r3, r3, #4
 80074ba:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074c0:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2000      	movs	r0, #0
      break;
 80074c4:	e7d8      	b.n	8007478 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074c6:	6800      	ldr	r0, [r0, #0]
 80074c8:	f7ff ff9a 	bl	8007400 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074cc:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074ce:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80074d4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074d6:	6983      	ldr	r3, [r0, #24]
 80074d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074dc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074de:	6983      	ldr	r3, [r0, #24]
 80074e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80074e4:	e7ec      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074e6:	6800      	ldr	r0, [r0, #0]
 80074e8:	f7ff fddc 	bl	80070a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074ec:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ee:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074f0:	f043 0308 	orr.w	r3, r3, #8
 80074f4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074f6:	69c3      	ldr	r3, [r0, #28]
 80074f8:	f023 0304 	bic.w	r3, r3, #4
 80074fc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074fe:	69c3      	ldr	r3, [r0, #28]
 8007500:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007502:	61c3      	str	r3, [r0, #28]
 8007504:	e7dd      	b.n	80074c2 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8007506:	2002      	movs	r0, #2
 8007508:	e7b9      	b.n	800747e <HAL_TIM_PWM_ConfigChannel+0x26>

0800750a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800750a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800750e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007514:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007518:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800751a:	6082      	str	r2, [r0, #8]
}
 800751c:	bd10      	pop	{r4, pc}

0800751e <HAL_TIM_ConfigClockSource>:
{
 800751e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007520:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007524:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007526:	2b01      	cmp	r3, #1
 8007528:	f04f 0002 	mov.w	r0, #2
 800752c:	f000 808e 	beq.w	800764c <HAL_TIM_ConfigClockSource+0x12e>
 8007530:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007532:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007536:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007538:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800753c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800753e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007546:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007548:	680b      	ldr	r3, [r1, #0]
 800754a:	2b60      	cmp	r3, #96	; 0x60
 800754c:	d04f      	beq.n	80075ee <HAL_TIM_ConfigClockSource+0xd0>
 800754e:	d832      	bhi.n	80075b6 <HAL_TIM_ConfigClockSource+0x98>
 8007550:	2b40      	cmp	r3, #64	; 0x40
 8007552:	d064      	beq.n	800761e <HAL_TIM_ConfigClockSource+0x100>
 8007554:	d816      	bhi.n	8007584 <HAL_TIM_ConfigClockSource+0x66>
 8007556:	2b20      	cmp	r3, #32
 8007558:	d00d      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0x58>
 800755a:	d80a      	bhi.n	8007572 <HAL_TIM_ConfigClockSource+0x54>
 800755c:	f033 0110 	bics.w	r1, r3, #16
 8007560:	d009      	beq.n	8007576 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8007562:	2301      	movs	r3, #1
 8007564:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007568:	2300      	movs	r3, #0
 800756a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800756e:	4610      	mov	r0, r2
 8007570:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8007572:	2b30      	cmp	r3, #48	; 0x30
 8007574:	d1f5      	bne.n	8007562 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8007576:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007578:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757c:	4313      	orrs	r3, r2
 800757e:	f043 0307 	orr.w	r3, r3, #7
 8007582:	e028      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8007584:	2b50      	cmp	r3, #80	; 0x50
 8007586:	d1ec      	bne.n	8007562 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8007588:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800758a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800758c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007590:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007594:	f023 0301 	bic.w	r3, r3, #1
 8007598:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800759c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800759e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075a2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80075a8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80075aa:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075b0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80075b4:	e00f      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80075b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ba:	d00d      	beq.n	80075d8 <HAL_TIM_ConfigClockSource+0xba>
 80075bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c0:	d00c      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0xbe>
 80075c2:	2b70      	cmp	r3, #112	; 0x70
 80075c4:	d1cd      	bne.n	8007562 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	68cb      	ldr	r3, [r1, #12]
 80075c8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80075cc:	f7ff ff9d 	bl	800750a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075d0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 80075d6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80075d8:	2200      	movs	r2, #0
 80075da:	e7c2      	b.n	8007562 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80075dc:	68cb      	ldr	r3, [r1, #12]
 80075de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80075e2:	f7ff ff92 	bl	800750a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075e6:	6883      	ldr	r3, [r0, #8]
 80075e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ec:	e7f3      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80075ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f0:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80075f2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f4:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80075f8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075fa:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fc:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007602:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8007606:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800760a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800760e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007610:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007612:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007618:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800761c:	e7db      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 800761e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007620:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007622:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007624:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007626:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007630:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007632:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007634:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007638:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800763c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800763e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007640:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007646:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800764a:	e7c4      	b.n	80075d6 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 800764c:	4602      	mov	r2, r0
 800764e:	e78e      	b.n	800756e <HAL_TIM_ConfigClockSource+0x50>

08007650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007650:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007652:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007654:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007656:	f001 011f 	and.w	r1, r1, #31
 800765a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800765c:	ea23 0304 	bic.w	r3, r3, r4
 8007660:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007662:	6a03      	ldr	r3, [r0, #32]
 8007664:	408a      	lsls	r2, r1
 8007666:	431a      	orrs	r2, r3
 8007668:	6202      	str	r2, [r0, #32]
}
 800766a:	bd10      	pop	{r4, pc}

0800766c <HAL_TIM_OC_Start>:
{
 800766c:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800766e:	b929      	cbnz	r1, 800767c <HAL_TIM_OC_Start+0x10>
 8007670:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007674:	2b01      	cmp	r3, #1
 8007676:	d021      	beq.n	80076bc <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8007678:	2001      	movs	r0, #1
}
 800767a:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800767c:	2904      	cmp	r1, #4
 800767e:	d107      	bne.n	8007690 <HAL_TIM_OC_Start+0x24>
 8007680:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007684:	2b01      	cmp	r3, #1
 8007686:	d1f7      	bne.n	8007678 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007688:	2302      	movs	r3, #2
 800768a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800768e:	e018      	b.n	80076c2 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007690:	2908      	cmp	r1, #8
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_OC_Start+0x38>
 8007694:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007698:	2b01      	cmp	r3, #1
 800769a:	d1ed      	bne.n	8007678 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800769c:	2302      	movs	r3, #2
 800769e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80076a2:	e00e      	b.n	80076c2 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d1e5      	bne.n	8007678 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ac:	2904      	cmp	r1, #4
 80076ae:	d0eb      	beq.n	8007688 <HAL_TIM_OC_Start+0x1c>
 80076b0:	2908      	cmp	r1, #8
 80076b2:	d0f3      	beq.n	800769c <HAL_TIM_OC_Start+0x30>
 80076b4:	2302      	movs	r3, #2
 80076b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80076ba:	e002      	b.n	80076c2 <HAL_TIM_OC_Start+0x56>
 80076bc:	2302      	movs	r3, #2
 80076be:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076c2:	6800      	ldr	r0, [r0, #0]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f7ff ffc3 	bl	8007650 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <HAL_TIM_OC_Start+0x98>)
 80076cc:	4298      	cmp	r0, r3
 80076ce:	d10a      	bne.n	80076e6 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 80076d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80076d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076d6:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d8:	6883      	ldr	r3, [r0, #8]
 80076da:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076de:	2b06      	cmp	r3, #6
 80076e0:	d10b      	bne.n	80076fa <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 80076e2:	2000      	movs	r0, #0
 80076e4:	e7c9      	b.n	800767a <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80076ea:	d0f5      	beq.n	80076d8 <HAL_TIM_OC_Start+0x6c>
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <HAL_TIM_OC_Start+0x9c>)
 80076ee:	4298      	cmp	r0, r3
 80076f0:	d0f2      	beq.n	80076d8 <HAL_TIM_OC_Start+0x6c>
 80076f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f6:	4298      	cmp	r0, r3
 80076f8:	d0ee      	beq.n	80076d8 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 80076fa:	6803      	ldr	r3, [r0, #0]
 80076fc:	f043 0301 	orr.w	r3, r3, #1
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	e7ee      	b.n	80076e2 <HAL_TIM_OC_Start+0x76>
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40000400 	.word	0x40000400

0800770c <HAL_TIM_PWM_Start>:
 800770c:	f7ff bfae 	b.w	800766c <HAL_TIM_OC_Start>

08007710 <HAL_TIM_OC_Stop>:
{
 8007710:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007712:	2200      	movs	r2, #0
{
 8007714:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007716:	6800      	ldr	r0, [r0, #0]
{
 8007718:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800771a:	f7ff ff99 	bl	8007650 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800771e:	4b18      	ldr	r3, [pc, #96]	; (8007780 <HAL_TIM_OC_Stop+0x70>)
 8007720:	4298      	cmp	r0, r3
 8007722:	d10d      	bne.n	8007740 <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 8007724:	f241 1311 	movw	r3, #4369	; 0x1111
 8007728:	6a02      	ldr	r2, [r0, #32]
 800772a:	421a      	tst	r2, r3
 800772c:	d108      	bne.n	8007740 <HAL_TIM_OC_Stop+0x30>
 800772e:	f240 4344 	movw	r3, #1092	; 0x444
 8007732:	6a02      	ldr	r2, [r0, #32]
 8007734:	421a      	tst	r2, r3
 8007736:	bf02      	ittt	eq
 8007738:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 800773a:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 800773e:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8007740:	f241 1311 	movw	r3, #4369	; 0x1111
 8007744:	6a02      	ldr	r2, [r0, #32]
 8007746:	421a      	tst	r2, r3
 8007748:	d108      	bne.n	800775c <HAL_TIM_OC_Stop+0x4c>
 800774a:	f240 4344 	movw	r3, #1092	; 0x444
 800774e:	6a02      	ldr	r2, [r0, #32]
 8007750:	421a      	tst	r2, r3
 8007752:	bf02      	ittt	eq
 8007754:	6803      	ldreq	r3, [r0, #0]
 8007756:	f023 0301 	biceq.w	r3, r3, #1
 800775a:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800775c:	2301      	movs	r3, #1
 800775e:	b91d      	cbnz	r5, 8007768 <HAL_TIM_OC_Stop+0x58>
 8007760:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007764:	2000      	movs	r0, #0
 8007766:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007768:	2d04      	cmp	r5, #4
 800776a:	d102      	bne.n	8007772 <HAL_TIM_OC_Stop+0x62>
 800776c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007770:	e7f8      	b.n	8007764 <HAL_TIM_OC_Stop+0x54>
 8007772:	2d08      	cmp	r5, #8
 8007774:	bf0c      	ite	eq
 8007776:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 800777a:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 800777e:	e7f1      	b.n	8007764 <HAL_TIM_OC_Stop+0x54>
 8007780:	40012c00 	.word	0x40012c00

08007784 <HAL_TIM_PWM_Stop>:
 8007784:	f7ff bfc4 	b.w	8007710 <HAL_TIM_OC_Stop>

08007788 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007788:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800778e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007790:	2b01      	cmp	r3, #1
 8007792:	f04f 0002 	mov.w	r0, #2
 8007796:	d022      	beq.n	80077de <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007798:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800779a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800779e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077a6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80077a8:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077aa:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	4c0c      	ldr	r4, [pc, #48]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	d00a      	beq.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80077b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b6:	d007      	beq.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80077b8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80077bc:	42a3      	cmp	r3, r4
 80077be:	d003      	beq.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80077c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d104      	bne.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077c8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077ca:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ce:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077d0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80077d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80077d6:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80077da:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80077de:	bd30      	pop	{r4, r5, pc}
 80077e0:	40012c00 	.word	0x40012c00

080077e4 <HAL_TIMEx_CommutCallback>:
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIMEx_BreakCallback>:
 80077e6:	4770      	bx	lr

080077e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ea:	f102 030c 	add.w	r3, r2, #12
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	320c      	adds	r2, #12
 80077f8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80077fc:	6802      	ldr	r2, [r0, #0]
 80077fe:	2900      	cmp	r1, #0
 8007800:	d1f2      	bne.n	80077e8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007802:	f102 0314 	add.w	r3, r2, #20
 8007806:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	f102 0c14 	add.w	ip, r2, #20
 8007812:	e84c 3100 	strex	r1, r3, [ip]
 8007816:	2900      	cmp	r1, #0
 8007818:	d1f3      	bne.n	8007802 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800781c:	2b01      	cmp	r3, #1
 800781e:	d10b      	bne.n	8007838 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f102 030c 	add.w	r3, r2, #12
 8007824:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007828:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	f102 0c0c 	add.w	ip, r2, #12
 8007830:	e84c 3100 	strex	r1, r3, [ip]
 8007834:	2900      	cmp	r1, #0
 8007836:	d1f3      	bne.n	8007820 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007838:	2320      	movs	r3, #32
 800783a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	2300      	movs	r3, #0
 8007840:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007842:	4770      	bx	lr

08007844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007844:	b510      	push	{r4, lr}
 8007846:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007848:	6803      	ldr	r3, [r0, #0]
 800784a:	68c1      	ldr	r1, [r0, #12]
 800784c:	691a      	ldr	r2, [r3, #16]
 800784e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007852:	430a      	orrs	r2, r1
 8007854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007856:	6882      	ldr	r2, [r0, #8]
 8007858:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800785a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800785c:	4302      	orrs	r2, r0
 800785e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007860:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007864:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007868:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800786a:	430a      	orrs	r2, r1
 800786c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800786e:	695a      	ldr	r2, [r3, #20]
 8007870:	69a1      	ldr	r1, [r4, #24]
 8007872:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007876:	430a      	orrs	r2, r1
 8007878:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800787a:	4a0e      	ldr	r2, [pc, #56]	; (80078b4 <UART_SetConfig+0x70>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d115      	bne.n	80078ac <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007880:	f7ff f92e 	bl	8006ae0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007884:	2319      	movs	r3, #25
 8007886:	4343      	muls	r3, r0
 8007888:	6862      	ldr	r2, [r4, #4]
 800788a:	6820      	ldr	r0, [r4, #0]
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007892:	2264      	movs	r2, #100	; 0x64
 8007894:	fbb3 f1f2 	udiv	r1, r3, r2
 8007898:	fb02 3311 	mls	r3, r2, r1, r3
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	3332      	adds	r3, #50	; 0x32
 80078a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80078a8:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80078aa:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80078ac:	f7ff f908 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
 80078b0:	e7e8      	b.n	8007884 <UART_SetConfig+0x40>
 80078b2:	bf00      	nop
 80078b4:	40013800 	.word	0x40013800

080078b8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	4604      	mov	r4, r0
 80078bc:	460e      	mov	r6, r1
 80078be:	4617      	mov	r7, r2
 80078c0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	6813      	ldr	r3, [r2, #0]
 80078c6:	ea36 0303 	bics.w	r3, r6, r3
 80078ca:	d101      	bne.n	80078d0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80078cc:	2000      	movs	r0, #0
 80078ce:	e028      	b.n	8007922 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80078d0:	1c6b      	adds	r3, r5, #1
 80078d2:	d0f7      	beq.n	80078c4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078d4:	b125      	cbz	r5, 80078e0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80078d6:	f7fd fbe1 	bl	800509c <HAL_GetTick>
 80078da:	1bc0      	subs	r0, r0, r7
 80078dc:	4285      	cmp	r5, r0
 80078de:	d2f0      	bcs.n	80078c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	f102 030c 	add.w	r3, r2, #12
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ee:	320c      	adds	r2, #12
 80078f0:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80078f4:	6821      	ldr	r1, [r4, #0]
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1f2      	bne.n	80078e0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	f101 0314 	add.w	r3, r1, #20
 80078fe:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007902:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	f101 0014 	add.w	r0, r1, #20
 800790a:	e840 3200 	strex	r2, r3, [r0]
 800790e:	2a00      	cmp	r2, #0
 8007910:	d1f3      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8007912:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8007914:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8007916:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 800791a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007924 <HAL_UART_Init>:
{
 8007924:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007926:	4604      	mov	r4, r0
 8007928:	b348      	cbz	r0, 800797e <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 800792a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800792e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007932:	b91b      	cbnz	r3, 800793c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007934:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8007938:	f7fb ff96 	bl	8003868 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800793c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800793e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007940:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007944:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007946:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800794c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800794e:	f7ff ff79 	bl	8007844 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007952:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800795c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800795e:	695a      	ldr	r2, [r3, #20]
 8007960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007964:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800796c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800796e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007970:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007972:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007976:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800797a:	6360      	str	r0, [r4, #52]	; 0x34
}
 800797c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800797e:	2001      	movs	r0, #1
 8007980:	e7fc      	b.n	800797c <HAL_UART_Init+0x58>

08007982 <HAL_UART_DeInit>:
{
 8007982:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007984:	4604      	mov	r4, r0
 8007986:	b1a0      	cbz	r0, 80079b2 <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8007988:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800798a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800798c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007990:	68d3      	ldr	r3, [r2, #12]
 8007992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007996:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8007998:	f7fc f80c 	bl	80039b4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799c:	2000      	movs	r0, #0
 800799e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 80079a0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80079a4:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80079a8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ac:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ae:	6360      	str	r0, [r4, #52]	; 0x34
}
 80079b0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80079b2:	2001      	movs	r0, #1
 80079b4:	e7fc      	b.n	80079b0 <HAL_UART_DeInit+0x2e>

080079b6 <HAL_UART_Transmit>:
{
 80079b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079ba:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80079bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80079c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80079c2:	2b20      	cmp	r3, #32
{
 80079c4:	460e      	mov	r6, r1
 80079c6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80079c8:	d13c      	bne.n	8007a44 <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 80079ca:	2900      	cmp	r1, #0
 80079cc:	d03c      	beq.n	8007a48 <HAL_UART_Transmit+0x92>
 80079ce:	2a00      	cmp	r2, #0
 80079d0:	d03a      	beq.n	8007a48 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d4:	2500      	movs	r5, #0
 80079d6:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80079dc:	f7fd fb5e 	bl	800509c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e0:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80079e2:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80079e8:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80079ea:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ec:	d103      	bne.n	80079f6 <HAL_UART_Transmit+0x40>
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	b90b      	cbnz	r3, 80079f6 <HAL_UART_Transmit+0x40>
 80079f2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80079f4:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80079f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b953      	cbnz	r3, 8007a12 <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079fc:	464b      	mov	r3, r9
 80079fe:	4642      	mov	r2, r8
 8007a00:	2140      	movs	r1, #64	; 0x40
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7ff ff58 	bl	80078b8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007a08:	b950      	cbnz	r0, 8007a20 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 8007a0a:	2320      	movs	r3, #32
 8007a0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8007a10:	e007      	b.n	8007a22 <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a12:	464b      	mov	r3, r9
 8007a14:	4642      	mov	r2, r8
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f7ff ff4d 	bl	80078b8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007a1e:	b110      	cbz	r0, 8007a26 <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 8007a20:	2003      	movs	r0, #3
}
 8007a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a26:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8007a28:	b94e      	cbnz	r6, 8007a3e <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a2a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a32:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007a34:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007a36:	3901      	subs	r1, #1
 8007a38:	b289      	uxth	r1, r1
 8007a3a:	84e1      	strh	r1, [r4, #38]	; 0x26
 8007a3c:	e7db      	b.n	80079f6 <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a3e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007a42:	e7f6      	b.n	8007a32 <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 8007a44:	2002      	movs	r0, #2
 8007a46:	e7ec      	b.n	8007a22 <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8007a48:	2001      	movs	r0, #1
 8007a4a:	e7ea      	b.n	8007a22 <HAL_UART_Transmit+0x6c>

08007a4c <HAL_UART_TxCpltCallback>:
 8007a4c:	4770      	bx	lr

08007a4e <HAL_UART_RxCpltCallback>:
 8007a4e:	4770      	bx	lr

08007a50 <HAL_UART_RxHalfCpltCallback>:
 8007a50:	4770      	bx	lr

08007a52 <HAL_UART_ErrorCallback>:
 8007a52:	4770      	bx	lr

08007a54 <UART_DMAError>:
{
 8007a54:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a56:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a58:	6803      	ldr	r3, [r0, #0]
 8007a5a:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a5c:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007a60:	2921      	cmp	r1, #33	; 0x21
 8007a62:	d112      	bne.n	8007a8a <UART_DMAError+0x36>
 8007a64:	0612      	lsls	r2, r2, #24
 8007a66:	d510      	bpl.n	8007a8a <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8007a68:	2200      	movs	r2, #0
 8007a6a:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	f103 020c 	add.w	r2, r3, #12
 8007a70:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	f103 0c0c 	add.w	ip, r3, #12
 8007a7c:	e84c 2100 	strex	r1, r2, [ip]
 8007a80:	2900      	cmp	r1, #0
 8007a82:	d1f3      	bne.n	8007a6c <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8007a84:	2220      	movs	r2, #32
 8007a86:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8a:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a8c:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8007a90:	2a22      	cmp	r2, #34	; 0x22
 8007a92:	d105      	bne.n	8007aa0 <UART_DMAError+0x4c>
 8007a94:	065b      	lsls	r3, r3, #25
 8007a96:	d503      	bpl.n	8007aa0 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a9c:	f7ff fea4 	bl	80077e8 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aa0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007aa2:	f043 0310 	orr.w	r3, r3, #16
 8007aa6:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8007aa8:	f7ff ffd3 	bl	8007a52 <HAL_UART_ErrorCallback>
}
 8007aac:	bd08      	pop	{r3, pc}

08007aae <UART_DMAAbortOnError>:
{
 8007aae:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007ab0:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007ab4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ab6:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007ab8:	f7ff ffcb 	bl	8007a52 <HAL_UART_ErrorCallback>
}
 8007abc:	bd08      	pop	{r3, pc}

08007abe <HAL_UART_AbortCpltCallback>:
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UART_Abort_IT>:
{
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ac4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	f102 030c 	add.w	r3, r2, #12
 8007aca:	e853 3f00 	ldrex	r3, [r3]
 8007ace:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	320c      	adds	r2, #12
 8007ad4:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	2900      	cmp	r1, #0
 8007adc:	d1f2      	bne.n	8007ac4 <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ade:	f103 0214 	add.w	r2, r3, #20
 8007ae2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	f103 0014 	add.w	r0, r3, #20
 8007aee:	e840 2100 	strex	r1, r2, [r0]
 8007af2:	2900      	cmp	r1, #0
 8007af4:	d1f3      	bne.n	8007ade <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007af8:	2a01      	cmp	r2, #1
 8007afa:	d035      	beq.n	8007b68 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 8007afc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d13f      	bne.n	8007b82 <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 8007b02:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b04:	b129      	cbz	r1, 8007b12 <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b06:	695a      	ldr	r2, [r3, #20]
 8007b08:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007b0c:	bf18      	it	ne
 8007b0e:	4a2d      	ldrne	r2, [pc, #180]	; (8007bc4 <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 8007b10:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b12:	695a      	ldr	r2, [r3, #20]
 8007b14:	0612      	lsls	r2, r2, #24
 8007b16:	d43b      	bmi.n	8007b90 <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 8007b18:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b1a:	6822      	ldr	r2, [r4, #0]
 8007b1c:	6953      	ldr	r3, [r2, #20]
 8007b1e:	065b      	lsls	r3, r3, #25
 8007b20:	d54b      	bpl.n	8007bba <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	f102 0314 	add.w	r3, r2, #20
 8007b26:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f102 0114 	add.w	r1, r2, #20
 8007b32:	e841 3600 	strex	r6, r3, [r1]
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	d1f3      	bne.n	8007b22 <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 8007b3a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d03c      	beq.n	8007bba <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b40:	f7fd fe08 	bl	8005754 <HAL_DMA_Abort_IT>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d03a      	beq.n	8007bbe <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8007b48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b4a:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8007b4c:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 8007b4e:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 8007b50:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 8007b52:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 8007b54:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b56:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8007b58:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007b5c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b60:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 8007b62:	f7ff ffac 	bl	8007abe <HAL_UART_AbortCpltCallback>
 8007b66:	e02a      	b.n	8007bbe <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f103 020c 	add.w	r2, r3, #12
 8007b6c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007b70:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	f103 000c 	add.w	r0, r3, #12
 8007b78:	e840 2100 	strex	r1, r2, [r0]
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d1f3      	bne.n	8007b68 <HAL_UART_Abort_IT+0xa8>
 8007b80:	e7bc      	b.n	8007afc <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007b82:	695a      	ldr	r2, [r3, #20]
 8007b84:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007b88:	bf18      	it	ne
 8007b8a:	4a0f      	ldrne	r2, [pc, #60]	; (8007bc8 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 8007b8c:	6342      	str	r2, [r0, #52]	; 0x34
 8007b8e:	e7b8      	b.n	8007b02 <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f103 0214 	add.w	r2, r3, #20
 8007b94:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	f103 0114 	add.w	r1, r3, #20
 8007ba0:	e841 2500 	strex	r5, r2, [r1]
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	d1f3      	bne.n	8007b90 <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d0b5      	beq.n	8007b18 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007bac:	f7fd fdd2 	bl	8005754 <HAL_DMA_Abort_IT>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d0b2      	beq.n	8007b1a <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 8007bb4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bb6:	635d      	str	r5, [r3, #52]	; 0x34
 8007bb8:	e7ae      	b.n	8007b18 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 8007bba:	2d01      	cmp	r5, #1
 8007bbc:	d0c6      	beq.n	8007b4c <HAL_UART_Abort_IT+0x8c>
}
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007bf7 	.word	0x08007bf7

08007bcc <UART_DMARxAbortCallback>:
{
 8007bcc:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 8007bce:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bd0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 8007bd2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007bd4:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8007bd6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007bd8:	b10a      	cbz	r2, 8007bde <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8007bda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bdc:	b952      	cbnz	r2, 8007bf4 <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8007bde:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8007be0:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007be2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8007be6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007bea:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bee:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8007bf0:	f7ff ff65 	bl	8007abe <HAL_UART_AbortCpltCallback>
}
 8007bf4:	bd08      	pop	{r3, pc}

08007bf6 <UART_DMATxAbortCallback>:
{
 8007bf6:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 8007bf8:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 8007bfc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8007bfe:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 8007c00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007c02:	b10a      	cbz	r2, 8007c08 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8007c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c06:	b952      	cbnz	r2, 8007c1e <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8007c08:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 8007c0a:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8007c0c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c0e:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8007c10:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c14:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 8007c1a:	f7ff ff50 	bl	8007abe <HAL_UART_AbortCpltCallback>
}
 8007c1e:	bd08      	pop	{r3, pc}

08007c20 <HAL_UARTEx_RxEventCallback>:
}
 8007c20:	4770      	bx	lr

08007c22 <UART_DMARxHalfCplt>:
{
 8007c22:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c24:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c26:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007c28:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d104      	bne.n	8007c3a <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007c30:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007c32:	0849      	lsrs	r1, r1, #1
 8007c34:	f7ff fff4 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
}
 8007c38:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007c3a:	f7ff ff09 	bl	8007a50 <HAL_UART_RxHalfCpltCallback>
}
 8007c3e:	e7fb      	b.n	8007c38 <UART_DMARxHalfCplt+0x16>

08007c40 <UART_DMAReceiveCplt>:
{
 8007c40:	b508      	push	{r3, lr}
 8007c42:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c44:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f013 0320 	ands.w	r3, r3, #32
 8007c4e:	d137      	bne.n	8007cc0 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8007c50:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	f102 030c 	add.w	r3, r2, #12
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	320c      	adds	r2, #12
 8007c62:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007c66:	6803      	ldr	r3, [r0, #0]
 8007c68:	2900      	cmp	r1, #0
 8007c6a:	d1f2      	bne.n	8007c52 <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	f103 0214 	add.w	r2, r3, #20
 8007c70:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	f103 0c14 	add.w	ip, r3, #20
 8007c7c:	e84c 2100 	strex	r1, r2, [ip]
 8007c80:	2900      	cmp	r1, #0
 8007c82:	d1f3      	bne.n	8007c6c <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	f103 0214 	add.w	r2, r3, #20
 8007c88:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	f103 0c14 	add.w	ip, r3, #20
 8007c94:	e84c 2100 	strex	r1, r2, [ip]
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d1f3      	bne.n	8007c84 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007ca4:	2a01      	cmp	r2, #1
 8007ca6:	d10b      	bne.n	8007cc0 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	f103 020c 	add.w	r2, r3, #12
 8007cac:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	f103 0c0c 	add.w	ip, r3, #12
 8007cb8:	e84c 2100 	strex	r1, r2, [ip]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d1f3      	bne.n	8007ca8 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d103      	bne.n	8007cd2 <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cca:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007ccc:	f7ff ffa8 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
}
 8007cd0:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007cd2:	f7ff febc 	bl	8007a4e <HAL_UART_RxCpltCallback>
}
 8007cd6:	e7fb      	b.n	8007cd0 <UART_DMAReceiveCplt+0x90>

08007cd8 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cd8:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007cdc:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cde:	2b22      	cmp	r3, #34	; 0x22
 8007ce0:	d142      	bne.n	8007d68 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce2:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ce4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cea:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cec:	d13f      	bne.n	8007d6e <UART_Receive_IT.isra.0+0x96>
 8007cee:	6901      	ldr	r1, [r0, #16]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d13f      	bne.n	8007d74 <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007cf4:	6852      	ldr	r2, [r2, #4]
 8007cf6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cfa:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8007cfe:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007d00:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007d02:	3b01      	subs	r3, #1
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d12d      	bne.n	8007d68 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d0c:	6802      	ldr	r2, [r0, #0]
 8007d0e:	68d1      	ldr	r1, [r2, #12]
 8007d10:	f021 0120 	bic.w	r1, r1, #32
 8007d14:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d16:	68d1      	ldr	r1, [r2, #12]
 8007d18:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007d1c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d1e:	6951      	ldr	r1, [r2, #20]
 8007d20:	f021 0101 	bic.w	r1, r1, #1
 8007d24:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007d26:	2220      	movs	r2, #32
 8007d28:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007d30:	2a01      	cmp	r2, #1
 8007d32:	6802      	ldr	r2, [r0, #0]
 8007d34:	d128      	bne.n	8007d88 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d36:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	f102 030c 	add.w	r3, r2, #12
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	f102 0c0c 	add.w	ip, r2, #12
 8007d48:	e84c 3100 	strex	r1, r3, [ip]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d1f3      	bne.n	8007d38 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d50:	6813      	ldr	r3, [r2, #0]
 8007d52:	06db      	lsls	r3, r3, #27
 8007d54:	d505      	bpl.n	8007d62 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d56:	9101      	str	r1, [sp, #4]
 8007d58:	6813      	ldr	r3, [r2, #0]
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	6853      	ldr	r3, [r2, #4]
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d62:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007d64:	f7ff ff5c 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
}
 8007d68:	b003      	add	sp, #12
 8007d6a:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d6e:	b939      	cbnz	r1, 8007d80 <UART_Receive_IT.isra.0+0xa8>
 8007d70:	6901      	ldr	r1, [r0, #16]
 8007d72:	b929      	cbnz	r1, 8007d80 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d74:	6852      	ldr	r2, [r2, #4]
 8007d76:	b2d2      	uxtb	r2, r2
 8007d78:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8007d7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	e7be      	b.n	8007cfe <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d80:	6852      	ldr	r2, [r2, #4]
 8007d82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d86:	e7f7      	b.n	8007d78 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8007d88:	f7ff fe61 	bl	8007a4e <HAL_UART_RxCpltCallback>
 8007d8c:	e7ec      	b.n	8007d68 <UART_Receive_IT.isra.0+0x90>
	...

08007d90 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d90:	6803      	ldr	r3, [r0, #0]
{
 8007d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d94:	681a      	ldr	r2, [r3, #0]
{
 8007d96:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007d98:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d9a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d9c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8007d9e:	d108      	bne.n	8007db2 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007da0:	0696      	lsls	r6, r2, #26
 8007da2:	d568      	bpl.n	8007e76 <HAL_UART_IRQHandler+0xe6>
 8007da4:	068d      	lsls	r5, r1, #26
 8007da6:	d566      	bpl.n	8007e76 <HAL_UART_IRQHandler+0xe6>
}
 8007da8:	b002      	add	sp, #8
 8007daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007dae:	f7ff bf93 	b.w	8007cd8 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007db2:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007db6:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8007dba:	4305      	orrs	r5, r0
 8007dbc:	d05b      	beq.n	8007e76 <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dbe:	07d6      	lsls	r6, r2, #31
 8007dc0:	d505      	bpl.n	8007dce <HAL_UART_IRQHandler+0x3e>
 8007dc2:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dc4:	bf42      	ittt	mi
 8007dc6:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8007dc8:	f043 0301 	orrmi.w	r3, r3, #1
 8007dcc:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dce:	0753      	lsls	r3, r2, #29
 8007dd0:	d504      	bpl.n	8007ddc <HAL_UART_IRQHandler+0x4c>
 8007dd2:	b118      	cbz	r0, 8007ddc <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007dd6:	f043 0302 	orr.w	r3, r3, #2
 8007dda:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ddc:	0796      	lsls	r6, r2, #30
 8007dde:	d504      	bpl.n	8007dea <HAL_UART_IRQHandler+0x5a>
 8007de0:	b118      	cbz	r0, 8007dea <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007de2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007de4:	f043 0304 	orr.w	r3, r3, #4
 8007de8:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dea:	0715      	lsls	r5, r2, #28
 8007dec:	d507      	bpl.n	8007dfe <HAL_UART_IRQHandler+0x6e>
 8007dee:	f001 0320 	and.w	r3, r1, #32
 8007df2:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007df4:	bf1e      	ittt	ne
 8007df6:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8007df8:	f043 0308 	orrne.w	r3, r3, #8
 8007dfc:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007dfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d032      	beq.n	8007e6a <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e04:	0692      	lsls	r2, r2, #26
 8007e06:	d504      	bpl.n	8007e12 <HAL_UART_IRQHandler+0x82>
 8007e08:	068b      	lsls	r3, r1, #26
 8007e0a:	d502      	bpl.n	8007e12 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f7ff ff63 	bl	8007cd8 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e12:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007e14:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e16:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e18:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e1e:	f002 0208 	and.w	r2, r2, #8
 8007e22:	ea53 0502 	orrs.w	r5, r3, r2
 8007e26:	d022      	beq.n	8007e6e <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8007e28:	f7ff fcde 	bl	80077e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	6973      	ldr	r3, [r6, #20]
 8007e2e:	065e      	lsls	r6, r3, #25
 8007e30:	d518      	bpl.n	8007e64 <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	f102 0314 	add.w	r3, r2, #20
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	3214      	adds	r2, #20
 8007e42:	e842 3100 	strex	r1, r3, [r2]
 8007e46:	2900      	cmp	r1, #0
 8007e48:	d1f3      	bne.n	8007e32 <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8007e4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e4c:	b150      	cbz	r0, 8007e64 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e4e:	4b74      	ldr	r3, [pc, #464]	; (8008020 <HAL_UART_IRQHandler+0x290>)
 8007e50:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e52:	f7fd fc7f 	bl	8005754 <HAL_DMA_Abort_IT>
 8007e56:	b140      	cbz	r0, 8007e6a <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007e5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007e5c:	b002      	add	sp, #8
 8007e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e62:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007e64:	4620      	mov	r0, r4
 8007e66:	f7ff fdf4 	bl	8007a52 <HAL_UART_ErrorCallback>
}
 8007e6a:	b002      	add	sp, #8
 8007e6c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8007e6e:	f7ff fdf0 	bl	8007a52 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e72:	6465      	str	r5, [r4, #68]	; 0x44
 8007e74:	e7f9      	b.n	8007e6a <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e76:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007e78:	2801      	cmp	r0, #1
 8007e7a:	f040 8094 	bne.w	8007fa6 <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e7e:	06d5      	lsls	r5, r2, #27
 8007e80:	f140 8091 	bpl.w	8007fa6 <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e84:	06c8      	lsls	r0, r1, #27
 8007e86:	f140 808e 	bpl.w	8007fa6 <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	9201      	str	r2, [sp, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	9201      	str	r2, [sp, #4]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	9201      	str	r2, [sp, #4]
 8007e96:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e98:	695a      	ldr	r2, [r3, #20]
 8007e9a:	0652      	lsls	r2, r2, #25
 8007e9c:	d54d      	bpl.n	8007f3a <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ea0:	680a      	ldr	r2, [r1, #0]
 8007ea2:	6852      	ldr	r2, [r2, #4]
 8007ea4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	d0df      	beq.n	8007e6a <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eaa:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8007eac:	4290      	cmp	r0, r2
 8007eae:	d9dc      	bls.n	8007e6a <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8007eb0:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eb2:	698a      	ldr	r2, [r1, #24]
 8007eb4:	2a20      	cmp	r2, #32
 8007eb6:	d036      	beq.n	8007f26 <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	f103 020c 	add.w	r2, r3, #12
 8007ebc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	f103 000c 	add.w	r0, r3, #12
 8007ec8:	e840 2100 	strex	r1, r2, [r0]
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	d1f3      	bne.n	8007eb8 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	f103 0214 	add.w	r2, r3, #20
 8007ed4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	f103 0014 	add.w	r0, r3, #20
 8007ee0:	e840 2100 	strex	r1, r2, [r0]
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	d1f3      	bne.n	8007ed0 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee8:	f103 0214 	add.w	r2, r3, #20
 8007eec:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	f103 0014 	add.w	r0, r3, #20
 8007ef8:	e840 2100 	strex	r1, r2, [r0]
 8007efc:	2900      	cmp	r1, #0
 8007efe:	d1f3      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8007f00:	2220      	movs	r2, #32
 8007f02:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f08:	f103 020c 	add.w	r2, r3, #12
 8007f0c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	f103 000c 	add.w	r0, r3, #12
 8007f18:	e840 2100 	strex	r1, r2, [r0]
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d1f3      	bne.n	8007f08 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007f22:	f7fd fbf8 	bl	8005716 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f26:	2302      	movs	r3, #2
 8007f28:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f2a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007f2c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007f2e:	1ac9      	subs	r1, r1, r3
 8007f30:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7ff fe74 	bl	8007c20 <HAL_UARTEx_RxEventCallback>
 8007f38:	e797      	b.n	8007e6a <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007f3c:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8007f40:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f42:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d090      	beq.n	8007e6a <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f48:	1a89      	subs	r1, r1, r2
 8007f4a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	d08c      	beq.n	8007e6a <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	f103 020c 	add.w	r2, r3, #12
 8007f54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f58:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	f103 050c 	add.w	r5, r3, #12
 8007f60:	e845 2000 	strex	r0, r2, [r5]
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d1f3      	bne.n	8007f50 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	f103 0214 	add.w	r2, r3, #20
 8007f6c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f70:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f74:	f103 0514 	add.w	r5, r3, #20
 8007f78:	e845 2000 	strex	r0, r2, [r5]
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d1f3      	bne.n	8007f68 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8007f80:	2220      	movs	r2, #32
 8007f82:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f86:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	f103 020c 	add.w	r2, r3, #12
 8007f8c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f90:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	f103 050c 	add.w	r5, r3, #12
 8007f98:	e845 2000 	strex	r0, r2, [r5]
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d1f3      	bne.n	8007f88 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	6363      	str	r3, [r4, #52]	; 0x34
 8007fa4:	e7c5      	b.n	8007f32 <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fa6:	0616      	lsls	r6, r2, #24
 8007fa8:	d528      	bpl.n	8007ffc <HAL_UART_IRQHandler+0x26c>
 8007faa:	060d      	lsls	r5, r1, #24
 8007fac:	d526      	bpl.n	8007ffc <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fae:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007fb2:	2a21      	cmp	r2, #33	; 0x21
 8007fb4:	f47f af59 	bne.w	8007e6a <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb8:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007fba:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fbc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007fc0:	d117      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x262>
 8007fc2:	6921      	ldr	r1, [r4, #16]
 8007fc4:	b9a9      	cbnz	r1, 8007ff2 <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007fc6:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007fca:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007fce:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007fd0:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007fd2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007fd4:	3a01      	subs	r2, #1
 8007fd6:	b292      	uxth	r2, r2
 8007fd8:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	f47f af45 	bne.w	8007e6a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fee:	60da      	str	r2, [r3, #12]
 8007ff0:	e73b      	b.n	8007e6a <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ff2:	1c51      	adds	r1, r2, #1
 8007ff4:	6221      	str	r1, [r4, #32]
 8007ff6:	7812      	ldrb	r2, [r2, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	e7ea      	b.n	8007fd2 <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ffc:	0650      	lsls	r0, r2, #25
 8007ffe:	f57f af34 	bpl.w	8007e6a <HAL_UART_IRQHandler+0xda>
 8008002:	064a      	lsls	r2, r1, #25
 8008004:	f57f af31 	bpl.w	8007e6a <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008008:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800800a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800800c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008010:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008012:	2320      	movs	r3, #32
 8008014:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8008018:	f7ff fd18 	bl	8007a4c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800801c:	e725      	b.n	8007e6a <HAL_UART_IRQHandler+0xda>
 800801e:	bf00      	nop
 8008020:	08007aaf 	.word	0x08007aaf

08008024 <UART_Start_Receive_DMA>:
{
 8008024:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008026:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8008028:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800802c:	2222      	movs	r2, #34	; 0x22
{
 800802e:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8008030:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008032:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008034:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008038:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800803c:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800803e:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008040:	4a1c      	ldr	r2, [pc, #112]	; (80080b4 <UART_Start_Receive_DMA+0x90>)
 8008042:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008044:	4a1c      	ldr	r2, [pc, #112]	; (80080b8 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8008046:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800804a:	460a      	mov	r2, r1
 800804c:	1d31      	adds	r1, r6, #4
 800804e:	f7fd fb23 	bl	8005698 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008052:	6823      	ldr	r3, [r4, #0]
 8008054:	9501      	str	r5, [sp, #4]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008060:	6922      	ldr	r2, [r4, #16]
 8008062:	b15a      	cbz	r2, 800807c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	f103 020c 	add.w	r2, r3, #12
 8008068:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800806c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	f103 000c 	add.w	r0, r3, #12
 8008074:	e840 2100 	strex	r1, r2, [r0]
 8008078:	2900      	cmp	r1, #0
 800807a:	d1f3      	bne.n	8008064 <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	f103 0214 	add.w	r2, r3, #20
 8008080:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008088:	f103 0014 	add.w	r0, r3, #20
 800808c:	e840 2100 	strex	r1, r2, [r0]
 8008090:	2900      	cmp	r1, #0
 8008092:	d1f3      	bne.n	800807c <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	f103 0214 	add.w	r2, r3, #20
 8008098:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800809c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	f103 0114 	add.w	r1, r3, #20
 80080a4:	e841 2000 	strex	r0, r2, [r1]
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1f3      	bne.n	8008094 <UART_Start_Receive_DMA+0x70>
}
 80080ac:	b002      	add	sp, #8
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	08007c41 	.word	0x08007c41
 80080b4:	08007c23 	.word	0x08007c23
 80080b8:	08007a55 	.word	0x08007a55

080080bc <HAL_UART_Receive_DMA>:
{
 80080bc:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 80080be:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80080c2:	2e20      	cmp	r6, #32
 80080c4:	d106      	bne.n	80080d4 <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80080c6:	b141      	cbz	r1, 80080da <HAL_UART_Receive_DMA+0x1e>
 80080c8:	b13a      	cbz	r2, 80080da <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ca:	2400      	movs	r4, #0
 80080cc:	6304      	str	r4, [r0, #48]	; 0x30
}
 80080ce:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80080d0:	f7ff bfa8 	b.w	8008024 <UART_Start_Receive_DMA>
    return HAL_BUSY;
 80080d4:	2002      	movs	r0, #2
}
 80080d6:	bc70      	pop	{r4, r5, r6}
 80080d8:	4770      	bx	lr
      return HAL_ERROR;
 80080da:	2001      	movs	r0, #1
 80080dc:	e7fb      	b.n	80080d6 <HAL_UART_Receive_DMA+0x1a>

080080de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080de:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80080e0:	f001 f836 	bl	8009150 <vTaskStartScheduler>
  
  return osOK;
}
 80080e4:	2000      	movs	r0, #0
 80080e6:	bd08      	pop	{r3, pc}

080080e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80080ec:	6946      	ldr	r6, [r0, #20]
{
 80080ee:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080f0:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080f4:	692a      	ldr	r2, [r5, #16]
 80080f6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80080fa:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80080fc:	b176      	cbz	r6, 800811c <osThreadCreate+0x34>
 80080fe:	69ad      	ldr	r5, [r5, #24]
 8008100:	b165      	cbz	r5, 800811c <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8008102:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008104:	bf0c      	ite	eq
 8008106:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8008108:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800810a:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800810e:	9400      	str	r4, [sp, #0]
 8008110:	f000 ff28 	bl	8008f64 <xTaskCreateStatic>
 8008114:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008116:	9805      	ldr	r0, [sp, #20]
}
 8008118:	b006      	add	sp, #24
 800811a:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 800811c:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800811e:	bf0c      	ite	eq
 8008120:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8008122:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008124:	ad05      	add	r5, sp, #20
 8008126:	e9cd 4500 	strd	r4, r5, [sp]
 800812a:	b292      	uxth	r2, r2
 800812c:	f000 ff51 	bl	8008fd2 <xTaskCreate>
 8008130:	2801      	cmp	r0, #1
 8008132:	d0f0      	beq.n	8008116 <osThreadCreate+0x2e>
      return NULL;
 8008134:	2000      	movs	r0, #0
 8008136:	e7ef      	b.n	8008118 <osThreadCreate+0x30>

08008138 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8008138:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800813c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008140:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 800814c:	2000      	movs	r0, #0
 800814e:	4770      	bx	lr

08008150 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008150:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008152:	2801      	cmp	r0, #1
 8008154:	bf38      	it	cc
 8008156:	2001      	movcc	r0, #1
 8008158:	f001 f9aa 	bl	80094b0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800815c:	2000      	movs	r0, #0
 800815e:	bd08      	pop	{r3, pc}

08008160 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008160:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008162:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8008164:	3901      	subs	r1, #1
{
 8008166:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8008168:	424a      	negs	r2, r1
 800816a:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 800816c:	b13c      	cbz	r4, 800817e <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 800816e:	e9cd 0400 	strd	r0, r4, [sp]
 8008172:	2101      	movs	r1, #1
 8008174:	4805      	ldr	r0, [pc, #20]	; (800818c <osTimerCreate+0x2c>)
 8008176:	f001 fd7e 	bl	8009c76 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800817a:	b002      	add	sp, #8
 800817c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 800817e:	9000      	str	r0, [sp, #0]
 8008180:	2101      	movs	r1, #1
 8008182:	4802      	ldr	r0, [pc, #8]	; (800818c <osTimerCreate+0x2c>)
 8008184:	f001 fd50 	bl	8009c28 <xTimerCreate>
 8008188:	e7f7      	b.n	800817a <osTimerCreate+0x1a>
 800818a:	bf00      	nop
 800818c:	0800b984 	.word	0x0800b984

08008190 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008192:	2400      	movs	r4, #0
 8008194:	2901      	cmp	r1, #1
 8008196:	460a      	mov	r2, r1
 8008198:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 800819a:	bf38      	it	cc
 800819c:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800819e:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 80081a2:	b1b3      	cbz	r3, 80081d2 <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80081a4:	2109      	movs	r1, #9
 80081a6:	9400      	str	r4, [sp, #0]
 80081a8:	ab03      	add	r3, sp, #12
 80081aa:	f001 fda1 	bl	8009cf0 <xTimerGenericCommand>
 80081ae:	2801      	cmp	r0, #1
 80081b0:	d115      	bne.n	80081de <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	b913      	cbnz	r3, 80081bc <osTimerStart+0x2c>
  osStatus result = osOK;
 80081b6:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 80081b8:	b004      	add	sp, #16
 80081ba:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 80081bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	e7f1      	b.n	80081b6 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80081d2:	2104      	movs	r1, #4
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	f001 fd8b 	bl	8009cf0 <xTimerGenericCommand>
 80081da:	2801      	cmp	r0, #1
 80081dc:	d0eb      	beq.n	80081b6 <osTimerStart+0x26>
      result = osErrorOS;
 80081de:	20ff      	movs	r0, #255	; 0xff
  return result;
 80081e0:	e7ea      	b.n	80081b8 <osTimerStart+0x28>

080081e2 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80081e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80081e4:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 80081e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081ea:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 80081ee:	b1d3      	cbz	r3, 8008226 <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80081f0:	ab02      	add	r3, sp, #8
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2201      	movs	r2, #1
 80081f6:	ab03      	add	r3, sp, #12
 80081f8:	f001 fc0e 	bl	8009a18 <xTaskGenericNotifyFromISR>
 80081fc:	2801      	cmp	r0, #1
 80081fe:	d004      	beq.n	800820a <osSignalSet+0x28>
      return 0x80000000;
 8008200:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008204:	b005      	add	sp, #20
 8008206:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800820a:	9b02      	ldr	r3, [sp, #8]
 800820c:	b14b      	cbz	r3, 8008222 <osSignalSet+0x40>
 800820e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8008222:	9803      	ldr	r0, [sp, #12]
 8008224:	e7ee      	b.n	8008204 <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008226:	2201      	movs	r2, #1
 8008228:	ab03      	add	r3, sp, #12
 800822a:	f001 fb87 	bl	800993c <xTaskGenericNotify>
 800822e:	2801      	cmp	r0, #1
 8008230:	d0f7      	beq.n	8008222 <osSignalSet+0x40>
 8008232:	e7e5      	b.n	8008200 <osSignalSet+0x1e>

08008234 <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8008234:	2300      	movs	r3, #0
{
 8008236:	b530      	push	{r4, r5, lr}
 8008238:	b085      	sub	sp, #20
 800823a:	4605      	mov	r5, r0
 800823c:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 800823e:	9302      	str	r3, [sp, #8]
 8008240:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 8008244:	b9c0      	cbnz	r0, 8008278 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8008246:	4613      	mov	r3, r2
 8008248:	aa02      	add	r2, sp, #8
 800824a:	f001 fb2d 	bl	80098a8 <xTaskNotifyWait>
 800824e:	2801      	cmp	r0, #1
 8008250:	d00c      	beq.n	800826c <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 8008252:	1e23      	subs	r3, r4, #0
 8008254:	bf18      	it	ne
 8008256:	2301      	movne	r3, #1
 8008258:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800825a:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800825c:	ab04      	add	r3, sp, #16
 800825e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8008262:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8008266:	4628      	mov	r0, r5
 8008268:	b005      	add	sp, #20
 800826a:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 800826c:	9b02      	ldr	r3, [sp, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfac      	ite	ge
 8008272:	2308      	movge	r3, #8
 8008274:	2386      	movlt	r3, #134	; 0x86
 8008276:	e7f0      	b.n	800825a <osSignalWait+0x26>
 8008278:	2382      	movs	r3, #130	; 0x82
 800827a:	e7ee      	b.n	800825a <osSignalWait+0x26>

0800827c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800827c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800827e:	2400      	movs	r4, #0
 8008280:	9401      	str	r4, [sp, #4]
 8008282:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8008286:	b1a3      	cbz	r3, 80082b2 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008288:	a901      	add	r1, sp, #4
 800828a:	f000 fb64 	bl	8008956 <xQueueGiveFromISR>
 800828e:	2801      	cmp	r0, #1
 8008290:	d115      	bne.n	80082be <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	b913      	cbnz	r3, 800829c <osMutexRelease+0x20>
  osStatus result = osOK;
 8008296:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8008298:	b002      	add	sp, #8
 800829a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800829c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	e7f1      	b.n	8008296 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80082b2:	461a      	mov	r2, r3
 80082b4:	4619      	mov	r1, r3
 80082b6:	f000 fa3a 	bl	800872e <xQueueGenericSend>
 80082ba:	2801      	cmp	r0, #1
 80082bc:	d0eb      	beq.n	8008296 <osMutexRelease+0x1a>
    result = osErrorOS;
 80082be:	20ff      	movs	r0, #255	; 0xff
 80082c0:	e7ea      	b.n	8008298 <osMutexRelease+0x1c>

080082c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80082c2:	4603      	mov	r3, r0
 80082c4:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80082c6:	685c      	ldr	r4, [r3, #4]
{ 
 80082c8:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 80082ca:	b164      	cbz	r4, 80082e6 <osSemaphoreCreate+0x24>
    if (count == 1) {
 80082cc:	2901      	cmp	r1, #1
 80082ce:	d119      	bne.n	8008304 <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80082d0:	2303      	movs	r3, #3
 80082d2:	2200      	movs	r2, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4611      	mov	r1, r2
 80082d8:	4623      	mov	r3, r4
 80082da:	f000 f9bb 	bl	8008654 <xQueueGenericCreateStatic>
 80082de:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 80082e0:	4620      	mov	r0, r4
 80082e2:	b002      	add	sp, #8
 80082e4:	bd10      	pop	{r4, pc}
    if (count == 1) {
 80082e6:	2901      	cmp	r1, #1
 80082e8:	d1fa      	bne.n	80082e0 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 80082ea:	4621      	mov	r1, r4
 80082ec:	2203      	movs	r2, #3
 80082ee:	f000 f9fa 	bl	80086e6 <xQueueGenericCreate>
 80082f2:	4604      	mov	r4, r0
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d0f3      	beq.n	80082e0 <osSemaphoreCreate+0x1e>
 80082f8:	2300      	movs	r3, #0
 80082fa:	461a      	mov	r2, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	f000 fa16 	bl	800872e <xQueueGenericSend>
 8008302:	e7ed      	b.n	80082e0 <osSemaphoreCreate+0x1e>
      return NULL;
 8008304:	2400      	movs	r4, #0
 8008306:	e7eb      	b.n	80082e0 <osSemaphoreCreate+0x1e>

08008308 <osSemaphoreRelease>:
 8008308:	f7ff bfb8 	b.w	800827c <osMutexRelease>

0800830c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800830c:	4603      	mov	r3, r0
 800830e:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008310:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008312:	b10a      	cbz	r2, 8008318 <osMessageCreate+0xc>
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	b92b      	cbnz	r3, 8008324 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008318:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800831a:	b002      	add	sp, #8
 800831c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008320:	f000 b9e1 	b.w	80086e6 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008324:	2400      	movs	r4, #0
 8008326:	9400      	str	r4, [sp, #0]
 8008328:	f000 f994 	bl	8008654 <xQueueGenericCreateStatic>
}
 800832c:	b002      	add	sp, #8
 800832e:	bd10      	pop	{r4, pc}

08008330 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8008332:	2400      	movs	r4, #0
{
 8008334:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008336:	9403      	str	r4, [sp, #12]
 8008338:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800833c:	b1b3      	cbz	r3, 800836c <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800833e:	4623      	mov	r3, r4
 8008340:	aa03      	add	r2, sp, #12
 8008342:	a901      	add	r1, sp, #4
 8008344:	f000 faa6 	bl	8008894 <xQueueGenericSendFromISR>
 8008348:	2801      	cmp	r0, #1
 800834a:	d117      	bne.n	800837c <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	b913      	cbnz	r3, 8008356 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8008350:	2000      	movs	r0, #0
}
 8008352:	b004      	add	sp, #16
 8008354:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8008356:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	e7f1      	b.n	8008350 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800836c:	2a01      	cmp	r2, #1
 800836e:	bf38      	it	cc
 8008370:	2201      	movcc	r2, #1
 8008372:	a901      	add	r1, sp, #4
 8008374:	f000 f9db 	bl	800872e <xQueueGenericSend>
 8008378:	2801      	cmp	r0, #1
 800837a:	d0e9      	beq.n	8008350 <osMessagePut+0x20>
      return osErrorOS;
 800837c:	20ff      	movs	r0, #255	; 0xff
 800837e:	e7e8      	b.n	8008352 <osMessagePut+0x22>

08008380 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8008380:	2300      	movs	r3, #0
{
 8008382:	b530      	push	{r4, r5, lr}
 8008384:	b085      	sub	sp, #20
 8008386:	4605      	mov	r5, r0
 8008388:	4614      	mov	r4, r2
 800838a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800838c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800838e:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8008390:	b911      	cbnz	r1, 8008398 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8008392:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8008394:	9301      	str	r3, [sp, #4]
 8008396:	e018      	b.n	80083ca <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800839e:	b1e3      	cbz	r3, 80083da <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083a0:	466a      	mov	r2, sp
 80083a2:	a902      	add	r1, sp, #8
 80083a4:	f000 fbca 	bl	8008b3c <xQueueReceiveFromISR>
 80083a8:	1e43      	subs	r3, r0, #1
 80083aa:	4258      	negs	r0, r3
 80083ac:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 80083ae:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083b0:	0100      	lsls	r0, r0, #4
 80083b2:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80083b4:	b14b      	cbz	r3, 80083ca <osMessageGet+0x4a>
 80083b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	f3bf 8f6f 	isb	sy
    return event;
 80083ca:	ab04      	add	r3, sp, #16
 80083cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80083d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 80083d4:	4628      	mov	r0, r5
 80083d6:	b005      	add	sp, #20
 80083d8:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80083da:	a902      	add	r1, sp, #8
 80083dc:	f000 fb0f 	bl	80089fe <xQueueReceive>
 80083e0:	2801      	cmp	r0, #1
 80083e2:	d101      	bne.n	80083e8 <osMessageGet+0x68>
      event.status = osEventMessage;
 80083e4:	2310      	movs	r3, #16
 80083e6:	e7d5      	b.n	8008394 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083e8:	3c00      	subs	r4, #0
 80083ea:	bf18      	it	ne
 80083ec:	2401      	movne	r4, #1
 80083ee:	01a4      	lsls	r4, r4, #6
 80083f0:	9401      	str	r4, [sp, #4]
  return event;
 80083f2:	e7ea      	b.n	80083ca <osMessageGet+0x4a>

080083f4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80083f4:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80083f6:	f001 f8c1 	bl	800957c <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 80083fa:	2000      	movs	r0, #0
 80083fc:	bd08      	pop	{r3, pc}

080083fe <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80083fe:	b508      	push	{r3, lr}
 8008400:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008404:	b17b      	cbz	r3, 8008426 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008406:	f000 fe53 	bl	80090b0 <xTaskResumeFromISR>
 800840a:	2801      	cmp	r0, #1
 800840c:	d109      	bne.n	8008422 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800840e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008422:	2000      	movs	r0, #0
 8008424:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8008426:	f000 fe01 	bl	800902c <vTaskResume>
 800842a:	e7fa      	b.n	8008422 <osThreadResume+0x24>

0800842c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800842c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800842e:	2901      	cmp	r1, #1
 8008430:	bf38      	it	cc
 8008432:	2101      	movcc	r1, #1
 8008434:	f000 fff2 	bl	800941c <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008438:	2000      	movs	r0, #0
 800843a:	bd08      	pop	{r3, pc}

0800843c <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800843c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008440:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008444:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008448:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800844a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008450:	4770      	bx	lr

08008452 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008456:	4770      	bx	lr

08008458 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008458:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800845a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800845c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800845e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008464:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008466:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008468:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800846a:	3301      	adds	r3, #1
 800846c:	6003      	str	r3, [r0, #0]
}
 800846e:	4770      	bx	lr

08008470 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008470:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008472:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008474:	1c63      	adds	r3, r4, #1
 8008476:	d10a      	bne.n	800848e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008478:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800847e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008480:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008482:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008484:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008486:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008488:	3301      	adds	r3, #1
 800848a:	6003      	str	r3, [r0, #0]
}
 800848c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800848e:	f100 0208 	add.w	r2, r0, #8
 8008492:	4613      	mov	r3, r2
 8008494:	6852      	ldr	r2, [r2, #4]
 8008496:	6815      	ldr	r5, [r2, #0]
 8008498:	42a5      	cmp	r5, r4
 800849a:	d9fa      	bls.n	8008492 <vListInsert+0x22>
 800849c:	e7ed      	b.n	800847a <vListInsert+0xa>

0800849e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800849e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80084a0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80084a4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084a8:	6859      	ldr	r1, [r3, #4]
 80084aa:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084ac:	bf08      	it	eq
 80084ae:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084b0:	2200      	movs	r2, #0
 80084b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	3a01      	subs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084ba:	6818      	ldr	r0, [r3, #0]
}
 80084bc:	4770      	bx	lr

080084be <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084be:	b510      	push	{r4, lr}
 80084c0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084c2:	f001 fdbf 	bl	800a044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084c6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80084c8:	f001 fddc 	bl	800a084 <vPortExitCritical>

	return xReturn;
}
 80084cc:	fab4 f084 	clz	r0, r4
 80084d0:	0940      	lsrs	r0, r0, #5
 80084d2:	bd10      	pop	{r4, pc}

080084d4 <prvCopyDataToQueue>:
{
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80084da:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084dc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084de:	b952      	cbnz	r2, 80084f6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084e0:	6807      	ldr	r7, [r0, #0]
 80084e2:	bb47      	cbnz	r7, 8008536 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80084e4:	6840      	ldr	r0, [r0, #4]
 80084e6:	f001 f98f 	bl	8009808 <xTaskPriorityDisinherit>
 80084ea:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 80084ec:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084ee:	3601      	adds	r6, #1
}
 80084f0:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80084f2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80084f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80084f6:	b965      	cbnz	r5, 8008512 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80084f8:	6880      	ldr	r0, [r0, #8]
 80084fa:	f002 fb8c 	bl	800ac16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008502:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008504:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008506:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008508:	4293      	cmp	r3, r2
 800850a:	d3f0      	bcc.n	80084ee <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	e7ed      	b.n	80084ee <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008512:	68c0      	ldr	r0, [r0, #12]
 8008514:	f002 fb7f 	bl	800ac16 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008518:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800851a:	68e3      	ldr	r3, [r4, #12]
 800851c:	4251      	negs	r1, r2
 800851e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008520:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008522:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008524:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008526:	bf3e      	ittt	cc
 8008528:	6863      	ldrcc	r3, [r4, #4]
 800852a:	185b      	addcc	r3, r3, r1
 800852c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800852e:	2d02      	cmp	r5, #2
 8008530:	d101      	bne.n	8008536 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008532:	b116      	cbz	r6, 800853a <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8008534:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008536:	2500      	movs	r5, #0
 8008538:	e7d9      	b.n	80084ee <prvCopyDataToQueue+0x1a>
 800853a:	4635      	mov	r5, r6
 800853c:	e7d7      	b.n	80084ee <prvCopyDataToQueue+0x1a>

0800853e <prvCopyDataFromQueue>:
{
 800853e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008542:	4608      	mov	r0, r1
 8008544:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008546:	b162      	cbz	r2, 8008562 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008548:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800854a:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800854c:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800854e:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008550:	bf28      	it	cs
 8008552:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008554:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008556:	bf28      	it	cs
 8008558:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800855a:	68d9      	ldr	r1, [r3, #12]
}
 800855c:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800855e:	f002 bb5a 	b.w	800ac16 <memcpy>
}
 8008562:	bc10      	pop	{r4}
 8008564:	4770      	bx	lr

08008566 <prvUnlockQueue>:
{
 8008566:	b570      	push	{r4, r5, r6, lr}
 8008568:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800856a:	f001 fd6b 	bl	800a044 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800856e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008572:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008576:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008578:	2d00      	cmp	r5, #0
 800857a:	dc14      	bgt.n	80085a6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800857c:	23ff      	movs	r3, #255	; 0xff
 800857e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008582:	f001 fd7f 	bl	800a084 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008586:	f001 fd5d 	bl	800a044 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800858a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800858e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008592:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008594:	2d00      	cmp	r5, #0
 8008596:	dc12      	bgt.n	80085be <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008598:	23ff      	movs	r3, #255	; 0xff
 800859a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800859e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80085a2:	f001 bd6f 	b.w	800a084 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0e7      	beq.n	800857c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ac:	4630      	mov	r0, r6
 80085ae:	f001 f88b 	bl	80096c8 <xTaskRemoveFromEventList>
 80085b2:	b108      	cbz	r0, 80085b8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80085b4:	f001 f912 	bl	80097dc <vTaskMissedYield>
			--cTxLock;
 80085b8:	3d01      	subs	r5, #1
 80085ba:	b26d      	sxtb	r5, r5
 80085bc:	e7dc      	b.n	8008578 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0e9      	beq.n	8008598 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085c4:	4630      	mov	r0, r6
 80085c6:	f001 f87f 	bl	80096c8 <xTaskRemoveFromEventList>
 80085ca:	b108      	cbz	r0, 80085d0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80085cc:	f001 f906 	bl	80097dc <vTaskMissedYield>
				--cRxLock;
 80085d0:	3d01      	subs	r5, #1
 80085d2:	b26d      	sxtb	r5, r5
 80085d4:	e7de      	b.n	8008594 <prvUnlockQueue+0x2e>

080085d6 <xQueueGenericReset>:
{
 80085d6:	b538      	push	{r3, r4, r5, lr}
 80085d8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80085da:	4604      	mov	r4, r0
 80085dc:	b940      	cbnz	r0, 80085f0 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	e7fe      	b.n	80085ee <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80085f0:	f001 fd28 	bl	800a044 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80085f4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80085f8:	434b      	muls	r3, r1
 80085fa:	6822      	ldr	r2, [r4, #0]
 80085fc:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80085fe:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008600:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008602:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008604:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008606:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8008608:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800860a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800860c:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800860e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008616:	b9a5      	cbnz	r5, 8008642 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	b173      	cbz	r3, 800863a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800861c:	f104 0010 	add.w	r0, r4, #16
 8008620:	f001 f852 	bl	80096c8 <xTaskRemoveFromEventList>
 8008624:	b148      	cbz	r0, 800863a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008626:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800862a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800862e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800863a:	f001 fd23 	bl	800a084 <vPortExitCritical>
}
 800863e:	2001      	movs	r0, #1
 8008640:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008642:	f104 0010 	add.w	r0, r4, #16
 8008646:	f7ff fef9 	bl	800843c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800864a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800864e:	f7ff fef5 	bl	800843c <vListInitialise>
 8008652:	e7f2      	b.n	800863a <xQueueGenericReset+0x64>

08008654 <xQueueGenericCreateStatic>:
	{
 8008654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008656:	460d      	mov	r5, r1
 8008658:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800865a:	b940      	cbnz	r0, 800866e <xQueueGenericCreateStatic+0x1a>
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	e7fe      	b.n	800866c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800866e:	b943      	cbnz	r3, 8008682 <xQueueGenericCreateStatic+0x2e>
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	e7fe      	b.n	8008680 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008682:	b14a      	cbz	r2, 8008698 <xQueueGenericCreateStatic+0x44>
 8008684:	b991      	cbnz	r1, 80086ac <xQueueGenericCreateStatic+0x58>
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	e7fe      	b.n	8008696 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008698:	b141      	cbz	r1, 80086ac <xQueueGenericCreateStatic+0x58>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	e7fe      	b.n	80086aa <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086ac:	2348      	movs	r3, #72	; 0x48
 80086ae:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	2b48      	cmp	r3, #72	; 0x48
 80086b4:	d008      	beq.n	80086c8 <xQueueGenericCreateStatic+0x74>
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	e7fe      	b.n	80086c6 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086c8:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 80086ca:	2d00      	cmp	r5, #0
 80086cc:	bf08      	it	eq
 80086ce:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80086d0:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80086d4:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086d8:	4620      	mov	r0, r4
 80086da:	6022      	str	r2, [r4, #0]
 80086dc:	f7ff ff7b 	bl	80085d6 <xQueueGenericReset>
	}
 80086e0:	4620      	mov	r0, r4
 80086e2:	b003      	add	sp, #12
 80086e4:	bd30      	pop	{r4, r5, pc}

080086e6 <xQueueGenericCreate>:
	{
 80086e6:	b570      	push	{r4, r5, r6, lr}
 80086e8:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ea:	4606      	mov	r6, r0
 80086ec:	b940      	cbnz	r0, 8008700 <xQueueGenericCreate+0x1a>
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	e7fe      	b.n	80086fe <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008700:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008702:	3048      	adds	r0, #72	; 0x48
 8008704:	f001 fdce 	bl	800a2a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008708:	4604      	mov	r4, r0
 800870a:	b160      	cbz	r0, 8008726 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008712:	b155      	cbz	r5, 800872a <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008714:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008718:	2101      	movs	r1, #1
 800871a:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800871c:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8008720:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008722:	f7ff ff58 	bl	80085d6 <xQueueGenericReset>
	}
 8008726:	4620      	mov	r0, r4
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	4603      	mov	r3, r0
 800872c:	e7f4      	b.n	8008718 <xQueueGenericCreate+0x32>

0800872e <xQueueGenericSend>:
{
 800872e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008732:	b085      	sub	sp, #20
 8008734:	4688      	mov	r8, r1
 8008736:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008738:	4604      	mov	r4, r0
{
 800873a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800873c:	b940      	cbnz	r0, 8008750 <xQueueGenericSend+0x22>
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	e7fe      	b.n	800874e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008750:	b951      	cbnz	r1, 8008768 <xQueueGenericSend+0x3a>
 8008752:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008754:	b143      	cbz	r3, 8008768 <xQueueGenericSend+0x3a>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	e7fe      	b.n	8008766 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008768:	2f02      	cmp	r7, #2
 800876a:	d10b      	bne.n	8008784 <xQueueGenericSend+0x56>
 800876c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d008      	beq.n	8008784 <xQueueGenericSend+0x56>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	e7fe      	b.n	8008782 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008784:	f001 f830 	bl	80097e8 <xTaskGetSchedulerState>
 8008788:	4606      	mov	r6, r0
 800878a:	b950      	cbnz	r0, 80087a2 <xQueueGenericSend+0x74>
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	b14b      	cbz	r3, 80087a4 <xQueueGenericSend+0x76>
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	e7fe      	b.n	80087a0 <xQueueGenericSend+0x72>
 80087a2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80087a4:	f04f 0900 	mov.w	r9, #0
 80087a8:	e037      	b.n	800881a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087aa:	9d01      	ldr	r5, [sp, #4]
 80087ac:	b91d      	cbnz	r5, 80087b6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80087ae:	f001 fc69 	bl	800a084 <vPortExitCritical>
			return errQUEUE_FULL;
 80087b2:	2000      	movs	r0, #0
 80087b4:	e052      	b.n	800885c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 80087b6:	b916      	cbnz	r6, 80087be <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087b8:	a802      	add	r0, sp, #8
 80087ba:	f000 ffc7 	bl	800974c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80087be:	f001 fc61 	bl	800a084 <vPortExitCritical>
		vTaskSuspendAll();
 80087c2:	f000 fd15 	bl	80091f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087c6:	f001 fc3d 	bl	800a044 <vPortEnterCritical>
 80087ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087ce:	2bff      	cmp	r3, #255	; 0xff
 80087d0:	bf08      	it	eq
 80087d2:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80087d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087da:	2bff      	cmp	r3, #255	; 0xff
 80087dc:	bf08      	it	eq
 80087de:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80087e2:	f001 fc4f 	bl	800a084 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e6:	a901      	add	r1, sp, #4
 80087e8:	a802      	add	r0, sp, #8
 80087ea:	f000 ffbb 	bl	8009764 <xTaskCheckForTimeOut>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	d14a      	bne.n	8008888 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087f2:	f001 fc27 	bl	800a044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80087f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d131      	bne.n	8008862 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80087fe:	f001 fc41 	bl	800a084 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008802:	9901      	ldr	r1, [sp, #4]
 8008804:	f104 0010 	add.w	r0, r4, #16
 8008808:	f000 ff24 	bl	8009654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800880c:	4620      	mov	r0, r4
 800880e:	f7ff feaa 	bl	8008566 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008812:	f000 fd8d 	bl	8009330 <xTaskResumeAll>
 8008816:	b360      	cbz	r0, 8008872 <xQueueGenericSend+0x144>
 8008818:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800881a:	f001 fc13 	bl	800a044 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008820:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008822:	429a      	cmp	r2, r3
 8008824:	d301      	bcc.n	800882a <xQueueGenericSend+0xfc>
 8008826:	2f02      	cmp	r7, #2
 8008828:	d1bf      	bne.n	80087aa <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800882a:	463a      	mov	r2, r7
 800882c:	4641      	mov	r1, r8
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff fe50 	bl	80084d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008836:	b11b      	cbz	r3, 8008840 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008838:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800883c:	f000 ff44 	bl	80096c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008840:	b148      	cbz	r0, 8008856 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 8008842:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800884a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008856:	f001 fc15 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 800885a:	2001      	movs	r0, #1
}
 800885c:	b005      	add	sp, #20
 800885e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8008862:	f001 fc0f 	bl	800a084 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fe7d 	bl	8008566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800886c:	f000 fd60 	bl	8009330 <xTaskResumeAll>
 8008870:	e7d2      	b.n	8008818 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008872:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	e7c7      	b.n	8008818 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008888:	4620      	mov	r0, r4
 800888a:	f7ff fe6c 	bl	8008566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800888e:	f000 fd4f 	bl	8009330 <xTaskResumeAll>
 8008892:	e78e      	b.n	80087b2 <xQueueGenericSend+0x84>

08008894 <xQueueGenericSendFromISR>:
{
 8008894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008898:	4689      	mov	r9, r1
 800889a:	4690      	mov	r8, r2
 800889c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800889e:	4604      	mov	r4, r0
 80088a0:	b940      	cbnz	r0, 80088b4 <xQueueGenericSendFromISR+0x20>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	e7fe      	b.n	80088b2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b4:	b951      	cbnz	r1, 80088cc <xQueueGenericSendFromISR+0x38>
 80088b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80088b8:	b143      	cbz	r3, 80088cc <xQueueGenericSendFromISR+0x38>
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	e7fe      	b.n	80088ca <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088cc:	2f02      	cmp	r7, #2
 80088ce:	d10b      	bne.n	80088e8 <xQueueGenericSendFromISR+0x54>
 80088d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d008      	beq.n	80088e8 <xQueueGenericSendFromISR+0x54>
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	e7fe      	b.n	80088e6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088e8:	f001 fc88 	bl	800a1fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088ec:	f3ef 8611 	mrs	r6, BASEPRI
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008900:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008902:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008904:	429a      	cmp	r2, r3
 8008906:	d301      	bcc.n	800890c <xQueueGenericSendFromISR+0x78>
 8008908:	2f02      	cmp	r7, #2
 800890a:	d122      	bne.n	8008952 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800890c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008910:	463a      	mov	r2, r7
 8008912:	4649      	mov	r1, r9
 8008914:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008916:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008918:	f7ff fddc 	bl	80084d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800891c:	1c6b      	adds	r3, r5, #1
 800891e:	d113      	bne.n	8008948 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008922:	b90b      	cbnz	r3, 8008928 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8008924:	2001      	movs	r0, #1
 8008926:	e00b      	b.n	8008940 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008928:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800892c:	f000 fecc 	bl	80096c8 <xTaskRemoveFromEventList>
 8008930:	2800      	cmp	r0, #0
 8008932:	d0f7      	beq.n	8008924 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8008934:	f1b8 0f00 	cmp.w	r8, #0
 8008938:	d0f4      	beq.n	8008924 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800893a:	2001      	movs	r0, #1
 800893c:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008940:	f386 8811 	msr	BASEPRI, r6
}
 8008944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008948:	3501      	adds	r5, #1
 800894a:	b26d      	sxtb	r5, r5
 800894c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008950:	e7e8      	b.n	8008924 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8008952:	2000      	movs	r0, #0
 8008954:	e7f4      	b.n	8008940 <xQueueGenericSendFromISR+0xac>

08008956 <xQueueGiveFromISR>:
{
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800895a:	4604      	mov	r4, r0
 800895c:	b940      	cbnz	r0, 8008970 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	e7fe      	b.n	800896e <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008970:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008972:	b143      	cbz	r3, 8008986 <xQueueGiveFromISR+0x30>
 8008974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	e7fe      	b.n	8008984 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008986:	6803      	ldr	r3, [r0, #0]
 8008988:	b953      	cbnz	r3, 80089a0 <xQueueGiveFromISR+0x4a>
 800898a:	6843      	ldr	r3, [r0, #4]
 800898c:	b143      	cbz	r3, 80089a0 <xQueueGiveFromISR+0x4a>
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	e7fe      	b.n	800899e <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089a0:	f001 fc2c 	bl	800a1fc <vPortValidateInterruptPriority>
	__asm volatile
 80089a4:	f3ef 8611 	mrs	r6, BASEPRI
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80089bc:	4293      	cmp	r3, r2
 80089be:	d91c      	bls.n	80089fa <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089c4:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80089c6:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c8:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ca:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80089cc:	d110      	bne.n	80089f0 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d0:	b90b      	cbnz	r3, 80089d6 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80089d2:	2001      	movs	r0, #1
 80089d4:	e009      	b.n	80089ea <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80089da:	f000 fe75 	bl	80096c8 <xTaskRemoveFromEventList>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d0f7      	beq.n	80089d2 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80089e2:	2d00      	cmp	r5, #0
 80089e4:	d0f5      	beq.n	80089d2 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089e6:	2001      	movs	r0, #1
 80089e8:	6028      	str	r0, [r5, #0]
	__asm volatile
 80089ea:	f386 8811 	msr	BASEPRI, r6
}
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089f0:	3301      	adds	r3, #1
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089f8:	e7eb      	b.n	80089d2 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80089fa:	2000      	movs	r0, #0
 80089fc:	e7f5      	b.n	80089ea <xQueueGiveFromISR+0x94>

080089fe <xQueueReceive>:
{
 80089fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008a02:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008a04:	4604      	mov	r4, r0
{
 8008a06:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008a08:	b940      	cbnz	r0, 8008a1c <xQueueReceive+0x1e>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	e7fe      	b.n	8008a1a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a1c:	b951      	cbnz	r1, 8008a34 <xQueueReceive+0x36>
 8008a1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a20:	b143      	cbz	r3, 8008a34 <xQueueReceive+0x36>
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	e7fe      	b.n	8008a32 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a34:	f000 fed8 	bl	80097e8 <xTaskGetSchedulerState>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b950      	cbnz	r0, 8008a52 <xQueueReceive+0x54>
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	b14b      	cbz	r3, 8008a54 <xQueueReceive+0x56>
 8008a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	e7fe      	b.n	8008a50 <xQueueReceive+0x52>
 8008a52:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	e03d      	b.n	8008ad6 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a5a:	9d01      	ldr	r5, [sp, #4]
 8008a5c:	b91d      	cbnz	r5, 8008a66 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8008a5e:	f001 fb11 	bl	800a084 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008a62:	2000      	movs	r0, #0
 8008a64:	e056      	b.n	8008b14 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8008a66:	b916      	cbnz	r6, 8008a6e <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a68:	a802      	add	r0, sp, #8
 8008a6a:	f000 fe6f 	bl	800974c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008a6e:	f001 fb09 	bl	800a084 <vPortExitCritical>
		vTaskSuspendAll();
 8008a72:	f000 fbbd 	bl	80091f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a76:	f001 fae5 	bl	800a044 <vPortEnterCritical>
 8008a7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a7e:	2bff      	cmp	r3, #255	; 0xff
 8008a80:	bf08      	it	eq
 8008a82:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8008a86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a8a:	2bff      	cmp	r3, #255	; 0xff
 8008a8c:	bf08      	it	eq
 8008a8e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8008a92:	f001 faf7 	bl	800a084 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a96:	a901      	add	r1, sp, #4
 8008a98:	a802      	add	r0, sp, #8
 8008a9a:	f000 fe63 	bl	8009764 <xTaskCheckForTimeOut>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d141      	bne.n	8008b26 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7ff fd0b 	bl	80084be <prvIsQueueEmpty>
 8008aa8:	b3b8      	cbz	r0, 8008b1a <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008aaa:	9901      	ldr	r1, [sp, #4]
 8008aac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008ab0:	f000 fdd0 	bl	8009654 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7ff fd56 	bl	8008566 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008aba:	f000 fc39 	bl	8009330 <xTaskResumeAll>
 8008abe:	b948      	cbnz	r0, 8008ad4 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008ac0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	f3bf 8f6f 	isb	sy
 8008ad4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008ad6:	f001 fab5 	bl	800a044 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ada:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	d0bc      	beq.n	8008a5a <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ae4:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ae6:	f7ff fd2a 	bl	800853e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aea:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aec:	6923      	ldr	r3, [r4, #16]
 8008aee:	b173      	cbz	r3, 8008b0e <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af0:	f104 0010 	add.w	r0, r4, #16
 8008af4:	f000 fde8 	bl	80096c8 <xTaskRemoveFromEventList>
 8008af8:	b148      	cbz	r0, 8008b0e <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8008afa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008b0e:	f001 fab9 	bl	800a084 <vPortExitCritical>
				return pdPASS;
 8008b12:	2001      	movs	r0, #1
}
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7ff fd23 	bl	8008566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b20:	f000 fc06 	bl	8009330 <xTaskResumeAll>
 8008b24:	e7d6      	b.n	8008ad4 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff fd1d 	bl	8008566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b2c:	f000 fc00 	bl	8009330 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b30:	4620      	mov	r0, r4
 8008b32:	f7ff fcc4 	bl	80084be <prvIsQueueEmpty>
 8008b36:	2800      	cmp	r0, #0
 8008b38:	d0cc      	beq.n	8008ad4 <xQueueReceive+0xd6>
 8008b3a:	e792      	b.n	8008a62 <xQueueReceive+0x64>

08008b3c <xQueueReceiveFromISR>:
{
 8008b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b40:	4689      	mov	r9, r1
 8008b42:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8008b44:	4605      	mov	r5, r0
 8008b46:	b940      	cbnz	r0, 8008b5a <xQueueReceiveFromISR+0x1e>
 8008b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	e7fe      	b.n	8008b58 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b5a:	b951      	cbnz	r1, 8008b72 <xQueueReceiveFromISR+0x36>
 8008b5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b5e:	b143      	cbz	r3, 8008b72 <xQueueReceiveFromISR+0x36>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	e7fe      	b.n	8008b70 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b72:	f001 fb43 	bl	800a1fc <vPortValidateInterruptPriority>
	__asm volatile
 8008b76:	f3ef 8711 	mrs	r7, BASEPRI
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b8a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b8c:	b31c      	cbz	r4, 8008bd6 <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b8e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b92:	4649      	mov	r1, r9
 8008b94:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b96:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b98:	f7ff fcd1 	bl	800853e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b9c:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8008b9e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ba0:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008ba2:	d113      	bne.n	8008bcc <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ba4:	692b      	ldr	r3, [r5, #16]
 8008ba6:	b90b      	cbnz	r3, 8008bac <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e00b      	b.n	8008bc4 <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bac:	f105 0010 	add.w	r0, r5, #16
 8008bb0:	f000 fd8a 	bl	80096c8 <xTaskRemoveFromEventList>
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	d0f7      	beq.n	8008ba8 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	d0f4      	beq.n	8008ba8 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8008bc4:	f387 8811 	msr	BASEPRI, r7
}
 8008bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008bcc:	3601      	adds	r6, #1
 8008bce:	b276      	sxtb	r6, r6
 8008bd0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8008bd4:	e7e8      	b.n	8008ba8 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	e7f4      	b.n	8008bc4 <xQueueReceiveFromISR+0x88>
	...

08008bdc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bdc:	2300      	movs	r3, #0
	{
 8008bde:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008be0:	4a06      	ldr	r2, [pc, #24]	; (8008bfc <vQueueAddToRegistry+0x20>)
 8008be2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8008be6:	b92c      	cbnz	r4, 8008bf4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008be8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008bec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008bf0:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008bf2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	d1f3      	bne.n	8008be2 <vQueueAddToRegistry+0x6>
 8008bfa:	e7fa      	b.n	8008bf2 <vQueueAddToRegistry+0x16>
 8008bfc:	20001d2c 	.word	0x20001d2c

08008c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c00:	b570      	push	{r4, r5, r6, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	460d      	mov	r5, r1
 8008c06:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c08:	f001 fa1c 	bl	800a044 <vPortEnterCritical>
 8008c0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008c10:	2bff      	cmp	r3, #255	; 0xff
 8008c12:	bf04      	itt	eq
 8008c14:	2300      	moveq	r3, #0
 8008c16:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008c1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008c1e:	2bff      	cmp	r3, #255	; 0xff
 8008c20:	bf04      	itt	eq
 8008c22:	2300      	moveq	r3, #0
 8008c24:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8008c28:	f001 fa2c 	bl	800a084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c2e:	b92b      	cbnz	r3, 8008c3c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c30:	4632      	mov	r2, r6
 8008c32:	4629      	mov	r1, r5
 8008c34:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c38:	f000 fd26 	bl	8009688 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c3c:	4620      	mov	r0, r4
	}
 8008c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008c42:	f7ff bc90 	b.w	8008566 <prvUnlockQueue>
	...

08008c48 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c4e:	f001 f9f9 	bl	800a044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c52:	4b2f      	ldr	r3, [pc, #188]	; (8008d10 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008c54:	4e2f      	ldr	r6, [pc, #188]	; (8008d14 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	4f2f      	ldr	r7, [pc, #188]	; (8008d18 <prvAddNewTaskToReadyList+0xd0>)
 8008c5a:	3201      	adds	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008c5e:	6835      	ldr	r5, [r6, #0]
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	d14a      	bne.n	8008cfa <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c64:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d11f      	bne.n	8008cac <prvAddNewTaskToReadyList+0x64>
 8008c6c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c6e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c70:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c72:	f7ff fbe3 	bl	800843c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c76:	2d07      	cmp	r5, #7
 8008c78:	f108 0814 	add.w	r8, r8, #20
 8008c7c:	d1f7      	bne.n	8008c6e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c7e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8008d1c <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 8008c82:	4d27      	ldr	r5, [pc, #156]	; (8008d20 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008c84:	4640      	mov	r0, r8
 8008c86:	f7ff fbd9 	bl	800843c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f7ff fbd6 	bl	800843c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c90:	4824      	ldr	r0, [pc, #144]	; (8008d24 <prvAddNewTaskToReadyList+0xdc>)
 8008c92:	f7ff fbd3 	bl	800843c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c96:	4824      	ldr	r0, [pc, #144]	; (8008d28 <prvAddNewTaskToReadyList+0xe0>)
 8008c98:	f7ff fbd0 	bl	800843c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c9c:	4823      	ldr	r0, [pc, #140]	; (8008d2c <prvAddNewTaskToReadyList+0xe4>)
 8008c9e:	f7ff fbcd 	bl	800843c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ca2:	4b23      	ldr	r3, [pc, #140]	; (8008d30 <prvAddNewTaskToReadyList+0xe8>)
 8008ca4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ca8:	4b22      	ldr	r3, [pc, #136]	; (8008d34 <prvAddNewTaskToReadyList+0xec>)
 8008caa:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008cac:	4a22      	ldr	r2, [pc, #136]	; (8008d38 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8008cae:	4923      	ldr	r1, [pc, #140]	; (8008d3c <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8008cb0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008cb2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008cb8:	2301      	movs	r3, #1
 8008cba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008cbc:	4093      	lsls	r3, r2
 8008cbe:	4303      	orrs	r3, r0
 8008cc0:	2014      	movs	r0, #20
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	fb00 7002 	mla	r0, r0, r2, r7
 8008cc8:	1d21      	adds	r1, r4, #4
 8008cca:	f7ff fbc5 	bl	8008458 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008cce:	f001 f9d9 	bl	800a084 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008cd2:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <prvAddNewTaskToReadyList+0xf8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	b173      	cbz	r3, 8008cf6 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cd8:	6833      	ldr	r3, [r6, #0]
 8008cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d209      	bcs.n	8008cf6 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8008ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
}
 8008cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008cfa:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <prvAddNewTaskToReadyList+0xf8>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d1d3      	bne.n	8008cac <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d04:	6832      	ldr	r2, [r6, #0]
 8008d06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008d0a:	bf98      	it	ls
 8008d0c:	6034      	strls	r4, [r6, #0]
 8008d0e:	e7cd      	b.n	8008cac <prvAddNewTaskToReadyList+0x64>
 8008d10:	20001e04 	.word	0x20001e04
 8008d14:	20001d6c 	.word	0x20001d6c
 8008d18:	20001d78 	.word	0x20001d78
 8008d1c:	20001e1c 	.word	0x20001e1c
 8008d20:	20001e30 	.word	0x20001e30
 8008d24:	20001e4c 	.word	0x20001e4c
 8008d28:	20001e78 	.word	0x20001e78
 8008d2c:	20001e64 	.word	0x20001e64
 8008d30:	20001d70 	.word	0x20001d70
 8008d34:	20001d74 	.word	0x20001d74
 8008d38:	20001e14 	.word	0x20001e14
 8008d3c:	20001e18 	.word	0x20001e18
 8008d40:	20001e60 	.word	0x20001e60

08008d44 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d46:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d48:	4d1a      	ldr	r5, [pc, #104]	; (8008db4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008d4a:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8008d4c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4e:	6828      	ldr	r0, [r5, #0]
{
 8008d50:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d52:	3004      	adds	r0, #4
 8008d54:	f7ff fba3 	bl	800849e <uxListRemove>
 8008d58:	b940      	cbnz	r0, 8008d6c <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d5a:	682a      	ldr	r2, [r5, #0]
 8008d5c:	4916      	ldr	r1, [pc, #88]	; (8008db8 <prvAddCurrentTaskToDelayedList+0x74>)
 8008d5e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008d60:	2201      	movs	r2, #1
 8008d62:	680b      	ldr	r3, [r1, #0]
 8008d64:	4082      	lsls	r2, r0
 8008d66:	ea23 0302 	bic.w	r3, r3, r2
 8008d6a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d6c:	1c73      	adds	r3, r6, #1
 8008d6e:	d107      	bne.n	8008d80 <prvAddCurrentTaskToDelayedList+0x3c>
 8008d70:	b137      	cbz	r7, 8008d80 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d72:	6829      	ldr	r1, [r5, #0]
 8008d74:	4811      	ldr	r0, [pc, #68]	; (8008dbc <prvAddCurrentTaskToDelayedList+0x78>)
 8008d76:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d7c:	f7ff bb6c 	b.w	8008458 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	19a4      	adds	r4, r4, r6
 8008d84:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d86:	d307      	bcc.n	8008d98 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d88:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008d8a:	6818      	ldr	r0, [r3, #0]
 8008d8c:	6829      	ldr	r1, [r5, #0]
}
 8008d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d92:	3104      	adds	r1, #4
 8008d94:	f7ff bb6c 	b.w	8008470 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d98:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <prvAddCurrentTaskToDelayedList+0x80>)
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	6829      	ldr	r1, [r5, #0]
 8008d9e:	3104      	adds	r1, #4
 8008da0:	f7ff fb66 	bl	8008470 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <prvAddCurrentTaskToDelayedList+0x84>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008daa:	bf88      	it	hi
 8008dac:	601c      	strhi	r4, [r3, #0]
}
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db0:	20001e8c 	.word	0x20001e8c
 8008db4:	20001d6c 	.word	0x20001d6c
 8008db8:	20001e18 	.word	0x20001e18
 8008dbc:	20001e64 	.word	0x20001e64
 8008dc0:	20001d74 	.word	0x20001d74
 8008dc4:	20001d70 	.word	0x20001d70
 8008dc8:	20001e44 	.word	0x20001e44

08008dcc <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8008dcc:	b940      	cbnz	r0, 8008de0 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	e7fe      	b.n	8008dde <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008de0:	6942      	ldr	r2, [r0, #20]
 8008de2:	4b06      	ldr	r3, [pc, #24]	; (8008dfc <prvTaskIsTaskSuspended+0x30>)
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d107      	bne.n	8008df8 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008de8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <prvTaskIsTaskSuspended+0x34>)
 8008dec:	4298      	cmp	r0, r3
 8008dee:	d003      	beq.n	8008df8 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008df0:	fab0 f080 	clz	r0, r0
 8008df4:	0940      	lsrs	r0, r0, #5
 8008df6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008df8:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008dfa:	4770      	bx	lr
 8008dfc:	20001e64 	.word	0x20001e64
 8008e00:	20001e4c 	.word	0x20001e4c

08008e04 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e04:	4a06      	ldr	r2, [pc, #24]	; (8008e20 <prvResetNextTaskUnblockTime+0x1c>)
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	6819      	ldr	r1, [r3, #0]
 8008e0a:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <prvResetNextTaskUnblockTime+0x20>)
 8008e0c:	b919      	cbnz	r1, 8008e16 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e0e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e12:	601a      	str	r2, [r3, #0]
}
 8008e14:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008e16:	6812      	ldr	r2, [r2, #0]
 8008e18:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e1a:	68d2      	ldr	r2, [r2, #12]
 8008e1c:	6852      	ldr	r2, [r2, #4]
 8008e1e:	e7f8      	b.n	8008e12 <prvResetNextTaskUnblockTime+0xe>
 8008e20:	20001d70 	.word	0x20001d70
 8008e24:	20001e44 	.word	0x20001e44

08008e28 <prvDeleteTCB>:
	{
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e2c:	304c      	adds	r0, #76	; 0x4c
 8008e2e:	f001 fe21 	bl	800aa74 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e32:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8008e36:	b93b      	cbnz	r3, 8008e48 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008e38:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008e3a:	f001 fac5 	bl	800a3c8 <vPortFree>
				vPortFree( pxTCB );
 8008e3e:	4620      	mov	r0, r4
	}
 8008e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008e44:	f001 bac0 	b.w	800a3c8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d0f8      	beq.n	8008e3e <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d008      	beq.n	8008e62 <prvDeleteTCB+0x3a>
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	e7fe      	b.n	8008e60 <prvDeleteTCB+0x38>
	}
 8008e62:	bd10      	pop	{r4, pc}

08008e64 <prvIdleTask>:
{
 8008e64:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e66:	4c13      	ldr	r4, [pc, #76]	; (8008eb4 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e68:	4f13      	ldr	r7, [pc, #76]	; (8008eb8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008e6a:	4d14      	ldr	r5, [pc, #80]	; (8008ebc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	b973      	cbnz	r3, 8008e8e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e70:	4b13      	ldr	r3, [pc, #76]	; (8008ec0 <prvIdleTask+0x5c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d9f8      	bls.n	8008e6a <prvIdleTask+0x6>
				taskYIELD();
 8008e78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e80:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	e7ed      	b.n	8008e6a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008e8e:	f001 f8d9 	bl	800a044 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e96:	1d30      	adds	r0, r6, #4
 8008e98:	f7ff fb01 	bl	800849e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008ea8:	f001 f8ec 	bl	800a084 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff ffbb 	bl	8008e28 <prvDeleteTCB>
 8008eb2:	e7db      	b.n	8008e6c <prvIdleTask+0x8>
 8008eb4:	20001e08 	.word	0x20001e08
 8008eb8:	20001e78 	.word	0x20001e78
 8008ebc:	20001e04 	.word	0x20001e04
 8008ec0:	20001d78 	.word	0x20001d78

08008ec4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec8:	4607      	mov	r7, r0
 8008eca:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ece:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008ed2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008ed4:	3a01      	subs	r2, #1
 8008ed6:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008eda:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008edc:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ee0:	1e4b      	subs	r3, r1, #1
 8008ee2:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8008ee6:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ee8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008eec:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008ef0:	b108      	cbz	r0, 8008ef6 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ef2:	428b      	cmp	r3, r1
 8008ef4:	d1f8      	bne.n	8008ee8 <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ef6:	9d08      	ldr	r5, [sp, #32]
 8008ef8:	f04f 0a00 	mov.w	sl, #0
 8008efc:	2d06      	cmp	r5, #6
 8008efe:	bf28      	it	cs
 8008f00:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f02:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008f04:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008f08:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f0a:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f0e:	f7ff faa0 	bl	8008452 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f12:	f104 0018 	add.w	r0, r4, #24
 8008f16:	f7ff fa9c 	bl	8008452 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f1a:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1c:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f20:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8008f22:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f26:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f2e:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f32:	f001 fd71 	bl	800aa18 <memset>
 8008f36:	4b0a      	ldr	r3, [pc, #40]	; (8008f60 <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f38:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008f3e:	6523      	str	r3, [r4, #80]	; 0x50
 8008f40:	33d0      	adds	r3, #208	; 0xd0
 8008f42:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f44:	4630      	mov	r0, r6
 8008f46:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f48:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f4a:	f001 f853 	bl	8009ff4 <pxPortInitialiseStack>
 8008f4e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d001      	beq.n	8008f5a <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f56:	f8c8 4000 	str.w	r4, [r8]
}
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	bf00      	nop
 8008f60:	20002fb8 	.word	0x20002fb8

08008f64 <xTaskCreateStatic>:
	{
 8008f64:	b570      	push	{r4, r5, r6, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008f6c:	b945      	cbnz	r5, 8008f80 <xTaskCreateStatic+0x1c>
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	e7fe      	b.n	8008f7e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008f80:	b944      	cbnz	r4, 8008f94 <xTaskCreateStatic+0x30>
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	e7fe      	b.n	8008f92 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f94:	26a0      	movs	r6, #160	; 0xa0
 8008f96:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f98:	9e05      	ldr	r6, [sp, #20]
 8008f9a:	2ea0      	cmp	r6, #160	; 0xa0
 8008f9c:	d008      	beq.n	8008fb0 <xTaskCreateStatic+0x4c>
 8008f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	e7fe      	b.n	8008fae <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fb0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fb2:	2502      	movs	r5, #2
 8008fb4:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fb8:	ad04      	add	r5, sp, #16
 8008fba:	9501      	str	r5, [sp, #4]
 8008fbc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008fbe:	9402      	str	r4, [sp, #8]
 8008fc0:	9500      	str	r5, [sp, #0]
 8008fc2:	f7ff ff7f 	bl	8008ec4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7ff fe3e 	bl	8008c48 <prvAddNewTaskToReadyList>
	}
 8008fcc:	9804      	ldr	r0, [sp, #16]
 8008fce:	b006      	add	sp, #24
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}

08008fd2 <xTaskCreate>:
	{
 8008fd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fda:	0090      	lsls	r0, r2, #2
	{
 8008fdc:	4688      	mov	r8, r1
 8008fde:	4616      	mov	r6, r2
 8008fe0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe2:	f001 f95f 	bl	800a2a4 <pvPortMalloc>
			if( pxStack != NULL )
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	b1e8      	cbz	r0, 8009026 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008fea:	20a0      	movs	r0, #160	; 0xa0
 8008fec:	f001 f95a 	bl	800a2a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	b1a8      	cbz	r0, 8009020 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008ffc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009002:	4632      	mov	r2, r6
 8009004:	4641      	mov	r1, r8
 8009006:	9002      	str	r0, [sp, #8]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	4638      	mov	r0, r7
 800900c:	464b      	mov	r3, r9
 800900e:	f7ff ff59 	bl	8008ec4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009012:	4620      	mov	r0, r4
 8009014:	f7ff fe18 	bl	8008c48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009018:	2001      	movs	r0, #1
	}
 800901a:	b005      	add	sp, #20
 800901c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009020:	4628      	mov	r0, r5
 8009022:	f001 f9d1 	bl	800a3c8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800902a:	e7f6      	b.n	800901a <xTaskCreate+0x48>

0800902c <vTaskResume>:
	{
 800902c:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 800902e:	4604      	mov	r4, r0
 8009030:	b940      	cbnz	r0, 8009044 <vTaskResume+0x18>
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	e7fe      	b.n	8009042 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009044:	4d17      	ldr	r5, [pc, #92]	; (80090a4 <vTaskResume+0x78>)
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	4283      	cmp	r3, r0
 800904a:	d02a      	beq.n	80090a2 <vTaskResume+0x76>
			taskENTER_CRITICAL();
 800904c:	f000 fffa 	bl	800a044 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff febb 	bl	8008dcc <prvTaskIsTaskSuspended>
 8009056:	b300      	cbz	r0, 800909a <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009058:	1d26      	adds	r6, r4, #4
 800905a:	4630      	mov	r0, r6
 800905c:	f7ff fa1f 	bl	800849e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009060:	2301      	movs	r3, #1
 8009062:	4911      	ldr	r1, [pc, #68]	; (80090a8 <vTaskResume+0x7c>)
 8009064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009066:	6808      	ldr	r0, [r1, #0]
 8009068:	4093      	lsls	r3, r2
 800906a:	4303      	orrs	r3, r0
 800906c:	2014      	movs	r0, #20
 800906e:	600b      	str	r3, [r1, #0]
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <vTaskResume+0x80>)
 8009072:	4631      	mov	r1, r6
 8009074:	fb00 3002 	mla	r0, r0, r2, r3
 8009078:	f7ff f9ee 	bl	8008458 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800907c:	682b      	ldr	r3, [r5, #0]
 800907e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	429a      	cmp	r2, r3
 8009084:	d309      	bcc.n	800909a <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 8009086:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	f3bf 8f6f 	isb	sy
	}
 800909a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 800909e:	f000 bff1 	b.w	800a084 <vPortExitCritical>
	}
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	20001d6c 	.word	0x20001d6c
 80090a8:	20001e18 	.word	0x20001e18
 80090ac:	20001d78 	.word	0x20001d78

080090b0 <xTaskResumeFromISR>:
	{
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 80090b2:	4605      	mov	r5, r0
 80090b4:	b940      	cbnz	r0, 80090c8 <xTaskResumeFromISR+0x18>
 80090b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	e7fe      	b.n	80090c6 <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090c8:	f001 f898 	bl	800a1fc <vPortValidateInterruptPriority>
	__asm volatile
 80090cc:	f3ef 8711 	mrs	r7, BASEPRI
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80090e0:	4628      	mov	r0, r5
 80090e2:	f7ff fe73 	bl	8008dcc <prvTaskIsTaskSuspended>
 80090e6:	4604      	mov	r4, r0
 80090e8:	b1e0      	cbz	r0, 8009124 <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <xTaskResumeFromISR+0x8c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	b9eb      	cbnz	r3, 800912c <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090f0:	4b13      	ldr	r3, [pc, #76]	; (8009140 <xTaskResumeFromISR+0x90>)
 80090f2:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80090f4:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090f6:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090fa:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090fc:	429c      	cmp	r4, r3
 80090fe:	bf34      	ite	cc
 8009100:	2400      	movcc	r4, #0
 8009102:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009104:	f7ff f9cb 	bl	800849e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009108:	2301      	movs	r3, #1
 800910a:	490e      	ldr	r1, [pc, #56]	; (8009144 <xTaskResumeFromISR+0x94>)
 800910c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800910e:	6808      	ldr	r0, [r1, #0]
 8009110:	4093      	lsls	r3, r2
 8009112:	4303      	orrs	r3, r0
 8009114:	2014      	movs	r0, #20
 8009116:	600b      	str	r3, [r1, #0]
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <xTaskResumeFromISR+0x98>)
 800911a:	4631      	mov	r1, r6
 800911c:	fb00 3002 	mla	r0, r0, r2, r3
 8009120:	f7ff f99a 	bl	8008458 <vListInsertEnd>
	__asm volatile
 8009124:	f387 8811 	msr	BASEPRI, r7
	}
 8009128:	4620      	mov	r0, r4
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800912c:	4807      	ldr	r0, [pc, #28]	; (800914c <xTaskResumeFromISR+0x9c>)
 800912e:	f105 0118 	add.w	r1, r5, #24
 8009132:	f7ff f991 	bl	8008458 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8009136:	2400      	movs	r4, #0
 8009138:	e7f4      	b.n	8009124 <xTaskResumeFromISR+0x74>
 800913a:	bf00      	nop
 800913c:	20001e10 	.word	0x20001e10
 8009140:	20001d6c 	.word	0x20001d6c
 8009144:	20001e18 	.word	0x20001e18
 8009148:	20001d78 	.word	0x20001d78
 800914c:	20001e4c 	.word	0x20001e4c

08009150 <vTaskStartScheduler>:
{
 8009150:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009152:	2400      	movs	r4, #0
{
 8009154:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009156:	aa07      	add	r2, sp, #28
 8009158:	a906      	add	r1, sp, #24
 800915a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800915c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009160:	f7f9 fad4 	bl	800270c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	9a07      	ldr	r2, [sp, #28]
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	9b06      	ldr	r3, [sp, #24]
 800916c:	4919      	ldr	r1, [pc, #100]	; (80091d4 <vTaskStartScheduler+0x84>)
 800916e:	e9cd 4300 	strd	r4, r3, [sp]
 8009172:	4819      	ldr	r0, [pc, #100]	; (80091d8 <vTaskStartScheduler+0x88>)
 8009174:	4623      	mov	r3, r4
 8009176:	f7ff fef5 	bl	8008f64 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800917a:	b340      	cbz	r0, 80091ce <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800917c:	f000 fd22 	bl	8009bc4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009180:	2801      	cmp	r0, #1
 8009182:	d119      	bne.n	80091b8 <vTaskStartScheduler+0x68>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009194:	4b11      	ldr	r3, [pc, #68]	; (80091dc <vTaskStartScheduler+0x8c>)
 8009196:	4a12      	ldr	r2, [pc, #72]	; (80091e0 <vTaskStartScheduler+0x90>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	334c      	adds	r3, #76	; 0x4c
 800919c:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <vTaskStartScheduler+0x94>)
 80091a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091a6:	4b10      	ldr	r3, [pc, #64]	; (80091e8 <vTaskStartScheduler+0x98>)
 80091a8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80091aa:	4b10      	ldr	r3, [pc, #64]	; (80091ec <vTaskStartScheduler+0x9c>)
 80091ac:	601c      	str	r4, [r3, #0]
}
 80091ae:	b008      	add	sp, #32
 80091b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80091b4:	f000 bfc6 	b.w	800a144 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091b8:	3001      	adds	r0, #1
 80091ba:	d108      	bne.n	80091ce <vTaskStartScheduler+0x7e>
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	e7fe      	b.n	80091cc <vTaskStartScheduler+0x7c>
}
 80091ce:	b008      	add	sp, #32
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	bf00      	nop
 80091d4:	0800bc49 	.word	0x0800bc49
 80091d8:	08008e65 	.word	0x08008e65
 80091dc:	20001d6c 	.word	0x20001d6c
 80091e0:	20000068 	.word	0x20000068
 80091e4:	20001e44 	.word	0x20001e44
 80091e8:	20001e60 	.word	0x20001e60
 80091ec:	20001e8c 	.word	0x20001e8c

080091f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80091f0:	4a02      	ldr	r2, [pc, #8]	; (80091fc <vTaskSuspendAll+0xc>)
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	3301      	adds	r3, #1
 80091f6:	6013      	str	r3, [r2, #0]
}
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	20001e10 	.word	0x20001e10

08009200 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009200:	4b01      	ldr	r3, [pc, #4]	; (8009208 <xTaskGetTickCount+0x8>)
 8009202:	6818      	ldr	r0, [r3, #0]
}
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	20001e8c 	.word	0x20001e8c

0800920c <xTaskIncrementTick>:
{
 800920c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009210:	4b3c      	ldr	r3, [pc, #240]	; (8009304 <xTaskIncrementTick+0xf8>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d16e      	bne.n	80092f6 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009218:	4b3b      	ldr	r3, [pc, #236]	; (8009308 <xTaskIncrementTick+0xfc>)
 800921a:	681d      	ldr	r5, [r3, #0]
 800921c:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800921e:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009220:	b9bd      	cbnz	r5, 8009252 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009222:	4b3a      	ldr	r3, [pc, #232]	; (800930c <xTaskIncrementTick+0x100>)
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	6812      	ldr	r2, [r2, #0]
 8009228:	b142      	cbz	r2, 800923c <xTaskIncrementTick+0x30>
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	e7fe      	b.n	800923a <xTaskIncrementTick+0x2e>
 800923c:	4a34      	ldr	r2, [pc, #208]	; (8009310 <xTaskIncrementTick+0x104>)
 800923e:	6819      	ldr	r1, [r3, #0]
 8009240:	6810      	ldr	r0, [r2, #0]
 8009242:	6018      	str	r0, [r3, #0]
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	4a33      	ldr	r2, [pc, #204]	; (8009314 <xTaskIncrementTick+0x108>)
 8009248:	6813      	ldr	r3, [r2, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	6013      	str	r3, [r2, #0]
 800924e:	f7ff fdd9 	bl	8008e04 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009252:	4e31      	ldr	r6, [pc, #196]	; (8009318 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8009254:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009256:	6833      	ldr	r3, [r6, #0]
 8009258:	4f30      	ldr	r7, [pc, #192]	; (800931c <xTaskIncrementTick+0x110>)
 800925a:	42ab      	cmp	r3, r5
 800925c:	d910      	bls.n	8009280 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800925e:	2214      	movs	r2, #20
 8009260:	4b2f      	ldr	r3, [pc, #188]	; (8009320 <xTaskIncrementTick+0x114>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009266:	4353      	muls	r3, r2
 8009268:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800926a:	2b02      	cmp	r3, #2
 800926c:	bf28      	it	cs
 800926e:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8009270:	4b2c      	ldr	r3, [pc, #176]	; (8009324 <xTaskIncrementTick+0x118>)
 8009272:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8009274:	2b00      	cmp	r3, #0
}
 8009276:	bf0c      	ite	eq
 8009278:	4620      	moveq	r0, r4
 800927a:	2001      	movne	r0, #1
 800927c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009280:	f8df a088 	ldr.w	sl, [pc, #136]	; 800930c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8009284:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8009328 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009288:	f8da 3000 	ldr.w	r3, [sl]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	b91b      	cbnz	r3, 8009298 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009290:	f04f 33ff 	mov.w	r3, #4294967295
 8009294:	6033      	str	r3, [r6, #0]
					break;
 8009296:	e7e2      	b.n	800925e <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009298:	f8da 3000 	ldr.w	r3, [sl]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092a2:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80092a6:	4295      	cmp	r5, r2
 80092a8:	d201      	bcs.n	80092ae <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80092aa:	6032      	str	r2, [r6, #0]
						break;
 80092ac:	e7d7      	b.n	800925e <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092ae:	f10b 0804 	add.w	r8, fp, #4
 80092b2:	4640      	mov	r0, r8
 80092b4:	f7ff f8f3 	bl	800849e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092b8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80092bc:	b11a      	cbz	r2, 80092c6 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092be:	f10b 0018 	add.w	r0, fp, #24
 80092c2:	f7ff f8ec 	bl	800849e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80092cc:	f8d9 3000 	ldr.w	r3, [r9]
 80092d0:	4082      	lsls	r2, r0
 80092d2:	431a      	orrs	r2, r3
 80092d4:	f8c9 2000 	str.w	r2, [r9]
 80092d8:	2214      	movs	r2, #20
 80092da:	4641      	mov	r1, r8
 80092dc:	fb02 7000 	mla	r0, r2, r0, r7
 80092e0:	f7ff f8ba 	bl	8008458 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092e4:	4b0e      	ldr	r3, [pc, #56]	; (8009320 <xTaskIncrementTick+0x114>)
 80092e6:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80092ea:	6819      	ldr	r1, [r3, #0]
 80092ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80092ee:	429a      	cmp	r2, r3
 80092f0:	bf28      	it	cs
 80092f2:	2401      	movcs	r4, #1
 80092f4:	e7c8      	b.n	8009288 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 80092f6:	4a0d      	ldr	r2, [pc, #52]	; (800932c <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 80092f8:	2400      	movs	r4, #0
		++uxPendedTicks;
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	e7b6      	b.n	8009270 <xTaskIncrementTick+0x64>
 8009302:	bf00      	nop
 8009304:	20001e10 	.word	0x20001e10
 8009308:	20001e8c 	.word	0x20001e8c
 800930c:	20001d70 	.word	0x20001d70
 8009310:	20001d74 	.word	0x20001d74
 8009314:	20001e48 	.word	0x20001e48
 8009318:	20001e44 	.word	0x20001e44
 800931c:	20001d78 	.word	0x20001d78
 8009320:	20001d6c 	.word	0x20001d6c
 8009324:	20001e90 	.word	0x20001e90
 8009328:	20001e18 	.word	0x20001e18
 800932c:	20001e0c 	.word	0x20001e0c

08009330 <xTaskResumeAll>:
{
 8009330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8009334:	4c31      	ldr	r4, [pc, #196]	; (80093fc <xTaskResumeAll+0xcc>)
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	b943      	cbnz	r3, 800934c <xTaskResumeAll+0x1c>
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	e7fe      	b.n	800934a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800934c:	f000 fe7a 	bl	800a044 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	3b01      	subs	r3, #1
 8009354:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009356:	6824      	ldr	r4, [r4, #0]
 8009358:	b12c      	cbz	r4, 8009366 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800935a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800935c:	f000 fe92 	bl	800a084 <vPortExitCritical>
}
 8009360:	4620      	mov	r0, r4
 8009362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009366:	4b26      	ldr	r3, [pc, #152]	; (8009400 <xTaskResumeAll+0xd0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0f5      	beq.n	800935a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800936e:	4d25      	ldr	r5, [pc, #148]	; (8009404 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009370:	4e25      	ldr	r6, [pc, #148]	; (8009408 <xTaskResumeAll+0xd8>)
 8009372:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800940c <xTaskResumeAll+0xdc>
 8009376:	e01f      	b.n	80093b8 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009378:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800937a:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800937c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800937e:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009382:	f104 0018 	add.w	r0, r4, #24
 8009386:	f7ff f88a 	bl	800849e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938a:	4648      	mov	r0, r9
 800938c:	f7ff f887 	bl	800849e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009390:	2014      	movs	r0, #20
 8009392:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009394:	6831      	ldr	r1, [r6, #0]
 8009396:	fa07 f302 	lsl.w	r3, r7, r2
 800939a:	430b      	orrs	r3, r1
 800939c:	fb00 8002 	mla	r0, r0, r2, r8
 80093a0:	4649      	mov	r1, r9
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f7ff f858 	bl	8008458 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093a8:	4b19      	ldr	r3, [pc, #100]	; (8009410 <xTaskResumeAll+0xe0>)
 80093aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d301      	bcc.n	80093b8 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80093b4:	4b17      	ldr	r3, [pc, #92]	; (8009414 <xTaskResumeAll+0xe4>)
 80093b6:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1dc      	bne.n	8009378 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80093be:	b10c      	cbz	r4, 80093c4 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80093c0:	f7ff fd20 	bl	8008e04 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093c4:	4d14      	ldr	r5, [pc, #80]	; (8009418 <xTaskResumeAll+0xe8>)
 80093c6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093c8:	b144      	cbz	r4, 80093dc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80093ca:	2701      	movs	r7, #1
 80093cc:	4e11      	ldr	r6, [pc, #68]	; (8009414 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 80093ce:	f7ff ff1d 	bl	800920c <xTaskIncrementTick>
 80093d2:	b100      	cbz	r0, 80093d6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80093d4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093d6:	3c01      	subs	r4, #1
 80093d8:	d1f9      	bne.n	80093ce <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80093da:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80093dc:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <xTaskResumeAll+0xe4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ba      	beq.n	800935a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80093e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80093e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80093f0:	f3bf 8f4f 	dsb	sy
 80093f4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80093f8:	2401      	movs	r4, #1
 80093fa:	e7af      	b.n	800935c <xTaskResumeAll+0x2c>
 80093fc:	20001e10 	.word	0x20001e10
 8009400:	20001e04 	.word	0x20001e04
 8009404:	20001e4c 	.word	0x20001e4c
 8009408:	20001e18 	.word	0x20001e18
 800940c:	20001d78 	.word	0x20001d78
 8009410:	20001d6c 	.word	0x20001d6c
 8009414:	20001e90 	.word	0x20001e90
 8009418:	20001e0c 	.word	0x20001e0c

0800941c <vTaskDelayUntil>:
	{
 800941c:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 800941e:	b940      	cbnz	r0, 8009432 <vTaskDelayUntil+0x16>
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	e7fe      	b.n	8009430 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009432:	b941      	cbnz	r1, 8009446 <vTaskDelayUntil+0x2a>
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	e7fe      	b.n	8009444 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <vTaskDelayUntil+0x8c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	b143      	cbz	r3, 800945e <vTaskDelayUntil+0x42>
 800944c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009450:	f383 8811 	msr	BASEPRI, r3
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	e7fe      	b.n	800945c <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 800945e:	f7ff fec7 	bl	80091f0 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009462:	4b12      	ldr	r3, [pc, #72]	; (80094ac <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009464:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8009466:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009468:	1863      	adds	r3, r4, r1
 800946a:	bf2c      	ite	cs
 800946c:	2101      	movcs	r1, #1
 800946e:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8009470:	4294      	cmp	r4, r2
 8009472:	d90f      	bls.n	8009494 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009474:	b979      	cbnz	r1, 8009496 <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8009476:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8009478:	f7ff ff5a 	bl	8009330 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800947c:	b948      	cbnz	r0, 8009492 <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 800947e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009486:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	f3bf 8f6f 	isb	sy
	}
 8009492:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009494:	b909      	cbnz	r1, 800949a <vTaskDelayUntil+0x7e>
 8009496:	429a      	cmp	r2, r3
 8009498:	d2ed      	bcs.n	8009476 <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 800949a:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800949c:	2100      	movs	r1, #0
 800949e:	1a98      	subs	r0, r3, r2
 80094a0:	f7ff fc50 	bl	8008d44 <prvAddCurrentTaskToDelayedList>
 80094a4:	e7e8      	b.n	8009478 <vTaskDelayUntil+0x5c>
 80094a6:	bf00      	nop
 80094a8:	20001e10 	.word	0x20001e10
 80094ac:	20001e8c 	.word	0x20001e8c

080094b0 <vTaskDelay>:
	{
 80094b0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094b2:	b950      	cbnz	r0, 80094ca <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80094b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
	}
 80094c8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80094ca:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <vTaskDelay+0x44>)
 80094cc:	6819      	ldr	r1, [r3, #0]
 80094ce:	b141      	cbz	r1, 80094e2 <vTaskDelay+0x32>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	e7fe      	b.n	80094e0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80094e2:	f7ff fe85 	bl	80091f0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094e6:	f7ff fc2d 	bl	8008d44 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80094ea:	f7ff ff21 	bl	8009330 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d0e0      	beq.n	80094b4 <vTaskDelay+0x4>
 80094f2:	e7e9      	b.n	80094c8 <vTaskDelay+0x18>
 80094f4:	20001e10 	.word	0x20001e10

080094f8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094f8:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <vTaskSwitchContext+0x6c>)
{
 80094fa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <vTaskSwitchContext+0x70>)
 8009500:	b112      	cbz	r2, 8009508 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009502:	2201      	movs	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
}
 8009506:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8009508:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800950a:	4b18      	ldr	r3, [pc, #96]	; (800956c <vTaskSwitchContext+0x74>)
 800950c:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800950e:	fab2 f282 	clz	r2, r2
 8009512:	2314      	movs	r3, #20
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	f1c2 021f 	rsb	r2, r2, #31
 800951a:	4353      	muls	r3, r2
 800951c:	4914      	ldr	r1, [pc, #80]	; (8009570 <vTaskSwitchContext+0x78>)
 800951e:	58cc      	ldr	r4, [r1, r3]
 8009520:	18c8      	adds	r0, r1, r3
 8009522:	b944      	cbnz	r4, 8009536 <vTaskSwitchContext+0x3e>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	f383 8811 	msr	BASEPRI, r3
 800952c:	f3bf 8f6f 	isb	sy
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	e7fe      	b.n	8009534 <vTaskSwitchContext+0x3c>
 8009536:	6844      	ldr	r4, [r0, #4]
 8009538:	3308      	adds	r3, #8
 800953a:	6864      	ldr	r4, [r4, #4]
 800953c:	440b      	add	r3, r1
 800953e:	429c      	cmp	r4, r3
 8009540:	bf08      	it	eq
 8009542:	6863      	ldreq	r3, [r4, #4]
 8009544:	6044      	str	r4, [r0, #4]
 8009546:	bf08      	it	eq
 8009548:	6043      	streq	r3, [r0, #4]
 800954a:	2314      	movs	r3, #20
 800954c:	fb03 1102 	mla	r1, r3, r2, r1
 8009550:	684b      	ldr	r3, [r1, #4]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	4b07      	ldr	r3, [pc, #28]	; (8009574 <vTaskSwitchContext+0x7c>)
 8009556:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a07      	ldr	r2, [pc, #28]	; (8009578 <vTaskSwitchContext+0x80>)
 800955c:	334c      	adds	r3, #76	; 0x4c
 800955e:	6013      	str	r3, [r2, #0]
}
 8009560:	e7d1      	b.n	8009506 <vTaskSwitchContext+0xe>
 8009562:	bf00      	nop
 8009564:	20001e10 	.word	0x20001e10
 8009568:	20001e90 	.word	0x20001e90
 800956c:	20001e18 	.word	0x20001e18
 8009570:	20001d78 	.word	0x20001d78
 8009574:	20001d6c 	.word	0x20001d6c
 8009578:	20000068 	.word	0x20000068

0800957c <vTaskSuspend>:
	{
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4604      	mov	r4, r0
 8009580:	4d2d      	ldr	r5, [pc, #180]	; (8009638 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8009582:	f000 fd5f 	bl	800a044 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009586:	b904      	cbnz	r4, 800958a <vTaskSuspend+0xe>
 8009588:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800958a:	1d26      	adds	r6, r4, #4
 800958c:	4630      	mov	r0, r6
 800958e:	f7fe ff86 	bl	800849e <uxListRemove>
 8009592:	b960      	cbnz	r0, 80095ae <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009594:	2314      	movs	r3, #20
 8009596:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009598:	4a28      	ldr	r2, [pc, #160]	; (800963c <vTaskSuspend+0xc0>)
 800959a:	4343      	muls	r3, r0
 800959c:	58d3      	ldr	r3, [r2, r3]
 800959e:	b933      	cbnz	r3, 80095ae <vTaskSuspend+0x32>
 80095a0:	2201      	movs	r2, #1
 80095a2:	4927      	ldr	r1, [pc, #156]	; (8009640 <vTaskSuspend+0xc4>)
 80095a4:	4082      	lsls	r2, r0
 80095a6:	680b      	ldr	r3, [r1, #0]
 80095a8:	ea23 0302 	bic.w	r3, r3, r2
 80095ac:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80095b0:	b11b      	cbz	r3, 80095ba <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095b2:	f104 0018 	add.w	r0, r4, #24
 80095b6:	f7fe ff72 	bl	800849e <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80095ba:	4631      	mov	r1, r6
 80095bc:	4821      	ldr	r0, [pc, #132]	; (8009644 <vTaskSuspend+0xc8>)
 80095be:	f7fe ff4b 	bl	8008458 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80095c2:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 80095c6:	4e20      	ldr	r6, [pc, #128]	; (8009648 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80095c8:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095ca:	bf04      	itt	eq
 80095cc:	2300      	moveq	r3, #0
 80095ce:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 80095d2:	f000 fd57 	bl	800a084 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80095d6:	6833      	ldr	r3, [r6, #0]
 80095d8:	b12b      	cbz	r3, 80095e6 <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 80095da:	f000 fd33 	bl	800a044 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80095de:	f7ff fc11 	bl	8008e04 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80095e2:	f000 fd4f 	bl	800a084 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 80095e6:	682b      	ldr	r3, [r5, #0]
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	d117      	bne.n	800961c <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 80095ec:	6833      	ldr	r3, [r6, #0]
 80095ee:	b1b3      	cbz	r3, 800961e <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 80095f0:	4b16      	ldr	r3, [pc, #88]	; (800964c <vTaskSuspend+0xd0>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	b143      	cbz	r3, 8009608 <vTaskSuspend+0x8c>
 80095f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fa:	f383 8811 	msr	BASEPRI, r3
 80095fe:	f3bf 8f6f 	isb	sy
 8009602:	f3bf 8f4f 	dsb	sy
 8009606:	e7fe      	b.n	8009606 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8009608:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800960c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009610:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	f3bf 8f6f 	isb	sy
	}
 800961c:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800961e:	4a09      	ldr	r2, [pc, #36]	; (8009644 <vTaskSuspend+0xc8>)
 8009620:	6811      	ldr	r1, [r2, #0]
 8009622:	4a0b      	ldr	r2, [pc, #44]	; (8009650 <vTaskSuspend+0xd4>)
 8009624:	6812      	ldr	r2, [r2, #0]
 8009626:	4291      	cmp	r1, r2
 8009628:	d101      	bne.n	800962e <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 800962a:	602b      	str	r3, [r5, #0]
 800962c:	e7f6      	b.n	800961c <vTaskSuspend+0xa0>
	}
 800962e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8009632:	f7ff bf61 	b.w	80094f8 <vTaskSwitchContext>
 8009636:	bf00      	nop
 8009638:	20001d6c 	.word	0x20001d6c
 800963c:	20001d78 	.word	0x20001d78
 8009640:	20001e18 	.word	0x20001e18
 8009644:	20001e64 	.word	0x20001e64
 8009648:	20001e60 	.word	0x20001e60
 800964c:	20001e10 	.word	0x20001e10
 8009650:	20001e04 	.word	0x20001e04

08009654 <vTaskPlaceOnEventList>:
{
 8009654:	b510      	push	{r4, lr}
 8009656:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009658:	b940      	cbnz	r0, 800966c <vTaskPlaceOnEventList+0x18>
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	e7fe      	b.n	800966a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <vTaskPlaceOnEventList+0x30>)
 800966e:	6819      	ldr	r1, [r3, #0]
 8009670:	3118      	adds	r1, #24
 8009672:	f7fe fefd 	bl	8008470 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009676:	4620      	mov	r0, r4
}
 8009678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800967c:	2101      	movs	r1, #1
 800967e:	f7ff bb61 	b.w	8008d44 <prvAddCurrentTaskToDelayedList>
 8009682:	bf00      	nop
 8009684:	20001d6c 	.word	0x20001d6c

08009688 <vTaskPlaceOnEventListRestricted>:
	{
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	460d      	mov	r5, r1
 800968c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800968e:	b940      	cbnz	r0, 80096a2 <vTaskPlaceOnEventListRestricted+0x1a>
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	e7fe      	b.n	80096a0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a2:	4b08      	ldr	r3, [pc, #32]	; (80096c4 <vTaskPlaceOnEventListRestricted+0x3c>)
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	3118      	adds	r1, #24
 80096a8:	f7fe fed6 	bl	8008458 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80096ac:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ae:	4621      	mov	r1, r4
 80096b0:	bf08      	it	eq
 80096b2:	4628      	moveq	r0, r5
	}
 80096b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096b8:	bf18      	it	ne
 80096ba:	f04f 30ff 	movne.w	r0, #4294967295
 80096be:	f7ff bb41 	b.w	8008d44 <prvAddCurrentTaskToDelayedList>
 80096c2:	bf00      	nop
 80096c4:	20001d6c 	.word	0x20001d6c

080096c8 <xTaskRemoveFromEventList>:
{
 80096c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80096ca:	68c3      	ldr	r3, [r0, #12]
 80096cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80096ce:	b944      	cbnz	r4, 80096e2 <xTaskRemoveFromEventList+0x1a>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	e7fe      	b.n	80096e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096e2:	f104 0518 	add.w	r5, r4, #24
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7fe fed9 	bl	800849e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ec:	4b11      	ldr	r3, [pc, #68]	; (8009734 <xTaskRemoveFromEventList+0x6c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	b9e3      	cbnz	r3, 800972c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096f2:	1d25      	adds	r5, r4, #4
 80096f4:	4628      	mov	r0, r5
 80096f6:	f7fe fed2 	bl	800849e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096fa:	2301      	movs	r3, #1
 80096fc:	490e      	ldr	r1, [pc, #56]	; (8009738 <xTaskRemoveFromEventList+0x70>)
 80096fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	4093      	lsls	r3, r2
 8009704:	4303      	orrs	r3, r0
 8009706:	2014      	movs	r0, #20
 8009708:	600b      	str	r3, [r1, #0]
 800970a:	4629      	mov	r1, r5
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <xTaskRemoveFromEventList+0x74>)
 800970e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009712:	f7fe fea1 	bl	8008458 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009716:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <xTaskRemoveFromEventList+0x78>)
 8009718:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009720:	bf85      	ittet	hi
 8009722:	2001      	movhi	r0, #1
 8009724:	4b07      	ldrhi	r3, [pc, #28]	; (8009744 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8009726:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8009728:	6018      	strhi	r0, [r3, #0]
}
 800972a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800972c:	4629      	mov	r1, r5
 800972e:	4806      	ldr	r0, [pc, #24]	; (8009748 <xTaskRemoveFromEventList+0x80>)
 8009730:	e7ef      	b.n	8009712 <xTaskRemoveFromEventList+0x4a>
 8009732:	bf00      	nop
 8009734:	20001e10 	.word	0x20001e10
 8009738:	20001e18 	.word	0x20001e18
 800973c:	20001d78 	.word	0x20001d78
 8009740:	20001d6c 	.word	0x20001d6c
 8009744:	20001e90 	.word	0x20001e90
 8009748:	20001e4c 	.word	0x20001e4c

0800974c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800974c:	4b03      	ldr	r3, [pc, #12]	; (800975c <vTaskInternalSetTimeOutState+0x10>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009752:	4b03      	ldr	r3, [pc, #12]	; (8009760 <vTaskInternalSetTimeOutState+0x14>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6043      	str	r3, [r0, #4]
}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	20001e48 	.word	0x20001e48
 8009760:	20001e8c 	.word	0x20001e8c

08009764 <xTaskCheckForTimeOut>:
{
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009768:	4605      	mov	r5, r0
 800976a:	b940      	cbnz	r0, 800977e <xTaskCheckForTimeOut+0x1a>
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	e7fe      	b.n	800977c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800977e:	b941      	cbnz	r1, 8009792 <xTaskCheckForTimeOut+0x2e>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	e7fe      	b.n	8009790 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009792:	f000 fc57 	bl	800a044 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009796:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <xTaskCheckForTimeOut+0x70>)
 8009798:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800979a:	6823      	ldr	r3, [r4, #0]
 800979c:	1c5a      	adds	r2, r3, #1
 800979e:	d010      	beq.n	80097c2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097a0:	480d      	ldr	r0, [pc, #52]	; (80097d8 <xTaskCheckForTimeOut+0x74>)
 80097a2:	682e      	ldr	r6, [r5, #0]
 80097a4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097a6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80097a8:	4286      	cmp	r6, r0
 80097aa:	d001      	beq.n	80097b0 <xTaskCheckForTimeOut+0x4c>
 80097ac:	428a      	cmp	r2, r1
 80097ae:	d90f      	bls.n	80097d0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097b0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80097b2:	4283      	cmp	r3, r0
 80097b4:	d90a      	bls.n	80097cc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80097b6:	1a5b      	subs	r3, r3, r1
 80097b8:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097ba:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80097bc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80097be:	f7ff ffc5 	bl	800974c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80097c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80097c4:	f000 fc5e 	bl	800a084 <vPortExitCritical>
}
 80097c8:	4620      	mov	r0, r4
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80097d0:	2401      	movs	r4, #1
 80097d2:	e7f7      	b.n	80097c4 <xTaskCheckForTimeOut+0x60>
 80097d4:	20001e8c 	.word	0x20001e8c
 80097d8:	20001e48 	.word	0x20001e48

080097dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80097dc:	2201      	movs	r2, #1
 80097de:	4b01      	ldr	r3, [pc, #4]	; (80097e4 <vTaskMissedYield+0x8>)
 80097e0:	601a      	str	r2, [r3, #0]
}
 80097e2:	4770      	bx	lr
 80097e4:	20001e90 	.word	0x20001e90

080097e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80097e8:	4b05      	ldr	r3, [pc, #20]	; (8009800 <xTaskGetSchedulerState+0x18>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	b133      	cbz	r3, 80097fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ee:	4b05      	ldr	r3, [pc, #20]	; (8009804 <xTaskGetSchedulerState+0x1c>)
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	fab0 f080 	clz	r0, r0
 80097f6:	0940      	lsrs	r0, r0, #5
 80097f8:	0040      	lsls	r0, r0, #1
 80097fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097fc:	2001      	movs	r0, #1
	}
 80097fe:	4770      	bx	lr
 8009800:	20001e60 	.word	0x20001e60
 8009804:	20001e10 	.word	0x20001e10

08009808 <xTaskPriorityDisinherit>:
	{
 8009808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800980a:	4604      	mov	r4, r0
 800980c:	b908      	cbnz	r0, 8009812 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800980e:	2000      	movs	r0, #0
	}
 8009810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009812:	4b22      	ldr	r3, [pc, #136]	; (800989c <xTaskPriorityDisinherit+0x94>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4283      	cmp	r3, r0
 8009818:	d008      	beq.n	800982c <xTaskPriorityDisinherit+0x24>
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	e7fe      	b.n	800982a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800982c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800982e:	b943      	cbnz	r3, 8009842 <xTaskPriorityDisinherit+0x3a>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	e7fe      	b.n	8009840 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009842:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009844:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8009846:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009848:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800984a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800984c:	d0df      	beq.n	800980e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1dd      	bne.n	800980e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009852:	1d06      	adds	r6, r0, #4
 8009854:	4630      	mov	r0, r6
 8009856:	f7fe fe22 	bl	800849e <uxListRemove>
 800985a:	4f11      	ldr	r7, [pc, #68]	; (80098a0 <xTaskPriorityDisinherit+0x98>)
 800985c:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <xTaskPriorityDisinherit+0x9c>)
 800985e:	b950      	cbnz	r0, 8009876 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009860:	2314      	movs	r3, #20
 8009862:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009864:	434b      	muls	r3, r1
 8009866:	58fb      	ldr	r3, [r7, r3]
 8009868:	b92b      	cbnz	r3, 8009876 <xTaskPriorityDisinherit+0x6e>
 800986a:	2501      	movs	r5, #1
 800986c:	6813      	ldr	r3, [r2, #0]
 800986e:	408d      	lsls	r5, r1
 8009870:	ea23 0305 	bic.w	r3, r3, r5
 8009874:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009876:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8009878:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987a:	f1c3 0107 	rsb	r1, r3, #7
 800987e:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009880:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8009882:	2401      	movs	r4, #1
 8009884:	6811      	ldr	r1, [r2, #0]
 8009886:	fa04 f503 	lsl.w	r5, r4, r3
 800988a:	fb00 7003 	mla	r0, r0, r3, r7
 800988e:	430d      	orrs	r5, r1
 8009890:	4631      	mov	r1, r6
 8009892:	6015      	str	r5, [r2, #0]
 8009894:	f7fe fde0 	bl	8008458 <vListInsertEnd>
					xReturn = pdTRUE;
 8009898:	4620      	mov	r0, r4
		return xReturn;
 800989a:	e7b9      	b.n	8009810 <xTaskPriorityDisinherit+0x8>
 800989c:	20001d6c 	.word	0x20001d6c
 80098a0:	20001d78 	.word	0x20001d78
 80098a4:	20001e18 	.word	0x20001e18

080098a8 <xTaskNotifyWait>:
	{
 80098a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098ac:	4c22      	ldr	r4, [pc, #136]	; (8009938 <xTaskNotifyWait+0x90>)
	{
 80098ae:	461e      	mov	r6, r3
 80098b0:	4680      	mov	r8, r0
 80098b2:	460f      	mov	r7, r1
 80098b4:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 80098b6:	f000 fbc5 	bl	800a044 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d018      	beq.n	80098f6 <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80098c4:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80098c6:	6822      	ldr	r2, [r4, #0]
 80098c8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80098cc:	ea23 0308 	bic.w	r3, r3, r8
 80098d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 80098da:	b166      	cbz	r6, 80098f6 <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff fa31 	bl	8008d44 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80098e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80098e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80098f6:	f000 fbc5 	bl	800a084 <vPortExitCritical>
		taskENTER_CRITICAL();
 80098fa:	f000 fba3 	bl	800a044 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80098fe:	b11d      	cbz	r5, 8009908 <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009906:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800990e:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009910:	bf03      	ittte	eq
 8009912:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 8009914:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009916:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 800991a:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800991c:	bf04      	itt	eq
 800991e:	43bb      	biceq	r3, r7
 8009920:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009924:	2200      	movs	r2, #0
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800992c:	f000 fbaa 	bl	800a084 <vPortExitCritical>
	}
 8009930:	4628      	mov	r0, r5
 8009932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009936:	bf00      	nop
 8009938:	20001d6c 	.word	0x20001d6c

0800993c <xTaskGenericNotify>:
	{
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	460f      	mov	r7, r1
 8009940:	4616      	mov	r6, r2
 8009942:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8009944:	4604      	mov	r4, r0
 8009946:	b940      	cbnz	r0, 800995a <xTaskGenericNotify+0x1e>
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	e7fe      	b.n	8009958 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800995a:	f000 fb73 	bl	800a044 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800995e:	b115      	cbz	r5, 8009966 <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009960:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009964:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009966:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009968:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 800996c:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800996e:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009970:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8009974:	2a03      	cmp	r2, #3
 8009976:	d808      	bhi.n	800998a <xTaskGenericNotify+0x4e>
 8009978:	e8df f002 	tbb	[pc, r2]
 800997c:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 8009980:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009984:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 8009986:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800998a:	2d01      	cmp	r5, #1
 800998c:	d00d      	beq.n	80099aa <xTaskGenericNotify+0x6e>
	{
 800998e:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8009990:	f000 fb78 	bl	800a084 <vPortExitCritical>
	}
 8009994:	4628      	mov	r0, r5
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 8009998:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800999c:	3301      	adds	r3, #1
 800999e:	e7f2      	b.n	8009986 <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80099a0:	2d02      	cmp	r5, #2
 80099a2:	d030      	beq.n	8009a06 <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 80099a4:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 80099a8:	e7ef      	b.n	800998a <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099aa:	1d26      	adds	r6, r4, #4
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7fe fd76 	bl	800849e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80099b2:	4916      	ldr	r1, [pc, #88]	; (8009a0c <xTaskGenericNotify+0xd0>)
 80099b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80099b6:	6808      	ldr	r0, [r1, #0]
 80099b8:	fa05 f302 	lsl.w	r3, r5, r2
 80099bc:	4303      	orrs	r3, r0
 80099be:	2014      	movs	r0, #20
 80099c0:	600b      	str	r3, [r1, #0]
 80099c2:	4b13      	ldr	r3, [pc, #76]	; (8009a10 <xTaskGenericNotify+0xd4>)
 80099c4:	4631      	mov	r1, r6
 80099c6:	fb00 3002 	mla	r0, r0, r2, r3
 80099ca:	f7fe fd45 	bl	8008458 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80099ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099d0:	b143      	cbz	r3, 80099e4 <xTaskGenericNotify+0xa8>
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	e7fe      	b.n	80099e2 <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099e4:	4b0b      	ldr	r3, [pc, #44]	; (8009a14 <xTaskGenericNotify+0xd8>)
 80099e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d9ce      	bls.n	800998e <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 80099f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80099f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	e7c4      	b.n	8009990 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 8009a06:	2500      	movs	r5, #0
 8009a08:	e7c2      	b.n	8009990 <xTaskGenericNotify+0x54>
 8009a0a:	bf00      	nop
 8009a0c:	20001e18 	.word	0x20001e18
 8009a10:	20001d78 	.word	0x20001d78
 8009a14:	20001d6c 	.word	0x20001d6c

08009a18 <xTaskGenericNotifyFromISR>:
	{
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	9f08      	ldr	r7, [sp, #32]
 8009a1e:	4689      	mov	r9, r1
 8009a20:	4690      	mov	r8, r2
 8009a22:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8009a24:	4604      	mov	r4, r0
 8009a26:	b940      	cbnz	r0, 8009a3a <xTaskGenericNotifyFromISR+0x22>
 8009a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	e7fe      	b.n	8009a38 <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a3a:	f000 fbdf 	bl	800a1fc <vPortValidateInterruptPriority>
	__asm volatile
 8009a3e:	f3ef 8611 	mrs	r6, BASEPRI
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009a52:	b115      	cbz	r5, 8009a5a <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009a54:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009a58:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009a5a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009a5c:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009a60:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009a64:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009a66:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8009a6a:	2a03      	cmp	r2, #3
 8009a6c:	d809      	bhi.n	8009a82 <xTaskGenericNotifyFromISR+0x6a>
 8009a6e:	e8df f002 	tbb	[pc, r2]
 8009a72:	0f02      	.short	0x0f02
 8009a74:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 8009a76:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009a7a:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 8009a7e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009a82:	2d01      	cmp	r5, #1
 8009a84:	d00d      	beq.n	8009aa2 <xTaskGenericNotifyFromISR+0x8a>
	{
 8009a86:	2001      	movs	r0, #1
	__asm volatile
 8009a88:	f386 8811 	msr	BASEPRI, r6
	}
 8009a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8009a90:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009a94:	3301      	adds	r3, #1
 8009a96:	e7f2      	b.n	8009a7e <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009a98:	2d02      	cmp	r5, #2
 8009a9a:	d033      	beq.n	8009b04 <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 8009a9c:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8009aa0:	e7ef      	b.n	8009a82 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009aa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009aa4:	b143      	cbz	r3, 8009ab8 <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 8009aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aaa:	f383 8811 	msr	BASEPRI, r3
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f3bf 8f4f 	dsb	sy
 8009ab6:	e7fe      	b.n	8009ab6 <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ab8:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <xTaskGenericNotifyFromISR+0xf0>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	b9db      	cbnz	r3, 8009af6 <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009abe:	f104 0804 	add.w	r8, r4, #4
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	f7fe fceb 	bl	800849e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ac8:	4a10      	ldr	r2, [pc, #64]	; (8009b0c <xTaskGenericNotifyFromISR+0xf4>)
 8009aca:	2014      	movs	r0, #20
 8009acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ace:	6811      	ldr	r1, [r2, #0]
 8009ad0:	409d      	lsls	r5, r3
 8009ad2:	430d      	orrs	r5, r1
 8009ad4:	4641      	mov	r1, r8
 8009ad6:	6015      	str	r5, [r2, #0]
 8009ad8:	4a0d      	ldr	r2, [pc, #52]	; (8009b10 <xTaskGenericNotifyFromISR+0xf8>)
 8009ada:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009ade:	f7fe fcbb 	bl	8008458 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ae2:	4b0c      	ldr	r3, [pc, #48]	; (8009b14 <xTaskGenericNotifyFromISR+0xfc>)
 8009ae4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d9cb      	bls.n	8009a86 <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 8009aee:	2001      	movs	r0, #1
 8009af0:	b12f      	cbz	r7, 8009afe <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009af2:	6038      	str	r0, [r7, #0]
 8009af4:	e7c8      	b.n	8009a88 <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009af6:	4808      	ldr	r0, [pc, #32]	; (8009b18 <xTaskGenericNotifyFromISR+0x100>)
 8009af8:	f104 0118 	add.w	r1, r4, #24
 8009afc:	e7ef      	b.n	8009ade <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 8009afe:	4b07      	ldr	r3, [pc, #28]	; (8009b1c <xTaskGenericNotifyFromISR+0x104>)
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	e7c1      	b.n	8009a88 <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 8009b04:	2000      	movs	r0, #0
 8009b06:	e7bf      	b.n	8009a88 <xTaskGenericNotifyFromISR+0x70>
 8009b08:	20001e10 	.word	0x20001e10
 8009b0c:	20001e18 	.word	0x20001e18
 8009b10:	20001d78 	.word	0x20001d78
 8009b14:	20001d6c 	.word	0x20001d6c
 8009b18:	20001e4c 	.word	0x20001e4c
 8009b1c:	20001e90 	.word	0x20001e90

08009b20 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009b22:	4c11      	ldr	r4, [pc, #68]	; (8009b68 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009b24:	f000 fa8e 	bl	800a044 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009b28:	6825      	ldr	r5, [r4, #0]
 8009b2a:	b9bd      	cbnz	r5, 8009b5c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b2c:	4f0f      	ldr	r7, [pc, #60]	; (8009b6c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009b2e:	4e10      	ldr	r6, [pc, #64]	; (8009b70 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7fe fc83 	bl	800843c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b36:	4630      	mov	r0, r6
 8009b38:	f7fe fc80 	bl	800843c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b3e:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8009b40:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b42:	4b0d      	ldr	r3, [pc, #52]	; (8009b78 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b44:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009b46:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b48:	4a0c      	ldr	r2, [pc, #48]	; (8009b7c <prvCheckForValidListAndQueue+0x5c>)
 8009b4a:	4b0d      	ldr	r3, [pc, #52]	; (8009b80 <prvCheckForValidListAndQueue+0x60>)
 8009b4c:	9500      	str	r5, [sp, #0]
 8009b4e:	f7fe fd81 	bl	8008654 <xQueueGenericCreateStatic>
 8009b52:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b54:	b110      	cbz	r0, 8009b5c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b56:	490b      	ldr	r1, [pc, #44]	; (8009b84 <prvCheckForValidListAndQueue+0x64>)
 8009b58:	f7ff f840 	bl	8008bdc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009b5c:	b003      	add	sp, #12
 8009b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009b62:	f000 ba8f 	b.w	800a084 <vPortExitCritical>
 8009b66:	bf00      	nop
 8009b68:	20001f88 	.word	0x20001f88
 8009b6c:	20001f14 	.word	0x20001f14
 8009b70:	20001f28 	.word	0x20001f28
 8009b74:	20001e94 	.word	0x20001e94
 8009b78:	20001e98 	.word	0x20001e98
 8009b7c:	20001e9c 	.word	0x20001e9c
 8009b80:	20001f40 	.word	0x20001f40
 8009b84:	0800bc4e 	.word	0x0800bc4e

08009b88 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009b88:	4291      	cmp	r1, r2
{
 8009b8a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b8c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b8e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009b90:	d80a      	bhi.n	8009ba8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	1ad2      	subs	r2, r2, r3
 8009b94:	6983      	ldr	r3, [r0, #24]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d20d      	bcs.n	8009bb6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b9a:	4b08      	ldr	r3, [pc, #32]	; (8009bbc <prvInsertTimerInActiveList+0x34>)
 8009b9c:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	f7fe fc66 	bl	8008470 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009ba4:	2000      	movs	r0, #0
}
 8009ba6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d201      	bcs.n	8009bb0 <prvInsertTimerInActiveList+0x28>
 8009bac:	4299      	cmp	r1, r3
 8009bae:	d202      	bcs.n	8009bb6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bb0:	4b03      	ldr	r3, [pc, #12]	; (8009bc0 <prvInsertTimerInActiveList+0x38>)
 8009bb2:	1d01      	adds	r1, r0, #4
 8009bb4:	e7f3      	b.n	8009b9e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009bb6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009bb8:	e7f5      	b.n	8009ba6 <prvInsertTimerInActiveList+0x1e>
 8009bba:	bf00      	nop
 8009bbc:	20001e98 	.word	0x20001e98
 8009bc0:	20001e94 	.word	0x20001e94

08009bc4 <xTimerCreateTimerTask>:
{
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009bc8:	f7ff ffaa 	bl	8009b20 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009bcc:	4b12      	ldr	r3, [pc, #72]	; (8009c18 <xTimerCreateTimerTask+0x54>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	b1b3      	cbz	r3, 8009c00 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009bd2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bd4:	aa07      	add	r2, sp, #28
 8009bd6:	a906      	add	r1, sp, #24
 8009bd8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009bda:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009bde:	f7f8 fda1 	bl	8002724 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	9a07      	ldr	r2, [sp, #28]
 8009be6:	9302      	str	r3, [sp, #8]
 8009be8:	9b06      	ldr	r3, [sp, #24]
 8009bea:	490c      	ldr	r1, [pc, #48]	; (8009c1c <xTimerCreateTimerTask+0x58>)
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	2302      	movs	r3, #2
 8009bf0:	480b      	ldr	r0, [pc, #44]	; (8009c20 <xTimerCreateTimerTask+0x5c>)
 8009bf2:	9300      	str	r3, [sp, #0]
 8009bf4:	4623      	mov	r3, r4
 8009bf6:	f7ff f9b5 	bl	8008f64 <xTaskCreateStatic>
 8009bfa:	4b0a      	ldr	r3, [pc, #40]	; (8009c24 <xTimerCreateTimerTask+0x60>)
 8009bfc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009bfe:	b940      	cbnz	r0, 8009c12 <xTimerCreateTimerTask+0x4e>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009c10:	e7fe      	b.n	8009c10 <xTimerCreateTimerTask+0x4c>
}
 8009c12:	2001      	movs	r0, #1
 8009c14:	b008      	add	sp, #32
 8009c16:	bd10      	pop	{r4, pc}
 8009c18:	20001f88 	.word	0x20001f88
 8009c1c:	0800bc53 	.word	0x0800bc53
 8009c20:	08009ded 	.word	0x08009ded
 8009c24:	20001f8c 	.word	0x20001f8c

08009c28 <xTimerCreate>:
	{
 8009c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2c:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009c2e:	202c      	movs	r0, #44	; 0x2c
	{
 8009c30:	460d      	mov	r5, r1
 8009c32:	4617      	mov	r7, r2
 8009c34:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009c36:	f000 fb35 	bl	800a2a4 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	b1c0      	cbz	r0, 8009c70 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009c3e:	b945      	cbnz	r5, 8009c52 <xTimerCreate+0x2a>
 8009c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	e7fe      	b.n	8009c50 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8009c52:	f7ff ff65 	bl	8009b20 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c56:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009c58:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009c5c:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8009c5e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009c62:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009c64:	1d20      	adds	r0, r4, #4
 8009c66:	f7fe fbf4 	bl	8008452 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009c70:	4620      	mov	r0, r4
 8009c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c76 <xTimerCreateStatic>:
	{
 8009c76:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c7a:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009c7c:	232c      	movs	r3, #44	; 0x2c
 8009c7e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009c80:	9b01      	ldr	r3, [sp, #4]
	{
 8009c82:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8009c84:	2b2c      	cmp	r3, #44	; 0x2c
	{
 8009c86:	460d      	mov	r5, r1
 8009c88:	4617      	mov	r7, r2
 8009c8a:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8009c8c:	d008      	beq.n	8009ca0 <xTimerCreateStatic+0x2a>
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	e7fe      	b.n	8009c9e <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8009ca0:	b944      	cbnz	r4, 8009cb4 <xTimerCreateStatic+0x3e>
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	e7fe      	b.n	8009cb2 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009cb4:	b941      	cbnz	r1, 8009cc8 <xTimerCreateStatic+0x52>
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	e7fe      	b.n	8009cc6 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8009cc8:	f7ff ff2a 	bl	8009b20 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009ccc:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009cce:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009cd0:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009cd2:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8009cd6:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009cda:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009cdc:	f7fe fbb9 	bl	8008452 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009ce0:	2301      	movs	r3, #1
	}
 8009ce2:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009ce4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009ce8:	b002      	add	sp, #8
 8009cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009cf0 <xTimerGenericCommand>:
{
 8009cf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009cf2:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009cf4:	4604      	mov	r4, r0
{
 8009cf6:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009cf8:	b940      	cbnz	r0, 8009d0c <xTimerGenericCommand+0x1c>
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	e7fe      	b.n	8009d0a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8009d0c:	4d0c      	ldr	r5, [pc, #48]	; (8009d40 <xTimerGenericCommand+0x50>)
 8009d0e:	6828      	ldr	r0, [r5, #0]
 8009d10:	b178      	cbz	r0, 8009d32 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d12:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d14:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009d18:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d1a:	dc0c      	bgt.n	8009d36 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d1c:	f7ff fd64 	bl	80097e8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d20:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d22:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d24:	bf14      	ite	ne
 8009d26:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d28:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d2a:	6828      	ldr	r0, [r5, #0]
 8009d2c:	a901      	add	r1, sp, #4
 8009d2e:	f7fe fcfe 	bl	800872e <xQueueGenericSend>
}
 8009d32:	b004      	add	sp, #16
 8009d34:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d36:	2300      	movs	r3, #0
 8009d38:	a901      	add	r1, sp, #4
 8009d3a:	f7fe fdab 	bl	8008894 <xQueueGenericSendFromISR>
 8009d3e:	e7f8      	b.n	8009d32 <xTimerGenericCommand+0x42>
 8009d40:	20001f88 	.word	0x20001f88

08009d44 <prvSampleTimeNow>:
{
 8009d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009d4a:	f7ff fa59 	bl	8009200 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009d4e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009de0 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 8009d52:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009d54:	f8d8 3000 	ldr.w	r3, [r8]
 8009d58:	4283      	cmp	r3, r0
 8009d5a:	d90b      	bls.n	8009d74 <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d5c:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d60:	4f20      	ldr	r7, [pc, #128]	; (8009de4 <prvSampleTimeNow+0xa0>)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	b96a      	cbnz	r2, 8009d84 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8009d68:	4a1f      	ldr	r2, [pc, #124]	; (8009de8 <prvSampleTimeNow+0xa4>)
 8009d6a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d6c:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d6e:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <prvSampleTimeNow+0x32>
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009d78:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009d7a:	f8c8 5000 	str.w	r5, [r8]
}
 8009d7e:	b003      	add	sp, #12
 8009d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d84:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d86:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d88:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d8c:	f104 0b04 	add.w	fp, r4, #4
 8009d90:	4658      	mov	r0, fp
 8009d92:	f7fe fb84 	bl	800849e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d9c:	69e3      	ldr	r3, [r4, #28]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d1df      	bne.n	8009d62 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009da2:	69a3      	ldr	r3, [r4, #24]
 8009da4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009da6:	459a      	cmp	sl, r3
 8009da8:	d206      	bcs.n	8009db8 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009daa:	4659      	mov	r1, fp
 8009dac:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dae:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009db0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009db2:	f7fe fb5d 	bl	8008470 <vListInsert>
 8009db6:	e7d4      	b.n	8009d62 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db8:	2300      	movs	r3, #0
 8009dba:	4652      	mov	r2, sl
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f8cd 9000 	str.w	r9, [sp]
 8009dc4:	f7ff ff94 	bl	8009cf0 <xTimerGenericCommand>
				configASSERT( xResult );
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d1ca      	bne.n	8009d62 <prvSampleTimeNow+0x1e>
 8009dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	e7fe      	b.n	8009ddc <prvSampleTimeNow+0x98>
 8009dde:	bf00      	nop
 8009de0:	20001f3c 	.word	0x20001f3c
 8009de4:	20001e94 	.word	0x20001e94
 8009de8:	20001e98 	.word	0x20001e98

08009dec <prvTimerTask>:
{
 8009dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009df0:	4e65      	ldr	r6, [pc, #404]	; (8009f88 <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009df2:	4f66      	ldr	r7, [pc, #408]	; (8009f8c <prvTimerTask+0x1a0>)
{
 8009df4:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009df6:	6833      	ldr	r3, [r6, #0]
 8009df8:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dfa:	2d00      	cmp	r5, #0
 8009dfc:	d033      	beq.n	8009e66 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009e04:	f7ff f9f4 	bl	80091f0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e08:	a803      	add	r0, sp, #12
 8009e0a:	f7ff ff9b 	bl	8009d44 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009e0e:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e10:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009e12:	2c00      	cmp	r4, #0
 8009e14:	d177      	bne.n	8009f06 <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e16:	2d00      	cmp	r5, #0
 8009e18:	d05a      	beq.n	8009ed0 <prvTimerTask+0xe4>
 8009e1a:	4540      	cmp	r0, r8
 8009e1c:	d35e      	bcc.n	8009edc <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8009e1e:	f7ff fa87 	bl	8009330 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e22:	6833      	ldr	r3, [r6, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e28:	1d28      	adds	r0, r5, #4
 8009e2a:	f7fe fb38 	bl	800849e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009e2e:	69eb      	ldr	r3, [r5, #28]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d11a      	bne.n	8009e6a <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e34:	69a9      	ldr	r1, [r5, #24]
 8009e36:	4643      	mov	r3, r8
 8009e38:	464a      	mov	r2, r9
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	4441      	add	r1, r8
 8009e3e:	f7ff fea3 	bl	8009b88 <prvInsertTimerInActiveList>
 8009e42:	b190      	cbz	r0, 8009e6a <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e44:	4623      	mov	r3, r4
 8009e46:	4642      	mov	r2, r8
 8009e48:	4621      	mov	r1, r4
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	9400      	str	r4, [sp, #0]
 8009e4e:	f7ff ff4f 	bl	8009cf0 <xTimerGenericCommand>
			configASSERT( xResult );
 8009e52:	b950      	cbnz	r0, 8009e6a <prvTimerTask+0x7e>
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	e7fe      	b.n	8009e64 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8009e66:	46a8      	mov	r8, r5
 8009e68:	e7cc      	b.n	8009e04 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e6e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e70:	2500      	movs	r5, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	6838      	ldr	r0, [r7, #0]
 8009e76:	a903      	add	r1, sp, #12
 8009e78:	f7fe fdc1 	bl	80089fe <xQueueReceive>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d0ba      	beq.n	8009df6 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dbf5      	blt.n	8009e72 <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e86:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e88:	6963      	ldr	r3, [r4, #20]
 8009e8a:	b113      	cbz	r3, 8009e92 <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e8c:	1d20      	adds	r0, r4, #4
 8009e8e:	f7fe fb06 	bl	800849e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e92:	a802      	add	r0, sp, #8
 8009e94:	f7ff ff56 	bl	8009d44 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009e98:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e9a:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009e9c:	2b09      	cmp	r3, #9
 8009e9e:	d8e8      	bhi.n	8009e72 <prvTimerTask+0x86>
 8009ea0:	a101      	add	r1, pc, #4	; (adr r1, 8009ea8 <prvTimerTask+0xbc>)
 8009ea2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009f0d 	.word	0x08009f0d
 8009eac:	08009f0d 	.word	0x08009f0d
 8009eb0:	08009f0d 	.word	0x08009f0d
 8009eb4:	08009e73 	.word	0x08009e73
 8009eb8:	08009f51 	.word	0x08009f51
 8009ebc:	08009f75 	.word	0x08009f75
 8009ec0:	08009f0d 	.word	0x08009f0d
 8009ec4:	08009f0d 	.word	0x08009f0d
 8009ec8:	08009e73 	.word	0x08009e73
 8009ecc:	08009f51 	.word	0x08009f51
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ed0:	4b2f      	ldr	r3, [pc, #188]	; (8009f90 <prvTimerTask+0x1a4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681c      	ldr	r4, [r3, #0]
 8009ed6:	fab4 f484 	clz	r4, r4
 8009eda:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009edc:	4622      	mov	r2, r4
 8009ede:	6838      	ldr	r0, [r7, #0]
 8009ee0:	eba8 0109 	sub.w	r1, r8, r9
 8009ee4:	f7fe fe8c 	bl	8008c00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ee8:	f7ff fa22 	bl	8009330 <xTaskResumeAll>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d1bf      	bne.n	8009e70 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009ef0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	e7b4      	b.n	8009e70 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8009f06:	f7ff fa13 	bl	8009330 <xTaskResumeAll>
 8009f0a:	e7b1      	b.n	8009e70 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f0c:	69a1      	ldr	r1, [r4, #24]
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	4620      	mov	r0, r4
 8009f12:	4419      	add	r1, r3
 8009f14:	f7ff fe38 	bl	8009b88 <prvInsertTimerInActiveList>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d0aa      	beq.n	8009e72 <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f1e:	4620      	mov	r0, r4
 8009f20:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f22:	69e3      	ldr	r3, [r4, #28]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d1a4      	bne.n	8009e72 <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f28:	2300      	movs	r3, #0
 8009f2a:	69a2      	ldr	r2, [r4, #24]
 8009f2c:	9904      	ldr	r1, [sp, #16]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	440a      	add	r2, r1
 8009f32:	9500      	str	r5, [sp, #0]
 8009f34:	4619      	mov	r1, r3
 8009f36:	f7ff fedb 	bl	8009cf0 <xTimerGenericCommand>
							configASSERT( xResult );
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d199      	bne.n	8009e72 <prvTimerTask+0x86>
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	e7fe      	b.n	8009f4e <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f54:	b941      	cbnz	r1, 8009f68 <prvTimerTask+0x17c>
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	e7fe      	b.n	8009f66 <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f68:	4603      	mov	r3, r0
 8009f6a:	4401      	add	r1, r0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f7ff fe0b 	bl	8009b88 <prvInsertTimerInActiveList>
					break;
 8009f72:	e77e      	b.n	8009e72 <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f af7a 	bne.w	8009e72 <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fa22 	bl	800a3c8 <vPortFree>
 8009f84:	e775      	b.n	8009e72 <prvTimerTask+0x86>
 8009f86:	bf00      	nop
 8009f88:	20001e94 	.word	0x20001e94
 8009f8c:	20001f88 	.word	0x20001f88
 8009f90:	20001e98 	.word	0x20001e98

08009f94 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f94:	4806      	ldr	r0, [pc, #24]	; (8009fb0 <prvPortStartFirstTask+0x1c>)
 8009f96:	6800      	ldr	r0, [r0, #0]
 8009f98:	6800      	ldr	r0, [r0, #0]
 8009f9a:	f380 8808 	msr	MSP, r0
 8009f9e:	b662      	cpsie	i
 8009fa0:	b661      	cpsie	f
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	df00      	svc	0
 8009fac:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fae:	0000      	.short	0x0000
 8009fb0:	e000ed08 	.word	0xe000ed08

08009fb4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8009fb4:	2300      	movs	r3, #0
{
 8009fb6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009fb8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009fba:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <prvTaskExitError+0x3c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	d008      	beq.n	8009fd4 <prvTaskExitError+0x20>
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	e7fe      	b.n	8009fd2 <prvTaskExitError+0x1e>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0fc      	beq.n	8009fe4 <prvTaskExitError+0x30>
}
 8009fea:	b002      	add	sp, #8
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	2000000c 	.word	0x2000000c

08009ff4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ff8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ffe:	f021 0101 	bic.w	r1, r1, #1
 800a002:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a006:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a00a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a00e:	3840      	subs	r0, #64	; 0x40
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	08009fb5 	.word	0x08009fb5
	...

0800a020 <SVC_Handler>:
	__asm volatile (
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <pxCurrentTCBConst2>)
 800a022:	6819      	ldr	r1, [r3, #0]
 800a024:	6808      	ldr	r0, [r1, #0]
 800a026:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a02a:	f380 8809 	msr	PSP, r0
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f04f 0000 	mov.w	r0, #0
 800a036:	f380 8811 	msr	BASEPRI, r0
 800a03a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a03e:	4770      	bx	lr

0800a040 <pxCurrentTCBConst2>:
 800a040:	20001d6c 	.word	0x20001d6c

0800a044 <vPortEnterCritical>:
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a054:	4a0a      	ldr	r2, [pc, #40]	; (800a080 <vPortEnterCritical+0x3c>)
 800a056:	6813      	ldr	r3, [r2, #0]
 800a058:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a05a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800a05c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a05e:	d10e      	bne.n	800a07e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a060:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a064:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	b143      	cbz	r3, 800a07e <vPortEnterCritical+0x3a>
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	e7fe      	b.n	800a07c <vPortEnterCritical+0x38>
	}
}
 800a07e:	4770      	bx	lr
 800a080:	2000000c 	.word	0x2000000c

0800a084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a084:	4a08      	ldr	r2, [pc, #32]	; (800a0a8 <vPortExitCritical+0x24>)
 800a086:	6813      	ldr	r3, [r2, #0]
 800a088:	b943      	cbnz	r3, 800a09c <vPortExitCritical+0x18>
 800a08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08e:	f383 8811 	msr	BASEPRI, r3
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	f3bf 8f4f 	dsb	sy
 800a09a:	e7fe      	b.n	800a09a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a09c:	3b01      	subs	r3, #1
 800a09e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0a0:	b90b      	cbnz	r3, 800a0a6 <vPortExitCritical+0x22>
	__asm volatile
 800a0a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0a6:	4770      	bx	lr
 800a0a8:	2000000c 	.word	0x2000000c
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0b0:	f3ef 8009 	mrs	r0, PSP
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	4b0d      	ldr	r3, [pc, #52]	; (800a0f0 <pxCurrentTCBConst>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0c0:	6010      	str	r0, [r2, #0]
 800a0c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a0c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0ca:	f380 8811 	msr	BASEPRI, r0
 800a0ce:	f7ff fa13 	bl	80094f8 <vTaskSwitchContext>
 800a0d2:	f04f 0000 	mov.w	r0, #0
 800a0d6:	f380 8811 	msr	BASEPRI, r0
 800a0da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0de:	6819      	ldr	r1, [r3, #0]
 800a0e0:	6808      	ldr	r0, [r1, #0]
 800a0e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0e6:	f380 8809 	msr	PSP, r0
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	4770      	bx	lr

0800a0f0 <pxCurrentTCBConst>:
 800a0f0:	20001d6c 	.word	0x20001d6c

0800a0f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0f4:	b508      	push	{r3, lr}
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a106:	f7ff f881 	bl	800920c <xTaskIncrementTick>
 800a10a:	b128      	cbz	r0, 800a118 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a10c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a114:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800a118:	2300      	movs	r3, #0
 800a11a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a11e:	bd08      	pop	{r3, pc}

0800a120 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a120:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800a124:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a12a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a12c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a12e:	4b04      	ldr	r3, [pc, #16]	; (800a140 <vPortSetupTimerInterrupt+0x20>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	fbb3 f3f1 	udiv	r3, r3, r1
 800a136:	3b01      	subs	r3, #1
 800a138:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a13a:	2307      	movs	r3, #7
 800a13c:	6113      	str	r3, [r2, #16]
}
 800a13e:	4770      	bx	lr
 800a140:	20000000 	.word	0x20000000

0800a144 <xPortStartScheduler>:
{
 800a144:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a146:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a148:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a150:	22ff      	movs	r2, #255	; 0xff
 800a152:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a154:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a156:	4a26      	ldr	r2, [pc, #152]	; (800a1f0 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a15e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a162:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a166:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a168:	2307      	movs	r3, #7
 800a16a:	4a22      	ldr	r2, [pc, #136]	; (800a1f4 <xPortStartScheduler+0xb0>)
 800a16c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a16e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800a172:	1e5c      	subs	r4, r3, #1
 800a174:	0600      	lsls	r0, r0, #24
 800a176:	d40c      	bmi.n	800a192 <xPortStartScheduler+0x4e>
 800a178:	b111      	cbz	r1, 800a180 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	d011      	beq.n	800a1a4 <xPortStartScheduler+0x60>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	e7fe      	b.n	800a190 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a192:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a196:	2101      	movs	r1, #1
 800a198:	005b      	lsls	r3, r3, #1
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	f88d 3003 	strb.w	r3, [sp, #3]
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	e7e4      	b.n	800a16e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a1a8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	4a0f      	ldr	r2, [pc, #60]	; (800a1ec <xPortStartScheduler+0xa8>)
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800a1b6:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1b8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800a1bc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a1c0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1c4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800a1c8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a1cc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800a1d0:	f7ff ffa6 	bl	800a120 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a1d4:	4b08      	ldr	r3, [pc, #32]	; (800a1f8 <xPortStartScheduler+0xb4>)
 800a1d6:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800a1d8:	f7ff fedc 	bl	8009f94 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a1dc:	f7ff f98c 	bl	80094f8 <vTaskSwitchContext>
}
 800a1e0:	4620      	mov	r0, r4
	prvTaskExitError();
 800a1e2:	f7ff fee7 	bl	8009fb4 <prvTaskExitError>
}
 800a1e6:	b002      	add	sp, #8
 800a1e8:	bd10      	pop	{r4, pc}
 800a1ea:	bf00      	nop
 800a1ec:	e000e400 	.word	0xe000e400
 800a1f0:	20001f90 	.word	0x20001f90
 800a1f4:	20001f94 	.word	0x20001f94
 800a1f8:	2000000c 	.word	0x2000000c

0800a1fc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1fc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d90e      	bls.n	800a222 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a204:	4a11      	ldr	r2, [pc, #68]	; (800a24c <vPortValidateInterruptPriority+0x50>)
 800a206:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a208:	4a11      	ldr	r2, [pc, #68]	; (800a250 <vPortValidateInterruptPriority+0x54>)
 800a20a:	7812      	ldrb	r2, [r2, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d908      	bls.n	800a222 <vPortValidateInterruptPriority+0x26>
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	e7fe      	b.n	800a220 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a222:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a226:	4a0b      	ldr	r2, [pc, #44]	; (800a254 <vPortValidateInterruptPriority+0x58>)
 800a228:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a232:	4293      	cmp	r3, r2
 800a234:	d908      	bls.n	800a248 <vPortValidateInterruptPriority+0x4c>
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	e7fe      	b.n	800a246 <vPortValidateInterruptPriority+0x4a>
	}
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	e000e3f0 	.word	0xe000e3f0
 800a250:	20001f90 	.word	0x20001f90
 800a254:	20001f94 	.word	0x20001f94

0800a258 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a258:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a25a:	4b10      	ldr	r3, [pc, #64]	; (800a29c <prvInsertBlockIntoFreeList+0x44>)
 800a25c:	461a      	mov	r2, r3
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4283      	cmp	r3, r0
 800a262:	d3fb      	bcc.n	800a25c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a264:	6854      	ldr	r4, [r2, #4]
 800a266:	1911      	adds	r1, r2, r4
 800a268:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a26a:	bf01      	itttt	eq
 800a26c:	6841      	ldreq	r1, [r0, #4]
 800a26e:	4610      	moveq	r0, r2
 800a270:	1909      	addeq	r1, r1, r4
 800a272:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a274:	6844      	ldr	r4, [r0, #4]
 800a276:	1901      	adds	r1, r0, r4
 800a278:	428b      	cmp	r3, r1
 800a27a:	d10c      	bne.n	800a296 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a27c:	4908      	ldr	r1, [pc, #32]	; (800a2a0 <prvInsertBlockIntoFreeList+0x48>)
 800a27e:	6809      	ldr	r1, [r1, #0]
 800a280:	428b      	cmp	r3, r1
 800a282:	d003      	beq.n	800a28c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a284:	6859      	ldr	r1, [r3, #4]
 800a286:	4421      	add	r1, r4
 800a288:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a28a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a28c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a28e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a290:	bf18      	it	ne
 800a292:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a294:	bd10      	pop	{r4, pc}
 800a296:	4619      	mov	r1, r3
 800a298:	e7f8      	b.n	800a28c <prvInsertBlockIntoFreeList+0x34>
 800a29a:	bf00      	nop
 800a29c:	20002fa8 	.word	0x20002fa8
 800a2a0:	20001f98 	.word	0x20001f98

0800a2a4 <pvPortMalloc>:
{
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a2aa:	f7fe ffa1 	bl	80091f0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a2ae:	4940      	ldr	r1, [pc, #256]	; (800a3b0 <pvPortMalloc+0x10c>)
 800a2b0:	4d40      	ldr	r5, [pc, #256]	; (800a3b4 <pvPortMalloc+0x110>)
 800a2b2:	680b      	ldr	r3, [r1, #0]
 800a2b4:	bb0b      	cbnz	r3, 800a2fa <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800a2b6:	4a40      	ldr	r2, [pc, #256]	; (800a3b8 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2b8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ba:	bf1f      	itttt	ne
 800a2bc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2be:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2c2:	f502 5280 	addne.w	r2, r2, #4096	; 0x1000
 800a2c6:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2c8:	bf0c      	ite	eq
 800a2ca:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2ce:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 800a2d0:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d2:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2d4:	4e39      	ldr	r6, [pc, #228]	; (800a3bc <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800a2d6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d8:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800a2dc:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2de:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800a2e0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2e4:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2e6:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800a2ea:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2ec:	4b34      	ldr	r3, [pc, #208]	; (800a3c0 <pvPortMalloc+0x11c>)
 800a2ee:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2f0:	4b34      	ldr	r3, [pc, #208]	; (800a3c4 <pvPortMalloc+0x120>)
 800a2f2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2f8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2fa:	682e      	ldr	r6, [r5, #0]
 800a2fc:	4226      	tst	r6, r4
 800a2fe:	d151      	bne.n	800a3a4 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 800a300:	2c00      	cmp	r4, #0
 800a302:	d042      	beq.n	800a38a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800a304:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a308:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a30a:	bf1c      	itt	ne
 800a30c:	f023 0307 	bicne.w	r3, r3, #7
 800a310:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a312:	2b00      	cmp	r3, #0
 800a314:	d046      	beq.n	800a3a4 <pvPortMalloc+0x100>
 800a316:	4f2b      	ldr	r7, [pc, #172]	; (800a3c4 <pvPortMalloc+0x120>)
 800a318:	683c      	ldr	r4, [r7, #0]
 800a31a:	429c      	cmp	r4, r3
 800a31c:	d342      	bcc.n	800a3a4 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 800a31e:	4a27      	ldr	r2, [pc, #156]	; (800a3bc <pvPortMalloc+0x118>)
 800a320:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a322:	6868      	ldr	r0, [r5, #4]
 800a324:	4298      	cmp	r0, r3
 800a326:	d204      	bcs.n	800a332 <pvPortMalloc+0x8e>
 800a328:	f8d5 c000 	ldr.w	ip, [r5]
 800a32c:	f1bc 0f00 	cmp.w	ip, #0
 800a330:	d115      	bne.n	800a35e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a332:	6809      	ldr	r1, [r1, #0]
 800a334:	42a9      	cmp	r1, r5
 800a336:	d035      	beq.n	800a3a4 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a338:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a33a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a33e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a340:	1ac2      	subs	r2, r0, r3
 800a342:	2a10      	cmp	r2, #16
 800a344:	d912      	bls.n	800a36c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a346:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a348:	0741      	lsls	r1, r0, #29
 800a34a:	d00b      	beq.n	800a364 <pvPortMalloc+0xc0>
 800a34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	e7fe      	b.n	800a35c <pvPortMalloc+0xb8>
 800a35e:	462a      	mov	r2, r5
 800a360:	4665      	mov	r5, ip
 800a362:	e7de      	b.n	800a322 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a364:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a366:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a368:	f7ff ff76 	bl	800a258 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 800a36c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a36e:	4914      	ldr	r1, [pc, #80]	; (800a3c0 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a370:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a372:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a374:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a376:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a378:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a37c:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a37e:	bf38      	it	cc
 800a380:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a382:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a384:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800a388:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a38a:	f7fe ffd1 	bl	8009330 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a38e:	0763      	lsls	r3, r4, #29
 800a390:	d00a      	beq.n	800a3a8 <pvPortMalloc+0x104>
 800a392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a396:	f383 8811 	msr	BASEPRI, r3
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	e7fe      	b.n	800a3a2 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800a3a4:	2400      	movs	r4, #0
 800a3a6:	e7f0      	b.n	800a38a <pvPortMalloc+0xe6>
}
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001f98 	.word	0x20001f98
 800a3b4:	20002f9c 	.word	0x20002f9c
 800a3b8:	20001f9c 	.word	0x20001f9c
 800a3bc:	20002fa8 	.word	0x20002fa8
 800a3c0:	20002fa4 	.word	0x20002fa4
 800a3c4:	20002fa0 	.word	0x20002fa0

0800a3c8 <vPortFree>:
{
 800a3c8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	b370      	cbz	r0, 800a42c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3ce:	4a18      	ldr	r2, [pc, #96]	; (800a430 <vPortFree+0x68>)
 800a3d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	4213      	tst	r3, r2
 800a3d8:	d108      	bne.n	800a3ec <vPortFree+0x24>
 800a3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	e7fe      	b.n	800a3ea <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3ec:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a3f0:	b141      	cbz	r1, 800a404 <vPortFree+0x3c>
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	e7fe      	b.n	800a402 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a404:	ea23 0302 	bic.w	r3, r3, r2
 800a408:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a40c:	f7fe fef0 	bl	80091f0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a410:	4a08      	ldr	r2, [pc, #32]	; (800a434 <vPortFree+0x6c>)
 800a412:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a416:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a418:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a41c:	440b      	add	r3, r1
 800a41e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a420:	f7ff ff1a 	bl	800a258 <prvInsertBlockIntoFreeList>
}
 800a424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a428:	f7fe bf82 	b.w	8009330 <xTaskResumeAll>
}
 800a42c:	bd10      	pop	{r4, pc}
 800a42e:	bf00      	nop
 800a430:	20002f9c 	.word	0x20002f9c
 800a434:	20002fa0 	.word	0x20002fa0

0800a438 <malloc>:
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <malloc+0xc>)
 800a43a:	4601      	mov	r1, r0
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	f000 b823 	b.w	800a488 <_malloc_r>
 800a442:	bf00      	nop
 800a444:	20000068 	.word	0x20000068

0800a448 <sbrk_aligned>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	4e0e      	ldr	r6, [pc, #56]	; (800a484 <sbrk_aligned+0x3c>)
 800a44c:	460c      	mov	r4, r1
 800a44e:	6831      	ldr	r1, [r6, #0]
 800a450:	4605      	mov	r5, r0
 800a452:	b911      	cbnz	r1, 800a45a <sbrk_aligned+0x12>
 800a454:	f000 fb88 	bl	800ab68 <_sbrk_r>
 800a458:	6030      	str	r0, [r6, #0]
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 fb83 	bl	800ab68 <_sbrk_r>
 800a462:	1c43      	adds	r3, r0, #1
 800a464:	d00a      	beq.n	800a47c <sbrk_aligned+0x34>
 800a466:	1cc4      	adds	r4, r0, #3
 800a468:	f024 0403 	bic.w	r4, r4, #3
 800a46c:	42a0      	cmp	r0, r4
 800a46e:	d007      	beq.n	800a480 <sbrk_aligned+0x38>
 800a470:	1a21      	subs	r1, r4, r0
 800a472:	4628      	mov	r0, r5
 800a474:	f000 fb78 	bl	800ab68 <_sbrk_r>
 800a478:	3001      	adds	r0, #1
 800a47a:	d101      	bne.n	800a480 <sbrk_aligned+0x38>
 800a47c:	f04f 34ff 	mov.w	r4, #4294967295
 800a480:	4620      	mov	r0, r4
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	20002fb4 	.word	0x20002fb4

0800a488 <_malloc_r>:
 800a488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a48c:	1ccd      	adds	r5, r1, #3
 800a48e:	f025 0503 	bic.w	r5, r5, #3
 800a492:	3508      	adds	r5, #8
 800a494:	2d0c      	cmp	r5, #12
 800a496:	bf38      	it	cc
 800a498:	250c      	movcc	r5, #12
 800a49a:	2d00      	cmp	r5, #0
 800a49c:	4607      	mov	r7, r0
 800a49e:	db01      	blt.n	800a4a4 <_malloc_r+0x1c>
 800a4a0:	42a9      	cmp	r1, r5
 800a4a2:	d905      	bls.n	800a4b0 <_malloc_r+0x28>
 800a4a4:	230c      	movs	r3, #12
 800a4a6:	2600      	movs	r6, #0
 800a4a8:	603b      	str	r3, [r7, #0]
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a584 <_malloc_r+0xfc>
 800a4b4:	f000 f868 	bl	800a588 <__malloc_lock>
 800a4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4bc:	461c      	mov	r4, r3
 800a4be:	bb5c      	cbnz	r4, 800a518 <_malloc_r+0x90>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ffc0 	bl	800a448 <sbrk_aligned>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	d155      	bne.n	800a57a <_malloc_r+0xf2>
 800a4ce:	f8d8 4000 	ldr.w	r4, [r8]
 800a4d2:	4626      	mov	r6, r4
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	d145      	bne.n	800a564 <_malloc_r+0xdc>
 800a4d8:	2c00      	cmp	r4, #0
 800a4da:	d048      	beq.n	800a56e <_malloc_r+0xe6>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	eb04 0903 	add.w	r9, r4, r3
 800a4e6:	f000 fb3f 	bl	800ab68 <_sbrk_r>
 800a4ea:	4581      	cmp	r9, r0
 800a4ec:	d13f      	bne.n	800a56e <_malloc_r+0xe6>
 800a4ee:	6821      	ldr	r1, [r4, #0]
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	1a6d      	subs	r5, r5, r1
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	f7ff ffa7 	bl	800a448 <sbrk_aligned>
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d037      	beq.n	800a56e <_malloc_r+0xe6>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	442b      	add	r3, r5
 800a502:	6023      	str	r3, [r4, #0]
 800a504:	f8d8 3000 	ldr.w	r3, [r8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d038      	beq.n	800a57e <_malloc_r+0xf6>
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	42a2      	cmp	r2, r4
 800a510:	d12b      	bne.n	800a56a <_malloc_r+0xe2>
 800a512:	2200      	movs	r2, #0
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	e00f      	b.n	800a538 <_malloc_r+0xb0>
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	1b52      	subs	r2, r2, r5
 800a51c:	d41f      	bmi.n	800a55e <_malloc_r+0xd6>
 800a51e:	2a0b      	cmp	r2, #11
 800a520:	d917      	bls.n	800a552 <_malloc_r+0xca>
 800a522:	1961      	adds	r1, r4, r5
 800a524:	42a3      	cmp	r3, r4
 800a526:	6025      	str	r5, [r4, #0]
 800a528:	bf18      	it	ne
 800a52a:	6059      	strne	r1, [r3, #4]
 800a52c:	6863      	ldr	r3, [r4, #4]
 800a52e:	bf08      	it	eq
 800a530:	f8c8 1000 	streq.w	r1, [r8]
 800a534:	5162      	str	r2, [r4, r5]
 800a536:	604b      	str	r3, [r1, #4]
 800a538:	4638      	mov	r0, r7
 800a53a:	f104 060b 	add.w	r6, r4, #11
 800a53e:	f000 f829 	bl	800a594 <__malloc_unlock>
 800a542:	f026 0607 	bic.w	r6, r6, #7
 800a546:	1d23      	adds	r3, r4, #4
 800a548:	1af2      	subs	r2, r6, r3
 800a54a:	d0ae      	beq.n	800a4aa <_malloc_r+0x22>
 800a54c:	1b9b      	subs	r3, r3, r6
 800a54e:	50a3      	str	r3, [r4, r2]
 800a550:	e7ab      	b.n	800a4aa <_malloc_r+0x22>
 800a552:	42a3      	cmp	r3, r4
 800a554:	6862      	ldr	r2, [r4, #4]
 800a556:	d1dd      	bne.n	800a514 <_malloc_r+0x8c>
 800a558:	f8c8 2000 	str.w	r2, [r8]
 800a55c:	e7ec      	b.n	800a538 <_malloc_r+0xb0>
 800a55e:	4623      	mov	r3, r4
 800a560:	6864      	ldr	r4, [r4, #4]
 800a562:	e7ac      	b.n	800a4be <_malloc_r+0x36>
 800a564:	4634      	mov	r4, r6
 800a566:	6876      	ldr	r6, [r6, #4]
 800a568:	e7b4      	b.n	800a4d4 <_malloc_r+0x4c>
 800a56a:	4613      	mov	r3, r2
 800a56c:	e7cc      	b.n	800a508 <_malloc_r+0x80>
 800a56e:	230c      	movs	r3, #12
 800a570:	4638      	mov	r0, r7
 800a572:	603b      	str	r3, [r7, #0]
 800a574:	f000 f80e 	bl	800a594 <__malloc_unlock>
 800a578:	e797      	b.n	800a4aa <_malloc_r+0x22>
 800a57a:	6025      	str	r5, [r4, #0]
 800a57c:	e7dc      	b.n	800a538 <_malloc_r+0xb0>
 800a57e:	605b      	str	r3, [r3, #4]
 800a580:	deff      	udf	#255	; 0xff
 800a582:	bf00      	nop
 800a584:	20002fb0 	.word	0x20002fb0

0800a588 <__malloc_lock>:
 800a588:	4801      	ldr	r0, [pc, #4]	; (800a590 <__malloc_lock+0x8>)
 800a58a:	f000 bb3a 	b.w	800ac02 <__retarget_lock_acquire_recursive>
 800a58e:	bf00      	nop
 800a590:	200030f8 	.word	0x200030f8

0800a594 <__malloc_unlock>:
 800a594:	4801      	ldr	r0, [pc, #4]	; (800a59c <__malloc_unlock+0x8>)
 800a596:	f000 bb35 	b.w	800ac04 <__retarget_lock_release_recursive>
 800a59a:	bf00      	nop
 800a59c:	200030f8 	.word	0x200030f8

0800a5a0 <std>:
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ae:	6083      	str	r3, [r0, #8]
 800a5b0:	8181      	strh	r1, [r0, #12]
 800a5b2:	6643      	str	r3, [r0, #100]	; 0x64
 800a5b4:	81c2      	strh	r2, [r0, #14]
 800a5b6:	6183      	str	r3, [r0, #24]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	305c      	adds	r0, #92	; 0x5c
 800a5be:	f000 fa2b 	bl	800aa18 <memset>
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <std+0x58>)
 800a5c4:	6224      	str	r4, [r4, #32]
 800a5c6:	6263      	str	r3, [r4, #36]	; 0x24
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <std+0x5c>)
 800a5ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <std+0x60>)
 800a5ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	; (800a604 <std+0x64>)
 800a5d2:	6323      	str	r3, [r4, #48]	; 0x30
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <std+0x68>)
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	d006      	beq.n	800a5e8 <std+0x48>
 800a5da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a5de:	4294      	cmp	r4, r2
 800a5e0:	d002      	beq.n	800a5e8 <std+0x48>
 800a5e2:	33d0      	adds	r3, #208	; 0xd0
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d105      	bne.n	800a5f4 <std+0x54>
 800a5e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f0:	f000 bb06 	b.w	800ac00 <__retarget_lock_init_recursive>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800a869 	.word	0x0800a869
 800a5fc:	0800a88b 	.word	0x0800a88b
 800a600:	0800a8c3 	.word	0x0800a8c3
 800a604:	0800a8e7 	.word	0x0800a8e7
 800a608:	20002fb8 	.word	0x20002fb8

0800a60c <stdio_exit_handler>:
 800a60c:	4a02      	ldr	r2, [pc, #8]	; (800a618 <stdio_exit_handler+0xc>)
 800a60e:	4903      	ldr	r1, [pc, #12]	; (800a61c <stdio_exit_handler+0x10>)
 800a610:	4803      	ldr	r0, [pc, #12]	; (800a620 <stdio_exit_handler+0x14>)
 800a612:	f000 b869 	b.w	800a6e8 <_fwalk_sglue>
 800a616:	bf00      	nop
 800a618:	20000010 	.word	0x20000010
 800a61c:	0800b625 	.word	0x0800b625
 800a620:	2000001c 	.word	0x2000001c

0800a624 <cleanup_stdio>:
 800a624:	6841      	ldr	r1, [r0, #4]
 800a626:	4b0c      	ldr	r3, [pc, #48]	; (800a658 <cleanup_stdio+0x34>)
 800a628:	b510      	push	{r4, lr}
 800a62a:	4299      	cmp	r1, r3
 800a62c:	4604      	mov	r4, r0
 800a62e:	d001      	beq.n	800a634 <cleanup_stdio+0x10>
 800a630:	f000 fff8 	bl	800b624 <_fflush_r>
 800a634:	68a1      	ldr	r1, [r4, #8]
 800a636:	4b09      	ldr	r3, [pc, #36]	; (800a65c <cleanup_stdio+0x38>)
 800a638:	4299      	cmp	r1, r3
 800a63a:	d002      	beq.n	800a642 <cleanup_stdio+0x1e>
 800a63c:	4620      	mov	r0, r4
 800a63e:	f000 fff1 	bl	800b624 <_fflush_r>
 800a642:	68e1      	ldr	r1, [r4, #12]
 800a644:	4b06      	ldr	r3, [pc, #24]	; (800a660 <cleanup_stdio+0x3c>)
 800a646:	4299      	cmp	r1, r3
 800a648:	d004      	beq.n	800a654 <cleanup_stdio+0x30>
 800a64a:	4620      	mov	r0, r4
 800a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a650:	f000 bfe8 	b.w	800b624 <_fflush_r>
 800a654:	bd10      	pop	{r4, pc}
 800a656:	bf00      	nop
 800a658:	20002fb8 	.word	0x20002fb8
 800a65c:	20003020 	.word	0x20003020
 800a660:	20003088 	.word	0x20003088

0800a664 <global_stdio_init.part.0>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4b0b      	ldr	r3, [pc, #44]	; (800a694 <global_stdio_init.part.0+0x30>)
 800a668:	4c0b      	ldr	r4, [pc, #44]	; (800a698 <global_stdio_init.part.0+0x34>)
 800a66a:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <global_stdio_init.part.0+0x38>)
 800a66c:	4620      	mov	r0, r4
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	2104      	movs	r1, #4
 800a672:	2200      	movs	r2, #0
 800a674:	f7ff ff94 	bl	800a5a0 <std>
 800a678:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a67c:	2201      	movs	r2, #1
 800a67e:	2109      	movs	r1, #9
 800a680:	f7ff ff8e 	bl	800a5a0 <std>
 800a684:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a688:	2202      	movs	r2, #2
 800a68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a68e:	2112      	movs	r1, #18
 800a690:	f7ff bf86 	b.w	800a5a0 <std>
 800a694:	200030f0 	.word	0x200030f0
 800a698:	20002fb8 	.word	0x20002fb8
 800a69c:	0800a60d 	.word	0x0800a60d

0800a6a0 <__sfp_lock_acquire>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	; (800a6a8 <__sfp_lock_acquire+0x8>)
 800a6a2:	f000 baae 	b.w	800ac02 <__retarget_lock_acquire_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	200030f9 	.word	0x200030f9

0800a6ac <__sfp_lock_release>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	; (800a6b4 <__sfp_lock_release+0x8>)
 800a6ae:	f000 baa9 	b.w	800ac04 <__retarget_lock_release_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	200030f9 	.word	0x200030f9

0800a6b8 <__sinit>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	f7ff fff0 	bl	800a6a0 <__sfp_lock_acquire>
 800a6c0:	6a23      	ldr	r3, [r4, #32]
 800a6c2:	b11b      	cbz	r3, 800a6cc <__sinit+0x14>
 800a6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c8:	f7ff bff0 	b.w	800a6ac <__sfp_lock_release>
 800a6cc:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <__sinit+0x28>)
 800a6ce:	6223      	str	r3, [r4, #32]
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <__sinit+0x2c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1f5      	bne.n	800a6c4 <__sinit+0xc>
 800a6d8:	f7ff ffc4 	bl	800a664 <global_stdio_init.part.0>
 800a6dc:	e7f2      	b.n	800a6c4 <__sinit+0xc>
 800a6de:	bf00      	nop
 800a6e0:	0800a625 	.word	0x0800a625
 800a6e4:	200030f0 	.word	0x200030f0

0800a6e8 <_fwalk_sglue>:
 800a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	4688      	mov	r8, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	2600      	movs	r6, #0
 800a6f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a6fc:	d505      	bpl.n	800a70a <_fwalk_sglue+0x22>
 800a6fe:	6824      	ldr	r4, [r4, #0]
 800a700:	2c00      	cmp	r4, #0
 800a702:	d1f7      	bne.n	800a6f4 <_fwalk_sglue+0xc>
 800a704:	4630      	mov	r0, r6
 800a706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d907      	bls.n	800a720 <_fwalk_sglue+0x38>
 800a710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a714:	3301      	adds	r3, #1
 800a716:	d003      	beq.n	800a720 <_fwalk_sglue+0x38>
 800a718:	4629      	mov	r1, r5
 800a71a:	4638      	mov	r0, r7
 800a71c:	47c0      	blx	r8
 800a71e:	4306      	orrs	r6, r0
 800a720:	3568      	adds	r5, #104	; 0x68
 800a722:	e7e9      	b.n	800a6f8 <_fwalk_sglue+0x10>

0800a724 <iprintf>:
 800a724:	b40f      	push	{r0, r1, r2, r3}
 800a726:	b507      	push	{r0, r1, r2, lr}
 800a728:	4906      	ldr	r1, [pc, #24]	; (800a744 <iprintf+0x20>)
 800a72a:	ab04      	add	r3, sp, #16
 800a72c:	6808      	ldr	r0, [r1, #0]
 800a72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a732:	6881      	ldr	r1, [r0, #8]
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	f000 fc45 	bl	800afc4 <_vfiprintf_r>
 800a73a:	b003      	add	sp, #12
 800a73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a740:	b004      	add	sp, #16
 800a742:	4770      	bx	lr
 800a744:	20000068 	.word	0x20000068

0800a748 <_puts_r>:
 800a748:	6a03      	ldr	r3, [r0, #32]
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	4605      	mov	r5, r0
 800a74e:	460e      	mov	r6, r1
 800a750:	6884      	ldr	r4, [r0, #8]
 800a752:	b90b      	cbnz	r3, 800a758 <_puts_r+0x10>
 800a754:	f7ff ffb0 	bl	800a6b8 <__sinit>
 800a758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a75a:	07db      	lsls	r3, r3, #31
 800a75c:	d405      	bmi.n	800a76a <_puts_r+0x22>
 800a75e:	89a3      	ldrh	r3, [r4, #12]
 800a760:	0598      	lsls	r0, r3, #22
 800a762:	d402      	bmi.n	800a76a <_puts_r+0x22>
 800a764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a766:	f000 fa4c 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800a76a:	89a3      	ldrh	r3, [r4, #12]
 800a76c:	0719      	lsls	r1, r3, #28
 800a76e:	d513      	bpl.n	800a798 <_puts_r+0x50>
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	b18b      	cbz	r3, 800a798 <_puts_r+0x50>
 800a774:	3e01      	subs	r6, #1
 800a776:	68a3      	ldr	r3, [r4, #8]
 800a778:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a77c:	3b01      	subs	r3, #1
 800a77e:	60a3      	str	r3, [r4, #8]
 800a780:	b9e9      	cbnz	r1, 800a7be <_puts_r+0x76>
 800a782:	2b00      	cmp	r3, #0
 800a784:	da2e      	bge.n	800a7e4 <_puts_r+0x9c>
 800a786:	4622      	mov	r2, r4
 800a788:	210a      	movs	r1, #10
 800a78a:	4628      	mov	r0, r5
 800a78c:	f000 f8af 	bl	800a8ee <__swbuf_r>
 800a790:	3001      	adds	r0, #1
 800a792:	d007      	beq.n	800a7a4 <_puts_r+0x5c>
 800a794:	250a      	movs	r5, #10
 800a796:	e007      	b.n	800a7a8 <_puts_r+0x60>
 800a798:	4621      	mov	r1, r4
 800a79a:	4628      	mov	r0, r5
 800a79c:	f000 f8e4 	bl	800a968 <__swsetup_r>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d0e7      	beq.n	800a774 <_puts_r+0x2c>
 800a7a4:	f04f 35ff 	mov.w	r5, #4294967295
 800a7a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7aa:	07da      	lsls	r2, r3, #31
 800a7ac:	d405      	bmi.n	800a7ba <_puts_r+0x72>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	059b      	lsls	r3, r3, #22
 800a7b2:	d402      	bmi.n	800a7ba <_puts_r+0x72>
 800a7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7b6:	f000 fa25 	bl	800ac04 <__retarget_lock_release_recursive>
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	bd70      	pop	{r4, r5, r6, pc}
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da04      	bge.n	800a7cc <_puts_r+0x84>
 800a7c2:	69a2      	ldr	r2, [r4, #24]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	dc06      	bgt.n	800a7d6 <_puts_r+0x8e>
 800a7c8:	290a      	cmp	r1, #10
 800a7ca:	d004      	beq.n	800a7d6 <_puts_r+0x8e>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	6022      	str	r2, [r4, #0]
 800a7d2:	7019      	strb	r1, [r3, #0]
 800a7d4:	e7cf      	b.n	800a776 <_puts_r+0x2e>
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	4628      	mov	r0, r5
 800a7da:	f000 f888 	bl	800a8ee <__swbuf_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	d1c9      	bne.n	800a776 <_puts_r+0x2e>
 800a7e2:	e7df      	b.n	800a7a4 <_puts_r+0x5c>
 800a7e4:	250a      	movs	r5, #10
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	1c5a      	adds	r2, r3, #1
 800a7ea:	6022      	str	r2, [r4, #0]
 800a7ec:	701d      	strb	r5, [r3, #0]
 800a7ee:	e7db      	b.n	800a7a8 <_puts_r+0x60>

0800a7f0 <puts>:
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <puts+0xc>)
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	f7ff bfa7 	b.w	800a748 <_puts_r>
 800a7fa:	bf00      	nop
 800a7fc:	20000068 	.word	0x20000068

0800a800 <sniprintf>:
 800a800:	b40c      	push	{r2, r3}
 800a802:	b530      	push	{r4, r5, lr}
 800a804:	4b17      	ldr	r3, [pc, #92]	; (800a864 <sniprintf+0x64>)
 800a806:	1e0c      	subs	r4, r1, #0
 800a808:	681d      	ldr	r5, [r3, #0]
 800a80a:	b09d      	sub	sp, #116	; 0x74
 800a80c:	da08      	bge.n	800a820 <sniprintf+0x20>
 800a80e:	238b      	movs	r3, #139	; 0x8b
 800a810:	f04f 30ff 	mov.w	r0, #4294967295
 800a814:	602b      	str	r3, [r5, #0]
 800a816:	b01d      	add	sp, #116	; 0x74
 800a818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a81c:	b002      	add	sp, #8
 800a81e:	4770      	bx	lr
 800a820:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a824:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a828:	bf0c      	ite	eq
 800a82a:	4623      	moveq	r3, r4
 800a82c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	9307      	str	r3, [sp, #28]
 800a834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a838:	9002      	str	r0, [sp, #8]
 800a83a:	9006      	str	r0, [sp, #24]
 800a83c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a840:	4628      	mov	r0, r5
 800a842:	ab21      	add	r3, sp, #132	; 0x84
 800a844:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a846:	a902      	add	r1, sp, #8
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	f000 fa95 	bl	800ad78 <_svfiprintf_r>
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	bfbc      	itt	lt
 800a852:	238b      	movlt	r3, #139	; 0x8b
 800a854:	602b      	strlt	r3, [r5, #0]
 800a856:	2c00      	cmp	r4, #0
 800a858:	d0dd      	beq.n	800a816 <sniprintf+0x16>
 800a85a:	2200      	movs	r2, #0
 800a85c:	9b02      	ldr	r3, [sp, #8]
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	e7d9      	b.n	800a816 <sniprintf+0x16>
 800a862:	bf00      	nop
 800a864:	20000068 	.word	0x20000068

0800a868 <__sread>:
 800a868:	b510      	push	{r4, lr}
 800a86a:	460c      	mov	r4, r1
 800a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a870:	f000 f968 	bl	800ab44 <_read_r>
 800a874:	2800      	cmp	r0, #0
 800a876:	bfab      	itete	ge
 800a878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a87a:	89a3      	ldrhlt	r3, [r4, #12]
 800a87c:	181b      	addge	r3, r3, r0
 800a87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a882:	bfac      	ite	ge
 800a884:	6563      	strge	r3, [r4, #84]	; 0x54
 800a886:	81a3      	strhlt	r3, [r4, #12]
 800a888:	bd10      	pop	{r4, pc}

0800a88a <__swrite>:
 800a88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a88e:	461f      	mov	r7, r3
 800a890:	898b      	ldrh	r3, [r1, #12]
 800a892:	4605      	mov	r5, r0
 800a894:	05db      	lsls	r3, r3, #23
 800a896:	460c      	mov	r4, r1
 800a898:	4616      	mov	r6, r2
 800a89a:	d505      	bpl.n	800a8a8 <__swrite+0x1e>
 800a89c:	2302      	movs	r3, #2
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a4:	f000 f93c 	bl	800ab20 <_lseek_r>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	4632      	mov	r2, r6
 800a8ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	463b      	mov	r3, r7
 800a8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	f000 b963 	b.w	800ab88 <_write_r>

0800a8c2 <__sseek>:
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ca:	f000 f929 	bl	800ab20 <_lseek_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	89a3      	ldrh	r3, [r4, #12]
 800a8d2:	bf15      	itete	ne
 800a8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8de:	81a3      	strheq	r3, [r4, #12]
 800a8e0:	bf18      	it	ne
 800a8e2:	81a3      	strhne	r3, [r4, #12]
 800a8e4:	bd10      	pop	{r4, pc}

0800a8e6 <__sclose>:
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 b8b3 	b.w	800aa54 <_close_r>

0800a8ee <__swbuf_r>:
 800a8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f0:	460e      	mov	r6, r1
 800a8f2:	4614      	mov	r4, r2
 800a8f4:	4605      	mov	r5, r0
 800a8f6:	b118      	cbz	r0, 800a900 <__swbuf_r+0x12>
 800a8f8:	6a03      	ldr	r3, [r0, #32]
 800a8fa:	b90b      	cbnz	r3, 800a900 <__swbuf_r+0x12>
 800a8fc:	f7ff fedc 	bl	800a6b8 <__sinit>
 800a900:	69a3      	ldr	r3, [r4, #24]
 800a902:	60a3      	str	r3, [r4, #8]
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	071a      	lsls	r2, r3, #28
 800a908:	d525      	bpl.n	800a956 <__swbuf_r+0x68>
 800a90a:	6923      	ldr	r3, [r4, #16]
 800a90c:	b31b      	cbz	r3, 800a956 <__swbuf_r+0x68>
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	6922      	ldr	r2, [r4, #16]
 800a912:	b2f6      	uxtb	r6, r6
 800a914:	1a98      	subs	r0, r3, r2
 800a916:	6963      	ldr	r3, [r4, #20]
 800a918:	4637      	mov	r7, r6
 800a91a:	4283      	cmp	r3, r0
 800a91c:	dc04      	bgt.n	800a928 <__swbuf_r+0x3a>
 800a91e:	4621      	mov	r1, r4
 800a920:	4628      	mov	r0, r5
 800a922:	f000 fe7f 	bl	800b624 <_fflush_r>
 800a926:	b9e0      	cbnz	r0, 800a962 <__swbuf_r+0x74>
 800a928:	68a3      	ldr	r3, [r4, #8]
 800a92a:	3b01      	subs	r3, #1
 800a92c:	60a3      	str	r3, [r4, #8]
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	6022      	str	r2, [r4, #0]
 800a934:	701e      	strb	r6, [r3, #0]
 800a936:	6962      	ldr	r2, [r4, #20]
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d004      	beq.n	800a948 <__swbuf_r+0x5a>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	07db      	lsls	r3, r3, #31
 800a942:	d506      	bpl.n	800a952 <__swbuf_r+0x64>
 800a944:	2e0a      	cmp	r6, #10
 800a946:	d104      	bne.n	800a952 <__swbuf_r+0x64>
 800a948:	4621      	mov	r1, r4
 800a94a:	4628      	mov	r0, r5
 800a94c:	f000 fe6a 	bl	800b624 <_fflush_r>
 800a950:	b938      	cbnz	r0, 800a962 <__swbuf_r+0x74>
 800a952:	4638      	mov	r0, r7
 800a954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a956:	4621      	mov	r1, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f805 	bl	800a968 <__swsetup_r>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d0d5      	beq.n	800a90e <__swbuf_r+0x20>
 800a962:	f04f 37ff 	mov.w	r7, #4294967295
 800a966:	e7f4      	b.n	800a952 <__swbuf_r+0x64>

0800a968 <__swsetup_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4b2a      	ldr	r3, [pc, #168]	; (800aa14 <__swsetup_r+0xac>)
 800a96c:	4605      	mov	r5, r0
 800a96e:	6818      	ldr	r0, [r3, #0]
 800a970:	460c      	mov	r4, r1
 800a972:	b118      	cbz	r0, 800a97c <__swsetup_r+0x14>
 800a974:	6a03      	ldr	r3, [r0, #32]
 800a976:	b90b      	cbnz	r3, 800a97c <__swsetup_r+0x14>
 800a978:	f7ff fe9e 	bl	800a6b8 <__sinit>
 800a97c:	89a3      	ldrh	r3, [r4, #12]
 800a97e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a982:	0718      	lsls	r0, r3, #28
 800a984:	d422      	bmi.n	800a9cc <__swsetup_r+0x64>
 800a986:	06d9      	lsls	r1, r3, #27
 800a988:	d407      	bmi.n	800a99a <__swsetup_r+0x32>
 800a98a:	2309      	movs	r3, #9
 800a98c:	602b      	str	r3, [r5, #0]
 800a98e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a992:	f04f 30ff 	mov.w	r0, #4294967295
 800a996:	81a3      	strh	r3, [r4, #12]
 800a998:	e034      	b.n	800aa04 <__swsetup_r+0x9c>
 800a99a:	0758      	lsls	r0, r3, #29
 800a99c:	d512      	bpl.n	800a9c4 <__swsetup_r+0x5c>
 800a99e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9a0:	b141      	cbz	r1, 800a9b4 <__swsetup_r+0x4c>
 800a9a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9a6:	4299      	cmp	r1, r3
 800a9a8:	d002      	beq.n	800a9b0 <__swsetup_r+0x48>
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f000 f942 	bl	800ac34 <_free_r>
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	6363      	str	r3, [r4, #52]	; 0x34
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6063      	str	r3, [r4, #4]
 800a9c0:	6923      	ldr	r3, [r4, #16]
 800a9c2:	6023      	str	r3, [r4, #0]
 800a9c4:	89a3      	ldrh	r3, [r4, #12]
 800a9c6:	f043 0308 	orr.w	r3, r3, #8
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	6923      	ldr	r3, [r4, #16]
 800a9ce:	b94b      	cbnz	r3, 800a9e4 <__swsetup_r+0x7c>
 800a9d0:	89a3      	ldrh	r3, [r4, #12]
 800a9d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9da:	d003      	beq.n	800a9e4 <__swsetup_r+0x7c>
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 fe6d 	bl	800b6be <__smakebuf_r>
 800a9e4:	89a0      	ldrh	r0, [r4, #12]
 800a9e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9ea:	f010 0301 	ands.w	r3, r0, #1
 800a9ee:	d00a      	beq.n	800aa06 <__swsetup_r+0x9e>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	60a3      	str	r3, [r4, #8]
 800a9f4:	6963      	ldr	r3, [r4, #20]
 800a9f6:	425b      	negs	r3, r3
 800a9f8:	61a3      	str	r3, [r4, #24]
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	b943      	cbnz	r3, 800aa10 <__swsetup_r+0xa8>
 800a9fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa02:	d1c4      	bne.n	800a98e <__swsetup_r+0x26>
 800aa04:	bd38      	pop	{r3, r4, r5, pc}
 800aa06:	0781      	lsls	r1, r0, #30
 800aa08:	bf58      	it	pl
 800aa0a:	6963      	ldrpl	r3, [r4, #20]
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	e7f4      	b.n	800a9fa <__swsetup_r+0x92>
 800aa10:	2000      	movs	r0, #0
 800aa12:	e7f7      	b.n	800aa04 <__swsetup_r+0x9c>
 800aa14:	20000068 	.word	0x20000068

0800aa18 <memset>:
 800aa18:	4603      	mov	r3, r0
 800aa1a:	4402      	add	r2, r0
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d100      	bne.n	800aa22 <memset+0xa>
 800aa20:	4770      	bx	lr
 800aa22:	f803 1b01 	strb.w	r1, [r3], #1
 800aa26:	e7f9      	b.n	800aa1c <memset+0x4>

0800aa28 <strstr>:
 800aa28:	780a      	ldrb	r2, [r1, #0]
 800aa2a:	b570      	push	{r4, r5, r6, lr}
 800aa2c:	b96a      	cbnz	r2, 800aa4a <strstr+0x22>
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d109      	bne.n	800aa48 <strstr+0x20>
 800aa34:	460c      	mov	r4, r1
 800aa36:	4605      	mov	r5, r0
 800aa38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0f6      	beq.n	800aa2e <strstr+0x6>
 800aa40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800aa44:	429e      	cmp	r6, r3
 800aa46:	d0f7      	beq.n	800aa38 <strstr+0x10>
 800aa48:	3001      	adds	r0, #1
 800aa4a:	7803      	ldrb	r3, [r0, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1ef      	bne.n	800aa30 <strstr+0x8>
 800aa50:	4618      	mov	r0, r3
 800aa52:	e7ec      	b.n	800aa2e <strstr+0x6>

0800aa54 <_close_r>:
 800aa54:	b538      	push	{r3, r4, r5, lr}
 800aa56:	2300      	movs	r3, #0
 800aa58:	4d05      	ldr	r5, [pc, #20]	; (800aa70 <_close_r+0x1c>)
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	602b      	str	r3, [r5, #0]
 800aa60:	f7f9 f8ac 	bl	8003bbc <_close>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	d102      	bne.n	800aa6e <_close_r+0x1a>
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	b103      	cbz	r3, 800aa6e <_close_r+0x1a>
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	200030f4 	.word	0x200030f4

0800aa74 <_reclaim_reent>:
 800aa74:	4b29      	ldr	r3, [pc, #164]	; (800ab1c <_reclaim_reent+0xa8>)
 800aa76:	b570      	push	{r4, r5, r6, lr}
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4283      	cmp	r3, r0
 800aa7e:	d04b      	beq.n	800ab18 <_reclaim_reent+0xa4>
 800aa80:	69c3      	ldr	r3, [r0, #28]
 800aa82:	b143      	cbz	r3, 800aa96 <_reclaim_reent+0x22>
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d144      	bne.n	800ab14 <_reclaim_reent+0xa0>
 800aa8a:	69e3      	ldr	r3, [r4, #28]
 800aa8c:	6819      	ldr	r1, [r3, #0]
 800aa8e:	b111      	cbz	r1, 800aa96 <_reclaim_reent+0x22>
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 f8cf 	bl	800ac34 <_free_r>
 800aa96:	6961      	ldr	r1, [r4, #20]
 800aa98:	b111      	cbz	r1, 800aaa0 <_reclaim_reent+0x2c>
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 f8ca 	bl	800ac34 <_free_r>
 800aaa0:	69e1      	ldr	r1, [r4, #28]
 800aaa2:	b111      	cbz	r1, 800aaaa <_reclaim_reent+0x36>
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 f8c5 	bl	800ac34 <_free_r>
 800aaaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800aaac:	b111      	cbz	r1, 800aab4 <_reclaim_reent+0x40>
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f8c0 	bl	800ac34 <_free_r>
 800aab4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab6:	b111      	cbz	r1, 800aabe <_reclaim_reent+0x4a>
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 f8bb 	bl	800ac34 <_free_r>
 800aabe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800aac0:	b111      	cbz	r1, 800aac8 <_reclaim_reent+0x54>
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 f8b6 	bl	800ac34 <_free_r>
 800aac8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800aaca:	b111      	cbz	r1, 800aad2 <_reclaim_reent+0x5e>
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 f8b1 	bl	800ac34 <_free_r>
 800aad2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aad4:	b111      	cbz	r1, 800aadc <_reclaim_reent+0x68>
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 f8ac 	bl	800ac34 <_free_r>
 800aadc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800aade:	b111      	cbz	r1, 800aae6 <_reclaim_reent+0x72>
 800aae0:	4620      	mov	r0, r4
 800aae2:	f000 f8a7 	bl	800ac34 <_free_r>
 800aae6:	6a23      	ldr	r3, [r4, #32]
 800aae8:	b1b3      	cbz	r3, 800ab18 <_reclaim_reent+0xa4>
 800aaea:	4620      	mov	r0, r4
 800aaec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aaf0:	4718      	bx	r3
 800aaf2:	5949      	ldr	r1, [r1, r5]
 800aaf4:	b941      	cbnz	r1, 800ab08 <_reclaim_reent+0x94>
 800aaf6:	3504      	adds	r5, #4
 800aaf8:	69e3      	ldr	r3, [r4, #28]
 800aafa:	2d80      	cmp	r5, #128	; 0x80
 800aafc:	68d9      	ldr	r1, [r3, #12]
 800aafe:	d1f8      	bne.n	800aaf2 <_reclaim_reent+0x7e>
 800ab00:	4620      	mov	r0, r4
 800ab02:	f000 f897 	bl	800ac34 <_free_r>
 800ab06:	e7c0      	b.n	800aa8a <_reclaim_reent+0x16>
 800ab08:	680e      	ldr	r6, [r1, #0]
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f000 f892 	bl	800ac34 <_free_r>
 800ab10:	4631      	mov	r1, r6
 800ab12:	e7ef      	b.n	800aaf4 <_reclaim_reent+0x80>
 800ab14:	2500      	movs	r5, #0
 800ab16:	e7ef      	b.n	800aaf8 <_reclaim_reent+0x84>
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000068 	.word	0x20000068

0800ab20 <_lseek_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	4611      	mov	r1, r2
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4d05      	ldr	r5, [pc, #20]	; (800ab40 <_lseek_r+0x20>)
 800ab2c:	602a      	str	r2, [r5, #0]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	f7f9 f84e 	bl	8003bd0 <_lseek>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_lseek_r+0x1e>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_lseek_r+0x1e>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	200030f4 	.word	0x200030f4

0800ab44 <_read_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	4611      	mov	r1, r2
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4d05      	ldr	r5, [pc, #20]	; (800ab64 <_read_r+0x20>)
 800ab50:	602a      	str	r2, [r5, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	f7f9 f816 	bl	8003b84 <_read>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_read_r+0x1e>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_read_r+0x1e>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	200030f4 	.word	0x200030f4

0800ab68 <_sbrk_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	4d05      	ldr	r5, [pc, #20]	; (800ab84 <_sbrk_r+0x1c>)
 800ab6e:	4604      	mov	r4, r0
 800ab70:	4608      	mov	r0, r1
 800ab72:	602b      	str	r3, [r5, #0]
 800ab74:	f7f9 f82e 	bl	8003bd4 <_sbrk>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	d102      	bne.n	800ab82 <_sbrk_r+0x1a>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	b103      	cbz	r3, 800ab82 <_sbrk_r+0x1a>
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	200030f4 	.word	0x200030f4

0800ab88 <_write_r>:
 800ab88:	b538      	push	{r3, r4, r5, lr}
 800ab8a:	4604      	mov	r4, r0
 800ab8c:	4608      	mov	r0, r1
 800ab8e:	4611      	mov	r1, r2
 800ab90:	2200      	movs	r2, #0
 800ab92:	4d05      	ldr	r5, [pc, #20]	; (800aba8 <_write_r+0x20>)
 800ab94:	602a      	str	r2, [r5, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f7f9 f802 	bl	8003ba0 <_write>
 800ab9c:	1c43      	adds	r3, r0, #1
 800ab9e:	d102      	bne.n	800aba6 <_write_r+0x1e>
 800aba0:	682b      	ldr	r3, [r5, #0]
 800aba2:	b103      	cbz	r3, 800aba6 <_write_r+0x1e>
 800aba4:	6023      	str	r3, [r4, #0]
 800aba6:	bd38      	pop	{r3, r4, r5, pc}
 800aba8:	200030f4 	.word	0x200030f4

0800abac <__errno>:
 800abac:	4b01      	ldr	r3, [pc, #4]	; (800abb4 <__errno+0x8>)
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000068 	.word	0x20000068

0800abb8 <__libc_init_array>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	2600      	movs	r6, #0
 800abbc:	4d0c      	ldr	r5, [pc, #48]	; (800abf0 <__libc_init_array+0x38>)
 800abbe:	4c0d      	ldr	r4, [pc, #52]	; (800abf4 <__libc_init_array+0x3c>)
 800abc0:	1b64      	subs	r4, r4, r5
 800abc2:	10a4      	asrs	r4, r4, #2
 800abc4:	42a6      	cmp	r6, r4
 800abc6:	d109      	bne.n	800abdc <__libc_init_array+0x24>
 800abc8:	f000 fe38 	bl	800b83c <_init>
 800abcc:	2600      	movs	r6, #0
 800abce:	4d0a      	ldr	r5, [pc, #40]	; (800abf8 <__libc_init_array+0x40>)
 800abd0:	4c0a      	ldr	r4, [pc, #40]	; (800abfc <__libc_init_array+0x44>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	42a6      	cmp	r6, r4
 800abd8:	d105      	bne.n	800abe6 <__libc_init_array+0x2e>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe0:	4798      	blx	r3
 800abe2:	3601      	adds	r6, #1
 800abe4:	e7ee      	b.n	800abc4 <__libc_init_array+0xc>
 800abe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abea:	4798      	blx	r3
 800abec:	3601      	adds	r6, #1
 800abee:	e7f2      	b.n	800abd6 <__libc_init_array+0x1e>
 800abf0:	0800bc90 	.word	0x0800bc90
 800abf4:	0800bc90 	.word	0x0800bc90
 800abf8:	0800bc90 	.word	0x0800bc90
 800abfc:	0800bc94 	.word	0x0800bc94

0800ac00 <__retarget_lock_init_recursive>:
 800ac00:	4770      	bx	lr

0800ac02 <__retarget_lock_acquire_recursive>:
 800ac02:	4770      	bx	lr

0800ac04 <__retarget_lock_release_recursive>:
 800ac04:	4770      	bx	lr

0800ac06 <strcpy>:
 800ac06:	4603      	mov	r3, r0
 800ac08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac0c:	f803 2b01 	strb.w	r2, [r3], #1
 800ac10:	2a00      	cmp	r2, #0
 800ac12:	d1f9      	bne.n	800ac08 <strcpy+0x2>
 800ac14:	4770      	bx	lr

0800ac16 <memcpy>:
 800ac16:	440a      	add	r2, r1
 800ac18:	4291      	cmp	r1, r2
 800ac1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac1e:	d100      	bne.n	800ac22 <memcpy+0xc>
 800ac20:	4770      	bx	lr
 800ac22:	b510      	push	{r4, lr}
 800ac24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac28:	4291      	cmp	r1, r2
 800ac2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2e:	d1f9      	bne.n	800ac24 <memcpy+0xe>
 800ac30:	bd10      	pop	{r4, pc}
	...

0800ac34 <_free_r>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4605      	mov	r5, r0
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d040      	beq.n	800acbe <_free_r+0x8a>
 800ac3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac40:	1f0c      	subs	r4, r1, #4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	bfb8      	it	lt
 800ac46:	18e4      	addlt	r4, r4, r3
 800ac48:	f7ff fc9e 	bl	800a588 <__malloc_lock>
 800ac4c:	4a1c      	ldr	r2, [pc, #112]	; (800acc0 <_free_r+0x8c>)
 800ac4e:	6813      	ldr	r3, [r2, #0]
 800ac50:	b933      	cbnz	r3, 800ac60 <_free_r+0x2c>
 800ac52:	6063      	str	r3, [r4, #4]
 800ac54:	6014      	str	r4, [r2, #0]
 800ac56:	4628      	mov	r0, r5
 800ac58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac5c:	f7ff bc9a 	b.w	800a594 <__malloc_unlock>
 800ac60:	42a3      	cmp	r3, r4
 800ac62:	d908      	bls.n	800ac76 <_free_r+0x42>
 800ac64:	6820      	ldr	r0, [r4, #0]
 800ac66:	1821      	adds	r1, r4, r0
 800ac68:	428b      	cmp	r3, r1
 800ac6a:	bf01      	itttt	eq
 800ac6c:	6819      	ldreq	r1, [r3, #0]
 800ac6e:	685b      	ldreq	r3, [r3, #4]
 800ac70:	1809      	addeq	r1, r1, r0
 800ac72:	6021      	streq	r1, [r4, #0]
 800ac74:	e7ed      	b.n	800ac52 <_free_r+0x1e>
 800ac76:	461a      	mov	r2, r3
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	b10b      	cbz	r3, 800ac80 <_free_r+0x4c>
 800ac7c:	42a3      	cmp	r3, r4
 800ac7e:	d9fa      	bls.n	800ac76 <_free_r+0x42>
 800ac80:	6811      	ldr	r1, [r2, #0]
 800ac82:	1850      	adds	r0, r2, r1
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d10b      	bne.n	800aca0 <_free_r+0x6c>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	4401      	add	r1, r0
 800ac8c:	1850      	adds	r0, r2, r1
 800ac8e:	4283      	cmp	r3, r0
 800ac90:	6011      	str	r1, [r2, #0]
 800ac92:	d1e0      	bne.n	800ac56 <_free_r+0x22>
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	4408      	add	r0, r1
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	6053      	str	r3, [r2, #4]
 800ac9e:	e7da      	b.n	800ac56 <_free_r+0x22>
 800aca0:	d902      	bls.n	800aca8 <_free_r+0x74>
 800aca2:	230c      	movs	r3, #12
 800aca4:	602b      	str	r3, [r5, #0]
 800aca6:	e7d6      	b.n	800ac56 <_free_r+0x22>
 800aca8:	6820      	ldr	r0, [r4, #0]
 800acaa:	1821      	adds	r1, r4, r0
 800acac:	428b      	cmp	r3, r1
 800acae:	bf01      	itttt	eq
 800acb0:	6819      	ldreq	r1, [r3, #0]
 800acb2:	685b      	ldreq	r3, [r3, #4]
 800acb4:	1809      	addeq	r1, r1, r0
 800acb6:	6021      	streq	r1, [r4, #0]
 800acb8:	6063      	str	r3, [r4, #4]
 800acba:	6054      	str	r4, [r2, #4]
 800acbc:	e7cb      	b.n	800ac56 <_free_r+0x22>
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20002fb0 	.word	0x20002fb0

0800acc4 <__ssputs_r>:
 800acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	461f      	mov	r7, r3
 800acca:	688e      	ldr	r6, [r1, #8]
 800accc:	4682      	mov	sl, r0
 800acce:	42be      	cmp	r6, r7
 800acd0:	460c      	mov	r4, r1
 800acd2:	4690      	mov	r8, r2
 800acd4:	680b      	ldr	r3, [r1, #0]
 800acd6:	d82c      	bhi.n	800ad32 <__ssputs_r+0x6e>
 800acd8:	898a      	ldrh	r2, [r1, #12]
 800acda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acde:	d026      	beq.n	800ad2e <__ssputs_r+0x6a>
 800ace0:	6965      	ldr	r5, [r4, #20]
 800ace2:	6909      	ldr	r1, [r1, #16]
 800ace4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace8:	eba3 0901 	sub.w	r9, r3, r1
 800acec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acf0:	1c7b      	adds	r3, r7, #1
 800acf2:	444b      	add	r3, r9
 800acf4:	106d      	asrs	r5, r5, #1
 800acf6:	429d      	cmp	r5, r3
 800acf8:	bf38      	it	cc
 800acfa:	461d      	movcc	r5, r3
 800acfc:	0553      	lsls	r3, r2, #21
 800acfe:	d527      	bpl.n	800ad50 <__ssputs_r+0x8c>
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7ff fbc1 	bl	800a488 <_malloc_r>
 800ad06:	4606      	mov	r6, r0
 800ad08:	b360      	cbz	r0, 800ad64 <__ssputs_r+0xa0>
 800ad0a:	464a      	mov	r2, r9
 800ad0c:	6921      	ldr	r1, [r4, #16]
 800ad0e:	f7ff ff82 	bl	800ac16 <memcpy>
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	6126      	str	r6, [r4, #16]
 800ad20:	444e      	add	r6, r9
 800ad22:	6026      	str	r6, [r4, #0]
 800ad24:	463e      	mov	r6, r7
 800ad26:	6165      	str	r5, [r4, #20]
 800ad28:	eba5 0509 	sub.w	r5, r5, r9
 800ad2c:	60a5      	str	r5, [r4, #8]
 800ad2e:	42be      	cmp	r6, r7
 800ad30:	d900      	bls.n	800ad34 <__ssputs_r+0x70>
 800ad32:	463e      	mov	r6, r7
 800ad34:	4632      	mov	r2, r6
 800ad36:	4641      	mov	r1, r8
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	f000 fcfc 	bl	800b736 <memmove>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	1b9b      	subs	r3, r3, r6
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	4433      	add	r3, r6
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad50:	462a      	mov	r2, r5
 800ad52:	f000 fd3b 	bl	800b7cc <_realloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1e0      	bne.n	800ad1e <__ssputs_r+0x5a>
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	6921      	ldr	r1, [r4, #16]
 800ad60:	f7ff ff68 	bl	800ac34 <_free_r>
 800ad64:	230c      	movs	r3, #12
 800ad66:	f8ca 3000 	str.w	r3, [sl]
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	e7e9      	b.n	800ad4c <__ssputs_r+0x88>

0800ad78 <_svfiprintf_r>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	4698      	mov	r8, r3
 800ad7e:	898b      	ldrh	r3, [r1, #12]
 800ad80:	4607      	mov	r7, r0
 800ad82:	061b      	lsls	r3, r3, #24
 800ad84:	460d      	mov	r5, r1
 800ad86:	4614      	mov	r4, r2
 800ad88:	b09d      	sub	sp, #116	; 0x74
 800ad8a:	d50e      	bpl.n	800adaa <_svfiprintf_r+0x32>
 800ad8c:	690b      	ldr	r3, [r1, #16]
 800ad8e:	b963      	cbnz	r3, 800adaa <_svfiprintf_r+0x32>
 800ad90:	2140      	movs	r1, #64	; 0x40
 800ad92:	f7ff fb79 	bl	800a488 <_malloc_r>
 800ad96:	6028      	str	r0, [r5, #0]
 800ad98:	6128      	str	r0, [r5, #16]
 800ad9a:	b920      	cbnz	r0, 800ada6 <_svfiprintf_r+0x2e>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	e0d0      	b.n	800af48 <_svfiprintf_r+0x1d0>
 800ada6:	2340      	movs	r3, #64	; 0x40
 800ada8:	616b      	str	r3, [r5, #20]
 800adaa:	2300      	movs	r3, #0
 800adac:	9309      	str	r3, [sp, #36]	; 0x24
 800adae:	2320      	movs	r3, #32
 800adb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adb4:	2330      	movs	r3, #48	; 0x30
 800adb6:	f04f 0901 	mov.w	r9, #1
 800adba:	f8cd 800c 	str.w	r8, [sp, #12]
 800adbe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800af60 <_svfiprintf_r+0x1e8>
 800adc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adc6:	4623      	mov	r3, r4
 800adc8:	469a      	mov	sl, r3
 800adca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adce:	b10a      	cbz	r2, 800add4 <_svfiprintf_r+0x5c>
 800add0:	2a25      	cmp	r2, #37	; 0x25
 800add2:	d1f9      	bne.n	800adc8 <_svfiprintf_r+0x50>
 800add4:	ebba 0b04 	subs.w	fp, sl, r4
 800add8:	d00b      	beq.n	800adf2 <_svfiprintf_r+0x7a>
 800adda:	465b      	mov	r3, fp
 800addc:	4622      	mov	r2, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7ff ff6f 	bl	800acc4 <__ssputs_r>
 800ade6:	3001      	adds	r0, #1
 800ade8:	f000 80a9 	beq.w	800af3e <_svfiprintf_r+0x1c6>
 800adec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adee:	445a      	add	r2, fp
 800adf0:	9209      	str	r2, [sp, #36]	; 0x24
 800adf2:	f89a 3000 	ldrb.w	r3, [sl]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 80a1 	beq.w	800af3e <_svfiprintf_r+0x1c6>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae06:	f10a 0a01 	add.w	sl, sl, #1
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	9307      	str	r3, [sp, #28]
 800ae0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae12:	931a      	str	r3, [sp, #104]	; 0x68
 800ae14:	4654      	mov	r4, sl
 800ae16:	2205      	movs	r2, #5
 800ae18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1c:	4850      	ldr	r0, [pc, #320]	; (800af60 <_svfiprintf_r+0x1e8>)
 800ae1e:	f000 fcc7 	bl	800b7b0 <memchr>
 800ae22:	9a04      	ldr	r2, [sp, #16]
 800ae24:	b9d8      	cbnz	r0, 800ae5e <_svfiprintf_r+0xe6>
 800ae26:	06d0      	lsls	r0, r2, #27
 800ae28:	bf44      	itt	mi
 800ae2a:	2320      	movmi	r3, #32
 800ae2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae30:	0711      	lsls	r1, r2, #28
 800ae32:	bf44      	itt	mi
 800ae34:	232b      	movmi	r3, #43	; 0x2b
 800ae36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae40:	d015      	beq.n	800ae6e <_svfiprintf_r+0xf6>
 800ae42:	4654      	mov	r4, sl
 800ae44:	2000      	movs	r0, #0
 800ae46:	f04f 0c0a 	mov.w	ip, #10
 800ae4a:	9a07      	ldr	r2, [sp, #28]
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae52:	3b30      	subs	r3, #48	; 0x30
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d94d      	bls.n	800aef4 <_svfiprintf_r+0x17c>
 800ae58:	b1b0      	cbz	r0, 800ae88 <_svfiprintf_r+0x110>
 800ae5a:	9207      	str	r2, [sp, #28]
 800ae5c:	e014      	b.n	800ae88 <_svfiprintf_r+0x110>
 800ae5e:	eba0 0308 	sub.w	r3, r0, r8
 800ae62:	fa09 f303 	lsl.w	r3, r9, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	46a2      	mov	sl, r4
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	e7d2      	b.n	800ae14 <_svfiprintf_r+0x9c>
 800ae6e:	9b03      	ldr	r3, [sp, #12]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	9103      	str	r1, [sp, #12]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	bfbb      	ittet	lt
 800ae7a:	425b      	neglt	r3, r3
 800ae7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae80:	9307      	strge	r3, [sp, #28]
 800ae82:	9307      	strlt	r3, [sp, #28]
 800ae84:	bfb8      	it	lt
 800ae86:	9204      	strlt	r2, [sp, #16]
 800ae88:	7823      	ldrb	r3, [r4, #0]
 800ae8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae8c:	d10c      	bne.n	800aea8 <_svfiprintf_r+0x130>
 800ae8e:	7863      	ldrb	r3, [r4, #1]
 800ae90:	2b2a      	cmp	r3, #42	; 0x2a
 800ae92:	d134      	bne.n	800aefe <_svfiprintf_r+0x186>
 800ae94:	9b03      	ldr	r3, [sp, #12]
 800ae96:	3402      	adds	r4, #2
 800ae98:	1d1a      	adds	r2, r3, #4
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	9203      	str	r2, [sp, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	bfb8      	it	lt
 800aea2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aea6:	9305      	str	r3, [sp, #20]
 800aea8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800af64 <_svfiprintf_r+0x1ec>
 800aeac:	2203      	movs	r2, #3
 800aeae:	4650      	mov	r0, sl
 800aeb0:	7821      	ldrb	r1, [r4, #0]
 800aeb2:	f000 fc7d 	bl	800b7b0 <memchr>
 800aeb6:	b138      	cbz	r0, 800aec8 <_svfiprintf_r+0x150>
 800aeb8:	2240      	movs	r2, #64	; 0x40
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	eba0 000a 	sub.w	r0, r0, sl
 800aec0:	4082      	lsls	r2, r0
 800aec2:	4313      	orrs	r3, r2
 800aec4:	3401      	adds	r4, #1
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aecc:	2206      	movs	r2, #6
 800aece:	4826      	ldr	r0, [pc, #152]	; (800af68 <_svfiprintf_r+0x1f0>)
 800aed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aed4:	f000 fc6c 	bl	800b7b0 <memchr>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d038      	beq.n	800af4e <_svfiprintf_r+0x1d6>
 800aedc:	4b23      	ldr	r3, [pc, #140]	; (800af6c <_svfiprintf_r+0x1f4>)
 800aede:	bb1b      	cbnz	r3, 800af28 <_svfiprintf_r+0x1b0>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	3307      	adds	r3, #7
 800aee4:	f023 0307 	bic.w	r3, r3, #7
 800aee8:	3308      	adds	r3, #8
 800aeea:	9303      	str	r3, [sp, #12]
 800aeec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeee:	4433      	add	r3, r6
 800aef0:	9309      	str	r3, [sp, #36]	; 0x24
 800aef2:	e768      	b.n	800adc6 <_svfiprintf_r+0x4e>
 800aef4:	460c      	mov	r4, r1
 800aef6:	2001      	movs	r0, #1
 800aef8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aefc:	e7a6      	b.n	800ae4c <_svfiprintf_r+0xd4>
 800aefe:	2300      	movs	r3, #0
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4619      	mov	r1, r3
 800af06:	3401      	adds	r4, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af10:	3a30      	subs	r2, #48	; 0x30
 800af12:	2a09      	cmp	r2, #9
 800af14:	d903      	bls.n	800af1e <_svfiprintf_r+0x1a6>
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0c6      	beq.n	800aea8 <_svfiprintf_r+0x130>
 800af1a:	9105      	str	r1, [sp, #20]
 800af1c:	e7c4      	b.n	800aea8 <_svfiprintf_r+0x130>
 800af1e:	4604      	mov	r4, r0
 800af20:	2301      	movs	r3, #1
 800af22:	fb0c 2101 	mla	r1, ip, r1, r2
 800af26:	e7f0      	b.n	800af0a <_svfiprintf_r+0x192>
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	462a      	mov	r2, r5
 800af2e:	4638      	mov	r0, r7
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <_svfiprintf_r+0x1f8>)
 800af32:	a904      	add	r1, sp, #16
 800af34:	f3af 8000 	nop.w
 800af38:	1c42      	adds	r2, r0, #1
 800af3a:	4606      	mov	r6, r0
 800af3c:	d1d6      	bne.n	800aeec <_svfiprintf_r+0x174>
 800af3e:	89ab      	ldrh	r3, [r5, #12]
 800af40:	065b      	lsls	r3, r3, #25
 800af42:	f53f af2d 	bmi.w	800ada0 <_svfiprintf_r+0x28>
 800af46:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af48:	b01d      	add	sp, #116	; 0x74
 800af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4e:	ab03      	add	r3, sp, #12
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	462a      	mov	r2, r5
 800af54:	4638      	mov	r0, r7
 800af56:	4b06      	ldr	r3, [pc, #24]	; (800af70 <_svfiprintf_r+0x1f8>)
 800af58:	a904      	add	r1, sp, #16
 800af5a:	f000 f9bf 	bl	800b2dc <_printf_i>
 800af5e:	e7eb      	b.n	800af38 <_svfiprintf_r+0x1c0>
 800af60:	0800bc5b 	.word	0x0800bc5b
 800af64:	0800bc61 	.word	0x0800bc61
 800af68:	0800bc65 	.word	0x0800bc65
 800af6c:	00000000 	.word	0x00000000
 800af70:	0800acc5 	.word	0x0800acc5

0800af74 <__sfputc_r>:
 800af74:	6893      	ldr	r3, [r2, #8]
 800af76:	b410      	push	{r4}
 800af78:	3b01      	subs	r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	6093      	str	r3, [r2, #8]
 800af7e:	da07      	bge.n	800af90 <__sfputc_r+0x1c>
 800af80:	6994      	ldr	r4, [r2, #24]
 800af82:	42a3      	cmp	r3, r4
 800af84:	db01      	blt.n	800af8a <__sfputc_r+0x16>
 800af86:	290a      	cmp	r1, #10
 800af88:	d102      	bne.n	800af90 <__sfputc_r+0x1c>
 800af8a:	bc10      	pop	{r4}
 800af8c:	f7ff bcaf 	b.w	800a8ee <__swbuf_r>
 800af90:	6813      	ldr	r3, [r2, #0]
 800af92:	1c58      	adds	r0, r3, #1
 800af94:	6010      	str	r0, [r2, #0]
 800af96:	7019      	strb	r1, [r3, #0]
 800af98:	4608      	mov	r0, r1
 800af9a:	bc10      	pop	{r4}
 800af9c:	4770      	bx	lr

0800af9e <__sfputs_r>:
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4606      	mov	r6, r0
 800afa2:	460f      	mov	r7, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	18d5      	adds	r5, r2, r3
 800afa8:	42ac      	cmp	r4, r5
 800afaa:	d101      	bne.n	800afb0 <__sfputs_r+0x12>
 800afac:	2000      	movs	r0, #0
 800afae:	e007      	b.n	800afc0 <__sfputs_r+0x22>
 800afb0:	463a      	mov	r2, r7
 800afb2:	4630      	mov	r0, r6
 800afb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb8:	f7ff ffdc 	bl	800af74 <__sfputc_r>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d1f3      	bne.n	800afa8 <__sfputs_r+0xa>
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afc4 <_vfiprintf_r>:
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	460d      	mov	r5, r1
 800afca:	4614      	mov	r4, r2
 800afcc:	4698      	mov	r8, r3
 800afce:	4606      	mov	r6, r0
 800afd0:	b09d      	sub	sp, #116	; 0x74
 800afd2:	b118      	cbz	r0, 800afdc <_vfiprintf_r+0x18>
 800afd4:	6a03      	ldr	r3, [r0, #32]
 800afd6:	b90b      	cbnz	r3, 800afdc <_vfiprintf_r+0x18>
 800afd8:	f7ff fb6e 	bl	800a6b8 <__sinit>
 800afdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afde:	07d9      	lsls	r1, r3, #31
 800afe0:	d405      	bmi.n	800afee <_vfiprintf_r+0x2a>
 800afe2:	89ab      	ldrh	r3, [r5, #12]
 800afe4:	059a      	lsls	r2, r3, #22
 800afe6:	d402      	bmi.n	800afee <_vfiprintf_r+0x2a>
 800afe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afea:	f7ff fe0a 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800afee:	89ab      	ldrh	r3, [r5, #12]
 800aff0:	071b      	lsls	r3, r3, #28
 800aff2:	d501      	bpl.n	800aff8 <_vfiprintf_r+0x34>
 800aff4:	692b      	ldr	r3, [r5, #16]
 800aff6:	b99b      	cbnz	r3, 800b020 <_vfiprintf_r+0x5c>
 800aff8:	4629      	mov	r1, r5
 800affa:	4630      	mov	r0, r6
 800affc:	f7ff fcb4 	bl	800a968 <__swsetup_r>
 800b000:	b170      	cbz	r0, 800b020 <_vfiprintf_r+0x5c>
 800b002:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b004:	07dc      	lsls	r4, r3, #31
 800b006:	d504      	bpl.n	800b012 <_vfiprintf_r+0x4e>
 800b008:	f04f 30ff 	mov.w	r0, #4294967295
 800b00c:	b01d      	add	sp, #116	; 0x74
 800b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	0598      	lsls	r0, r3, #22
 800b016:	d4f7      	bmi.n	800b008 <_vfiprintf_r+0x44>
 800b018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b01a:	f7ff fdf3 	bl	800ac04 <__retarget_lock_release_recursive>
 800b01e:	e7f3      	b.n	800b008 <_vfiprintf_r+0x44>
 800b020:	2300      	movs	r3, #0
 800b022:	9309      	str	r3, [sp, #36]	; 0x24
 800b024:	2320      	movs	r3, #32
 800b026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b02a:	2330      	movs	r3, #48	; 0x30
 800b02c:	f04f 0901 	mov.w	r9, #1
 800b030:	f8cd 800c 	str.w	r8, [sp, #12]
 800b034:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b1e4 <_vfiprintf_r+0x220>
 800b038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b03c:	4623      	mov	r3, r4
 800b03e:	469a      	mov	sl, r3
 800b040:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b044:	b10a      	cbz	r2, 800b04a <_vfiprintf_r+0x86>
 800b046:	2a25      	cmp	r2, #37	; 0x25
 800b048:	d1f9      	bne.n	800b03e <_vfiprintf_r+0x7a>
 800b04a:	ebba 0b04 	subs.w	fp, sl, r4
 800b04e:	d00b      	beq.n	800b068 <_vfiprintf_r+0xa4>
 800b050:	465b      	mov	r3, fp
 800b052:	4622      	mov	r2, r4
 800b054:	4629      	mov	r1, r5
 800b056:	4630      	mov	r0, r6
 800b058:	f7ff ffa1 	bl	800af9e <__sfputs_r>
 800b05c:	3001      	adds	r0, #1
 800b05e:	f000 80a9 	beq.w	800b1b4 <_vfiprintf_r+0x1f0>
 800b062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b064:	445a      	add	r2, fp
 800b066:	9209      	str	r2, [sp, #36]	; 0x24
 800b068:	f89a 3000 	ldrb.w	r3, [sl]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f000 80a1 	beq.w	800b1b4 <_vfiprintf_r+0x1f0>
 800b072:	2300      	movs	r3, #0
 800b074:	f04f 32ff 	mov.w	r2, #4294967295
 800b078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b07c:	f10a 0a01 	add.w	sl, sl, #1
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	9307      	str	r3, [sp, #28]
 800b084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b088:	931a      	str	r3, [sp, #104]	; 0x68
 800b08a:	4654      	mov	r4, sl
 800b08c:	2205      	movs	r2, #5
 800b08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b092:	4854      	ldr	r0, [pc, #336]	; (800b1e4 <_vfiprintf_r+0x220>)
 800b094:	f000 fb8c 	bl	800b7b0 <memchr>
 800b098:	9a04      	ldr	r2, [sp, #16]
 800b09a:	b9d8      	cbnz	r0, 800b0d4 <_vfiprintf_r+0x110>
 800b09c:	06d1      	lsls	r1, r2, #27
 800b09e:	bf44      	itt	mi
 800b0a0:	2320      	movmi	r3, #32
 800b0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a6:	0713      	lsls	r3, r2, #28
 800b0a8:	bf44      	itt	mi
 800b0aa:	232b      	movmi	r3, #43	; 0x2b
 800b0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b6:	d015      	beq.n	800b0e4 <_vfiprintf_r+0x120>
 800b0b8:	4654      	mov	r4, sl
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f04f 0c0a 	mov.w	ip, #10
 800b0c0:	9a07      	ldr	r2, [sp, #28]
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0c8:	3b30      	subs	r3, #48	; 0x30
 800b0ca:	2b09      	cmp	r3, #9
 800b0cc:	d94d      	bls.n	800b16a <_vfiprintf_r+0x1a6>
 800b0ce:	b1b0      	cbz	r0, 800b0fe <_vfiprintf_r+0x13a>
 800b0d0:	9207      	str	r2, [sp, #28]
 800b0d2:	e014      	b.n	800b0fe <_vfiprintf_r+0x13a>
 800b0d4:	eba0 0308 	sub.w	r3, r0, r8
 800b0d8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	46a2      	mov	sl, r4
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	e7d2      	b.n	800b08a <_vfiprintf_r+0xc6>
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	1d19      	adds	r1, r3, #4
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	9103      	str	r1, [sp, #12]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bfbb      	ittet	lt
 800b0f0:	425b      	neglt	r3, r3
 800b0f2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0f6:	9307      	strge	r3, [sp, #28]
 800b0f8:	9307      	strlt	r3, [sp, #28]
 800b0fa:	bfb8      	it	lt
 800b0fc:	9204      	strlt	r2, [sp, #16]
 800b0fe:	7823      	ldrb	r3, [r4, #0]
 800b100:	2b2e      	cmp	r3, #46	; 0x2e
 800b102:	d10c      	bne.n	800b11e <_vfiprintf_r+0x15a>
 800b104:	7863      	ldrb	r3, [r4, #1]
 800b106:	2b2a      	cmp	r3, #42	; 0x2a
 800b108:	d134      	bne.n	800b174 <_vfiprintf_r+0x1b0>
 800b10a:	9b03      	ldr	r3, [sp, #12]
 800b10c:	3402      	adds	r4, #2
 800b10e:	1d1a      	adds	r2, r3, #4
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	9203      	str	r2, [sp, #12]
 800b114:	2b00      	cmp	r3, #0
 800b116:	bfb8      	it	lt
 800b118:	f04f 33ff 	movlt.w	r3, #4294967295
 800b11c:	9305      	str	r3, [sp, #20]
 800b11e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1e8 <_vfiprintf_r+0x224>
 800b122:	2203      	movs	r2, #3
 800b124:	4650      	mov	r0, sl
 800b126:	7821      	ldrb	r1, [r4, #0]
 800b128:	f000 fb42 	bl	800b7b0 <memchr>
 800b12c:	b138      	cbz	r0, 800b13e <_vfiprintf_r+0x17a>
 800b12e:	2240      	movs	r2, #64	; 0x40
 800b130:	9b04      	ldr	r3, [sp, #16]
 800b132:	eba0 000a 	sub.w	r0, r0, sl
 800b136:	4082      	lsls	r2, r0
 800b138:	4313      	orrs	r3, r2
 800b13a:	3401      	adds	r4, #1
 800b13c:	9304      	str	r3, [sp, #16]
 800b13e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b142:	2206      	movs	r2, #6
 800b144:	4829      	ldr	r0, [pc, #164]	; (800b1ec <_vfiprintf_r+0x228>)
 800b146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b14a:	f000 fb31 	bl	800b7b0 <memchr>
 800b14e:	2800      	cmp	r0, #0
 800b150:	d03f      	beq.n	800b1d2 <_vfiprintf_r+0x20e>
 800b152:	4b27      	ldr	r3, [pc, #156]	; (800b1f0 <_vfiprintf_r+0x22c>)
 800b154:	bb1b      	cbnz	r3, 800b19e <_vfiprintf_r+0x1da>
 800b156:	9b03      	ldr	r3, [sp, #12]
 800b158:	3307      	adds	r3, #7
 800b15a:	f023 0307 	bic.w	r3, r3, #7
 800b15e:	3308      	adds	r3, #8
 800b160:	9303      	str	r3, [sp, #12]
 800b162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b164:	443b      	add	r3, r7
 800b166:	9309      	str	r3, [sp, #36]	; 0x24
 800b168:	e768      	b.n	800b03c <_vfiprintf_r+0x78>
 800b16a:	460c      	mov	r4, r1
 800b16c:	2001      	movs	r0, #1
 800b16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b172:	e7a6      	b.n	800b0c2 <_vfiprintf_r+0xfe>
 800b174:	2300      	movs	r3, #0
 800b176:	f04f 0c0a 	mov.w	ip, #10
 800b17a:	4619      	mov	r1, r3
 800b17c:	3401      	adds	r4, #1
 800b17e:	9305      	str	r3, [sp, #20]
 800b180:	4620      	mov	r0, r4
 800b182:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b186:	3a30      	subs	r2, #48	; 0x30
 800b188:	2a09      	cmp	r2, #9
 800b18a:	d903      	bls.n	800b194 <_vfiprintf_r+0x1d0>
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0c6      	beq.n	800b11e <_vfiprintf_r+0x15a>
 800b190:	9105      	str	r1, [sp, #20]
 800b192:	e7c4      	b.n	800b11e <_vfiprintf_r+0x15a>
 800b194:	4604      	mov	r4, r0
 800b196:	2301      	movs	r3, #1
 800b198:	fb0c 2101 	mla	r1, ip, r1, r2
 800b19c:	e7f0      	b.n	800b180 <_vfiprintf_r+0x1bc>
 800b19e:	ab03      	add	r3, sp, #12
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	462a      	mov	r2, r5
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	4b13      	ldr	r3, [pc, #76]	; (800b1f4 <_vfiprintf_r+0x230>)
 800b1a8:	a904      	add	r1, sp, #16
 800b1aa:	f3af 8000 	nop.w
 800b1ae:	4607      	mov	r7, r0
 800b1b0:	1c78      	adds	r0, r7, #1
 800b1b2:	d1d6      	bne.n	800b162 <_vfiprintf_r+0x19e>
 800b1b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b6:	07d9      	lsls	r1, r3, #31
 800b1b8:	d405      	bmi.n	800b1c6 <_vfiprintf_r+0x202>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	059a      	lsls	r2, r3, #22
 800b1be:	d402      	bmi.n	800b1c6 <_vfiprintf_r+0x202>
 800b1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1c2:	f7ff fd1f 	bl	800ac04 <__retarget_lock_release_recursive>
 800b1c6:	89ab      	ldrh	r3, [r5, #12]
 800b1c8:	065b      	lsls	r3, r3, #25
 800b1ca:	f53f af1d 	bmi.w	800b008 <_vfiprintf_r+0x44>
 800b1ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1d0:	e71c      	b.n	800b00c <_vfiprintf_r+0x48>
 800b1d2:	ab03      	add	r3, sp, #12
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	462a      	mov	r2, r5
 800b1d8:	4630      	mov	r0, r6
 800b1da:	4b06      	ldr	r3, [pc, #24]	; (800b1f4 <_vfiprintf_r+0x230>)
 800b1dc:	a904      	add	r1, sp, #16
 800b1de:	f000 f87d 	bl	800b2dc <_printf_i>
 800b1e2:	e7e4      	b.n	800b1ae <_vfiprintf_r+0x1ea>
 800b1e4:	0800bc5b 	.word	0x0800bc5b
 800b1e8:	0800bc61 	.word	0x0800bc61
 800b1ec:	0800bc65 	.word	0x0800bc65
 800b1f0:	00000000 	.word	0x00000000
 800b1f4:	0800af9f 	.word	0x0800af9f

0800b1f8 <_printf_common>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	4616      	mov	r6, r2
 800b1fe:	4699      	mov	r9, r3
 800b200:	688a      	ldr	r2, [r1, #8]
 800b202:	690b      	ldr	r3, [r1, #16]
 800b204:	4607      	mov	r7, r0
 800b206:	4293      	cmp	r3, r2
 800b208:	bfb8      	it	lt
 800b20a:	4613      	movlt	r3, r2
 800b20c:	6033      	str	r3, [r6, #0]
 800b20e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b212:	460c      	mov	r4, r1
 800b214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b218:	b10a      	cbz	r2, 800b21e <_printf_common+0x26>
 800b21a:	3301      	adds	r3, #1
 800b21c:	6033      	str	r3, [r6, #0]
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	0699      	lsls	r1, r3, #26
 800b222:	bf42      	ittt	mi
 800b224:	6833      	ldrmi	r3, [r6, #0]
 800b226:	3302      	addmi	r3, #2
 800b228:	6033      	strmi	r3, [r6, #0]
 800b22a:	6825      	ldr	r5, [r4, #0]
 800b22c:	f015 0506 	ands.w	r5, r5, #6
 800b230:	d106      	bne.n	800b240 <_printf_common+0x48>
 800b232:	f104 0a19 	add.w	sl, r4, #25
 800b236:	68e3      	ldr	r3, [r4, #12]
 800b238:	6832      	ldr	r2, [r6, #0]
 800b23a:	1a9b      	subs	r3, r3, r2
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dc2b      	bgt.n	800b298 <_printf_common+0xa0>
 800b240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b244:	1e13      	subs	r3, r2, #0
 800b246:	6822      	ldr	r2, [r4, #0]
 800b248:	bf18      	it	ne
 800b24a:	2301      	movne	r3, #1
 800b24c:	0692      	lsls	r2, r2, #26
 800b24e:	d430      	bmi.n	800b2b2 <_printf_common+0xba>
 800b250:	4649      	mov	r1, r9
 800b252:	4638      	mov	r0, r7
 800b254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b258:	47c0      	blx	r8
 800b25a:	3001      	adds	r0, #1
 800b25c:	d023      	beq.n	800b2a6 <_printf_common+0xae>
 800b25e:	6823      	ldr	r3, [r4, #0]
 800b260:	6922      	ldr	r2, [r4, #16]
 800b262:	f003 0306 	and.w	r3, r3, #6
 800b266:	2b04      	cmp	r3, #4
 800b268:	bf14      	ite	ne
 800b26a:	2500      	movne	r5, #0
 800b26c:	6833      	ldreq	r3, [r6, #0]
 800b26e:	f04f 0600 	mov.w	r6, #0
 800b272:	bf08      	it	eq
 800b274:	68e5      	ldreq	r5, [r4, #12]
 800b276:	f104 041a 	add.w	r4, r4, #26
 800b27a:	bf08      	it	eq
 800b27c:	1aed      	subeq	r5, r5, r3
 800b27e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b282:	bf08      	it	eq
 800b284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b288:	4293      	cmp	r3, r2
 800b28a:	bfc4      	itt	gt
 800b28c:	1a9b      	subgt	r3, r3, r2
 800b28e:	18ed      	addgt	r5, r5, r3
 800b290:	42b5      	cmp	r5, r6
 800b292:	d11a      	bne.n	800b2ca <_printf_common+0xd2>
 800b294:	2000      	movs	r0, #0
 800b296:	e008      	b.n	800b2aa <_printf_common+0xb2>
 800b298:	2301      	movs	r3, #1
 800b29a:	4652      	mov	r2, sl
 800b29c:	4649      	mov	r1, r9
 800b29e:	4638      	mov	r0, r7
 800b2a0:	47c0      	blx	r8
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d103      	bne.n	800b2ae <_printf_common+0xb6>
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	3501      	adds	r5, #1
 800b2b0:	e7c1      	b.n	800b236 <_printf_common+0x3e>
 800b2b2:	2030      	movs	r0, #48	; 0x30
 800b2b4:	18e1      	adds	r1, r4, r3
 800b2b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2c0:	4422      	add	r2, r4
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2c8:	e7c2      	b.n	800b250 <_printf_common+0x58>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	47c0      	blx	r8
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d0e6      	beq.n	800b2a6 <_printf_common+0xae>
 800b2d8:	3601      	adds	r6, #1
 800b2da:	e7d9      	b.n	800b290 <_printf_common+0x98>

0800b2dc <_printf_i>:
 800b2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e0:	7e0f      	ldrb	r7, [r1, #24]
 800b2e2:	4691      	mov	r9, r2
 800b2e4:	2f78      	cmp	r7, #120	; 0x78
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	469a      	mov	sl, r3
 800b2ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2f2:	d807      	bhi.n	800b304 <_printf_i+0x28>
 800b2f4:	2f62      	cmp	r7, #98	; 0x62
 800b2f6:	d80a      	bhi.n	800b30e <_printf_i+0x32>
 800b2f8:	2f00      	cmp	r7, #0
 800b2fa:	f000 80d5 	beq.w	800b4a8 <_printf_i+0x1cc>
 800b2fe:	2f58      	cmp	r7, #88	; 0x58
 800b300:	f000 80c1 	beq.w	800b486 <_printf_i+0x1aa>
 800b304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b30c:	e03a      	b.n	800b384 <_printf_i+0xa8>
 800b30e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b312:	2b15      	cmp	r3, #21
 800b314:	d8f6      	bhi.n	800b304 <_printf_i+0x28>
 800b316:	a101      	add	r1, pc, #4	; (adr r1, 800b31c <_printf_i+0x40>)
 800b318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b31c:	0800b375 	.word	0x0800b375
 800b320:	0800b389 	.word	0x0800b389
 800b324:	0800b305 	.word	0x0800b305
 800b328:	0800b305 	.word	0x0800b305
 800b32c:	0800b305 	.word	0x0800b305
 800b330:	0800b305 	.word	0x0800b305
 800b334:	0800b389 	.word	0x0800b389
 800b338:	0800b305 	.word	0x0800b305
 800b33c:	0800b305 	.word	0x0800b305
 800b340:	0800b305 	.word	0x0800b305
 800b344:	0800b305 	.word	0x0800b305
 800b348:	0800b48f 	.word	0x0800b48f
 800b34c:	0800b3b5 	.word	0x0800b3b5
 800b350:	0800b449 	.word	0x0800b449
 800b354:	0800b305 	.word	0x0800b305
 800b358:	0800b305 	.word	0x0800b305
 800b35c:	0800b4b1 	.word	0x0800b4b1
 800b360:	0800b305 	.word	0x0800b305
 800b364:	0800b3b5 	.word	0x0800b3b5
 800b368:	0800b305 	.word	0x0800b305
 800b36c:	0800b305 	.word	0x0800b305
 800b370:	0800b451 	.word	0x0800b451
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	1d1a      	adds	r2, r3, #4
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	602a      	str	r2, [r5, #0]
 800b37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b384:	2301      	movs	r3, #1
 800b386:	e0a0      	b.n	800b4ca <_printf_i+0x1ee>
 800b388:	6820      	ldr	r0, [r4, #0]
 800b38a:	682b      	ldr	r3, [r5, #0]
 800b38c:	0607      	lsls	r7, r0, #24
 800b38e:	f103 0104 	add.w	r1, r3, #4
 800b392:	6029      	str	r1, [r5, #0]
 800b394:	d501      	bpl.n	800b39a <_printf_i+0xbe>
 800b396:	681e      	ldr	r6, [r3, #0]
 800b398:	e003      	b.n	800b3a2 <_printf_i+0xc6>
 800b39a:	0646      	lsls	r6, r0, #25
 800b39c:	d5fb      	bpl.n	800b396 <_printf_i+0xba>
 800b39e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	da03      	bge.n	800b3ae <_printf_i+0xd2>
 800b3a6:	232d      	movs	r3, #45	; 0x2d
 800b3a8:	4276      	negs	r6, r6
 800b3aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ae:	230a      	movs	r3, #10
 800b3b0:	4859      	ldr	r0, [pc, #356]	; (800b518 <_printf_i+0x23c>)
 800b3b2:	e012      	b.n	800b3da <_printf_i+0xfe>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	1d19      	adds	r1, r3, #4
 800b3ba:	6029      	str	r1, [r5, #0]
 800b3bc:	0605      	lsls	r5, r0, #24
 800b3be:	d501      	bpl.n	800b3c4 <_printf_i+0xe8>
 800b3c0:	681e      	ldr	r6, [r3, #0]
 800b3c2:	e002      	b.n	800b3ca <_printf_i+0xee>
 800b3c4:	0641      	lsls	r1, r0, #25
 800b3c6:	d5fb      	bpl.n	800b3c0 <_printf_i+0xe4>
 800b3c8:	881e      	ldrh	r6, [r3, #0]
 800b3ca:	2f6f      	cmp	r7, #111	; 0x6f
 800b3cc:	bf0c      	ite	eq
 800b3ce:	2308      	moveq	r3, #8
 800b3d0:	230a      	movne	r3, #10
 800b3d2:	4851      	ldr	r0, [pc, #324]	; (800b518 <_printf_i+0x23c>)
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3da:	6865      	ldr	r5, [r4, #4]
 800b3dc:	2d00      	cmp	r5, #0
 800b3de:	bfa8      	it	ge
 800b3e0:	6821      	ldrge	r1, [r4, #0]
 800b3e2:	60a5      	str	r5, [r4, #8]
 800b3e4:	bfa4      	itt	ge
 800b3e6:	f021 0104 	bicge.w	r1, r1, #4
 800b3ea:	6021      	strge	r1, [r4, #0]
 800b3ec:	b90e      	cbnz	r6, 800b3f2 <_printf_i+0x116>
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	d04b      	beq.n	800b48a <_printf_i+0x1ae>
 800b3f2:	4615      	mov	r5, r2
 800b3f4:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3f8:	fb03 6711 	mls	r7, r3, r1, r6
 800b3fc:	5dc7      	ldrb	r7, [r0, r7]
 800b3fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b402:	4637      	mov	r7, r6
 800b404:	42bb      	cmp	r3, r7
 800b406:	460e      	mov	r6, r1
 800b408:	d9f4      	bls.n	800b3f4 <_printf_i+0x118>
 800b40a:	2b08      	cmp	r3, #8
 800b40c:	d10b      	bne.n	800b426 <_printf_i+0x14a>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	07de      	lsls	r6, r3, #31
 800b412:	d508      	bpl.n	800b426 <_printf_i+0x14a>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	6861      	ldr	r1, [r4, #4]
 800b418:	4299      	cmp	r1, r3
 800b41a:	bfde      	ittt	le
 800b41c:	2330      	movle	r3, #48	; 0x30
 800b41e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b422:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b426:	1b52      	subs	r2, r2, r5
 800b428:	6122      	str	r2, [r4, #16]
 800b42a:	464b      	mov	r3, r9
 800b42c:	4621      	mov	r1, r4
 800b42e:	4640      	mov	r0, r8
 800b430:	f8cd a000 	str.w	sl, [sp]
 800b434:	aa03      	add	r2, sp, #12
 800b436:	f7ff fedf 	bl	800b1f8 <_printf_common>
 800b43a:	3001      	adds	r0, #1
 800b43c:	d14a      	bne.n	800b4d4 <_printf_i+0x1f8>
 800b43e:	f04f 30ff 	mov.w	r0, #4294967295
 800b442:	b004      	add	sp, #16
 800b444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	f043 0320 	orr.w	r3, r3, #32
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	2778      	movs	r7, #120	; 0x78
 800b452:	4832      	ldr	r0, [pc, #200]	; (800b51c <_printf_i+0x240>)
 800b454:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	6829      	ldr	r1, [r5, #0]
 800b45c:	061f      	lsls	r7, r3, #24
 800b45e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b462:	d402      	bmi.n	800b46a <_printf_i+0x18e>
 800b464:	065f      	lsls	r7, r3, #25
 800b466:	bf48      	it	mi
 800b468:	b2b6      	uxthmi	r6, r6
 800b46a:	07df      	lsls	r7, r3, #31
 800b46c:	bf48      	it	mi
 800b46e:	f043 0320 	orrmi.w	r3, r3, #32
 800b472:	6029      	str	r1, [r5, #0]
 800b474:	bf48      	it	mi
 800b476:	6023      	strmi	r3, [r4, #0]
 800b478:	b91e      	cbnz	r6, 800b482 <_printf_i+0x1a6>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	f023 0320 	bic.w	r3, r3, #32
 800b480:	6023      	str	r3, [r4, #0]
 800b482:	2310      	movs	r3, #16
 800b484:	e7a6      	b.n	800b3d4 <_printf_i+0xf8>
 800b486:	4824      	ldr	r0, [pc, #144]	; (800b518 <_printf_i+0x23c>)
 800b488:	e7e4      	b.n	800b454 <_printf_i+0x178>
 800b48a:	4615      	mov	r5, r2
 800b48c:	e7bd      	b.n	800b40a <_printf_i+0x12e>
 800b48e:	682b      	ldr	r3, [r5, #0]
 800b490:	6826      	ldr	r6, [r4, #0]
 800b492:	1d18      	adds	r0, r3, #4
 800b494:	6961      	ldr	r1, [r4, #20]
 800b496:	6028      	str	r0, [r5, #0]
 800b498:	0635      	lsls	r5, r6, #24
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	d501      	bpl.n	800b4a2 <_printf_i+0x1c6>
 800b49e:	6019      	str	r1, [r3, #0]
 800b4a0:	e002      	b.n	800b4a8 <_printf_i+0x1cc>
 800b4a2:	0670      	lsls	r0, r6, #25
 800b4a4:	d5fb      	bpl.n	800b49e <_printf_i+0x1c2>
 800b4a6:	8019      	strh	r1, [r3, #0]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4615      	mov	r5, r2
 800b4ac:	6123      	str	r3, [r4, #16]
 800b4ae:	e7bc      	b.n	800b42a <_printf_i+0x14e>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	602a      	str	r2, [r5, #0]
 800b4b8:	681d      	ldr	r5, [r3, #0]
 800b4ba:	6862      	ldr	r2, [r4, #4]
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f000 f977 	bl	800b7b0 <memchr>
 800b4c2:	b108      	cbz	r0, 800b4c8 <_printf_i+0x1ec>
 800b4c4:	1b40      	subs	r0, r0, r5
 800b4c6:	6060      	str	r0, [r4, #4]
 800b4c8:	6863      	ldr	r3, [r4, #4]
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d2:	e7aa      	b.n	800b42a <_printf_i+0x14e>
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	4640      	mov	r0, r8
 800b4da:	6923      	ldr	r3, [r4, #16]
 800b4dc:	47d0      	blx	sl
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d0ad      	beq.n	800b43e <_printf_i+0x162>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	079b      	lsls	r3, r3, #30
 800b4e6:	d413      	bmi.n	800b510 <_printf_i+0x234>
 800b4e8:	68e0      	ldr	r0, [r4, #12]
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	4298      	cmp	r0, r3
 800b4ee:	bfb8      	it	lt
 800b4f0:	4618      	movlt	r0, r3
 800b4f2:	e7a6      	b.n	800b442 <_printf_i+0x166>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	4632      	mov	r2, r6
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	47d0      	blx	sl
 800b4fe:	3001      	adds	r0, #1
 800b500:	d09d      	beq.n	800b43e <_printf_i+0x162>
 800b502:	3501      	adds	r5, #1
 800b504:	68e3      	ldr	r3, [r4, #12]
 800b506:	9903      	ldr	r1, [sp, #12]
 800b508:	1a5b      	subs	r3, r3, r1
 800b50a:	42ab      	cmp	r3, r5
 800b50c:	dcf2      	bgt.n	800b4f4 <_printf_i+0x218>
 800b50e:	e7eb      	b.n	800b4e8 <_printf_i+0x20c>
 800b510:	2500      	movs	r5, #0
 800b512:	f104 0619 	add.w	r6, r4, #25
 800b516:	e7f5      	b.n	800b504 <_printf_i+0x228>
 800b518:	0800bc6c 	.word	0x0800bc6c
 800b51c:	0800bc7d 	.word	0x0800bc7d

0800b520 <__sflush_r>:
 800b520:	898a      	ldrh	r2, [r1, #12]
 800b522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b524:	4605      	mov	r5, r0
 800b526:	0710      	lsls	r0, r2, #28
 800b528:	460c      	mov	r4, r1
 800b52a:	d457      	bmi.n	800b5dc <__sflush_r+0xbc>
 800b52c:	684b      	ldr	r3, [r1, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	dc04      	bgt.n	800b53c <__sflush_r+0x1c>
 800b532:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc01      	bgt.n	800b53c <__sflush_r+0x1c>
 800b538:	2000      	movs	r0, #0
 800b53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b53e:	2e00      	cmp	r6, #0
 800b540:	d0fa      	beq.n	800b538 <__sflush_r+0x18>
 800b542:	2300      	movs	r3, #0
 800b544:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b548:	682f      	ldr	r7, [r5, #0]
 800b54a:	6a21      	ldr	r1, [r4, #32]
 800b54c:	602b      	str	r3, [r5, #0]
 800b54e:	d032      	beq.n	800b5b6 <__sflush_r+0x96>
 800b550:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	075a      	lsls	r2, r3, #29
 800b556:	d505      	bpl.n	800b564 <__sflush_r+0x44>
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	1ac0      	subs	r0, r0, r3
 800b55c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b55e:	b10b      	cbz	r3, 800b564 <__sflush_r+0x44>
 800b560:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b562:	1ac0      	subs	r0, r0, r3
 800b564:	2300      	movs	r3, #0
 800b566:	4602      	mov	r2, r0
 800b568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b56a:	4628      	mov	r0, r5
 800b56c:	6a21      	ldr	r1, [r4, #32]
 800b56e:	47b0      	blx	r6
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	d106      	bne.n	800b584 <__sflush_r+0x64>
 800b576:	6829      	ldr	r1, [r5, #0]
 800b578:	291d      	cmp	r1, #29
 800b57a:	d82b      	bhi.n	800b5d4 <__sflush_r+0xb4>
 800b57c:	4a28      	ldr	r2, [pc, #160]	; (800b620 <__sflush_r+0x100>)
 800b57e:	410a      	asrs	r2, r1
 800b580:	07d6      	lsls	r6, r2, #31
 800b582:	d427      	bmi.n	800b5d4 <__sflush_r+0xb4>
 800b584:	2200      	movs	r2, #0
 800b586:	6062      	str	r2, [r4, #4]
 800b588:	6922      	ldr	r2, [r4, #16]
 800b58a:	04d9      	lsls	r1, r3, #19
 800b58c:	6022      	str	r2, [r4, #0]
 800b58e:	d504      	bpl.n	800b59a <__sflush_r+0x7a>
 800b590:	1c42      	adds	r2, r0, #1
 800b592:	d101      	bne.n	800b598 <__sflush_r+0x78>
 800b594:	682b      	ldr	r3, [r5, #0]
 800b596:	b903      	cbnz	r3, 800b59a <__sflush_r+0x7a>
 800b598:	6560      	str	r0, [r4, #84]	; 0x54
 800b59a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b59c:	602f      	str	r7, [r5, #0]
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	d0ca      	beq.n	800b538 <__sflush_r+0x18>
 800b5a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	d002      	beq.n	800b5b0 <__sflush_r+0x90>
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f7ff fb42 	bl	800ac34 <_free_r>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5b4:	e7c1      	b.n	800b53a <__sflush_r+0x1a>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	47b0      	blx	r6
 800b5bc:	1c41      	adds	r1, r0, #1
 800b5be:	d1c8      	bne.n	800b552 <__sflush_r+0x32>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c5      	beq.n	800b552 <__sflush_r+0x32>
 800b5c6:	2b1d      	cmp	r3, #29
 800b5c8:	d001      	beq.n	800b5ce <__sflush_r+0xae>
 800b5ca:	2b16      	cmp	r3, #22
 800b5cc:	d101      	bne.n	800b5d2 <__sflush_r+0xb2>
 800b5ce:	602f      	str	r7, [r5, #0]
 800b5d0:	e7b2      	b.n	800b538 <__sflush_r+0x18>
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	e7ae      	b.n	800b53a <__sflush_r+0x1a>
 800b5dc:	690f      	ldr	r7, [r1, #16]
 800b5de:	2f00      	cmp	r7, #0
 800b5e0:	d0aa      	beq.n	800b538 <__sflush_r+0x18>
 800b5e2:	0793      	lsls	r3, r2, #30
 800b5e4:	bf18      	it	ne
 800b5e6:	2300      	movne	r3, #0
 800b5e8:	680e      	ldr	r6, [r1, #0]
 800b5ea:	bf08      	it	eq
 800b5ec:	694b      	ldreq	r3, [r1, #20]
 800b5ee:	1bf6      	subs	r6, r6, r7
 800b5f0:	600f      	str	r7, [r1, #0]
 800b5f2:	608b      	str	r3, [r1, #8]
 800b5f4:	2e00      	cmp	r6, #0
 800b5f6:	dd9f      	ble.n	800b538 <__sflush_r+0x18>
 800b5f8:	4633      	mov	r3, r6
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	6a21      	ldr	r1, [r4, #32]
 800b600:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b604:	47e0      	blx	ip
 800b606:	2800      	cmp	r0, #0
 800b608:	dc06      	bgt.n	800b618 <__sflush_r+0xf8>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b614:	81a3      	strh	r3, [r4, #12]
 800b616:	e790      	b.n	800b53a <__sflush_r+0x1a>
 800b618:	4407      	add	r7, r0
 800b61a:	1a36      	subs	r6, r6, r0
 800b61c:	e7ea      	b.n	800b5f4 <__sflush_r+0xd4>
 800b61e:	bf00      	nop
 800b620:	dfbffffe 	.word	0xdfbffffe

0800b624 <_fflush_r>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	690b      	ldr	r3, [r1, #16]
 800b628:	4605      	mov	r5, r0
 800b62a:	460c      	mov	r4, r1
 800b62c:	b913      	cbnz	r3, 800b634 <_fflush_r+0x10>
 800b62e:	2500      	movs	r5, #0
 800b630:	4628      	mov	r0, r5
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	b118      	cbz	r0, 800b63e <_fflush_r+0x1a>
 800b636:	6a03      	ldr	r3, [r0, #32]
 800b638:	b90b      	cbnz	r3, 800b63e <_fflush_r+0x1a>
 800b63a:	f7ff f83d 	bl	800a6b8 <__sinit>
 800b63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0f3      	beq.n	800b62e <_fflush_r+0xa>
 800b646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b648:	07d0      	lsls	r0, r2, #31
 800b64a:	d404      	bmi.n	800b656 <_fflush_r+0x32>
 800b64c:	0599      	lsls	r1, r3, #22
 800b64e:	d402      	bmi.n	800b656 <_fflush_r+0x32>
 800b650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b652:	f7ff fad6 	bl	800ac02 <__retarget_lock_acquire_recursive>
 800b656:	4628      	mov	r0, r5
 800b658:	4621      	mov	r1, r4
 800b65a:	f7ff ff61 	bl	800b520 <__sflush_r>
 800b65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b660:	4605      	mov	r5, r0
 800b662:	07da      	lsls	r2, r3, #31
 800b664:	d4e4      	bmi.n	800b630 <_fflush_r+0xc>
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	059b      	lsls	r3, r3, #22
 800b66a:	d4e1      	bmi.n	800b630 <_fflush_r+0xc>
 800b66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b66e:	f7ff fac9 	bl	800ac04 <__retarget_lock_release_recursive>
 800b672:	e7dd      	b.n	800b630 <_fflush_r+0xc>

0800b674 <__swhatbuf_r>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	460c      	mov	r4, r1
 800b678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b67c:	4615      	mov	r5, r2
 800b67e:	2900      	cmp	r1, #0
 800b680:	461e      	mov	r6, r3
 800b682:	b096      	sub	sp, #88	; 0x58
 800b684:	da0c      	bge.n	800b6a0 <__swhatbuf_r+0x2c>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	2100      	movs	r1, #0
 800b68a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b68e:	bf0c      	ite	eq
 800b690:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b694:	2340      	movne	r3, #64	; 0x40
 800b696:	2000      	movs	r0, #0
 800b698:	6031      	str	r1, [r6, #0]
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	b016      	add	sp, #88	; 0x58
 800b69e:	bd70      	pop	{r4, r5, r6, pc}
 800b6a0:	466a      	mov	r2, sp
 800b6a2:	f000 f863 	bl	800b76c <_fstat_r>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	dbed      	blt.n	800b686 <__swhatbuf_r+0x12>
 800b6aa:	9901      	ldr	r1, [sp, #4]
 800b6ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6b4:	4259      	negs	r1, r3
 800b6b6:	4159      	adcs	r1, r3
 800b6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6bc:	e7eb      	b.n	800b696 <__swhatbuf_r+0x22>

0800b6be <__smakebuf_r>:
 800b6be:	898b      	ldrh	r3, [r1, #12]
 800b6c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6c2:	079d      	lsls	r5, r3, #30
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	d507      	bpl.n	800b6da <__smakebuf_r+0x1c>
 800b6ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	6123      	str	r3, [r4, #16]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	b002      	add	sp, #8
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
 800b6da:	466a      	mov	r2, sp
 800b6dc:	ab01      	add	r3, sp, #4
 800b6de:	f7ff ffc9 	bl	800b674 <__swhatbuf_r>
 800b6e2:	9900      	ldr	r1, [sp, #0]
 800b6e4:	4605      	mov	r5, r0
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7fe fece 	bl	800a488 <_malloc_r>
 800b6ec:	b948      	cbnz	r0, 800b702 <__smakebuf_r+0x44>
 800b6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f2:	059a      	lsls	r2, r3, #22
 800b6f4:	d4ef      	bmi.n	800b6d6 <__smakebuf_r+0x18>
 800b6f6:	f023 0303 	bic.w	r3, r3, #3
 800b6fa:	f043 0302 	orr.w	r3, r3, #2
 800b6fe:	81a3      	strh	r3, [r4, #12]
 800b700:	e7e3      	b.n	800b6ca <__smakebuf_r+0xc>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	6020      	str	r0, [r4, #0]
 800b706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	9b00      	ldr	r3, [sp, #0]
 800b70e:	6120      	str	r0, [r4, #16]
 800b710:	6163      	str	r3, [r4, #20]
 800b712:	9b01      	ldr	r3, [sp, #4]
 800b714:	b15b      	cbz	r3, 800b72e <__smakebuf_r+0x70>
 800b716:	4630      	mov	r0, r6
 800b718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b71c:	f000 f838 	bl	800b790 <_isatty_r>
 800b720:	b128      	cbz	r0, 800b72e <__smakebuf_r+0x70>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	f043 0301 	orr.w	r3, r3, #1
 800b72c:	81a3      	strh	r3, [r4, #12]
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	431d      	orrs	r5, r3
 800b732:	81a5      	strh	r5, [r4, #12]
 800b734:	e7cf      	b.n	800b6d6 <__smakebuf_r+0x18>

0800b736 <memmove>:
 800b736:	4288      	cmp	r0, r1
 800b738:	b510      	push	{r4, lr}
 800b73a:	eb01 0402 	add.w	r4, r1, r2
 800b73e:	d902      	bls.n	800b746 <memmove+0x10>
 800b740:	4284      	cmp	r4, r0
 800b742:	4623      	mov	r3, r4
 800b744:	d807      	bhi.n	800b756 <memmove+0x20>
 800b746:	1e43      	subs	r3, r0, #1
 800b748:	42a1      	cmp	r1, r4
 800b74a:	d008      	beq.n	800b75e <memmove+0x28>
 800b74c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b750:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b754:	e7f8      	b.n	800b748 <memmove+0x12>
 800b756:	4601      	mov	r1, r0
 800b758:	4402      	add	r2, r0
 800b75a:	428a      	cmp	r2, r1
 800b75c:	d100      	bne.n	800b760 <memmove+0x2a>
 800b75e:	bd10      	pop	{r4, pc}
 800b760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b764:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b768:	e7f7      	b.n	800b75a <memmove+0x24>
	...

0800b76c <_fstat_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	2300      	movs	r3, #0
 800b770:	4d06      	ldr	r5, [pc, #24]	; (800b78c <_fstat_r+0x20>)
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	4611      	mov	r1, r2
 800b778:	602b      	str	r3, [r5, #0]
 800b77a:	f7f8 fa22 	bl	8003bc2 <_fstat>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d102      	bne.n	800b788 <_fstat_r+0x1c>
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	b103      	cbz	r3, 800b788 <_fstat_r+0x1c>
 800b786:	6023      	str	r3, [r4, #0]
 800b788:	bd38      	pop	{r3, r4, r5, pc}
 800b78a:	bf00      	nop
 800b78c:	200030f4 	.word	0x200030f4

0800b790 <_isatty_r>:
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	2300      	movs	r3, #0
 800b794:	4d05      	ldr	r5, [pc, #20]	; (800b7ac <_isatty_r+0x1c>)
 800b796:	4604      	mov	r4, r0
 800b798:	4608      	mov	r0, r1
 800b79a:	602b      	str	r3, [r5, #0]
 800b79c:	f7f8 fa16 	bl	8003bcc <_isatty>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_isatty_r+0x1a>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_isatty_r+0x1a>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	200030f4 	.word	0x200030f4

0800b7b0 <memchr>:
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	b2c9      	uxtb	r1, r1
 800b7b6:	4402      	add	r2, r0
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	d101      	bne.n	800b7c2 <memchr+0x12>
 800b7be:	2000      	movs	r0, #0
 800b7c0:	e003      	b.n	800b7ca <memchr+0x1a>
 800b7c2:	7804      	ldrb	r4, [r0, #0]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	428c      	cmp	r4, r1
 800b7c8:	d1f6      	bne.n	800b7b8 <memchr+0x8>
 800b7ca:	bd10      	pop	{r4, pc}

0800b7cc <_realloc_r>:
 800b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d0:	4680      	mov	r8, r0
 800b7d2:	4614      	mov	r4, r2
 800b7d4:	460e      	mov	r6, r1
 800b7d6:	b921      	cbnz	r1, 800b7e2 <_realloc_r+0x16>
 800b7d8:	4611      	mov	r1, r2
 800b7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7de:	f7fe be53 	b.w	800a488 <_malloc_r>
 800b7e2:	b92a      	cbnz	r2, 800b7f0 <_realloc_r+0x24>
 800b7e4:	f7ff fa26 	bl	800ac34 <_free_r>
 800b7e8:	4625      	mov	r5, r4
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	f000 f81b 	bl	800b82a <_malloc_usable_size_r>
 800b7f4:	4284      	cmp	r4, r0
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	d802      	bhi.n	800b800 <_realloc_r+0x34>
 800b7fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7fe:	d812      	bhi.n	800b826 <_realloc_r+0x5a>
 800b800:	4621      	mov	r1, r4
 800b802:	4640      	mov	r0, r8
 800b804:	f7fe fe40 	bl	800a488 <_malloc_r>
 800b808:	4605      	mov	r5, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d0ed      	beq.n	800b7ea <_realloc_r+0x1e>
 800b80e:	42bc      	cmp	r4, r7
 800b810:	4622      	mov	r2, r4
 800b812:	4631      	mov	r1, r6
 800b814:	bf28      	it	cs
 800b816:	463a      	movcs	r2, r7
 800b818:	f7ff f9fd 	bl	800ac16 <memcpy>
 800b81c:	4631      	mov	r1, r6
 800b81e:	4640      	mov	r0, r8
 800b820:	f7ff fa08 	bl	800ac34 <_free_r>
 800b824:	e7e1      	b.n	800b7ea <_realloc_r+0x1e>
 800b826:	4635      	mov	r5, r6
 800b828:	e7df      	b.n	800b7ea <_realloc_r+0x1e>

0800b82a <_malloc_usable_size_r>:
 800b82a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b82e:	1f18      	subs	r0, r3, #4
 800b830:	2b00      	cmp	r3, #0
 800b832:	bfbc      	itt	lt
 800b834:	580b      	ldrlt	r3, [r1, r0]
 800b836:	18c0      	addlt	r0, r0, r3
 800b838:	4770      	bx	lr
	...

0800b83c <_init>:
 800b83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83e:	bf00      	nop
 800b840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b842:	bc08      	pop	{r3}
 800b844:	469e      	mov	lr, r3
 800b846:	4770      	bx	lr

0800b848 <_fini>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	bf00      	nop
 800b84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84e:	bc08      	pop	{r3}
 800b850:	469e      	mov	lr, r3
 800b852:	4770      	bx	lr
