
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800e5d8  0800e5d8  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9e0  0800e9e0  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800e9e0  0800e9e0  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e9e0  0800e9e0  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9e0  0800e9e0  0001e9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9e4  0800e9e4  0001e9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800e9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb8  20000260  0800ec48  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002f18  0800ec48  00022f18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022914  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000544e  00000000  00000000  00042be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00048030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155d  00000000  00000000  00049ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd6c  00000000  00000000  0004b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024190  00000000  00000000  00068e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0582  00000000  00000000  0008d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000079d4  00000000  00000000  0012d584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00134f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e5c0 	.word	0x0800e5c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800e5c0 	.word	0x0800e5c0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;

BleComando BLEPedeSenha,BLERecebeuSenha;
uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <BluetoothInit+0x70>)
 8000fc8:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a13      	ldr	r2, [pc, #76]	; (800101c <BluetoothInit+0x74>)
 8000fd0:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2278      	movs	r2, #120	; 0x78
 8000fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	BluetoothAddComp(ble, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoConexao);
 8000fee:	2302      	movs	r3, #2
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2342      	movs	r3, #66	; 0x42
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <BluetoothInit+0x78>)
 8000ff6:	490b      	ldr	r1, [pc, #44]	; (8001024 <BluetoothInit+0x7c>)
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f000 f819 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(ble, &BLERecebeuSenha,     "RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoConexao);
 8000ffe:	2302      	movs	r3, #2
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2340      	movs	r3, #64	; 0x40
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <BluetoothInit+0x80>)
 8001006:	4909      	ldr	r1, [pc, #36]	; (800102c <BluetoothInit+0x84>)
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f000 f811 	bl	8001030 <BluetoothAddComp>

	//Return OK
	return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000294 	.word	0x20000294
 800101c:	20000298 	.word	0x20000298
 8001020:	0800e5d8 	.word	0x0800e5d8
 8001024:	200002a0 	.word	0x200002a0
 8001028:	0800e5e8 	.word	0x0800e5e8
 800102c:	200002a8 	.word	0x200002a8

08001030 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff f886 	bl	8000150 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	3301      	adds	r3, #1
 8001048:	4618      	mov	r0, r3
 800104a:	f00c fd57 	bl	800dafc <malloc>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f00c ff05 	bl	800de6c <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	78fa      	ldrb	r2, [r7, #3]
 8001066:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	7e3a      	ldrb	r2, [r7, #24]
 800106c:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001074:	461a      	mov	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3222      	adds	r2, #34	; 0x22
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001086:	3301      	adds	r3, #1
 8001088:	b2da      	uxtb	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e067      	b.n	800117a <BluetoothPutFila+0xde>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80010b0:	7bf9      	ldrb	r1, [r7, #15]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3122      	adds	r1, #34	; 0x22
 80010b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d159      	bne.n	8001174 <BluetoothPutFila+0xd8>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3b02      	subs	r3, #2
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f000 fb35 	bl	8001744 <CRC16>
 80010da:	4603      	mov	r3, r0
 80010dc:	b21a      	sxth	r2, r3
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <BluetoothPutFila+0xf0>)
 80010e0:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <BluetoothPutFila+0xf0>)
 80010e4:	781a      	ldrb	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010ec:	3b02      	subs	r3, #2
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	440b      	add	r3, r1
 80010f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d10b      	bne.n	8001112 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <BluetoothPutFila+0xf0>)
 80010fc:	785a      	ldrb	r2, [r3, #1]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001104:	3b01      	subs	r3, #1
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	440b      	add	r3, r1
 800110a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 800110e:	429a      	cmp	r2, r3
 8001110:	d002      	beq.n	8001118 <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 8001112:	f000 fd5f 	bl	8001bd4 <BluetoothErroCRC>
				return; //ENCERRA
 8001116:	e036      	b.n	8001186 <BluetoothPutFila+0xea>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3222      	adds	r2, #34	; 0x22
 800111e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d10e      	bne.n	8001146 <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	7bfa      	ldrb	r2, [r7, #15]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3222      	adds	r2, #34	; 0x22
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	4619      	mov	r1, r3
 8001140:	f009 fb14 	bl	800a76c <osMessagePut>
				return;
 8001144:	e01f      	b.n	8001186 <BluetoothPutFila+0xea>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoConexao ){
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3222      	adds	r2, #34	; 0x22
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	785b      	ldrb	r3, [r3, #1]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d10e      	bne.n	8001174 <BluetoothPutFila+0xd8>
				//todo eu posso tomar um semaphorede bluetooth aqui ?????????
				//ou entao esperar a fila esvaziar
				//ou entao esvaziar a fila forcadamente
				//todo atencao com o erro de hardfault ao forcar uma finalizacao de fila
				switch (ble->_RxDataArr[1]) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800115c:	2b40      	cmp	r3, #64	; 0x40
 800115e:	d005      	beq.n	800116c <BluetoothPutFila+0xd0>
 8001160:	2b42      	cmp	r3, #66	; 0x42
 8001162:	d107      	bne.n	8001174 <BluetoothPutFila+0xd8>
				case RX_PEDE_SENHA:
					solicitacaoSenhaBluetooh(ble);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f813 	bl	8001190 <solicitacaoSenhaBluetooh>
					break;
 800116a:	e003      	b.n	8001174 <BluetoothPutFila+0xd8>
				case RX_RECEBEU_SENHA:

					avaliaSenhaRecebidaBluetooh(ble);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f849 	bl	8001204 <avaliaSenhaRecebidaBluetooh>
					break;
 8001172:	bf00      	nop
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	429a      	cmp	r2, r3
 8001184:	d391      	bcc.n	80010aa <BluetoothPutFila+0xe>
				}
			}
		}
	}
}
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000029c 	.word	0x2000029c

08001190 <solicitacaoSenhaBluetooh>:

void solicitacaoSenhaBluetooh(Bluetooth* ble){
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	unsigned char	Buffer		[20];

	if(ble->JanelaConexao > 0){
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01a      	beq.n	80011d8 <solicitacaoSenhaBluetooh+0x48>

		/*----DENTRO DO TEMPO, ENTAO RESPONDE----*/
		Buffer[0] 	= 0x01;									// ENDEREÇO
 80011a2:	2301      	movs	r3, #1
 80011a4:	733b      	strb	r3, [r7, #12]
		Buffer[1] 	= 0x51;									// FUNÇÃO -
 80011a6:	2351      	movs	r3, #81	; 0x51
 80011a8:	737b      	strb	r3, [r7, #13]
		Buffer[2] 	= 0x51;									// FUNÇÃO -
 80011aa:	2351      	movs	r3, #81	; 0x51
 80011ac:	73bb      	strb	r3, [r7, #14]
		Buffer[3] 	= 0x01;
 80011ae:	2301      	movs	r3, #1
 80011b0:	73fb      	strb	r3, [r7, #15]
		Buffer[4] 	= ble->chave >> 8 		;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	743b      	strb	r3, [r7, #16]
		Buffer[5] 	= ble->chave & 0x00ff	;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	747b      	strb	r3, [r7, #17]
		BluetoothEnviaComando(Buffer, 5);
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2105      	movs	r1, #5
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fa1b 	bl	800160c <BluetoothEnviaComando>
		Buffer[3] 	= 0x00;
		Buffer[4] 	= 0x00;
		Buffer[5] 	= 0x00;
		BluetoothEnviaComando(Buffer, 5);
	}
}
 80011d6:	e011      	b.n	80011fc <solicitacaoSenhaBluetooh+0x6c>
		Buffer[0] 	= 0x01;									// ENDEREÇO
 80011d8:	2301      	movs	r3, #1
 80011da:	733b      	strb	r3, [r7, #12]
		Buffer[1] 	= 0x51;									// FUNÇÃO -
 80011dc:	2351      	movs	r3, #81	; 0x51
 80011de:	737b      	strb	r3, [r7, #13]
		Buffer[2] 	= 0x51;									// FUNÇÃO -
 80011e0:	2351      	movs	r3, #81	; 0x51
 80011e2:	73bb      	strb	r3, [r7, #14]
		Buffer[3] 	= 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]
		Buffer[4] 	= 0x00;
 80011e8:	2300      	movs	r3, #0
 80011ea:	743b      	strb	r3, [r7, #16]
		Buffer[5] 	= 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	747b      	strb	r3, [r7, #17]
		BluetoothEnviaComando(Buffer, 5);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2105      	movs	r1, #5
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fa08 	bl	800160c <BluetoothEnviaComando>
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <avaliaSenhaRecebidaBluetooh>:

void avaliaSenhaRecebidaBluetooh(Bluetooth* ble){
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	unsigned char	Buffer		[20];

	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	b29b      	uxth	r3, r3
 800121e:	429a      	cmp	r2, r3
 8001220:	d11c      	bne.n	800125c <avaliaSenhaRecebidaBluetooh+0x58>
			ble->_RxDataArr[4] == (ble->chave & 0x00ff) ){
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001228:	461a      	mov	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001230:	b2db      	uxtb	r3, r3
	if(		ble->_RxDataArr[3] == (ble->chave >> 8) &&
 8001232:	429a      	cmp	r2, r3
 8001234:	d112      	bne.n	800125c <avaliaSenhaRecebidaBluetooh+0x58>
		//--->	CHAVE CORRETA
		ble->MaquinaConexao	= RX_VALIDADO;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		Buffer[0] 	= 0x01;									// ENDEREÇO
 800123e:	2301      	movs	r3, #1
 8001240:	733b      	strb	r3, [r7, #12]
		Buffer[1] 	= 0x52;									// FUNÇÃO -
 8001242:	2352      	movs	r3, #82	; 0x52
 8001244:	737b      	strb	r3, [r7, #13]
		Buffer[2] 	= 0x52;									// FUNÇÃO -
 8001246:	2352      	movs	r3, #82	; 0x52
 8001248:	73bb      	strb	r3, [r7, #14]
		Buffer[3] 	= 0x01;									//resultado ok
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
		BluetoothEnviaComando(Buffer, 3);
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	2103      	movs	r1, #3
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f9d9 	bl	800160c <BluetoothEnviaComando>
 800125a:	e015      	b.n	8001288 <avaliaSenhaRecebidaBluetooh+0x84>

	}else{
		//--->	CHAVE ERRADA
		Buffer[0] 	= 0x01;									// ENDEREÇO
 800125c:	2301      	movs	r3, #1
 800125e:	733b      	strb	r3, [r7, #12]
		Buffer[1] 	= 0x52;									// FUNÇÃO -
 8001260:	2352      	movs	r3, #82	; 0x52
 8001262:	737b      	strb	r3, [r7, #13]
		Buffer[2] 	= 0x52;									// FUNÇÃO -
 8001264:	2352      	movs	r3, #82	; 0x52
 8001266:	73bb      	strb	r3, [r7, #14]
		Buffer[3] 	= 0x00;									//resultado ok
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
		BluetoothEnviaComando(Buffer, 3);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2103      	movs	r1, #3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f9ca 	bl	800160c <BluetoothEnviaComando>

		HAL_Delay(30);
 8001278:	201e      	movs	r0, #30
 800127a:	f003 fd3d 	bl	8004cf8 <HAL_Delay>
		Envia_texto_UART("AT",50);//DESCONECTA
 800127e:	2132      	movs	r1, #50	; 0x32
 8001280:	4803      	ldr	r0, [pc, #12]	; (8001290 <avaliaSenhaRecebidaBluetooh+0x8c>)
 8001282:	f000 fa3f 	bl	8001704 <Envia_texto_UART>
	}
}
 8001286:	bf00      	nop
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0800e5fc 	.word	0x0800e5fc

08001294 <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <BLEUSART_IrqHandler+0x78>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d02a      	beq.n	8001302 <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 80012ac:	4b17      	ldr	r3, [pc, #92]	; (800130c <BLEUSART_IrqHandler+0x78>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <BLEUSART_IrqHandler+0x78>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <BLEUSART_IrqHandler+0x7c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <BLEUSART_IrqHandler+0x7c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0201 	bic.w	r2, r2, #1
 80012d2:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <BLEUSART_IrqHandler+0x78>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <BLEUSART_IrqHandler+0x78>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0210 	orr.w	r2, r2, #16
 80012e6:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <BLEUSART_IrqHandler+0x7c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <BLEUSART_IrqHandler+0x7c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0202 	orr.w	r2, r2, #2
 80012fa:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f809 	bl	8001314 <BLEDMA_IrqHandler>
	}
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000294 	.word	0x20000294
 8001310:	20000298 	.word	0x20000298

08001314 <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 800131c:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b02      	cmp	r3, #2
 800132a:	f040 8168 	bne.w	80015fe <BLEDMA_IrqHandler+0x2ea>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 800132e:	4b98      	ldr	r3, [pc, #608]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a97      	ldr	r2, [pc, #604]	; (8001594 <BLEDMA_IrqHandler+0x280>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02e      	beq.n	8001398 <BLEDMA_IrqHandler+0x84>
 800133a:	4b95      	ldr	r3, [pc, #596]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a95      	ldr	r2, [pc, #596]	; (8001598 <BLEDMA_IrqHandler+0x284>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d026      	beq.n	8001394 <BLEDMA_IrqHandler+0x80>
 8001346:	4b92      	ldr	r3, [pc, #584]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a93      	ldr	r2, [pc, #588]	; (800159c <BLEDMA_IrqHandler+0x288>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d01d      	beq.n	800138e <BLEDMA_IrqHandler+0x7a>
 8001352:	4b8f      	ldr	r3, [pc, #572]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a91      	ldr	r2, [pc, #580]	; (80015a0 <BLEDMA_IrqHandler+0x28c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d014      	beq.n	8001388 <BLEDMA_IrqHandler+0x74>
 800135e:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a8f      	ldr	r2, [pc, #572]	; (80015a4 <BLEDMA_IrqHandler+0x290>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00b      	beq.n	8001382 <BLEDMA_IrqHandler+0x6e>
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a8d      	ldr	r2, [pc, #564]	; (80015a8 <BLEDMA_IrqHandler+0x294>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d102      	bne.n	800137c <BLEDMA_IrqHandler+0x68>
 8001376:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800137a:	e00e      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 800137c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001380:	e00b      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 8001382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001386:	e008      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 8001388:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138c:	e005      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 800138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001392:	e002      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 8001394:	2320      	movs	r3, #32
 8001396:	e000      	b.n	800139a <BLEDMA_IrqHandler+0x86>
 8001398:	2302      	movs	r3, #2
 800139a:	4a84      	ldr	r2, [pc, #528]	; (80015ac <BLEDMA_IrqHandler+0x298>)
 800139c:	6053      	str	r3, [r2, #4]

		//zera contador de inatividade
		ble->msIdle=0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 80013a6:	4b7a      	ldr	r3, [pc, #488]	; (8001590 <BLEDMA_IrqHandler+0x27c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3330      	adds	r3, #48	; 0x30
 80013c6:	461a      	mov	r2, r3
 80013c8:	4979      	ldr	r1, [pc, #484]	; (80015b0 <BLEDMA_IrqHandler+0x29c>)
 80013ca:	f00c fc7f 	bl	800dccc <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <BLEDMA_IrqHandler+0xdc>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f2c0 80d2 	blt.w	800158a <BLEDMA_IrqHandler+0x276>
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f200 80ce 	bhi.w	800158a <BLEDMA_IrqHandler+0x276>
 80013ee:	e0a1      	b.n	8001534 <BLEDMA_IrqHandler+0x220>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			ble->ss = NULL;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	335c      	adds	r3, #92	; 0x5c
 8001404:	496b      	ldr	r1, [pc, #428]	; (80015b4 <BLEDMA_IrqHandler+0x2a0>)
 8001406:	4618      	mov	r0, r3
 8001408:	f00c fc88 	bl	800dd1c <strstr>
 800140c:	4602      	mov	r2, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <BLEDMA_IrqHandler+0x114>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001424:	2b07      	cmp	r3, #7
 8001426:	d007      	beq.n	8001438 <BLEDMA_IrqHandler+0x124>
 8001428:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142c:	4862      	ldr	r0, [pc, #392]	; (80015b8 <BLEDMA_IrqHandler+0x2a4>)
 800142e:	f004 fe99 	bl	8006164 <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <BLEDMA_IrqHandler+0x134>
				ble->MaquinaConexao = RX_CONECTADO;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	335c      	adds	r3, #92	; 0x5c
 8001454:	4959      	ldr	r1, [pc, #356]	; (80015bc <BLEDMA_IrqHandler+0x2a8>)
 8001456:	4618      	mov	r0, r3
 8001458:	f00c fc60 	bl	800dd1c <strstr>
 800145c:	4602      	mov	r2, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80b0 	beq.w	80015d0 <BLEDMA_IrqHandler+0x2bc>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	335c      	adds	r3, #92	; 0x5c
 800147a:	1ad2      	subs	r2, r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e010      	b.n	80014a8 <BLEDMA_IrqHandler+0x194>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	3308      	adds	r3, #8
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001498:	4a49      	ldr	r2, [pc, #292]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	460a      	mov	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2b0b      	cmp	r3, #11
 80014ac:	ddeb      	ble.n	8001486 <BLEDMA_IrqHandler+0x172>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	061a      	lsls	r2, r3, #24
 80014b4:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014b6:	785b      	ldrb	r3, [r3, #1]
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	441a      	add	r2, r3
 80014bc:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	4413      	add	r3, r2
 80014c4:	4a3e      	ldr	r2, [pc, #248]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014c6:	78d2      	ldrb	r2, [r2, #3]
 80014c8:	4413      	add	r3, r2
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <BLEDMA_IrqHandler+0x2b0>)
 80014ce:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80014d0:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	061a      	lsls	r2, r3, #24
 80014d6:	4b3a      	ldr	r3, [pc, #232]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014d8:	795b      	ldrb	r3, [r3, #5]
 80014da:	041b      	lsls	r3, r3, #16
 80014dc:	441a      	add	r2, r3
 80014de:	4b38      	ldr	r3, [pc, #224]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014e0:	799b      	ldrb	r3, [r3, #6]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4413      	add	r3, r2
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014e8:	79d2      	ldrb	r2, [r2, #7]
 80014ea:	4413      	add	r3, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <BLEDMA_IrqHandler+0x2b0>)
 80014f0:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 80014f2:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014f4:	7a1b      	ldrb	r3, [r3, #8]
 80014f6:	061a      	lsls	r2, r3, #24
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 80014fa:	7a5b      	ldrb	r3, [r3, #9]
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	441a      	add	r2, r3
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 8001502:	7a9b      	ldrb	r3, [r3, #10]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4413      	add	r3, r2
 8001508:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 800150a:	7ad2      	ldrb	r2, [r2, #11]
 800150c:	4413      	add	r3, r2
 800150e:	461a      	mov	r2, r3
 8001510:	4b2c      	ldr	r3, [pc, #176]	; (80015c4 <BLEDMA_IrqHandler+0x2b0>)
 8001512:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 8001514:	210c      	movs	r1, #12
 8001516:	482a      	ldr	r0, [pc, #168]	; (80015c0 <BLEDMA_IrqHandler+0x2ac>)
 8001518:	f000 f914 	bl	8001744 <CRC16>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 8001526:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <BLEDMA_IrqHandler+0x2b4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	21bf      	movs	r1, #191	; 0xbf
 800152c:	4618      	mov	r0, r3
 800152e:	f009 f837 	bl	800a5a0 <osSignalSet>
			}
			break;
 8001532:	e04d      	b.n	80015d0 <BLEDMA_IrqHandler+0x2bc>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	335c      	adds	r3, #92	; 0x5c
 8001540:	4922      	ldr	r1, [pc, #136]	; (80015cc <BLEDMA_IrqHandler+0x2b8>)
 8001542:	4618      	mov	r0, r3
 8001544:	f00c fbea 	bl	800dd1c <strstr>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	2b00      	cmp	r3, #0
 8001558:	d107      	bne.n	800156a <BLEDMA_IrqHandler+0x256>
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	4816      	ldr	r0, [pc, #88]	; (80015b8 <BLEDMA_IrqHandler+0x2a4>)
 8001560:	f004 fe00 	bl	8006164 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10b      	bne.n	8001582 <BLEDMA_IrqHandler+0x26e>
				ble->StatusSenha 		= false;//chave de validacao
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}


			BluetoothPutFila(ble);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff fd8a 	bl	800109c <BluetoothPutFila>

			break;
 8001588:	e023      	b.n	80015d2 <BLEDMA_IrqHandler+0x2be>

		default:
			break;
 800158a:	bf00      	nop
 800158c:	e021      	b.n	80015d2 <BLEDMA_IrqHandler+0x2be>
 800158e:	bf00      	nop
 8001590:	20000298 	.word	0x20000298
 8001594:	40020008 	.word	0x40020008
 8001598:	4002001c 	.word	0x4002001c
 800159c:	40020030 	.word	0x40020030
 80015a0:	40020044 	.word	0x40020044
 80015a4:	40020058 	.word	0x40020058
 80015a8:	4002006c 	.word	0x4002006c
 80015ac:	40020000 	.word	0x40020000
 80015b0:	0800e600 	.word	0x0800e600
 80015b4:	0800e604 	.word	0x0800e604
 80015b8:	40010c00 	.word	0x40010c00
 80015bc:	0800e60c 	.word	0x0800e60c
 80015c0:	2000027c 	.word	0x2000027c
 80015c4:	20000288 	.word	0x20000288
 80015c8:	20000c78 	.word	0x20000c78
 80015cc:	0800e618 	.word	0x0800e618
			break;
 80015d0:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <BLEDMA_IrqHandler+0x2f4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <BLEDMA_IrqHandler+0x2f4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <BLEDMA_IrqHandler+0x2f4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <BLEDMA_IrqHandler+0x2f4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
	}
}
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000298 	.word	0x20000298

0800160c <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 800160c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001610:	b087      	sub	sp, #28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
 8001616:	6039      	str	r1, [r7, #0]
 8001618:	466b      	mov	r3, sp
 800161a:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	1cd9      	adds	r1, r3, #3
 8001620:	1e4b      	subs	r3, r1, #1
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	460a      	mov	r2, r1
 8001626:	2300      	movs	r3, #0
 8001628:	4690      	mov	r8, r2
 800162a:	4699      	mov	r9, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800163c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001640:	460a      	mov	r2, r1
 8001642:	2300      	movs	r3, #0
 8001644:	4614      	mov	r4, r2
 8001646:	461d      	mov	r5, r3
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	00eb      	lsls	r3, r5, #3
 8001652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001656:	00e2      	lsls	r2, r4, #3
 8001658:	460b      	mov	r3, r1
 800165a:	3307      	adds	r3, #7
 800165c:	08db      	lsrs	r3, r3, #3
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	ebad 0d03 	sub.w	sp, sp, r3
 8001664:	466b      	mov	r3, sp
 8001666:	3300      	adds	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e00b      	b.n	8001688 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	7819      	ldrb	r1, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4413      	add	r3, r2
 800167e:	460a      	mov	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	ddef      	ble.n	8001670 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	3301      	adds	r3, #1
 8001696:	b29b      	uxth	r3, r3
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f852 	bl	8001744 <CRC16>
 80016a0:	4603      	mov	r3, r0
 80016a2:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 80016a4:	897b      	ldrh	r3, [r7, #10]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3302      	adds	r3, #2
 80016ae:	b2d1      	uxtb	r1, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	897a      	ldrh	r2, [r7, #10]
 80016ba:	b2d1      	uxtb	r1, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	3303      	adds	r3, #3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f806 	bl	80016dc <Envia_bytes_UART>
 80016d0:	46b5      	mov	sp, r6
}
 80016d2:	bf00      	nop
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080016dc <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <Envia_bytes_UART+0x24>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	2332      	movs	r3, #50	; 0x32
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f007 fcc8 	bl	8009088 <HAL_UART_Transmit>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000294 	.word	0x20000294

08001704 <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <Envia_texto_UART+0x3c>)
 8001712:	681c      	ldr	r4, [r3, #0]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7fe fd1b 	bl	8000150 <strlen>
 800171a:	4603      	mov	r3, r0
 800171c:	b29b      	uxth	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4620      	mov	r0, r4
 8001724:	f007 fd33 	bl	800918e <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <Envia_texto_UART+0x32>
		osDelay(delay);
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	4618      	mov	r0, r3
 8001732:	f008 fea9 	bl	800a488 <osDelay>
	}
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	bf00      	nop
 8001740:	20000294 	.word	0x20000294

08001744 <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001750:	23ff      	movs	r3, #255	; 0xff
 8001752:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001754:	23ff      	movs	r3, #255	; 0xff
 8001756:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001758:	e013      	b.n	8001782 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	7bbb      	ldrb	r3, [r7, #14]
 8001764:	4053      	eors	r3, r2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <CRC16+0x64>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4053      	eors	r3, r2
 8001776:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001778:	4a0c      	ldr	r2, [pc, #48]	; (80017ac <CRC16+0x68>)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	807a      	strh	r2, [r7, #2]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e6      	bne.n	800175a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b21a      	sxth	r2, r3
 8001792:	7bbb      	ldrb	r3, [r7, #14]
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21b      	sxth	r3, r3
 800179a:	b29b      	uxth	r3, r3
}//---END---//
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000100 	.word	0x20000100

080017b0 <iniciaBleHm10>:

void iniciaBleHm10(Bluetooth* ble){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b092      	sub	sp, #72	; 0x48
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 80017be:	e1f5      	b.n	8001bac <iniciaBleHm10+0x3fc>
		switch (sequenciaBLE) {
 80017c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	f200 81ec 	bhi.w	8001ba2 <iniciaBleHm10+0x3f2>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <iniciaBleHm10+0x20>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e9 	.word	0x080017e9
 80017d4:	08001879 	.word	0x08001879
 80017d8:	08001919 	.word	0x08001919
 80017dc:	08001b43 	.word	0x08001b43
 80017e0:	08001b65 	.word	0x08001b65
 80017e4:	08001b9f 	.word	0x08001b9f
		case inicio:
			HAL_Delay(50);
 80017e8:	2032      	movs	r0, #50	; 0x32
 80017ea:	f003 fa85 	bl	8004cf8 <HAL_Delay>
			SETUP_UART(115200)
 80017ee:	4bbd      	ldr	r3, [pc, #756]	; (8001ae4 <iniciaBleHm10+0x334>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 fd26 	bl	8009244 <HAL_UART_Abort_IT>
 80017f8:	4bba      	ldr	r3, [pc, #744]	; (8001ae4 <iniciaBleHm10+0x334>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fc11 	bl	8009024 <HAL_UART_DeInit>
 8001802:	2032      	movs	r0, #50	; 0x32
 8001804:	f003 fa78 	bl	8004cf8 <HAL_Delay>
 8001808:	4bb6      	ldr	r3, [pc, #728]	; (8001ae4 <iniciaBleHm10+0x334>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	4bb4      	ldr	r3, [pc, #720]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f007 fbb4 	bl	8008f84 <HAL_UART_Init>
 800181c:	2032      	movs	r0, #50	; 0x32
 800181e:	f003 fa6b 	bl	8004cf8 <HAL_Delay>
			HAL_Delay(50);
 8001822:	2032      	movs	r0, #50	; 0x32
 8001824:	f003 fa68 	bl	8004cf8 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 8001828:	2132      	movs	r1, #50	; 0x32
 800182a:	48af      	ldr	r0, [pc, #700]	; (8001ae8 <iniciaBleHm10+0x338>)
 800182c:	f7ff ff6a 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 8001830:	2132      	movs	r1, #50	; 0x32
 8001832:	48ad      	ldr	r0, [pc, #692]	; (8001ae8 <iniciaBleHm10+0x338>)
 8001834:	f7ff ff66 	bl	8001704 <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 8001838:	4baa      	ldr	r3, [pc, #680]	; (8001ae4 <iniciaBleHm10+0x334>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4ba8      	ldr	r3, [pc, #672]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0210 	orr.w	r2, r2, #16
 800184a:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 800184c:	4ba7      	ldr	r3, [pc, #668]	; (8001aec <iniciaBleHm10+0x33c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba5      	ldr	r3, [pc, #660]	; (8001aec <iniciaBleHm10+0x33c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0202 	orr.w	r2, r2, #2
 800185e:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001860:	4ba0      	ldr	r3, [pc, #640]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3330      	adds	r3, #48	; 0x30
 8001868:	2240      	movs	r2, #64	; 0x40
 800186a:	4619      	mov	r1, r3
 800186c:	f007 fcc4 	bl	80091f8 <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001876:	e199      	b.n	8001bac <iniciaBleHm10+0x3fc>

			continue;
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 8001878:	2305      	movs	r3, #5
 800187a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
			const uint32_t delay_between_attempts_ms = 1000;
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	643b      	str	r3, [r7, #64]	; 0x40

			while (tryingName < max_attempts) {
 8001884:	bf00      	nop
 8001886:	4b9a      	ldr	r3, [pc, #616]	; (8001af0 <iniciaBleHm10+0x340>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800188e:	429a      	cmp	r2, r3
 8001890:	d937      	bls.n	8001902 <iniciaBleHm10+0x152>
				Envia_texto_UART("AT+NAME?", 100);
 8001892:	2164      	movs	r1, #100	; 0x64
 8001894:	4897      	ldr	r0, [pc, #604]	; (8001af4 <iniciaBleHm10+0x344>)
 8001896:	f7ff ff35 	bl	8001704 <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 800189a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800189c:	f003 fa2c 	bl	8004cf8 <HAL_Delay>
				ble->ss = NULL;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	335c      	adds	r3, #92	; 0x5c
 80018ac:	4992      	ldr	r1, [pc, #584]	; (8001af8 <iniciaBleHm10+0x348>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00c fa34 	bl	800dd1c <strstr>
 80018b4:	4602      	mov	r2, r0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d016      	beq.n	80018f4 <iniciaBleHm10+0x144>
					ble->ss = strstr(ble->StringRecebida, BLE_DEVICE_NAME);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	335c      	adds	r3, #92	; 0x5c
 80018ca:	498c      	ldr	r1, [pc, #560]	; (8001afc <iniciaBleHm10+0x34c>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00c fa25 	bl	800dd1c <strstr>
 80018d2:	4602      	mov	r2, r0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <iniciaBleHm10+0x13c>
						sequenciaBLE = capturaAddr;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
 80018ea:	e00a      	b.n	8001902 <iniciaBleHm10+0x152>
					} else {
						sequenciaBLE = redefineBle;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
 80018f2:	e006      	b.n	8001902 <iniciaBleHm10+0x152>
					}
				} else {
					tryingName++;
 80018f4:	4b7e      	ldr	r3, [pc, #504]	; (8001af0 <iniciaBleHm10+0x340>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b7c      	ldr	r3, [pc, #496]	; (8001af0 <iniciaBleHm10+0x340>)
 80018fe:	701a      	strb	r2, [r3, #0]
					break;
 8001900:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <iniciaBleHm10+0x340>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800190a:	429a      	cmp	r2, r3
 800190c:	f200 814b 	bhi.w	8001ba6 <iniciaBleHm10+0x3f6>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 8001910:	2302      	movs	r3, #2
 8001912:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001916:	e146      	b.n	8001ba6 <iniciaBleHm10+0x3f6>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	4878      	ldr	r0, [pc, #480]	; (8001b00 <iniciaBleHm10+0x350>)
 8001920:	f004 fc37 	bl	8006192 <HAL_GPIO_WritePin>
 8001924:	20c8      	movs	r0, #200	; 0xc8
 8001926:	f003 f9e7 	bl	8004cf8 <HAL_Delay>
 800192a:	2201      	movs	r2, #1
 800192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001930:	4873      	ldr	r0, [pc, #460]	; (8001b00 <iniciaBleHm10+0x350>)
 8001932:	f004 fc2e 	bl	8006192 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001936:	2064      	movs	r0, #100	; 0x64
 8001938:	f003 f9de 	bl	8004cf8 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <iniciaBleHm10+0x334>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f007 fc7f 	bl	8009244 <HAL_UART_Abort_IT>
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f007 fb6a 	bl	8009024 <HAL_UART_DeInit>
 8001950:	2032      	movs	r0, #50	; 0x32
 8001952:	f003 f9d1 	bl	8004cf8 <HAL_Delay>
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f007 fb0d 	bl	8008f84 <HAL_UART_Init>
 800196a:	2032      	movs	r0, #50	; 0x32
 800196c:	f003 f9c4 	bl	8004cf8 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 8001970:	2164      	movs	r1, #100	; 0x64
 8001972:	485d      	ldr	r0, [pc, #372]	; (8001ae8 <iniciaBleHm10+0x338>)
 8001974:	f7ff fec6 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001978:	2164      	movs	r1, #100	; 0x64
 800197a:	485b      	ldr	r0, [pc, #364]	; (8001ae8 <iniciaBleHm10+0x338>)
 800197c:	f7ff fec2 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001984:	485f      	ldr	r0, [pc, #380]	; (8001b04 <iniciaBleHm10+0x354>)
 8001986:	f7ff febd 	bl	8001704 <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <iniciaBleHm10+0x334>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f007 fc58 	bl	8009244 <HAL_UART_Abort_IT>
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f007 fb43 	bl	8009024 <HAL_UART_DeInit>
 800199e:	2032      	movs	r0, #50	; 0x32
 80019a0:	f003 f9aa 	bl	8004cf8 <HAL_Delay>
 80019a4:	4b4f      	ldr	r3, [pc, #316]	; (8001ae4 <iniciaBleHm10+0x334>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <iniciaBleHm10+0x334>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f007 fae6 	bl	8008f84 <HAL_UART_Init>
 80019b8:	2032      	movs	r0, #50	; 0x32
 80019ba:	f003 f99d 	bl	8004cf8 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80019be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c2:	4850      	ldr	r0, [pc, #320]	; (8001b04 <iniciaBleHm10+0x354>)
 80019c4:	f7ff fe9e 	bl	8001704 <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 80019c8:	2164      	movs	r1, #100	; 0x64
 80019ca:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <iniciaBleHm10+0x338>)
 80019cc:	f7ff fe9a 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80019d0:	2164      	movs	r1, #100	; 0x64
 80019d2:	4845      	ldr	r0, [pc, #276]	; (8001ae8 <iniciaBleHm10+0x338>)
 80019d4:	f7ff fe96 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80019d8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019dc:	484a      	ldr	r0, [pc, #296]	; (8001b08 <iniciaBleHm10+0x358>)
 80019de:	f7ff fe91 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 80019e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019e6:	4849      	ldr	r0, [pc, #292]	; (8001b0c <iniciaBleHm10+0x35c>)
 80019e8:	f7ff fe8c 	bl	8001704 <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 80019ec:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <iniciaBleHm10+0x334>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fc27 	bl	8009244 <HAL_UART_Abort_IT>
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <iniciaBleHm10+0x334>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 fb12 	bl	8009024 <HAL_UART_DeInit>
 8001a00:	2032      	movs	r0, #50	; 0x32
 8001a02:	f003 f979 	bl	8004cf8 <HAL_Delay>
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <iniciaBleHm10+0x334>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fab5 	bl	8008f84 <HAL_UART_Init>
 8001a1a:	2032      	movs	r0, #50	; 0x32
 8001a1c:	f003 f96c 	bl	8004cf8 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	4836      	ldr	r0, [pc, #216]	; (8001b00 <iniciaBleHm10+0x350>)
 8001a28:	f004 fbb3 	bl	8006192 <HAL_GPIO_WritePin>
 8001a2c:	20c8      	movs	r0, #200	; 0xc8
 8001a2e:	f003 f963 	bl	8004cf8 <HAL_Delay>
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4831      	ldr	r0, [pc, #196]	; (8001b00 <iniciaBleHm10+0x350>)
 8001a3a:	f004 fbaa 	bl	8006192 <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 8001a3e:	2164      	movs	r1, #100	; 0x64
 8001a40:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <iniciaBleHm10+0x338>)
 8001a42:	f7ff fe5f 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001a46:	2164      	movs	r1, #100	; 0x64
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <iniciaBleHm10+0x338>)
 8001a4a:	f7ff fe5b 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001a4e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a52:	482f      	ldr	r0, [pc, #188]	; (8001b10 <iniciaBleHm10+0x360>)
 8001a54:	f7ff fe56 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001a58:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a5c:	482d      	ldr	r0, [pc, #180]	; (8001b14 <iniciaBleHm10+0x364>)
 8001a5e:	f7ff fe51 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001a62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a66:	482c      	ldr	r0, [pc, #176]	; (8001b18 <iniciaBleHm10+0x368>)
 8001a68:	f7ff fe4c 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001a6c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a70:	482a      	ldr	r0, [pc, #168]	; (8001b1c <iniciaBleHm10+0x36c>)
 8001a72:	f7ff fe47 	bl	8001704 <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 8001a76:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001a7a:	4829      	ldr	r0, [pc, #164]	; (8001b20 <iniciaBleHm10+0x370>)
 8001a7c:	f7ff fe42 	bl	8001704 <Envia_texto_UART>
			M_BLE_RESET
 8001a80:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a84:	4827      	ldr	r0, [pc, #156]	; (8001b24 <iniciaBleHm10+0x374>)
 8001a86:	f7ff fe3d 	bl	8001704 <Envia_texto_UART>

			char comando[COMANDO_BUFFER_SIZE]; // Buffer para o comando AT
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 8001a8a:	f107 000c 	add.w	r0, r7, #12
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <iniciaBleHm10+0x34c>)
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <iniciaBleHm10+0x378>)
 8001a92:	2132      	movs	r1, #50	; 0x32
 8001a94:	f00c f8e6 	bl	800dc64 <sniprintf>
			Envia_texto_UART(comando, 400); // Configura o nome no dispositivo
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fe2f 	bl	8001704 <Envia_texto_UART>


			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 8001aa6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001aaa:	4820      	ldr	r0, [pc, #128]	; (8001b2c <iniciaBleHm10+0x37c>)
 8001aac:	f7ff fe2a 	bl	8001704 <Envia_texto_UART>
			M_BLE_RESET
 8001ab0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001ab4:	481b      	ldr	r0, [pc, #108]	; (8001b24 <iniciaBleHm10+0x374>)
 8001ab6:	f7ff fe25 	bl	8001704 <Envia_texto_UART>
			sequenciaBLE = capturaAddr;
 8001aba:	2303      	movs	r3, #3
 8001abc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8001ac0:	e074      	b.n	8001bac <iniciaBleHm10+0x3fc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 8001ac2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001ac6:	481a      	ldr	r0, [pc, #104]	; (8001b30 <iniciaBleHm10+0x380>)
 8001ac8:	f7ff fe1c 	bl	8001704 <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 8001acc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ace:	f003 f913 	bl	8004cf8 <HAL_Delay>

				if (ble->chave != 0){
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d02b      	beq.n	8001b34 <iniciaBleHm10+0x384>
					sequenciaBLE = final;
 8001adc:	2304      	movs	r3, #4
 8001ade:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
 8001ae2:	e035      	b.n	8001b50 <iniciaBleHm10+0x3a0>
 8001ae4:	20000294 	.word	0x20000294
 8001ae8:	0800e5fc 	.word	0x0800e5fc
 8001aec:	20000298 	.word	0x20000298
 8001af0:	200002b0 	.word	0x200002b0
 8001af4:	0800e620 	.word	0x0800e620
 8001af8:	0800e62c 	.word	0x0800e62c
 8001afc:	0800e634 	.word	0x0800e634
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	0800e640 	.word	0x0800e640
 8001b08:	0800e64c 	.word	0x0800e64c
 8001b0c:	0800e658 	.word	0x0800e658
 8001b10:	0800e664 	.word	0x0800e664
 8001b14:	0800e670 	.word	0x0800e670
 8001b18:	0800e67c 	.word	0x0800e67c
 8001b1c:	0800e688 	.word	0x0800e688
 8001b20:	0800e694 	.word	0x0800e694
 8001b24:	0800e6a0 	.word	0x0800e6a0
 8001b28:	0800e6ac 	.word	0x0800e6ac
 8001b2c:	0800e6b8 	.word	0x0800e6b8
 8001b30:	0800e6c4 	.word	0x0800e6c4
				} else {
					tryingAddr++;
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <iniciaBleHm10+0x418>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <iniciaBleHm10+0x418>)
 8001b3e:	701a      	strb	r2, [r3, #0]
					break;
 8001b40:	e006      	b.n	8001b50 <iniciaBleHm10+0x3a0>
			while (tryingAddr < max_attempts) {
 8001b42:	bf00      	nop
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <iniciaBleHm10+0x418>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8b8      	bhi.n	8001ac2 <iniciaBleHm10+0x312>
				}
			}

			if(tryingAddr >= max_attempts)
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <iniciaBleHm10+0x418>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d826      	bhi.n	8001baa <iniciaBleHm10+0x3fa>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001b5c:	2305      	movs	r3, #5
 8001b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			break;
 8001b62:	e022      	b.n	8001baa <iniciaBleHm10+0x3fa>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <iniciaBleHm10+0x41c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <iniciaBleHm10+0x41c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f042 0210 	orr.w	r2, r2, #16
 8001b76:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <iniciaBleHm10+0x420>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <iniciaBleHm10+0x420>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <iniciaBleHm10+0x41c>)
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3330      	adds	r3, #48	; 0x30
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	4619      	mov	r1, r3
 8001b98:	f007 fb2e 	bl	80091f8 <HAL_UART_Receive_DMA>
 8001b9c:	e010      	b.n	8001bc0 <iniciaBleHm10+0x410>
			return;
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 8001b9e:	bf00      	nop
			break;
 8001ba0:	e004      	b.n	8001bac <iniciaBleHm10+0x3fc>
		default:
			break;
 8001ba2:	bf00      	nop
 8001ba4:	e002      	b.n	8001bac <iniciaBleHm10+0x3fc>
			break;
 8001ba6:	bf00      	nop
 8001ba8:	e000      	b.n	8001bac <iniciaBleHm10+0x3fc>
			break;
 8001baa:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001bac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	f47f ae05 	bne.w	80017c0 <iniciaBleHm10+0x10>
 8001bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	f47f ae00 	bne.w	80017c0 <iniciaBleHm10+0x10>
		}
	}
}
 8001bc0:	3748      	adds	r7, #72	; 0x48
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002b1 	.word	0x200002b1
 8001bcc:	20000294 	.word	0x20000294
 8001bd0:	20000298 	.word	0x20000298

08001bd4 <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 8001bda:	2301      	movs	r3, #1
 8001bdc:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 8001bde:	23ee      	movs	r3, #238	; 0xee
 8001be0:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 8001be2:	23ee      	movs	r3, #238	; 0xee
 8001be4:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	2103      	movs	r1, #3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fd76 	bl	80016dc <Envia_bytes_UART>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <BluetoothDescon>:

void BluetoothDescon(Bluetooth* ble){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

	osDelay(30);
 8001c00:	201e      	movs	r0, #30
 8001c02:	f008 fc41 	bl	800a488 <osDelay>
	Envia_texto_UART("AT",50);//DESCONECTA
 8001c06:	2132      	movs	r1, #50	; 0x32
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <BluetoothDescon+0x4c>)
 8001c0a:	f7ff fd7b 	bl	8001704 <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <BluetoothDescon+0x50>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60da      	str	r2, [r3, #12]
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <BluetoothDescon+0x50>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	605a      	str	r2, [r3, #4]
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <BluetoothDescon+0x50>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <BluetoothDescon+0x50>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	0800e5fc 	.word	0x0800e5fc
 8001c48:	20000298 	.word	0x20000298

08001c4c <bluetooth10ms>:

void bluetooth10ms(Bluetooth* ble){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<240)?ble->msIdle++:0;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c5a:	2bef      	cmp	r3, #239	; 0xef
 8001c5c:	d807      	bhi.n	8001c6e <bluetooth10ms+0x22>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	/*MONITOR INATIVIDADE-------------------------*/
	if(ble->JanelaConexao>0){
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <bluetooth10ms+0x3e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c7e:	2bc8      	cmp	r3, #200	; 0xc8
 8001c80:	d90b      	bls.n	8001c9a <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffb8 	bl	8001bf8 <BluetoothDescon>
	else{
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
			BluetoothDescon(ble);
		}
	}
}
 8001c88:	e007      	b.n	8001c9a <bluetooth10ms+0x4e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001c90:	2bc8      	cmp	r3, #200	; 0xc8
 8001c92:	d902      	bls.n	8001c9a <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffaf 	bl	8001bf8 <BluetoothDescon>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <bluetooth1000ms>:

void bluetooth1000ms(Bluetooth* ble){
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	if(ble->JanelaConexao>0)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <bluetooth1000ms+0x22>
		ble->JanelaConexao--;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr

08001cce <EepromInit>:
//variaveis globais da EEprom
#ifndef INC_EEPROM_C_
#define INC_EEPROM_C_

uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe fa21 	bl	8000150 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	3301      	adds	r3, #1
 8001d12:	4618      	mov	r0, r3
 8001d14:	f00b fef2 	bl	800dafc <malloc>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00c f8a0 	bl	800de6c <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	6a3a      	ldr	r2, [r7, #32]
 8001d3e:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	7e3a      	ldrb	r2, [r7, #24]
 8001d4a:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3202      	adds	r2, #2
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d64:	3301      	adds	r3, #1
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <EepromAddVar+0x7e>
		return 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e016      	b.n	8001da6 <EepromAddVar+0xac>
	switch (tamanho) {
 8001d78:	7e3b      	ldrb	r3, [r7, #24]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d00e      	beq.n	8001d9c <EepromAddVar+0xa2>
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	dc10      	bgt.n	8001da4 <EepromAddVar+0xaa>
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d002      	beq.n	8001d8c <EepromAddVar+0x92>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d004      	beq.n	8001d94 <EepromAddVar+0x9a>
 8001d8a:	e00b      	b.n	8001da4 <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d90:	61da      	str	r2, [r3, #28]
		break;
 8001d92:	e007      	b.n	8001da4 <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d98:	621a      	str	r2, [r3, #32]
		break;
 8001d9a:	e003      	b.n	8001da4 <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001da2:	bf00      	nop
	}
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	; 0x30
 8001db4:	af04      	add	r7, sp, #16
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	4896      	ldr	r0, [pc, #600]	; (800201c <EepromSetVar+0x26c>)
 8001dc2:	f004 f9e6 	bl	8006192 <HAL_GPIO_WritePin>
 8001dc6:	2005      	movs	r0, #5
 8001dc8:	f002 ff96 	bl	8004cf8 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	221e      	movs	r2, #30
 8001dd6:	21a2      	movs	r1, #162	; 0xa2
 8001dd8:	f004 fc32 	bl	8006640 <HAL_I2C_IsDeviceReady>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 810d 	bne.w	8002002 <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d07e      	beq.n	8001eec <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	7e1b      	ldrb	r3, [r3, #24]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d04f      	beq.n	8001e96 <EepromSetVar+0xe6>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	f300 8103 	bgt.w	8002002 <EepromSetVar+0x252>
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d002      	beq.n	8001e06 <EepromSetVar+0x56>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d022      	beq.n	8001e4a <EepromSetVar+0x9a>
 8001e04:	e0fd      	b.n	8002002 <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	23c8      	movs	r3, #200	; 0xc8
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	2301      	movs	r3, #1
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	21a2      	movs	r1, #162	; 0xa2
 8001e30:	f004 fb0c 	bl	800644c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80d7 	beq.w	8001fec <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]

				break;
 8001e48:	e0db      	b.n	8002002 <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	23c8      	movs	r3, #200	; 0xc8
 8001e6c:	9302      	str	r3, [sp, #8]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2310      	movs	r3, #16
 8001e7a:	21a2      	movs	r1, #162	; 0xa2
 8001e7c:	f004 fae6 	bl	800644c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80b3 	beq.w	8001ff0 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	b292      	uxth	r2, r2
 8001e92:	801a      	strh	r2, [r3, #0]
				break;
 8001e94:	e0b5      	b.n	8002002 <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	0e1b      	lsrs	r3, r3, #24
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	881a      	ldrh	r2, [r3, #0]
 8001ec2:	23c8      	movs	r3, #200	; 0xc8
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2310      	movs	r3, #16
 8001ed2:	21a2      	movs	r1, #162	; 0xa2
 8001ed4:	f004 faba 	bl	800644c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8089 	beq.w	8001ff4 <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
				break;
 8001eea:	e08a      	b.n	8002002 <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	7e1b      	ldrb	r3, [r3, #24]
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d04b      	beq.n	8001f8c <EepromSetVar+0x1dc>
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	f300 8084 	bgt.w	8002002 <EepromSetVar+0x252>
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d002      	beq.n	8001f04 <EepromSetVar+0x154>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d01e      	beq.n	8001f40 <EepromSetVar+0x190>
 8001f02:	e07e      	b.n	8002002 <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d075      	beq.n	8001ff8 <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	23c8      	movs	r3, #200	; 0xc8
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2310      	movs	r3, #16
 8001f38:	21a2      	movs	r1, #162	; 0xa2
 8001f3a:	f004 fa87 	bl	800644c <HAL_I2C_Mem_Write>

				break;
 8001f3e:	e060      	b.n	8002002 <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d059      	beq.n	8001ffc <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	0a1b      	lsrs	r3, r3, #8
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	23c8      	movs	r3, #200	; 0xc8
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	2302      	movs	r3, #2
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	f107 0318 	add.w	r3, r7, #24
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2310      	movs	r3, #16
 8001f84:	21a2      	movs	r1, #162	; 0xa2
 8001f86:	f004 fa61 	bl	800644c <HAL_I2C_Mem_Write>
				break;
 8001f8a:	e03a      	b.n	8002002 <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d035      	beq.n	8002000 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	0e1b      	lsrs	r3, r3, #24
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	881a      	ldrh	r2, [r3, #0]
 8001fd4:	23c8      	movs	r3, #200	; 0xc8
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2304      	movs	r3, #4
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2310      	movs	r3, #16
 8001fe4:	21a2      	movs	r1, #162	; 0xa2
 8001fe6:	f004 fa31 	bl	800644c <HAL_I2C_Mem_Write>
				break;
 8001fea:	e00a      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8001fec:	bf00      	nop
 8001fee:	e008      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8001ff0:	bf00      	nop
 8001ff2:	e006      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8001ff4:	bf00      	nop
 8001ff6:	e004      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8001ff8:	bf00      	nop
 8001ffa:	e002      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8001ffc:	bf00      	nop
 8001ffe:	e000      	b.n	8002002 <EepromSetVar+0x252>
					break;
 8002000:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8002002:	2005      	movs	r0, #5
 8002004:	f002 fe78 	bl	8004cf8 <HAL_Delay>
 8002008:	2201      	movs	r2, #1
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	4803      	ldr	r0, [pc, #12]	; (800201c <EepromSetVar+0x26c>)
 800200e:	f004 f8c0 	bl	8006192 <HAL_GPIO_WritePin>
	return 1;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40010c00 	.word	0x40010c00

08002020 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e014      	b.n	8002058 <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3202      	adds	r2, #2
 8002034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3202      	adds	r2, #2
 800203e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	461a      	mov	r2, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff feb2 	bl	8001db0 <EepromSetVar>
		HAL_Delay(10);
 800204c:	200a      	movs	r0, #10
 800204e:	f002 fe53 	bl	8004cf8 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	429a      	cmp	r2, r3
 8002062:	d3e4      	bcc.n	800202e <RestauraPadraoTudo+0xe>
	}
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a06      	ldr	r2, [pc, #24]	; (8002098 <vApplicationGetIdleTaskMemory+0x28>)
 8002080:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4a05      	ldr	r2, [pc, #20]	; (800209c <vApplicationGetIdleTaskMemory+0x2c>)
 8002086:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	200002b4 	.word	0x200002b4
 800209c:	20000354 	.word	0x20000354

080020a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a07      	ldr	r2, [pc, #28]	; (80020cc <vApplicationGetTimerTaskMemory+0x2c>)
 80020b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4a06      	ldr	r2, [pc, #24]	; (80020d0 <vApplicationGetTimerTaskMemory+0x30>)
 80020b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000554 	.word	0x20000554
 80020d0:	200005f4 	.word	0x200005f4

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b5b0      	push	{r4, r5, r7, lr}
 80020d6:	b0ba      	sub	sp, #232	; 0xe8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020da:	f002 fddb 	bl	8004c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020de:	f000 f929 	bl	8002334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e2:	f000 fbe7 	bl	80028b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020e6:	f000 fbb7 	bl	8002858 <MX_DMA_Init>
  MX_ADC1_Init();
 80020ea:	f000 f97f 	bl	80023ec <MX_ADC1_Init>
  MX_I2C1_Init();
 80020ee:	f000 f9d9 	bl	80024a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80020f2:	f000 fac5 	bl	8002680 <MX_TIM3_Init>
  MX_TIM2_Init();
 80020f6:	f000 fa4d 	bl	8002594 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80020fa:	f000 fb59 	bl	80027b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80020fe:	f000 fb81 	bl	8002804 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002102:	f000 f9fd 	bl	8002500 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002106:	2203      	movs	r2, #3
 8002108:	4971      	ldr	r1, [pc, #452]	; (80022d0 <main+0x1fc>)
 800210a:	4872      	ldr	r0, [pc, #456]	; (80022d4 <main+0x200>)
 800210c:	f002 fef0 	bl	8004ef0 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8002110:	2108      	movs	r1, #8
 8002112:	4871      	ldr	r0, [pc, #452]	; (80022d8 <main+0x204>)
 8002114:	f006 f866 	bl	80081e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8002118:	210c      	movs	r1, #12
 800211a:	486f      	ldr	r0, [pc, #444]	; (80022d8 <main+0x204>)
 800211c:	f006 f862 	bl	80081e4 <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 800212c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002130:	2101      	movs	r1, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f008 fac0 	bl	800a6b8 <osSemaphoreCreate>
 8002138:	4603      	mov	r3, r0
 800213a:	4a68      	ldr	r2, [pc, #416]	; (80022dc <main+0x208>)
 800213c:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timer10ms */
  osTimerDef(timer10ms, CBTimer10ms);
 800213e:	4b68      	ldr	r3, [pc, #416]	; (80022e0 <main+0x20c>)
 8002140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 800214a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800214e:	2200      	movs	r2, #0
 8002150:	2101      	movs	r1, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f008 f9ac 	bl	800a4b0 <osTimerCreate>
 8002158:	4603      	mov	r3, r0
 800215a:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <main+0x210>)
 800215c:	6013      	str	r3, [r2, #0]

  /* definition and creation of timer1000ms */
  osTimerDef(timer1000ms, CBTimer1000ms);
 800215e:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <main+0x214>)
 8002160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 800216a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800216e:	2200      	movs	r2, #0
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f008 f99c 	bl	800a4b0 <osTimerCreate>
 8002178:	4603      	mov	r3, r0
 800217a:	4a5c      	ldr	r2, [pc, #368]	; (80022ec <main+0x218>)
 800217c:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <main+0x21c>)
 8002180:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 800218a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f008 fac3 	bl	800a71c <osMessageCreate>
 8002196:	4603      	mov	r3, r0
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <main+0x220>)
 800219a:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 800219c:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <main+0x224>)
 800219e:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 80021a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 80021a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f008 fab4 	bl	800a71c <osMessageCreate>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a51      	ldr	r2, [pc, #324]	; (80022fc <main+0x228>)
 80021b8:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <main+0x22c>)
 80021bc:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80021c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 80021c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f008 faa5 	bl	800a71c <osMessageCreate>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a4b      	ldr	r2, [pc, #300]	; (8002304 <main+0x230>)
 80021d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 80021d8:	4b45      	ldr	r3, [pc, #276]	; (80022f0 <main+0x21c>)
 80021da:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 80021e4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80021e8:	2100      	movs	r1, #0
 80021ea:	4618      	mov	r0, r3
 80021ec:	f008 fa96 	bl	800a71c <osMessageCreate>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a45      	ldr	r2, [pc, #276]	; (8002308 <main+0x234>)
 80021f4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 80021f6:	4b45      	ldr	r3, [pc, #276]	; (800230c <main+0x238>)
 80021f8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80021fc:	461d      	mov	r5, r3
 80021fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002202:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 800220a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f008 f8da 	bl	800a3ca <osThreadCreate>
 8002216:	4603      	mov	r3, r0
 8002218:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <main+0x23c>)
 800221a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 800221c:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <main+0x240>)
 800221e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002222:	461d      	mov	r5, r3
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800222c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002230:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f008 f8c7 	bl	800a3ca <osThreadCreate>
 800223c:	4603      	mov	r3, r0
 800223e:	4a36      	ldr	r2, [pc, #216]	; (8002318 <main+0x244>)
 8002240:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002242:	4b36      	ldr	r3, [pc, #216]	; (800231c <main+0x248>)
 8002244:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002248:	461d      	mov	r5, r3
 800224a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800224c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800224e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f008 f8b4 	bl	800a3ca <osThreadCreate>
 8002262:	4603      	mov	r3, r0
 8002264:	4a2e      	ldr	r2, [pc, #184]	; (8002320 <main+0x24c>)
 8002266:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <main+0x250>)
 800226a:	f107 0420 	add.w	r4, r7, #32
 800226e:	461d      	mov	r5, r3
 8002270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f008 f8a1 	bl	800a3ca <osThreadCreate>
 8002288:	4603      	mov	r3, r0
 800228a:	4a27      	ldr	r2, [pc, #156]	; (8002328 <main+0x254>)
 800228c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <main+0x258>)
 8002290:	1d3c      	adds	r4, r7, #4
 8002292:	461d      	mov	r5, r3
 8002294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002298:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800229c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 f890 	bl	800a3ca <osThreadCreate>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a20      	ldr	r2, [pc, #128]	; (8002330 <main+0x25c>)
 80022ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

  osTimerStart(timer10msHandle,10);
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <main+0x210>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	210a      	movs	r1, #10
 80022b6:	4618      	mov	r0, r3
 80022b8:	f008 f92e 	bl	800a518 <osTimerStart>
  osTimerStart(timer1000msHandle,1000);
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <main+0x218>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022c4:	4618      	mov	r0, r3
 80022c6:	f008 f927 	bl	800a518 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80022ca:	f008 f877 	bl	800a3bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80022ce:	e7fe      	b.n	80022ce <main+0x1fa>
 80022d0:	2000132c 	.word	0x2000132c
 80022d4:	200009f4 	.word	0x200009f4
 80022d8:	20000b18 	.word	0x20000b18
 80022dc:	200011e4 	.word	0x200011e4
 80022e0:	08002c39 	.word	0x08002c39
 80022e4:	200011dc 	.word	0x200011dc
 80022e8:	08002c55 	.word	0x08002c55
 80022ec:	200011e0 	.word	0x200011e0
 80022f0:	0800e6d0 	.word	0x0800e6d0
 80022f4:	200011cc 	.word	0x200011cc
 80022f8:	0800e6e0 	.word	0x0800e6e0
 80022fc:	200011d0 	.word	0x200011d0
 8002300:	0800e6f0 	.word	0x0800e6f0
 8002304:	200011d4 	.word	0x200011d4
 8002308:	200011d8 	.word	0x200011d8
 800230c:	0800e710 	.word	0x0800e710
 8002310:	20000c78 	.word	0x20000c78
 8002314:	0800e73c 	.word	0x0800e73c
 8002318:	20000c7c 	.word	0x20000c7c
 800231c:	0800e764 	.word	0x0800e764
 8002320:	20000c80 	.word	0x20000c80
 8002324:	0800e78c 	.word	0x0800e78c
 8002328:	20000f24 	.word	0x20000f24
 800232c:	0800e7b4 	.word	0x0800e7b4
 8002330:	200011c8 	.word	0x200011c8

08002334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b094      	sub	sp, #80	; 0x50
 8002338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800233a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800233e:	2228      	movs	r2, #40	; 0x28
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f00b fce2 	bl	800dd0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002364:	230a      	movs	r3, #10
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002368:	2301      	movs	r3, #1
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800236c:	2310      	movs	r3, #16
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002370:	2301      	movs	r3, #1
 8002372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002378:	2300      	movs	r3, #0
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800237c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002386:	4618      	mov	r0, r3
 8002388:	f004 fd02 	bl	8006d90 <HAL_RCC_OscConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002392:	f000 fc8d 	bl	8002cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002396:	230f      	movs	r3, #15
 8002398:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239a:	2302      	movs	r3, #2
 800239c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2101      	movs	r1, #1
 80023b2:	4618      	mov	r0, r3
 80023b4:	f004 ff6e 	bl	8007294 <HAL_RCC_ClockConfig>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80023be:	f000 fc77 	bl	8002cb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80023c2:	2303      	movs	r3, #3
 80023c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80023cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023d0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4618      	mov	r0, r3
 80023d6:	f005 f91b 	bl	8007610 <HAL_RCCEx_PeriphCLKConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80023e0:	f000 fc66 	bl	8002cb0 <Error_Handler>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3750      	adds	r7, #80	; 0x50
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023fc:	4b27      	ldr	r3, [pc, #156]	; (800249c <MX_ADC1_Init+0xb0>)
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <MX_ADC1_Init+0xb4>)
 8002400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <MX_ADC1_Init+0xb0>)
 8002404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002408:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800240a:	4b24      	ldr	r3, [pc, #144]	; (800249c <MX_ADC1_Init+0xb0>)
 800240c:	2201      	movs	r2, #1
 800240e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <MX_ADC1_Init+0xb0>)
 8002412:	2200      	movs	r2, #0
 8002414:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <MX_ADC1_Init+0xb0>)
 8002418:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800241c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_ADC1_Init+0xb0>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <MX_ADC1_Init+0xb0>)
 8002426:	2203      	movs	r2, #3
 8002428:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800242a:	481c      	ldr	r0, [pc, #112]	; (800249c <MX_ADC1_Init+0xb0>)
 800242c:	f002 fc88 	bl	8004d40 <HAL_ADC_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002436:	f000 fc3b 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800243e:	2301      	movs	r3, #1
 8002440:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002442:	2306      	movs	r3, #6
 8002444:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <MX_ADC1_Init+0xb0>)
 800244c:	f002 fe40 	bl	80050d0 <HAL_ADC_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002456:	f000 fc2b 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800245e:	2302      	movs	r3, #2
 8002460:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002462:	1d3b      	adds	r3, r7, #4
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_ADC1_Init+0xb0>)
 8002468:	f002 fe32 	bl	80050d0 <HAL_ADC_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002472:	f000 fc1d 	bl	8002cb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002476:	2310      	movs	r3, #16
 8002478:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800247a:	2303      	movs	r3, #3
 800247c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	4619      	mov	r1, r3
 8002482:	4806      	ldr	r0, [pc, #24]	; (800249c <MX_ADC1_Init+0xb0>)
 8002484:	f002 fe24 	bl	80050d0 <HAL_ADC_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800248e:	f000 fc0f 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200009f4 	.word	0x200009f4
 80024a0:	40012400 	.word	0x40012400

080024a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <MX_I2C1_Init+0x54>)
 80024ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <MX_I2C1_Init+0x58>)
 80024b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024bc:	2200      	movs	r2, #0
 80024be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <MX_I2C1_Init+0x50>)
 80024e2:	f003 fe6f 	bl	80061c4 <HAL_I2C_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024ec:	f000 fbe0 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000a68 	.word	0x20000a68
 80024f8:	40005400 	.word	0x40005400
 80024fc:	000186a0 	.word	0x000186a0

08002500 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002506:	1d3b      	adds	r3, r7, #4
 8002508:	2100      	movs	r1, #0
 800250a:	460a      	mov	r2, r1
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	460a      	mov	r2, r1
 8002510:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <MX_RTC_Init+0x8c>)
 8002518:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <MX_RTC_Init+0x90>)
 800251a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <MX_RTC_Init+0x8c>)
 800251e:	f04f 32ff 	mov.w	r2, #4294967295
 8002522:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <MX_RTC_Init+0x8c>)
 8002526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800252a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800252c:	4817      	ldr	r0, [pc, #92]	; (800258c <MX_RTC_Init+0x8c>)
 800252e:	f005 f9db 	bl	80078e8 <HAL_RTC_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002538:	f000 fbba 	bl	8002cb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800253c:	2300      	movs	r3, #0
 800253e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002540:	2300      	movs	r3, #0
 8002542:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002544:	2300      	movs	r3, #0
 8002546:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	2201      	movs	r2, #1
 800254c:	4619      	mov	r1, r3
 800254e:	480f      	ldr	r0, [pc, #60]	; (800258c <MX_RTC_Init+0x8c>)
 8002550:	f005 fa56 	bl	8007a00 <HAL_RTC_SetTime>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800255a:	f000 fba9 	bl	8002cb0 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800255e:	2301      	movs	r3, #1
 8002560:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002562:	2301      	movs	r3, #1
 8002564:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002566:	2301      	movs	r3, #1
 8002568:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800256a:	2300      	movs	r3, #0
 800256c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800256e:	463b      	mov	r3, r7
 8002570:	2201      	movs	r2, #1
 8002572:	4619      	mov	r1, r3
 8002574:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_RTC_Init+0x8c>)
 8002576:	f005 fadb 	bl	8007b30 <HAL_RTC_SetDate>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002580:	f000 fb96 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000abc 	.word	0x20000abc
 8002590:	40002800 	.word	0x40002800

08002594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08e      	sub	sp, #56	; 0x38
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a8:	f107 0320 	add.w	r3, r7, #32
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
 80025c0:	615a      	str	r2, [r3, #20]
 80025c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <MX_TIM2_Init+0xe8>)
 80025c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <MX_TIM2_Init+0xe8>)
 80025ce:	f240 42af 	movw	r2, #1199	; 0x4af
 80025d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <MX_TIM2_Init+0xe8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <MX_TIM2_Init+0xe8>)
 80025dc:	2263      	movs	r2, #99	; 0x63
 80025de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <MX_TIM2_Init+0xe8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <MX_TIM2_Init+0xe8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ec:	4823      	ldr	r0, [pc, #140]	; (800267c <MX_TIM2_Init+0xe8>)
 80025ee:	f005 fcff 	bl	8007ff0 <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80025f8:	f000 fb5a 	bl	8002cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	4619      	mov	r1, r3
 8002608:	481c      	ldr	r0, [pc, #112]	; (800267c <MX_TIM2_Init+0xe8>)
 800260a:	f006 f8bb 	bl	8008784 <HAL_TIM_ConfigClockSource>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002614:	f000 fb4c 	bl	8002cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002618:	4818      	ldr	r0, [pc, #96]	; (800267c <MX_TIM2_Init+0xe8>)
 800261a:	f005 fd8b 	bl	8008134 <HAL_TIM_PWM_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002624:	f000 fb44 	bl	8002cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002630:	f107 0320 	add.w	r3, r7, #32
 8002634:	4619      	mov	r1, r3
 8002636:	4811      	ldr	r0, [pc, #68]	; (800267c <MX_TIM2_Init+0xe8>)
 8002638:	f006 fc34 	bl	8008ea4 <HAL_TIMEx_MasterConfigSynchronization>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002642:	f000 fb35 	bl	8002cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002646:	2360      	movs	r3, #96	; 0x60
 8002648:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800264a:	2332      	movs	r3, #50	; 0x32
 800264c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	220c      	movs	r2, #12
 800265a:	4619      	mov	r1, r3
 800265c:	4807      	ldr	r0, [pc, #28]	; (800267c <MX_TIM2_Init+0xe8>)
 800265e:	f005 ffcf 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002668:	f000 fb22 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800266c:	4803      	ldr	r0, [pc, #12]	; (800267c <MX_TIM2_Init+0xe8>)
 800266e:	f000 ff87 	bl	8003580 <HAL_TIM_MspPostInit>

}
 8002672:	bf00      	nop
 8002674:	3738      	adds	r7, #56	; 0x38
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000ad0 	.word	0x20000ad0

08002680 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	f107 0320 	add.w	r3, r7, #32
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]
 80026ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026b2:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <MX_TIM3_Init+0x12c>)
 80026b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026b8:	f640 729f 	movw	r2, #3999	; 0xf9f
 80026bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80026c4:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026c6:	2263      	movs	r2, #99	; 0x63
 80026c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d0:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d6:	4834      	ldr	r0, [pc, #208]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026d8:	f005 fc8a 	bl	8007ff0 <HAL_TIM_Base_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80026e2:	f000 fae5 	bl	8002cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f0:	4619      	mov	r1, r3
 80026f2:	482d      	ldr	r0, [pc, #180]	; (80027a8 <MX_TIM3_Init+0x128>)
 80026f4:	f006 f846 	bl	8008784 <HAL_TIM_ConfigClockSource>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80026fe:	f000 fad7 	bl	8002cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002702:	4829      	ldr	r0, [pc, #164]	; (80027a8 <MX_TIM3_Init+0x128>)
 8002704:	f005 fd16 	bl	8008134 <HAL_TIM_PWM_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800270e:	f000 facf 	bl	8002cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800271a:	f107 0320 	add.w	r3, r7, #32
 800271e:	4619      	mov	r1, r3
 8002720:	4821      	ldr	r0, [pc, #132]	; (80027a8 <MX_TIM3_Init+0x128>)
 8002722:	f006 fbbf 	bl	8008ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800272c:	f000 fac0 	bl	8002cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002730:	2360      	movs	r3, #96	; 0x60
 8002732:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800273c:	2304      	movs	r3, #4
 800273e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002740:	1d3b      	adds	r3, r7, #4
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	4818      	ldr	r0, [pc, #96]	; (80027a8 <MX_TIM3_Init+0x128>)
 8002748:	f005 ff5a 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002752:	f000 faad 	bl	8002cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2204      	movs	r2, #4
 800275a:	4619      	mov	r1, r3
 800275c:	4812      	ldr	r0, [pc, #72]	; (80027a8 <MX_TIM3_Init+0x128>)
 800275e:	f005 ff4f 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002768:	f000 faa2 	bl	8002cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2208      	movs	r2, #8
 8002770:	4619      	mov	r1, r3
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <MX_TIM3_Init+0x128>)
 8002774:	f005 ff44 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800277e:	f000 fa97 	bl	8002cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	220c      	movs	r2, #12
 8002786:	4619      	mov	r1, r3
 8002788:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM3_Init+0x128>)
 800278a:	f005 ff39 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002794:	f000 fa8c 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002798:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM3_Init+0x128>)
 800279a:	f000 fef1 	bl	8003580 <HAL_TIM_MspPostInit>

}
 800279e:	bf00      	nop
 80027a0:	3738      	adds	r7, #56	; 0x38
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000b18 	.word	0x20000b18
 80027ac:	40000400 	.word	0x40000400

080027b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_USART1_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e8:	f006 fbcc 	bl	8008f84 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027f2:	f000 fa5d 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000b60 	.word	0x20000b60
 8002800:	40013800 	.word	0x40013800

08002804 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_USART3_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_USART3_UART_Init+0x4c>)
 800283c:	f006 fba2 	bl	8008f84 <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f000 fa33 	bl	8002cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000ba8 	.word	0x20000ba8
 8002854:	40004800 	.word	0x40004800

08002858 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800285e:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <MX_DMA_Init+0x58>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <MX_DMA_Init+0x58>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6153      	str	r3, [r2, #20]
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <MX_DMA_Init+0x58>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8002876:	2200      	movs	r2, #0
 8002878:	2105      	movs	r1, #5
 800287a:	200b      	movs	r0, #11
 800287c:	f002 fefb 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002880:	200b      	movs	r0, #11
 8002882:	f002 ff14 	bl	80056ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8002886:	2200      	movs	r2, #0
 8002888:	2105      	movs	r1, #5
 800288a:	200d      	movs	r0, #13
 800288c:	f002 fef3 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002890:	200d      	movs	r0, #13
 8002892:	f002 ff0c 	bl	80056ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2105      	movs	r1, #5
 800289a:	200f      	movs	r0, #15
 800289c:	f002 feeb 	bl	8005676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80028a0:	200f      	movs	r0, #15
 80028a2:	f002 ff04 	bl	80056ae <HAL_NVIC_EnableIRQ>

}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ba:	f107 0308 	add.w	r3, r7, #8
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	4a38      	ldr	r2, [pc, #224]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6193      	str	r3, [r2, #24]
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	4a32      	ldr	r2, [pc, #200]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028e6:	f043 0308 	orr.w	r3, r3, #8
 80028ea:	6193      	str	r3, [r2, #24]
 80028ec:	4b30      	ldr	r3, [pc, #192]	; (80029b0 <MX_GPIO_Init+0xfc>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80028fe:	482d      	ldr	r0, [pc, #180]	; (80029b4 <MX_GPIO_Init+0x100>)
 8002900:	f003 fc47 	bl	8006192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800290a:	482b      	ldr	r0, [pc, #172]	; (80029b8 <MX_GPIO_Init+0x104>)
 800290c:	f003 fc41 	bl	8006192 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002910:	2200      	movs	r2, #0
 8002912:	21f8      	movs	r1, #248	; 0xf8
 8002914:	4827      	ldr	r0, [pc, #156]	; (80029b4 <MX_GPIO_Init+0x100>)
 8002916:	f003 fc3c 	bl	8006192 <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 800291a:	f246 0378 	movw	r3, #24696	; 0x6078
 800291e:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	2301      	movs	r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2302      	movs	r3, #2
 800292a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	4619      	mov	r1, r3
 8002932:	4820      	ldr	r0, [pc, #128]	; (80029b4 <MX_GPIO_Init+0x100>)
 8002934:	f003 f9d6 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 8002938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800293c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800293e:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <MX_GPIO_Init+0x108>)
 8002940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	4619      	mov	r1, r3
 800294c:	4819      	ldr	r0, [pc, #100]	; (80029b4 <MX_GPIO_Init+0x100>)
 800294e:	f003 f9c9 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002958:	4b18      	ldr	r3, [pc, #96]	; (80029bc <MX_GPIO_Init+0x108>)
 800295a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	4619      	mov	r1, r3
 8002966:	4814      	ldr	r0, [pc, #80]	; (80029b8 <MX_GPIO_Init+0x104>)
 8002968:	f003 f9bc 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 800296c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2302      	movs	r3, #2
 800297c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	4619      	mov	r1, r3
 8002984:	480c      	ldr	r0, [pc, #48]	; (80029b8 <MX_GPIO_Init+0x104>)
 8002986:	f003 f9ad 	bl	8005ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298e:	2301      	movs	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002992:	2302      	movs	r3, #2
 8002994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002996:	2302      	movs	r3, #2
 8002998:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	4619      	mov	r1, r3
 80029a0:	4804      	ldr	r0, [pc, #16]	; (80029b4 <MX_GPIO_Init+0x100>)
 80029a2:	f003 f99f 	bl	8005ce4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40010800 	.word	0x40010800
 80029bc:	10110000 	.word	0x10110000

080029c0 <desligaForno>:

/* USER CODE BEGIN 4 */

void desligaForno(void){
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
	PrimitiveStates.RTTimerMinutos 	= 0;
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <desligaForno+0x40>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	PrimitiveStates.RTTimerSegundos = 0;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <desligaForno+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	PrimitiveStates.SetPointLastro 	= 0;
 80029d4:	490a      	ldr	r1, [pc, #40]	; (8002a00 <desligaForno+0x40>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PrimitiveStates.SetPointTeto 	= 0;
 80029e2:	4907      	ldr	r1, [pc, #28]	; (8002a00 <desligaForno+0x40>)
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PrimitiveStates.stateMaquina 	= inicial;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <desligaForno+0x40>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20001338 	.word	0x20001338
 8002a04:	00000000 	.word	0x00000000

08002a08 <leTempInterna>:

void leTempInterna(void){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
#define Avg_slope .0043
#define V25_	1.43
#define VSENSE 3.3/4096 //12bit

	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <leTempInterna+0x78>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fce7 	bl	80003e4 <__aeabi_ui2d>
 8002a16:	a314      	add	r3, pc, #80	; (adr r3, 8002a68 <leTempInterna+0x60>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fd5c 	bl	80004d8 <__aeabi_dmul>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	a112      	add	r1, pc, #72	; (adr r1, 8002a70 <leTempInterna+0x68>)
 8002a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a2a:	f7fd fb9d 	bl	8000168 <__aeabi_dsub>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	a310      	add	r3, pc, #64	; (adr r3, 8002a78 <leTempInterna+0x70>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f7fd fe76 	bl	800072c <__aeabi_ddiv>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4610      	mov	r0, r2
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <leTempInterna+0x7c>)
 8002a4e:	f7fd fb8d 	bl	800016c <__adddf3>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fd fff7 	bl	8000a4c <__aeabi_d2f>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <leTempInterna+0x80>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	66666666 	.word	0x66666666
 8002a6c:	3f4a6666 	.word	0x3f4a6666
 8002a70:	ae147ae1 	.word	0xae147ae1
 8002a74:	3ff6e147 	.word	0x3ff6e147
 8002a78:	75f6fd22 	.word	0x75f6fd22
 8002a7c:	3f719ce0 	.word	0x3f719ce0
 8002a80:	2000132c 	.word	0x2000132c
 8002a84:	40390000 	.word	0x40390000
 8002a88:	200011e8 	.word	0x200011e8
 8002a8c:	00000000 	.word	0x00000000

08002a90 <controleCooler>:

void controleCooler(void){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
	if(PrimitiveStates.RealtimeLastro>200 || PrimitiveStates.RealtimeTeto>200){
 8002a94:	4b22      	ldr	r3, [pc, #136]	; (8002b20 <controleCooler+0x90>)
 8002a96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <controleCooler+0x94>)
 8002aa0:	f7fd ffaa 	bl	80009f8 <__aeabi_dcmpgt>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <controleCooler+0x30>
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <controleCooler+0x90>)
 8002aac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <controleCooler+0x94>)
 8002ab6:	f7fd ff9f 	bl	80009f8 <__aeabi_dcmpgt>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <controleCooler+0x42>
		COOLER_ON
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2120      	movs	r1, #32
 8002ac4:	4818      	ldr	r0, [pc, #96]	; (8002b28 <controleCooler+0x98>)
 8002ac6:	f003 fb64 	bl	8006192 <HAL_GPIO_WritePin>
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <controleCooler+0x90>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	711a      	strb	r2, [r3, #4]
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
		COOLER_OFF
	}
}
 8002ad0:	e01f      	b.n	8002b12 <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 8002ad2:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <controleCooler+0x90>)
 8002ad4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002ad8:	a30f      	add	r3, pc, #60	; (adr r3, 8002b18 <controleCooler+0x88>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd ff6d 	bl	80009bc <__aeabi_dcmplt>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d100      	bne.n	8002aea <controleCooler+0x5a>
}
 8002ae8:	e013      	b.n	8002b12 <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <controleCooler+0x90>)
 8002aec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002af0:	a309      	add	r3, pc, #36	; (adr r3, 8002b18 <controleCooler+0x88>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd ff61 	bl	80009bc <__aeabi_dcmplt>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <controleCooler+0x72>
}
 8002b00:	e007      	b.n	8002b12 <controleCooler+0x82>
		COOLER_OFF
 8002b02:	2200      	movs	r2, #0
 8002b04:	2120      	movs	r1, #32
 8002b06:	4808      	ldr	r0, [pc, #32]	; (8002b28 <controleCooler+0x98>)
 8002b08:	f003 fb43 	bl	8006192 <HAL_GPIO_WritePin>
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <controleCooler+0x90>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	711a      	strb	r2, [r3, #4]
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	00000000 	.word	0x00000000
 8002b1c:	40686000 	.word	0x40686000
 8002b20:	20001338 	.word	0x20001338
 8002b24:	40690000 	.word	0x40690000
 8002b28:	40010c00 	.word	0x40010c00

08002b2c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;


	leTempInterna();
 8002b34:	f7ff ff68 	bl	8002a08 <leTempInterna>

	if(i<TAM){
 8002b38:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b40:	d216      	bcs.n	8002b70 <HAL_ADC_ConvCpltCallback+0x44>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002b42:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b35      	ldr	r3, [pc, #212]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002b50:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a34      	ldr	r2, [pc, #208]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002b60:	601a      	str	r2, [r3, #0]
		i++;
 8002b62:	4b2e      	ldr	r3, [pc, #184]	; (8002c1c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002b6c:	801a      	strh	r2, [r3, #0]
	//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
	//	static uint32_t temp = 0;
	//	temp = ADC1->DR;
	//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 8002b6e:	e050      	b.n	8002c12 <HAL_ADC_ConvCpltCallback+0xe6>
		somatorio1 = somatorio1 / TAM; //calc media
 8002b70:	4b2c      	ldr	r3, [pc, #176]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_ADC_ConvCpltCallback+0x100>)
 8002b76:	fb82 1203 	smull	r1, r2, r2, r3
 8002b7a:	1152      	asrs	r2, r2, #5
 8002b7c:	17db      	asrs	r3, r3, #31
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002b82:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 8002b84:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_ADC_ConvCpltCallback+0x100>)
 8002b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b8e:	1152      	asrs	r2, r2, #5
 8002b90:	17db      	asrs	r3, r3, #31
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	4a24      	ldr	r2, [pc, #144]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002b96:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 8002b98:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe f85e 	bl	8000c60 <__aeabi_i2f>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002ba8:	4921      	ldr	r1, [pc, #132]	; (8002c30 <HAL_ADC_ConvCpltCallback+0x104>)
 8002baa:	69f8      	ldr	r0, [r7, #28]
 8002bac:	f7fe f960 	bl	8000e70 <__aeabi_fdiv>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	; (8002c24 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe f84d 	bl	8000c60 <__aeabi_i2f>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002bca:	4919      	ldr	r1, [pc, #100]	; (8002c30 <HAL_ADC_ConvCpltCallback+0x104>)
 8002bcc:	69b8      	ldr	r0, [r7, #24]
 8002bce:	f7fe f94f 	bl	8000e70 <__aeabi_fdiv>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002bdc:	69f8      	ldr	r0, [r7, #28]
 8002bde:	f7fd fc23 	bl	8000428 <__aeabi_f2d>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002bea:	69b8      	ldr	r0, [r7, #24]
 8002bec:	f7fd fc1c 	bl	8000428 <__aeabi_f2d>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002bf8:	490e      	ldr	r1, [pc, #56]	; (8002c34 <HAL_ADC_ConvCpltCallback+0x108>)
 8002bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 8002c02:	490c      	ldr	r1, [pc, #48]	; (8002c34 <HAL_ADC_ConvCpltCallback+0x108>)
 8002c04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c08:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_ADC_ConvCpltCallback+0xf0>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	801a      	strh	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000137a 	.word	0x2000137a
 8002c20:	2000132c 	.word	0x2000132c
 8002c24:	2000137c 	.word	0x2000137c
 8002c28:	20001380 	.word	0x20001380
 8002c2c:	10624dd3 	.word	0x10624dd3
 8002c30:	42c80000 	.word	0x42c80000
 8002c34:	20001338 	.word	0x20001338

08002c38 <CBTimer10ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8002c40:	4803      	ldr	r0, [pc, #12]	; (8002c50 <CBTimer10ms+0x18>)
 8002c42:	f7ff f803 	bl	8001c4c <bluetooth10ms>

  /* USER CODE END CBTimer10ms */
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200011ec 	.word	0x200011ec

08002c54 <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer1000ms */

	bluetooth1000ms(&bluetooth);
 8002c5c:	4809      	ldr	r0, [pc, #36]	; (8002c84 <CBTimer1000ms+0x30>)
 8002c5e:	f7ff f820 	bl	8001ca2 <bluetooth1000ms>

	taskTemperatura1sec();
 8002c62:	f001 feef 	bl	8004a44 <taskTemperatura1sec>

	taskBluetooth1sec();
 8002c66:	f000 ff57 	bl	8003b18 <taskBluetooth1sec>

	controleCooler();
 8002c6a:	f7ff ff11 	bl	8002a90 <controleCooler>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <CBTimer1000ms+0x34>)
 8002c70:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <CBTimer1000ms+0x28>
		desligaForno();
 8002c78:	f7ff fea2 	bl	80029c0 <desligaForno>
	}
  /* USER CODE END CBTimer1000ms */
}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200011ec 	.word	0x200011ec
 8002c88:	20001338 	.word	0x20001338

08002c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c9e:	f002 f80f 	bl	8004cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40012c00 	.word	0x40012c00

08002cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb4:	b672      	cpsid	i
}
 8002cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <Error_Handler+0x8>

08002cba <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002cea:	f7fd fe85 	bl	80009f8 <__aeabi_dcmpgt>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d006      	beq.n	8002d02 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002d00:	e011      	b.n	8002d26 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d0e:	f7fd fe55 	bl	80009bc <__aeabi_dcmplt>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d100      	bne.n	8002d1a <PID_Init+0x60>
}
 8002d18:	e005      	b.n	8002d26 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af06      	add	r7, sp, #24
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002d56:	a318      	add	r3, pc, #96	; (adr r3, 8002db8 <PID+0x88>)
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 f931 	bl	8002fd0 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2264      	movs	r2, #100	; 0x64
 8002d72:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002d74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d78:	4619      	mov	r1, r3
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa38 	bl	80031f0 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002d80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d92:	e9cd 2300 	strd	r2, r3, [sp]
 8002d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f984 	bl	80030a8 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002da0:	f001 ffa0 	bl	8004ce4 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
	
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	406fe000 	.word	0x406fe000

08002dc0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b08c      	sub	sp, #48	; 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <PID_Compute+0x14>
	{
		return _FALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e0db      	b.n	8002f8c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002dd4:	f001 ff86 	bl	8004ce4 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	f0c0 80cd 	bcc.w	8002f8a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e08:	f7fd f9ae 	bl	8000168 <__aeabi_dsub>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e1e:	f7fd f9a3 	bl	8000168 <__aeabi_dsub>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002e36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e3a:	f7fd fb4d 	bl	80004d8 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd f991 	bl	800016c <__adddf3>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d114      	bne.n	8002e86 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6c:	f7fd fb34 	bl	80004d8 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd f976 	bl	8000168 <__aeabi_dsub>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002e92:	f7fd fdb1 	bl	80009f8 <__aeabi_dcmpgt>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002ea8:	e010      	b.n	8002ecc <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002eb6:	f7fd fd81 	bl	80009bc <__aeabi_dcmplt>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002eda:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ede:	f7fd fafb 	bl	80004d8 <__aeabi_dmul>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002eea:	e005      	b.n	8002ef8 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f08:	f7fd fae6 	bl	80004d8 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd f928 	bl	8000168 <__aeabi_dsub>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f20:	f7fd f924 	bl	800016c <__adddf3>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f36:	f7fd fd5f 	bl	80009f8 <__aeabi_dcmpgt>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f46:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002f4a:	e00e      	b.n	8002f6a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f56:	f7fd fd31 	bl	80009bc <__aeabi_dcmplt>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f72:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002f8a:	2300      	movs	r3, #0
	}
	
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3730      	adds	r7, #48	; 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bdb0      	pop	{r4, r5, r7, pc}

08002f94 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	bf0c      	ite	eq
 8002fa6:	2301      	moveq	r3, #1
 8002fa8:	2300      	movne	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d006      	beq.n	8002fc2 <PID_SetMode+0x2e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	785b      	ldrb	r3, [r3, #1]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff fe7c 	bl	8002cba <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	705a      	strb	r2, [r3, #1]
	
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fe4:	f7fd fcfe 	bl	80009e4 <__aeabi_dcmpge>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d158      	bne.n	80030a0 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ffe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	785b      	ldrb	r3, [r3, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d04b      	beq.n	80030a2 <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003018:	f7fd fcee 	bl	80009f8 <__aeabi_dcmpgt>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800302c:	e9c1 2300 	strd	r2, r3, [r1]
 8003030:	e012      	b.n	8003058 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	e9d3 0100 	ldrd	r0, r1, [r3]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003040:	f7fd fcbc 	bl	80009bc <__aeabi_dcmplt>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003054:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003064:	f7fd fcc8 	bl	80009f8 <__aeabi_dcmpgt>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003074:	68f9      	ldr	r1, [r7, #12]
 8003076:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800307a:	e012      	b.n	80030a2 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003088:	f7fd fc98 	bl	80009bc <__aeabi_dcmplt>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800309e:	e000      	b.n	80030a2 <PID_SetOutputLimits+0xd2>
		return;
 80030a0:	bf00      	nop
		}
		else { }
		
	}
	
}
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030c0:	f7fd fc7c 	bl	80009bc <__aeabi_dcmplt>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f040 808b 	bne.w	80031e2 <PID_SetTunings2+0x13a>
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80030d8:	f7fd fc70 	bl	80009bc <__aeabi_dcmplt>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d17f      	bne.n	80031e2 <PID_SetTunings2+0x13a>
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030ee:	f7fd fc65 	bl	80009bc <__aeabi_dcmplt>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d174      	bne.n	80031e2 <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80030fe:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003100:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf0c      	ite	eq
 8003108:	2301      	moveq	r3, #1
 800310a:	2300      	movne	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800311a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003124:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800312e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f954 	bl	80003e4 <__aeabi_ui2d>
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <PID_SetTunings2+0x144>)
 8003142:	f7fd faf3 	bl	800072c <__aeabi_ddiv>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 800314e:	68f9      	ldr	r1, [r7, #12]
 8003150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003154:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003158:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800315c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003160:	f7fd f9ba 	bl	80004d8 <__aeabi_dmul>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800316e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003172:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003176:	f7fd fad9 	bl	800072c <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	78db      	ldrb	r3, [r3, #3]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d12b      	bne.n	80031e4 <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f7fc ffe5 	bl	8000168 <__aeabi_dsub>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	68f9      	ldr	r1, [r7, #12]
 80031a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	f7fc ffd7 	bl	8000168 <__aeabi_dsub>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80031ca:	f04f 0000 	mov.w	r0, #0
 80031ce:	f04f 0100 	mov.w	r1, #0
 80031d2:	f7fc ffc9 	bl	8000168 <__aeabi_dsub>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 80031e0:	e000      	b.n	80031e4 <PID_SetTunings2+0x13c>
		return;
 80031e2:	bf00      	nop
		
	}
	
}
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	408f4000 	.word	0x408f4000

080031f0 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	785b      	ldrb	r3, [r3, #1]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d02e      	beq.n	8003262 <PID_SetControllerDirection+0x72>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	78db      	ldrb	r3, [r3, #3]
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	429a      	cmp	r2, r3
 800320c:	d029      	beq.n	8003262 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f04f 0100 	mov.w	r1, #0
 800321c:	f7fc ffa4 	bl	8000168 <__aeabi_dsub>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003230:	f04f 0000 	mov.w	r0, #0
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	f7fc ff96 	bl	8000168 <__aeabi_dsub>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800324c:	f04f 0000 	mov.w	r0, #0
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f7fc ff88 	bl	8000168 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	70da      	strb	r2, [r3, #3]
	
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	dd2e      	ble.n	80032de <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	f7fd f8bf 	bl	8000404 <__aeabi_i2d>
 8003286:	4604      	mov	r4, r0
 8003288:	460d      	mov	r5, r1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f8a8 	bl	80003e4 <__aeabi_ui2d>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4620      	mov	r0, r4
 800329a:	4629      	mov	r1, r5
 800329c:	f7fd fa46 	bl	800072c <__aeabi_ddiv>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80032ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b2:	f7fd f911 	bl	80004d8 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80032c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ca:	f7fd fa2f 	bl	800072c <__aeabi_ddiv>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_MspInit+0x68>)
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	4a17      	ldr	r2, [pc, #92]	; (8003350 <HAL_MspInit+0x68>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6193      	str	r3, [r2, #24]
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_MspInit+0x68>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_MspInit+0x68>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a11      	ldr	r2, [pc, #68]	; (8003350 <HAL_MspInit+0x68>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_MspInit+0x68>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	607b      	str	r3, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	210f      	movs	r1, #15
 8003322:	f06f 0001 	mvn.w	r0, #1
 8003326:	f002 f9a6 	bl	8005676 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800332a:	4b0a      	ldr	r3, [pc, #40]	; (8003354 <HAL_MspInit+0x6c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <HAL_MspInit+0x6c>)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	40010000 	.word	0x40010000

08003358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a28      	ldr	r2, [pc, #160]	; (8003414 <HAL_ADC_MspInit+0xbc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d149      	bne.n	800340c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a26      	ldr	r2, [pc, #152]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	6193      	str	r3, [r2, #24]
 8003384:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	4a20      	ldr	r2, [pc, #128]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6193      	str	r3, [r2, #24]
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <HAL_ADC_MspInit+0xc0>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033a8:	2303      	movs	r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ac:	2303      	movs	r3, #3
 80033ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4819      	ldr	r0, [pc, #100]	; (800341c <HAL_ADC_MspInit+0xc4>)
 80033b8:	f002 fc94 	bl	8005ce4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033be:	4a19      	ldr	r2, [pc, #100]	; (8003424 <HAL_ADC_MspInit+0xcc>)
 80033c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033dc:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033e6:	2220      	movs	r2, #32
 80033e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 80033f2:	f002 f979 	bl	80056e8 <HAL_DMA_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80033fc:	f7ff fc58 	bl	8002cb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 8003404:	621a      	str	r2, [r3, #32]
 8003406:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_ADC_MspInit+0xc8>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800340c:	bf00      	nop
 800340e:	3720      	adds	r7, #32
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40012400 	.word	0x40012400
 8003418:	40021000 	.word	0x40021000
 800341c:	40010800 	.word	0x40010800
 8003420:	20000a24 	.word	0x20000a24
 8003424:	40020008 	.word	0x40020008

08003428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	; 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_I2C_MspInit+0x90>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d132      	bne.n	80034ae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_I2C_MspInit+0x94>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	4a1b      	ldr	r2, [pc, #108]	; (80034bc <HAL_I2C_MspInit+0x94>)
 800344e:	f043 0308 	orr.w	r3, r3, #8
 8003452:	6193      	str	r3, [r2, #24]
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_I2C_MspInit+0x94>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003460:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003466:	2312      	movs	r3, #18
 8003468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	f107 0314 	add.w	r3, r7, #20
 8003472:	4619      	mov	r1, r3
 8003474:	4812      	ldr	r0, [pc, #72]	; (80034c0 <HAL_I2C_MspInit+0x98>)
 8003476:	f002 fc35 	bl	8005ce4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800347a:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_I2C_MspInit+0x9c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	f043 0302 	orr.w	r3, r3, #2
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_I2C_MspInit+0x9c>)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_I2C_MspInit+0x94>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_I2C_MspInit+0x94>)
 800349c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034a0:	61d3      	str	r3, [r2, #28]
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_I2C_MspInit+0x94>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034ae:	bf00      	nop
 80034b0:	3728      	adds	r7, #40	; 0x28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40005400 	.word	0x40005400
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40010c00 	.word	0x40010c00
 80034c4:	40010000 	.word	0x40010000

080034c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <HAL_RTC_MspInit+0x3c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d110      	bne.n	80034fc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80034da:	f003 fc4d 	bl	8006d78 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80034de:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <HAL_RTC_MspInit+0x40>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RTC_MspInit+0x40>)
 80034e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034e8:	61d3      	str	r3, [r2, #28]
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <HAL_RTC_MspInit+0x40>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_RTC_MspInit+0x44>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40002800 	.word	0x40002800
 8003508:	40021000 	.word	0x40021000
 800350c:	4242043c 	.word	0x4242043c

08003510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d10c      	bne.n	800353c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4a14      	ldr	r2, [pc, #80]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	61d3      	str	r3, [r2, #28]
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800353a:	e018      	b.n	800356e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_TIM_Base_MspInit+0x6c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d113      	bne.n	800356e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	61d3      	str	r3, [r2, #28]
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_TIM_Base_MspInit+0x68>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2105      	movs	r1, #5
 8003562:	201d      	movs	r0, #29
 8003564:	f002 f887 	bl	8005676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003568:	201d      	movs	r0, #29
 800356a:	f002 f8a0 	bl	80056ae <HAL_NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000
 800357c:	40000400 	.word	0x40000400

08003580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 0318 	add.w	r3, r7, #24
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d118      	bne.n	80035d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6193      	str	r3, [r2, #24]
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035b8:	2308      	movs	r3, #8
 80035ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	2302      	movs	r3, #2
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 0318 	add.w	r3, r7, #24
 80035c8:	4619      	mov	r1, r3
 80035ca:	481f      	ldr	r0, [pc, #124]	; (8003648 <HAL_TIM_MspPostInit+0xc8>)
 80035cc:	f002 fb8a 	bl	8005ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035d0:	e034      	b.n	800363c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <HAL_TIM_MspPostInit+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d12f      	bne.n	800363c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035e2:	f043 0304 	orr.w	r3, r3, #4
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4a12      	ldr	r2, [pc, #72]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	6193      	str	r3, [r2, #24]
 8003600:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_TIM_MspPostInit+0xc4>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2302      	movs	r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	4619      	mov	r1, r3
 800361e:	480a      	ldr	r0, [pc, #40]	; (8003648 <HAL_TIM_MspPostInit+0xc8>)
 8003620:	f002 fb60 	bl	8005ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003624:	2303      	movs	r3, #3
 8003626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2302      	movs	r3, #2
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003630:	f107 0318 	add.w	r3, r7, #24
 8003634:	4619      	mov	r1, r3
 8003636:	4806      	ldr	r0, [pc, #24]	; (8003650 <HAL_TIM_MspPostInit+0xd0>)
 8003638:	f002 fb54 	bl	8005ce4 <HAL_GPIO_Init>
}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000
 8003648:	40010800 	.word	0x40010800
 800364c:	40000400 	.word	0x40000400
 8003650:	40010c00 	.word	0x40010c00

08003654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a62      	ldr	r2, [pc, #392]	; (80037f8 <HAL_UART_MspInit+0x1a4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d160      	bne.n	8003736 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003674:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4a60      	ldr	r2, [pc, #384]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800367a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800367e:	6193      	str	r3, [r2, #24]
 8003680:	4b5e      	ldr	r3, [pc, #376]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	4b5b      	ldr	r3, [pc, #364]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	4a5a      	ldr	r2, [pc, #360]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6193      	str	r3, [r2, #24]
 8003698:	4b58      	ldr	r3, [pc, #352]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036aa:	2302      	movs	r3, #2
 80036ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ae:	2303      	movs	r3, #3
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b2:	f107 0318 	add.w	r3, r7, #24
 80036b6:	4619      	mov	r1, r3
 80036b8:	4851      	ldr	r0, [pc, #324]	; (8003800 <HAL_UART_MspInit+0x1ac>)
 80036ba:	f002 fb13 	bl	8005ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	f107 0318 	add.w	r3, r7, #24
 80036d0:	4619      	mov	r1, r3
 80036d2:	484b      	ldr	r0, [pc, #300]	; (8003800 <HAL_UART_MspInit+0x1ac>)
 80036d4:	f002 fb06 	bl	8005ce4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80036d8:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036da:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_UART_MspInit+0x1b4>)
 80036dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036de:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e4:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ea:	4b46      	ldr	r3, [pc, #280]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036f0:	4b44      	ldr	r3, [pc, #272]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f6:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003702:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 8003704:	2200      	movs	r2, #0
 8003706:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003708:	483e      	ldr	r0, [pc, #248]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 800370a:	f001 ffed 	bl	80056e8 <HAL_DMA_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003714:	f7ff facc 	bl	8002cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3a      	ldr	r2, [pc, #232]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 800371c:	63da      	str	r2, [r3, #60]	; 0x3c
 800371e:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_UART_MspInit+0x1b0>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2105      	movs	r1, #5
 8003728:	2025      	movs	r0, #37	; 0x25
 800372a:	f001 ffa4 	bl	8005676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800372e:	2025      	movs	r0, #37	; 0x25
 8003730:	f001 ffbd 	bl	80056ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003734:	e05c      	b.n	80037f0 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a34      	ldr	r2, [pc, #208]	; (800380c <HAL_UART_MspInit+0x1b8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d157      	bne.n	80037f0 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a2d      	ldr	r2, [pc, #180]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 800375e:	f043 0308 	orr.w	r3, r3, #8
 8003762:	6193      	str	r3, [r2, #24]
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_UART_MspInit+0x1a8>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800377a:	2303      	movs	r3, #3
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800377e:	f107 0318 	add.w	r3, r7, #24
 8003782:	4619      	mov	r1, r3
 8003784:	4822      	ldr	r0, [pc, #136]	; (8003810 <HAL_UART_MspInit+0x1bc>)
 8003786:	f002 faad 	bl	8005ce4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800378a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	4619      	mov	r1, r3
 800379e:	481c      	ldr	r0, [pc, #112]	; (8003810 <HAL_UART_MspInit+0x1bc>)
 80037a0:	f002 faa0 	bl	8005ce4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <HAL_UART_MspInit+0x1c4>)
 80037a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037bc:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037ca:	2220      	movs	r2, #32
 80037cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037d4:	480f      	ldr	r0, [pc, #60]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037d6:	f001 ff87 	bl	80056e8 <HAL_DMA_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80037e0:	f7ff fa66 	bl	8002cb0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80037ea:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <HAL_UART_MspInit+0x1c0>)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6253      	str	r3, [r2, #36]	; 0x24
}
 80037f0:	bf00      	nop
 80037f2:	3728      	adds	r7, #40	; 0x28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40013800 	.word	0x40013800
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010800 	.word	0x40010800
 8003804:	20000bf0 	.word	0x20000bf0
 8003808:	40020058 	.word	0x40020058
 800380c:	40004800 	.word	0x40004800
 8003810:	40010c00 	.word	0x40010c00
 8003814:	20000c34 	.word	0x20000c34
 8003818:	40020030 	.word	0x40020030

0800381c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a17      	ldr	r2, [pc, #92]	; (8003888 <HAL_UART_MspDeInit+0x6c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d113      	bne.n	8003856 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_UART_MspDeInit+0x70>)
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_UART_MspDeInit+0x70>)
 8003834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003838:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800383a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800383e:	4814      	ldr	r0, [pc, #80]	; (8003890 <HAL_UART_MspDeInit+0x74>)
 8003840:	f002 fbd4 	bl	8005fec <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	4618      	mov	r0, r3
 800384a:	f001 ffa7 	bl	800579c <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800384e:	2025      	movs	r0, #37	; 0x25
 8003850:	f001 ff3b 	bl	80056ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003854:	e014      	b.n	8003880 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a0e      	ldr	r2, [pc, #56]	; (8003894 <HAL_UART_MspDeInit+0x78>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10f      	bne.n	8003880 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003860:	4b0a      	ldr	r3, [pc, #40]	; (800388c <HAL_UART_MspDeInit+0x70>)
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_UART_MspDeInit+0x70>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800386c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003870:	4809      	ldr	r0, [pc, #36]	; (8003898 <HAL_UART_MspDeInit+0x7c>)
 8003872:	f002 fbbb 	bl	8005fec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	4618      	mov	r0, r3
 800387c:	f001 ff8e 	bl	800579c <HAL_DMA_DeInit>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40013800 	.word	0x40013800
 800388c:	40021000 	.word	0x40021000
 8003890:	40010800 	.word	0x40010800
 8003894:	40004800 	.word	0x40004800
 8003898:	40010c00 	.word	0x40010c00

0800389c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	; 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_InitTick+0xd0>)
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	4a2d      	ldr	r2, [pc, #180]	; (800396c <HAL_InitTick+0xd0>)
 80038b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038bc:	6193      	str	r3, [r2, #24]
 80038be:	4b2b      	ldr	r3, [pc, #172]	; (800396c <HAL_InitTick+0xd0>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038ca:	f107 020c 	add.w	r2, r7, #12
 80038ce:	f107 0310 	add.w	r3, r7, #16
 80038d2:	4611      	mov	r1, r2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f003 fe4d 	bl	8007574 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80038da:	f003 fe37 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 80038de:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e2:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_InitTick+0xd4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	3b01      	subs	r3, #1
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_InitTick+0xd8>)
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <HAL_InitTick+0xdc>)
 80038f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_InitTick+0xd8>)
 80038f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <HAL_InitTick+0xd8>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_InitTick+0xd8>)
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003908:	4b1a      	ldr	r3, [pc, #104]	; (8003974 <HAL_InitTick+0xd8>)
 800390a:	2200      	movs	r2, #0
 800390c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_InitTick+0xd8>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003914:	4817      	ldr	r0, [pc, #92]	; (8003974 <HAL_InitTick+0xd8>)
 8003916:	f004 fb6b 	bl	8007ff0 <HAL_TIM_Base_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003920:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11b      	bne.n	8003960 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003928:	4812      	ldr	r0, [pc, #72]	; (8003974 <HAL_InitTick+0xd8>)
 800392a:	f004 fbb1 	bl	8008090 <HAL_TIM_Base_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003938:	2b00      	cmp	r3, #0
 800393a:	d111      	bne.n	8003960 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800393c:	2019      	movs	r0, #25
 800393e:	f001 feb6 	bl	80056ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b0f      	cmp	r3, #15
 8003946:	d808      	bhi.n	800395a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003948:	2200      	movs	r2, #0
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	2019      	movs	r0, #25
 800394e:	f001 fe92 	bl	8005676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003952:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_InitTick+0xe0>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	e002      	b.n	8003960 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003964:	4618      	mov	r0, r3
 8003966:	3730      	adds	r7, #48	; 0x30
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000
 8003970:	431bde83 	.word	0x431bde83
 8003974:	20001384 	.word	0x20001384
 8003978:	40012c00 	.word	0x40012c00
 800397c:	20000204 	.word	0x20000204

08003980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003984:	e7fe      	b.n	8003984 <NMI_Handler+0x4>

08003986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398a:	e7fe      	b.n	800398a <HardFault_Handler+0x4>

0800398c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003990:	e7fe      	b.n	8003990 <MemManage_Handler+0x4>

08003992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003992:	b480      	push	{r7}
 8003994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003996:	e7fe      	b.n	8003996 <BusFault_Handler+0x4>

08003998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800399c:	e7fe      	b.n	800399c <UsageFault_Handler+0x4>

0800399e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <DMA1_Channel1_IRQHandler+0x10>)
 80039b2:	f002 f863 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000a24 	.word	0x20000a24

080039c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <DMA1_Channel3_IRQHandler+0x10>)
 80039c6:	f002 f859 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000c34 	.word	0x20000c34

080039d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80039d8:	4803      	ldr	r0, [pc, #12]	; (80039e8 <DMA1_Channel5_IRQHandler+0x14>)
 80039da:	f002 f84f 	bl	8005a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <DMA1_Channel5_IRQHandler+0x18>)
 80039e0:	f7fd fc98 	bl	8001314 <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000bf0 	.word	0x20000bf0
 80039ec:	200011ec 	.word	0x200011ec

080039f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM1_UP_IRQHandler+0x10>)
 80039f6:	f004 fcfb 	bl	80083f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20001384 	.word	0x20001384

08003a04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <TIM3_IRQHandler+0x10>)
 8003a0a:	f004 fcf1 	bl	80083f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000b18 	.word	0x20000b18

08003a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a1c:	4803      	ldr	r0, [pc, #12]	; (8003a2c <USART1_IRQHandler+0x14>)
 8003a1e:	f005 fd25 	bl	800946c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 8003a22:	4803      	ldr	r0, [pc, #12]	; (8003a30 <USART1_IRQHandler+0x18>)
 8003a24:	f7fd fc36 	bl	8001294 <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000b60 	.word	0x20000b60
 8003a30:	200011ec 	.word	0x200011ec

08003a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a3c:	4a14      	ldr	r2, [pc, #80]	; (8003a90 <_sbrk+0x5c>)
 8003a3e:	4b15      	ldr	r3, [pc, #84]	; (8003a94 <_sbrk+0x60>)
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d102      	bne.n	8003a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a50:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <_sbrk+0x64>)
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <_sbrk+0x68>)
 8003a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d207      	bcs.n	8003a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a64:	f00a f9d6 	bl	800de14 <__errno>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e009      	b.n	8003a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <_sbrk+0x64>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <_sbrk+0x64>)
 8003a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	20005000 	.word	0x20005000
 8003a94:	00000400 	.word	0x00000400
 8003a98:	200013cc 	.word	0x200013cc
 8003a9c:	20002f18 	.word	0x20002f18

08003aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aa4:	bf00      	nop
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003aac:	f7ff fff8 	bl	8003aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ab0:	480b      	ldr	r0, [pc, #44]	; (8003ae0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003ab2:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab8:	e002      	b.n	8003ac0 <LoopCopyDataInit>

08003aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003abe:	3304      	adds	r3, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac4:	d3f9      	bcc.n	8003aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003ac8:	4c09      	ldr	r4, [pc, #36]	; (8003af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003acc:	e001      	b.n	8003ad2 <LoopFillZerobss>

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad0:	3204      	adds	r2, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f00a f9a3 	bl	800de20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ada:	f7fe fafb 	bl	80020d4 <main>
  bx lr
 8003ade:	4770      	bx	lr
  ldr r0, =_sdata
 8003ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003ae8:	0800e9e8 	.word	0x0800e9e8
  ldr r2, =_sbss
 8003aec:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003af0:	20002f18 	.word	0x20002f18

08003af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003af4:	e7fe      	b.n	8003af4 <ADC1_2_IRQHandler>

08003af6 <StartBluetooth>:
BleComando BLEAtualizaDataHora,BLEAlteraLimiteTemp,BLERestaura,BLESPTeto,BLESPLastro,BLESPtempo,BLEToggleTempo,BLEReceita,BLESPTempo,BLELightOn,BLELightOff;
BleComando BLESetaLampada,BLECancelaProcesso;


void StartBluetooth(void const * argument)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
	initBluetooth();
 8003afe:	f000 f81f 	bl	8003b40 <initBluetooth>

	for(;;)
	{
		rxBluetooth();
 8003b02:	f000 f9e3 	bl	8003ecc <rxBluetooth>

		txBluetooth();
 8003b06:	f000 f8df 	bl	8003cc8 <txBluetooth>

		osThreadYield();
 8003b0a:	f006 fcab 	bl	800a464 <osThreadYield>
		osDelay(50);
 8003b0e:	2032      	movs	r0, #50	; 0x32
 8003b10:	f006 fcba 	bl	800a488 <osDelay>
		rxBluetooth();
 8003b14:	e7f5      	b.n	8003b02 <StartBluetooth+0xc>
	...

08003b18 <taskBluetooth1sec>:
}

static uint16_t tempoSemAtividade;
#define MACRO_ANULA_INATIVIDADE tempoSemAtividade = 0;

void taskBluetooth1sec(void){
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003b1c:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <taskBluetooth1sec+0x24>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003b24:	d302      	bcc.n	8003b2c <taskBluetooth1sec+0x14>
		desligaForno();
 8003b26:	f7fe ff4b 	bl	80029c0 <desligaForno>
	}else
		tempoSemAtividade++;
}
 8003b2a:	e005      	b.n	8003b38 <taskBluetooth1sec+0x20>
		tempoSemAtividade++;
 8003b2c:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <taskBluetooth1sec+0x24>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	4b01      	ldr	r3, [pc, #4]	; (8003b3c <taskBluetooth1sec+0x24>)
 8003b36:	801a      	strh	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20001440 	.word	0x20001440

08003b40 <initBluetooth>:

void initBluetooth(void){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af02      	add	r7, sp, #8
	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 8003b46:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <initBluetooth+0x104>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <initBluetooth+0x108>)
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <initBluetooth+0x10c>)
 8003b50:	493f      	ldr	r1, [pc, #252]	; (8003c50 <initBluetooth+0x110>)
 8003b52:	4840      	ldr	r0, [pc, #256]	; (8003c54 <initBluetooth+0x114>)
 8003b54:	f7fd fa28 	bl	8000fa8 <BluetoothInit>

	//inicializacao do hardware
	iniciaBleHm10(&bluetooth);
 8003b58:	483e      	ldr	r0, [pc, #248]	; (8003c54 <initBluetooth+0x114>)
 8003b5a:	f7fd fe29 	bl	80017b0 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 8003b5e:	2301      	movs	r3, #1
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2315      	movs	r3, #21
 8003b64:	4a3c      	ldr	r2, [pc, #240]	; (8003c58 <initBluetooth+0x118>)
 8003b66:	493d      	ldr	r1, [pc, #244]	; (8003c5c <initBluetooth+0x11c>)
 8003b68:	483a      	ldr	r0, [pc, #232]	; (8003c54 <initBluetooth+0x114>)
 8003b6a:	f7fd fa61 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 8003b6e:	2301      	movs	r3, #1
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2317      	movs	r3, #23
 8003b74:	4a3a      	ldr	r2, [pc, #232]	; (8003c60 <initBluetooth+0x120>)
 8003b76:	493b      	ldr	r1, [pc, #236]	; (8003c64 <initBluetooth+0x124>)
 8003b78:	4836      	ldr	r0, [pc, #216]	; (8003c54 <initBluetooth+0x114>)
 8003b7a:	f7fd fa59 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 8003b7e:	2301      	movs	r3, #1
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2326      	movs	r3, #38	; 0x26
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <initBluetooth+0x128>)
 8003b86:	4939      	ldr	r1, [pc, #228]	; (8003c6c <initBluetooth+0x12c>)
 8003b88:	4832      	ldr	r0, [pc, #200]	; (8003c54 <initBluetooth+0x114>)
 8003b8a:	f7fd fa51 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 8003b8e:	2301      	movs	r3, #1
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2303      	movs	r3, #3
 8003b94:	4a36      	ldr	r2, [pc, #216]	; (8003c70 <initBluetooth+0x130>)
 8003b96:	4937      	ldr	r1, [pc, #220]	; (8003c74 <initBluetooth+0x134>)
 8003b98:	482e      	ldr	r0, [pc, #184]	; (8003c54 <initBluetooth+0x114>)
 8003b9a:	f7fd fa49 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <initBluetooth+0x138>)
 8003ba6:	4935      	ldr	r1, [pc, #212]	; (8003c7c <initBluetooth+0x13c>)
 8003ba8:	482a      	ldr	r0, [pc, #168]	; (8003c54 <initBluetooth+0x114>)
 8003baa:	f7fd fa41 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 8003bae:	2301      	movs	r3, #1
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2321      	movs	r3, #33	; 0x21
 8003bb4:	4a32      	ldr	r2, [pc, #200]	; (8003c80 <initBluetooth+0x140>)
 8003bb6:	4933      	ldr	r1, [pc, #204]	; (8003c84 <initBluetooth+0x144>)
 8003bb8:	4826      	ldr	r0, [pc, #152]	; (8003c54 <initBluetooth+0x114>)
 8003bba:	f7fd fa39 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2322      	movs	r3, #34	; 0x22
 8003bc4:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <initBluetooth+0x148>)
 8003bc6:	4931      	ldr	r1, [pc, #196]	; (8003c8c <initBluetooth+0x14c>)
 8003bc8:	4822      	ldr	r0, [pc, #136]	; (8003c54 <initBluetooth+0x114>)
 8003bca:	f7fd fa31 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003bce:	2301      	movs	r3, #1
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	2323      	movs	r3, #35	; 0x23
 8003bd4:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <initBluetooth+0x150>)
 8003bd6:	492f      	ldr	r1, [pc, #188]	; (8003c94 <initBluetooth+0x154>)
 8003bd8:	481e      	ldr	r0, [pc, #120]	; (8003c54 <initBluetooth+0x114>)
 8003bda:	f7fd fa29 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 8003bde:	2301      	movs	r3, #1
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2324      	movs	r3, #36	; 0x24
 8003be4:	4a2c      	ldr	r2, [pc, #176]	; (8003c98 <initBluetooth+0x158>)
 8003be6:	492d      	ldr	r1, [pc, #180]	; (8003c9c <initBluetooth+0x15c>)
 8003be8:	481a      	ldr	r0, [pc, #104]	; (8003c54 <initBluetooth+0x114>)
 8003bea:	f7fd fa21 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 8003bee:	2301      	movs	r3, #1
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	2325      	movs	r3, #37	; 0x25
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <initBluetooth+0x160>)
 8003bf6:	492b      	ldr	r1, [pc, #172]	; (8003ca4 <initBluetooth+0x164>)
 8003bf8:	4816      	ldr	r0, [pc, #88]	; (8003c54 <initBluetooth+0x114>)
 8003bfa:	f7fd fa19 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 8003bfe:	2301      	movs	r3, #1
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	2327      	movs	r3, #39	; 0x27
 8003c04:	4a28      	ldr	r2, [pc, #160]	; (8003ca8 <initBluetooth+0x168>)
 8003c06:	4929      	ldr	r1, [pc, #164]	; (8003cac <initBluetooth+0x16c>)
 8003c08:	4812      	ldr	r0, [pc, #72]	; (8003c54 <initBluetooth+0x114>)
 8003c0a:	f7fd fa11 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 8003c0e:	2301      	movs	r3, #1
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	2328      	movs	r3, #40	; 0x28
 8003c14:	4a26      	ldr	r2, [pc, #152]	; (8003cb0 <initBluetooth+0x170>)
 8003c16:	4927      	ldr	r1, [pc, #156]	; (8003cb4 <initBluetooth+0x174>)
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <initBluetooth+0x114>)
 8003c1a:	f7fd fa09 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 8003c1e:	2301      	movs	r3, #1
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2330      	movs	r3, #48	; 0x30
 8003c24:	4a24      	ldr	r2, [pc, #144]	; (8003cb8 <initBluetooth+0x178>)
 8003c26:	4925      	ldr	r1, [pc, #148]	; (8003cbc <initBluetooth+0x17c>)
 8003c28:	480a      	ldr	r0, [pc, #40]	; (8003c54 <initBluetooth+0x114>)
 8003c2a:	f7fd fa01 	bl	8001030 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2329      	movs	r3, #41	; 0x29
 8003c34:	4a22      	ldr	r2, [pc, #136]	; (8003cc0 <initBluetooth+0x180>)
 8003c36:	4923      	ldr	r1, [pc, #140]	; (8003cc4 <initBluetooth+0x184>)
 8003c38:	4806      	ldr	r0, [pc, #24]	; (8003c54 <initBluetooth+0x114>)
 8003c3a:	f7fd f9f9 	bl	8001030 <BluetoothAddComp>
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200011d0 	.word	0x200011d0
 8003c48:	200011d4 	.word	0x200011d4
 8003c4c:	20000bf0 	.word	0x20000bf0
 8003c50:	20000b60 	.word	0x20000b60
 8003c54:	200011ec 	.word	0x200011ec
 8003c58:	0800e7d0 	.word	0x0800e7d0
 8003c5c:	200013d0 	.word	0x200013d0
 8003c60:	0800e7e8 	.word	0x0800e7e8
 8003c64:	200013d8 	.word	0x200013d8
 8003c68:	0800e800 	.word	0x0800e800
 8003c6c:	200013e8 	.word	0x200013e8
 8003c70:	0800e818 	.word	0x0800e818
 8003c74:	200013e0 	.word	0x200013e0
 8003c78:	0800e82c 	.word	0x0800e82c
 8003c7c:	200013f0 	.word	0x200013f0
 8003c80:	0800e838 	.word	0x0800e838
 8003c84:	200013f8 	.word	0x200013f8
 8003c88:	0800e848 	.word	0x0800e848
 8003c8c:	20001400 	.word	0x20001400
 8003c90:	0800e85c 	.word	0x0800e85c
 8003c94:	20001418 	.word	0x20001418
 8003c98:	0800e868 	.word	0x0800e868
 8003c9c:	20001408 	.word	0x20001408
 8003ca0:	0800e878 	.word	0x0800e878
 8003ca4:	20001410 	.word	0x20001410
 8003ca8:	0800e884 	.word	0x0800e884
 8003cac:	20001420 	.word	0x20001420
 8003cb0:	0800e894 	.word	0x0800e894
 8003cb4:	20001428 	.word	0x20001428
 8003cb8:	0800e8a8 	.word	0x0800e8a8
 8003cbc:	20001430 	.word	0x20001430
 8003cc0:	0800e8bc 	.word	0x0800e8bc
 8003cc4:	20001438 	.word	0x20001438

08003cc8 <txBluetooth>:

void txBluetooth(void){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <txBluetooth+0x1e0>)
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f006 fd88 	bl	800a7ec <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b10      	cmp	r3, #16
 8003ce0:	f040 80de 	bne.w	8003ea0 <txBluetooth+0x1d8>
		switch ((unsigned int)evttx.value.p) {
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b18      	cmp	r3, #24
 8003ce8:	f000 80b1 	beq.w	8003e4e <txBluetooth+0x186>
 8003cec:	2b18      	cmp	r3, #24
 8003cee:	f200 80d7 	bhi.w	8003ea0 <txBluetooth+0x1d8>
 8003cf2:	2b16      	cmp	r3, #22
 8003cf4:	d002      	beq.n	8003cfc <txBluetooth+0x34>
 8003cf6:	2b17      	cmp	r3, #23
 8003cf8:	d07d      	beq.n	8003df6 <txBluetooth+0x12e>
			Buffer[9]	= VERSAO;
			BluetoothEnviaComando(Buffer, 9);
			break;
		}
	}
}
 8003cfa:	e0d1      	b.n	8003ea0 <txBluetooth+0x1d8>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 8003d00:	2316      	movs	r3, #22
 8003d02:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.Erro.byte;							// Conjunto de erros
 8003d04:	4b69      	ldr	r3, [pc, #420]	; (8003eac <txBluetooth+0x1e4>)
 8003d06:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d0a:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.stateMaquina;			// State da maquina
 8003d0c:	4b67      	ldr	r3, [pc, #412]	; (8003eac <txBluetooth+0x1e4>)
 8003d0e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d12:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	>>8;
 8003d14:	4b65      	ldr	r3, [pc, #404]	; (8003eac <txBluetooth+0x1e4>)
 8003d16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f7fc fe75 	bl	8000a0c <__aeabi_d2uiz>
 8003d22:	4603      	mov	r3, r0
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	& 0x00FF;
 8003d2e:	4b5f      	ldr	r3, [pc, #380]	; (8003eac <txBluetooth+0x1e4>)
 8003d30:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7fc fe68 	bl	8000a0c <__aeabi_d2uiz>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 	>>8;
 8003d44:	4b59      	ldr	r3, [pc, #356]	; (8003eac <txBluetooth+0x1e4>)
 8003d46:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fc fe5d 	bl	8000a0c <__aeabi_d2uiz>
 8003d52:	4603      	mov	r3, r0
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 	& 0x00FF;
 8003d5e:	4b53      	ldr	r3, [pc, #332]	; (8003eac <txBluetooth+0x1e4>)
 8003d60:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7fc fe50 	bl	8000a0c <__aeabi_d2uiz>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003d74:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <txBluetooth+0x1e4>)
 8003d76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fc fe45 	bl	8000a0c <__aeabi_d2uiz>
 8003d82:	4603      	mov	r3, r0
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	0a1b      	lsrs	r3, r3, #8
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003d8e:	4b47      	ldr	r3, [pc, #284]	; (8003eac <txBluetooth+0x1e4>)
 8003d90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f7fc fe38 	bl	8000a0c <__aeabi_d2uiz>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 8003da4:	4b41      	ldr	r3, [pc, #260]	; (8003eac <txBluetooth+0x1e4>)
 8003da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc fe2d 	bl	8000a0c <__aeabi_d2uiz>
 8003db2:	4603      	mov	r3, r0
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	76bb      	strb	r3, [r7, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <txBluetooth+0x1e4>)
 8003dc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f7fc fe20 	bl	8000a0c <__aeabi_d2uiz>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	76fb      	strb	r3, [r7, #27]
			BluetoothEnviaComando(Buffer, 11);
 8003dd4:	f107 0310 	add.w	r3, r7, #16
 8003dd8:	210b      	movs	r1, #11
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fd fc16 	bl	800160c <BluetoothEnviaComando>
			osDelay(10);
 8003de0:	200a      	movs	r0, #10
 8003de2:	f006 fb51 	bl	800a488 <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <txBluetooth+0x1e0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2117      	movs	r1, #23
 8003dee:	4618      	mov	r0, r3
 8003df0:	f006 fcbc 	bl	800a76c <osMessagePut>
			break;
 8003df4:	e054      	b.n	8003ea0 <txBluetooth+0x1d8>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003df6:	2301      	movs	r3, #1
 8003df8:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003dfa:	2317      	movs	r3, #23
 8003dfc:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.RTTimerMinutos;
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <txBluetooth+0x1e4>)
 8003e00:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003e04:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerSegundos;
 8003e06:	4b29      	ldr	r3, [pc, #164]	; (8003eac <txBluetooth+0x1e4>)
 8003e08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e0c:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= PrimitiveStates.SPTimerMinutos;
 8003e0e:	4b27      	ldr	r3, [pc, #156]	; (8003eac <txBluetooth+0x1e4>)
 8003e10:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003e14:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerSegundos;
 8003e16:	4b25      	ldr	r3, [pc, #148]	; (8003eac <txBluetooth+0x1e4>)
 8003e18:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003e1c:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)horimetroHoras.valor >> 8;
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <txBluetooth+0x1e8>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	121b      	asrs	r3, r3, #8
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <txBluetooth+0x1e8>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)horimetroMinutos.valor;
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <txBluetooth+0x1ec>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= PrimitiveStates.Lampada;
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <txBluetooth+0x1e4>)
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	2109      	movs	r1, #9
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd fbe0 	bl	800160c <BluetoothEnviaComando>
			break;
 8003e4c:	e028      	b.n	8003ea0 <txBluetooth+0x1d8>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e4e:	2301      	movs	r3, #1
 8003e50:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003e52:	2318      	movs	r3, #24
 8003e54:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x01;									// Modelo
 8003e56:	2301      	movs	r3, #1
 8003e58:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <txBluetooth+0x1f0>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor	>> 8 ;
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <txBluetooth+0x1f4>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	121b      	asrs	r3, r3, #8
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint8_t)LimiteTemperatura.valor	& 0x00ff ;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <txBluetooth+0x1f4>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)instalacaoDia.valor;
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <txBluetooth+0x1f8>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)instalacaoMes.valor;
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <txBluetooth+0x1fc>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)instalacaoAno.valor;
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <txBluetooth+0x200>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= VERSAO;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	2109      	movs	r1, #9
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fd fbb7 	bl	800160c <BluetoothEnviaComando>
			break;
 8003e9e:	bf00      	nop
}
 8003ea0:	bf00      	nop
 8003ea2:	3730      	adds	r7, #48	; 0x30
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	200011d0 	.word	0x200011d0
 8003eac:	20001338 	.word	0x20001338
 8003eb0:	20001504 	.word	0x20001504
 8003eb4:	2000152c 	.word	0x2000152c
 8003eb8:	2000161c 	.word	0x2000161c
 8003ebc:	200015f4 	.word	0x200015f4
 8003ec0:	20001554 	.word	0x20001554
 8003ec4:	2000157c 	.word	0x2000157c
 8003ec8:	200015a4 	.word	0x200015a4

08003ecc <rxBluetooth>:

void rxBluetooth(void){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 8003ed2:	4bbc      	ldr	r3, [pc, #752]	; (80041c4 <rxBluetooth+0x2f8>)
 8003ed4:	6819      	ldr	r1, [r3, #0]
 8003ed6:	f107 030c 	add.w	r3, r7, #12
 8003eda:	2200      	movs	r2, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f006 fc85 	bl	800a7ec <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	f040 826d 	bne.w	80043c4 <rxBluetooth+0x4f8>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003eea:	4bb7      	ldr	r3, [pc, #732]	; (80041c8 <rxBluetooth+0x2fc>)
 8003eec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	2b2d      	cmp	r3, #45	; 0x2d
 8003ef4:	f200 8266 	bhi.w	80043c4 <rxBluetooth+0x4f8>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <rxBluetooth+0x34>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08003fd9 	.word	0x08003fd9
 8003f04:	080043c5 	.word	0x080043c5
 8003f08:	080043c5 	.word	0x080043c5
 8003f0c:	080043c5 	.word	0x080043c5
 8003f10:	080043c5 	.word	0x080043c5
 8003f14:	080043c5 	.word	0x080043c5
 8003f18:	080043c5 	.word	0x080043c5
 8003f1c:	080043c5 	.word	0x080043c5
 8003f20:	080043c5 	.word	0x080043c5
 8003f24:	080043c5 	.word	0x080043c5
 8003f28:	080043c5 	.word	0x080043c5
 8003f2c:	080043c5 	.word	0x080043c5
 8003f30:	080043c5 	.word	0x080043c5
 8003f34:	080043c3 	.word	0x080043c3
 8003f38:	080043c5 	.word	0x080043c5
 8003f3c:	080043c5 	.word	0x080043c5
 8003f40:	080043c5 	.word	0x080043c5
 8003f44:	080043c5 	.word	0x080043c5
 8003f48:	08003fb9 	.word	0x08003fb9
 8003f4c:	080043c5 	.word	0x080043c5
 8003f50:	08003fc9 	.word	0x08003fc9
 8003f54:	080043c5 	.word	0x080043c5
 8003f58:	080043c5 	.word	0x080043c5
 8003f5c:	080043c5 	.word	0x080043c5
 8003f60:	080043c5 	.word	0x080043c5
 8003f64:	080043c5 	.word	0x080043c5
 8003f68:	080043c5 	.word	0x080043c5
 8003f6c:	080043c5 	.word	0x080043c5
 8003f70:	080043c5 	.word	0x080043c5
 8003f74:	080043c5 	.word	0x080043c5
 8003f78:	08004035 	.word	0x08004035
 8003f7c:	08004077 	.word	0x08004077
 8003f80:	080040b9 	.word	0x080040b9
 8003f84:	08004145 	.word	0x08004145
 8003f88:	080041dd 	.word	0x080041dd
 8003f8c:	080042a9 	.word	0x080042a9
 8003f90:	080042f5 	.word	0x080042f5
 8003f94:	08004333 	.word	0x08004333
 8003f98:	080043a3 	.word	0x080043a3
 8003f9c:	080043c5 	.word	0x080043c5
 8003fa0:	080043c5 	.word	0x080043c5
 8003fa4:	080043c5 	.word	0x080043c5
 8003fa8:	080043c5 	.word	0x080043c5
 8003fac:	080043c5 	.word	0x080043c5
 8003fb0:	080043c5 	.word	0x080043c5
 8003fb4:	0800436d 	.word	0x0800436d
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003fb8:	4b84      	ldr	r3, [pc, #528]	; (80041cc <rxBluetooth+0x300>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2116      	movs	r1, #22
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f006 fbd3 	bl	800a76c <osMessagePut>
			break;
 8003fc6:	e1fd      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003fc8:	4b80      	ldr	r3, [pc, #512]	; (80041cc <rxBluetooth+0x300>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2118      	movs	r1, #24
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f006 fbcb 	bl	800a76c <osMessagePut>
			break;
 8003fd6:	e1f5      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_ATUALIZA_HORA:

			RTC_DateTypeDef datetoUpdate;
			RTC_TimeTypeDef timeToUpdate;

			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003fd8:	4b7b      	ldr	r3, [pc, #492]	; (80041c8 <rxBluetooth+0x2fc>)
 8003fda:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fde:	723b      	strb	r3, [r7, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003fe0:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <rxBluetooth+0x2fc>)
 8003fe2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003fe6:	72bb      	strb	r3, [r7, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003fe8:	4b77      	ldr	r3, [pc, #476]	; (80041c8 <rxBluetooth+0x2fc>)
 8003fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fee:	727b      	strb	r3, [r7, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003ff0:	4b75      	ldr	r3, [pc, #468]	; (80041c8 <rxBluetooth+0x2fc>)
 8003ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff6:	72fb      	strb	r3, [r7, #11]
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003ff8:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <rxBluetooth+0x2fc>)
 8003ffa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ffe:	713b      	strb	r3, [r7, #4]
			timeToUpdate.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
 8004000:	4b71      	ldr	r3, [pc, #452]	; (80041c8 <rxBluetooth+0x2fc>)
 8004002:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004006:	717b      	strb	r3, [r7, #5]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8004008:	4b6f      	ldr	r3, [pc, #444]	; (80041c8 <rxBluetooth+0x2fc>)
 800400a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800400e:	71bb      	strb	r3, [r7, #6]

			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	68b8      	ldr	r0, [r7, #8]
 8004014:	f000 fbc6 	bl	80047a4 <atualizaDataEeprom>

			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 8004018:	4b6b      	ldr	r3, [pc, #428]	; (80041c8 <rxBluetooth+0x2fc>)
 800401a:	2201      	movs	r2, #1
 800401c:	721a      	strb	r2, [r3, #8]
 800401e:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <rxBluetooth+0x2fc>)
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	725a      	strb	r2, [r3, #9]
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <rxBluetooth+0x2fc>)
 8004026:	2203      	movs	r2, #3
 8004028:	729a      	strb	r2, [r3, #10]
 800402a:	2103      	movs	r1, #3
 800402c:	4868      	ldr	r0, [pc, #416]	; (80041d0 <rxBluetooth+0x304>)
 800402e:	f7fd fb55 	bl	80016dc <Envia_bytes_UART>
			break;
 8004032:	e1c7      	b.n	80043c4 <rxBluetooth+0x4f8>
			//				Maquina.Maquina_eeprom = EEPROM_HARD_RESET;
			//				MACRO_ENVIA_AKNOLADGE_(RX_RESTAURA)
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004034:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <rxBluetooth+0x308>)
 8004036:	2200      	movs	r2, #0
 8004038:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <rxBluetooth+0x2fc>)
 800403c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <rxBluetooth+0x2fc>)
 8004044:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8004048:	4313      	orrs	r3, r2
 800404a:	4618      	mov	r0, r3
 800404c:	f7fc f9da 	bl	8000404 <__aeabi_i2d>
 8004050:	4602      	mov	r2, r0
 8004052:	460b      	mov	r3, r1
 8004054:	4960      	ldr	r1, [pc, #384]	; (80041d8 <rxBluetooth+0x30c>)
 8004056:	e9c1 2306 	strd	r2, r3, [r1, #24]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 800405a:	4b5b      	ldr	r3, [pc, #364]	; (80041c8 <rxBluetooth+0x2fc>)
 800405c:	2201      	movs	r2, #1
 800405e:	721a      	strb	r2, [r3, #8]
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <rxBluetooth+0x2fc>)
 8004062:	22ff      	movs	r2, #255	; 0xff
 8004064:	725a      	strb	r2, [r3, #9]
 8004066:	4b58      	ldr	r3, [pc, #352]	; (80041c8 <rxBluetooth+0x2fc>)
 8004068:	2221      	movs	r2, #33	; 0x21
 800406a:	729a      	strb	r2, [r3, #10]
 800406c:	2103      	movs	r1, #3
 800406e:	4858      	ldr	r0, [pc, #352]	; (80041d0 <rxBluetooth+0x304>)
 8004070:	f7fd fb34 	bl	80016dc <Envia_bytes_UART>
			break;
 8004074:	e1a6      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004076:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <rxBluetooth+0x308>)
 8004078:	2200      	movs	r2, #0
 800407a:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <rxBluetooth+0x2fc>)
 800407e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <rxBluetooth+0x2fc>)
 8004086:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 800408a:	4313      	orrs	r3, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f7fc f9b9 	bl	8000404 <__aeabi_i2d>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4950      	ldr	r1, [pc, #320]	; (80041d8 <rxBluetooth+0x30c>)
 8004098:	e9c1 2308 	strd	r2, r3, [r1, #32]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 800409c:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <rxBluetooth+0x2fc>)
 800409e:	2201      	movs	r2, #1
 80040a0:	721a      	strb	r2, [r3, #8]
 80040a2:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <rxBluetooth+0x2fc>)
 80040a4:	22ff      	movs	r2, #255	; 0xff
 80040a6:	725a      	strb	r2, [r3, #9]
 80040a8:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <rxBluetooth+0x2fc>)
 80040aa:	2222      	movs	r2, #34	; 0x22
 80040ac:	729a      	strb	r2, [r3, #10]
 80040ae:	2103      	movs	r1, #3
 80040b0:	4847      	ldr	r0, [pc, #284]	; (80041d0 <rxBluetooth+0x304>)
 80040b2:	f7fd fb13 	bl	80016dc <Envia_bytes_UART>
			break;
 80040b6:	e185      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_SP_TEMPO:
		{	//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80040b8:	4b46      	ldr	r3, [pc, #280]	; (80041d4 <rxBluetooth+0x308>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 80040be:	4b42      	ldr	r3, [pc, #264]	; (80041c8 <rxBluetooth+0x2fc>)
 80040c0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80040c4:	4b44      	ldr	r3, [pc, #272]	; (80041d8 <rxBluetooth+0x30c>)
 80040c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 80040ca:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <rxBluetooth+0x2fc>)
 80040cc:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80040d0:	4b41      	ldr	r3, [pc, #260]	; (80041d8 <rxBluetooth+0x30c>)
 80040d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <rxBluetooth+0x30c>)
 80040d8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80040dc:	4b3e      	ldr	r3, [pc, #248]	; (80041d8 <rxBluetooth+0x30c>)
 80040de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 80040e2:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <rxBluetooth+0x30c>)
 80040e4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <rxBluetooth+0x30c>)
 80040ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

			switch (PrimitiveStates.stateMaquina) {
 80040ee:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <rxBluetooth+0x30c>)
 80040f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	dc02      	bgt.n	80040fe <rxBluetooth+0x232>
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da04      	bge.n	8004106 <rxBluetooth+0x23a>
 80040fc:	e014      	b.n	8004128 <rxBluetooth+0x25c>
 80040fe:	3b02      	subs	r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d811      	bhi.n	8004128 <rxBluetooth+0x25c>
 8004104:	e001      	b.n	800410a <rxBluetooth+0x23e>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004106:	bf00      	nop
				break;
 8004108:	e00e      	b.n	8004128 <rxBluetooth+0x25c>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 800410a:	4b33      	ldr	r3, [pc, #204]	; (80041d8 <rxBluetooth+0x30c>)
 800410c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004110:	2b01      	cmp	r3, #1
 8004112:	d104      	bne.n	800411e <rxBluetooth+0x252>
					PrimitiveStates.stateMaquina 	= decrementando;
 8004114:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <rxBluetooth+0x30c>)
 8004116:	2203      	movs	r2, #3
 8004118:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 800411c:	e003      	b.n	8004126 <rxBluetooth+0x25a>
					PrimitiveStates.stateMaquina = aquecendo;
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <rxBluetooth+0x30c>)
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 8004126:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <rxBluetooth+0x2fc>)
 800412a:	2201      	movs	r2, #1
 800412c:	721a      	strb	r2, [r3, #8]
 800412e:	4b26      	ldr	r3, [pc, #152]	; (80041c8 <rxBluetooth+0x2fc>)
 8004130:	22ff      	movs	r2, #255	; 0xff
 8004132:	725a      	strb	r2, [r3, #9]
 8004134:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <rxBluetooth+0x2fc>)
 8004136:	2223      	movs	r2, #35	; 0x23
 8004138:	729a      	strb	r2, [r3, #10]
 800413a:	2103      	movs	r1, #3
 800413c:	4824      	ldr	r0, [pc, #144]	; (80041d0 <rxBluetooth+0x304>)
 800413e:	f7fd facd 	bl	80016dc <Envia_bytes_UART>
		}
		break;
 8004142:	e13f      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_TOGGLE_TEMPO:
		{
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <rxBluetooth+0x308>)
 8004146:	2200      	movs	r2, #0
 8004148:	801a      	strh	r2, [r3, #0]

			switch (PrimitiveStates.stateMaquina) {
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <rxBluetooth+0x30c>)
 800414c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004150:	2b04      	cmp	r3, #4
 8004152:	d828      	bhi.n	80041a6 <rxBluetooth+0x2da>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <rxBluetooth+0x290>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004171 	.word	0x08004171
 8004160:	08004171 	.word	0x08004171
 8004164:	08004175 	.word	0x08004175
 8004168:	0800417f 	.word	0x0800417f
 800416c:	08004189 	.word	0x08004189
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004170:	bf00      	nop
				break;
 8004172:	e018      	b.n	80041a6 <rxBluetooth+0x2da>
			case aquecido:
				PrimitiveStates.stateMaquina = decrementando;
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <rxBluetooth+0x30c>)
 8004176:	2203      	movs	r2, #3
 8004178:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 800417c:	e013      	b.n	80041a6 <rxBluetooth+0x2da>
			case decrementando:
				PrimitiveStates.stateMaquina = pausado;
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <rxBluetooth+0x30c>)
 8004180:	2204      	movs	r2, #4
 8004182:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 8004186:	e00e      	b.n	80041a6 <rxBluetooth+0x2da>
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004188:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <rxBluetooth+0x30c>)
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418e:	2b01      	cmp	r3, #1
 8004190:	d104      	bne.n	800419c <rxBluetooth+0x2d0>
					PrimitiveStates.stateMaquina = decrementando;
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <rxBluetooth+0x30c>)
 8004194:	2203      	movs	r2, #3
 8004196:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 800419a:	e003      	b.n	80041a4 <rxBluetooth+0x2d8>
					PrimitiveStates.stateMaquina = aquecendo;
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <rxBluetooth+0x30c>)
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80041a4:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <rxBluetooth+0x2fc>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	721a      	strb	r2, [r3, #8]
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <rxBluetooth+0x2fc>)
 80041ae:	22ff      	movs	r2, #255	; 0xff
 80041b0:	725a      	strb	r2, [r3, #9]
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <rxBluetooth+0x2fc>)
 80041b4:	2224      	movs	r2, #36	; 0x24
 80041b6:	729a      	strb	r2, [r3, #10]
 80041b8:	2103      	movs	r1, #3
 80041ba:	4805      	ldr	r0, [pc, #20]	; (80041d0 <rxBluetooth+0x304>)
 80041bc:	f7fd fa8e 	bl	80016dc <Envia_bytes_UART>
		}
		break;
 80041c0:	e100      	b.n	80043c4 <rxBluetooth+0x4f8>
 80041c2:	bf00      	nop
 80041c4:	200011d4 	.word	0x200011d4
 80041c8:	200011ec 	.word	0x200011ec
 80041cc:	200011d0 	.word	0x200011d0
 80041d0:	200011f4 	.word	0x200011f4
 80041d4:	20001440 	.word	0x20001440
 80041d8:	20001338 	.word	0x20001338
		case RX_RECEITA:
		{
			MACRO_ANULA_INATIVIDADE
 80041dc:	4b7b      	ldr	r3, [pc, #492]	; (80043cc <rxBluetooth+0x500>)
 80041de:	2200      	movs	r2, #0
 80041e0:	801a      	strh	r2, [r3, #0]
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80041e2:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <rxBluetooth+0x504>)
 80041e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	4a79      	ldr	r2, [pc, #484]	; (80043d0 <rxBluetooth+0x504>)
 80041ec:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 80041f0:	4313      	orrs	r3, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f906 	bl	8000404 <__aeabi_i2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4975      	ldr	r1, [pc, #468]	; (80043d4 <rxBluetooth+0x508>)
 80041fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <rxBluetooth+0x504>)
 8004204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	4a71      	ldr	r2, [pc, #452]	; (80043d0 <rxBluetooth+0x504>)
 800420c:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8004210:	4313      	orrs	r3, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc f8f6 	bl	8000404 <__aeabi_i2d>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	496d      	ldr	r1, [pc, #436]	; (80043d4 <rxBluetooth+0x508>)
 800421e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004222:	4b6b      	ldr	r3, [pc, #428]	; (80043d0 <rxBluetooth+0x504>)
 8004224:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8004228:	4b6a      	ldr	r3, [pc, #424]	; (80043d4 <rxBluetooth+0x508>)
 800422a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 800422e:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <rxBluetooth+0x504>)
 8004230:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8004234:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <rxBluetooth+0x508>)
 8004236:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 800423a:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <rxBluetooth+0x508>)
 800423c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004240:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <rxBluetooth+0x508>)
 8004242:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004246:	4b63      	ldr	r3, [pc, #396]	; (80043d4 <rxBluetooth+0x508>)
 8004248:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <rxBluetooth+0x508>)
 800424e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			switch (PrimitiveStates.stateMaquina) {
 8004252:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <rxBluetooth+0x508>)
 8004254:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004258:	2b01      	cmp	r3, #1
 800425a:	dc02      	bgt.n	8004262 <rxBluetooth+0x396>
 800425c:	2b00      	cmp	r3, #0
 800425e:	da04      	bge.n	800426a <rxBluetooth+0x39e>
 8004260:	e014      	b.n	800428c <rxBluetooth+0x3c0>
 8004262:	3b02      	subs	r3, #2
 8004264:	2b02      	cmp	r3, #2
 8004266:	d811      	bhi.n	800428c <rxBluetooth+0x3c0>
 8004268:	e001      	b.n	800426e <rxBluetooth+0x3a2>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 800426a:	bf00      	nop
				break;
 800426c:	e00e      	b.n	800428c <rxBluetooth+0x3c0>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 800426e:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <rxBluetooth+0x508>)
 8004270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004274:	2b01      	cmp	r3, #1
 8004276:	d104      	bne.n	8004282 <rxBluetooth+0x3b6>
					PrimitiveStates.stateMaquina 	= decrementando;
 8004278:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <rxBluetooth+0x508>)
 800427a:	2203      	movs	r2, #3
 800427c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 8004280:	e003      	b.n	800428a <rxBluetooth+0x3be>
					PrimitiveStates.stateMaquina = aquecendo;
 8004282:	4b54      	ldr	r3, [pc, #336]	; (80043d4 <rxBluetooth+0x508>)
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 800428a:	bf00      	nop
			}
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 800428c:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <rxBluetooth+0x504>)
 800428e:	2201      	movs	r2, #1
 8004290:	721a      	strb	r2, [r3, #8]
 8004292:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <rxBluetooth+0x504>)
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	725a      	strb	r2, [r3, #9]
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <rxBluetooth+0x504>)
 800429a:	2225      	movs	r2, #37	; 0x25
 800429c:	729a      	strb	r2, [r3, #10]
 800429e:	2103      	movs	r1, #3
 80042a0:	484d      	ldr	r0, [pc, #308]	; (80043d8 <rxBluetooth+0x50c>)
 80042a2:	f7fd fa1b 	bl	80016dc <Envia_bytes_UART>
		}
		break;
 80042a6:	e08d      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80042a8:	4b48      	ldr	r3, [pc, #288]	; (80043cc <rxBluetooth+0x500>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.LimiteTemp = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80042ae:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <rxBluetooth+0x504>)
 80042b0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	b21a      	sxth	r2, r3
 80042b8:	4b45      	ldr	r3, [pc, #276]	; (80043d0 <rxBluetooth+0x504>)
 80042ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80042be:	b21b      	sxth	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	4b43      	ldr	r3, [pc, #268]	; (80043d4 <rxBluetooth+0x508>)
 80042c8:	861a      	strh	r2, [r3, #48]	; 0x30
			osMessagePut(FilaEepromHandle, CEepromLimiteTemp, 0);
 80042ca:	4b44      	ldr	r3, [pc, #272]	; (80043dc <rxBluetooth+0x510>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2105      	movs	r1, #5
 80042d2:	4618      	mov	r0, r3
 80042d4:	f006 fa4a 	bl	800a76c <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 80042d8:	4b3d      	ldr	r3, [pc, #244]	; (80043d0 <rxBluetooth+0x504>)
 80042da:	2201      	movs	r2, #1
 80042dc:	721a      	strb	r2, [r3, #8]
 80042de:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <rxBluetooth+0x504>)
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	725a      	strb	r2, [r3, #9]
 80042e4:	4b3a      	ldr	r3, [pc, #232]	; (80043d0 <rxBluetooth+0x504>)
 80042e6:	2226      	movs	r2, #38	; 0x26
 80042e8:	729a      	strb	r2, [r3, #10]
 80042ea:	2103      	movs	r1, #3
 80042ec:	483a      	ldr	r0, [pc, #232]	; (80043d8 <rxBluetooth+0x50c>)
 80042ee:	f7fd f9f5 	bl	80016dc <Envia_bytes_UART>
			break;
 80042f2:	e067      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <rxBluetooth+0x500>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.RTLampada=PrimitiveStates.SPLampada;
 80042fa:	4b36      	ldr	r3, [pc, #216]	; (80043d4 <rxBluetooth+0x508>)
 80042fc:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <rxBluetooth+0x508>)
 8004302:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			LAMPADA_ON
 8004306:	2201      	movs	r2, #1
 8004308:	2140      	movs	r1, #64	; 0x40
 800430a:	4835      	ldr	r0, [pc, #212]	; (80043e0 <rxBluetooth+0x514>)
 800430c:	f001 ff41 	bl	8006192 <HAL_GPIO_WritePin>
 8004310:	4b30      	ldr	r3, [pc, #192]	; (80043d4 <rxBluetooth+0x508>)
 8004312:	2201      	movs	r2, #1
 8004314:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8004316:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <rxBluetooth+0x504>)
 8004318:	2201      	movs	r2, #1
 800431a:	721a      	strb	r2, [r3, #8]
 800431c:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <rxBluetooth+0x504>)
 800431e:	22ff      	movs	r2, #255	; 0xff
 8004320:	725a      	strb	r2, [r3, #9]
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <rxBluetooth+0x504>)
 8004324:	2227      	movs	r2, #39	; 0x27
 8004326:	729a      	strb	r2, [r3, #10]
 8004328:	2103      	movs	r1, #3
 800432a:	482b      	ldr	r0, [pc, #172]	; (80043d8 <rxBluetooth+0x50c>)
 800432c:	f7fd f9d6 	bl	80016dc <Envia_bytes_UART>
			break;
 8004330:	e048      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004332:	4b26      	ldr	r3, [pc, #152]	; (80043cc <rxBluetooth+0x500>)
 8004334:	2200      	movs	r2, #0
 8004336:	801a      	strh	r2, [r3, #0]
			LAMPADA_OFF
 8004338:	2200      	movs	r2, #0
 800433a:	2140      	movs	r1, #64	; 0x40
 800433c:	4828      	ldr	r0, [pc, #160]	; (80043e0 <rxBluetooth+0x514>)
 800433e:	f001 ff28 	bl	8006192 <HAL_GPIO_WritePin>
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <rxBluetooth+0x508>)
 8004344:	2200      	movs	r2, #0
 8004346:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <rxBluetooth+0x508>)
 800434c:	2200      	movs	r2, #0
 800434e:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <rxBluetooth+0x504>)
 8004352:	2201      	movs	r2, #1
 8004354:	721a      	strb	r2, [r3, #8]
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <rxBluetooth+0x504>)
 8004358:	22ff      	movs	r2, #255	; 0xff
 800435a:	725a      	strb	r2, [r3, #9]
 800435c:	4b1c      	ldr	r3, [pc, #112]	; (80043d0 <rxBluetooth+0x504>)
 800435e:	2228      	movs	r2, #40	; 0x28
 8004360:	729a      	strb	r2, [r3, #10]
 8004362:	2103      	movs	r1, #3
 8004364:	481c      	ldr	r0, [pc, #112]	; (80043d8 <rxBluetooth+0x50c>)
 8004366:	f7fd f9b9 	bl	80016dc <Envia_bytes_UART>
			break;
 800436a:	e02b      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_LIMITE_LAMPADA:
			//---------ENDEREÇO | 0x30 | 0x30 | SPLampada | CRC | CRC
			PrimitiveStates.SPLampada = bluetooth._RxDataArr[2];
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <rxBluetooth+0x504>)
 800436e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <rxBluetooth+0x508>)
 8004374:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 8004378:	4b18      	ldr	r3, [pc, #96]	; (80043dc <rxBluetooth+0x510>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	2106      	movs	r1, #6
 8004380:	4618      	mov	r0, r3
 8004382:	f006 f9f3 	bl	800a76c <osMessagePut>
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_LAMPADA)
 8004386:	4b12      	ldr	r3, [pc, #72]	; (80043d0 <rxBluetooth+0x504>)
 8004388:	2201      	movs	r2, #1
 800438a:	721a      	strb	r2, [r3, #8]
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <rxBluetooth+0x504>)
 800438e:	22ff      	movs	r2, #255	; 0xff
 8004390:	725a      	strb	r2, [r3, #9]
 8004392:	4b0f      	ldr	r3, [pc, #60]	; (80043d0 <rxBluetooth+0x504>)
 8004394:	2230      	movs	r2, #48	; 0x30
 8004396:	729a      	strb	r2, [r3, #10]
 8004398:	2103      	movs	r1, #3
 800439a:	480f      	ldr	r0, [pc, #60]	; (80043d8 <rxBluetooth+0x50c>)
 800439c:	f7fd f99e 	bl	80016dc <Envia_bytes_UART>
			break;
 80043a0:	e010      	b.n	80043c4 <rxBluetooth+0x4f8>
		case RX_CANCELA_PROCESSO:
			//---------ENDEREÇO | 0x29 | 0x29 | CRC | CRC
			desligaForno();
 80043a2:	f7fe fb0d 	bl	80029c0 <desligaForno>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <rxBluetooth+0x504>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	721a      	strb	r2, [r3, #8]
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <rxBluetooth+0x504>)
 80043ae:	22ff      	movs	r2, #255	; 0xff
 80043b0:	725a      	strb	r2, [r3, #9]
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <rxBluetooth+0x504>)
 80043b4:	2229      	movs	r2, #41	; 0x29
 80043b6:	729a      	strb	r2, [r3, #10]
 80043b8:	2103      	movs	r1, #3
 80043ba:	4807      	ldr	r0, [pc, #28]	; (80043d8 <rxBluetooth+0x50c>)
 80043bc:	f7fd f98e 	bl	80016dc <Envia_bytes_UART>
			break;
 80043c0:	e000      	b.n	80043c4 <rxBluetooth+0x4f8>
			break;
 80043c2:	bf00      	nop

		}
	}
}
 80043c4:	bf00      	nop
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20001440 	.word	0x20001440
 80043d0:	200011ec 	.word	0x200011ec
 80043d4:	20001338 	.word	0x20001338
 80043d8:	200011f4 	.word	0x200011f4
 80043dc:	200011d8 	.word	0x200011d8
 80043e0:	40010c00 	.word	0x40010c00

080043e4 <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//todo sequencia de piscar até receber o comando de iniciar ou de parar completamente
		sequencia1Buzzer();
 80043ec:	f000 f80e 	bl	800440c <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <StartBuzzer+0x24>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f006 fa6d 	bl	800a8d4 <osThreadSuspend>
		osThreadYield();
 80043fa:	f006 f833 	bl	800a464 <osThreadYield>
		osDelay(100);
 80043fe:	2064      	movs	r0, #100	; 0x64
 8004400:	f006 f842 	bl	800a488 <osDelay>
		sequencia1Buzzer();
 8004404:	e7f2      	b.n	80043ec <StartBuzzer+0x8>
 8004406:	bf00      	nop
 8004408:	20000c80 	.word	0x20000c80

0800440c <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 8004410:	210c      	movs	r1, #12
 8004412:	4821      	ldr	r0, [pc, #132]	; (8004498 <sequencia1Buzzer+0x8c>)
 8004414:	f003 fee6 	bl	80081e4 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 8004418:	2201      	movs	r2, #1
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	481f      	ldr	r0, [pc, #124]	; (800449c <sequencia1Buzzer+0x90>)
 800441e:	f001 feb8 	bl	8006192 <HAL_GPIO_WritePin>
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <sequencia1Buzzer+0x94>)
 8004424:	2201      	movs	r2, #1
 8004426:	70da      	strb	r2, [r3, #3]
	osDelay(300);
 8004428:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800442c:	f006 f82c 	bl	800a488 <osDelay>
	M_BUZZER_OFF
 8004430:	210c      	movs	r1, #12
 8004432:	4819      	ldr	r0, [pc, #100]	; (8004498 <sequencia1Buzzer+0x8c>)
 8004434:	f003 ff78 	bl	8008328 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 8004438:	2200      	movs	r2, #0
 800443a:	2140      	movs	r1, #64	; 0x40
 800443c:	4817      	ldr	r0, [pc, #92]	; (800449c <sequencia1Buzzer+0x90>)
 800443e:	f001 fea8 	bl	8006192 <HAL_GPIO_WritePin>
 8004442:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <sequencia1Buzzer+0x94>)
 8004444:	2200      	movs	r2, #0
 8004446:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <sequencia1Buzzer+0x94>)
 800444c:	2200      	movs	r2, #0
 800444e:	70da      	strb	r2, [r3, #3]
	osDelay(50);
 8004450:	2032      	movs	r0, #50	; 0x32
 8004452:	f006 f819 	bl	800a488 <osDelay>
	M_BUZZER_ON
 8004456:	210c      	movs	r1, #12
 8004458:	480f      	ldr	r0, [pc, #60]	; (8004498 <sequencia1Buzzer+0x8c>)
 800445a:	f003 fec3 	bl	80081e4 <HAL_TIM_PWM_Start>
	LAMPADA_ON
 800445e:	2201      	movs	r2, #1
 8004460:	2140      	movs	r1, #64	; 0x40
 8004462:	480e      	ldr	r0, [pc, #56]	; (800449c <sequencia1Buzzer+0x90>)
 8004464:	f001 fe95 	bl	8006192 <HAL_GPIO_WritePin>
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <sequencia1Buzzer+0x94>)
 800446a:	2201      	movs	r2, #1
 800446c:	70da      	strb	r2, [r3, #3]
	osDelay(250);
 800446e:	20fa      	movs	r0, #250	; 0xfa
 8004470:	f006 f80a 	bl	800a488 <osDelay>
	M_BUZZER_OFF
 8004474:	210c      	movs	r1, #12
 8004476:	4808      	ldr	r0, [pc, #32]	; (8004498 <sequencia1Buzzer+0x8c>)
 8004478:	f003 ff56 	bl	8008328 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 800447c:	2200      	movs	r2, #0
 800447e:	2140      	movs	r1, #64	; 0x40
 8004480:	4806      	ldr	r0, [pc, #24]	; (800449c <sequencia1Buzzer+0x90>)
 8004482:	f001 fe86 	bl	8006192 <HAL_GPIO_WritePin>
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <sequencia1Buzzer+0x94>)
 8004488:	2200      	movs	r2, #0
 800448a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800448e:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <sequencia1Buzzer+0x94>)
 8004490:	2200      	movs	r2, #0
 8004492:	70da      	strb	r2, [r3, #3]
}
 8004494:	bf00      	nop
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000ad0 	.word	0x20000ad0
 800449c:	40010c00 	.word	0x40010c00
 80044a0:	20001338 	.word	0x20001338

080044a4 <StartEeprom>:

RTC_DateTypeDef datetoUpdate;
RTC_TimeTypeDef timeToUpdate;

void StartEeprom(void const * argument)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	initEeprom();
 80044ac:	f000 f80a 	bl	80044c4 <initEeprom>

	for(;;)
	{
		processaEeprom();
 80044b0:	f000 f8cc 	bl	800464c <processaEeprom>
		osThreadYield();
 80044b4:	f005 ffd6 	bl	800a464 <osThreadYield>
		osDelay(500);
 80044b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044bc:	f005 ffe4 	bl	800a488 <osDelay>
		processaEeprom();
 80044c0:	e7f6      	b.n	80044b0 <StartEeprom+0xc>
	...

080044c4 <initEeprom>:
	}
}

void initEeprom(void){
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80044ca:	4a45      	ldr	r2, [pc, #276]	; (80045e0 <initEeprom+0x11c>)
 80044cc:	4945      	ldr	r1, [pc, #276]	; (80045e4 <initEeprom+0x120>)
 80044ce:	4846      	ldr	r0, [pc, #280]	; (80045e8 <initEeprom+0x124>)
 80044d0:	f7fd fbfd 	bl	8001cce <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		35,		250		,(uint32_t *)&PrimitiveStates.SPLampada);
 80044d4:	4b45      	ldr	r3, [pc, #276]	; (80045ec <initEeprom+0x128>)
 80044d6:	9304      	str	r3, [sp, #16]
 80044d8:	23fa      	movs	r3, #250	; 0xfa
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	2323      	movs	r3, #35	; 0x23
 80044de:	9302      	str	r3, [sp, #8]
 80044e0:	2305      	movs	r3, #5
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	2301      	movs	r3, #1
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2304      	movs	r3, #4
 80044ea:	4a41      	ldr	r2, [pc, #260]	; (80045f0 <initEeprom+0x12c>)
 80044ec:	4941      	ldr	r1, [pc, #260]	; (80045f4 <initEeprom+0x130>)
 80044ee:	483e      	ldr	r0, [pc, #248]	; (80045e8 <initEeprom+0x124>)
 80044f0:	f7fd fc03 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 80044f4:	4b40      	ldr	r3, [pc, #256]	; (80045f8 <initEeprom+0x134>)
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9303      	str	r3, [sp, #12]
 80044fc:	2300      	movs	r3, #0
 80044fe:	9302      	str	r3, [sp, #8]
 8004500:	2300      	movs	r3, #0
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	2302      	movs	r3, #2
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	2305      	movs	r3, #5
 800450a:	4a3c      	ldr	r2, [pc, #240]	; (80045fc <initEeprom+0x138>)
 800450c:	493c      	ldr	r1, [pc, #240]	; (8004600 <initEeprom+0x13c>)
 800450e:	4836      	ldr	r0, [pc, #216]	; (80045e8 <initEeprom+0x124>)
 8004510:	f7fd fbf3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_parcial_min);
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <initEeprom+0x140>)
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	2300      	movs	r3, #0
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	2300      	movs	r3, #0
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	2300      	movs	r3, #0
 8004522:	9301      	str	r3, [sp, #4]
 8004524:	2301      	movs	r3, #1
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2306      	movs	r3, #6
 800452a:	4a37      	ldr	r2, [pc, #220]	; (8004608 <initEeprom+0x144>)
 800452c:	4937      	ldr	r1, [pc, #220]	; (800460c <initEeprom+0x148>)
 800452e:	482e      	ldr	r0, [pc, #184]	; (80045e8 <initEeprom+0x124>)
 8004530:	f7fd fbe3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,(uint32_t *)&Calendario.Data_instalacao.Date);
 8004534:	4b36      	ldr	r3, [pc, #216]	; (8004610 <initEeprom+0x14c>)
 8004536:	9304      	str	r3, [sp, #16]
 8004538:	231f      	movs	r3, #31
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	9302      	str	r3, [sp, #8]
 8004540:	2301      	movs	r3, #1
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2301      	movs	r3, #1
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	230c      	movs	r3, #12
 800454a:	4a32      	ldr	r2, [pc, #200]	; (8004614 <initEeprom+0x150>)
 800454c:	4932      	ldr	r1, [pc, #200]	; (8004618 <initEeprom+0x154>)
 800454e:	4826      	ldr	r0, [pc, #152]	; (80045e8 <initEeprom+0x124>)
 8004550:	f7fd fbd3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,(uint32_t *)&Calendario.Data_instalacao.Month);
 8004554:	4b31      	ldr	r3, [pc, #196]	; (800461c <initEeprom+0x158>)
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	230c      	movs	r3, #12
 800455a:	9303      	str	r3, [sp, #12]
 800455c:	2301      	movs	r3, #1
 800455e:	9302      	str	r3, [sp, #8]
 8004560:	2301      	movs	r3, #1
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	2301      	movs	r3, #1
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	230d      	movs	r3, #13
 800456a:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <initEeprom+0x15c>)
 800456c:	492d      	ldr	r1, [pc, #180]	; (8004624 <initEeprom+0x160>)
 800456e:	481e      	ldr	r0, [pc, #120]	; (80045e8 <initEeprom+0x124>)
 8004570:	f7fd fbc3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <initEeprom+0x164>)
 8004576:	9304      	str	r3, [sp, #16]
 8004578:	2363      	movs	r3, #99	; 0x63
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	2317      	movs	r3, #23
 800457e:	9302      	str	r3, [sp, #8]
 8004580:	2317      	movs	r3, #23
 8004582:	9301      	str	r3, [sp, #4]
 8004584:	2301      	movs	r3, #1
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	230e      	movs	r3, #14
 800458a:	4a28      	ldr	r2, [pc, #160]	; (800462c <initEeprom+0x168>)
 800458c:	4928      	ldr	r1, [pc, #160]	; (8004630 <initEeprom+0x16c>)
 800458e:	4816      	ldr	r0, [pc, #88]	; (80045e8 <initEeprom+0x124>)
 8004590:	f7fd fbb3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.TotalCiclos);
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <initEeprom+0x170>)
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	2300      	movs	r3, #0
 800459a:	9303      	str	r3, [sp, #12]
 800459c:	2300      	movs	r3, #0
 800459e:	9302      	str	r3, [sp, #8]
 80045a0:	2300      	movs	r3, #0
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	2302      	movs	r3, #2
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	230f      	movs	r3, #15
 80045aa:	4a23      	ldr	r2, [pc, #140]	; (8004638 <initEeprom+0x174>)
 80045ac:	4923      	ldr	r1, [pc, #140]	; (800463c <initEeprom+0x178>)
 80045ae:	480e      	ldr	r0, [pc, #56]	; (80045e8 <initEeprom+0x124>)
 80045b0:	f7fd fba3 	bl	8001cfa <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,(uint32_t *)&PrimitiveStates.LimiteTemp);
 80045b4:	4b22      	ldr	r3, [pc, #136]	; (8004640 <initEeprom+0x17c>)
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9303      	str	r3, [sp, #12]
 80045bc:	2300      	movs	r3, #0
 80045be:	9302      	str	r3, [sp, #8]
 80045c0:	2300      	movs	r3, #0
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	2302      	movs	r3, #2
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2314      	movs	r3, #20
 80045ca:	4a1e      	ldr	r2, [pc, #120]	; (8004644 <initEeprom+0x180>)
 80045cc:	491e      	ldr	r1, [pc, #120]	; (8004648 <initEeprom+0x184>)
 80045ce:	4806      	ldr	r0, [pc, #24]	; (80045e8 <initEeprom+0x124>)
 80045d0:	f7fd fb93 	bl	8001cfa <EepromAddVar>

	RestauraPadraoTudo(&eeprom);
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <initEeprom+0x124>)
 80045d6:	f7fd fd23 	bl	8002020 <RestauraPadraoTudo>
	//faz o download dos objetos
	//	EepromDownloadValores(&eeprom);
}
 80045da:	bf00      	nop
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	200011d8 	.word	0x200011d8
 80045e4:	20000a68 	.word	0x20000a68
 80045e8:	20001444 	.word	0x20001444
 80045ec:	20001365 	.word	0x20001365
 80045f0:	0800e8d0 	.word	0x0800e8d0
 80045f4:	2000161c 	.word	0x2000161c
 80045f8:	20001374 	.word	0x20001374
 80045fc:	0800e8e0 	.word	0x0800e8e0
 8004600:	20001504 	.word	0x20001504
 8004604:	20001376 	.word	0x20001376
 8004608:	0800e8f0 	.word	0x0800e8f0
 800460c:	2000152c 	.word	0x2000152c
 8004610:	20001372 	.word	0x20001372
 8004614:	0800e900 	.word	0x0800e900
 8004618:	20001554 	.word	0x20001554
 800461c:	20001371 	.word	0x20001371
 8004620:	0800e910 	.word	0x0800e910
 8004624:	2000157c 	.word	0x2000157c
 8004628:	20001373 	.word	0x20001373
 800462c:	0800e920 	.word	0x0800e920
 8004630:	200015a4 	.word	0x200015a4
 8004634:	20001378 	.word	0x20001378
 8004638:	0800e930 	.word	0x0800e930
 800463c:	200015cc 	.word	0x200015cc
 8004640:	20001368 	.word	0x20001368
 8004644:	0800e940 	.word	0x0800e940
 8004648:	200015f4 	.word	0x200015f4

0800464c <processaEeprom>:

void processaEeprom(void){
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004652:	4b46      	ldr	r3, [pc, #280]	; (800476c <processaEeprom+0x120>)
 8004654:	6819      	ldr	r1, [r3, #0]
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	f04f 32ff 	mov.w	r2, #4294967295
 800465c:	4618      	mov	r0, r3
 800465e:	f006 f8c5 	bl	800a7ec <osMessageGet>
	if (evt.status == osEventMessage) {
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b10      	cmp	r3, #16
 8004666:	d17c      	bne.n	8004762 <processaEeprom+0x116>

		switch ((unsigned int)evt.value.p) {
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b07      	cmp	r3, #7
 800466c:	d874      	bhi.n	8004758 <processaEeprom+0x10c>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <processaEeprom+0x28>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	080046ad 	.word	0x080046ad
 8004678:	080046c3 	.word	0x080046c3
 800467c:	08004759 	.word	0x08004759
 8004680:	08004759 	.word	0x08004759
 8004684:	08004717 	.word	0x08004717
 8004688:	08004741 	.word	0x08004741
 800468c:	0800474d 	.word	0x0800474d
 8004690:	08004695 	.word	0x08004695

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <processaEeprom+0x124>)
 8004696:	891b      	ldrh	r3, [r3, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	4b34      	ldr	r3, [pc, #208]	; (8004770 <processaEeprom+0x124>)
 800469e:	811a      	strh	r2, [r3, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 80046a0:	2200      	movs	r2, #0
 80046a2:	4934      	ldr	r1, [pc, #208]	; (8004774 <processaEeprom+0x128>)
 80046a4:	4834      	ldr	r0, [pc, #208]	; (8004778 <processaEeprom+0x12c>)
 80046a6:	f7fd fb83 	bl	8001db0 <EepromSetVar>
			break;
 80046aa:	e05a      	b.n	8004762 <processaEeprom+0x116>
		case CEepromHorimetro:
			EepromSetVar(&eeprom, &horimetroHoras, 	0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	4933      	ldr	r1, [pc, #204]	; (800477c <processaEeprom+0x130>)
 80046b0:	4831      	ldr	r0, [pc, #196]	; (8004778 <processaEeprom+0x12c>)
 80046b2:	f7fd fb7d 	bl	8001db0 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 80046b6:	2200      	movs	r2, #0
 80046b8:	4931      	ldr	r1, [pc, #196]	; (8004780 <processaEeprom+0x134>)
 80046ba:	482f      	ldr	r0, [pc, #188]	; (8004778 <processaEeprom+0x12c>)
 80046bc:	f7fd fb78 	bl	8001db0 <EepromSetVar>
			break;
 80046c0:	e04f      	b.n	8004762 <processaEeprom+0x116>
		case CEepromDataInstalacao:
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <processaEeprom+0x138>)
 80046c4:	789b      	ldrb	r3, [r3, #2]
 80046c6:	461a      	mov	r2, r3
 80046c8:	492f      	ldr	r1, [pc, #188]	; (8004788 <processaEeprom+0x13c>)
 80046ca:	482b      	ldr	r0, [pc, #172]	; (8004778 <processaEeprom+0x12c>)
 80046cc:	f7fd fb70 	bl	8001db0 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 80046d0:	4b2c      	ldr	r3, [pc, #176]	; (8004784 <processaEeprom+0x138>)
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	461a      	mov	r2, r3
 80046d6:	492d      	ldr	r1, [pc, #180]	; (800478c <processaEeprom+0x140>)
 80046d8:	4827      	ldr	r0, [pc, #156]	; (8004778 <processaEeprom+0x12c>)
 80046da:	f7fd fb69 	bl	8001db0 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 80046de:	4b29      	ldr	r3, [pc, #164]	; (8004784 <processaEeprom+0x138>)
 80046e0:	78db      	ldrb	r3, [r3, #3]
 80046e2:	461a      	mov	r2, r3
 80046e4:	492a      	ldr	r1, [pc, #168]	; (8004790 <processaEeprom+0x144>)
 80046e6:	4824      	ldr	r0, [pc, #144]	; (8004778 <processaEeprom+0x12c>)
 80046e8:	f7fd fb62 	bl	8001db0 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80046ec:	2200      	movs	r2, #0
 80046ee:	4929      	ldr	r1, [pc, #164]	; (8004794 <processaEeprom+0x148>)
 80046f0:	4829      	ldr	r0, [pc, #164]	; (8004798 <processaEeprom+0x14c>)
 80046f2:	f003 f985 	bl	8007a00 <HAL_RTC_SetTime>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <processaEeprom+0xb4>
				Error_Handler();
 80046fc:	f7fe fad8 	bl	8002cb0 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004700:	2200      	movs	r2, #0
 8004702:	4920      	ldr	r1, [pc, #128]	; (8004784 <processaEeprom+0x138>)
 8004704:	4824      	ldr	r0, [pc, #144]	; (8004798 <processaEeprom+0x14c>)
 8004706:	f003 fa13 	bl	8007b30 <HAL_RTC_SetDate>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d025      	beq.n	800475c <processaEeprom+0x110>
				Error_Handler();
 8004710:	f7fe face 	bl	8002cb0 <Error_Handler>
			}
			break;
 8004714:	e022      	b.n	800475c <processaEeprom+0x110>
			break;
		case CEepromSoftReset:
			break;
		case CEepromAtualizaHora:

			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004716:	2200      	movs	r2, #0
 8004718:	491e      	ldr	r1, [pc, #120]	; (8004794 <processaEeprom+0x148>)
 800471a:	481f      	ldr	r0, [pc, #124]	; (8004798 <processaEeprom+0x14c>)
 800471c:	f003 f970 	bl	8007a00 <HAL_RTC_SetTime>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <processaEeprom+0xde>
				Error_Handler();
 8004726:	f7fe fac3 	bl	8002cb0 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800472a:	2200      	movs	r2, #0
 800472c:	4915      	ldr	r1, [pc, #84]	; (8004784 <processaEeprom+0x138>)
 800472e:	481a      	ldr	r0, [pc, #104]	; (8004798 <processaEeprom+0x14c>)
 8004730:	f003 f9fe 	bl	8007b30 <HAL_RTC_SetDate>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d012      	beq.n	8004760 <processaEeprom+0x114>
				Error_Handler();
 800473a:	f7fe fab9 	bl	8002cb0 <Error_Handler>
			}
			break;
 800473e:	e00f      	b.n	8004760 <processaEeprom+0x114>
		case CEepromLimiteTemp:
			EepromSetVar(&eeprom, &LimiteTemperatura, 	0);
 8004740:	2200      	movs	r2, #0
 8004742:	4916      	ldr	r1, [pc, #88]	; (800479c <processaEeprom+0x150>)
 8004744:	480c      	ldr	r0, [pc, #48]	; (8004778 <processaEeprom+0x12c>)
 8004746:	f7fd fb33 	bl	8001db0 <EepromSetVar>
			break;
 800474a:	e00a      	b.n	8004762 <processaEeprom+0x116>
		case CEepromLimiteLuz:
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 800474c:	2200      	movs	r2, #0
 800474e:	4914      	ldr	r1, [pc, #80]	; (80047a0 <processaEeprom+0x154>)
 8004750:	4809      	ldr	r0, [pc, #36]	; (8004778 <processaEeprom+0x12c>)
 8004752:	f7fd fb2d 	bl	8001db0 <EepromSetVar>
			break;
 8004756:	e004      	b.n	8004762 <processaEeprom+0x116>
		default:
			break;
 8004758:	bf00      	nop
 800475a:	e002      	b.n	8004762 <processaEeprom+0x116>
			break;
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <processaEeprom+0x116>
			break;
 8004760:	bf00      	nop
		}
	}
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200011d8 	.word	0x200011d8
 8004770:	20001370 	.word	0x20001370
 8004774:	200015cc 	.word	0x200015cc
 8004778:	20001444 	.word	0x20001444
 800477c:	20001504 	.word	0x20001504
 8004780:	2000152c 	.word	0x2000152c
 8004784:	20001644 	.word	0x20001644
 8004788:	20001554 	.word	0x20001554
 800478c:	2000157c 	.word	0x2000157c
 8004790:	200015a4 	.word	0x200015a4
 8004794:	20001648 	.word	0x20001648
 8004798:	20000abc 	.word	0x20000abc
 800479c:	200015f4 	.word	0x200015f4
 80047a0:	2000161c 	.word	0x2000161c

080047a4 <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	datetoUpdate = data;
 80047ae:	4a1b      	ldr	r2, [pc, #108]	; (800481c <atualizaDataEeprom+0x78>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6013      	str	r3, [r2, #0]
	timeToUpdate = hora;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <atualizaDataEeprom+0x7c>)
 80047b6:	463a      	mov	r2, r7
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	4611      	mov	r1, r2
 80047bc:	8019      	strh	r1, [r3, #0]
 80047be:	3302      	adds	r3, #2
 80047c0:	0c12      	lsrs	r2, r2, #16
 80047c2:	701a      	strb	r2, [r3, #0]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <atualizaDataEeprom+0x80>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <atualizaDataEeprom+0x30>
 80047cc:	4b15      	ldr	r3, [pc, #84]	; (8004824 <atualizaDataEeprom+0x80>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b1f      	cmp	r3, #31
 80047d2:	d917      	bls.n	8004804 <atualizaDataEeprom+0x60>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 80047d4:	4b14      	ldr	r3, [pc, #80]	; (8004828 <atualizaDataEeprom+0x84>)
 80047d6:	685b      	ldr	r3, [r3, #4]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <atualizaDataEeprom+0x40>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <atualizaDataEeprom+0x84>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b0c      	cmp	r3, #12
 80047e2:	d90f      	bls.n	8004804 <atualizaDataEeprom+0x60>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <atualizaDataEeprom+0x88>)
 80047e6:	685b      	ldr	r3, [r3, #4]
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <atualizaDataEeprom+0x50>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <atualizaDataEeprom+0x88>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2bc8      	cmp	r3, #200	; 0xc8
 80047f2:	d907      	bls.n	8004804 <atualizaDataEeprom+0x60>
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <atualizaDataEeprom+0x8c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2200      	movs	r2, #0
 80047fa:	2101      	movs	r1, #1
 80047fc:	4618      	mov	r0, r3
 80047fe:	f005 ffb5 	bl	800a76c <osMessagePut>
 8004802:	e007      	b.n	8004814 <atualizaDataEeprom+0x70>
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <atualizaDataEeprom+0x8c>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	2104      	movs	r1, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f005 ffad 	bl	800a76c <osMessagePut>
	}
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	20001644 	.word	0x20001644
 8004820:	20001648 	.word	0x20001648
 8004824:	20001554 	.word	0x20001554
 8004828:	2000157c 	.word	0x2000157c
 800482c:	200015a4 	.word	0x200015a4
 8004830:	200011d8 	.word	0x200011d8

08004834 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8004834:	b5b0      	push	{r4, r5, r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

	initPID();
 800483c:	f000 f858 	bl	80048f0 <initPID>

	for(;;)	{

		computaPID();
 8004840:	f000 f8d6 	bl	80049f0 <computaPID>
		osThreadYield();
 8004844:	f005 fe0e 	bl	800a464 <osThreadYield>

		/*	-Em aquecimento
		 * 		podendo:
		 * 			->resetar timers realtime
		 * 			->no else, vindo do aquecimento gera notificacao de temperatura alcancada	*/
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 8004848:	4b27      	ldr	r3, [pc, #156]	; (80048e8 <StartTemperatura+0xb4>)
 800484a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <StartTemperatura+0xb4>)
 8004850:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	4b24      	ldr	r3, [pc, #144]	; (80048ec <StartTemperatura+0xb8>)
 800485a:	f7fb fc85 	bl	8000168 <__aeabi_dsub>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fc f8a9 	bl	80009bc <__aeabi_dcmplt>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d113      	bne.n	8004898 <StartTemperatura+0x64>
				PrimitiveStates.RealtimeLastro<(PrimitiveStates.SetPointLastro)-5){
 8004870:	4b1d      	ldr	r3, [pc, #116]	; (80048e8 <StartTemperatura+0xb4>)
 8004872:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <StartTemperatura+0xb4>)
 8004878:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <StartTemperatura+0xb8>)
 8004882:	f7fb fc71 	bl	8000168 <__aeabi_dsub>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 800488a:	4620      	mov	r0, r4
 800488c:	4629      	mov	r1, r5
 800488e:	f7fc f895 	bl	80009bc <__aeabi_dcmplt>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d008      	beq.n	80048aa <StartTemperatura+0x76>

			PrimitiveStates.MaquinaAquecimento 	= buscandoTemp;
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <StartTemperatura+0xb4>)
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PrimitiveStates.stateMaquina 		= aquecendo;
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <StartTemperatura+0xb4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80048a8:	e019      	b.n	80048de <StartTemperatura+0xaa>

		}else{

			PrimitiveStates.MaquinaAquecimento = mantendoTemp;
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <StartTemperatura+0xb4>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			switch (PrimitiveStates.stateMaquina) {
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <StartTemperatura+0xb4>)
 80048b4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d80e      	bhi.n	80048da <StartTemperatura+0xa6>
			case inicial:
			case aquecendo:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 80048bc:	4b0a      	ldr	r3, [pc, #40]	; (80048e8 <StartTemperatura+0xb4>)
 80048be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d104      	bne.n	80048d0 <StartTemperatura+0x9c>
					PrimitiveStates.stateMaquina 	= decrementando;
 80048c6:	4b08      	ldr	r3, [pc, #32]	; (80048e8 <StartTemperatura+0xb4>)
 80048c8:	2203      	movs	r2, #3
 80048ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 80048ce:	e006      	b.n	80048de <StartTemperatura+0xaa>
					PrimitiveStates.stateMaquina = aquecendo;
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <StartTemperatura+0xb4>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80048d8:	e001      	b.n	80048de <StartTemperatura+0xaa>
			default:
				__NOP();
 80048da:	bf00      	nop
				break;
 80048dc:	bf00      	nop
			}


		}

		osDelay(TIME_PID_CALC);
 80048de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048e2:	f005 fdd1 	bl	800a488 <osDelay>
		computaPID();
 80048e6:	e7ab      	b.n	8004840 <StartTemperatura+0xc>
 80048e8:	20001338 	.word	0x20001338
 80048ec:	40140000 	.word	0x40140000

080048f0 <initPID>:
	}
}


void initPID(void){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af08      	add	r7, sp, #32

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80048f6:	2300      	movs	r3, #0
 80048f8:	9307      	str	r3, [sp, #28]
 80048fa:	2301      	movs	r3, #1
 80048fc:	9306      	str	r3, [sp, #24]
 80048fe:	a32e      	add	r3, pc, #184	; (adr r3, 80049b8 <initPID+0xc8>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004908:	a32d      	add	r3, pc, #180	; (adr r3, 80049c0 <initPID+0xd0>)
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	4b2c      	ldr	r3, [pc, #176]	; (80049c8 <initPID+0xd8>)
 8004918:	e9cd 2300 	strd	r2, r3, [sp]
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <initPID+0xdc>)
 800491e:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <initPID+0xe0>)
 8004920:	492c      	ldr	r1, [pc, #176]	; (80049d4 <initPID+0xe4>)
 8004922:	482d      	ldr	r0, [pc, #180]	; (80049d8 <initPID+0xe8>)
 8004924:	f7fe fa04 	bl	8002d30 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8004928:	2300      	movs	r3, #0
 800492a:	9307      	str	r3, [sp, #28]
 800492c:	2301      	movs	r3, #1
 800492e:	9306      	str	r3, [sp, #24]
 8004930:	a321      	add	r3, pc, #132	; (adr r3, 80049b8 <initPID+0xc8>)
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800493a:	a321      	add	r3, pc, #132	; (adr r3, 80049c0 <initPID+0xd0>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <initPID+0xd8>)
 800494a:	e9cd 2300 	strd	r2, r3, [sp]
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <initPID+0xec>)
 8004950:	4a23      	ldr	r2, [pc, #140]	; (80049e0 <initPID+0xf0>)
 8004952:	4924      	ldr	r1, [pc, #144]	; (80049e4 <initPID+0xf4>)
 8004954:	4824      	ldr	r0, [pc, #144]	; (80049e8 <initPID+0xf8>)
 8004956:	f7fe f9eb 	bl	8002d30 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 800495a:	2101      	movs	r1, #1
 800495c:	481e      	ldr	r0, [pc, #120]	; (80049d8 <initPID+0xe8>)
 800495e:	f7fe fb19 	bl	8002f94 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004962:	2101      	movs	r1, #1
 8004964:	4820      	ldr	r0, [pc, #128]	; (80049e8 <initPID+0xf8>)
 8004966:	f7fe fb15 	bl	8002f94 <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 800496a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800496e:	481a      	ldr	r0, [pc, #104]	; (80049d8 <initPID+0xe8>)
 8004970:	f7fe fc7e 	bl	8003270 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004974:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004978:	481b      	ldr	r0, [pc, #108]	; (80049e8 <initPID+0xf8>)
 800497a:	f7fe fc79 	bl	8003270 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <initPID+0xfc>)
 8004984:	e9cd 2300 	strd	r2, r3, [sp]
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	4811      	ldr	r0, [pc, #68]	; (80049d8 <initPID+0xe8>)
 8004992:	f7fe fb1d 	bl	8002fd0 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <initPID+0xfc>)
 800499c:	e9cd 2300 	strd	r2, r3, [sp]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	480f      	ldr	r0, [pc, #60]	; (80049e8 <initPID+0xf8>)
 80049aa:	f7fe fb11 	bl	8002fd0 <PID_SetOutputLimits>
}
 80049ae:	bf00      	nop
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	f3af 8000 	nop.w
 80049b8:	33333333 	.word	0x33333333
 80049bc:	3fd33333 	.word	0x3fd33333
 80049c0:	47ae147b 	.word	0x47ae147b
 80049c4:	3f847ae1 	.word	0x3f847ae1
 80049c8:	403e0000 	.word	0x403e0000
 80049cc:	20001350 	.word	0x20001350
 80049d0:	20001650 	.word	0x20001650
 80049d4:	20001340 	.word	0x20001340
 80049d8:	20001660 	.word	0x20001660
 80049dc:	20001358 	.word	0x20001358
 80049e0:	20001658 	.word	0x20001658
 80049e4:	20001348 	.word	0x20001348
 80049e8:	200016d0 	.word	0x200016d0
 80049ec:	40590000 	.word	0x40590000

080049f0 <computaPID>:
void computaPID(void){
 80049f0:	b598      	push	{r3, r4, r7, lr}
 80049f2:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 80049f4:	480e      	ldr	r0, [pc, #56]	; (8004a30 <computaPID+0x40>)
 80049f6:	f7fe f9e3 	bl	8002dc0 <PID_Compute>
	PID_Compute(&TPIDLastro);
 80049fa:	480e      	ldr	r0, [pc, #56]	; (8004a34 <computaPID+0x44>)
 80049fc:	f7fe f9e0 	bl	8002dc0 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <computaPID+0x48>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	490d      	ldr	r1, [pc, #52]	; (8004a3c <computaPID+0x4c>)
 8004a08:	680c      	ldr	r4, [r1, #0]
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	f7fb fffd 	bl	8000a0c <__aeabi_d2uiz>
 8004a12:	4603      	mov	r3, r0
 8004a14:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <computaPID+0x50>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	4907      	ldr	r1, [pc, #28]	; (8004a3c <computaPID+0x4c>)
 8004a1e:	680c      	ldr	r4, [r1, #0]
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	f7fb fff2 	bl	8000a0c <__aeabi_d2uiz>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004a2c:	bf00      	nop
 8004a2e:	bd98      	pop	{r3, r4, r7, pc}
 8004a30:	20001660 	.word	0x20001660
 8004a34:	200016d0 	.word	0x200016d0
 8004a38:	20001650 	.word	0x20001650
 8004a3c:	20000b18 	.word	0x20000b18
 8004a40:	20001658 	.word	0x20001658

08004a44 <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	af00      	add	r7, sp, #0

	//MONITOR DE ERRO DE AQUECIMENTO
	static uint16_t contadorAquecimento;
	if(PrimitiveStates.stateMaquina == aquecendo){
 8004a48:	4b26      	ldr	r3, [pc, #152]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a4a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d143      	bne.n	8004ada <taskTemperatura1sec+0x96>

		if(contadorAquecimento>=TIME_MAX_AQUECIMENTO){
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <taskTemperatura1sec+0xa4>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004a5a:	d337      	bcc.n	8004acc <taskTemperatura1sec+0x88>
			//verifica erro temperatura lastro
			if(PrimitiveStates.RealtimeLastro < PrimitiveStates.SetPointLastro-5)
 8004a5c:	4b21      	ldr	r3, [pc, #132]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a5e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004a62:	4b20      	ldr	r3, [pc, #128]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a64:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	4b1f      	ldr	r3, [pc, #124]	; (8004aec <taskTemperatura1sec+0xa8>)
 8004a6e:	f7fb fb7b 	bl	8000168 <__aeabi_dsub>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4620      	mov	r0, r4
 8004a78:	4629      	mov	r1, r5
 8004a7a:	f7fb ff9f 	bl	80009bc <__aeabi_dcmplt>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <taskTemperatura1sec+0x4e>
				PrimitiveStates.Erro.bit.IdleLastro=1;
 8004a84:	4a17      	ldr	r2, [pc, #92]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a86:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004a8a:	f043 0308 	orr.w	r3, r3, #8
 8004a8e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

			//verifica erro temperatura teto
			if(PrimitiveStates.RealtimeTeto < PrimitiveStates.SetPointTeto-5)
 8004a92:	4b14      	ldr	r3, [pc, #80]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a94:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004a9a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <taskTemperatura1sec+0xa8>)
 8004aa4:	f7fb fb60 	bl	8000168 <__aeabi_dsub>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4620      	mov	r0, r4
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f7fb ff84 	bl	80009bc <__aeabi_dcmplt>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d100      	bne.n	8004abc <taskTemperatura1sec+0x78>
		}else{
			contadorAquecimento++;
		}
	}else
		contadorAquecimento=0;
}
 8004aba:	e011      	b.n	8004ae0 <taskTemperatura1sec+0x9c>
				PrimitiveStates.Erro.bit.IdleTeto=1;
 8004abc:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <taskTemperatura1sec+0xa0>)
 8004abe:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
}
 8004aca:	e009      	b.n	8004ae0 <taskTemperatura1sec+0x9c>
			contadorAquecimento++;
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <taskTemperatura1sec+0xa4>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	4b04      	ldr	r3, [pc, #16]	; (8004ae8 <taskTemperatura1sec+0xa4>)
 8004ad6:	801a      	strh	r2, [r3, #0]
}
 8004ad8:	e002      	b.n	8004ae0 <taskTemperatura1sec+0x9c>
		contadorAquecimento=0;
 8004ada:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <taskTemperatura1sec+0xa4>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	801a      	strh	r2, [r3, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae4:	20001338 	.word	0x20001338
 8004ae8:	20001740 	.word	0x20001740
 8004aec:	40140000 	.word	0x40140000

08004af0 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8004af8:	f007 fa88 	bl	800c00c <xTaskGetTickCount>
 8004afc:	4603      	mov	r3, r0
 8004afe:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 8004b00:	f000 f8ae 	bl	8004c60 <verificaErro>

		funcionamentoTimer();
 8004b04:	f000 f80c 	bl	8004b20 <funcionamentoTimer>

		funcionamentoLampada();
 8004b08:	f000 f87a 	bl	8004c00 <funcionamentoLampada>

		osThreadYield();
 8004b0c:	f005 fcaa 	bl	800a464 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004b10:	f107 030c 	add.w	r3, r7, #12
 8004b14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f005 ff09 	bl	800a930 <osDelayUntil>
		verificaErro();
 8004b1e:	e7ef      	b.n	8004b00 <StartTimer+0x10>

08004b20 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateMaquina == decrementando){
 8004b24:	4b34      	ldr	r3, [pc, #208]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b26:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <funcionamentoTimer+0x3c>
 8004b2e:	4b32      	ldr	r3, [pc, #200]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <funcionamentoTimer+0x3c>
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d10c      	bne.n	8004b5c <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b44:	223b      	movs	r2, #59	; 0x3b
 8004b46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b4c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b28      	ldr	r3, [pc, #160]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b56:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				PrimitiveStates.stateMaquina = aquecido;
			}
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004b5a:	e04a      	b.n	8004bf2 <funcionamentoTimer+0xd2>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateMaquina == decrementando){
 8004b5c:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b5e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <funcionamentoTimer+0x50>
 8004b66:	4b24      	ldr	r3, [pc, #144]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d040      	beq.n	8004bf2 <funcionamentoTimer+0xd2>
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b72:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d13b      	bne.n	8004bf2 <funcionamentoTimer+0xd2>
		PrimitiveStates.RTTimerSegundos--;
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d12e      	bne.n	8004bf2 <funcionamentoTimer+0xd2>
 8004b94:	4b18      	ldr	r3, [pc, #96]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004b96:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d129      	bne.n	8004bf2 <funcionamentoTimer+0xd2>
			PrimitiveStates.SetPointTeto 	= 0;
 8004b9e:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 8004bac:	4912      	ldr	r1, [pc, #72]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 8004bba:	490f      	ldr	r1, [pc, #60]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004bbc:	f04f 0200 	mov.w	r2, #0
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 8004bc8:	490b      	ldr	r1, [pc, #44]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d103      	bne.n	8004be8 <funcionamentoTimer+0xc8>
				PrimitiveStates.stateMaquina = aquecido;
 8004be0:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <funcionamentoTimer+0xd8>)
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			osThreadResume(TaskBuzzerHandle);
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <funcionamentoTimer+0xdc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fe7d 	bl	800a8ec <osThreadResume>
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20001338 	.word	0x20001338
 8004bfc:	20000c80 	.word	0x20000c80

08004c00 <funcionamentoLampada>:

void funcionamentoLampada(void){
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0

	//decremento e apos desligamento lampada
	if(PrimitiveStates.RTLampada>0){
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c06:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d021      	beq.n	8004c52 <funcionamentoLampada+0x52>
		PrimitiveStates.RTLampada--;
 8004c0e:	4b12      	ldr	r3, [pc, #72]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c10:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c1a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		if(PrimitiveStates.RTLampada==0){
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c20:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <funcionamentoLampada+0x42>
			LAMPADA_OFF
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2140      	movs	r1, #64	; 0x40
 8004c2c:	480b      	ldr	r0, [pc, #44]	; (8004c5c <funcionamentoLampada+0x5c>)
 8004c2e:	f001 fab0 	bl	8006192 <HAL_GPIO_WritePin>
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 8004c40:	e007      	b.n	8004c52 <funcionamentoLampada+0x52>
			LAMPADA_ON
 8004c42:	2201      	movs	r2, #1
 8004c44:	2140      	movs	r1, #64	; 0x40
 8004c46:	4805      	ldr	r0, [pc, #20]	; (8004c5c <funcionamentoLampada+0x5c>)
 8004c48:	f001 faa3 	bl	8006192 <HAL_GPIO_WritePin>
 8004c4c:	4b02      	ldr	r3, [pc, #8]	; (8004c58 <funcionamentoLampada+0x58>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	70da      	strb	r2, [r3, #3]
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20001338 	.word	0x20001338
 8004c5c:	40010c00 	.word	0x40010c00

08004c60 <verificaErro>:

void verificaErro(void){
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004c66:	1d3b      	adds	r3, r7, #4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	210f      	movs	r1, #15
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f005 fcd7 	bl	800a620 <osSignalWait>
	if (evt.status == osEventSignal){
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d107      	bne.n	8004c88 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b0f      	cmp	r3, #15
 8004c7c:	d104      	bne.n	8004c88 <verificaErro+0x28>
			osThreadSuspend(TaskTimerHandle);
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <verificaErro+0x30>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f005 fe26 	bl	800a8d4 <osThreadSuspend>
		}
	}
}
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	20000f24 	.word	0x20000f24

08004c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_Init+0x28>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <HAL_Init+0x28>)
 8004c9e:	f043 0310 	orr.w	r3, r3, #16
 8004ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	f000 fcdb 	bl	8005660 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004caa:	200f      	movs	r0, #15
 8004cac:	f7fe fdf6 	bl	800389c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004cb0:	f7fe fb1a 	bl	80032e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40022000 	.word	0x40022000

08004cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <HAL_IncTick+0x1c>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <HAL_IncTick+0x20>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4413      	add	r3, r2
 8004cd0:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <HAL_IncTick+0x20>)
 8004cd2:	6013      	str	r3, [r2, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	20000208 	.word	0x20000208
 8004ce0:	20001744 	.word	0x20001744

08004ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8004ce8:	4b02      	ldr	r3, [pc, #8]	; (8004cf4 <HAL_GetTick+0x10>)
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20001744 	.word	0x20001744

08004cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d00:	f7ff fff0 	bl	8004ce4 <HAL_GetTick>
 8004d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d005      	beq.n	8004d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_Delay+0x44>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d1e:	bf00      	nop
 8004d20:	f7ff ffe0 	bl	8004ce4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d8f7      	bhi.n	8004d20 <HAL_Delay+0x28>
  {
  }
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000208 	.word	0x20000208

08004d40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0be      	b.n	8004ee0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fe faea 	bl	8003358 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 faf5 	bl	8005374 <ADC_ConversionStop_Disable>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f040 8099 	bne.w	8004ece <HAL_ADC_Init+0x18e>
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 8095 	bne.w	8004ece <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dac:	f023 0302 	bic.w	r3, r3, #2
 8004db0:	f043 0202 	orr.w	r2, r3, #2
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004dc0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	7b1b      	ldrb	r3, [r3, #12]
 8004dc6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004dc8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d003      	beq.n	8004de2 <HAL_ADC_Init+0xa2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d102      	bne.n	8004de8 <HAL_ADC_Init+0xa8>
 8004de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de6:	e000      	b.n	8004dea <HAL_ADC_Init+0xaa>
 8004de8:	2300      	movs	r3, #0
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	7d1b      	ldrb	r3, [r3, #20]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d119      	bne.n	8004e2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7b1b      	ldrb	r3, [r3, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	035a      	lsls	r2, r3, #13
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e00b      	b.n	8004e2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	f043 0220 	orr.w	r2, r3, #32
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_ADC_Init+0x1a8>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e5c:	d003      	beq.n	8004e66 <HAL_ADC_Init+0x126>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d104      	bne.n	8004e70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	051b      	lsls	r3, r3, #20
 8004e6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_ADC_Init+0x1ac>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10b      	bne.n	8004eac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004eaa:	e018      	b.n	8004ede <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f023 0312 	bic.w	r3, r3, #18
 8004eb4:	f043 0210 	orr.w	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ecc:	e007      	b.n	8004ede <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f043 0210 	orr.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	ffe1f7fd 	.word	0xffe1f7fd
 8004eec:	ff1f0efe 	.word	0xff1f0efe

08004ef0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a64      	ldr	r2, [pc, #400]	; (8005098 <HAL_ADC_Start_DMA+0x1a8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_ADC_Start_DMA+0x24>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a63      	ldr	r2, [pc, #396]	; (800509c <HAL_ADC_Start_DMA+0x1ac>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d106      	bne.n	8004f22 <HAL_ADC_Start_DMA+0x32>
 8004f14:	4b60      	ldr	r3, [pc, #384]	; (8005098 <HAL_ADC_Start_DMA+0x1a8>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f040 80b3 	bne.w	8005088 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_ADC_Start_DMA+0x40>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0ae      	b.n	800508e <HAL_ADC_Start_DMA+0x19e>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f9c1 	bl	80052c0 <ADC_Enable>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 809a 	bne.w	800507e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a4e      	ldr	r2, [pc, #312]	; (800509c <HAL_ADC_Start_DMA+0x1ac>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d105      	bne.n	8004f74 <HAL_ADC_Start_DMA+0x84>
 8004f68:	4b4b      	ldr	r3, [pc, #300]	; (8005098 <HAL_ADC_Start_DMA+0x1a8>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d026      	beq.n	8004fdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f9e:	e01d      	b.n	8004fdc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a39      	ldr	r2, [pc, #228]	; (8005098 <HAL_ADC_Start_DMA+0x1a8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_ADC_Start_DMA+0xd0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <HAL_ADC_Start_DMA+0x1ac>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10d      	bne.n	8004fdc <HAL_ADC_Start_DMA+0xec>
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <HAL_ADC_Start_DMA+0x1a8>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d006      	beq.n	8004ff6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	f023 0206 	bic.w	r2, r3, #6
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff4:	e002      	b.n	8004ffc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <HAL_ADC_Start_DMA+0x1b0>)
 800500a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <HAL_ADC_Start_DMA+0x1b4>)
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	4a23      	ldr	r2, [pc, #140]	; (80050a8 <HAL_ADC_Start_DMA+0x1b8>)
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0202 	mvn.w	r2, #2
 8005024:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005034:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a18      	ldr	r0, [r3, #32]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	334c      	adds	r3, #76	; 0x4c
 8005040:	4619      	mov	r1, r3
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f000 fc05 	bl	8005854 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005054:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005058:	d108      	bne.n	800506c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005068:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800506a:	e00f      	b.n	800508c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800507a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800507c:	e006      	b.n	800508c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005086:	e001      	b.n	800508c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40012400 	.word	0x40012400
 800509c:	40012800 	.word	0x40012800
 80050a0:	080053f7 	.word	0x080053f7
 80050a4:	08005473 	.word	0x08005473
 80050a8:	0800548f 	.word	0x0800548f

080050ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr

080050d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x20>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e0dc      	b.n	80052aa <HAL_ADC_ConfigChannel+0x1da>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2b06      	cmp	r3, #6
 80050fe:	d81c      	bhi.n	800513a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	3b05      	subs	r3, #5
 8005112:	221f      	movs	r2, #31
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	4019      	ands	r1, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	3b05      	subs	r3, #5
 800512c:	fa00 f203 	lsl.w	r2, r0, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	635a      	str	r2, [r3, #52]	; 0x34
 8005138:	e03c      	b.n	80051b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b0c      	cmp	r3, #12
 8005140:	d81c      	bhi.n	800517c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	3b23      	subs	r3, #35	; 0x23
 8005154:	221f      	movs	r2, #31
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	4019      	ands	r1, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	3b23      	subs	r3, #35	; 0x23
 800516e:	fa00 f203 	lsl.w	r2, r0, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
 800517a:	e01b      	b.n	80051b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	3b41      	subs	r3, #65	; 0x41
 800518e:	221f      	movs	r2, #31
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	43db      	mvns	r3, r3
 8005196:	4019      	ands	r1, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	3b41      	subs	r3, #65	; 0x41
 80051a8:	fa00 f203 	lsl.w	r2, r0, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	d91c      	bls.n	80051f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68d9      	ldr	r1, [r3, #12]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	3b1e      	subs	r3, #30
 80051ce:	2207      	movs	r2, #7
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	4019      	ands	r1, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6898      	ldr	r0, [r3, #8]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	3b1e      	subs	r3, #30
 80051e8:	fa00 f203 	lsl.w	r2, r0, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]
 80051f4:	e019      	b.n	800522a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6919      	ldr	r1, [r3, #16]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	2207      	movs	r2, #7
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	4019      	ands	r1, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6898      	ldr	r0, [r3, #8]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4413      	add	r3, r2
 800521e:	fa00 f203 	lsl.w	r2, r0, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b10      	cmp	r3, #16
 8005230:	d003      	beq.n	800523a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005236:	2b11      	cmp	r3, #17
 8005238:	d132      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d125      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d126      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005260:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b10      	cmp	r3, #16
 8005268:	d11a      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <HAL_ADC_ConfigChannel+0x1ec>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	0c9a      	lsrs	r2, r3, #18
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005280:	e002      	b.n	8005288 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3b01      	subs	r3, #1
 8005286:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f9      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x1b2>
 800528e:	e007      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	40012400 	.word	0x40012400
 80052b8:	20000200 	.word	0x20000200
 80052bc:	431bde83 	.word	0x431bde83

080052c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d040      	beq.n	8005360 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052ee:	4b1f      	ldr	r3, [pc, #124]	; (800536c <ADC_Enable+0xac>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <ADC_Enable+0xb0>)
 80052f4:	fba2 2303 	umull	r2, r3, r2, r3
 80052f8:	0c9b      	lsrs	r3, r3, #18
 80052fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80052fc:	e002      	b.n	8005304 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	3b01      	subs	r3, #1
 8005302:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f9      	bne.n	80052fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800530a:	f7ff fceb 	bl	8004ce4 <HAL_GetTick>
 800530e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005310:	e01f      	b.n	8005352 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005312:	f7ff fce7 	bl	8004ce4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d918      	bls.n	8005352 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d011      	beq.n	8005352 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	f043 0210 	orr.w	r2, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	f043 0201 	orr.w	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e007      	b.n	8005362 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d1d8      	bne.n	8005312 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000200 	.word	0x20000200
 8005370:	431bde83 	.word	0x431bde83

08005374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b01      	cmp	r3, #1
 800538c:	d12e      	bne.n	80053ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0201 	bic.w	r2, r2, #1
 800539c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800539e:	f7ff fca1 	bl	8004ce4 <HAL_GetTick>
 80053a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053a4:	e01b      	b.n	80053de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053a6:	f7ff fc9d 	bl	8004ce4 <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d914      	bls.n	80053de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10d      	bne.n	80053de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c6:	f043 0210 	orr.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e007      	b.n	80053ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d0dc      	beq.n	80053a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005408:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d127      	bne.n	8005460 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005426:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800542a:	d115      	bne.n	8005458 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005430:	2b00      	cmp	r3, #0
 8005432:	d111      	bne.n	8005458 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f043 0201 	orr.w	r2, r3, #1
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f7fd fb67 	bl	8002b2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800545e:	e004      	b.n	800546a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff fe13 	bl	80050ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fe02 	bl	80050be <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054d4:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <__NVIC_SetPriorityGrouping+0x44>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054e0:	4013      	ands	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054f6:	4a04      	ldr	r2, [pc, #16]	; (8005508 <__NVIC_SetPriorityGrouping+0x44>)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	60d3      	str	r3, [r2, #12]
}
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000ed00 	.word	0xe000ed00

0800550c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <__NVIC_GetPriorityGrouping+0x18>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	f003 0307 	and.w	r3, r3, #7
}
 800551a:	4618      	mov	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005536:	2b00      	cmp	r3, #0
 8005538:	db0b      	blt.n	8005552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	f003 021f 	and.w	r2, r3, #31
 8005540:	4906      	ldr	r1, [pc, #24]	; (800555c <__NVIC_EnableIRQ+0x34>)
 8005542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	2001      	movs	r0, #1
 800554a:	fa00 f202 	lsl.w	r2, r0, r2
 800554e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	e000e100 	.word	0xe000e100

08005560 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	db12      	blt.n	8005598 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	f003 021f 	and.w	r2, r3, #31
 8005578:	490a      	ldr	r1, [pc, #40]	; (80055a4 <__NVIC_DisableIRQ+0x44>)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2001      	movs	r0, #1
 8005582:	fa00 f202 	lsl.w	r2, r0, r2
 8005586:	3320      	adds	r3, #32
 8005588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800558c:	f3bf 8f4f 	dsb	sy
}
 8005590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005592:	f3bf 8f6f 	isb	sy
}
 8005596:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000e100 	.word	0xe000e100

080055a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	6039      	str	r1, [r7, #0]
 80055b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db0a      	blt.n	80055d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	490c      	ldr	r1, [pc, #48]	; (80055f4 <__NVIC_SetPriority+0x4c>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	440b      	add	r3, r1
 80055cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055d0:	e00a      	b.n	80055e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4908      	ldr	r1, [pc, #32]	; (80055f8 <__NVIC_SetPriority+0x50>)
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	3b04      	subs	r3, #4
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	440b      	add	r3, r1
 80055e6:	761a      	strb	r2, [r3, #24]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	e000e100 	.word	0xe000e100
 80055f8:	e000ed00 	.word	0xe000ed00

080055fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b089      	sub	sp, #36	; 0x24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f1c3 0307 	rsb	r3, r3, #7
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf28      	it	cs
 800561a:	2304      	movcs	r3, #4
 800561c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	3304      	adds	r3, #4
 8005622:	2b06      	cmp	r3, #6
 8005624:	d902      	bls.n	800562c <NVIC_EncodePriority+0x30>
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3b03      	subs	r3, #3
 800562a:	e000      	b.n	800562e <NVIC_EncodePriority+0x32>
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005630:	f04f 32ff 	mov.w	r2, #4294967295
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43da      	mvns	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	401a      	ands	r2, r3
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005644:	f04f 31ff 	mov.w	r1, #4294967295
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	fa01 f303 	lsl.w	r3, r1, r3
 800564e:	43d9      	mvns	r1, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005654:	4313      	orrs	r3, r2
         );
}
 8005656:	4618      	mov	r0, r3
 8005658:	3724      	adds	r7, #36	; 0x24
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff2b 	bl	80054c4 <__NVIC_SetPriorityGrouping>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	4603      	mov	r3, r0
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005688:	f7ff ff40 	bl	800550c <__NVIC_GetPriorityGrouping>
 800568c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	f7ff ffb2 	bl	80055fc <NVIC_EncodePriority>
 8005698:	4602      	mov	r2, r0
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	4611      	mov	r1, r2
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ff81 	bl	80055a8 <__NVIC_SetPriority>
}
 80056a6:	bf00      	nop
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4603      	mov	r3, r0
 80056b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff ff33 	bl	8005528 <__NVIC_EnableIRQ>
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	4603      	mov	r3, r0
 80056d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80056d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff41 	bl	8005560 <__NVIC_DisableIRQ>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e043      	b.n	8005786 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <HAL_DMA_Init+0xa8>)
 8005706:	4413      	add	r3, r2
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <HAL_DMA_Init+0xac>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	009a      	lsls	r2, r3, #2
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_DMA_Init+0xb0>)
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005732:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005736:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr
 8005790:	bffdfff8 	.word	0xbffdfff8
 8005794:	cccccccd 	.word	0xcccccccd
 8005798:	40020000 	.word	0x40020000

0800579c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e046      	b.n	800583c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2200      	movs	r2, #0
 80057dc:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_DMA_DeInit+0xac>)
 80057e6:	4413      	add	r3, r2
 80057e8:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_DMA_DeInit+0xb0>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	009a      	lsls	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a15      	ldr	r2, [pc, #84]	; (8005850 <HAL_DMA_DeInit+0xb4>)
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005804:	2101      	movs	r1, #1
 8005806:	fa01 f202 	lsl.w	r2, r1, r2
 800580a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	bffdfff8 	.word	0xbffdfff8
 800584c:	cccccccd 	.word	0xcccccccd
 8005850:	40020000 	.word	0x40020000

08005854 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_DMA_Start_IT+0x20>
 8005870:	2302      	movs	r3, #2
 8005872:	e04b      	b.n	800590c <HAL_DMA_Start_IT+0xb8>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d13a      	bne.n	80058fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f9eb 	bl	8005c88 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 020e 	orr.w	r2, r2, #14
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e00f      	b.n	80058ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0204 	bic.w	r2, r2, #4
 80058da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 020a 	orr.w	r2, r2, #10
 80058ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e005      	b.n	800590a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005906:	2302      	movs	r3, #2
 8005908:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800590a:	7dfb      	ldrb	r3, [r7, #23]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d008      	beq.n	800593e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2204      	movs	r2, #4
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e020      	b.n	8005980 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 020e 	bic.w	r2, r2, #14
 800594c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005966:	2101      	movs	r1, #1
 8005968:	fa01 f202 	lsl.w	r2, r1, r2
 800596c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800597e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr
	...

0800598c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d005      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2204      	movs	r2, #4
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	e051      	b.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 020e 	bic.w	r2, r2, #14
 80059be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a22      	ldr	r2, [pc, #136]	; (8005a60 <HAL_DMA_Abort_IT+0xd4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d029      	beq.n	8005a2e <HAL_DMA_Abort_IT+0xa2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <HAL_DMA_Abort_IT+0xd8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d022      	beq.n	8005a2a <HAL_DMA_Abort_IT+0x9e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <HAL_DMA_Abort_IT+0xdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01a      	beq.n	8005a24 <HAL_DMA_Abort_IT+0x98>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <HAL_DMA_Abort_IT+0xe0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d012      	beq.n	8005a1e <HAL_DMA_Abort_IT+0x92>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1c      	ldr	r2, [pc, #112]	; (8005a70 <HAL_DMA_Abort_IT+0xe4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00a      	beq.n	8005a18 <HAL_DMA_Abort_IT+0x8c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_DMA_Abort_IT+0xe8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d102      	bne.n	8005a12 <HAL_DMA_Abort_IT+0x86>
 8005a0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a10:	e00e      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a16:	e00b      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a1c:	e008      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a22:	e005      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a28:	e002      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	e000      	b.n	8005a30 <HAL_DMA_Abort_IT+0xa4>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4a11      	ldr	r2, [pc, #68]	; (8005a78 <HAL_DMA_Abort_IT+0xec>)
 8005a32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
    } 
  }
  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40020008 	.word	0x40020008
 8005a64:	4002001c 	.word	0x4002001c
 8005a68:	40020030 	.word	0x40020030
 8005a6c:	40020044 	.word	0x40020044
 8005a70:	40020058 	.word	0x40020058
 8005a74:	4002006c 	.word	0x4002006c
 8005a78:	40020000 	.word	0x40020000

08005a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2204      	movs	r2, #4
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d04f      	beq.n	8005b44 <HAL_DMA_IRQHandler+0xc8>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d04a      	beq.n	8005b44 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d107      	bne.n	8005acc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a66      	ldr	r2, [pc, #408]	; (8005c6c <HAL_DMA_IRQHandler+0x1f0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d029      	beq.n	8005b2a <HAL_DMA_IRQHandler+0xae>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a65      	ldr	r2, [pc, #404]	; (8005c70 <HAL_DMA_IRQHandler+0x1f4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d022      	beq.n	8005b26 <HAL_DMA_IRQHandler+0xaa>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a63      	ldr	r2, [pc, #396]	; (8005c74 <HAL_DMA_IRQHandler+0x1f8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01a      	beq.n	8005b20 <HAL_DMA_IRQHandler+0xa4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a62      	ldr	r2, [pc, #392]	; (8005c78 <HAL_DMA_IRQHandler+0x1fc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d012      	beq.n	8005b1a <HAL_DMA_IRQHandler+0x9e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a60      	ldr	r2, [pc, #384]	; (8005c7c <HAL_DMA_IRQHandler+0x200>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00a      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x98>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a5f      	ldr	r2, [pc, #380]	; (8005c80 <HAL_DMA_IRQHandler+0x204>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d102      	bne.n	8005b0e <HAL_DMA_IRQHandler+0x92>
 8005b08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b0c:	e00e      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b12:	e00b      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b18:	e008      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b1e:	e005      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b24:	e002      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b26:	2340      	movs	r3, #64	; 0x40
 8005b28:	e000      	b.n	8005b2c <HAL_DMA_IRQHandler+0xb0>
 8005b2a:	2304      	movs	r3, #4
 8005b2c:	4a55      	ldr	r2, [pc, #340]	; (8005c84 <HAL_DMA_IRQHandler+0x208>)
 8005b2e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 8094 	beq.w	8005c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005b42:	e08e      	b.n	8005c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	2202      	movs	r2, #2
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d056      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x186>
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d051      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 020a 	bic.w	r2, r2, #10
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_DMA_IRQHandler+0x1f0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d029      	beq.n	8005be2 <HAL_DMA_IRQHandler+0x166>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <HAL_DMA_IRQHandler+0x1f4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d022      	beq.n	8005bde <HAL_DMA_IRQHandler+0x162>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a35      	ldr	r2, [pc, #212]	; (8005c74 <HAL_DMA_IRQHandler+0x1f8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01a      	beq.n	8005bd8 <HAL_DMA_IRQHandler+0x15c>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a34      	ldr	r2, [pc, #208]	; (8005c78 <HAL_DMA_IRQHandler+0x1fc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d012      	beq.n	8005bd2 <HAL_DMA_IRQHandler+0x156>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a32      	ldr	r2, [pc, #200]	; (8005c7c <HAL_DMA_IRQHandler+0x200>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00a      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x150>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a31      	ldr	r2, [pc, #196]	; (8005c80 <HAL_DMA_IRQHandler+0x204>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d102      	bne.n	8005bc6 <HAL_DMA_IRQHandler+0x14a>
 8005bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bc4:	e00e      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bca:	e00b      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bd0:	e008      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bd6:	e005      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bdc:	e002      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005bde:	2320      	movs	r3, #32
 8005be0:	e000      	b.n	8005be4 <HAL_DMA_IRQHandler+0x168>
 8005be2:	2302      	movs	r3, #2
 8005be4:	4a27      	ldr	r2, [pc, #156]	; (8005c84 <HAL_DMA_IRQHandler+0x208>)
 8005be6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d034      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c00:	e02f      	b.n	8005c62 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2208      	movs	r2, #8
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d028      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x1e8>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d023      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 020e 	bic.w	r2, r2, #14
 8005c2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f202 	lsl.w	r2, r1, r2
 8005c3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
    }
  }
  return;
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
}
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40020008 	.word	0x40020008
 8005c70:	4002001c 	.word	0x4002001c
 8005c74:	40020030 	.word	0x40020030
 8005c78:	40020044 	.word	0x40020044
 8005c7c:	40020058 	.word	0x40020058
 8005c80:	4002006c 	.word	0x4002006c
 8005c84:	40020000 	.word	0x40020000

08005c88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b10      	cmp	r3, #16
 8005cb4:	d108      	bne.n	8005cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005cc6:	e007      	b.n	8005cd8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	60da      	str	r2, [r3, #12]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
	...

08005ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08b      	sub	sp, #44	; 0x2c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cf6:	e169      	b.n	8005fcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	f040 8158 	bne.w	8005fc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a9a      	ldr	r2, [pc, #616]	; (8005f84 <HAL_GPIO_Init+0x2a0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d05e      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d20:	4a98      	ldr	r2, [pc, #608]	; (8005f84 <HAL_GPIO_Init+0x2a0>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d875      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d26:	4a98      	ldr	r2, [pc, #608]	; (8005f88 <HAL_GPIO_Init+0x2a4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d058      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d2c:	4a96      	ldr	r2, [pc, #600]	; (8005f88 <HAL_GPIO_Init+0x2a4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d86f      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d32:	4a96      	ldr	r2, [pc, #600]	; (8005f8c <HAL_GPIO_Init+0x2a8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d052      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d38:	4a94      	ldr	r2, [pc, #592]	; (8005f8c <HAL_GPIO_Init+0x2a8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d869      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d3e:	4a94      	ldr	r2, [pc, #592]	; (8005f90 <HAL_GPIO_Init+0x2ac>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d04c      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d44:	4a92      	ldr	r2, [pc, #584]	; (8005f90 <HAL_GPIO_Init+0x2ac>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d863      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d4a:	4a92      	ldr	r2, [pc, #584]	; (8005f94 <HAL_GPIO_Init+0x2b0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d046      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
 8005d50:	4a90      	ldr	r2, [pc, #576]	; (8005f94 <HAL_GPIO_Init+0x2b0>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d85d      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d56:	2b12      	cmp	r3, #18
 8005d58:	d82a      	bhi.n	8005db0 <HAL_GPIO_Init+0xcc>
 8005d5a:	2b12      	cmp	r3, #18
 8005d5c:	d859      	bhi.n	8005e12 <HAL_GPIO_Init+0x12e>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <HAL_GPIO_Init+0x80>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005ddf 	.word	0x08005ddf
 8005d68:	08005db9 	.word	0x08005db9
 8005d6c:	08005dcb 	.word	0x08005dcb
 8005d70:	08005e0d 	.word	0x08005e0d
 8005d74:	08005e13 	.word	0x08005e13
 8005d78:	08005e13 	.word	0x08005e13
 8005d7c:	08005e13 	.word	0x08005e13
 8005d80:	08005e13 	.word	0x08005e13
 8005d84:	08005e13 	.word	0x08005e13
 8005d88:	08005e13 	.word	0x08005e13
 8005d8c:	08005e13 	.word	0x08005e13
 8005d90:	08005e13 	.word	0x08005e13
 8005d94:	08005e13 	.word	0x08005e13
 8005d98:	08005e13 	.word	0x08005e13
 8005d9c:	08005e13 	.word	0x08005e13
 8005da0:	08005e13 	.word	0x08005e13
 8005da4:	08005e13 	.word	0x08005e13
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	4a79      	ldr	r2, [pc, #484]	; (8005f98 <HAL_GPIO_Init+0x2b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005db6:	e02c      	b.n	8005e12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	623b      	str	r3, [r7, #32]
          break;
 8005dbe:	e029      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	623b      	str	r3, [r7, #32]
          break;
 8005dc8:	e024      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	3308      	adds	r3, #8
 8005dd0:	623b      	str	r3, [r7, #32]
          break;
 8005dd2:	e01f      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	623b      	str	r3, [r7, #32]
          break;
 8005ddc:	e01a      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d102      	bne.n	8005dec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005de6:	2304      	movs	r3, #4
 8005de8:	623b      	str	r3, [r7, #32]
          break;
 8005dea:	e013      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d105      	bne.n	8005e00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005df4:	2308      	movs	r3, #8
 8005df6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	611a      	str	r2, [r3, #16]
          break;
 8005dfe:	e009      	b.n	8005e14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e00:	2308      	movs	r3, #8
 8005e02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	615a      	str	r2, [r3, #20]
          break;
 8005e0a:	e003      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	623b      	str	r3, [r7, #32]
          break;
 8005e10:	e000      	b.n	8005e14 <HAL_GPIO_Init+0x130>
          break;
 8005e12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2bff      	cmp	r3, #255	; 0xff
 8005e18:	d801      	bhi.n	8005e1e <HAL_GPIO_Init+0x13a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	e001      	b.n	8005e22 <HAL_GPIO_Init+0x13e>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d802      	bhi.n	8005e30 <HAL_GPIO_Init+0x14c>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	e002      	b.n	8005e36 <HAL_GPIO_Init+0x152>
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	3b08      	subs	r3, #8
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	210f      	movs	r1, #15
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	6a39      	ldr	r1, [r7, #32]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	431a      	orrs	r2, r3
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f000 80b1 	beq.w	8005fc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005e64:	4b4d      	ldr	r3, [pc, #308]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	4a4c      	ldr	r2, [pc, #304]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e6a:	f043 0301 	orr.w	r3, r3, #1
 8005e6e:	6193      	str	r3, [r2, #24]
 8005e70:	4b4a      	ldr	r3, [pc, #296]	; (8005f9c <HAL_GPIO_Init+0x2b8>)
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	60bb      	str	r3, [r7, #8]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005e7c:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_GPIO_Init+0x2bc>)
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	089b      	lsrs	r3, r3, #2
 8005e82:	3302      	adds	r3, #2
 8005e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	220f      	movs	r2, #15
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <HAL_GPIO_Init+0x2c0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d013      	beq.n	8005ed0 <HAL_GPIO_Init+0x1ec>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3f      	ldr	r2, [pc, #252]	; (8005fa8 <HAL_GPIO_Init+0x2c4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00d      	beq.n	8005ecc <HAL_GPIO_Init+0x1e8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3e      	ldr	r2, [pc, #248]	; (8005fac <HAL_GPIO_Init+0x2c8>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <HAL_GPIO_Init+0x1e4>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3d      	ldr	r2, [pc, #244]	; (8005fb0 <HAL_GPIO_Init+0x2cc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d101      	bne.n	8005ec4 <HAL_GPIO_Init+0x1e0>
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e006      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	e004      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e002      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <HAL_GPIO_Init+0x1ee>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	f002 0203 	and.w	r2, r2, #3
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4093      	lsls	r3, r2
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ee2:	492f      	ldr	r1, [pc, #188]	; (8005fa0 <HAL_GPIO_Init+0x2bc>)
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005efc:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	492c      	ldr	r1, [pc, #176]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	608b      	str	r3, [r1, #8]
 8005f08:	e006      	b.n	8005f18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	4928      	ldr	r1, [pc, #160]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	4922      	ldr	r1, [pc, #136]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	60cb      	str	r3, [r1, #12]
 8005f30:	e006      	b.n	8005f40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	491e      	ldr	r1, [pc, #120]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d006      	beq.n	8005f5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4918      	ldr	r1, [pc, #96]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	604b      	str	r3, [r1, #4]
 8005f58:	e006      	b.n	8005f68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	43db      	mvns	r3, r3
 8005f62:	4914      	ldr	r1, [pc, #80]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d021      	beq.n	8005fb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005f74:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	490e      	ldr	r1, [pc, #56]	; (8005fb4 <HAL_GPIO_Init+0x2d0>)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	e021      	b.n	8005fc6 <HAL_GPIO_Init+0x2e2>
 8005f82:	bf00      	nop
 8005f84:	10320000 	.word	0x10320000
 8005f88:	10310000 	.word	0x10310000
 8005f8c:	10220000 	.word	0x10220000
 8005f90:	10210000 	.word	0x10210000
 8005f94:	10120000 	.word	0x10120000
 8005f98:	10110000 	.word	0x10110000
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40010800 	.word	0x40010800
 8005fa8:	40010c00 	.word	0x40010c00
 8005fac:	40011000 	.word	0x40011000
 8005fb0:	40011400 	.word	0x40011400
 8005fb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005fb8:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_GPIO_Init+0x304>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	4909      	ldr	r1, [pc, #36]	; (8005fe8 <HAL_GPIO_Init+0x304>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	3301      	adds	r3, #1
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f47f ae8e 	bne.w	8005cf8 <HAL_GPIO_Init+0x14>
  }
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	372c      	adds	r7, #44	; 0x2c
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr
 8005fe8:	40010400 	.word	0x40010400

08005fec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005ffa:	e09a      	b.n	8006132 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 808d 	beq.w	800612c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8006012:	4a4e      	ldr	r2, [pc, #312]	; (800614c <HAL_GPIO_DeInit+0x160>)
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	089b      	lsrs	r3, r3, #2
 8006018:	3302      	adds	r3, #2
 800601a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800601e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	220f      	movs	r2, #15
 800602a:	fa02 f303 	lsl.w	r3, r2, r3
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4013      	ands	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a46      	ldr	r2, [pc, #280]	; (8006150 <HAL_GPIO_DeInit+0x164>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_GPIO_DeInit+0x78>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a45      	ldr	r2, [pc, #276]	; (8006154 <HAL_GPIO_DeInit+0x168>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00d      	beq.n	8006060 <HAL_GPIO_DeInit+0x74>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a44      	ldr	r2, [pc, #272]	; (8006158 <HAL_GPIO_DeInit+0x16c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <HAL_GPIO_DeInit+0x70>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a43      	ldr	r2, [pc, #268]	; (800615c <HAL_GPIO_DeInit+0x170>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_GPIO_DeInit+0x6c>
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <HAL_GPIO_DeInit+0x7a>
 8006058:	2304      	movs	r3, #4
 800605a:	e004      	b.n	8006066 <HAL_GPIO_DeInit+0x7a>
 800605c:	2302      	movs	r3, #2
 800605e:	e002      	b.n	8006066 <HAL_GPIO_DeInit+0x7a>
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <HAL_GPIO_DeInit+0x7a>
 8006064:	2300      	movs	r3, #0
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	f002 0203 	and.w	r2, r2, #3
 800606c:	0092      	lsls	r2, r2, #2
 800606e:	4093      	lsls	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	429a      	cmp	r2, r3
 8006074:	d132      	bne.n	80060dc <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006076:	4b3a      	ldr	r3, [pc, #232]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	43db      	mvns	r3, r3
 800607e:	4938      	ldr	r1, [pc, #224]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 8006080:	4013      	ands	r3, r2
 8006082:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006084:	4b36      	ldr	r3, [pc, #216]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	43db      	mvns	r3, r3
 800608c:	4934      	ldr	r1, [pc, #208]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 800608e:	4013      	ands	r3, r2
 8006090:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006092:	4b33      	ldr	r3, [pc, #204]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	43db      	mvns	r3, r3
 800609a:	4931      	ldr	r1, [pc, #196]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 800609c:	4013      	ands	r3, r2
 800609e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80060a0:	4b2f      	ldr	r3, [pc, #188]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	43db      	mvns	r3, r3
 80060a8:	492d      	ldr	r1, [pc, #180]	; (8006160 <HAL_GPIO_DeInit+0x174>)
 80060aa:	4013      	ands	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	220f      	movs	r2, #15
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80060be:	4a23      	ldr	r2, [pc, #140]	; (800614c <HAL_GPIO_DeInit+0x160>)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	089b      	lsrs	r3, r3, #2
 80060c4:	3302      	adds	r3, #2
 80060c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	43da      	mvns	r2, r3
 80060ce:	481f      	ldr	r0, [pc, #124]	; (800614c <HAL_GPIO_DeInit+0x160>)
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	400a      	ands	r2, r1
 80060d6:	3302      	adds	r3, #2
 80060d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2bff      	cmp	r3, #255	; 0xff
 80060e0:	d801      	bhi.n	80060e6 <HAL_GPIO_DeInit+0xfa>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	e001      	b.n	80060ea <HAL_GPIO_DeInit+0xfe>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	3304      	adds	r3, #4
 80060ea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	2bff      	cmp	r3, #255	; 0xff
 80060f0:	d802      	bhi.n	80060f8 <HAL_GPIO_DeInit+0x10c>
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	e002      	b.n	80060fe <HAL_GPIO_DeInit+0x112>
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	3b08      	subs	r3, #8
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	210f      	movs	r1, #15
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	fa01 f303 	lsl.w	r3, r1, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	401a      	ands	r2, r3
 8006110:	2104      	movs	r1, #4
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	fa01 f303 	lsl.w	r3, r1, r3
 8006118:	431a      	orrs	r2, r3
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	3301      	adds	r3, #1
 8006130:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	f47f af5e 	bne.w	8005ffc <HAL_GPIO_DeInit+0x10>
  }
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	3724      	adds	r7, #36	; 0x24
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr
 800614c:	40010000 	.word	0x40010000
 8006150:	40010800 	.word	0x40010800
 8006154:	40010c00 	.word	0x40010c00
 8006158:	40011000 	.word	0x40011000
 800615c:	40011400 	.word	0x40011400
 8006160:	40010400 	.word	0x40010400

08006164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	887b      	ldrh	r3, [r7, #2]
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	e001      	b.n	8006186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	bc80      	pop	{r7}
 8006190:	4770      	bx	lr

08006192 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	460b      	mov	r3, r1
 800619c:	807b      	strh	r3, [r7, #2]
 800619e:	4613      	mov	r3, r2
 80061a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061a2:	787b      	ldrb	r3, [r7, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a8:	887a      	ldrh	r2, [r7, #2]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80061ae:	e003      	b.n	80061b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80061b0:	887b      	ldrh	r3, [r7, #2]
 80061b2:	041a      	lsls	r2, r3, #16
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	611a      	str	r2, [r3, #16]
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
	...

080061c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e12b      	b.n	800642e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fd f91c 	bl	8003428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	; 0x24
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006228:	f001 f97c 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 800622c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	4a81      	ldr	r2, [pc, #516]	; (8006438 <HAL_I2C_Init+0x274>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d807      	bhi.n	8006248 <HAL_I2C_Init+0x84>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4a80      	ldr	r2, [pc, #512]	; (800643c <HAL_I2C_Init+0x278>)
 800623c:	4293      	cmp	r3, r2
 800623e:	bf94      	ite	ls
 8006240:	2301      	movls	r3, #1
 8006242:	2300      	movhi	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e006      	b.n	8006256 <HAL_I2C_Init+0x92>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a7d      	ldr	r2, [pc, #500]	; (8006440 <HAL_I2C_Init+0x27c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	bf94      	ite	ls
 8006250:	2301      	movls	r3, #1
 8006252:	2300      	movhi	r3, #0
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e0e7      	b.n	800642e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a78      	ldr	r2, [pc, #480]	; (8006444 <HAL_I2C_Init+0x280>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	0c9b      	lsrs	r3, r3, #18
 8006268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a6a      	ldr	r2, [pc, #424]	; (8006438 <HAL_I2C_Init+0x274>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d802      	bhi.n	8006298 <HAL_I2C_Init+0xd4>
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	3301      	adds	r3, #1
 8006296:	e009      	b.n	80062ac <HAL_I2C_Init+0xe8>
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800629e:	fb02 f303 	mul.w	r3, r2, r3
 80062a2:	4a69      	ldr	r2, [pc, #420]	; (8006448 <HAL_I2C_Init+0x284>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	099b      	lsrs	r3, r3, #6
 80062aa:	3301      	adds	r3, #1
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	430b      	orrs	r3, r1
 80062b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80062be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	495c      	ldr	r1, [pc, #368]	; (8006438 <HAL_I2C_Init+0x274>)
 80062c8:	428b      	cmp	r3, r1
 80062ca:	d819      	bhi.n	8006300 <HAL_I2C_Init+0x13c>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	1e59      	subs	r1, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80062e0:	400b      	ands	r3, r1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00a      	beq.n	80062fc <HAL_I2C_Init+0x138>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1e59      	subs	r1, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062fa:	e051      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 80062fc:	2304      	movs	r3, #4
 80062fe:	e04f      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d111      	bne.n	800632c <HAL_I2C_Init+0x168>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1e58      	subs	r0, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6859      	ldr	r1, [r3, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	440b      	add	r3, r1
 8006316:	fbb0 f3f3 	udiv	r3, r0, r3
 800631a:	3301      	adds	r3, #1
 800631c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006320:	2b00      	cmp	r3, #0
 8006322:	bf0c      	ite	eq
 8006324:	2301      	moveq	r3, #1
 8006326:	2300      	movne	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e012      	b.n	8006352 <HAL_I2C_Init+0x18e>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	1e58      	subs	r0, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6859      	ldr	r1, [r3, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	0099      	lsls	r1, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006342:	3301      	adds	r3, #1
 8006344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006348:	2b00      	cmp	r3, #0
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Init+0x196>
 8006356:	2301      	movs	r3, #1
 8006358:	e022      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10e      	bne.n	8006380 <HAL_I2C_Init+0x1bc>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1e58      	subs	r0, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	460b      	mov	r3, r1
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	440b      	add	r3, r1
 8006370:	fbb0 f3f3 	udiv	r3, r0, r3
 8006374:	3301      	adds	r3, #1
 8006376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637e:	e00f      	b.n	80063a0 <HAL_I2C_Init+0x1dc>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1e58      	subs	r0, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	0099      	lsls	r1, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	fbb0 f3f3 	udiv	r3, r0, r3
 8006396:	3301      	adds	r3, #1
 8006398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800639c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	6809      	ldr	r1, [r1, #0]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80063ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6911      	ldr	r1, [r2, #16]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68d2      	ldr	r2, [r2, #12]
 80063da:	4311      	orrs	r1, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	000186a0 	.word	0x000186a0
 800643c:	001e847f 	.word	0x001e847f
 8006440:	003d08ff 	.word	0x003d08ff
 8006444:	431bde83 	.word	0x431bde83
 8006448:	10624dd3 	.word	0x10624dd3

0800644c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b088      	sub	sp, #32
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	4608      	mov	r0, r1
 8006456:	4611      	mov	r1, r2
 8006458:	461a      	mov	r2, r3
 800645a:	4603      	mov	r3, r0
 800645c:	817b      	strh	r3, [r7, #10]
 800645e:	460b      	mov	r3, r1
 8006460:	813b      	strh	r3, [r7, #8]
 8006462:	4613      	mov	r3, r2
 8006464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006466:	f7fe fc3d 	bl	8004ce4 <HAL_GetTick>
 800646a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	f040 80d9 	bne.w	800662c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2319      	movs	r3, #25
 8006480:	2201      	movs	r2, #1
 8006482:	496d      	ldr	r1, [pc, #436]	; (8006638 <HAL_I2C_Mem_Write+0x1ec>)
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fa9f 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
 8006492:	e0cc      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_Mem_Write+0x56>
 800649e:	2302      	movs	r3, #2
 80064a0:	e0c5      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d007      	beq.n	80064c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0201 	orr.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2221      	movs	r2, #33	; 0x21
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a4d      	ldr	r2, [pc, #308]	; (800663c <HAL_I2C_Mem_Write+0x1f0>)
 8006508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800650a:	88f8      	ldrh	r0, [r7, #6]
 800650c:	893a      	ldrh	r2, [r7, #8]
 800650e:	8979      	ldrh	r1, [r7, #10]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	9301      	str	r3, [sp, #4]
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f9be 	bl	800689c <I2C_RequestMemoryWrite>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d052      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e081      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f000 fb64 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00d      	beq.n	8006556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b04      	cmp	r3, #4
 8006540:	d107      	bne.n	8006552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e06b      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	781a      	ldrb	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b04      	cmp	r3, #4
 8006592:	d11b      	bne.n	80065cc <HAL_I2C_Mem_Write+0x180>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	781a      	ldrb	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1aa      	bne.n	800652a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fb57 	bl	8006c8c <I2C_WaitOnBTFFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00d      	beq.n	8006600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d107      	bne.n	80065fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e016      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800660e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e000      	b.n	800662e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	00100002 	.word	0x00100002
 800663c:	ffff0000 	.word	0xffff0000

08006640 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af02      	add	r7, sp, #8
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	603b      	str	r3, [r7, #0]
 800664c:	460b      	mov	r3, r1
 800664e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006650:	f7fe fb48 	bl	8004ce4 <HAL_GetTick>
 8006654:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b20      	cmp	r3, #32
 8006664:	f040 8111 	bne.w	800688a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	2319      	movs	r3, #25
 800666e:	2201      	movs	r2, #1
 8006670:	4988      	ldr	r1, [pc, #544]	; (8006894 <HAL_I2C_IsDeviceReady+0x254>)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f9a8 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800667e:	2302      	movs	r3, #2
 8006680:	e104      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_I2C_IsDeviceReady+0x50>
 800668c:	2302      	movs	r3, #2
 800668e:	e0fd      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d007      	beq.n	80066b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2224      	movs	r2, #36	; 0x24
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a70      	ldr	r2, [pc, #448]	; (8006898 <HAL_I2C_IsDeviceReady+0x258>)
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f966 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006710:	d103      	bne.n	800671a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e0b6      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800671e:	897b      	ldrh	r3, [r7, #10]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800672c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800672e:	f7fe fad9 	bl	8004ce4 <HAL_GetTick>
 8006732:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	bf0c      	ite	eq
 8006742:	2301      	moveq	r3, #1
 8006744:	2300      	movne	r3, #0
 8006746:	b2db      	uxtb	r3, r3
 8006748:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006762:	e025      	b.n	80067b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006764:	f7fe fabe 	bl	8004ce4 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <HAL_I2C_IsDeviceReady+0x13a>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22a0      	movs	r2, #160	; 0xa0
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0302 	and.w	r3, r3, #2
 800678c:	2b02      	cmp	r3, #2
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a6:	bf0c      	ite	eq
 80067a8:	2301      	moveq	r3, #1
 80067aa:	2300      	movne	r3, #0
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	2ba0      	cmp	r3, #160	; 0xa0
 80067ba:	d005      	beq.n	80067c8 <HAL_I2C_IsDeviceReady+0x188>
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <HAL_I2C_IsDeviceReady+0x188>
 80067c2:	7dbb      	ldrb	r3, [r7, #22]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0cd      	beq.n	8006764 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d129      	bne.n	8006832 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2319      	movs	r3, #25
 800680a:	2201      	movs	r2, #1
 800680c:	4921      	ldr	r1, [pc, #132]	; (8006894 <HAL_I2C_IsDeviceReady+0x254>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f8da 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e036      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	e02c      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006840:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800684a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	2319      	movs	r3, #25
 8006852:	2201      	movs	r2, #1
 8006854:	490f      	ldr	r1, [pc, #60]	; (8006894 <HAL_I2C_IsDeviceReady+0x254>)
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f8b6 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e012      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	3301      	adds	r3, #1
 800686a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800686c:	69ba      	ldr	r2, [r7, #24]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	f4ff af32 	bcc.w	80066da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800688a:	2302      	movs	r3, #2
  }
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	00100002 	.word	0x00100002
 8006898:	ffff0000 	.word	0xffff0000

0800689c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	4608      	mov	r0, r1
 80068a6:	4611      	mov	r1, r2
 80068a8:	461a      	mov	r2, r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	817b      	strh	r3, [r7, #10]
 80068ae:	460b      	mov	r3, r1
 80068b0:	813b      	strh	r3, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f878 	bl	80069c8 <I2C_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00d      	beq.n	80068fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ec:	d103      	bne.n	80068f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e05f      	b.n	80069ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068fa:	897b      	ldrh	r3, [r7, #10]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006908:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	492d      	ldr	r1, [pc, #180]	; (80069c4 <I2C_RequestMemoryWrite+0x128>)
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f8d3 	bl	8006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e04c      	b.n	80069ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006938:	6a39      	ldr	r1, [r7, #32]
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 f95e 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00d      	beq.n	8006962 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b04      	cmp	r3, #4
 800694c:	d107      	bne.n	800695e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e02b      	b.n	80069ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d105      	bne.n	8006974 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006968:	893b      	ldrh	r3, [r7, #8]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	611a      	str	r2, [r3, #16]
 8006972:	e021      	b.n	80069b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006974:	893b      	ldrh	r3, [r7, #8]
 8006976:	0a1b      	lsrs	r3, r3, #8
 8006978:	b29b      	uxth	r3, r3
 800697a:	b2da      	uxtb	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006984:	6a39      	ldr	r1, [r7, #32]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f938 	bl	8006bfc <I2C_WaitOnTXEFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00d      	beq.n	80069ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2b04      	cmp	r3, #4
 8006998:	d107      	bne.n	80069aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e005      	b.n	80069ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069ae:	893b      	ldrh	r3, [r7, #8]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	00010002 	.word	0x00010002

080069c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069d8:	e048      	b.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e0:	d044      	beq.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fe f97f 	bl	8004ce4 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d139      	bne.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10d      	bne.n	8006a1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	43da      	mvns	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	e00c      	b.n	8006a38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	43da      	mvns	r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d116      	bne.n	8006a6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e023      	b.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	0c1b      	lsrs	r3, r3, #16
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d10d      	bne.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	43da      	mvns	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4013      	ands	r3, r2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	2301      	moveq	r3, #1
 8006a8a:	2300      	movne	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	e00c      	b.n	8006aac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d093      	beq.n	80069da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aca:	e071      	b.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ada:	d123      	bne.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	f043 0204 	orr.w	r2, r3, #4
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e067      	b.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2a:	d041      	beq.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fe f8da 	bl	8004ce4 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d136      	bne.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10c      	bne.n	8006b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	43da      	mvns	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4013      	ands	r3, r2
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	bf14      	ite	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	2300      	moveq	r3, #0
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	e00b      	b.n	8006b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	43da      	mvns	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4013      	ands	r3, r2
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	bf14      	ite	ne
 8006b78:	2301      	movne	r3, #1
 8006b7a:	2300      	moveq	r3, #0
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d016      	beq.n	8006bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	f043 0220 	orr.w	r2, r3, #32
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e021      	b.n	8006bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	0c1b      	lsrs	r3, r3, #16
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d10c      	bne.n	8006bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	43da      	mvns	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e00b      	b.n	8006bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4013      	ands	r3, r2
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f47f af6d 	bne.w	8006acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c08:	e034      	b.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f886 	bl	8006d1c <I2C_IsAcknowledgeFailed>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e034      	b.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c20:	d028      	beq.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c22:	f7fe f85f 	bl	8004ce4 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d302      	bcc.n	8006c38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11d      	bne.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b80      	cmp	r3, #128	; 0x80
 8006c44:	d016      	beq.n	8006c74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0220 	orr.w	r2, r3, #32
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e007      	b.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b80      	cmp	r3, #128	; 0x80
 8006c80:	d1c3      	bne.n	8006c0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c98:	e034      	b.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f83e 	bl	8006d1c <I2C_IsAcknowledgeFailed>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e034      	b.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d028      	beq.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb2:	f7fe f817 	bl	8004ce4 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d302      	bcc.n	8006cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d11d      	bne.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0304 	and.w	r3, r3, #4
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d016      	beq.n	8006d04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e007      	b.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d1c3      	bne.n	8006c9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d32:	d11b      	bne.n	8006d6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	f043 0204 	orr.w	r2, r3, #4
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006d7c:	4b03      	ldr	r3, [pc, #12]	; (8006d8c <HAL_PWR_EnableBkUpAccess+0x14>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	420e0020 	.word	0x420e0020

08006d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e272      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8087 	beq.w	8006ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006db0:	4b92      	ldr	r3, [pc, #584]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 030c 	and.w	r3, r3, #12
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d00c      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006dbc:	4b8f      	ldr	r3, [pc, #572]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 030c 	and.w	r3, r3, #12
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d112      	bne.n	8006dee <HAL_RCC_OscConfig+0x5e>
 8006dc8:	4b8c      	ldr	r3, [pc, #560]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd4:	d10b      	bne.n	8006dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd6:	4b89      	ldr	r3, [pc, #548]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d06c      	beq.n	8006ebc <HAL_RCC_OscConfig+0x12c>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d168      	bne.n	8006ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e24c      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x76>
 8006df8:	4b80      	ldr	r3, [pc, #512]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7f      	ldr	r2, [pc, #508]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	e02e      	b.n	8006e64 <HAL_RCC_OscConfig+0xd4>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x98>
 8006e0e:	4b7b      	ldr	r3, [pc, #492]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a7a      	ldr	r2, [pc, #488]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	4b78      	ldr	r3, [pc, #480]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a77      	ldr	r2, [pc, #476]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e01d      	b.n	8006e64 <HAL_RCC_OscConfig+0xd4>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e30:	d10c      	bne.n	8006e4c <HAL_RCC_OscConfig+0xbc>
 8006e32:	4b72      	ldr	r3, [pc, #456]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a71      	ldr	r2, [pc, #452]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	4b6f      	ldr	r3, [pc, #444]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6e      	ldr	r2, [pc, #440]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e00b      	b.n	8006e64 <HAL_RCC_OscConfig+0xd4>
 8006e4c:	4b6b      	ldr	r3, [pc, #428]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a6a      	ldr	r2, [pc, #424]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	4b68      	ldr	r3, [pc, #416]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a67      	ldr	r2, [pc, #412]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d013      	beq.n	8006e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6c:	f7fd ff3a 	bl	8004ce4 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e74:	f7fd ff36 	bl	8004ce4 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b64      	cmp	r3, #100	; 0x64
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e200      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e86:	4b5d      	ldr	r3, [pc, #372]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f0      	beq.n	8006e74 <HAL_RCC_OscConfig+0xe4>
 8006e92:	e014      	b.n	8006ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e94:	f7fd ff26 	bl	8004ce4 <HAL_GetTick>
 8006e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e9c:	f7fd ff22 	bl	8004ce4 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b64      	cmp	r3, #100	; 0x64
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e1ec      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eae:	4b53      	ldr	r3, [pc, #332]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1f0      	bne.n	8006e9c <HAL_RCC_OscConfig+0x10c>
 8006eba:	e000      	b.n	8006ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d063      	beq.n	8006f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eca:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f003 030c 	and.w	r3, r3, #12
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00b      	beq.n	8006eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ed6:	4b49      	ldr	r3, [pc, #292]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	d11c      	bne.n	8006f1c <HAL_RCC_OscConfig+0x18c>
 8006ee2:	4b46      	ldr	r3, [pc, #280]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d116      	bne.n	8006f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eee:	4b43      	ldr	r3, [pc, #268]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_RCC_OscConfig+0x176>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d001      	beq.n	8006f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e1c0      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f06:	4b3d      	ldr	r3, [pc, #244]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4939      	ldr	r1, [pc, #228]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f1a:	e03a      	b.n	8006f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d020      	beq.n	8006f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f24:	4b36      	ldr	r3, [pc, #216]	; (8007000 <HAL_RCC_OscConfig+0x270>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fd fedb 	bl	8004ce4 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f32:	f7fd fed7 	bl	8004ce4 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e1a1      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f44:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f50:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	4927      	ldr	r1, [pc, #156]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	600b      	str	r3, [r1, #0]
 8006f64:	e015      	b.n	8006f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f66:	4b26      	ldr	r3, [pc, #152]	; (8007000 <HAL_RCC_OscConfig+0x270>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f6c:	f7fd feba 	bl	8004ce4 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f74:	f7fd feb6 	bl	8004ce4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e180      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0308 	and.w	r3, r3, #8
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d03a      	beq.n	8007014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d019      	beq.n	8006fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fa6:	4b17      	ldr	r3, [pc, #92]	; (8007004 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	2201      	movs	r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fac:	f7fd fe9a 	bl	8004ce4 <HAL_GetTick>
 8006fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fb2:	e008      	b.n	8006fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fb4:	f7fd fe96 	bl	8004ce4 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d901      	bls.n	8006fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e160      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <HAL_RCC_OscConfig+0x26c>)
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0f0      	beq.n	8006fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	f000 fafe 	bl	80075d4 <RCC_Delay>
 8006fd8:	e01c      	b.n	8007014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fda:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCC_OscConfig+0x274>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe0:	f7fd fe80 	bl	8004ce4 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fe6:	e00f      	b.n	8007008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fe8:	f7fd fe7c 	bl	8004ce4 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d908      	bls.n	8007008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e146      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000
 8007000:	42420000 	.word	0x42420000
 8007004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007008:	4b92      	ldr	r3, [pc, #584]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e9      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a6 	beq.w	800716e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007022:	2300      	movs	r3, #0
 8007024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007026:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10d      	bne.n	800704e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007032:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	4a87      	ldr	r2, [pc, #540]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703c:	61d3      	str	r3, [r2, #28]
 800703e:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800704e:	4b82      	ldr	r3, [pc, #520]	; (8007258 <HAL_RCC_OscConfig+0x4c8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d118      	bne.n	800708c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800705a:	4b7f      	ldr	r3, [pc, #508]	; (8007258 <HAL_RCC_OscConfig+0x4c8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a7e      	ldr	r2, [pc, #504]	; (8007258 <HAL_RCC_OscConfig+0x4c8>)
 8007060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007066:	f7fd fe3d 	bl	8004ce4 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706e:	f7fd fe39 	bl	8004ce4 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b64      	cmp	r3, #100	; 0x64
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e103      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007080:	4b75      	ldr	r3, [pc, #468]	; (8007258 <HAL_RCC_OscConfig+0x4c8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d106      	bne.n	80070a2 <HAL_RCC_OscConfig+0x312>
 8007094:	4b6f      	ldr	r3, [pc, #444]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4a6e      	ldr	r2, [pc, #440]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6213      	str	r3, [r2, #32]
 80070a0:	e02d      	b.n	80070fe <HAL_RCC_OscConfig+0x36e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x334>
 80070aa:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	4a69      	ldr	r2, [pc, #420]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	6213      	str	r3, [r2, #32]
 80070b6:	4b67      	ldr	r3, [pc, #412]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4a66      	ldr	r2, [pc, #408]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070bc:	f023 0304 	bic.w	r3, r3, #4
 80070c0:	6213      	str	r3, [r2, #32]
 80070c2:	e01c      	b.n	80070fe <HAL_RCC_OscConfig+0x36e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	d10c      	bne.n	80070e6 <HAL_RCC_OscConfig+0x356>
 80070cc:	4b61      	ldr	r3, [pc, #388]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	4a60      	ldr	r2, [pc, #384]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070d2:	f043 0304 	orr.w	r3, r3, #4
 80070d6:	6213      	str	r3, [r2, #32]
 80070d8:	4b5e      	ldr	r3, [pc, #376]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	4a5d      	ldr	r2, [pc, #372]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6213      	str	r3, [r2, #32]
 80070e4:	e00b      	b.n	80070fe <HAL_RCC_OscConfig+0x36e>
 80070e6:	4b5b      	ldr	r3, [pc, #364]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	4a5a      	ldr	r2, [pc, #360]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	6213      	str	r3, [r2, #32]
 80070f2:	4b58      	ldr	r3, [pc, #352]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	4a57      	ldr	r2, [pc, #348]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80070f8:	f023 0304 	bic.w	r3, r3, #4
 80070fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d015      	beq.n	8007132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007106:	f7fd fded 	bl	8004ce4 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710c:	e00a      	b.n	8007124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710e:	f7fd fde9 	bl	8004ce4 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f241 3288 	movw	r2, #5000	; 0x1388
 800711c:	4293      	cmp	r3, r2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e0b1      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ee      	beq.n	800710e <HAL_RCC_OscConfig+0x37e>
 8007130:	e014      	b.n	800715c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007132:	f7fd fdd7 	bl	8004ce4 <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007138:	e00a      	b.n	8007150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713a:	f7fd fdd3 	bl	8004ce4 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	4293      	cmp	r3, r2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e09b      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007150:	4b40      	ldr	r3, [pc, #256]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ee      	bne.n	800713a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007162:	4b3c      	ldr	r3, [pc, #240]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	4a3b      	ldr	r2, [pc, #236]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 8007168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800716c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 8087 	beq.w	8007286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007178:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 030c 	and.w	r3, r3, #12
 8007180:	2b08      	cmp	r3, #8
 8007182:	d061      	beq.n	8007248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d146      	bne.n	800721a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718c:	4b33      	ldr	r3, [pc, #204]	; (800725c <HAL_RCC_OscConfig+0x4cc>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007192:	f7fd fda7 	bl	8004ce4 <HAL_GetTick>
 8007196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007198:	e008      	b.n	80071ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719a:	f7fd fda3 	bl	8004ce4 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e06d      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ac:	4b29      	ldr	r3, [pc, #164]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f0      	bne.n	800719a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c0:	d108      	bne.n	80071d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071c2:	4b24      	ldr	r3, [pc, #144]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	4921      	ldr	r1, [pc, #132]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071d4:	4b1f      	ldr	r3, [pc, #124]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a19      	ldr	r1, [r3, #32]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	430b      	orrs	r3, r1
 80071e6:	491b      	ldr	r1, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <HAL_RCC_OscConfig+0x4cc>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f2:	f7fd fd77 	bl	8004ce4 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fa:	f7fd fd73 	bl	8004ce4 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e03d      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800720c:	4b11      	ldr	r3, [pc, #68]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCC_OscConfig+0x46a>
 8007218:	e035      	b.n	8007286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <HAL_RCC_OscConfig+0x4cc>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007220:	f7fd fd60 	bl	8004ce4 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007228:	f7fd fd5c 	bl	8004ce4 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e026      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCC_OscConfig+0x4c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x498>
 8007246:	e01e      	b.n	8007286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e019      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
 8007254:	40021000 	.word	0x40021000
 8007258:	40007000 	.word	0x40007000
 800725c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_RCC_OscConfig+0x500>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	429a      	cmp	r2, r3
 8007272:	d106      	bne.n	8007282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d001      	beq.n	8007286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e000      	b.n	8007288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	40021000 	.word	0x40021000

08007294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0d0      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072a8:	4b6a      	ldr	r3, [pc, #424]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d910      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b6:	4b67      	ldr	r3, [pc, #412]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f023 0207 	bic.w	r2, r3, #7
 80072be:	4965      	ldr	r1, [pc, #404]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b63      	ldr	r3, [pc, #396]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0b8      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d020      	beq.n	8007326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072f0:	4b59      	ldr	r3, [pc, #356]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	4a58      	ldr	r2, [pc, #352]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 80072f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80072fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007308:	4b53      	ldr	r3, [pc, #332]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4a52      	ldr	r2, [pc, #328]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 800730e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007314:	4b50      	ldr	r3, [pc, #320]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	494d      	ldr	r1, [pc, #308]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007322:	4313      	orrs	r3, r2
 8007324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d040      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d107      	bne.n	800734a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733a:	4b47      	ldr	r3, [pc, #284]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d115      	bne.n	8007372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e07f      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d107      	bne.n	8007362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007352:	4b41      	ldr	r3, [pc, #260]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d109      	bne.n	8007372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e073      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007362:	4b3d      	ldr	r3, [pc, #244]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e06b      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007372:	4b39      	ldr	r3, [pc, #228]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f023 0203 	bic.w	r2, r3, #3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	4936      	ldr	r1, [pc, #216]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007380:	4313      	orrs	r3, r2
 8007382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007384:	f7fd fcae 	bl	8004ce4 <HAL_GetTick>
 8007388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738a:	e00a      	b.n	80073a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800738c:	f7fd fcaa 	bl	8004ce4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f241 3288 	movw	r2, #5000	; 0x1388
 800739a:	4293      	cmp	r3, r2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e053      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073a2:	4b2d      	ldr	r3, [pc, #180]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f003 020c 	and.w	r2, r3, #12
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d1eb      	bne.n	800738c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073b4:	4b27      	ldr	r3, [pc, #156]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d210      	bcs.n	80073e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f023 0207 	bic.w	r2, r3, #7
 80073ca:	4922      	ldr	r1, [pc, #136]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073d2:	4b20      	ldr	r3, [pc, #128]	; (8007454 <HAL_RCC_ClockConfig+0x1c0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d001      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e032      	b.n	800744a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	4916      	ldr	r1, [pc, #88]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	490e      	ldr	r1, [pc, #56]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 800741e:	4313      	orrs	r3, r2
 8007420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007422:	f000 f821 	bl	8007468 <HAL_RCC_GetSysClockFreq>
 8007426:	4602      	mov	r2, r0
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_RCC_ClockConfig+0x1c4>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	490a      	ldr	r1, [pc, #40]	; (800745c <HAL_RCC_ClockConfig+0x1c8>)
 8007434:	5ccb      	ldrb	r3, [r1, r3]
 8007436:	fa22 f303 	lsr.w	r3, r2, r3
 800743a:	4a09      	ldr	r2, [pc, #36]	; (8007460 <HAL_RCC_ClockConfig+0x1cc>)
 800743c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <HAL_RCC_ClockConfig+0x1d0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7fc fa2a 	bl	800389c <HAL_InitTick>

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40022000 	.word	0x40022000
 8007458:	40021000 	.word	0x40021000
 800745c:	0800e96c 	.word	0x0800e96c
 8007460:	20000200 	.word	0x20000200
 8007464:	20000204 	.word	0x20000204

08007468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
 800747a:	2300      	movs	r3, #0
 800747c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007482:	4b1e      	ldr	r3, [pc, #120]	; (80074fc <HAL_RCC_GetSysClockFreq+0x94>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 030c 	and.w	r3, r3, #12
 800748e:	2b04      	cmp	r3, #4
 8007490:	d002      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x30>
 8007492:	2b08      	cmp	r3, #8
 8007494:	d003      	beq.n	800749e <HAL_RCC_GetSysClockFreq+0x36>
 8007496:	e027      	b.n	80074e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007498:	4b19      	ldr	r3, [pc, #100]	; (8007500 <HAL_RCC_GetSysClockFreq+0x98>)
 800749a:	613b      	str	r3, [r7, #16]
      break;
 800749c:	e027      	b.n	80074ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	0c9b      	lsrs	r3, r3, #18
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	4a17      	ldr	r2, [pc, #92]	; (8007504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80074a8:	5cd3      	ldrb	r3, [r2, r3]
 80074aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d010      	beq.n	80074d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80074b6:	4b11      	ldr	r3, [pc, #68]	; (80074fc <HAL_RCC_GetSysClockFreq+0x94>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	0c5b      	lsrs	r3, r3, #17
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	4a11      	ldr	r2, [pc, #68]	; (8007508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80074c2:	5cd3      	ldrb	r3, [r2, r3]
 80074c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a0d      	ldr	r2, [pc, #52]	; (8007500 <HAL_RCC_GetSysClockFreq+0x98>)
 80074ca:	fb03 f202 	mul.w	r2, r3, r2
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e004      	b.n	80074e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a0c      	ldr	r2, [pc, #48]	; (800750c <HAL_RCC_GetSysClockFreq+0xa4>)
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	613b      	str	r3, [r7, #16]
      break;
 80074e6:	e002      	b.n	80074ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <HAL_RCC_GetSysClockFreq+0x98>)
 80074ea:	613b      	str	r3, [r7, #16]
      break;
 80074ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ee:	693b      	ldr	r3, [r7, #16]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	371c      	adds	r7, #28
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40021000 	.word	0x40021000
 8007500:	007a1200 	.word	0x007a1200
 8007504:	0800e984 	.word	0x0800e984
 8007508:	0800e994 	.word	0x0800e994
 800750c:	003d0900 	.word	0x003d0900

08007510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <HAL_RCC_GetHCLKFreq+0x10>)
 8007516:	681b      	ldr	r3, [r3, #0]
}
 8007518:	4618      	mov	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr
 8007520:	20000200 	.word	0x20000200

08007524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007528:	f7ff fff2 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 800752c:	4602      	mov	r2, r0
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	0a1b      	lsrs	r3, r3, #8
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	4903      	ldr	r1, [pc, #12]	; (8007548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800753a:	5ccb      	ldrb	r3, [r1, r3]
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007540:	4618      	mov	r0, r3
 8007542:	bd80      	pop	{r7, pc}
 8007544:	40021000 	.word	0x40021000
 8007548:	0800e97c 	.word	0x0800e97c

0800754c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007550:	f7ff ffde 	bl	8007510 <HAL_RCC_GetHCLKFreq>
 8007554:	4602      	mov	r2, r0
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	0adb      	lsrs	r3, r3, #11
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	4903      	ldr	r1, [pc, #12]	; (8007570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007562:	5ccb      	ldrb	r3, [r1, r3]
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	40021000 	.word	0x40021000
 8007570:	0800e97c 	.word	0x0800e97c

08007574 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	220f      	movs	r2, #15
 8007582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007584:	4b11      	ldr	r3, [pc, #68]	; (80075cc <HAL_RCC_GetClockConfig+0x58>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f003 0203 	and.w	r2, r3, #3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007590:	4b0e      	ldr	r3, [pc, #56]	; (80075cc <HAL_RCC_GetClockConfig+0x58>)
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HAL_RCC_GetClockConfig+0x58>)
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80075a8:	4b08      	ldr	r3, [pc, #32]	; (80075cc <HAL_RCC_GetClockConfig+0x58>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	08db      	lsrs	r3, r3, #3
 80075ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_RCC_GetClockConfig+0x5c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0207 	and.w	r2, r3, #7
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr
 80075cc:	40021000 	.word	0x40021000
 80075d0:	40022000 	.word	0x40022000

080075d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80075dc:	4b0a      	ldr	r3, [pc, #40]	; (8007608 <RCC_Delay+0x34>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a0a      	ldr	r2, [pc, #40]	; (800760c <RCC_Delay+0x38>)
 80075e2:	fba2 2303 	umull	r2, r3, r2, r3
 80075e6:	0a5b      	lsrs	r3, r3, #9
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80075f0:	bf00      	nop
  }
  while (Delay --);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	60fa      	str	r2, [r7, #12]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f9      	bne.n	80075f0 <RCC_Delay+0x1c>
}
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	bc80      	pop	{r7}
 8007606:	4770      	bx	lr
 8007608:	20000200 	.word	0x20000200
 800760c:	10624dd3 	.word	0x10624dd3

08007610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	2b00      	cmp	r3, #0
 800762a:	d07d      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007630:	4b4f      	ldr	r3, [pc, #316]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10d      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800763c:	4b4c      	ldr	r3, [pc, #304]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	4a4b      	ldr	r2, [pc, #300]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007646:	61d3      	str	r3, [r2, #28]
 8007648:	4b49      	ldr	r3, [pc, #292]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007650:	60bb      	str	r3, [r7, #8]
 8007652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007658:	4b46      	ldr	r3, [pc, #280]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d118      	bne.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007664:	4b43      	ldr	r3, [pc, #268]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a42      	ldr	r2, [pc, #264]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800766a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800766e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007670:	f7fd fb38 	bl	8004ce4 <HAL_GetTick>
 8007674:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007676:	e008      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007678:	f7fd fb34 	bl	8004ce4 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b64      	cmp	r3, #100	; 0x64
 8007684:	d901      	bls.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e06d      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768a:	4b3a      	ldr	r3, [pc, #232]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f0      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007696:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d02e      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d027      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076b4:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076be:	4b2e      	ldr	r3, [pc, #184]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076c0:	2201      	movs	r2, #1
 80076c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076c4:	4b2c      	ldr	r3, [pc, #176]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d014      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076da:	f7fd fb03 	bl	8004ce4 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076e0:	e00a      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e2:	f7fd faff 	bl	8004ce4 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e036      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f8:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0ee      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4917      	ldr	r1, [pc, #92]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007712:	4313      	orrs	r3, r2
 8007714:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d105      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4a13      	ldr	r2, [pc, #76]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	490b      	ldr	r1, [pc, #44]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007742:	4313      	orrs	r3, r2
 8007744:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	4904      	ldr	r1, [pc, #16]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007760:	4313      	orrs	r3, r2
 8007762:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3718      	adds	r7, #24
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40021000 	.word	0x40021000
 8007774:	40007000 	.word	0x40007000
 8007778:	42420440 	.word	0x42420440

0800777c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b10      	cmp	r3, #16
 800779c:	d00a      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	f200 808a 	bhi.w	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d045      	beq.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d075      	beq.n	800789e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80077b2:	e082      	b.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80077b4:	4b46      	ldr	r3, [pc, #280]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80077ba:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d07b      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	0c9b      	lsrs	r3, r3, #18
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	4a41      	ldr	r2, [pc, #260]	; (80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80077d0:	5cd3      	ldrb	r3, [r2, r3]
 80077d2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077de:	4b3c      	ldr	r3, [pc, #240]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	0c5b      	lsrs	r3, r3, #17
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	4a3b      	ldr	r2, [pc, #236]	; (80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80077ea:	5cd3      	ldrb	r3, [r2, r3]
 80077ec:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80077f8:	4a38      	ldr	r2, [pc, #224]	; (80078dc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e004      	b.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	4a34      	ldr	r2, [pc, #208]	; (80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007814:	4b2e      	ldr	r3, [pc, #184]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800781c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	61bb      	str	r3, [r7, #24]
      break;
 8007826:	e04a      	b.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	4a2d      	ldr	r2, [pc, #180]	; (80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800782e:	fba2 2303 	umull	r2, r3, r2, r3
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	61bb      	str	r3, [r7, #24]
      break;
 8007836:	e042      	b.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007848:	d108      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	e01f      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007866:	d109      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007868:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007874:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e00f      	b.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007886:	d11c      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007888:	4b11      	ldr	r3, [pc, #68]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d016      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007894:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007898:	61bb      	str	r3, [r7, #24]
      break;
 800789a:	e012      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800789c:	e011      	b.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800789e:	f7ff fe55 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 80078a2:	4602      	mov	r2, r0
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	0b9b      	lsrs	r3, r3, #14
 80078aa:	f003 0303 	and.w	r3, r3, #3
 80078ae:	3301      	adds	r3, #1
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b6:	61bb      	str	r3, [r7, #24]
      break;
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80078ba:	bf00      	nop
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80078be:	bf00      	nop
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80078c2:	bf00      	nop
    }
  }
  return (frequency);
 80078c4:	69bb      	ldr	r3, [r7, #24]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	40021000 	.word	0x40021000
 80078d4:	0800e998 	.word	0x0800e998
 80078d8:	0800e9a8 	.word	0x0800e9a8
 80078dc:	007a1200 	.word	0x007a1200
 80078e0:	003d0900 	.word	0x003d0900
 80078e4:	aaaaaaab 	.word	0xaaaaaaab

080078e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e07a      	b.n	80079f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	7c5b      	ldrb	r3, [r3, #17]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d105      	bne.n	8007914 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fb fdda 	bl	80034c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9be 	bl	8007c9c <HAL_RTC_WaitForSynchro>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e061      	b.n	80079f4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fa77 	bl	8007e24 <RTC_EnterInitMode>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d004      	beq.n	8007946 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2204      	movs	r2, #4
 8007940:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e056      	b.n	80079f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0207 	bic.w	r2, r2, #7
 8007954:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d005      	beq.n	800796a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800795e:	4b27      	ldr	r3, [pc, #156]	; (80079fc <HAL_RTC_Init+0x114>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	4a26      	ldr	r2, [pc, #152]	; (80079fc <HAL_RTC_Init+0x114>)
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800796a:	4b24      	ldr	r3, [pc, #144]	; (80079fc <HAL_RTC_Init+0x114>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4921      	ldr	r1, [pc, #132]	; (80079fc <HAL_RTC_Init+0x114>)
 8007978:	4313      	orrs	r3, r2
 800797a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007984:	d003      	beq.n	800798e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e00e      	b.n	80079ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800798e:	2001      	movs	r0, #1
 8007990:	f7ff fef4 	bl	800777c <HAL_RCCEx_GetPeriphCLKFreq>
 8007994:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2204      	movs	r2, #4
 80079a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e026      	b.n	80079f4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	0c1a      	lsrs	r2, r3, #16
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f002 020f 	and.w	r2, r2, #15
 80079b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	b292      	uxth	r2, r2
 80079c2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa55 	bl	8007e74 <RTC_ExitInitMode>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2204      	movs	r2, #4
 80079d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e00c      	b.n	80079f4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80079f2:	2300      	movs	r3, #0
  }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40006c00 	.word	0x40006c00

08007a00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a00:	b590      	push	{r4, r7, lr}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	2300      	movs	r3, #0
 8007a12:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <HAL_RTC_SetTime+0x20>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e080      	b.n	8007b26 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	7c1b      	ldrb	r3, [r3, #16]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_RTC_SetTime+0x30>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e07a      	b.n	8007b26 <HAL_RTC_SetTime+0x126>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d113      	bne.n	8007a6a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007a4c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	785b      	ldrb	r3, [r3, #1]
 8007a54:	4619      	mov	r1, r3
 8007a56:	460b      	mov	r3, r1
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007a5e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007a64:	4413      	add	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e01e      	b.n	8007aa8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fa28 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007a74:	4603      	mov	r3, r0
 8007a76:	461a      	mov	r2, r3
 8007a78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007a7c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 fa1d 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4613      	mov	r3, r2
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	1a9b      	subs	r3, r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007a96:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	789b      	ldrb	r3, [r3, #2]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fa11 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007aa2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007aa4:	4423      	add	r3, r4
 8007aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f953 	bl	8007d56 <RTC_WriteTimeCounter>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d007      	beq.n	8007ac6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2204      	movs	r2, #4
 8007aba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e02f      	b.n	8007b26 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0205 	bic.w	r2, r2, #5
 8007ad4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f000 f964 	bl	8007da4 <RTC_ReadAlarmCounter>
 8007adc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae4:	d018      	beq.n	8007b18 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d214      	bcs.n	8007b18 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007af4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007af8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007afa:	6939      	ldr	r1, [r7, #16]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 f96a 	bl	8007dd6 <RTC_WriteAlarmCounter>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2204      	movs	r2, #4
 8007b0c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e006      	b.n	8007b26 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007b24:	2300      	movs	r3, #0
  }
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd90      	pop	{r4, r7, pc}
	...

08007b30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <HAL_RTC_SetDate+0x24>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e097      	b.n	8007c88 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	7c1b      	ldrb	r3, [r3, #16]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d101      	bne.n	8007b64 <HAL_RTC_SetDate+0x34>
 8007b60:	2302      	movs	r3, #2
 8007b62:	e091      	b.n	8007c88 <HAL_RTC_SetDate+0x158>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10c      	bne.n	8007b90 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	78da      	ldrb	r2, [r3, #3]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	785a      	ldrb	r2, [r3, #1]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	789a      	ldrb	r2, [r3, #2]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	739a      	strb	r2, [r3, #14]
 8007b8e:	e01a      	b.n	8007bc6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	78db      	ldrb	r3, [r3, #3]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f995 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f98c 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	789b      	ldrb	r3, [r3, #2]
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 f983 	bl	8007ec4 <RTC_Bcd2ToByte>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	7bdb      	ldrb	r3, [r3, #15]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	7b59      	ldrb	r1, [r3, #13]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	7b9b      	ldrb	r3, [r3, #14]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f000 f993 	bl	8007f00 <RTC_WeekDayNum>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	461a      	mov	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	7b1a      	ldrb	r2, [r3, #12]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 f883 	bl	8007cf6 <RTC_ReadTimeCounter>
 8007bf0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4a26      	ldr	r2, [pc, #152]	; (8007c90 <HAL_RTC_SetDate+0x160>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	0adb      	lsrs	r3, r3, #11
 8007bfc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b18      	cmp	r3, #24
 8007c02:	d93a      	bls.n	8007c7a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	4a23      	ldr	r2, [pc, #140]	; (8007c94 <HAL_RTC_SetDate+0x164>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	091b      	lsrs	r3, r3, #4
 8007c0e:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <HAL_RTC_SetDate+0x168>)
 8007c10:	fb02 f303 	mul.w	r3, r2, r3
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007c1a:	69f9      	ldr	r1, [r7, #28]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f89a 	bl	8007d56 <RTC_WriteTimeCounter>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e027      	b.n	8007c88 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f8b3 	bl	8007da4 <RTC_ReadAlarmCounter>
 8007c3e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c46:	d018      	beq.n	8007c7a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d214      	bcs.n	8007c7a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007c56:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007c5a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f8b9 	bl	8007dd6 <RTC_WriteAlarmCounter>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d007      	beq.n	8007c7a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e006      	b.n	8007c88 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	91a2b3c5 	.word	0x91a2b3c5
 8007c94:	aaaaaaab 	.word	0xaaaaaaab
 8007c98:	00015180 	.word	0x00015180

08007c9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e01d      	b.n	8007cee <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	685a      	ldr	r2, [r3, #4]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0208 	bic.w	r2, r2, #8
 8007cc0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007cc2:	f7fd f80f 	bl	8004ce4 <HAL_GetTick>
 8007cc6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007cc8:	e009      	b.n	8007cde <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007cca:	f7fd f80b 	bl	8004ce4 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cd8:	d901      	bls.n	8007cde <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e007      	b.n	8007cee <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 0308 	and.w	r3, r3, #8
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0ee      	beq.n	8007cca <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b087      	sub	sp, #28
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	827b      	strh	r3, [r7, #18]
 8007d02:	2300      	movs	r3, #0
 8007d04:	823b      	strh	r3, [r7, #16]
 8007d06:	2300      	movs	r3, #0
 8007d08:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007d26:	8a7a      	ldrh	r2, [r7, #18]
 8007d28:	8a3b      	ldrh	r3, [r7, #16]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d008      	beq.n	8007d40 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007d2e:	8a3b      	ldrh	r3, [r7, #16]
 8007d30:	041a      	lsls	r2, r3, #16
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	e004      	b.n	8007d4a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007d40:	8a7b      	ldrh	r3, [r7, #18]
 8007d42:	041a      	lsls	r2, r3, #16
 8007d44:	89fb      	ldrh	r3, [r7, #14]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007d4a:	697b      	ldr	r3, [r7, #20]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f85d 	bl	8007e24 <RTC_EnterInitMode>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	73fb      	strb	r3, [r7, #15]
 8007d74:	e011      	b.n	8007d9a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	0c12      	lsrs	r2, r2, #16
 8007d7e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	b292      	uxth	r2, r2
 8007d88:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f872 	bl	8007e74 <RTC_ExitInitMode>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	81fb      	strh	r3, [r7, #14]
 8007db0:	2300      	movs	r3, #0
 8007db2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	041a      	lsls	r2, r3, #16
 8007dc8:	89bb      	ldrh	r3, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f81d 	bl	8007e24 <RTC_EnterInitMode>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d002      	beq.n	8007df6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	e011      	b.n	8007e1a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	0c12      	lsrs	r2, r2, #16
 8007dfe:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	b292      	uxth	r2, r2
 8007e08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f832 	bl	8007e74 <RTC_ExitInitMode>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007e30:	f7fc ff58 	bl	8004ce4 <HAL_GetTick>
 8007e34:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007e36:	e009      	b.n	8007e4c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007e38:	f7fc ff54 	bl	8004ce4 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e46:	d901      	bls.n	8007e4c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e00f      	b.n	8007e6c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0ee      	beq.n	8007e38 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0210 	orr.w	r2, r2, #16
 8007e68:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0210 	bic.w	r2, r2, #16
 8007e8e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007e90:	f7fc ff28 	bl	8004ce4 <HAL_GetTick>
 8007e94:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007e96:	e009      	b.n	8007eac <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007e98:	f7fc ff24 	bl	8004ce4 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ea6:	d901      	bls.n	8007eac <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e007      	b.n	8007ebc <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f003 0320 	and.w	r3, r3, #32
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0ee      	beq.n	8007e98 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	091b      	lsrs	r3, r3, #4
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	4413      	add	r3, r2
 8007ef2:	b2db      	uxtb	r3, r3
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bc80      	pop	{r7}
 8007efc:	4770      	bx	lr
	...

08007f00 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007f1e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d82d      	bhi.n	8007f82 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007f26:	78fa      	ldrb	r2, [r7, #3]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4413      	add	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	1a9b      	subs	r3, r3, r2
 8007f32:	4a2c      	ldr	r2, [pc, #176]	; (8007fe4 <RTC_WeekDayNum+0xe4>)
 8007f34:	fba2 2303 	umull	r2, r3, r2, r3
 8007f38:	085a      	lsrs	r2, r3, #1
 8007f3a:	78bb      	ldrb	r3, [r7, #2]
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	441a      	add	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	089b      	lsrs	r3, r3, #2
 8007f48:	441a      	add	r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4926      	ldr	r1, [pc, #152]	; (8007fe8 <RTC_WeekDayNum+0xe8>)
 8007f50:	fba1 1303 	umull	r1, r3, r1, r3
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	4922      	ldr	r1, [pc, #136]	; (8007fe8 <RTC_WeekDayNum+0xe8>)
 8007f5e:	fba1 1303 	umull	r1, r3, r1, r3
 8007f62:	09db      	lsrs	r3, r3, #7
 8007f64:	4413      	add	r3, r2
 8007f66:	1d1a      	adds	r2, r3, #4
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <RTC_WeekDayNum+0xec>)
 8007f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8007f6e:	1ad1      	subs	r1, r2, r3
 8007f70:	0849      	lsrs	r1, r1, #1
 8007f72:	440b      	add	r3, r1
 8007f74:	0899      	lsrs	r1, r3, #2
 8007f76:	460b      	mov	r3, r1
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	1a5b      	subs	r3, r3, r1
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e029      	b.n	8007fd6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007f82:	78fa      	ldrb	r2, [r7, #3]
 8007f84:	4613      	mov	r3, r2
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <RTC_WeekDayNum+0xe4>)
 8007f90:	fba2 2303 	umull	r2, r3, r2, r3
 8007f94:	085a      	lsrs	r2, r3, #1
 8007f96:	78bb      	ldrb	r3, [r7, #2]
 8007f98:	441a      	add	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	089b      	lsrs	r3, r3, #2
 8007fa2:	441a      	add	r2, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4910      	ldr	r1, [pc, #64]	; (8007fe8 <RTC_WeekDayNum+0xe8>)
 8007fa8:	fba1 1303 	umull	r1, r3, r1, r3
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	490d      	ldr	r1, [pc, #52]	; (8007fe8 <RTC_WeekDayNum+0xe8>)
 8007fb4:	fba1 1303 	umull	r1, r3, r1, r3
 8007fb8:	09db      	lsrs	r3, r3, #7
 8007fba:	4413      	add	r3, r2
 8007fbc:	1c9a      	adds	r2, r3, #2
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <RTC_WeekDayNum+0xec>)
 8007fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fc4:	1ad1      	subs	r1, r2, r3
 8007fc6:	0849      	lsrs	r1, r1, #1
 8007fc8:	440b      	add	r3, r1
 8007fca:	0899      	lsrs	r1, r3, #2
 8007fcc:	460b      	mov	r3, r1
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	1a5b      	subs	r3, r3, r1
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	b2db      	uxtb	r3, r3
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr
 8007fe4:	38e38e39 	.word	0x38e38e39
 8007fe8:	51eb851f 	.word	0x51eb851f
 8007fec:	24924925 	.word	0x24924925

08007ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e041      	b.n	8008086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fb fa7a 	bl	8003510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3304      	adds	r3, #4
 800802c:	4619      	mov	r1, r3
 800802e:	4610      	mov	r0, r2
 8008030:	f000 fc94 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e03a      	b.n	800811e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a18      	ldr	r2, [pc, #96]	; (8008128 <HAL_TIM_Base_Start_IT+0x98>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00e      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d2:	d009      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a14      	ldr	r2, [pc, #80]	; (800812c <HAL_TIM_Base_Start_IT+0x9c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d004      	beq.n	80080e8 <HAL_TIM_Base_Start_IT+0x58>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a13      	ldr	r2, [pc, #76]	; (8008130 <HAL_TIM_Base_Start_IT+0xa0>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d111      	bne.n	800810c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d010      	beq.n	800811c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f042 0201 	orr.w	r2, r2, #1
 8008108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	e007      	b.n	800811c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800

08008134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d101      	bne.n	8008146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e041      	b.n	80081ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f839 	bl	80081d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3304      	adds	r3, #4
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f000 fbf2 	bl	800895c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr

080081e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <HAL_TIM_PWM_Start+0x24>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	e022      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b04      	cmp	r3, #4
 800820c:	d109      	bne.n	8008222 <HAL_TIM_PWM_Start+0x3e>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b01      	cmp	r3, #1
 8008218:	bf14      	ite	ne
 800821a:	2301      	movne	r3, #1
 800821c:	2300      	moveq	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	e015      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d109      	bne.n	800823c <HAL_TIM_PWM_Start+0x58>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b01      	cmp	r3, #1
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	e008      	b.n	800824e <HAL_TIM_PWM_Start+0x6a>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	bf14      	ite	ne
 8008248:	2301      	movne	r3, #1
 800824a:	2300      	moveq	r3, #0
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e05e      	b.n	8008314 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <HAL_TIM_PWM_Start+0x82>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008264:	e013      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b04      	cmp	r3, #4
 800826a:	d104      	bne.n	8008276 <HAL_TIM_PWM_Start+0x92>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2202      	movs	r2, #2
 8008270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008274:	e00b      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b08      	cmp	r3, #8
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0xa2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008284:	e003      	b.n	800828e <HAL_TIM_PWM_Start+0xaa>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2202      	movs	r2, #2
 800828a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	2201      	movs	r2, #1
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fde0 	bl	8008e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1e      	ldr	r2, [pc, #120]	; (800831c <HAL_TIM_PWM_Start+0x138>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a18      	ldr	r2, [pc, #96]	; (800831c <HAL_TIM_PWM_Start+0x138>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d00e      	beq.n	80082de <HAL_TIM_PWM_Start+0xfa>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c8:	d009      	beq.n	80082de <HAL_TIM_PWM_Start+0xfa>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a14      	ldr	r2, [pc, #80]	; (8008320 <HAL_TIM_PWM_Start+0x13c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d004      	beq.n	80082de <HAL_TIM_PWM_Start+0xfa>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a12      	ldr	r2, [pc, #72]	; (8008324 <HAL_TIM_PWM_Start+0x140>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d111      	bne.n	8008302 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b06      	cmp	r3, #6
 80082ee:	d010      	beq.n	8008312 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0201 	orr.w	r2, r2, #1
 80082fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008300:	e007      	b.n	8008312 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0201 	orr.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	40012c00 	.word	0x40012c00
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800

08008328 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fd8e 	bl	8008e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <HAL_TIM_PWM_Stop+0xc4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d117      	bne.n	800837a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a1a      	ldr	r2, [r3, #32]
 8008350:	f241 1311 	movw	r3, #4369	; 0x1111
 8008354:	4013      	ands	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10f      	bne.n	800837a <HAL_TIM_PWM_Stop+0x52>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6a1a      	ldr	r2, [r3, #32]
 8008360:	f240 4344 	movw	r3, #1092	; 0x444
 8008364:	4013      	ands	r3, r2
 8008366:	2b00      	cmp	r3, #0
 8008368:	d107      	bne.n	800837a <HAL_TIM_PWM_Stop+0x52>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008378:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6a1a      	ldr	r2, [r3, #32]
 8008380:	f241 1311 	movw	r3, #4369	; 0x1111
 8008384:	4013      	ands	r3, r2
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10f      	bne.n	80083aa <HAL_TIM_PWM_Stop+0x82>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6a1a      	ldr	r2, [r3, #32]
 8008390:	f240 4344 	movw	r3, #1092	; 0x444
 8008394:	4013      	ands	r3, r2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d107      	bne.n	80083aa <HAL_TIM_PWM_Stop+0x82>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f022 0201 	bic.w	r2, r2, #1
 80083a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d104      	bne.n	80083ba <HAL_TIM_PWM_Stop+0x92>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b8:	e013      	b.n	80083e2 <HAL_TIM_PWM_Stop+0xba>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d104      	bne.n	80083ca <HAL_TIM_PWM_Stop+0xa2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c8:	e00b      	b.n	80083e2 <HAL_TIM_PWM_Stop+0xba>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d104      	bne.n	80083da <HAL_TIM_PWM_Stop+0xb2>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d8:	e003      	b.n	80083e2 <HAL_TIM_PWM_Stop+0xba>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40012c00 	.word	0x40012c00

080083f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b02      	cmp	r3, #2
 8008404:	d122      	bne.n	800844c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	f003 0302 	and.w	r3, r3, #2
 8008410:	2b02      	cmp	r3, #2
 8008412:	d11b      	bne.n	800844c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f06f 0202 	mvn.w	r2, #2
 800841c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa76 	bl	8008924 <HAL_TIM_IC_CaptureCallback>
 8008438:	e005      	b.n	8008446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa69 	bl	8008912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fa78 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0304 	and.w	r3, r3, #4
 8008456:	2b04      	cmp	r3, #4
 8008458:	d122      	bne.n	80084a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b04      	cmp	r3, #4
 8008466:	d11b      	bne.n	80084a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f06f 0204 	mvn.w	r2, #4
 8008470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2202      	movs	r2, #2
 8008476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa4c 	bl	8008924 <HAL_TIM_IC_CaptureCallback>
 800848c:	e005      	b.n	800849a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa3f 	bl	8008912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 fa4e 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	f003 0308 	and.w	r3, r3, #8
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d122      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d11b      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f06f 0208 	mvn.w	r2, #8
 80084c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2204      	movs	r2, #4
 80084ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f003 0303 	and.w	r3, r3, #3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fa22 	bl	8008924 <HAL_TIM_IC_CaptureCallback>
 80084e0:	e005      	b.n	80084ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa15 	bl	8008912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fa24 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b10      	cmp	r3, #16
 8008500:	d122      	bne.n	8008548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b10      	cmp	r3, #16
 800850e:	d11b      	bne.n	8008548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f06f 0210 	mvn.w	r2, #16
 8008518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2208      	movs	r2, #8
 800851e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69db      	ldr	r3, [r3, #28]
 8008526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f9f8 	bl	8008924 <HAL_TIM_IC_CaptureCallback>
 8008534:	e005      	b.n	8008542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f9eb 	bl	8008912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f9fa 	bl	8008936 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10e      	bne.n	8008574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f003 0301 	and.w	r3, r3, #1
 8008560:	2b01      	cmp	r3, #1
 8008562:	d107      	bne.n	8008574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f06f 0201 	mvn.w	r2, #1
 800856c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fa fb8c 	bl	8002c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857e:	2b80      	cmp	r3, #128	; 0x80
 8008580:	d10e      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858c:	2b80      	cmp	r3, #128	; 0x80
 800858e:	d107      	bne.n	80085a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fce9 	bl	8008f72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085aa:	2b40      	cmp	r3, #64	; 0x40
 80085ac:	d10e      	bne.n	80085cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b8:	2b40      	cmp	r3, #64	; 0x40
 80085ba:	d107      	bne.n	80085cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f9be 	bl	8008948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b20      	cmp	r3, #32
 80085d8:	d10e      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d107      	bne.n	80085f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f06f 0220 	mvn.w	r2, #32
 80085f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fcb4 	bl	8008f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800861a:	2302      	movs	r3, #2
 800861c:	e0ae      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b0c      	cmp	r3, #12
 800862a:	f200 809f 	bhi.w	800876c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008669 	.word	0x08008669
 8008638:	0800876d 	.word	0x0800876d
 800863c:	0800876d 	.word	0x0800876d
 8008640:	0800876d 	.word	0x0800876d
 8008644:	080086a9 	.word	0x080086a9
 8008648:	0800876d 	.word	0x0800876d
 800864c:	0800876d 	.word	0x0800876d
 8008650:	0800876d 	.word	0x0800876d
 8008654:	080086eb 	.word	0x080086eb
 8008658:	0800876d 	.word	0x0800876d
 800865c:	0800876d 	.word	0x0800876d
 8008660:	0800876d 	.word	0x0800876d
 8008664:	0800872b 	.word	0x0800872b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f9d6 	bl	8008a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0208 	orr.w	r2, r2, #8
 8008682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0204 	bic.w	r2, r2, #4
 8008692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6999      	ldr	r1, [r3, #24]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691a      	ldr	r2, [r3, #16]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	619a      	str	r2, [r3, #24]
      break;
 80086a6:	e064      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fa1c 	bl	8008aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6999      	ldr	r1, [r3, #24]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	021a      	lsls	r2, r3, #8
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	619a      	str	r2, [r3, #24]
      break;
 80086e8:	e043      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fa65 	bl	8008bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0208 	orr.w	r2, r2, #8
 8008704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0204 	bic.w	r2, r2, #4
 8008714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69d9      	ldr	r1, [r3, #28]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	61da      	str	r2, [r3, #28]
      break;
 8008728:	e023      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 faaf 	bl	8008c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69d9      	ldr	r1, [r3, #28]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	021a      	lsls	r2, r3, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	61da      	str	r2, [r3, #28]
      break;
 800876a:	e002      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
      break;
 8008770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_TIM_ConfigClockSource+0x1c>
 800879c:	2302      	movs	r3, #2
 800879e:	e0b4      	b.n	800890a <HAL_TIM_ConfigClockSource+0x186>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80087be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d8:	d03e      	beq.n	8008858 <HAL_TIM_ConfigClockSource+0xd4>
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	f200 8087 	bhi.w	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 80087e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e6:	f000 8086 	beq.w	80088f6 <HAL_TIM_ConfigClockSource+0x172>
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ee:	d87f      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 80087f0:	2b70      	cmp	r3, #112	; 0x70
 80087f2:	d01a      	beq.n	800882a <HAL_TIM_ConfigClockSource+0xa6>
 80087f4:	2b70      	cmp	r3, #112	; 0x70
 80087f6:	d87b      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 80087f8:	2b60      	cmp	r3, #96	; 0x60
 80087fa:	d050      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x11a>
 80087fc:	2b60      	cmp	r3, #96	; 0x60
 80087fe:	d877      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008800:	2b50      	cmp	r3, #80	; 0x50
 8008802:	d03c      	beq.n	800887e <HAL_TIM_ConfigClockSource+0xfa>
 8008804:	2b50      	cmp	r3, #80	; 0x50
 8008806:	d873      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	d058      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x13a>
 800880c:	2b40      	cmp	r3, #64	; 0x40
 800880e:	d86f      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008810:	2b30      	cmp	r3, #48	; 0x30
 8008812:	d064      	beq.n	80088de <HAL_TIM_ConfigClockSource+0x15a>
 8008814:	2b30      	cmp	r3, #48	; 0x30
 8008816:	d86b      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008818:	2b20      	cmp	r3, #32
 800881a:	d060      	beq.n	80088de <HAL_TIM_ConfigClockSource+0x15a>
 800881c:	2b20      	cmp	r3, #32
 800881e:	d867      	bhi.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d05c      	beq.n	80088de <HAL_TIM_ConfigClockSource+0x15a>
 8008824:	2b10      	cmp	r3, #16
 8008826:	d05a      	beq.n	80088de <HAL_TIM_ConfigClockSource+0x15a>
 8008828:	e062      	b.n	80088f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800883a:	f000 faf0 	bl	8008e1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800884c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	609a      	str	r2, [r3, #8]
      break;
 8008856:	e04f      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008868:	f000 fad9 	bl	8008e1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800887a:	609a      	str	r2, [r3, #8]
      break;
 800887c:	e03c      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800888a:	461a      	mov	r2, r3
 800888c:	f000 fa50 	bl	8008d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2150      	movs	r1, #80	; 0x50
 8008896:	4618      	mov	r0, r3
 8008898:	f000 faa7 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 800889c:	e02c      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088aa:	461a      	mov	r2, r3
 80088ac:	f000 fa6e 	bl	8008d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2160      	movs	r1, #96	; 0x60
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fa97 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80088bc:	e01c      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088ca:	461a      	mov	r2, r3
 80088cc:	f000 fa30 	bl	8008d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fa87 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80088dc:	e00c      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4619      	mov	r1, r3
 80088e8:	4610      	mov	r0, r2
 80088ea:	f000 fa7e 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 80088ee:	e003      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	73fb      	strb	r3, [r7, #15]
      break;
 80088f4:	e000      	b.n	80088f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	bc80      	pop	{r7}
 8008922:	4770      	bx	lr

08008924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800892c:	bf00      	nop
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	bc80      	pop	{r7}
 8008934:	4770      	bx	lr

08008936 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	bc80      	pop	{r7}
 8008946:	4770      	bx	lr

08008948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	bc80      	pop	{r7}
 8008958:	4770      	bx	lr
	...

0800895c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <TIM_Base_SetConfig+0xb8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d00b      	beq.n	800898c <TIM_Base_SetConfig+0x30>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800897a:	d007      	beq.n	800898c <TIM_Base_SetConfig+0x30>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a26      	ldr	r2, [pc, #152]	; (8008a18 <TIM_Base_SetConfig+0xbc>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_Base_SetConfig+0x30>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a25      	ldr	r2, [pc, #148]	; (8008a1c <TIM_Base_SetConfig+0xc0>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d108      	bne.n	800899e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a1c      	ldr	r2, [pc, #112]	; (8008a14 <TIM_Base_SetConfig+0xb8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00b      	beq.n	80089be <TIM_Base_SetConfig+0x62>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ac:	d007      	beq.n	80089be <TIM_Base_SetConfig+0x62>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <TIM_Base_SetConfig+0xbc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d003      	beq.n	80089be <TIM_Base_SetConfig+0x62>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <TIM_Base_SetConfig+0xc0>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d108      	bne.n	80089d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	4313      	orrs	r3, r2
 80089dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a07      	ldr	r2, [pc, #28]	; (8008a14 <TIM_Base_SetConfig+0xb8>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d103      	bne.n	8008a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	691a      	ldr	r2, [r3, #16]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	615a      	str	r2, [r3, #20]
}
 8008a0a:	bf00      	nop
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800

08008a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f023 0201 	bic.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f023 0302 	bic.w	r3, r3, #2
 8008a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1c      	ldr	r2, [pc, #112]	; (8008ae8 <TIM_OC1_SetConfig+0xc8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d10c      	bne.n	8008a96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f023 0308 	bic.w	r3, r3, #8
 8008a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f023 0304 	bic.w	r3, r3, #4
 8008a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a13      	ldr	r2, [pc, #76]	; (8008ae8 <TIM_OC1_SetConfig+0xc8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d111      	bne.n	8008ac2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	621a      	str	r2, [r3, #32]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40012c00 	.word	0x40012c00

08008aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f023 0210 	bic.w	r2, r3, #16
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f023 0320 	bic.w	r3, r3, #32
 8008b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	011b      	lsls	r3, r3, #4
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a1d      	ldr	r2, [pc, #116]	; (8008bbc <TIM_OC2_SetConfig+0xd0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d10d      	bne.n	8008b68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	011b      	lsls	r3, r3, #4
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <TIM_OC2_SetConfig+0xd0>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d113      	bne.n	8008b98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	697a      	ldr	r2, [r7, #20]
 8008bb0:	621a      	str	r2, [r3, #32]
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr
 8008bbc:	40012c00 	.word	0x40012c00

08008bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1d      	ldr	r2, [pc, #116]	; (8008c90 <TIM_OC3_SetConfig+0xd0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d10d      	bne.n	8008c3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	; (8008c90 <TIM_OC3_SetConfig+0xd0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d113      	bne.n	8008c6a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	011b      	lsls	r3, r3, #4
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	621a      	str	r2, [r3, #32]
}
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bc80      	pop	{r7}
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	40012c00 	.word	0x40012c00

08008c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	031b      	lsls	r3, r3, #12
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a0f      	ldr	r2, [pc, #60]	; (8008d2c <TIM_OC4_SetConfig+0x98>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d109      	bne.n	8008d08 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	019b      	lsls	r3, r3, #6
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	621a      	str	r2, [r3, #32]
}
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr
 8008d2c:	40012c00 	.word	0x40012c00

08008d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
 8008d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f023 0201 	bic.w	r2, r3, #1
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	f023 030a 	bic.w	r3, r3, #10
 8008d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	621a      	str	r2, [r3, #32]
}
 8008d82:	bf00      	nop
 8008d84:	371c      	adds	r7, #28
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f023 0210 	bic.w	r2, r3, #16
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	031b      	lsls	r3, r3, #12
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	011b      	lsls	r3, r3, #4
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	621a      	str	r2, [r3, #32]
}
 8008de0:	bf00      	nop
 8008de2:	371c      	adds	r7, #28
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr

08008dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f043 0307 	orr.w	r3, r3, #7
 8008e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	609a      	str	r2, [r3, #8]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr

08008e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b087      	sub	sp, #28
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	021a      	lsls	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	431a      	orrs	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	609a      	str	r2, [r3, #8]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr

08008e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	2201      	movs	r2, #1
 8008e70:	fa02 f303 	lsl.w	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6a1a      	ldr	r2, [r3, #32]
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	401a      	ands	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 031f 	and.w	r3, r3, #31
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	fa01 f303 	lsl.w	r3, r1, r3
 8008e94:	431a      	orrs	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr

08008ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e046      	b.n	8008f4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a16      	ldr	r2, [pc, #88]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d00e      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f08:	d009      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a12      	ldr	r2, [pc, #72]	; (8008f58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a10      	ldr	r2, [pc, #64]	; (8008f5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10c      	bne.n	8008f38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr
 8008f54:	40012c00 	.word	0x40012c00
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800

08008f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bc80      	pop	{r7}
 8008f70:	4770      	bx	lr

08008f72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr

08008f84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e042      	b.n	800901c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7fa fb52 	bl	8003654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2224      	movs	r2, #36	; 0x24
 8008fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	68da      	ldr	r2, [r3, #12]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f001 f941 	bl	800a250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	695a      	ldr	r2, [r3, #20]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ffc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e024      	b.n	8009080 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2224      	movs	r2, #36	; 0x24
 800903a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800904c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fa fbe4 	bl	800381c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	; 0x28
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	603b      	str	r3, [r7, #0]
 8009094:	4613      	mov	r3, r2
 8009096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009098:	2300      	movs	r3, #0
 800909a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d16d      	bne.n	8009184 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_UART_Transmit+0x2c>
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e066      	b.n	8009186 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2221      	movs	r2, #33	; 0x21
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090c6:	f7fb fe0d 	bl	8004ce4 <HAL_GetTick>
 80090ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	88fa      	ldrh	r2, [r7, #6]
 80090d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	88fa      	ldrh	r2, [r7, #6]
 80090d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e0:	d108      	bne.n	80090f4 <HAL_UART_Transmit+0x6c>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	61bb      	str	r3, [r7, #24]
 80090f2:	e003      	b.n	80090fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80090fc:	e02a      	b.n	8009154 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	2180      	movs	r1, #128	; 0x80
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 fd77 	bl	8009bfc <UART_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e036      	b.n	8009186 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10b      	bne.n	8009136 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800912c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	3302      	adds	r3, #2
 8009132:	61bb      	str	r3, [r7, #24]
 8009134:	e007      	b.n	8009146 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	781a      	ldrb	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	3301      	adds	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009158:	b29b      	uxth	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1cf      	bne.n	80090fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2200      	movs	r2, #0
 8009166:	2140      	movs	r1, #64	; 0x40
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fd47 	bl	8009bfc <UART_WaitOnFlagUntilTimeout>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009174:	2303      	movs	r3, #3
 8009176:	e006      	b.n	8009186 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2220      	movs	r2, #32
 800917c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	e000      	b.n	8009186 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009184:	2302      	movs	r3, #2
  }
}
 8009186:	4618      	mov	r0, r3
 8009188:	3720      	adds	r7, #32
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	4613      	mov	r3, r2
 800919a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d121      	bne.n	80091ec <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <HAL_UART_Transmit_IT+0x26>
 80091ae:	88fb      	ldrh	r3, [r7, #6]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e01a      	b.n	80091ee <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2221      	movs	r2, #33	; 0x21
 80091d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e000      	b.n	80091ee <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80091ec:	2302      	movs	r3, #2
  }
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b20      	cmp	r3, #32
 8009210:	d112      	bne.n	8009238 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <HAL_UART_Receive_DMA+0x26>
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d101      	bne.n	8009222 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e00b      	b.n	800923a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009228:	88fb      	ldrh	r3, [r7, #6]
 800922a:	461a      	mov	r2, r3
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 fd52 	bl	8009cd8 <UART_Start_Receive_DMA>
 8009234:	4603      	mov	r3, r0
 8009236:	e000      	b.n	800923a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009238:	2302      	movs	r3, #2
  }
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b0a2      	sub	sp, #136	; 0x88
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800924c:	2301      	movs	r3, #1
 800924e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009264:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8009268:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009276:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009278:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800927c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800927e:	e841 2300 	strex	r3, r2, [r1]
 8009282:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1e3      	bne.n	8009252 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3314      	adds	r3, #20
 8009290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800929a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3314      	adds	r3, #20
 80092a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80092ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e5      	bne.n	800928a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d119      	bne.n	80092fa <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	330c      	adds	r3, #12
 80092cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	f023 0310 	bic.w	r3, r3, #16
 80092dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	330c      	adds	r3, #12
 80092e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092e6:	647a      	str	r2, [r7, #68]	; 0x44
 80092e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092ee:	e841 2300 	strex	r3, r2, [r1]
 80092f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1e5      	bne.n	80092c6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00f      	beq.n	8009322 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	4a53      	ldr	r2, [pc, #332]	; (8009464 <HAL_UART_Abort_IT+0x220>)
 8009316:	635a      	str	r2, [r3, #52]	; 0x34
 8009318:	e003      	b.n	8009322 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	2200      	movs	r2, #0
 8009320:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00f      	beq.n	800934a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933c:	4a4a      	ldr	r2, [pc, #296]	; (8009468 <HAL_UART_Abort_IT+0x224>)
 800933e:	635a      	str	r2, [r3, #52]	; 0x34
 8009340:	e003      	b.n	800934a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	2200      	movs	r2, #0
 8009348:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009354:	2b00      	cmp	r3, #0
 8009356:	d02d      	beq.n	80093b4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	623b      	str	r3, [r7, #32]
   return(result);
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800936e:	677b      	str	r3, [r7, #116]	; 0x74
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009378:	633a      	str	r2, [r7, #48]	; 0x30
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800937e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009380:	e841 2300 	strex	r3, r2, [r1]
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1e5      	bne.n	8009358 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00f      	beq.n	80093b4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	4618      	mov	r0, r3
 800939a:	f7fc faf7 	bl	800598c <HAL_DMA_Abort_IT>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d004      	beq.n	80093ae <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	2200      	movs	r2, #0
 80093aa:	635a      	str	r2, [r3, #52]	; 0x34
 80093ac:	e002      	b.n	80093b4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d030      	beq.n	8009424 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3314      	adds	r3, #20
 80093c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	e853 3f00 	ldrex	r3, [r3]
 80093d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093d8:	673b      	str	r3, [r7, #112]	; 0x70
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093e2:	61fa      	str	r2, [r7, #28]
 80093e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	69b9      	ldr	r1, [r7, #24]
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	617b      	str	r3, [r7, #20]
   return(result);
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e5      	bne.n	80093c2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d012      	beq.n	8009424 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	4618      	mov	r0, r3
 8009404:	f7fc fac2 	bl	800598c <HAL_DMA_Abort_IT>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d007      	beq.n	800941e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009412:	2200      	movs	r2, #0
 8009414:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 8009416:	2301      	movs	r3, #1
 8009418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800941c:	e002      	b.n	8009424 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 800941e:	2300      	movs	r3, #0
 8009420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8009424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009428:	2b01      	cmp	r3, #1
 800942a:	d116      	bne.n	800945a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fabf 	bl	80099d8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3788      	adds	r7, #136	; 0x88
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	08009f47 	.word	0x08009f47
 8009468:	08009fa7 	.word	0x08009fa7

0800946c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b0ba      	sub	sp, #232	; 0xe8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009492:	2300      	movs	r3, #0
 8009494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009498:	2300      	movs	r3, #0
 800949a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800949e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a2:	f003 030f 	and.w	r3, r3, #15
 80094a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80094aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10f      	bne.n	80094d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <HAL_UART_IRQHandler+0x66>
 80094be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c2:	f003 0320 	and.w	r3, r3, #32
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fe02 	bl	800a0d4 <UART_Receive_IT>
      return;
 80094d0:	e25b      	b.n	800998a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80de 	beq.w	8009698 <HAL_UART_IRQHandler+0x22c>
 80094dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80094e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80d1 	beq.w	8009698 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fa:	f003 0301 	and.w	r3, r3, #1
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00b      	beq.n	800951a <HAL_UART_IRQHandler+0xae>
 8009502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950a:	2b00      	cmp	r3, #0
 800950c:	d005      	beq.n	800951a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009512:	f043 0201 	orr.w	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800951a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <HAL_UART_IRQHandler+0xd2>
 8009526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d005      	beq.n	800953e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009536:	f043 0202 	orr.w	r2, r3, #2
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800953e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00b      	beq.n	8009562 <HAL_UART_IRQHandler+0xf6>
 800954a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d005      	beq.n	8009562 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955a:	f043 0204 	orr.w	r2, r3, #4
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	f003 0308 	and.w	r3, r3, #8
 800956a:	2b00      	cmp	r3, #0
 800956c:	d011      	beq.n	8009592 <HAL_UART_IRQHandler+0x126>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	f003 0320 	and.w	r3, r3, #32
 8009576:	2b00      	cmp	r3, #0
 8009578:	d105      	bne.n	8009586 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800957a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958a:	f043 0208 	orr.w	r2, r3, #8
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 81f2 	beq.w	8009980 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800959c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <HAL_UART_IRQHandler+0x14e>
 80095a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fd8d 	bl	800a0d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bf14      	ite	ne
 80095c8:	2301      	movne	r3, #1
 80095ca:	2300      	moveq	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	f003 0308 	and.w	r3, r3, #8
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <HAL_UART_IRQHandler+0x17a>
 80095de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d04f      	beq.n	8009686 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fc37 	bl	8009e5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695b      	ldr	r3, [r3, #20]
 80095f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d041      	beq.n	800967e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3314      	adds	r3, #20
 8009600:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3314      	adds	r3, #20
 8009622:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009626:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800962a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009632:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800963e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1d9      	bne.n	80095fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	2b00      	cmp	r3, #0
 800964c:	d013      	beq.n	8009676 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	4a7e      	ldr	r2, [pc, #504]	; (800984c <HAL_UART_IRQHandler+0x3e0>)
 8009654:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	4618      	mov	r0, r3
 800965c:	f7fc f996 	bl	800598c <HAL_DMA_Abort_IT>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d016      	beq.n	8009694 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009670:	4610      	mov	r0, r2
 8009672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009674:	e00e      	b.n	8009694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9a5 	bl	80099c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800967c:	e00a      	b.n	8009694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9a1 	bl	80099c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009684:	e006      	b.n	8009694 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 f99d 	bl	80099c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009692:	e175      	b.n	8009980 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009694:	bf00      	nop
    return;
 8009696:	e173      	b.n	8009980 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969c:	2b01      	cmp	r3, #1
 800969e:	f040 814f 	bne.w	8009940 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a6:	f003 0310 	and.w	r3, r3, #16
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8148 	beq.w	8009940 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80096b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8141 	beq.w	8009940 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096be:	2300      	movs	r3, #0
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60bb      	str	r3, [r7, #8]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	60bb      	str	r3, [r7, #8]
 80096d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 80b6 	beq.w	8009850 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8145 	beq.w	8009984 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009702:	429a      	cmp	r2, r3
 8009704:	f080 813e 	bcs.w	8009984 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800970e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	2b20      	cmp	r3, #32
 8009718:	f000 8088 	beq.w	800982c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	330c      	adds	r3, #12
 8009722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009726:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009732:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	330c      	adds	r3, #12
 8009744:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009748:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800974c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009754:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1d9      	bne.n	800971c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3314      	adds	r3, #20
 800976e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800977a:	f023 0301 	bic.w	r3, r3, #1
 800977e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3314      	adds	r3, #20
 8009788:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800978c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009790:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009794:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800979e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e1      	bne.n	8009768 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3314      	adds	r3, #20
 80097aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3314      	adds	r3, #20
 80097c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e3      	bne.n	80097a4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097fc:	f023 0310 	bic.w	r3, r3, #16
 8009800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	330c      	adds	r3, #12
 800980a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800980e:	65ba      	str	r2, [r7, #88]	; 0x58
 8009810:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009814:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800981c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e3      	bne.n	80097ea <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	4618      	mov	r0, r3
 8009828:	f7fc f874 	bl	8005914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800983a:	b29b      	uxth	r3, r3
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	b29b      	uxth	r3, r3
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f8d1 	bl	80099ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009848:	e09c      	b.n	8009984 <HAL_UART_IRQHandler+0x518>
 800984a:	bf00      	nop
 800984c:	08009f1f 	.word	0x08009f1f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009858:	b29b      	uxth	r3, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 808e 	beq.w	8009988 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800986c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 8089 	beq.w	8009988 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	330c      	adds	r3, #12
 800987c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800988c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	330c      	adds	r3, #12
 8009896:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800989a:	647a      	str	r2, [r7, #68]	; 0x44
 800989c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098a2:	e841 2300 	strex	r3, r2, [r1]
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1e3      	bne.n	8009876 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3314      	adds	r3, #20
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	623b      	str	r3, [r7, #32]
   return(result);
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	f023 0301 	bic.w	r3, r3, #1
 80098c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3314      	adds	r3, #20
 80098ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098d2:	633a      	str	r2, [r7, #48]	; 0x30
 80098d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e3      	bne.n	80098ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	330c      	adds	r3, #12
 80098fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	60fb      	str	r3, [r7, #12]
   return(result);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0310 	bic.w	r3, r3, #16
 800990a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	330c      	adds	r3, #12
 8009914:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009918:	61fa      	str	r2, [r7, #28]
 800991a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991c:	69b9      	ldr	r1, [r7, #24]
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	e841 2300 	strex	r3, r2, [r1]
 8009924:	617b      	str	r3, [r7, #20]
   return(result);
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1e3      	bne.n	80098f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009932:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f856 	bl	80099ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800993e:	e023      	b.n	8009988 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009948:	2b00      	cmp	r3, #0
 800994a:	d009      	beq.n	8009960 <HAL_UART_IRQHandler+0x4f4>
 800994c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009954:	2b00      	cmp	r3, #0
 8009956:	d003      	beq.n	8009960 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fb54 	bl	800a006 <UART_Transmit_IT>
    return;
 800995e:	e014      	b.n	800998a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00e      	beq.n	800998a <HAL_UART_IRQHandler+0x51e>
 800996c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	d008      	beq.n	800998a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fb93 	bl	800a0a4 <UART_EndTransmit_IT>
    return;
 800997e:	e004      	b.n	800998a <HAL_UART_IRQHandler+0x51e>
    return;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <HAL_UART_IRQHandler+0x51e>
      return;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <HAL_UART_IRQHandler+0x51e>
      return;
 8009988:	bf00      	nop
  }
}
 800998a:	37e8      	adds	r7, #232	; 0xe8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr

080099a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr

080099c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80099ce:	bf00      	nop
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bc80      	pop	{r7}
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr

080099ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099ea:	b480      	push	{r7}
 80099ec:	b083      	sub	sp, #12
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bc80      	pop	{r7}
 80099fe:	4770      	bx	lr

08009a00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b09c      	sub	sp, #112	; 0x70
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d172      	bne.n	8009b02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a1e:	2200      	movs	r2, #0
 8009a20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	330c      	adds	r3, #12
 8009a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a42:	65ba      	str	r2, [r7, #88]	; 0x58
 8009a44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e5      	bne.n	8009a22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3314      	adds	r3, #20
 8009a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a68:	f023 0301 	bic.w	r3, r3, #1
 8009a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3314      	adds	r3, #20
 8009a74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009a76:	647a      	str	r2, [r7, #68]	; 0x44
 8009a78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e5      	bne.n	8009a56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3314      	adds	r3, #20
 8009a90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	e853 3f00 	ldrex	r3, [r3]
 8009a98:	623b      	str	r3, [r7, #32]
   return(result);
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8009aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3314      	adds	r3, #20
 8009aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009aaa:	633a      	str	r2, [r7, #48]	; 0x30
 8009aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	e841 2300 	strex	r3, r2, [r1]
 8009ab6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1e5      	bne.n	8009a8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d119      	bne.n	8009b02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	330c      	adds	r3, #12
 8009ad4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f023 0310 	bic.w	r3, r3, #16
 8009ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	330c      	adds	r3, #12
 8009aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009aee:	61fa      	str	r2, [r7, #28]
 8009af0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	69b9      	ldr	r1, [r7, #24]
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	617b      	str	r3, [r7, #20]
   return(result);
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b04:	2200      	movs	r2, #0
 8009b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d106      	bne.n	8009b1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b14:	4619      	mov	r1, r3
 8009b16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b18:	f7ff ff67 	bl	80099ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b1c:	e002      	b.n	8009b24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009b1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b20:	f7ff ff3f 	bl	80099a2 <HAL_UART_RxCpltCallback>
}
 8009b24:	bf00      	nop
 8009b26:	3770      	adds	r7, #112	; 0x70
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d108      	bne.n	8009b5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b4c:	085b      	lsrs	r3, r3, #1
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4619      	mov	r1, r3
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff ff49 	bl	80099ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b58:	e002      	b.n	8009b60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7ff ff2a 	bl	80099b4 <HAL_UART_RxHalfCpltCallback>
}
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bf14      	ite	ne
 8009b88:	2301      	movne	r3, #1
 8009b8a:	2300      	moveq	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b21      	cmp	r3, #33	; 0x21
 8009b9a:	d108      	bne.n	8009bae <UART_DMAError+0x46>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d005      	beq.n	8009bae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ba8:	68b8      	ldr	r0, [r7, #8]
 8009baa:	f000 f92f 	bl	8009e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bf14      	ite	ne
 8009bbc:	2301      	movne	r3, #1
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	2b22      	cmp	r3, #34	; 0x22
 8009bce:	d108      	bne.n	8009be2 <UART_DMAError+0x7a>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009bdc:	68b8      	ldr	r0, [r7, #8]
 8009bde:	f000 f93c 	bl	8009e5a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be6:	f043 0210 	orr.w	r2, r3, #16
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bee:	68b8      	ldr	r0, [r7, #8]
 8009bf0:	f7ff fee9 	bl	80099c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b090      	sub	sp, #64	; 0x40
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c0c:	e050      	b.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c14:	d04c      	beq.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d007      	beq.n	8009c2c <UART_WaitOnFlagUntilTimeout+0x30>
 8009c1c:	f7fb f862 	bl	8004ce4 <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d241      	bcs.n	8009cb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	330c      	adds	r3, #12
 8009c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	330c      	adds	r3, #12
 8009c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c4c:	637a      	str	r2, [r7, #52]	; 0x34
 8009c4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f023 0301 	bic.w	r3, r3, #1
 8009c76:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c80:	623a      	str	r2, [r7, #32]
 8009c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	69f9      	ldr	r1, [r7, #28]
 8009c86:	6a3a      	ldr	r2, [r7, #32]
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2220      	movs	r2, #32
 8009ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e00f      	b.n	8009cd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	4013      	ands	r3, r2
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2301      	moveq	r3, #1
 8009cc2:	2300      	movne	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d09f      	beq.n	8009c0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3740      	adds	r7, #64	; 0x40
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b098      	sub	sp, #96	; 0x60
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	88fa      	ldrh	r2, [r7, #6]
 8009cf0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2222      	movs	r2, #34	; 0x22
 8009cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d04:	4a3e      	ldr	r2, [pc, #248]	; (8009e00 <UART_Start_Receive_DMA+0x128>)
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d0c:	4a3d      	ldr	r2, [pc, #244]	; (8009e04 <UART_Start_Receive_DMA+0x12c>)
 8009d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d14:	4a3c      	ldr	r2, [pc, #240]	; (8009e08 <UART_Start_Receive_DMA+0x130>)
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d20:	f107 0308 	add.w	r3, r7, #8
 8009d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	88fb      	ldrh	r3, [r7, #6]
 8009d38:	f7fb fd8c 	bl	8005854 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d019      	beq.n	8009d8e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	330c      	adds	r3, #12
 8009d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d64:	e853 3f00 	ldrex	r3, [r3]
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	330c      	adds	r3, #12
 8009d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d7a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009d7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e5      	bne.n	8009d5a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3314      	adds	r3, #20
 8009d94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	e853 3f00 	ldrex	r3, [r3]
 8009d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	f043 0301 	orr.w	r3, r3, #1
 8009da4:	657b      	str	r3, [r7, #84]	; 0x54
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3314      	adds	r3, #20
 8009dac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dae:	63ba      	str	r2, [r7, #56]	; 0x38
 8009db0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009db6:	e841 2300 	strex	r3, r2, [r1]
 8009dba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1e5      	bne.n	8009d8e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3314      	adds	r3, #20
 8009dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	e853 3f00 	ldrex	r3, [r3]
 8009dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3314      	adds	r3, #20
 8009de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009de2:	627a      	str	r2, [r7, #36]	; 0x24
 8009de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de6:	6a39      	ldr	r1, [r7, #32]
 8009de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dea:	e841 2300 	strex	r3, r2, [r1]
 8009dee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e5      	bne.n	8009dc2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3760      	adds	r7, #96	; 0x60
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	08009a01 	.word	0x08009a01
 8009e04:	08009b2d 	.word	0x08009b2d
 8009e08:	08009b69 	.word	0x08009b69

08009e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	330c      	adds	r3, #12
 8009e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	e853 3f00 	ldrex	r3, [r3]
 8009e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	330c      	adds	r3, #12
 8009e32:	69fa      	ldr	r2, [r7, #28]
 8009e34:	61ba      	str	r2, [r7, #24]
 8009e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	6979      	ldr	r1, [r7, #20]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	613b      	str	r3, [r7, #16]
   return(result);
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e5      	bne.n	8009e14 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009e50:	bf00      	nop
 8009e52:	3724      	adds	r7, #36	; 0x24
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr

08009e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b095      	sub	sp, #84	; 0x54
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	330c      	adds	r3, #12
 8009e68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6c:	e853 3f00 	ldrex	r3, [r3]
 8009e70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	330c      	adds	r3, #12
 8009e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e82:	643a      	str	r2, [r7, #64]	; 0x40
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e5      	bne.n	8009e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3314      	adds	r3, #20
 8009e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9e:	6a3b      	ldr	r3, [r7, #32]
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	f023 0301 	bic.w	r3, r3, #1
 8009eac:	64bb      	str	r3, [r7, #72]	; 0x48
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3314      	adds	r3, #20
 8009eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009eb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ebe:	e841 2300 	strex	r3, r2, [r1]
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1e5      	bne.n	8009e96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d119      	bne.n	8009f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f023 0310 	bic.w	r3, r3, #16
 8009ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	330c      	adds	r3, #12
 8009ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ef2:	61ba      	str	r2, [r7, #24]
 8009ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef6:	6979      	ldr	r1, [r7, #20]
 8009ef8:	69ba      	ldr	r2, [r7, #24]
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	613b      	str	r3, [r7, #16]
   return(result);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e5      	bne.n	8009ed2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2220      	movs	r2, #32
 8009f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f14:	bf00      	nop
 8009f16:	3754      	adds	r7, #84	; 0x54
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bc80      	pop	{r7}
 8009f1c:	4770      	bx	lr

08009f1e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fd44 	bl	80099c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f58:	2200      	movs	r2, #0
 8009f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d004      	beq.n	8009f6e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d117      	bne.n	8009f9e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff fd1e 	bl	80099d8 <HAL_UART_AbortCpltCallback>
 8009f9c:	e000      	b.n	8009fa0 <UART_DMATxAbortCallback+0x5a>
      return;
 8009f9e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b084      	sub	sp, #16
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb8:	2200      	movs	r2, #0
 8009fba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d004      	beq.n	8009fce <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d117      	bne.n	8009ffe <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fcee 	bl	80099d8 <HAL_UART_AbortCpltCallback>
 8009ffc:	e000      	b.n	800a000 <UART_DMARxAbortCallback+0x5a>
      return;
 8009ffe:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a006:	b480      	push	{r7}
 800a008:	b085      	sub	sp, #20
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b21      	cmp	r3, #33	; 0x21
 800a018:	d13e      	bne.n	800a098 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a022:	d114      	bne.n	800a04e <UART_Transmit_IT+0x48>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d110      	bne.n	800a04e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a1b      	ldr	r3, [r3, #32]
 800a030:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	881b      	ldrh	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a040:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	1c9a      	adds	r2, r3, #2
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	621a      	str	r2, [r3, #32]
 800a04c:	e008      	b.n	800a060 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	6211      	str	r1, [r2, #32]
 800a058:	781a      	ldrb	r2, [r3, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a064:	b29b      	uxth	r3, r3
 800a066:	3b01      	subs	r3, #1
 800a068:	b29b      	uxth	r3, r3
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	4619      	mov	r1, r3
 800a06e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10f      	bne.n	800a094 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a082:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68da      	ldr	r2, [r3, #12]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a092:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	e000      	b.n	800a09a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a098:	2302      	movs	r3, #2
  }
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bc80      	pop	{r7}
 800a0a2:	4770      	bx	lr

0800a0a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68da      	ldr	r2, [r3, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2220      	movs	r2, #32
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7ff fc63 	bl	8009990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08c      	sub	sp, #48	; 0x30
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b22      	cmp	r3, #34	; 0x22
 800a0e6:	f040 80ae 	bne.w	800a246 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f2:	d117      	bne.n	800a124 <UART_Receive_IT+0x50>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d113      	bne.n	800a124 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a104:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	b29a      	uxth	r2, r3
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	1c9a      	adds	r2, r3, #2
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	629a      	str	r2, [r3, #40]	; 0x28
 800a122:	e026      	b.n	800a172 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a128:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a136:	d007      	beq.n	800a148 <UART_Receive_IT+0x74>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <UART_Receive_IT+0x82>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d106      	bne.n	800a156 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a152:	701a      	strb	r2, [r3, #0]
 800a154:	e008      	b.n	800a168 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a162:	b2da      	uxtb	r2, r3
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a176:	b29b      	uxth	r3, r3
 800a178:	3b01      	subs	r3, #1
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	4619      	mov	r1, r3
 800a180:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a182:	2b00      	cmp	r3, #0
 800a184:	d15d      	bne.n	800a242 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68da      	ldr	r2, [r3, #12]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f022 0220 	bic.w	r2, r2, #32
 800a194:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	695a      	ldr	r2, [r3, #20]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 0201 	bic.w	r2, r2, #1
 800a1b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d135      	bne.n	800a238 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	e853 3f00 	ldrex	r3, [r3]
 800a1e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f023 0310 	bic.w	r3, r3, #16
 800a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f2:	623a      	str	r2, [r7, #32]
 800a1f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	69f9      	ldr	r1, [r7, #28]
 800a1f8:	6a3a      	ldr	r2, [r7, #32]
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e5      	bne.n	800a1d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0310 	and.w	r3, r3, #16
 800a210:	2b10      	cmp	r3, #16
 800a212:	d10a      	bne.n	800a22a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff fbda 	bl	80099ea <HAL_UARTEx_RxEventCallback>
 800a236:	e002      	b.n	800a23e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7ff fbb2 	bl	80099a2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	e002      	b.n	800a248 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	e000      	b.n	800a248 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a246:	2302      	movs	r3, #2
  }
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3730      	adds	r7, #48	; 0x30
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a28a:	f023 030c 	bic.w	r3, r3, #12
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	68b9      	ldr	r1, [r7, #8]
 800a294:	430b      	orrs	r3, r1
 800a296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699a      	ldr	r2, [r3, #24]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a2c      	ldr	r2, [pc, #176]	; (800a364 <UART_SetConfig+0x114>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d103      	bne.n	800a2c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a2b8:	f7fd f948 	bl	800754c <HAL_RCC_GetPCLK2Freq>
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	e002      	b.n	800a2c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a2c0:	f7fd f930 	bl	8007524 <HAL_RCC_GetPCLK1Freq>
 800a2c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009a      	lsls	r2, r3, #2
 800a2d0:	441a      	add	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2dc:	4a22      	ldr	r2, [pc, #136]	; (800a368 <UART_SetConfig+0x118>)
 800a2de:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e2:	095b      	lsrs	r3, r3, #5
 800a2e4:	0119      	lsls	r1, r3, #4
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009a      	lsls	r2, r3, #2
 800a2f0:	441a      	add	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2fc:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <UART_SetConfig+0x118>)
 800a2fe:	fba3 0302 	umull	r0, r3, r3, r2
 800a302:	095b      	lsrs	r3, r3, #5
 800a304:	2064      	movs	r0, #100	; 0x64
 800a306:	fb00 f303 	mul.w	r3, r0, r3
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	011b      	lsls	r3, r3, #4
 800a30e:	3332      	adds	r3, #50	; 0x32
 800a310:	4a15      	ldr	r2, [pc, #84]	; (800a368 <UART_SetConfig+0x118>)
 800a312:	fba2 2303 	umull	r2, r3, r2, r3
 800a316:	095b      	lsrs	r3, r3, #5
 800a318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a31c:	4419      	add	r1, r3
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4613      	mov	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	4413      	add	r3, r2
 800a326:	009a      	lsls	r2, r3, #2
 800a328:	441a      	add	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	fbb2 f2f3 	udiv	r2, r2, r3
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <UART_SetConfig+0x118>)
 800a336:	fba3 0302 	umull	r0, r3, r3, r2
 800a33a:	095b      	lsrs	r3, r3, #5
 800a33c:	2064      	movs	r0, #100	; 0x64
 800a33e:	fb00 f303 	mul.w	r3, r0, r3
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	011b      	lsls	r3, r3, #4
 800a346:	3332      	adds	r3, #50	; 0x32
 800a348:	4a07      	ldr	r2, [pc, #28]	; (800a368 <UART_SetConfig+0x118>)
 800a34a:	fba2 2303 	umull	r2, r3, r2, r3
 800a34e:	095b      	lsrs	r3, r3, #5
 800a350:	f003 020f 	and.w	r2, r3, #15
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	440a      	add	r2, r1
 800a35a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a35c:	bf00      	nop
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	40013800 	.word	0x40013800
 800a368:	51eb851f 	.word	0x51eb851f

0800a36c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	4603      	mov	r3, r0
 800a374:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a376:	2300      	movs	r3, #0
 800a378:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a37a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a37e:	2b84      	cmp	r3, #132	; 0x84
 800a380:	d005      	beq.n	800a38e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a382:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	4413      	add	r3, r2
 800a38a:	3303      	adds	r3, #3
 800a38c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a38e:	68fb      	ldr	r3, [r7, #12]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	bc80      	pop	{r7}
 800a398:	4770      	bx	lr

0800a39a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3a0:	f3ef 8305 	mrs	r3, IPSR
 800a3a4:	607b      	str	r3, [r7, #4]
  return(result);
 800a3a6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bf14      	ite	ne
 800a3ac:	2301      	movne	r3, #1
 800a3ae:	2300      	moveq	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr

0800a3bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a3c0:	f001 fd0a 	bl	800bdd8 <vTaskStartScheduler>
  
  return osOK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a3ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3cc:	b089      	sub	sp, #36	; 0x24
 800a3ce:	af04      	add	r7, sp, #16
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d020      	beq.n	800a41e <osThreadCreate+0x54>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d01c      	beq.n	800a41e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685c      	ldr	r4, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691e      	ldr	r6, [r3, #16]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff ffb8 	bl	800a36c <makeFreeRtosPriority>
 800a3fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a406:	9202      	str	r2, [sp, #8]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	9100      	str	r1, [sp, #0]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	4632      	mov	r2, r6
 800a410:	4629      	mov	r1, r5
 800a412:	4620      	mov	r0, r4
 800a414:	f001 f8f0 	bl	800b5f8 <xTaskCreateStatic>
 800a418:	4603      	mov	r3, r0
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	e01c      	b.n	800a458 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685c      	ldr	r4, [r3, #4]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a42a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff ff9a 	bl	800a36c <makeFreeRtosPriority>
 800a438:	4602      	mov	r2, r0
 800a43a:	f107 030c 	add.w	r3, r7, #12
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	9200      	str	r2, [sp, #0]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	4632      	mov	r2, r6
 800a446:	4629      	mov	r1, r5
 800a448:	4620      	mov	r0, r4
 800a44a:	f001 f931 	bl	800b6b0 <xTaskCreate>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b01      	cmp	r3, #1
 800a452:	d001      	beq.n	800a458 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	e000      	b.n	800a45a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a458:	68fb      	ldr	r3, [r7, #12]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a464 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  taskYIELD();
 800a468:	4b06      	ldr	r3, [pc, #24]	; (800a484 <osThreadYield+0x20>)
 800a46a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <osDelay+0x16>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	e000      	b.n	800a4a0 <osDelay+0x18>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f001 fac9 	bl	800ba38 <vTaskDelay>
  
  return osOK;
 800a4a6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af02      	add	r7, sp, #8
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	607a      	str	r2, [r7, #4]
 800a4bc:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d013      	beq.n	800a4ee <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a4c6:	7afb      	ldrb	r3, [r7, #11]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d101      	bne.n	800a4d0 <osTimerCreate+0x20>
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	e000      	b.n	800a4d2 <osTimerCreate+0x22>
 800a4d0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a4da:	9201      	str	r2, [sp, #4]
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	460a      	mov	r2, r1
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	480b      	ldr	r0, [pc, #44]	; (800a514 <osTimerCreate+0x64>)
 800a4e6:	f002 fc20 	bl	800cd2a <xTimerCreateStatic>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	e00e      	b.n	800a50c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d101      	bne.n	800a4f8 <osTimerCreate+0x48>
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	e000      	b.n	800a4fa <osTimerCreate+0x4a>
 800a4f8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2101      	movs	r1, #1
 800a504:	4803      	ldr	r0, [pc, #12]	; (800a514 <osTimerCreate+0x64>)
 800a506:	f002 fbef 	bl	800cce8 <xTimerCreate>
 800a50a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	0800e950 	.word	0x0800e950

0800a518 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a522:	2300      	movs	r3, #0
 800a524:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a526:	2300      	movs	r3, #0
 800a528:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <osTimerStart+0x20>
    ticks = 1;
 800a534:	2301      	movs	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800a538:	f7ff ff2f 	bl	800a39a <inHandlerMode>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d01a      	beq.n	800a578 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	2200      	movs	r2, #0
 800a548:	9200      	str	r2, [sp, #0]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	2109      	movs	r1, #9
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f002 fc5a 	bl	800ce08 <xTimerGenericCommand>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d002      	beq.n	800a560 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800a55a:	23ff      	movs	r3, #255	; 0xff
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	e018      	b.n	800a592 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d015      	beq.n	800a592 <osTimerStart+0x7a>
 800a566:	4b0d      	ldr	r3, [pc, #52]	; (800a59c <osTimerStart+0x84>)
 800a568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	e00c      	b.n	800a592 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800a578:	2300      	movs	r3, #0
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	2300      	movs	r3, #0
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	2104      	movs	r1, #4
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f002 fc40 	bl	800ce08 <xTimerGenericCommand>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d001      	beq.n	800a592 <osTimerStart+0x7a>
      result = osErrorOS;
 800a58e:	23ff      	movs	r3, #255	; 0xff
 800a590:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800a592:	697b      	ldr	r3, [r7, #20]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a5b2:	f7ff fef2 	bl	800a39a <inHandlerMode>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01c      	beq.n	800a5f6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	f107 0208 	add.w	r2, r7, #8
 800a5c2:	f107 030c 	add.w	r3, r7, #12
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f002 fa0d 	bl	800c9ec <xTaskGenericNotifyFromISR>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d002      	beq.n	800a5de <osSignalSet+0x3e>
      return 0x80000000;
 800a5d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5dc:	e019      	b.n	800a612 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d015      	beq.n	800a610 <osSignalSet+0x70>
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <osSignalSet+0x7c>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	e00c      	b.n	800a610 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	f107 0308 	add.w	r3, r7, #8
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f002 f94a 	bl	800c898 <xTaskGenericNotify>
 800a604:	4603      	mov	r3, r0
 800a606:	2b01      	cmp	r3, #1
 800a608:	d002      	beq.n	800a610 <osSignalSet+0x70>
    return 0x80000000;
 800a60a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a60e:	e000      	b.n	800a612 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a610:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	e000ed04 	.word	0xe000ed04

0800a620 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a62c:	2300      	movs	r3, #0
 800a62e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a630:	2300      	movs	r3, #0
 800a632:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63a:	d103      	bne.n	800a644 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a63c:	f04f 33ff 	mov.w	r3, #4294967295
 800a640:	61fb      	str	r3, [r7, #28]
 800a642:	e009      	b.n	800a658 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d006      	beq.n	800a658 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <osSignalWait+0x38>
      ticks = 1;
 800a654:	2301      	movs	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a658:	f7ff fe9f 	bl	800a39a <inHandlerMode>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d002      	beq.n	800a668 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a662:	2382      	movs	r3, #130	; 0x82
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	e01b      	b.n	800a6a0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a668:	68b9      	ldr	r1, [r7, #8]
 800a66a:	f107 0310 	add.w	r3, r7, #16
 800a66e:	1d1a      	adds	r2, r3, #4
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2000      	movs	r0, #0
 800a674:	f002 f8b0 	bl	800c7d8 <xTaskNotifyWait>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d008      	beq.n	800a690 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <osSignalWait+0x6a>
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	e00a      	b.n	800a6a0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a68a:	2340      	movs	r3, #64	; 0x40
 800a68c:	613b      	str	r3, [r7, #16]
 800a68e:	e007      	b.n	800a6a0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	da02      	bge.n	800a69c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a696:	2386      	movs	r3, #134	; 0x86
 800a698:	613b      	str	r3, [r7, #16]
 800a69a:	e001      	b.n	800a6a0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a69c:	2308      	movs	r3, #8
 800a69e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	461c      	mov	r4, r3
 800a6a4:	f107 0310 	add.w	r3, r7, #16
 800a6a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	3724      	adds	r7, #36	; 0x24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd90      	pop	{r4, r7, pc}

0800a6b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00f      	beq.n	800a6ea <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d10a      	bne.n	800a6e6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2203      	movs	r2, #3
 800a6d6:	9200      	str	r2, [sp, #0]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	2001      	movs	r0, #1
 800a6de:	f000 fa55 	bl	800ab8c <xQueueGenericCreateStatic>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	e016      	b.n	800a714 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e014      	b.n	800a714 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d110      	bne.n	800a712 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	2001      	movs	r0, #1
 800a6f6:	f000 fac0 	bl	800ac7a <xQueueGenericCreate>
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d005      	beq.n	800a70e <osSemaphoreCreate+0x56>
 800a702:	2300      	movs	r3, #0
 800a704:	2200      	movs	r2, #0
 800a706:	2100      	movs	r1, #0
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 fb13 	bl	800ad34 <xQueueGenericSend>
      return sema;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	e000      	b.n	800a714 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a712:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a71c:	b590      	push	{r4, r7, lr}
 800a71e:	b085      	sub	sp, #20
 800a720:	af02      	add	r7, sp, #8
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d011      	beq.n	800a752 <osMessageCreate+0x36>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00d      	beq.n	800a752 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6818      	ldr	r0, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6859      	ldr	r1, [r3, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2400      	movs	r4, #0
 800a748:	9400      	str	r4, [sp, #0]
 800a74a:	f000 fa1f 	bl	800ab8c <xQueueGenericCreateStatic>
 800a74e:	4603      	mov	r3, r0
 800a750:	e008      	b.n	800a764 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6818      	ldr	r0, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	4619      	mov	r1, r3
 800a75e:	f000 fa8c 	bl	800ac7a <xQueueGenericCreate>
 800a762:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd90      	pop	{r4, r7, pc}

0800a76c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a778:	2300      	movs	r3, #0
 800a77a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <osMessagePut+0x1e>
    ticks = 1;
 800a786:	2301      	movs	r3, #1
 800a788:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a78a:	f7ff fe06 	bl	800a39a <inHandlerMode>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d018      	beq.n	800a7c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a794:	f107 0210 	add.w	r2, r7, #16
 800a798:	f107 0108 	add.w	r1, r7, #8
 800a79c:	2300      	movs	r3, #0
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fbc6 	bl	800af30 <xQueueGenericSendFromISR>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d001      	beq.n	800a7ae <osMessagePut+0x42>
      return osErrorOS;
 800a7aa:	23ff      	movs	r3, #255	; 0xff
 800a7ac:	e018      	b.n	800a7e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d014      	beq.n	800a7de <osMessagePut+0x72>
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <osMessagePut+0x7c>)
 800a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	e00b      	b.n	800a7de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a7c6:	f107 0108 	add.w	r1, r7, #8
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 fab0 	bl	800ad34 <xQueueGenericSend>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d001      	beq.n	800a7de <osMessagePut+0x72>
      return osErrorOS;
 800a7da:	23ff      	movs	r3, #255	; 0xff
 800a7dc:	e000      	b.n	800a7e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b08b      	sub	sp, #44	; 0x2c
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a806:	2380      	movs	r3, #128	; 0x80
 800a808:	617b      	str	r3, [r7, #20]
    return event;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	461c      	mov	r4, r3
 800a80e:	f107 0314 	add.w	r3, r7, #20
 800a812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a81a:	e054      	b.n	800a8c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a81c:	2300      	movs	r3, #0
 800a81e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82a:	d103      	bne.n	800a834 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
 800a832:	e009      	b.n	800a848 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a840:	2b00      	cmp	r3, #0
 800a842:	d101      	bne.n	800a848 <osMessageGet+0x5c>
      ticks = 1;
 800a844:	2301      	movs	r3, #1
 800a846:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a848:	f7ff fda7 	bl	800a39a <inHandlerMode>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d01c      	beq.n	800a88c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a852:	f107 0220 	add.w	r2, r7, #32
 800a856:	f107 0314 	add.w	r3, r7, #20
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	68b8      	ldr	r0, [r7, #8]
 800a860:	f000 fcde 	bl	800b220 <xQueueReceiveFromISR>
 800a864:	4603      	mov	r3, r0
 800a866:	2b01      	cmp	r3, #1
 800a868:	d102      	bne.n	800a870 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a86a:	2310      	movs	r3, #16
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	e001      	b.n	800a874 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a870:	2300      	movs	r3, #0
 800a872:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d01d      	beq.n	800a8b6 <osMessageGet+0xca>
 800a87a:	4b15      	ldr	r3, [pc, #84]	; (800a8d0 <osMessageGet+0xe4>)
 800a87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	e014      	b.n	800a8b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	3304      	adds	r3, #4
 800a892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a894:	4619      	mov	r1, r3
 800a896:	68b8      	ldr	r0, [r7, #8]
 800a898:	f000 fbe2 	bl	800b060 <xQueueReceive>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d102      	bne.n	800a8a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a8a2:	2310      	movs	r3, #16
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e006      	b.n	800a8b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d101      	bne.n	800a8b2 <osMessageGet+0xc6>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e000      	b.n	800a8b4 <osMessageGet+0xc8>
 800a8b2:	2340      	movs	r3, #64	; 0x40
 800a8b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	461c      	mov	r4, r3
 800a8ba:	f107 0314 	add.w	r3, r7, #20
 800a8be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8c6:	68f8      	ldr	r0, [r7, #12]
 800a8c8:	372c      	adds	r7, #44	; 0x2c
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd90      	pop	{r4, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f001 f8df 	bl	800baa0 <vTaskSuspend>
  
  return osOK;
 800a8e2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800a8f4:	f7ff fd51 	bl	800a39a <inHandlerMode>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00e      	beq.n	800a91c <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f001 f9f8 	bl	800bcf4 <xTaskResumeFromISR>
 800a904:	4603      	mov	r3, r0
 800a906:	2b01      	cmp	r3, #1
 800a908:	d10b      	bne.n	800a922 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800a90a:	4b08      	ldr	r3, [pc, #32]	; (800a92c <osThreadResume+0x40>)
 800a90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	e002      	b.n	800a922 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f001 f98b 	bl	800bc38 <vTaskResume>
  }
  return osOK;
 800a922:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed04 	.word	0xe000ed04

0800a930 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <osDelayUntil+0x18>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	e000      	b.n	800a94a <osDelayUntil+0x1a>
 800a948:	2301      	movs	r3, #1
 800a94a:	4619      	mov	r1, r3
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fff5 	bl	800b93c <vTaskDelayUntil>
  
  return osOK;
 800a952:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f103 0208 	add.w	r2, r3, #8
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f04f 32ff 	mov.w	r2, #4294967295
 800a974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f103 0208 	add.w	r2, r3, #8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f103 0208 	add.w	r2, r3, #8
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr

0800a99a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bc80      	pop	{r7}
 800a9b0:	4770      	bx	lr

0800a9b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b085      	sub	sp, #20
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
 800a9ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	601a      	str	r2, [r3, #0]
}
 800a9ee:	bf00      	nop
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bc80      	pop	{r7}
 800a9f6:	4770      	bx	lr

0800a9f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0e:	d103      	bne.n	800aa18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	60fb      	str	r3, [r7, #12]
 800aa16:	e00c      	b.n	800aa32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	e002      	b.n	800aa26 <vListInsert+0x2e>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d2f6      	bcs.n	800aa20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685a      	ldr	r2, [r3, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	601a      	str	r2, [r3, #0]
}
 800aa5e:	bf00      	nop
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bc80      	pop	{r7}
 800aa66:	4770      	bx	lr

0800aa68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	6892      	ldr	r2, [r2, #8]
 800aa7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	6852      	ldr	r2, [r2, #4]
 800aa88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d103      	bne.n	800aa9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	1e5a      	subs	r2, r3, #1
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bc80      	pop	{r7}
 800aab8:	4770      	bx	lr
	...

0800aabc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10a      	bne.n	800aae6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aae2:	bf00      	nop
 800aae4:	e7fe      	b.n	800aae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aae6:	f002 fd31 	bl	800d54c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aaf6:	fb01 f303 	mul.w	r3, r1, r3
 800aafa:	441a      	add	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab16:	3b01      	subs	r3, #1
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab1c:	fb01 f303 	mul.w	r3, r1, r3
 800ab20:	441a      	add	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	22ff      	movs	r2, #255	; 0xff
 800ab2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	22ff      	movs	r2, #255	; 0xff
 800ab32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d114      	bne.n	800ab66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d01a      	beq.n	800ab7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3310      	adds	r3, #16
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fbdd 	bl	800c308 <xTaskRemoveFromEventList>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d012      	beq.n	800ab7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab54:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <xQueueGenericReset+0xcc>)
 800ab56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	e009      	b.n	800ab7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3310      	adds	r3, #16
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fef6 	bl	800a95c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3324      	adds	r3, #36	; 0x24
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff fef1 	bl	800a95c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab7a:	f002 fd17 	bl	800d5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab7e:	2301      	movs	r3, #1
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	e000ed04 	.word	0xe000ed04

0800ab8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08e      	sub	sp, #56	; 0x38
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d10a      	bne.n	800abb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abb2:	bf00      	nop
 800abb4:	e7fe      	b.n	800abb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <xQueueGenericCreateStatic+0x52>
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d001      	beq.n	800abe2 <xQueueGenericCreateStatic+0x56>
 800abde:	2301      	movs	r3, #1
 800abe0:	e000      	b.n	800abe4 <xQueueGenericCreateStatic+0x58>
 800abe2:	2300      	movs	r3, #0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10a      	bne.n	800abfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800abe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abec:	f383 8811 	msr	BASEPRI, r3
 800abf0:	f3bf 8f6f 	isb	sy
 800abf4:	f3bf 8f4f 	dsb	sy
 800abf8:	623b      	str	r3, [r7, #32]
}
 800abfa:	bf00      	nop
 800abfc:	e7fe      	b.n	800abfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d102      	bne.n	800ac0a <xQueueGenericCreateStatic+0x7e>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d101      	bne.n	800ac0e <xQueueGenericCreateStatic+0x82>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericCreateStatic+0x84>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	61fb      	str	r3, [r7, #28]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac2a:	2348      	movs	r3, #72	; 0x48
 800ac2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	2b48      	cmp	r3, #72	; 0x48
 800ac32:	d00a      	beq.n	800ac4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	61bb      	str	r3, [r7, #24]
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00d      	beq.n	800ac70 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	4613      	mov	r3, r2
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 f843 	bl	800acf6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3730      	adds	r7, #48	; 0x30
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b08a      	sub	sp, #40	; 0x28
 800ac7e:	af02      	add	r7, sp, #8
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	4613      	mov	r3, r2
 800ac86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d10a      	bne.n	800aca4 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	613b      	str	r3, [r7, #16]
}
 800aca0:	bf00      	nop
 800aca2:	e7fe      	b.n	800aca2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	e004      	b.n	800acba <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68ba      	ldr	r2, [r7, #8]
 800acb4:	fb02 f303 	mul.w	r3, r2, r3
 800acb8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	3348      	adds	r3, #72	; 0x48
 800acbe:	4618      	mov	r0, r3
 800acc0:	f002 fd44 	bl	800d74c <pvPortMalloc>
 800acc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00f      	beq.n	800acec <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	3348      	adds	r3, #72	; 0x48
 800acd0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acda:	79fa      	ldrb	r2, [r7, #7]
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	4613      	mov	r3, r2
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	68b9      	ldr	r1, [r7, #8]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 f805 	bl	800acf6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800acec:	69bb      	ldr	r3, [r7, #24]
	}
 800acee:	4618      	mov	r0, r3
 800acf0:	3720      	adds	r7, #32
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d103      	bne.n	800ad12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	69ba      	ldr	r2, [r7, #24]
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	e002      	b.n	800ad18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	68ba      	ldr	r2, [r7, #8]
 800ad22:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad24:	2101      	movs	r1, #1
 800ad26:	69b8      	ldr	r0, [r7, #24]
 800ad28:	f7ff fec8 	bl	800aabc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	; 0x38
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <xQueueGenericSend+0x32>
	__asm volatile
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad62:	bf00      	nop
 800ad64:	e7fe      	b.n	800ad64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d103      	bne.n	800ad74 <xQueueGenericSend+0x40>
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <xQueueGenericSend+0x44>
 800ad74:	2301      	movs	r3, #1
 800ad76:	e000      	b.n	800ad7a <xQueueGenericSend+0x46>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <xQueueGenericSend+0x60>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad90:	bf00      	nop
 800ad92:	e7fe      	b.n	800ad92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d103      	bne.n	800ada2 <xQueueGenericSend+0x6e>
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <xQueueGenericSend+0x72>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <xQueueGenericSend+0x74>
 800ada6:	2300      	movs	r3, #0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	623b      	str	r3, [r7, #32]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adc2:	f001 fc65 	bl	800c690 <xTaskGetSchedulerState>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <xQueueGenericSend+0x9e>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <xQueueGenericSend+0xa2>
 800add2:	2301      	movs	r3, #1
 800add4:	e000      	b.n	800add8 <xQueueGenericSend+0xa4>
 800add6:	2300      	movs	r3, #0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d10a      	bne.n	800adf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800addc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade0:	f383 8811 	msr	BASEPRI, r3
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	61fb      	str	r3, [r7, #28]
}
 800adee:	bf00      	nop
 800adf0:	e7fe      	b.n	800adf0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adf2:	f002 fbab 	bl	800d54c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d302      	bcc.n	800ae08 <xQueueGenericSend+0xd4>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d129      	bne.n	800ae5c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	68b9      	ldr	r1, [r7, #8]
 800ae0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae0e:	f000 fa87 	bl	800b320 <prvCopyDataToQueue>
 800ae12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d010      	beq.n	800ae3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1e:	3324      	adds	r3, #36	; 0x24
 800ae20:	4618      	mov	r0, r3
 800ae22:	f001 fa71 	bl	800c308 <xTaskRemoveFromEventList>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d013      	beq.n	800ae54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae2c:	4b3f      	ldr	r3, [pc, #252]	; (800af2c <xQueueGenericSend+0x1f8>)
 800ae2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae32:	601a      	str	r2, [r3, #0]
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	e00a      	b.n	800ae54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d007      	beq.n	800ae54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae44:	4b39      	ldr	r3, [pc, #228]	; (800af2c <xQueueGenericSend+0x1f8>)
 800ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae54:	f002 fbaa 	bl	800d5ac <vPortExitCritical>
				return pdPASS;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e063      	b.n	800af24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae62:	f002 fba3 	bl	800d5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e05c      	b.n	800af24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	4618      	mov	r0, r3
 800ae76:	f001 faa9 	bl	800c3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae7e:	f002 fb95 	bl	800d5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae82:	f001 f819 	bl	800beb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae86:	f002 fb61 	bl	800d54c <vPortEnterCritical>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae90:	b25b      	sxtb	r3, r3
 800ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae96:	d103      	bne.n	800aea0 <xQueueGenericSend+0x16c>
 800ae98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeac:	d103      	bne.n	800aeb6 <xQueueGenericSend+0x182>
 800aeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeb6:	f002 fb79 	bl	800d5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeba:	1d3a      	adds	r2, r7, #4
 800aebc:	f107 0314 	add.w	r3, r7, #20
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 fa98 	bl	800c3f8 <xTaskCheckForTimeOut>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d124      	bne.n	800af18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed0:	f000 fb1e 	bl	800b510 <prvIsQueueFull>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d018      	beq.n	800af0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	3310      	adds	r3, #16
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 f9c0 	bl	800c268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeea:	f000 faa9 	bl	800b440 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeee:	f000 fff1 	bl	800bed4 <xTaskResumeAll>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f47f af7c 	bne.w	800adf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aefa:	4b0c      	ldr	r3, [pc, #48]	; (800af2c <xQueueGenericSend+0x1f8>)
 800aefc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	e772      	b.n	800adf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af0e:	f000 fa97 	bl	800b440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af12:	f000 ffdf 	bl	800bed4 <xTaskResumeAll>
 800af16:	e76c      	b.n	800adf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1a:	f000 fa91 	bl	800b440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af1e:	f000 ffd9 	bl	800bed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af22:	2300      	movs	r3, #0
		}
	}
}
 800af24:	4618      	mov	r0, r3
 800af26:	3738      	adds	r7, #56	; 0x38
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08e      	sub	sp, #56	; 0x38
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <xQueueGenericSendFromISR+0x3c>
 800af64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <xQueueGenericSendFromISR+0x40>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e000      	b.n	800af72 <xQueueGenericSendFromISR+0x42>
 800af70:	2300      	movs	r3, #0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10a      	bne.n	800af8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	623b      	str	r3, [r7, #32]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d103      	bne.n	800af9a <xQueueGenericSendFromISR+0x6a>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af96:	2b01      	cmp	r3, #1
 800af98:	d101      	bne.n	800af9e <xQueueGenericSendFromISR+0x6e>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e000      	b.n	800afa0 <xQueueGenericSendFromISR+0x70>
 800af9e:	2300      	movs	r3, #0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	61fb      	str	r3, [r7, #28]
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afba:	f002 fb89 	bl	800d6d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afbe:	f3ef 8211 	mrs	r2, BASEPRI
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	61ba      	str	r2, [r7, #24]
 800afd4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afd6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d302      	bcc.n	800afec <xQueueGenericSendFromISR+0xbc>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d12c      	bne.n	800b046 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affc:	f000 f990 	bl	800b320 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b000:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d112      	bne.n	800b030 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d016      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b014:	3324      	adds	r3, #36	; 0x24
 800b016:	4618      	mov	r0, r3
 800b018:	f001 f976 	bl	800c308 <xTaskRemoveFromEventList>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00e      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00b      	beq.n	800b040 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e007      	b.n	800b040 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b034:	3301      	adds	r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	b25a      	sxtb	r2, r3
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b040:	2301      	movs	r3, #1
 800b042:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b044:	e001      	b.n	800b04a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b046:	2300      	movs	r3, #0
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b054:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3738      	adds	r7, #56	; 0x38
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08c      	sub	sp, #48	; 0x30
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10a      	bne.n	800b090 <xQueueReceive+0x30>
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	623b      	str	r3, [r7, #32]
}
 800b08c:	bf00      	nop
 800b08e:	e7fe      	b.n	800b08e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d103      	bne.n	800b09e <xQueueReceive+0x3e>
 800b096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <xQueueReceive+0x42>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e000      	b.n	800b0a4 <xQueueReceive+0x44>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <xQueueReceive+0x5e>
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
 800b0b8:	61fb      	str	r3, [r7, #28]
}
 800b0ba:	bf00      	nop
 800b0bc:	e7fe      	b.n	800b0bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0be:	f001 fae7 	bl	800c690 <xTaskGetSchedulerState>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d102      	bne.n	800b0ce <xQueueReceive+0x6e>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <xQueueReceive+0x72>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <xQueueReceive+0x74>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <xQueueReceive+0x8e>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	61bb      	str	r3, [r7, #24]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0ee:	f002 fa2d 	bl	800d54c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d01f      	beq.n	800b13e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0fe:	68b9      	ldr	r1, [r7, #8]
 800b100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b102:	f000 f977 	bl	800b3f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00f      	beq.n	800b136 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	3310      	adds	r3, #16
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 f8f4 	bl	800c308 <xTaskRemoveFromEventList>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d007      	beq.n	800b136 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b126:	4b3d      	ldr	r3, [pc, #244]	; (800b21c <xQueueReceive+0x1bc>)
 800b128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b136:	f002 fa39 	bl	800d5ac <vPortExitCritical>
				return pdPASS;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e069      	b.n	800b212 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b144:	f002 fa32 	bl	800d5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b148:	2300      	movs	r3, #0
 800b14a:	e062      	b.n	800b212 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d106      	bne.n	800b160 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b152:	f107 0310 	add.w	r3, r7, #16
 800b156:	4618      	mov	r0, r3
 800b158:	f001 f938 	bl	800c3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b15c:	2301      	movs	r3, #1
 800b15e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b160:	f002 fa24 	bl	800d5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b164:	f000 fea8 	bl	800beb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b168:	f002 f9f0 	bl	800d54c <vPortEnterCritical>
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b172:	b25b      	sxtb	r3, r3
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d103      	bne.n	800b182 <xQueueReceive+0x122>
 800b17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18e:	d103      	bne.n	800b198 <xQueueReceive+0x138>
 800b190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b198:	f002 fa08 	bl	800d5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b19c:	1d3a      	adds	r2, r7, #4
 800b19e:	f107 0310 	add.w	r3, r7, #16
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 f927 	bl	800c3f8 <xTaskCheckForTimeOut>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d123      	bne.n	800b1f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f000 f997 	bl	800b4e4 <prvIsQueueEmpty>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d017      	beq.n	800b1ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1be:	3324      	adds	r3, #36	; 0x24
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 f84f 	bl	800c268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1cc:	f000 f938 	bl	800b440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1d0:	f000 fe80 	bl	800bed4 <xTaskResumeAll>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d189      	bne.n	800b0ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1da:	4b10      	ldr	r3, [pc, #64]	; (800b21c <xQueueReceive+0x1bc>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	e780      	b.n	800b0ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ee:	f000 f927 	bl	800b440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1f2:	f000 fe6f 	bl	800bed4 <xTaskResumeAll>
 800b1f6:	e77a      	b.n	800b0ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fa:	f000 f921 	bl	800b440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1fe:	f000 fe69 	bl	800bed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b204:	f000 f96e 	bl	800b4e4 <prvIsQueueEmpty>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f43f af6f 	beq.w	800b0ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b212:	4618      	mov	r0, r3
 800b214:	3730      	adds	r7, #48	; 0x30
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b08e      	sub	sp, #56	; 0x38
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	623b      	str	r3, [r7, #32]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d103      	bne.n	800b25a <xQueueReceiveFromISR+0x3a>
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <xQueueReceiveFromISR+0x3e>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e000      	b.n	800b260 <xQueueReceiveFromISR+0x40>
 800b25e:	2300      	movs	r3, #0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d10a      	bne.n	800b27a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	61fb      	str	r3, [r7, #28]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b27a:	f002 fa29 	bl	800d6d0 <vPortValidateInterruptPriority>
	__asm volatile
 800b27e:	f3ef 8211 	mrs	r2, BASEPRI
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	61ba      	str	r2, [r7, #24]
 800b294:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b296:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b298:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d02f      	beq.n	800b306 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2b4:	f000 f89e 	bl	800b3f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	1e5a      	subs	r2, r3, #1
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b2c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c8:	d112      	bne.n	800b2f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d016      	beq.n	800b300 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	3310      	adds	r3, #16
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f001 f816 	bl	800c308 <xTaskRemoveFromEventList>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00e      	beq.n	800b300 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d00b      	beq.n	800b300 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	e007      	b.n	800b300 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	b25a      	sxtb	r2, r3
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b300:	2301      	movs	r3, #1
 800b302:	637b      	str	r3, [r7, #52]	; 0x34
 800b304:	e001      	b.n	800b30a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b306:	2300      	movs	r3, #0
 800b308:	637b      	str	r3, [r7, #52]	; 0x34
 800b30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f383 8811 	msr	BASEPRI, r3
}
 800b314:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3738      	adds	r7, #56	; 0x38
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b334:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10d      	bne.n	800b35a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d14d      	bne.n	800b3e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f001 f9be 	bl	800c6cc <xTaskPriorityDisinherit>
 800b350:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2200      	movs	r2, #0
 800b356:	605a      	str	r2, [r3, #4]
 800b358:	e043      	b.n	800b3e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d119      	bne.n	800b394 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6898      	ldr	r0, [r3, #8]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	461a      	mov	r2, r3
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	f002 fd86 	bl	800de7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689a      	ldr	r2, [r3, #8]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	441a      	add	r2, r3
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689a      	ldr	r2, [r3, #8]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d32b      	bcc.n	800b3e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	609a      	str	r2, [r3, #8]
 800b392:	e026      	b.n	800b3e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	68d8      	ldr	r0, [r3, #12]
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b39c:	461a      	mov	r2, r3
 800b39e:	68b9      	ldr	r1, [r7, #8]
 800b3a0:	f002 fd6c 	bl	800de7c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	68da      	ldr	r2, [r3, #12]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ac:	425b      	negs	r3, r3
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d207      	bcs.n	800b3d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c8:	425b      	negs	r3, r3
 800b3ca:	441a      	add	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d105      	bne.n	800b3e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	1c5a      	adds	r2, r3, #1
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b3ea:	697b      	ldr	r3, [r7, #20]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	2b00      	cmp	r3, #0
 800b404:	d018      	beq.n	800b438 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b40e:	441a      	add	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d303      	bcc.n	800b428 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68d9      	ldr	r1, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b430:	461a      	mov	r2, r3
 800b432:	6838      	ldr	r0, [r7, #0]
 800b434:	f002 fd22 	bl	800de7c <memcpy>
	}
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b448:	f002 f880 	bl	800d54c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b452:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b454:	e011      	b.n	800b47a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d012      	beq.n	800b484 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3324      	adds	r3, #36	; 0x24
 800b462:	4618      	mov	r0, r3
 800b464:	f000 ff50 	bl	800c308 <xTaskRemoveFromEventList>
 800b468:	4603      	mov	r3, r0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b46e:	f001 f825 	bl	800c4bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
 800b474:	3b01      	subs	r3, #1
 800b476:	b2db      	uxtb	r3, r3
 800b478:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	dce9      	bgt.n	800b456 <prvUnlockQueue+0x16>
 800b482:	e000      	b.n	800b486 <prvUnlockQueue+0x46>
					break;
 800b484:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	22ff      	movs	r2, #255	; 0xff
 800b48a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b48e:	f002 f88d 	bl	800d5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b492:	f002 f85b 	bl	800d54c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b49c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b49e:	e011      	b.n	800b4c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3310      	adds	r3, #16
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 ff2b 	bl	800c308 <xTaskRemoveFromEventList>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b4b8:	f001 f800 	bl	800c4bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b4c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	dce9      	bgt.n	800b4a0 <prvUnlockQueue+0x60>
 800b4cc:	e000      	b.n	800b4d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b4ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	22ff      	movs	r2, #255	; 0xff
 800b4d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b4d8:	f002 f868 	bl	800d5ac <vPortExitCritical>
}
 800b4dc:	bf00      	nop
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4ec:	f002 f82e 	bl	800d54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d102      	bne.n	800b4fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	e001      	b.n	800b502 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b502:	f002 f853 	bl	800d5ac <vPortExitCritical>

	return xReturn;
 800b506:	68fb      	ldr	r3, [r7, #12]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b518:	f002 f818 	bl	800d54c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b524:	429a      	cmp	r2, r3
 800b526:	d102      	bne.n	800b52e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b528:	2301      	movs	r3, #1
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e001      	b.n	800b532 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b532:	f002 f83b 	bl	800d5ac <vPortExitCritical>

	return xReturn;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e014      	b.n	800b57a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b550:	4a0e      	ldr	r2, [pc, #56]	; (800b58c <vQueueAddToRegistry+0x4c>)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10b      	bne.n	800b574 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b55c:	490b      	ldr	r1, [pc, #44]	; (800b58c <vQueueAddToRegistry+0x4c>)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b566:	4a09      	ldr	r2, [pc, #36]	; (800b58c <vQueueAddToRegistry+0x4c>)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	00db      	lsls	r3, r3, #3
 800b56c:	4413      	add	r3, r2
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b572:	e006      	b.n	800b582 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	3301      	adds	r3, #1
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2b07      	cmp	r3, #7
 800b57e:	d9e7      	bls.n	800b550 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b580:	bf00      	nop
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	bc80      	pop	{r7}
 800b58a:	4770      	bx	lr
 800b58c:	20001748 	.word	0x20001748

0800b590 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b5a0:	f001 ffd4 	bl	800d54c <vPortEnterCritical>
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b0:	d103      	bne.n	800b5ba <vQueueWaitForMessageRestricted+0x2a>
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5c0:	b25b      	sxtb	r3, r3
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d103      	bne.n	800b5d0 <vQueueWaitForMessageRestricted+0x40>
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5d0:	f001 ffec 	bl	800d5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d106      	bne.n	800b5ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	3324      	adds	r3, #36	; 0x24
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	68b9      	ldr	r1, [r7, #8]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f000 fe63 	bl	800c2b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b5ea:	6978      	ldr	r0, [r7, #20]
 800b5ec:	f7ff ff28 	bl	800b440 <prvUnlockQueue>
	}
 800b5f0:	bf00      	nop
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08e      	sub	sp, #56	; 0x38
 800b5fc:	af04      	add	r7, sp, #16
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10a      	bne.n	800b622 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	623b      	str	r3, [r7, #32]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	2b00      	cmp	r3, #0
 800b626:	d10a      	bne.n	800b63e <xTaskCreateStatic+0x46>
	__asm volatile
 800b628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62c:	f383 8811 	msr	BASEPRI, r3
 800b630:	f3bf 8f6f 	isb	sy
 800b634:	f3bf 8f4f 	dsb	sy
 800b638:	61fb      	str	r3, [r7, #28]
}
 800b63a:	bf00      	nop
 800b63c:	e7fe      	b.n	800b63c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b63e:	23a0      	movs	r3, #160	; 0xa0
 800b640:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	2ba0      	cmp	r3, #160	; 0xa0
 800b646:	d00a      	beq.n	800b65e <xTaskCreateStatic+0x66>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	61bb      	str	r3, [r7, #24]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01e      	beq.n	800b6a2 <xTaskCreateStatic+0xaa>
 800b664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b666:	2b00      	cmp	r3, #0
 800b668:	d01b      	beq.n	800b6a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b672:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b676:	2202      	movs	r2, #2
 800b678:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b67c:	2300      	movs	r3, #0
 800b67e:	9303      	str	r3, [sp, #12]
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	9302      	str	r3, [sp, #8]
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68b9      	ldr	r1, [r7, #8]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 f851 	bl	800b73c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b69a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b69c:	f000 f8e4 	bl	800b868 <prvAddNewTaskToReadyList>
 800b6a0:	e001      	b.n	800b6a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b6a6:	697b      	ldr	r3, [r7, #20]
	}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3728      	adds	r7, #40	; 0x28
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08c      	sub	sp, #48	; 0x30
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	603b      	str	r3, [r7, #0]
 800b6bc:	4613      	mov	r3, r2
 800b6be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c0:	88fb      	ldrh	r3, [r7, #6]
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f002 f841 	bl	800d74c <pvPortMalloc>
 800b6ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00e      	beq.n	800b6f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b6d2:	20a0      	movs	r0, #160	; 0xa0
 800b6d4:	f002 f83a 	bl	800d74c <pvPortMalloc>
 800b6d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d003      	beq.n	800b6e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	631a      	str	r2, [r3, #48]	; 0x30
 800b6e6:	e005      	b.n	800b6f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b6e8:	6978      	ldr	r0, [r7, #20]
 800b6ea:	f002 f8f3 	bl	800d8d4 <vPortFree>
 800b6ee:	e001      	b.n	800b6f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d017      	beq.n	800b72a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b702:	88fa      	ldrh	r2, [r7, #6]
 800b704:	2300      	movs	r3, #0
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	9302      	str	r3, [sp, #8]
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68b9      	ldr	r1, [r7, #8]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 f80f 	bl	800b73c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b71e:	69f8      	ldr	r0, [r7, #28]
 800b720:	f000 f8a2 	bl	800b868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b724:	2301      	movs	r3, #1
 800b726:	61bb      	str	r3, [r7, #24]
 800b728:	e002      	b.n	800b730 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b730:	69bb      	ldr	r3, [r7, #24]
	}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
	...

0800b73c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b754:	3b01      	subs	r3, #1
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	f023 0307 	bic.w	r3, r3, #7
 800b762:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	f003 0307 	and.w	r3, r3, #7
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	617b      	str	r3, [r7, #20]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b784:	2300      	movs	r3, #0
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e012      	b.n	800b7b0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	4413      	add	r3, r2
 800b790:	7819      	ldrb	r1, [r3, #0]
 800b792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4413      	add	r3, r2
 800b798:	3334      	adds	r3, #52	; 0x34
 800b79a:	460a      	mov	r2, r1
 800b79c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d006      	beq.n	800b7b8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	61fb      	str	r3, [r7, #28]
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	2b0f      	cmp	r3, #15
 800b7b4:	d9e9      	bls.n	800b78a <prvInitialiseNewTask+0x4e>
 800b7b6:	e000      	b.n	800b7ba <prvInitialiseNewTask+0x7e>
		{
			break;
 800b7b8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	2b06      	cmp	r3, #6
 800b7c6:	d901      	bls.n	800b7cc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b7c8:	2306      	movs	r3, #6
 800b7ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	2200      	movs	r2, #0
 800b7dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff f8d9 	bl	800a99a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff f8d4 	bl	800a99a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fa:	f1c3 0207 	rsb	r2, r3, #7
 800b7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b800:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b806:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	2200      	movs	r2, #0
 800b80c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b812:	2200      	movs	r2, #0
 800b814:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	334c      	adds	r3, #76	; 0x4c
 800b81c:	224c      	movs	r2, #76	; 0x4c
 800b81e:	2100      	movs	r1, #0
 800b820:	4618      	mov	r0, r3
 800b822:	f002 fa73 	bl	800dd0c <memset>
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	4a0c      	ldr	r2, [pc, #48]	; (800b85c <prvInitialiseNewTask+0x120>)
 800b82a:	651a      	str	r2, [r3, #80]	; 0x50
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	4a0c      	ldr	r2, [pc, #48]	; (800b860 <prvInitialiseNewTask+0x124>)
 800b830:	655a      	str	r2, [r3, #84]	; 0x54
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	4a0b      	ldr	r2, [pc, #44]	; (800b864 <prvInitialiseNewTask+0x128>)
 800b836:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b838:	683a      	ldr	r2, [r7, #0]
 800b83a:	68f9      	ldr	r1, [r7, #12]
 800b83c:	69b8      	ldr	r0, [r7, #24]
 800b83e:	f001 fd93 	bl	800d368 <pxPortInitialiseStack>
 800b842:	4602      	mov	r2, r0
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b852:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b854:	bf00      	nop
 800b856:	3720      	adds	r7, #32
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20002dd8 	.word	0x20002dd8
 800b860:	20002e40 	.word	0x20002e40
 800b864:	20002ea8 	.word	0x20002ea8

0800b868 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b870:	f001 fe6c 	bl	800d54c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b874:	4b2a      	ldr	r3, [pc, #168]	; (800b920 <prvAddNewTaskToReadyList+0xb8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	3301      	adds	r3, #1
 800b87a:	4a29      	ldr	r2, [pc, #164]	; (800b920 <prvAddNewTaskToReadyList+0xb8>)
 800b87c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b87e:	4b29      	ldr	r3, [pc, #164]	; (800b924 <prvAddNewTaskToReadyList+0xbc>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d109      	bne.n	800b89a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b886:	4a27      	ldr	r2, [pc, #156]	; (800b924 <prvAddNewTaskToReadyList+0xbc>)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b88c:	4b24      	ldr	r3, [pc, #144]	; (800b920 <prvAddNewTaskToReadyList+0xb8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b01      	cmp	r3, #1
 800b892:	d110      	bne.n	800b8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b894:	f000 fe36 	bl	800c504 <prvInitialiseTaskLists>
 800b898:	e00d      	b.n	800b8b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b89a:	4b23      	ldr	r3, [pc, #140]	; (800b928 <prvAddNewTaskToReadyList+0xc0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d109      	bne.n	800b8b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b8a2:	4b20      	ldr	r3, [pc, #128]	; (800b924 <prvAddNewTaskToReadyList+0xbc>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d802      	bhi.n	800b8b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b8b0:	4a1c      	ldr	r2, [pc, #112]	; (800b924 <prvAddNewTaskToReadyList+0xbc>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b8b6:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <prvAddNewTaskToReadyList+0xc4>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	4a1b      	ldr	r2, [pc, #108]	; (800b92c <prvAddNewTaskToReadyList+0xc4>)
 800b8be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	409a      	lsls	r2, r3
 800b8c8:	4b19      	ldr	r3, [pc, #100]	; (800b930 <prvAddNewTaskToReadyList+0xc8>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	4a18      	ldr	r2, [pc, #96]	; (800b930 <prvAddNewTaskToReadyList+0xc8>)
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4a15      	ldr	r2, [pc, #84]	; (800b934 <prvAddNewTaskToReadyList+0xcc>)
 800b8e0:	441a      	add	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f7ff f862 	bl	800a9b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b8ee:	f001 fe5d 	bl	800d5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	; (800b928 <prvAddNewTaskToReadyList+0xc0>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00e      	beq.n	800b918 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b8fa:	4b0a      	ldr	r3, [pc, #40]	; (800b924 <prvAddNewTaskToReadyList+0xbc>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b904:	429a      	cmp	r2, r3
 800b906:	d207      	bcs.n	800b918 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b908:	4b0b      	ldr	r3, [pc, #44]	; (800b938 <prvAddNewTaskToReadyList+0xd0>)
 800b90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	f3bf 8f4f 	dsb	sy
 800b914:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20001888 	.word	0x20001888
 800b924:	20001788 	.word	0x20001788
 800b928:	20001894 	.word	0x20001894
 800b92c:	200018a4 	.word	0x200018a4
 800b930:	20001890 	.word	0x20001890
 800b934:	2000178c 	.word	0x2000178c
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b08a      	sub	sp, #40	; 0x28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10a      	bne.n	800b966 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	617b      	str	r3, [r7, #20]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <vTaskDelayUntil+0x46>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	613b      	str	r3, [r7, #16]
}
 800b97e:	bf00      	nop
 800b980:	e7fe      	b.n	800b980 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b982:	4b2a      	ldr	r3, [pc, #168]	; (800ba2c <vTaskDelayUntil+0xf0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d00a      	beq.n	800b9a0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	60fb      	str	r3, [r7, #12]
}
 800b99c:	bf00      	nop
 800b99e:	e7fe      	b.n	800b99e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b9a0:	f000 fa8a 	bl	800beb8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b9a4:	4b22      	ldr	r3, [pc, #136]	; (800ba30 <vTaskDelayUntil+0xf4>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	683a      	ldr	r2, [r7, #0]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6a3a      	ldr	r2, [r7, #32]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d20b      	bcs.n	800b9d6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	69fa      	ldr	r2, [r7, #28]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d211      	bcs.n	800b9ec <vTaskDelayUntil+0xb0>
 800b9c8:	69fa      	ldr	r2, [r7, #28]
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d90d      	bls.n	800b9ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b9d4:	e00a      	b.n	800b9ec <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69fa      	ldr	r2, [r7, #28]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d303      	bcc.n	800b9e8 <vTaskDelayUntil+0xac>
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	6a3b      	ldr	r3, [r7, #32]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d901      	bls.n	800b9ec <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69fa      	ldr	r2, [r7, #28]
 800b9f0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b9f8:	69fa      	ldr	r2, [r7, #28]
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	2100      	movs	r1, #0
 800ba00:	4618      	mov	r0, r3
 800ba02:	f001 f8c3 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ba06:	f000 fa65 	bl	800bed4 <xTaskResumeAll>
 800ba0a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d107      	bne.n	800ba22 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <vTaskDelayUntil+0xf8>)
 800ba14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba22:	bf00      	nop
 800ba24:	3728      	adds	r7, #40	; 0x28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200018b0 	.word	0x200018b0
 800ba30:	2000188c 	.word	0x2000188c
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d017      	beq.n	800ba7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <vTaskDelay+0x60>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <vTaskDelay+0x30>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba68:	f000 fa26 	bl	800beb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f001 f88c 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba74:	f000 fa2e 	bl	800bed4 <xTaskResumeAll>
 800ba78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <vTaskDelay+0x64>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200018b0 	.word	0x200018b0
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800baa8:	f001 fd50 	bl	800d54c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d102      	bne.n	800bab8 <vTaskSuspend+0x18>
 800bab2:	4b3c      	ldr	r3, [pc, #240]	; (800bba4 <vTaskSuspend+0x104>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	e000      	b.n	800baba <vTaskSuspend+0x1a>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe ffd1 	bl	800aa68 <uxListRemove>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d115      	bne.n	800baf8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad0:	4935      	ldr	r1, [pc, #212]	; (800bba8 <vTaskSuspend+0x108>)
 800bad2:	4613      	mov	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	440b      	add	r3, r1
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10a      	bne.n	800baf8 <vTaskSuspend+0x58>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae6:	2201      	movs	r2, #1
 800bae8:	fa02 f303 	lsl.w	r3, r2, r3
 800baec:	43da      	mvns	r2, r3
 800baee:	4b2f      	ldr	r3, [pc, #188]	; (800bbac <vTaskSuspend+0x10c>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4013      	ands	r3, r2
 800baf4:	4a2d      	ldr	r2, [pc, #180]	; (800bbac <vTaskSuspend+0x10c>)
 800baf6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d004      	beq.n	800bb0a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3318      	adds	r3, #24
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fe ffaf 	bl	800aa68 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4827      	ldr	r0, [pc, #156]	; (800bbb0 <vTaskSuspend+0x110>)
 800bb12:	f7fe ff4e 	bl	800a9b2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d103      	bne.n	800bb2a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bb2a:	f001 fd3f 	bl	800d5ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bb2e:	4b21      	ldr	r3, [pc, #132]	; (800bbb4 <vTaskSuspend+0x114>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bb36:	f001 fd09 	bl	800d54c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bb3a:	f000 fd85 	bl	800c648 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bb3e:	f001 fd35 	bl	800d5ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bb42:	4b18      	ldr	r3, [pc, #96]	; (800bba4 <vTaskSuspend+0x104>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68fa      	ldr	r2, [r7, #12]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d127      	bne.n	800bb9c <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800bb4c:	4b19      	ldr	r3, [pc, #100]	; (800bbb4 <vTaskSuspend+0x114>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d017      	beq.n	800bb84 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bb54:	4b18      	ldr	r3, [pc, #96]	; (800bbb8 <vTaskSuspend+0x118>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d00a      	beq.n	800bb72 <vTaskSuspend+0xd2>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60bb      	str	r3, [r7, #8]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <vTaskSuspend+0x11c>)
 800bb74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb82:	e00b      	b.n	800bb9c <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800bb84:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <vTaskSuspend+0x110>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	4b0d      	ldr	r3, [pc, #52]	; (800bbc0 <vTaskSuspend+0x120>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d103      	bne.n	800bb98 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800bb90:	4b04      	ldr	r3, [pc, #16]	; (800bba4 <vTaskSuspend+0x104>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
	}
 800bb96:	e001      	b.n	800bb9c <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800bb98:	f000 fb04 	bl	800c1a4 <vTaskSwitchContext>
	}
 800bb9c:	bf00      	nop
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20001788 	.word	0x20001788
 800bba8:	2000178c 	.word	0x2000178c
 800bbac:	20001890 	.word	0x20001890
 800bbb0:	20001874 	.word	0x20001874
 800bbb4:	20001894 	.word	0x20001894
 800bbb8:	200018b0 	.word	0x200018b0
 800bbbc:	e000ed04 	.word	0xe000ed04
 800bbc0:	20001888 	.word	0x20001888

0800bbc4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b087      	sub	sp, #28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10a      	bne.n	800bbf0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	60fb      	str	r3, [r7, #12]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	4a0e      	ldr	r2, [pc, #56]	; (800bc30 <prvTaskIsTaskSuspended+0x6c>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d101      	bne.n	800bbfe <prvTaskIsTaskSuspended+0x3a>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <prvTaskIsTaskSuspended+0x3c>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00f      	beq.n	800bc24 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	4a0a      	ldr	r2, [pc, #40]	; (800bc34 <prvTaskIsTaskSuspended+0x70>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d00a      	beq.n	800bc24 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <prvTaskIsTaskSuspended+0x56>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e000      	b.n	800bc1c <prvTaskIsTaskSuspended+0x58>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d001      	beq.n	800bc24 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800bc20:	2301      	movs	r3, #1
 800bc22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc24:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bc26:	4618      	mov	r0, r3
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bc80      	pop	{r7}
 800bc2e:	4770      	bx	lr
 800bc30:	20001874 	.word	0x20001874
 800bc34:	20001848 	.word	0x20001848

0800bc38 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <vTaskResume+0x28>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	60bb      	str	r3, [r7, #8]
}
 800bc5c:	bf00      	nop
 800bc5e:	e7fe      	b.n	800bc5e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d039      	beq.n	800bcda <vTaskResume+0xa2>
 800bc66:	4b1f      	ldr	r3, [pc, #124]	; (800bce4 <vTaskResume+0xac>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d034      	beq.n	800bcda <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800bc70:	f001 fc6c 	bl	800d54c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f7ff ffa5 	bl	800bbc4 <prvTaskIsTaskSuspended>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d02a      	beq.n	800bcd6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3304      	adds	r3, #4
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fe feef 	bl	800aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8e:	2201      	movs	r2, #1
 800bc90:	409a      	lsls	r2, r3
 800bc92:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <vTaskResume+0xb0>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	4a13      	ldr	r2, [pc, #76]	; (800bce8 <vTaskResume+0xb0>)
 800bc9a:	6013      	str	r3, [r2, #0]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca0:	4613      	mov	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4413      	add	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4a10      	ldr	r2, [pc, #64]	; (800bcec <vTaskResume+0xb4>)
 800bcaa:	441a      	add	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f7fe fe7d 	bl	800a9b2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcbc:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <vTaskResume+0xac>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d307      	bcc.n	800bcd6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <vTaskResume+0xb8>)
 800bcc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bcd6:	f001 fc69 	bl	800d5ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
 800bce2:	bf00      	nop
 800bce4:	20001788 	.word	0x20001788
 800bce8:	20001890 	.word	0x20001890
 800bcec:	2000178c 	.word	0x2000178c
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b08a      	sub	sp, #40	; 0x28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	61bb      	str	r3, [r7, #24]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd20:	f001 fcd6 	bl	800d6d0 <vPortValidateInterruptPriority>
	__asm volatile
 800bd24:	f3ef 8211 	mrs	r2, BASEPRI
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	617a      	str	r2, [r7, #20]
 800bd3a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bd3c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd3e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bd40:	6a38      	ldr	r0, [r7, #32]
 800bd42:	f7ff ff3f 	bl	800bbc4 <prvTaskIsTaskSuspended>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d02f      	beq.n	800bdac <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd4c:	4b1d      	ldr	r3, [pc, #116]	; (800bdc4 <xTaskResumeFromISR+0xd0>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d125      	bne.n	800bda0 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd58:	4b1b      	ldr	r3, [pc, #108]	; (800bdc8 <xTaskResumeFromISR+0xd4>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d301      	bcc.n	800bd66 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800bd62:	2301      	movs	r3, #1
 800bd64:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	3304      	adds	r3, #4
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe fe7c 	bl	800aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	2201      	movs	r2, #1
 800bd76:	409a      	lsls	r2, r3
 800bd78:	4b14      	ldr	r3, [pc, #80]	; (800bdcc <xTaskResumeFromISR+0xd8>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	4a13      	ldr	r2, [pc, #76]	; (800bdcc <xTaskResumeFromISR+0xd8>)
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	6a3b      	ldr	r3, [r7, #32]
 800bd84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a10      	ldr	r2, [pc, #64]	; (800bdd0 <xTaskResumeFromISR+0xdc>)
 800bd90:	441a      	add	r2, r3
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f7fe fe0a 	bl	800a9b2 <vListInsertEnd>
 800bd9e:	e005      	b.n	800bdac <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	3318      	adds	r3, #24
 800bda4:	4619      	mov	r1, r3
 800bda6:	480b      	ldr	r0, [pc, #44]	; (800bdd4 <xTaskResumeFromISR+0xe0>)
 800bda8:	f7fe fe03 	bl	800a9b2 <vListInsertEnd>
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f383 8811 	msr	BASEPRI, r3
}
 800bdb6:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3728      	adds	r7, #40	; 0x28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200018b0 	.word	0x200018b0
 800bdc8:	20001788 	.word	0x20001788
 800bdcc:	20001890 	.word	0x20001890
 800bdd0:	2000178c 	.word	0x2000178c
 800bdd4:	20001848 	.word	0x20001848

0800bdd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b08a      	sub	sp, #40	; 0x28
 800bddc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bde6:	463a      	mov	r2, r7
 800bde8:	1d39      	adds	r1, r7, #4
 800bdea:	f107 0308 	add.w	r3, r7, #8
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7f6 f93e 	bl	8002070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	9202      	str	r2, [sp, #8]
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	2300      	movs	r3, #0
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	2300      	movs	r3, #0
 800be04:	460a      	mov	r2, r1
 800be06:	4924      	ldr	r1, [pc, #144]	; (800be98 <vTaskStartScheduler+0xc0>)
 800be08:	4824      	ldr	r0, [pc, #144]	; (800be9c <vTaskStartScheduler+0xc4>)
 800be0a:	f7ff fbf5 	bl	800b5f8 <xTaskCreateStatic>
 800be0e:	4603      	mov	r3, r0
 800be10:	4a23      	ldr	r2, [pc, #140]	; (800bea0 <vTaskStartScheduler+0xc8>)
 800be12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be14:	4b22      	ldr	r3, [pc, #136]	; (800bea0 <vTaskStartScheduler+0xc8>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be1c:	2301      	movs	r3, #1
 800be1e:	617b      	str	r3, [r7, #20]
 800be20:	e001      	b.n	800be26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be22:	2300      	movs	r3, #0
 800be24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d102      	bne.n	800be32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800be2c:	f000 ff14 	bl	800cc58 <xTimerCreateTimerTask>
 800be30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d11b      	bne.n	800be70 <vTaskStartScheduler+0x98>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	613b      	str	r3, [r7, #16]
}
 800be4a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800be4c:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <vTaskStartScheduler+0xcc>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	334c      	adds	r3, #76	; 0x4c
 800be52:	4a15      	ldr	r2, [pc, #84]	; (800bea8 <vTaskStartScheduler+0xd0>)
 800be54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800be56:	4b15      	ldr	r3, [pc, #84]	; (800beac <vTaskStartScheduler+0xd4>)
 800be58:	f04f 32ff 	mov.w	r2, #4294967295
 800be5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800be5e:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <vTaskStartScheduler+0xd8>)
 800be60:	2201      	movs	r2, #1
 800be62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800be64:	4b13      	ldr	r3, [pc, #76]	; (800beb4 <vTaskStartScheduler+0xdc>)
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800be6a:	f001 fafd 	bl	800d468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800be6e:	e00e      	b.n	800be8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d10a      	bne.n	800be8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <vTaskStartScheduler+0xb4>
}
 800be8e:	bf00      	nop
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop
 800be98:	0800e954 	.word	0x0800e954
 800be9c:	0800c4d5 	.word	0x0800c4d5
 800bea0:	200018ac 	.word	0x200018ac
 800bea4:	20001788 	.word	0x20001788
 800bea8:	2000025c 	.word	0x2000025c
 800beac:	200018a8 	.word	0x200018a8
 800beb0:	20001894 	.word	0x20001894
 800beb4:	2000188c 	.word	0x2000188c

0800beb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800beb8:	b480      	push	{r7}
 800beba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bebc:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <vTaskSuspendAll+0x18>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3301      	adds	r3, #1
 800bec2:	4a03      	ldr	r2, [pc, #12]	; (800bed0 <vTaskSuspendAll+0x18>)
 800bec4:	6013      	str	r3, [r2, #0]
}
 800bec6:	bf00      	nop
 800bec8:	46bd      	mov	sp, r7
 800beca:	bc80      	pop	{r7}
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	200018b0 	.word	0x200018b0

0800bed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800beda:	2300      	movs	r3, #0
 800bedc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bede:	2300      	movs	r3, #0
 800bee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bee2:	4b41      	ldr	r3, [pc, #260]	; (800bfe8 <xTaskResumeAll+0x114>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d10a      	bne.n	800bf00 <xTaskResumeAll+0x2c>
	__asm volatile
 800beea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beee:	f383 8811 	msr	BASEPRI, r3
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	f3bf 8f4f 	dsb	sy
 800befa:	603b      	str	r3, [r7, #0]
}
 800befc:	bf00      	nop
 800befe:	e7fe      	b.n	800befe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf00:	f001 fb24 	bl	800d54c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf04:	4b38      	ldr	r3, [pc, #224]	; (800bfe8 <xTaskResumeAll+0x114>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	4a37      	ldr	r2, [pc, #220]	; (800bfe8 <xTaskResumeAll+0x114>)
 800bf0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf0e:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <xTaskResumeAll+0x114>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d161      	bne.n	800bfda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf16:	4b35      	ldr	r3, [pc, #212]	; (800bfec <xTaskResumeAll+0x118>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d05d      	beq.n	800bfda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf1e:	e02e      	b.n	800bf7e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bf20:	4b33      	ldr	r3, [pc, #204]	; (800bff0 <xTaskResumeAll+0x11c>)
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	3318      	adds	r3, #24
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe fd9b 	bl	800aa68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3304      	adds	r3, #4
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fd96 	bl	800aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	2201      	movs	r2, #1
 800bf42:	409a      	lsls	r2, r3
 800bf44:	4b2b      	ldr	r3, [pc, #172]	; (800bff4 <xTaskResumeAll+0x120>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	4a2a      	ldr	r2, [pc, #168]	; (800bff4 <xTaskResumeAll+0x120>)
 800bf4c:	6013      	str	r3, [r2, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4a27      	ldr	r2, [pc, #156]	; (800bff8 <xTaskResumeAll+0x124>)
 800bf5c:	441a      	add	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	3304      	adds	r3, #4
 800bf62:	4619      	mov	r1, r3
 800bf64:	4610      	mov	r0, r2
 800bf66:	f7fe fd24 	bl	800a9b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6e:	4b23      	ldr	r3, [pc, #140]	; (800bffc <xTaskResumeAll+0x128>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d302      	bcc.n	800bf7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bf78:	4b21      	ldr	r3, [pc, #132]	; (800c000 <xTaskResumeAll+0x12c>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf7e:	4b1c      	ldr	r3, [pc, #112]	; (800bff0 <xTaskResumeAll+0x11c>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1cc      	bne.n	800bf20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bf8c:	f000 fb5c 	bl	800c648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800bf90:	4b1c      	ldr	r3, [pc, #112]	; (800c004 <xTaskResumeAll+0x130>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d010      	beq.n	800bfbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bf9c:	f000 f844 	bl	800c028 <xTaskIncrementTick>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d002      	beq.n	800bfac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <xTaskResumeAll+0x12c>)
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f1      	bne.n	800bf9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800bfb8:	4b12      	ldr	r3, [pc, #72]	; (800c004 <xTaskResumeAll+0x130>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bfbe:	4b10      	ldr	r3, [pc, #64]	; (800c000 <xTaskResumeAll+0x12c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bfca:	4b0f      	ldr	r3, [pc, #60]	; (800c008 <xTaskResumeAll+0x134>)
 800bfcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfda:	f001 fae7 	bl	800d5ac <vPortExitCritical>

	return xAlreadyYielded;
 800bfde:	68bb      	ldr	r3, [r7, #8]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3710      	adds	r7, #16
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	200018b0 	.word	0x200018b0
 800bfec:	20001888 	.word	0x20001888
 800bff0:	20001848 	.word	0x20001848
 800bff4:	20001890 	.word	0x20001890
 800bff8:	2000178c 	.word	0x2000178c
 800bffc:	20001788 	.word	0x20001788
 800c000:	2000189c 	.word	0x2000189c
 800c004:	20001898 	.word	0x20001898
 800c008:	e000ed04 	.word	0xe000ed04

0800c00c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c012:	4b04      	ldr	r3, [pc, #16]	; (800c024 <xTaskGetTickCount+0x18>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c018:	687b      	ldr	r3, [r7, #4]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	370c      	adds	r7, #12
 800c01e:	46bd      	mov	sp, r7
 800c020:	bc80      	pop	{r7}
 800c022:	4770      	bx	lr
 800c024:	2000188c 	.word	0x2000188c

0800c028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b086      	sub	sp, #24
 800c02c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c02e:	2300      	movs	r3, #0
 800c030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c032:	4b51      	ldr	r3, [pc, #324]	; (800c178 <xTaskIncrementTick+0x150>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	f040 808d 	bne.w	800c156 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c03c:	4b4f      	ldr	r3, [pc, #316]	; (800c17c <xTaskIncrementTick+0x154>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c044:	4a4d      	ldr	r2, [pc, #308]	; (800c17c <xTaskIncrementTick+0x154>)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d120      	bne.n	800c092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c050:	4b4b      	ldr	r3, [pc, #300]	; (800c180 <xTaskIncrementTick+0x158>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00a      	beq.n	800c070 <xTaskIncrementTick+0x48>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	603b      	str	r3, [r7, #0]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <xTaskIncrementTick+0x46>
 800c070:	4b43      	ldr	r3, [pc, #268]	; (800c180 <xTaskIncrementTick+0x158>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60fb      	str	r3, [r7, #12]
 800c076:	4b43      	ldr	r3, [pc, #268]	; (800c184 <xTaskIncrementTick+0x15c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a41      	ldr	r2, [pc, #260]	; (800c180 <xTaskIncrementTick+0x158>)
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	4a41      	ldr	r2, [pc, #260]	; (800c184 <xTaskIncrementTick+0x15c>)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	4b40      	ldr	r3, [pc, #256]	; (800c188 <xTaskIncrementTick+0x160>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	3301      	adds	r3, #1
 800c08a:	4a3f      	ldr	r2, [pc, #252]	; (800c188 <xTaskIncrementTick+0x160>)
 800c08c:	6013      	str	r3, [r2, #0]
 800c08e:	f000 fadb 	bl	800c648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c092:	4b3e      	ldr	r3, [pc, #248]	; (800c18c <xTaskIncrementTick+0x164>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d34d      	bcc.n	800c138 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c09c:	4b38      	ldr	r3, [pc, #224]	; (800c180 <xTaskIncrementTick+0x158>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <xTaskIncrementTick+0x82>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <xTaskIncrementTick+0x84>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0b0:	4b36      	ldr	r3, [pc, #216]	; (800c18c <xTaskIncrementTick+0x164>)
 800c0b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b6:	601a      	str	r2, [r3, #0]
					break;
 800c0b8:	e03e      	b.n	800c138 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c0ba:	4b31      	ldr	r3, [pc, #196]	; (800c180 <xTaskIncrementTick+0x158>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d203      	bcs.n	800c0da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c0d2:	4a2e      	ldr	r2, [pc, #184]	; (800c18c <xTaskIncrementTick+0x164>)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6013      	str	r3, [r2, #0]
						break;
 800c0d8:	e02e      	b.n	800c138 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fcc2 	bl	800aa68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	3318      	adds	r3, #24
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fe fcb9 	bl	800aa68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	409a      	lsls	r2, r3
 800c0fe:	4b24      	ldr	r3, [pc, #144]	; (800c190 <xTaskIncrementTick+0x168>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4313      	orrs	r3, r2
 800c104:	4a22      	ldr	r2, [pc, #136]	; (800c190 <xTaskIncrementTick+0x168>)
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10c:	4613      	mov	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4a1f      	ldr	r2, [pc, #124]	; (800c194 <xTaskIncrementTick+0x16c>)
 800c116:	441a      	add	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7fe fc47 	bl	800a9b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c128:	4b1b      	ldr	r3, [pc, #108]	; (800c198 <xTaskIncrementTick+0x170>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12e:	429a      	cmp	r2, r3
 800c130:	d3b4      	bcc.n	800c09c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c132:	2301      	movs	r3, #1
 800c134:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c136:	e7b1      	b.n	800c09c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c138:	4b17      	ldr	r3, [pc, #92]	; (800c198 <xTaskIncrementTick+0x170>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c13e:	4915      	ldr	r1, [pc, #84]	; (800c194 <xTaskIncrementTick+0x16c>)
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d907      	bls.n	800c160 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c150:	2301      	movs	r3, #1
 800c152:	617b      	str	r3, [r7, #20]
 800c154:	e004      	b.n	800c160 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c156:	4b11      	ldr	r3, [pc, #68]	; (800c19c <xTaskIncrementTick+0x174>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3301      	adds	r3, #1
 800c15c:	4a0f      	ldr	r2, [pc, #60]	; (800c19c <xTaskIncrementTick+0x174>)
 800c15e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c160:	4b0f      	ldr	r3, [pc, #60]	; (800c1a0 <xTaskIncrementTick+0x178>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c168:	2301      	movs	r3, #1
 800c16a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c16c:	697b      	ldr	r3, [r7, #20]
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3718      	adds	r7, #24
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	200018b0 	.word	0x200018b0
 800c17c:	2000188c 	.word	0x2000188c
 800c180:	20001840 	.word	0x20001840
 800c184:	20001844 	.word	0x20001844
 800c188:	200018a0 	.word	0x200018a0
 800c18c:	200018a8 	.word	0x200018a8
 800c190:	20001890 	.word	0x20001890
 800c194:	2000178c 	.word	0x2000178c
 800c198:	20001788 	.word	0x20001788
 800c19c:	20001898 	.word	0x20001898
 800c1a0:	2000189c 	.word	0x2000189c

0800c1a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b087      	sub	sp, #28
 800c1a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c1aa:	4b29      	ldr	r3, [pc, #164]	; (800c250 <vTaskSwitchContext+0xac>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c1b2:	4b28      	ldr	r3, [pc, #160]	; (800c254 <vTaskSwitchContext+0xb0>)
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c1b8:	e044      	b.n	800c244 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c1ba:	4b26      	ldr	r3, [pc, #152]	; (800c254 <vTaskSwitchContext+0xb0>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c1c0:	4b25      	ldr	r3, [pc, #148]	; (800c258 <vTaskSwitchContext+0xb4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	fab3 f383 	clz	r3, r3
 800c1cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	f1c3 031f 	rsb	r3, r3, #31
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	4921      	ldr	r1, [pc, #132]	; (800c25c <vTaskSwitchContext+0xb8>)
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	440b      	add	r3, r1
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	607b      	str	r3, [r7, #4]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <vTaskSwitchContext+0x5a>
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4a14      	ldr	r2, [pc, #80]	; (800c25c <vTaskSwitchContext+0xb8>)
 800c20c:	4413      	add	r3, r2
 800c20e:	613b      	str	r3, [r7, #16]
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	3308      	adds	r3, #8
 800c222:	429a      	cmp	r2, r3
 800c224:	d104      	bne.n	800c230 <vTaskSwitchContext+0x8c>
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	605a      	str	r2, [r3, #4]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4a0a      	ldr	r2, [pc, #40]	; (800c260 <vTaskSwitchContext+0xbc>)
 800c238:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c23a:	4b09      	ldr	r3, [pc, #36]	; (800c260 <vTaskSwitchContext+0xbc>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	334c      	adds	r3, #76	; 0x4c
 800c240:	4a08      	ldr	r2, [pc, #32]	; (800c264 <vTaskSwitchContext+0xc0>)
 800c242:	6013      	str	r3, [r2, #0]
}
 800c244:	bf00      	nop
 800c246:	371c      	adds	r7, #28
 800c248:	46bd      	mov	sp, r7
 800c24a:	bc80      	pop	{r7}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	200018b0 	.word	0x200018b0
 800c254:	2000189c 	.word	0x2000189c
 800c258:	20001890 	.word	0x20001890
 800c25c:	2000178c 	.word	0x2000178c
 800c260:	20001788 	.word	0x20001788
 800c264:	2000025c 	.word	0x2000025c

0800c268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10a      	bne.n	800c28e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	60fb      	str	r3, [r7, #12]
}
 800c28a:	bf00      	nop
 800c28c:	e7fe      	b.n	800c28c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c28e:	4b07      	ldr	r3, [pc, #28]	; (800c2ac <vTaskPlaceOnEventList+0x44>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	3318      	adds	r3, #24
 800c294:	4619      	mov	r1, r3
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7fe fbae 	bl	800a9f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c29c:	2101      	movs	r1, #1
 800c29e:	6838      	ldr	r0, [r7, #0]
 800c2a0:	f000 fc74 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
}
 800c2a4:	bf00      	nop
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20001788 	.word	0x20001788

0800c2b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	617b      	str	r3, [r7, #20]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c2d8:	4b0a      	ldr	r3, [pc, #40]	; (800c304 <vTaskPlaceOnEventListRestricted+0x54>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3318      	adds	r3, #24
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7fe fb66 	bl	800a9b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c2f2:	6879      	ldr	r1, [r7, #4]
 800c2f4:	68b8      	ldr	r0, [r7, #8]
 800c2f6:	f000 fc49 	bl	800cb8c <prvAddCurrentTaskToDelayedList>
	}
 800c2fa:	bf00      	nop
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20001788 	.word	0x20001788

0800c308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10a      	bne.n	800c334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	60fb      	str	r3, [r7, #12]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3318      	adds	r3, #24
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe fb95 	bl	800aa68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c33e:	4b1d      	ldr	r3, [pc, #116]	; (800c3b4 <xTaskRemoveFromEventList+0xac>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d11c      	bne.n	800c380 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fe fb8c 	bl	800aa68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	2201      	movs	r2, #1
 800c356:	409a      	lsls	r2, r3
 800c358:	4b17      	ldr	r3, [pc, #92]	; (800c3b8 <xTaskRemoveFromEventList+0xb0>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	4a16      	ldr	r2, [pc, #88]	; (800c3b8 <xTaskRemoveFromEventList+0xb0>)
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c366:	4613      	mov	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4413      	add	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4a13      	ldr	r2, [pc, #76]	; (800c3bc <xTaskRemoveFromEventList+0xb4>)
 800c370:	441a      	add	r2, r3
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	3304      	adds	r3, #4
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fe fb1a 	bl	800a9b2 <vListInsertEnd>
 800c37e:	e005      	b.n	800c38c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	3318      	adds	r3, #24
 800c384:	4619      	mov	r1, r3
 800c386:	480e      	ldr	r0, [pc, #56]	; (800c3c0 <xTaskRemoveFromEventList+0xb8>)
 800c388:	f7fe fb13 	bl	800a9b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c390:	4b0c      	ldr	r3, [pc, #48]	; (800c3c4 <xTaskRemoveFromEventList+0xbc>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c396:	429a      	cmp	r2, r3
 800c398:	d905      	bls.n	800c3a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c39a:	2301      	movs	r3, #1
 800c39c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c39e:	4b0a      	ldr	r3, [pc, #40]	; (800c3c8 <xTaskRemoveFromEventList+0xc0>)
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	e001      	b.n	800c3aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c3aa:	697b      	ldr	r3, [r7, #20]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200018b0 	.word	0x200018b0
 800c3b8:	20001890 	.word	0x20001890
 800c3bc:	2000178c 	.word	0x2000178c
 800c3c0:	20001848 	.word	0x20001848
 800c3c4:	20001788 	.word	0x20001788
 800c3c8:	2000189c 	.word	0x2000189c

0800c3cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c3d4:	4b06      	ldr	r3, [pc, #24]	; (800c3f0 <vTaskInternalSetTimeOutState+0x24>)
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c3dc:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <vTaskInternalSetTimeOutState+0x28>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	605a      	str	r2, [r3, #4]
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bc80      	pop	{r7}
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	200018a0 	.word	0x200018a0
 800c3f4:	2000188c 	.word	0x2000188c

0800c3f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	613b      	str	r3, [r7, #16]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10a      	bne.n	800c43a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	60fb      	str	r3, [r7, #12]
}
 800c436:	bf00      	nop
 800c438:	e7fe      	b.n	800c438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c43a:	f001 f887 	bl	800d54c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c43e:	4b1d      	ldr	r3, [pc, #116]	; (800c4b4 <xTaskCheckForTimeOut+0xbc>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c456:	d102      	bne.n	800c45e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c458:	2300      	movs	r3, #0
 800c45a:	61fb      	str	r3, [r7, #28]
 800c45c:	e023      	b.n	800c4a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4b15      	ldr	r3, [pc, #84]	; (800c4b8 <xTaskCheckForTimeOut+0xc0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d007      	beq.n	800c47a <xTaskCheckForTimeOut+0x82>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	69ba      	ldr	r2, [r7, #24]
 800c470:	429a      	cmp	r2, r3
 800c472:	d302      	bcc.n	800c47a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c474:	2301      	movs	r3, #1
 800c476:	61fb      	str	r3, [r7, #28]
 800c478:	e015      	b.n	800c4a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	429a      	cmp	r2, r3
 800c482:	d20b      	bcs.n	800c49c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	1ad2      	subs	r2, r2, r3
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7ff ff9b 	bl	800c3cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c496:	2300      	movs	r3, #0
 800c498:	61fb      	str	r3, [r7, #28]
 800c49a:	e004      	b.n	800c4a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c4a6:	f001 f881 	bl	800d5ac <vPortExitCritical>

	return xReturn;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	2000188c 	.word	0x2000188c
 800c4b8:	200018a0 	.word	0x200018a0

0800c4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c4c0:	4b03      	ldr	r3, [pc, #12]	; (800c4d0 <vTaskMissedYield+0x14>)
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	601a      	str	r2, [r3, #0]
}
 800c4c6:	bf00      	nop
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bc80      	pop	{r7}
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	2000189c 	.word	0x2000189c

0800c4d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c4dc:	f000 f852 	bl	800c584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <prvIdleTask+0x28>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d9f9      	bls.n	800c4dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c4e8:	4b05      	ldr	r3, [pc, #20]	; (800c500 <prvIdleTask+0x2c>)
 800c4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ee:	601a      	str	r2, [r3, #0]
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c4f8:	e7f0      	b.n	800c4dc <prvIdleTask+0x8>
 800c4fa:	bf00      	nop
 800c4fc:	2000178c 	.word	0x2000178c
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c50a:	2300      	movs	r3, #0
 800c50c:	607b      	str	r3, [r7, #4]
 800c50e:	e00c      	b.n	800c52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4a12      	ldr	r2, [pc, #72]	; (800c564 <prvInitialiseTaskLists+0x60>)
 800c51c:	4413      	add	r3, r2
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe fa1c 	bl	800a95c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3301      	adds	r3, #1
 800c528:	607b      	str	r3, [r7, #4]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b06      	cmp	r3, #6
 800c52e:	d9ef      	bls.n	800c510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c530:	480d      	ldr	r0, [pc, #52]	; (800c568 <prvInitialiseTaskLists+0x64>)
 800c532:	f7fe fa13 	bl	800a95c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c536:	480d      	ldr	r0, [pc, #52]	; (800c56c <prvInitialiseTaskLists+0x68>)
 800c538:	f7fe fa10 	bl	800a95c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c53c:	480c      	ldr	r0, [pc, #48]	; (800c570 <prvInitialiseTaskLists+0x6c>)
 800c53e:	f7fe fa0d 	bl	800a95c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c542:	480c      	ldr	r0, [pc, #48]	; (800c574 <prvInitialiseTaskLists+0x70>)
 800c544:	f7fe fa0a 	bl	800a95c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c548:	480b      	ldr	r0, [pc, #44]	; (800c578 <prvInitialiseTaskLists+0x74>)
 800c54a:	f7fe fa07 	bl	800a95c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c54e:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <prvInitialiseTaskLists+0x78>)
 800c550:	4a05      	ldr	r2, [pc, #20]	; (800c568 <prvInitialiseTaskLists+0x64>)
 800c552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c554:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <prvInitialiseTaskLists+0x7c>)
 800c556:	4a05      	ldr	r2, [pc, #20]	; (800c56c <prvInitialiseTaskLists+0x68>)
 800c558:	601a      	str	r2, [r3, #0]
}
 800c55a:	bf00      	nop
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	2000178c 	.word	0x2000178c
 800c568:	20001818 	.word	0x20001818
 800c56c:	2000182c 	.word	0x2000182c
 800c570:	20001848 	.word	0x20001848
 800c574:	2000185c 	.word	0x2000185c
 800c578:	20001874 	.word	0x20001874
 800c57c:	20001840 	.word	0x20001840
 800c580:	20001844 	.word	0x20001844

0800c584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c58a:	e019      	b.n	800c5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c58c:	f000 ffde 	bl	800d54c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c590:	4b10      	ldr	r3, [pc, #64]	; (800c5d4 <prvCheckTasksWaitingTermination+0x50>)
 800c592:	68db      	ldr	r3, [r3, #12]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	3304      	adds	r3, #4
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fe fa63 	bl	800aa68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <prvCheckTasksWaitingTermination+0x54>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	4a0b      	ldr	r2, [pc, #44]	; (800c5d8 <prvCheckTasksWaitingTermination+0x54>)
 800c5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c5ac:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <prvCheckTasksWaitingTermination+0x58>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	4a0a      	ldr	r2, [pc, #40]	; (800c5dc <prvCheckTasksWaitingTermination+0x58>)
 800c5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c5b6:	f000 fff9 	bl	800d5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f810 	bl	800c5e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c5c0:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <prvCheckTasksWaitingTermination+0x58>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1e1      	bne.n	800c58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c5c8:	bf00      	nop
 800c5ca:	bf00      	nop
 800c5cc:	3708      	adds	r7, #8
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	2000185c 	.word	0x2000185c
 800c5d8:	20001888 	.word	0x20001888
 800c5dc:	20001870 	.word	0x20001870

0800c5e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	334c      	adds	r3, #76	; 0x4c
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fbab 	bl	800dd48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d108      	bne.n	800c60e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c600:	4618      	mov	r0, r3
 800c602:	f001 f967 	bl	800d8d4 <vPortFree>
				vPortFree( pxTCB );
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f001 f964 	bl	800d8d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c60c:	e018      	b.n	800c640 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c614:	2b01      	cmp	r3, #1
 800c616:	d103      	bne.n	800c620 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 f95b 	bl	800d8d4 <vPortFree>
	}
 800c61e:	e00f      	b.n	800c640 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c626:	2b02      	cmp	r3, #2
 800c628:	d00a      	beq.n	800c640 <prvDeleteTCB+0x60>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	60fb      	str	r3, [r7, #12]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <prvDeleteTCB+0x5e>
	}
 800c640:	bf00      	nop
 800c642:	3710      	adds	r7, #16
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c64e:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <prvResetNextTaskUnblockTime+0x40>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <prvResetNextTaskUnblockTime+0x14>
 800c658:	2301      	movs	r3, #1
 800c65a:	e000      	b.n	800c65e <prvResetNextTaskUnblockTime+0x16>
 800c65c:	2300      	movs	r3, #0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c662:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <prvResetNextTaskUnblockTime+0x44>)
 800c664:	f04f 32ff 	mov.w	r2, #4294967295
 800c668:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c66a:	e008      	b.n	800c67e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c66c:	4b06      	ldr	r3, [pc, #24]	; (800c688 <prvResetNextTaskUnblockTime+0x40>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	4a04      	ldr	r2, [pc, #16]	; (800c68c <prvResetNextTaskUnblockTime+0x44>)
 800c67c:	6013      	str	r3, [r2, #0]
}
 800c67e:	bf00      	nop
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	bc80      	pop	{r7}
 800c686:	4770      	bx	lr
 800c688:	20001840 	.word	0x20001840
 800c68c:	200018a8 	.word	0x200018a8

0800c690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c696:	4b0b      	ldr	r3, [pc, #44]	; (800c6c4 <xTaskGetSchedulerState+0x34>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d102      	bne.n	800c6a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	607b      	str	r3, [r7, #4]
 800c6a2:	e008      	b.n	800c6b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a4:	4b08      	ldr	r3, [pc, #32]	; (800c6c8 <xTaskGetSchedulerState+0x38>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d102      	bne.n	800c6b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	607b      	str	r3, [r7, #4]
 800c6b0:	e001      	b.n	800c6b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6b6:	687b      	ldr	r3, [r7, #4]
	}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	370c      	adds	r7, #12
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bc80      	pop	{r7}
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20001894 	.word	0x20001894
 800c6c8:	200018b0 	.word	0x200018b0

0800c6cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b086      	sub	sp, #24
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d06e      	beq.n	800c7c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c6e2:	4b3a      	ldr	r3, [pc, #232]	; (800c7cc <xTaskPriorityDisinherit+0x100>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d00a      	beq.n	800c702 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	60fb      	str	r3, [r7, #12]
}
 800c6fe:	bf00      	nop
 800c700:	e7fe      	b.n	800c700 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	60bb      	str	r3, [r7, #8]
}
 800c71c:	bf00      	nop
 800c71e:	e7fe      	b.n	800c71e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c724:	1e5a      	subs	r2, r3, #1
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c732:	429a      	cmp	r2, r3
 800c734:	d044      	beq.n	800c7c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d140      	bne.n	800c7c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3304      	adds	r3, #4
 800c742:	4618      	mov	r0, r3
 800c744:	f7fe f990 	bl	800aa68 <uxListRemove>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d115      	bne.n	800c77a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c752:	491f      	ldr	r1, [pc, #124]	; (800c7d0 <xTaskPriorityDisinherit+0x104>)
 800c754:	4613      	mov	r3, r2
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	4413      	add	r3, r2
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	440b      	add	r3, r1
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10a      	bne.n	800c77a <xTaskPriorityDisinherit+0xae>
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c768:	2201      	movs	r2, #1
 800c76a:	fa02 f303 	lsl.w	r3, r2, r3
 800c76e:	43da      	mvns	r2, r3
 800c770:	4b18      	ldr	r3, [pc, #96]	; (800c7d4 <xTaskPriorityDisinherit+0x108>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4013      	ands	r3, r2
 800c776:	4a17      	ldr	r2, [pc, #92]	; (800c7d4 <xTaskPriorityDisinherit+0x108>)
 800c778:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	f1c3 0207 	rsb	r2, r3, #7
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c792:	2201      	movs	r2, #1
 800c794:	409a      	lsls	r2, r3
 800c796:	4b0f      	ldr	r3, [pc, #60]	; (800c7d4 <xTaskPriorityDisinherit+0x108>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4313      	orrs	r3, r2
 800c79c:	4a0d      	ldr	r2, [pc, #52]	; (800c7d4 <xTaskPriorityDisinherit+0x108>)
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4a08      	ldr	r2, [pc, #32]	; (800c7d0 <xTaskPriorityDisinherit+0x104>)
 800c7ae:	441a      	add	r2, r3
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	f7fe f8fb 	bl	800a9b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c7c0:	697b      	ldr	r3, [r7, #20]
	}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3718      	adds	r7, #24
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	20001788 	.word	0x20001788
 800c7d0:	2000178c 	.word	0x2000178c
 800c7d4:	20001890 	.word	0x20001890

0800c7d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c7e6:	f000 feb1 	bl	800d54c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c7ea:	4b29      	ldr	r3, [pc, #164]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d01c      	beq.n	800c832 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c7f8:	4b25      	ldr	r3, [pc, #148]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	43d2      	mvns	r2, r2
 800c804:	400a      	ands	r2, r1
 800c806:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c80a:	4b21      	ldr	r3, [pc, #132]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00b      	beq.n	800c832 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c81a:	2101      	movs	r1, #1
 800c81c:	6838      	ldr	r0, [r7, #0]
 800c81e:	f000 f9b5 	bl	800cb8c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c822:	4b1c      	ldr	r3, [pc, #112]	; (800c894 <xTaskNotifyWait+0xbc>)
 800c824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c832:	f000 febb 	bl	800d5ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800c836:	f000 fe89 	bl	800d54c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d005      	beq.n	800c84c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c840:	4b13      	ldr	r3, [pc, #76]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c84c:	4b10      	ldr	r3, [pc, #64]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b02      	cmp	r3, #2
 800c858:	d002      	beq.n	800c860 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c85a:	2300      	movs	r3, #0
 800c85c:	617b      	str	r3, [r7, #20]
 800c85e:	e00a      	b.n	800c876 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c860:	4b0b      	ldr	r3, [pc, #44]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	43d2      	mvns	r2, r2
 800c86c:	400a      	ands	r2, r1
 800c86e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800c872:	2301      	movs	r3, #1
 800c874:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c876:	4b06      	ldr	r3, [pc, #24]	; (800c890 <xTaskNotifyWait+0xb8>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800c880:	f000 fe94 	bl	800d5ac <vPortExitCritical>

		return xReturn;
 800c884:	697b      	ldr	r3, [r7, #20]
	}
 800c886:	4618      	mov	r0, r3
 800c888:	3718      	adds	r7, #24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	20001788 	.word	0x20001788
 800c894:	e000ed04 	.word	0xe000ed04

0800c898 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b08a      	sub	sp, #40	; 0x28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10a      	bne.n	800c8c8 <xTaskGenericNotify+0x30>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	61bb      	str	r3, [r7, #24]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c8cc:	f000 fe3e 	bl	800d54c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d004      	beq.n	800c8e0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c8d6:	6a3b      	ldr	r3, [r7, #32]
 800c8d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c8e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c8e8:	6a3b      	ldr	r3, [r7, #32]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d82d      	bhi.n	800c952 <xTaskGenericNotify+0xba>
 800c8f6:	a201      	add	r2, pc, #4	; (adr r2, 800c8fc <xTaskGenericNotify+0x64>)
 800c8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fc:	0800c953 	.word	0x0800c953
 800c900:	0800c911 	.word	0x0800c911
 800c904:	0800c923 	.word	0x0800c923
 800c908:	0800c933 	.word	0x0800c933
 800c90c:	0800c93d 	.word	0x0800c93d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	431a      	orrs	r2, r3
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c920:	e017      	b.n	800c952 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	6a3b      	ldr	r3, [r7, #32]
 800c92c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c930:	e00f      	b.n	800c952 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c93a:	e00a      	b.n	800c952 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c93c:	7ffb      	ldrb	r3, [r7, #31]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d004      	beq.n	800c94c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c942:	6a3b      	ldr	r3, [r7, #32]
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c94a:	e001      	b.n	800c950 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c950:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d139      	bne.n	800c9cc <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	3304      	adds	r3, #4
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fe f883 	bl	800aa68 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c966:	2201      	movs	r2, #1
 800c968:	409a      	lsls	r2, r3
 800c96a:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <xTaskGenericNotify+0x144>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4313      	orrs	r3, r2
 800c970:	4a1a      	ldr	r2, [pc, #104]	; (800c9dc <xTaskGenericNotify+0x144>)
 800c972:	6013      	str	r3, [r2, #0]
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c978:	4613      	mov	r3, r2
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4a17      	ldr	r2, [pc, #92]	; (800c9e0 <xTaskGenericNotify+0x148>)
 800c982:	441a      	add	r2, r3
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4610      	mov	r0, r2
 800c98c:	f7fe f811 	bl	800a9b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00a      	beq.n	800c9ae <xTaskGenericNotify+0x116>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	f383 8811 	msr	BASEPRI, r3
 800c9a0:	f3bf 8f6f 	isb	sy
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	617b      	str	r3, [r7, #20]
}
 800c9aa:	bf00      	nop
 800c9ac:	e7fe      	b.n	800c9ac <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9ae:	6a3b      	ldr	r3, [r7, #32]
 800c9b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b2:	4b0c      	ldr	r3, [pc, #48]	; (800c9e4 <xTaskGenericNotify+0x14c>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d907      	bls.n	800c9cc <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <xTaskGenericNotify+0x150>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c9cc:	f000 fdee 	bl	800d5ac <vPortExitCritical>

		return xReturn;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3728      	adds	r7, #40	; 0x28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	20001890 	.word	0x20001890
 800c9e0:	2000178c 	.word	0x2000178c
 800c9e4:	20001788 	.word	0x20001788
 800c9e8:	e000ed04 	.word	0xe000ed04

0800c9ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08e      	sub	sp, #56	; 0x38
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	4613      	mov	r3, r2
 800c9fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10a      	bne.n	800ca1c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca18:	bf00      	nop
 800ca1a:	e7fe      	b.n	800ca1a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca1c:	f000 fe58 	bl	800d6d0 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ca24:	f3ef 8211 	mrs	r2, BASEPRI
 800ca28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	623a      	str	r2, [r7, #32]
 800ca3a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ca3c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d004      	beq.n	800ca50 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ca56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	2202      	movs	r2, #2
 800ca5e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b04      	cmp	r3, #4
 800ca66:	d82f      	bhi.n	800cac8 <xTaskGenericNotifyFromISR+0xdc>
 800ca68:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <xTaskGenericNotifyFromISR+0x84>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800cac9 	.word	0x0800cac9
 800ca74:	0800ca85 	.word	0x0800ca85
 800ca78:	0800ca97 	.word	0x0800ca97
 800ca7c:	0800caa7 	.word	0x0800caa7
 800ca80:	0800cab1 	.word	0x0800cab1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca86:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800ca94:	e018      	b.n	800cac8 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca9c:	1c5a      	adds	r2, r3, #1
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800caa4:	e010      	b.n	800cac8 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800caae:	e00b      	b.n	800cac8 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cab0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d004      	beq.n	800cac2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cac0:	e001      	b.n	800cac6 <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cac6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d146      	bne.n	800cb5e <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00a      	beq.n	800caee <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cadc:	f383 8811 	msr	BASEPRI, r3
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	f3bf 8f4f 	dsb	sy
 800cae8:	61bb      	str	r3, [r7, #24]
}
 800caea:	bf00      	nop
 800caec:	e7fe      	b.n	800caec <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caee:	4b21      	ldr	r3, [pc, #132]	; (800cb74 <xTaskGenericNotifyFromISR+0x188>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d11c      	bne.n	800cb30 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	3304      	adds	r3, #4
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fd ffb4 	bl	800aa68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb04:	2201      	movs	r2, #1
 800cb06:	409a      	lsls	r2, r3
 800cb08:	4b1b      	ldr	r3, [pc, #108]	; (800cb78 <xTaskGenericNotifyFromISR+0x18c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	4a1a      	ldr	r2, [pc, #104]	; (800cb78 <xTaskGenericNotifyFromISR+0x18c>)
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4a17      	ldr	r2, [pc, #92]	; (800cb7c <xTaskGenericNotifyFromISR+0x190>)
 800cb20:	441a      	add	r2, r3
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	3304      	adds	r3, #4
 800cb26:	4619      	mov	r1, r3
 800cb28:	4610      	mov	r0, r2
 800cb2a:	f7fd ff42 	bl	800a9b2 <vListInsertEnd>
 800cb2e:	e005      	b.n	800cb3c <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	3318      	adds	r3, #24
 800cb34:	4619      	mov	r1, r3
 800cb36:	4812      	ldr	r0, [pc, #72]	; (800cb80 <xTaskGenericNotifyFromISR+0x194>)
 800cb38:	f7fd ff3b 	bl	800a9b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb40:	4b10      	ldr	r3, [pc, #64]	; (800cb84 <xTaskGenericNotifyFromISR+0x198>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d909      	bls.n	800cb5e <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d003      	beq.n	800cb58 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cb50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb52:	2201      	movs	r2, #1
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e002      	b.n	800cb5e <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <xTaskGenericNotifyFromISR+0x19c>)
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f383 8811 	msr	BASEPRI, r3
}
 800cb68:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cb6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3738      	adds	r7, #56	; 0x38
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	200018b0 	.word	0x200018b0
 800cb78:	20001890 	.word	0x20001890
 800cb7c:	2000178c 	.word	0x2000178c
 800cb80:	20001848 	.word	0x20001848
 800cb84:	20001788 	.word	0x20001788
 800cb88:	2000189c 	.word	0x2000189c

0800cb8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb96:	4b29      	ldr	r3, [pc, #164]	; (800cc3c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb9c:	4b28      	ldr	r3, [pc, #160]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd ff60 	bl	800aa68 <uxListRemove>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10b      	bne.n	800cbc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cbae:	4b24      	ldr	r3, [pc, #144]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbba:	43da      	mvns	r2, r3
 800cbbc:	4b21      	ldr	r3, [pc, #132]	; (800cc44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	4a20      	ldr	r2, [pc, #128]	; (800cc44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cbc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbcc:	d10a      	bne.n	800cbe4 <prvAddCurrentTaskToDelayedList+0x58>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d007      	beq.n	800cbe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd4:	4b1a      	ldr	r3, [pc, #104]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3304      	adds	r3, #4
 800cbda:	4619      	mov	r1, r3
 800cbdc:	481a      	ldr	r0, [pc, #104]	; (800cc48 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cbde:	f7fd fee8 	bl	800a9b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbe2:	e026      	b.n	800cc32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	4413      	add	r3, r2
 800cbea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbec:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbf4:	68ba      	ldr	r2, [r7, #8]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d209      	bcs.n	800cc10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbfc:	4b13      	ldr	r3, [pc, #76]	; (800cc4c <prvAddCurrentTaskToDelayedList+0xc0>)
 800cbfe:	681a      	ldr	r2, [r3, #0]
 800cc00:	4b0f      	ldr	r3, [pc, #60]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	3304      	adds	r3, #4
 800cc06:	4619      	mov	r1, r3
 800cc08:	4610      	mov	r0, r2
 800cc0a:	f7fd fef5 	bl	800a9f8 <vListInsert>
}
 800cc0e:	e010      	b.n	800cc32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc10:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	4b0a      	ldr	r3, [pc, #40]	; (800cc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	f7fd feeb 	bl	800a9f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc22:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d202      	bcs.n	800cc32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cc2c:	4a09      	ldr	r2, [pc, #36]	; (800cc54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6013      	str	r3, [r2, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	2000188c 	.word	0x2000188c
 800cc40:	20001788 	.word	0x20001788
 800cc44:	20001890 	.word	0x20001890
 800cc48:	20001874 	.word	0x20001874
 800cc4c:	20001844 	.word	0x20001844
 800cc50:	20001840 	.word	0x20001840
 800cc54:	200018a8 	.word	0x200018a8

0800cc58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08a      	sub	sp, #40	; 0x28
 800cc5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc62:	f000 fb41 	bl	800d2e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc66:	4b1c      	ldr	r3, [pc, #112]	; (800ccd8 <xTimerCreateTimerTask+0x80>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d021      	beq.n	800ccb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc76:	1d3a      	adds	r2, r7, #4
 800cc78:	f107 0108 	add.w	r1, r7, #8
 800cc7c:	f107 030c 	add.w	r3, r7, #12
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7f5 fa0d 	bl	80020a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	9202      	str	r2, [sp, #8]
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	2302      	movs	r3, #2
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	2300      	movs	r3, #0
 800cc96:	460a      	mov	r2, r1
 800cc98:	4910      	ldr	r1, [pc, #64]	; (800ccdc <xTimerCreateTimerTask+0x84>)
 800cc9a:	4811      	ldr	r0, [pc, #68]	; (800cce0 <xTimerCreateTimerTask+0x88>)
 800cc9c:	f7fe fcac 	bl	800b5f8 <xTaskCreateStatic>
 800cca0:	4603      	mov	r3, r0
 800cca2:	4a10      	ldr	r2, [pc, #64]	; (800cce4 <xTimerCreateTimerTask+0x8c>)
 800cca4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cca6:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <xTimerCreateTimerTask+0x8c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10a      	bne.n	800ccce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ccb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccbc:	f383 8811 	msr	BASEPRI, r3
 800ccc0:	f3bf 8f6f 	isb	sy
 800ccc4:	f3bf 8f4f 	dsb	sy
 800ccc8:	613b      	str	r3, [r7, #16]
}
 800ccca:	bf00      	nop
 800cccc:	e7fe      	b.n	800cccc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ccce:	697b      	ldr	r3, [r7, #20]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3718      	adds	r7, #24
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	200018e4 	.word	0x200018e4
 800ccdc:	0800e95c 	.word	0x0800e95c
 800cce0:	0800cf25 	.word	0x0800cf25
 800cce4:	200018e8 	.word	0x200018e8

0800cce8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b088      	sub	sp, #32
 800ccec:	af02      	add	r7, sp, #8
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800ccf6:	202c      	movs	r0, #44	; 0x2c
 800ccf8:	f000 fd28 	bl	800d74c <pvPortMalloc>
 800ccfc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00d      	beq.n	800cd20 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	68b9      	ldr	r1, [r7, #8]
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f846 	bl	800cda4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800cd20:	697b      	ldr	r3, [r7, #20]
	}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b08a      	sub	sp, #40	; 0x28
 800cd2e:	af02      	add	r7, sp, #8
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	607a      	str	r2, [r7, #4]
 800cd36:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cd38:	232c      	movs	r3, #44	; 0x2c
 800cd3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	2b2c      	cmp	r3, #44	; 0x2c
 800cd40:	d00a      	beq.n	800cd58 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	61bb      	str	r3, [r7, #24]
}
 800cd54:	bf00      	nop
 800cd56:	e7fe      	b.n	800cd56 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <xTimerCreateStatic+0x4a>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	617b      	str	r3, [r7, #20]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00d      	beq.n	800cd9a <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd7e:	69fb      	ldr	r3, [r7, #28]
 800cd80:	9301      	str	r3, [sp, #4]
 800cd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	68b9      	ldr	r1, [r7, #8]
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f000 f809 	bl	800cda4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800cd9a:	69fb      	ldr	r3, [r7, #28]
	}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3720      	adds	r7, #32
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b086      	sub	sp, #24
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	617b      	str	r3, [r7, #20]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d015      	beq.n	800ce00 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cdd4:	f000 fa88 	bl	800d2e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800cdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fd fdcd 	bl	800a99a <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ce00:	bf00      	nop
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b08a      	sub	sp, #40	; 0x28
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	60f8      	str	r0, [r7, #12]
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	607a      	str	r2, [r7, #4]
 800ce14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce16:	2300      	movs	r3, #0
 800ce18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10a      	bne.n	800ce36 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	623b      	str	r3, [r7, #32]
}
 800ce32:	bf00      	nop
 800ce34:	e7fe      	b.n	800ce34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce36:	4b1a      	ldr	r3, [pc, #104]	; (800cea0 <xTimerGenericCommand+0x98>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d02a      	beq.n	800ce94 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b05      	cmp	r3, #5
 800ce4e:	dc18      	bgt.n	800ce82 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ce50:	f7ff fc1e 	bl	800c690 <xTaskGetSchedulerState>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d109      	bne.n	800ce6e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ce5a:	4b11      	ldr	r3, [pc, #68]	; (800cea0 <xTimerGenericCommand+0x98>)
 800ce5c:	6818      	ldr	r0, [r3, #0]
 800ce5e:	f107 0114 	add.w	r1, r7, #20
 800ce62:	2300      	movs	r3, #0
 800ce64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce66:	f7fd ff65 	bl	800ad34 <xQueueGenericSend>
 800ce6a:	6278      	str	r0, [r7, #36]	; 0x24
 800ce6c:	e012      	b.n	800ce94 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ce6e:	4b0c      	ldr	r3, [pc, #48]	; (800cea0 <xTimerGenericCommand+0x98>)
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	f107 0114 	add.w	r1, r7, #20
 800ce76:	2300      	movs	r3, #0
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f7fd ff5b 	bl	800ad34 <xQueueGenericSend>
 800ce7e:	6278      	str	r0, [r7, #36]	; 0x24
 800ce80:	e008      	b.n	800ce94 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ce82:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <xTimerGenericCommand+0x98>)
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	f107 0114 	add.w	r1, r7, #20
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	683a      	ldr	r2, [r7, #0]
 800ce8e:	f7fe f84f 	bl	800af30 <xQueueGenericSendFromISR>
 800ce92:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3728      	adds	r7, #40	; 0x28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	200018e4 	.word	0x200018e4

0800cea4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ceae:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <prvProcessExpiredTimer+0x7c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fd fdd3 	bl	800aa68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d122      	bne.n	800cf10 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	699a      	ldr	r2, [r3, #24]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	18d1      	adds	r1, r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	6978      	ldr	r0, [r7, #20]
 800ced8:	f000 f8c8 	bl	800d06c <prvInsertTimerInActiveList>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d016      	beq.n	800cf10 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cee2:	2300      	movs	r3, #0
 800cee4:	9300      	str	r3, [sp, #0]
 800cee6:	2300      	movs	r3, #0
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	2100      	movs	r1, #0
 800ceec:	6978      	ldr	r0, [r7, #20]
 800ceee:	f7ff ff8b 	bl	800ce08 <xTimerGenericCommand>
 800cef2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10a      	bne.n	800cf10 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	60fb      	str	r3, [r7, #12]
}
 800cf0c:	bf00      	nop
 800cf0e:	e7fe      	b.n	800cf0e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	6978      	ldr	r0, [r7, #20]
 800cf16:	4798      	blx	r3
}
 800cf18:	bf00      	nop
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	200018dc 	.word	0x200018dc

0800cf24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf2c:	f107 0308 	add.w	r3, r7, #8
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 f857 	bl	800cfe4 <prvGetNextExpireTime>
 800cf36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f000 f803 	bl	800cf48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cf42:	f000 f8d5 	bl	800d0f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cf46:	e7f1      	b.n	800cf2c <prvTimerTask+0x8>

0800cf48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cf52:	f7fe ffb1 	bl	800beb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cf56:	f107 0308 	add.w	r3, r7, #8
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 f866 	bl	800d02c <prvSampleTimeNow>
 800cf60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d130      	bne.n	800cfca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <prvProcessTimerOrBlockTask+0x3c>
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d806      	bhi.n	800cf84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cf76:	f7fe ffad 	bl	800bed4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cf7a:	68f9      	ldr	r1, [r7, #12]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ff91 	bl	800cea4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cf82:	e024      	b.n	800cfce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d008      	beq.n	800cf9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf8a:	4b13      	ldr	r3, [pc, #76]	; (800cfd8 <prvProcessTimerOrBlockTask+0x90>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	bf0c      	ite	eq
 800cf94:	2301      	moveq	r3, #1
 800cf96:	2300      	movne	r3, #0
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf9c:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <prvProcessTimerOrBlockTask+0x94>)
 800cf9e:	6818      	ldr	r0, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	f7fe faf1 	bl	800b590 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cfae:	f7fe ff91 	bl	800bed4 <xTaskResumeAll>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10a      	bne.n	800cfce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cfb8:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <prvProcessTimerOrBlockTask+0x98>)
 800cfba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	f3bf 8f6f 	isb	sy
}
 800cfc8:	e001      	b.n	800cfce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cfca:	f7fe ff83 	bl	800bed4 <xTaskResumeAll>
}
 800cfce:	bf00      	nop
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	200018e0 	.word	0x200018e0
 800cfdc:	200018e4 	.word	0x200018e4
 800cfe0:	e000ed04 	.word	0xe000ed04

0800cfe4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cfec:	4b0e      	ldr	r3, [pc, #56]	; (800d028 <prvGetNextExpireTime+0x44>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bf0c      	ite	eq
 800cff6:	2301      	moveq	r3, #1
 800cff8:	2300      	movne	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	461a      	mov	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d105      	bne.n	800d016 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d00a:	4b07      	ldr	r3, [pc, #28]	; (800d028 <prvGetNextExpireTime+0x44>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	60fb      	str	r3, [r7, #12]
 800d014:	e001      	b.n	800d01a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d016:	2300      	movs	r3, #0
 800d018:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d01a:	68fb      	ldr	r3, [r7, #12]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	bc80      	pop	{r7}
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	200018dc 	.word	0x200018dc

0800d02c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d034:	f7fe ffea 	bl	800c00c <xTaskGetTickCount>
 800d038:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d03a:	4b0b      	ldr	r3, [pc, #44]	; (800d068 <prvSampleTimeNow+0x3c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	68fa      	ldr	r2, [r7, #12]
 800d040:	429a      	cmp	r2, r3
 800d042:	d205      	bcs.n	800d050 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d044:	f000 f8ee 	bl	800d224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	e002      	b.n	800d056 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d056:	4a04      	ldr	r2, [pc, #16]	; (800d068 <prvSampleTimeNow+0x3c>)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d05c:	68fb      	ldr	r3, [r7, #12]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3710      	adds	r7, #16
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	200018ec 	.word	0x200018ec

0800d06c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	607a      	str	r2, [r7, #4]
 800d078:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d07a:	2300      	movs	r3, #0
 800d07c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d812      	bhi.n	800d0b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	1ad2      	subs	r2, r2, r3
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d302      	bcc.n	800d0a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	617b      	str	r3, [r7, #20]
 800d0a4:	e01b      	b.n	800d0de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d0a6:	4b10      	ldr	r3, [pc, #64]	; (800d0e8 <prvInsertTimerInActiveList+0x7c>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	f7fd fca1 	bl	800a9f8 <vListInsert>
 800d0b6:	e012      	b.n	800d0de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d206      	bcs.n	800d0ce <prvInsertTimerInActiveList+0x62>
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d302      	bcc.n	800d0ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	617b      	str	r3, [r7, #20]
 800d0cc:	e007      	b.n	800d0de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0ce:	4b07      	ldr	r3, [pc, #28]	; (800d0ec <prvInsertTimerInActiveList+0x80>)
 800d0d0:	681a      	ldr	r2, [r3, #0]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f7fd fc8d 	bl	800a9f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d0de:	697b      	ldr	r3, [r7, #20]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3718      	adds	r7, #24
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	200018e0 	.word	0x200018e0
 800d0ec:	200018dc 	.word	0x200018dc

0800d0f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b08c      	sub	sp, #48	; 0x30
 800d0f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0f6:	e081      	b.n	800d1fc <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	db7e      	blt.n	800d1fc <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d004      	beq.n	800d114 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	3304      	adds	r3, #4
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fd fcaa 	bl	800aa68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d114:	1d3b      	adds	r3, r7, #4
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff ff88 	bl	800d02c <prvSampleTimeNow>
 800d11c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b09      	cmp	r3, #9
 800d122:	d86a      	bhi.n	800d1fa <prvProcessReceivedCommands+0x10a>
 800d124:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <prvProcessReceivedCommands+0x3c>)
 800d126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12a:	bf00      	nop
 800d12c:	0800d155 	.word	0x0800d155
 800d130:	0800d155 	.word	0x0800d155
 800d134:	0800d155 	.word	0x0800d155
 800d138:	0800d1fd 	.word	0x0800d1fd
 800d13c:	0800d1b1 	.word	0x0800d1b1
 800d140:	0800d1e9 	.word	0x0800d1e9
 800d144:	0800d155 	.word	0x0800d155
 800d148:	0800d155 	.word	0x0800d155
 800d14c:	0800d1fd 	.word	0x0800d1fd
 800d150:	0800d1b1 	.word	0x0800d1b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	18d1      	adds	r1, r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a3a      	ldr	r2, [r7, #32]
 800d160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d162:	f7ff ff83 	bl	800d06c <prvInsertTimerInActiveList>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d047      	beq.n	800d1fc <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d172:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	69db      	ldr	r3, [r3, #28]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d13f      	bne.n	800d1fc <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	441a      	add	r2, r3
 800d184:	2300      	movs	r3, #0
 800d186:	9300      	str	r3, [sp, #0]
 800d188:	2300      	movs	r3, #0
 800d18a:	2100      	movs	r1, #0
 800d18c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d18e:	f7ff fe3b 	bl	800ce08 <xTimerGenericCommand>
 800d192:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d130      	bne.n	800d1fc <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800d19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d19e:	f383 8811 	msr	BASEPRI, r3
 800d1a2:	f3bf 8f6f 	isb	sy
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	61bb      	str	r3, [r7, #24]
}
 800d1ac:	bf00      	nop
 800d1ae:	e7fe      	b.n	800d1ae <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d10a      	bne.n	800d1d4 <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800d1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c2:	f383 8811 	msr	BASEPRI, r3
 800d1c6:	f3bf 8f6f 	isb	sy
 800d1ca:	f3bf 8f4f 	dsb	sy
 800d1ce:	617b      	str	r3, [r7, #20]
}
 800d1d0:	bf00      	nop
 800d1d2:	e7fe      	b.n	800d1d2 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	699a      	ldr	r2, [r3, #24]
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	18d1      	adds	r1, r2, r3
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	6a3a      	ldr	r2, [r7, #32]
 800d1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1e2:	f7ff ff43 	bl	800d06c <prvInsertTimerInActiveList>
					break;
 800d1e6:	e009      	b.n	800d1fc <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d104      	bne.n	800d1fc <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800d1f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1f4:	f000 fb6e 	bl	800d8d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d1f8:	e000      	b.n	800d1fc <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800d1fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d1fc:	4b08      	ldr	r3, [pc, #32]	; (800d220 <prvProcessReceivedCommands+0x130>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f107 0108 	add.w	r1, r7, #8
 800d204:	2200      	movs	r2, #0
 800d206:	4618      	mov	r0, r3
 800d208:	f7fd ff2a 	bl	800b060 <xQueueReceive>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f47f af72 	bne.w	800d0f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	3728      	adds	r7, #40	; 0x28
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	200018e4 	.word	0x200018e4

0800d224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d22a:	e045      	b.n	800d2b8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d22c:	4b2c      	ldr	r3, [pc, #176]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d236:	4b2a      	ldr	r3, [pc, #168]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	3304      	adds	r3, #4
 800d244:	4618      	mov	r0, r3
 800d246:	f7fd fc0f 	bl	800aa68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	2b01      	cmp	r3, #1
 800d258:	d12e      	bne.n	800d2b8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	4413      	add	r3, r2
 800d262:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d90e      	bls.n	800d28a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d278:	4b19      	ldr	r3, [pc, #100]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	3304      	adds	r3, #4
 800d280:	4619      	mov	r1, r3
 800d282:	4610      	mov	r0, r2
 800d284:	f7fd fbb8 	bl	800a9f8 <vListInsert>
 800d288:	e016      	b.n	800d2b8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d28a:	2300      	movs	r3, #0
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	2300      	movs	r3, #0
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	2100      	movs	r1, #0
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f7ff fdb7 	bl	800ce08 <xTimerGenericCommand>
 800d29a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d10a      	bne.n	800d2b8 <prvSwitchTimerLists+0x94>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	603b      	str	r3, [r7, #0]
}
 800d2b4:	bf00      	nop
 800d2b6:	e7fe      	b.n	800d2b6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2b8:	4b09      	ldr	r3, [pc, #36]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1b4      	bne.n	800d22c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d2c2:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d2c8:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <prvSwitchTimerLists+0xc0>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a04      	ldr	r2, [pc, #16]	; (800d2e0 <prvSwitchTimerLists+0xbc>)
 800d2ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d2d0:	4a04      	ldr	r2, [pc, #16]	; (800d2e4 <prvSwitchTimerLists+0xc0>)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	6013      	str	r3, [r2, #0]
}
 800d2d6:	bf00      	nop
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	200018dc 	.word	0x200018dc
 800d2e4:	200018e0 	.word	0x200018e0

0800d2e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d2ee:	f000 f92d 	bl	800d54c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d2f2:	4b15      	ldr	r3, [pc, #84]	; (800d348 <prvCheckForValidListAndQueue+0x60>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d120      	bne.n	800d33c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d2fa:	4814      	ldr	r0, [pc, #80]	; (800d34c <prvCheckForValidListAndQueue+0x64>)
 800d2fc:	f7fd fb2e 	bl	800a95c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d300:	4813      	ldr	r0, [pc, #76]	; (800d350 <prvCheckForValidListAndQueue+0x68>)
 800d302:	f7fd fb2b 	bl	800a95c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d306:	4b13      	ldr	r3, [pc, #76]	; (800d354 <prvCheckForValidListAndQueue+0x6c>)
 800d308:	4a10      	ldr	r2, [pc, #64]	; (800d34c <prvCheckForValidListAndQueue+0x64>)
 800d30a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d30c:	4b12      	ldr	r3, [pc, #72]	; (800d358 <prvCheckForValidListAndQueue+0x70>)
 800d30e:	4a10      	ldr	r2, [pc, #64]	; (800d350 <prvCheckForValidListAndQueue+0x68>)
 800d310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d312:	2300      	movs	r3, #0
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4b11      	ldr	r3, [pc, #68]	; (800d35c <prvCheckForValidListAndQueue+0x74>)
 800d318:	4a11      	ldr	r2, [pc, #68]	; (800d360 <prvCheckForValidListAndQueue+0x78>)
 800d31a:	210c      	movs	r1, #12
 800d31c:	200a      	movs	r0, #10
 800d31e:	f7fd fc35 	bl	800ab8c <xQueueGenericCreateStatic>
 800d322:	4603      	mov	r3, r0
 800d324:	4a08      	ldr	r2, [pc, #32]	; (800d348 <prvCheckForValidListAndQueue+0x60>)
 800d326:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d328:	4b07      	ldr	r3, [pc, #28]	; (800d348 <prvCheckForValidListAndQueue+0x60>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d005      	beq.n	800d33c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d330:	4b05      	ldr	r3, [pc, #20]	; (800d348 <prvCheckForValidListAndQueue+0x60>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	490b      	ldr	r1, [pc, #44]	; (800d364 <prvCheckForValidListAndQueue+0x7c>)
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe f902 	bl	800b540 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d33c:	f000 f936 	bl	800d5ac <vPortExitCritical>
}
 800d340:	bf00      	nop
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	200018e4 	.word	0x200018e4
 800d34c:	200018b4 	.word	0x200018b4
 800d350:	200018c8 	.word	0x200018c8
 800d354:	200018dc 	.word	0x200018dc
 800d358:	200018e0 	.word	0x200018e0
 800d35c:	20001968 	.word	0x20001968
 800d360:	200018f0 	.word	0x200018f0
 800d364:	0800e964 	.word	0x0800e964

0800d368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3b04      	subs	r3, #4
 800d378:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	3b04      	subs	r3, #4
 800d386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	f023 0201 	bic.w	r2, r3, #1
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	3b04      	subs	r3, #4
 800d396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d398:	4a08      	ldr	r2, [pc, #32]	; (800d3bc <pxPortInitialiseStack+0x54>)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3b14      	subs	r3, #20
 800d3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3b20      	subs	r3, #32
 800d3ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bc80      	pop	{r7}
 800d3ba:	4770      	bx	lr
 800d3bc:	0800d3c1 	.word	0x0800d3c1

0800d3c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d3ca:	4b12      	ldr	r3, [pc, #72]	; (800d414 <prvTaskExitError+0x54>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d2:	d00a      	beq.n	800d3ea <prvTaskExitError+0x2a>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	60fb      	str	r3, [r7, #12]
}
 800d3e6:	bf00      	nop
 800d3e8:	e7fe      	b.n	800d3e8 <prvTaskExitError+0x28>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	f383 8811 	msr	BASEPRI, r3
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	f3bf 8f4f 	dsb	sy
 800d3fa:	60bb      	str	r3, [r7, #8]
}
 800d3fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d3fe:	bf00      	nop
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d0fc      	beq.n	800d400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d406:	bf00      	nop
 800d408:	bf00      	nop
 800d40a:	3714      	adds	r7, #20
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bc80      	pop	{r7}
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	2000020c 	.word	0x2000020c
	...

0800d420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d420:	4b07      	ldr	r3, [pc, #28]	; (800d440 <pxCurrentTCBConst2>)
 800d422:	6819      	ldr	r1, [r3, #0]
 800d424:	6808      	ldr	r0, [r1, #0]
 800d426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d42a:	f380 8809 	msr	PSP, r0
 800d42e:	f3bf 8f6f 	isb	sy
 800d432:	f04f 0000 	mov.w	r0, #0
 800d436:	f380 8811 	msr	BASEPRI, r0
 800d43a:	f04e 0e0d 	orr.w	lr, lr, #13
 800d43e:	4770      	bx	lr

0800d440 <pxCurrentTCBConst2>:
 800d440:	20001788 	.word	0x20001788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop

0800d448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d448:	4806      	ldr	r0, [pc, #24]	; (800d464 <prvPortStartFirstTask+0x1c>)
 800d44a:	6800      	ldr	r0, [r0, #0]
 800d44c:	6800      	ldr	r0, [r0, #0]
 800d44e:	f380 8808 	msr	MSP, r0
 800d452:	b662      	cpsie	i
 800d454:	b661      	cpsie	f
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	df00      	svc	0
 800d460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d462:	bf00      	nop
 800d464:	e000ed08 	.word	0xe000ed08

0800d468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d46e:	4b32      	ldr	r3, [pc, #200]	; (800d538 <xPortStartScheduler+0xd0>)
 800d470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b2db      	uxtb	r3, r3
 800d478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	22ff      	movs	r2, #255	; 0xff
 800d47e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	b2db      	uxtb	r3, r3
 800d486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d488:	78fb      	ldrb	r3, [r7, #3]
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d490:	b2da      	uxtb	r2, r3
 800d492:	4b2a      	ldr	r3, [pc, #168]	; (800d53c <xPortStartScheduler+0xd4>)
 800d494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d496:	4b2a      	ldr	r3, [pc, #168]	; (800d540 <xPortStartScheduler+0xd8>)
 800d498:	2207      	movs	r2, #7
 800d49a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d49c:	e009      	b.n	800d4b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d49e:	4b28      	ldr	r3, [pc, #160]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	3b01      	subs	r3, #1
 800d4a4:	4a26      	ldr	r2, [pc, #152]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d4a8:	78fb      	ldrb	r3, [r7, #3]
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ba:	2b80      	cmp	r3, #128	; 0x80
 800d4bc:	d0ef      	beq.n	800d49e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d4be:	4b20      	ldr	r3, [pc, #128]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f1c3 0307 	rsb	r3, r3, #7
 800d4c6:	2b04      	cmp	r3, #4
 800d4c8:	d00a      	beq.n	800d4e0 <xPortStartScheduler+0x78>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	60bb      	str	r3, [r7, #8]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4e0:	4b17      	ldr	r3, [pc, #92]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	4a16      	ldr	r2, [pc, #88]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4ea:	4b15      	ldr	r3, [pc, #84]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4f2:	4a13      	ldr	r2, [pc, #76]	; (800d540 <xPortStartScheduler+0xd8>)
 800d4f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4fe:	4b11      	ldr	r3, [pc, #68]	; (800d544 <xPortStartScheduler+0xdc>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4a10      	ldr	r2, [pc, #64]	; (800d544 <xPortStartScheduler+0xdc>)
 800d504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <xPortStartScheduler+0xdc>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a0d      	ldr	r2, [pc, #52]	; (800d544 <xPortStartScheduler+0xdc>)
 800d510:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d514:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d516:	f000 f8b9 	bl	800d68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d51a:	4b0b      	ldr	r3, [pc, #44]	; (800d548 <xPortStartScheduler+0xe0>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d520:	f7ff ff92 	bl	800d448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d524:	f7fe fe3e 	bl	800c1a4 <vTaskSwitchContext>
	prvTaskExitError();
 800d528:	f7ff ff4a 	bl	800d3c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	e000e400 	.word	0xe000e400
 800d53c:	200019b0 	.word	0x200019b0
 800d540:	200019b4 	.word	0x200019b4
 800d544:	e000ed20 	.word	0xe000ed20
 800d548:	2000020c 	.word	0x2000020c

0800d54c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
	__asm volatile
 800d552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	607b      	str	r3, [r7, #4]
}
 800d564:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d566:	4b0f      	ldr	r3, [pc, #60]	; (800d5a4 <vPortEnterCritical+0x58>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	3301      	adds	r3, #1
 800d56c:	4a0d      	ldr	r2, [pc, #52]	; (800d5a4 <vPortEnterCritical+0x58>)
 800d56e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d570:	4b0c      	ldr	r3, [pc, #48]	; (800d5a4 <vPortEnterCritical+0x58>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d10f      	bne.n	800d598 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d578:	4b0b      	ldr	r3, [pc, #44]	; (800d5a8 <vPortEnterCritical+0x5c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00a      	beq.n	800d598 <vPortEnterCritical+0x4c>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	f383 8811 	msr	BASEPRI, r3
 800d58a:	f3bf 8f6f 	isb	sy
 800d58e:	f3bf 8f4f 	dsb	sy
 800d592:	603b      	str	r3, [r7, #0]
}
 800d594:	bf00      	nop
 800d596:	e7fe      	b.n	800d596 <vPortEnterCritical+0x4a>
	}
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bc80      	pop	{r7}
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	2000020c 	.word	0x2000020c
 800d5a8:	e000ed04 	.word	0xe000ed04

0800d5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5b2:	4b11      	ldr	r3, [pc, #68]	; (800d5f8 <vPortExitCritical+0x4c>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10a      	bne.n	800d5d0 <vPortExitCritical+0x24>
	__asm volatile
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	607b      	str	r3, [r7, #4]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5d0:	4b09      	ldr	r3, [pc, #36]	; (800d5f8 <vPortExitCritical+0x4c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	4a08      	ldr	r2, [pc, #32]	; (800d5f8 <vPortExitCritical+0x4c>)
 800d5d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5da:	4b07      	ldr	r3, [pc, #28]	; (800d5f8 <vPortExitCritical+0x4c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <vPortExitCritical+0x42>
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	f383 8811 	msr	BASEPRI, r3
}
 800d5ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bc80      	pop	{r7}
 800d5f6:	4770      	bx	lr
 800d5f8:	2000020c 	.word	0x2000020c
 800d5fc:	00000000 	.word	0x00000000

0800d600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d600:	f3ef 8009 	mrs	r0, PSP
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	4b0d      	ldr	r3, [pc, #52]	; (800d640 <pxCurrentTCBConst>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d610:	6010      	str	r0, [r2, #0]
 800d612:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d61a:	f380 8811 	msr	BASEPRI, r0
 800d61e:	f7fe fdc1 	bl	800c1a4 <vTaskSwitchContext>
 800d622:	f04f 0000 	mov.w	r0, #0
 800d626:	f380 8811 	msr	BASEPRI, r0
 800d62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d62e:	6819      	ldr	r1, [r3, #0]
 800d630:	6808      	ldr	r0, [r1, #0]
 800d632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d636:	f380 8809 	msr	PSP, r0
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	4770      	bx	lr

0800d640 <pxCurrentTCBConst>:
 800d640:	20001788 	.word	0x20001788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d644:	bf00      	nop
 800d646:	bf00      	nop

0800d648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
	__asm volatile
 800d64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d652:	f383 8811 	msr	BASEPRI, r3
 800d656:	f3bf 8f6f 	isb	sy
 800d65a:	f3bf 8f4f 	dsb	sy
 800d65e:	607b      	str	r3, [r7, #4]
}
 800d660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d662:	f7fe fce1 	bl	800c028 <xTaskIncrementTick>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d003      	beq.n	800d674 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d66c:	4b06      	ldr	r3, [pc, #24]	; (800d688 <SysTick_Handler+0x40>)
 800d66e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d672:	601a      	str	r2, [r3, #0]
 800d674:	2300      	movs	r3, #0
 800d676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	f383 8811 	msr	BASEPRI, r3
}
 800d67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d68c:	b480      	push	{r7}
 800d68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d690:	4b0a      	ldr	r3, [pc, #40]	; (800d6bc <vPortSetupTimerInterrupt+0x30>)
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d696:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <vPortSetupTimerInterrupt+0x34>)
 800d698:	2200      	movs	r2, #0
 800d69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d69c:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <vPortSetupTimerInterrupt+0x38>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a09      	ldr	r2, [pc, #36]	; (800d6c8 <vPortSetupTimerInterrupt+0x3c>)
 800d6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a6:	099b      	lsrs	r3, r3, #6
 800d6a8:	4a08      	ldr	r2, [pc, #32]	; (800d6cc <vPortSetupTimerInterrupt+0x40>)
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ae:	4b03      	ldr	r3, [pc, #12]	; (800d6bc <vPortSetupTimerInterrupt+0x30>)
 800d6b0:	2207      	movs	r2, #7
 800d6b2:	601a      	str	r2, [r3, #0]
}
 800d6b4:	bf00      	nop
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bc80      	pop	{r7}
 800d6ba:	4770      	bx	lr
 800d6bc:	e000e010 	.word	0xe000e010
 800d6c0:	e000e018 	.word	0xe000e018
 800d6c4:	20000200 	.word	0x20000200
 800d6c8:	10624dd3 	.word	0x10624dd3
 800d6cc:	e000e014 	.word	0xe000e014

0800d6d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d6d6:	f3ef 8305 	mrs	r3, IPSR
 800d6da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b0f      	cmp	r3, #15
 800d6e0:	d914      	bls.n	800d70c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6e2:	4a16      	ldr	r2, [pc, #88]	; (800d73c <vPortValidateInterruptPriority+0x6c>)
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6ec:	4b14      	ldr	r3, [pc, #80]	; (800d740 <vPortValidateInterruptPriority+0x70>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	7afa      	ldrb	r2, [r7, #11]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d20a      	bcs.n	800d70c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	607b      	str	r3, [r7, #4]
}
 800d708:	bf00      	nop
 800d70a:	e7fe      	b.n	800d70a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d70c:	4b0d      	ldr	r3, [pc, #52]	; (800d744 <vPortValidateInterruptPriority+0x74>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d714:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <vPortValidateInterruptPriority+0x78>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d90a      	bls.n	800d732 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	603b      	str	r3, [r7, #0]
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <vPortValidateInterruptPriority+0x60>
	}
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	bc80      	pop	{r7}
 800d73a:	4770      	bx	lr
 800d73c:	e000e3f0 	.word	0xe000e3f0
 800d740:	200019b0 	.word	0x200019b0
 800d744:	e000ed0c 	.word	0xe000ed0c
 800d748:	200019b4 	.word	0x200019b4

0800d74c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b08a      	sub	sp, #40	; 0x28
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d754:	2300      	movs	r3, #0
 800d756:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d758:	f7fe fbae 	bl	800beb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d75c:	4b58      	ldr	r3, [pc, #352]	; (800d8c0 <pvPortMalloc+0x174>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d764:	f000 f910 	bl	800d988 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d768:	4b56      	ldr	r3, [pc, #344]	; (800d8c4 <pvPortMalloc+0x178>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4013      	ands	r3, r2
 800d770:	2b00      	cmp	r3, #0
 800d772:	f040 808e 	bne.w	800d892 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d01d      	beq.n	800d7b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d77c:	2208      	movs	r2, #8
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4413      	add	r3, r2
 800d782:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d014      	beq.n	800d7b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f023 0307 	bic.w	r3, r3, #7
 800d794:	3308      	adds	r3, #8
 800d796:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f003 0307 	and.w	r3, r3, #7
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00a      	beq.n	800d7b8 <pvPortMalloc+0x6c>
	__asm volatile
 800d7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a6:	f383 8811 	msr	BASEPRI, r3
 800d7aa:	f3bf 8f6f 	isb	sy
 800d7ae:	f3bf 8f4f 	dsb	sy
 800d7b2:	617b      	str	r3, [r7, #20]
}
 800d7b4:	bf00      	nop
 800d7b6:	e7fe      	b.n	800d7b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d069      	beq.n	800d892 <pvPortMalloc+0x146>
 800d7be:	4b42      	ldr	r3, [pc, #264]	; (800d8c8 <pvPortMalloc+0x17c>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	687a      	ldr	r2, [r7, #4]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d864      	bhi.n	800d892 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d7c8:	4b40      	ldr	r3, [pc, #256]	; (800d8cc <pvPortMalloc+0x180>)
 800d7ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d7cc:	4b3f      	ldr	r3, [pc, #252]	; (800d8cc <pvPortMalloc+0x180>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7d2:	e004      	b.n	800d7de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d903      	bls.n	800d7f0 <pvPortMalloc+0xa4>
 800d7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d1f1      	bne.n	800d7d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7f0:	4b33      	ldr	r3, [pc, #204]	; (800d8c0 <pvPortMalloc+0x174>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d04b      	beq.n	800d892 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2208      	movs	r2, #8
 800d800:	4413      	add	r3, r2
 800d802:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	6a3b      	ldr	r3, [r7, #32]
 800d80a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	1ad2      	subs	r2, r2, r3
 800d814:	2308      	movs	r3, #8
 800d816:	005b      	lsls	r3, r3, #1
 800d818:	429a      	cmp	r2, r3
 800d81a:	d91f      	bls.n	800d85c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <pvPortMalloc+0xf8>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	613b      	str	r3, [r7, #16]
}
 800d840:	bf00      	nop
 800d842:	e7fe      	b.n	800d842 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	1ad2      	subs	r2, r2, r3
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d856:	69b8      	ldr	r0, [r7, #24]
 800d858:	f000 f8f8 	bl	800da4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d85c:	4b1a      	ldr	r3, [pc, #104]	; (800d8c8 <pvPortMalloc+0x17c>)
 800d85e:	681a      	ldr	r2, [r3, #0]
 800d860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	4a18      	ldr	r2, [pc, #96]	; (800d8c8 <pvPortMalloc+0x17c>)
 800d868:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d86a:	4b17      	ldr	r3, [pc, #92]	; (800d8c8 <pvPortMalloc+0x17c>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	4b18      	ldr	r3, [pc, #96]	; (800d8d0 <pvPortMalloc+0x184>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d203      	bcs.n	800d87e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d876:	4b14      	ldr	r3, [pc, #80]	; (800d8c8 <pvPortMalloc+0x17c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a15      	ldr	r2, [pc, #84]	; (800d8d0 <pvPortMalloc+0x184>)
 800d87c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	4b10      	ldr	r3, [pc, #64]	; (800d8c4 <pvPortMalloc+0x178>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	431a      	orrs	r2, r3
 800d888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d892:	f7fe fb1f 	bl	800bed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	f003 0307 	and.w	r3, r3, #7
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <pvPortMalloc+0x16a>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	60fb      	str	r3, [r7, #12]
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <pvPortMalloc+0x168>
	return pvReturn;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3728      	adds	r7, #40	; 0x28
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20002dc0 	.word	0x20002dc0
 800d8c4:	20002dcc 	.word	0x20002dcc
 800d8c8:	20002dc4 	.word	0x20002dc4
 800d8cc:	20002db8 	.word	0x20002db8
 800d8d0:	20002dc8 	.word	0x20002dc8

0800d8d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d048      	beq.n	800d978 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8e6:	2308      	movs	r3, #8
 800d8e8:	425b      	negs	r3, r3
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	4413      	add	r3, r2
 800d8ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	685a      	ldr	r2, [r3, #4]
 800d8f8:	4b21      	ldr	r3, [pc, #132]	; (800d980 <vPortFree+0xac>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d10a      	bne.n	800d918 <vPortFree+0x44>
	__asm volatile
 800d902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d906:	f383 8811 	msr	BASEPRI, r3
 800d90a:	f3bf 8f6f 	isb	sy
 800d90e:	f3bf 8f4f 	dsb	sy
 800d912:	60fb      	str	r3, [r7, #12]
}
 800d914:	bf00      	nop
 800d916:	e7fe      	b.n	800d916 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00a      	beq.n	800d936 <vPortFree+0x62>
	__asm volatile
 800d920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d924:	f383 8811 	msr	BASEPRI, r3
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	f3bf 8f4f 	dsb	sy
 800d930:	60bb      	str	r3, [r7, #8]
}
 800d932:	bf00      	nop
 800d934:	e7fe      	b.n	800d934 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	685a      	ldr	r2, [r3, #4]
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <vPortFree+0xac>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4013      	ands	r3, r2
 800d940:	2b00      	cmp	r3, #0
 800d942:	d019      	beq.n	800d978 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d115      	bne.n	800d978 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	685a      	ldr	r2, [r3, #4]
 800d950:	4b0b      	ldr	r3, [pc, #44]	; (800d980 <vPortFree+0xac>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	43db      	mvns	r3, r3
 800d956:	401a      	ands	r2, r3
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d95c:	f7fe faac 	bl	800beb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	685a      	ldr	r2, [r3, #4]
 800d964:	4b07      	ldr	r3, [pc, #28]	; (800d984 <vPortFree+0xb0>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4413      	add	r3, r2
 800d96a:	4a06      	ldr	r2, [pc, #24]	; (800d984 <vPortFree+0xb0>)
 800d96c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d96e:	6938      	ldr	r0, [r7, #16]
 800d970:	f000 f86c 	bl	800da4c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d974:	f7fe faae 	bl	800bed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d978:	bf00      	nop
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	20002dcc 	.word	0x20002dcc
 800d984:	20002dc4 	.word	0x20002dc4

0800d988 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d98e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d992:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d994:	4b27      	ldr	r3, [pc, #156]	; (800da34 <prvHeapInit+0xac>)
 800d996:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f003 0307 	and.w	r3, r3, #7
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00c      	beq.n	800d9bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3307      	adds	r3, #7
 800d9a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f023 0307 	bic.w	r3, r3, #7
 800d9ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	4a1f      	ldr	r2, [pc, #124]	; (800da34 <prvHeapInit+0xac>)
 800d9b8:	4413      	add	r3, r2
 800d9ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9c0:	4a1d      	ldr	r2, [pc, #116]	; (800da38 <prvHeapInit+0xb0>)
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9c6:	4b1c      	ldr	r3, [pc, #112]	; (800da38 <prvHeapInit+0xb0>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	68ba      	ldr	r2, [r7, #8]
 800d9d0:	4413      	add	r3, r2
 800d9d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f023 0307 	bic.w	r3, r3, #7
 800d9e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4a15      	ldr	r2, [pc, #84]	; (800da3c <prvHeapInit+0xb4>)
 800d9e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9ea:	4b14      	ldr	r3, [pc, #80]	; (800da3c <prvHeapInit+0xb4>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9f2:	4b12      	ldr	r3, [pc, #72]	; (800da3c <prvHeapInit+0xb4>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	1ad2      	subs	r2, r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da08:	4b0c      	ldr	r3, [pc, #48]	; (800da3c <prvHeapInit+0xb4>)
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4a0a      	ldr	r2, [pc, #40]	; (800da40 <prvHeapInit+0xb8>)
 800da16:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	4a09      	ldr	r2, [pc, #36]	; (800da44 <prvHeapInit+0xbc>)
 800da1e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da20:	4b09      	ldr	r3, [pc, #36]	; (800da48 <prvHeapInit+0xc0>)
 800da22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da26:	601a      	str	r2, [r3, #0]
}
 800da28:	bf00      	nop
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bc80      	pop	{r7}
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	200019b8 	.word	0x200019b8
 800da38:	20002db8 	.word	0x20002db8
 800da3c:	20002dc0 	.word	0x20002dc0
 800da40:	20002dc8 	.word	0x20002dc8
 800da44:	20002dc4 	.word	0x20002dc4
 800da48:	20002dcc 	.word	0x20002dcc

0800da4c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da54:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <prvInsertBlockIntoFreeList+0xa8>)
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e002      	b.n	800da60 <prvInsertBlockIntoFreeList+0x14>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d8f7      	bhi.n	800da5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	4413      	add	r3, r2
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d108      	bne.n	800da8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	685a      	ldr	r2, [r3, #4]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	441a      	add	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	441a      	add	r2, r3
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d118      	bne.n	800dad4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	4b14      	ldr	r3, [pc, #80]	; (800daf8 <prvInsertBlockIntoFreeList+0xac>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d00d      	beq.n	800daca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685a      	ldr	r2, [r3, #4]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	441a      	add	r2, r3
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	601a      	str	r2, [r3, #0]
 800dac8:	e008      	b.n	800dadc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800daca:	4b0b      	ldr	r3, [pc, #44]	; (800daf8 <prvInsertBlockIntoFreeList+0xac>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	601a      	str	r2, [r3, #0]
 800dad2:	e003      	b.n	800dadc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681a      	ldr	r2, [r3, #0]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d002      	beq.n	800daea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daea:	bf00      	nop
 800daec:	3714      	adds	r7, #20
 800daee:	46bd      	mov	sp, r7
 800daf0:	bc80      	pop	{r7}
 800daf2:	4770      	bx	lr
 800daf4:	20002db8 	.word	0x20002db8
 800daf8:	20002dc0 	.word	0x20002dc0

0800dafc <malloc>:
 800dafc:	4b02      	ldr	r3, [pc, #8]	; (800db08 <malloc+0xc>)
 800dafe:	4601      	mov	r1, r0
 800db00:	6818      	ldr	r0, [r3, #0]
 800db02:	f000 b823 	b.w	800db4c <_malloc_r>
 800db06:	bf00      	nop
 800db08:	2000025c 	.word	0x2000025c

0800db0c <sbrk_aligned>:
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	4e0e      	ldr	r6, [pc, #56]	; (800db48 <sbrk_aligned+0x3c>)
 800db10:	460c      	mov	r4, r1
 800db12:	6831      	ldr	r1, [r6, #0]
 800db14:	4605      	mov	r5, r0
 800db16:	b911      	cbnz	r1, 800db1e <sbrk_aligned+0x12>
 800db18:	f000 f96c 	bl	800ddf4 <_sbrk_r>
 800db1c:	6030      	str	r0, [r6, #0]
 800db1e:	4621      	mov	r1, r4
 800db20:	4628      	mov	r0, r5
 800db22:	f000 f967 	bl	800ddf4 <_sbrk_r>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d00a      	beq.n	800db40 <sbrk_aligned+0x34>
 800db2a:	1cc4      	adds	r4, r0, #3
 800db2c:	f024 0403 	bic.w	r4, r4, #3
 800db30:	42a0      	cmp	r0, r4
 800db32:	d007      	beq.n	800db44 <sbrk_aligned+0x38>
 800db34:	1a21      	subs	r1, r4, r0
 800db36:	4628      	mov	r0, r5
 800db38:	f000 f95c 	bl	800ddf4 <_sbrk_r>
 800db3c:	3001      	adds	r0, #1
 800db3e:	d101      	bne.n	800db44 <sbrk_aligned+0x38>
 800db40:	f04f 34ff 	mov.w	r4, #4294967295
 800db44:	4620      	mov	r0, r4
 800db46:	bd70      	pop	{r4, r5, r6, pc}
 800db48:	20002dd4 	.word	0x20002dd4

0800db4c <_malloc_r>:
 800db4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db50:	1ccd      	adds	r5, r1, #3
 800db52:	f025 0503 	bic.w	r5, r5, #3
 800db56:	3508      	adds	r5, #8
 800db58:	2d0c      	cmp	r5, #12
 800db5a:	bf38      	it	cc
 800db5c:	250c      	movcc	r5, #12
 800db5e:	2d00      	cmp	r5, #0
 800db60:	4607      	mov	r7, r0
 800db62:	db01      	blt.n	800db68 <_malloc_r+0x1c>
 800db64:	42a9      	cmp	r1, r5
 800db66:	d905      	bls.n	800db74 <_malloc_r+0x28>
 800db68:	230c      	movs	r3, #12
 800db6a:	2600      	movs	r6, #0
 800db6c:	603b      	str	r3, [r7, #0]
 800db6e:	4630      	mov	r0, r6
 800db70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dc48 <_malloc_r+0xfc>
 800db78:	f000 f868 	bl	800dc4c <__malloc_lock>
 800db7c:	f8d8 3000 	ldr.w	r3, [r8]
 800db80:	461c      	mov	r4, r3
 800db82:	bb5c      	cbnz	r4, 800dbdc <_malloc_r+0x90>
 800db84:	4629      	mov	r1, r5
 800db86:	4638      	mov	r0, r7
 800db88:	f7ff ffc0 	bl	800db0c <sbrk_aligned>
 800db8c:	1c43      	adds	r3, r0, #1
 800db8e:	4604      	mov	r4, r0
 800db90:	d155      	bne.n	800dc3e <_malloc_r+0xf2>
 800db92:	f8d8 4000 	ldr.w	r4, [r8]
 800db96:	4626      	mov	r6, r4
 800db98:	2e00      	cmp	r6, #0
 800db9a:	d145      	bne.n	800dc28 <_malloc_r+0xdc>
 800db9c:	2c00      	cmp	r4, #0
 800db9e:	d048      	beq.n	800dc32 <_malloc_r+0xe6>
 800dba0:	6823      	ldr	r3, [r4, #0]
 800dba2:	4631      	mov	r1, r6
 800dba4:	4638      	mov	r0, r7
 800dba6:	eb04 0903 	add.w	r9, r4, r3
 800dbaa:	f000 f923 	bl	800ddf4 <_sbrk_r>
 800dbae:	4581      	cmp	r9, r0
 800dbb0:	d13f      	bne.n	800dc32 <_malloc_r+0xe6>
 800dbb2:	6821      	ldr	r1, [r4, #0]
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	1a6d      	subs	r5, r5, r1
 800dbb8:	4629      	mov	r1, r5
 800dbba:	f7ff ffa7 	bl	800db0c <sbrk_aligned>
 800dbbe:	3001      	adds	r0, #1
 800dbc0:	d037      	beq.n	800dc32 <_malloc_r+0xe6>
 800dbc2:	6823      	ldr	r3, [r4, #0]
 800dbc4:	442b      	add	r3, r5
 800dbc6:	6023      	str	r3, [r4, #0]
 800dbc8:	f8d8 3000 	ldr.w	r3, [r8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d038      	beq.n	800dc42 <_malloc_r+0xf6>
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	42a2      	cmp	r2, r4
 800dbd4:	d12b      	bne.n	800dc2e <_malloc_r+0xe2>
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	605a      	str	r2, [r3, #4]
 800dbda:	e00f      	b.n	800dbfc <_malloc_r+0xb0>
 800dbdc:	6822      	ldr	r2, [r4, #0]
 800dbde:	1b52      	subs	r2, r2, r5
 800dbe0:	d41f      	bmi.n	800dc22 <_malloc_r+0xd6>
 800dbe2:	2a0b      	cmp	r2, #11
 800dbe4:	d917      	bls.n	800dc16 <_malloc_r+0xca>
 800dbe6:	1961      	adds	r1, r4, r5
 800dbe8:	42a3      	cmp	r3, r4
 800dbea:	6025      	str	r5, [r4, #0]
 800dbec:	bf18      	it	ne
 800dbee:	6059      	strne	r1, [r3, #4]
 800dbf0:	6863      	ldr	r3, [r4, #4]
 800dbf2:	bf08      	it	eq
 800dbf4:	f8c8 1000 	streq.w	r1, [r8]
 800dbf8:	5162      	str	r2, [r4, r5]
 800dbfa:	604b      	str	r3, [r1, #4]
 800dbfc:	4638      	mov	r0, r7
 800dbfe:	f104 060b 	add.w	r6, r4, #11
 800dc02:	f000 f829 	bl	800dc58 <__malloc_unlock>
 800dc06:	f026 0607 	bic.w	r6, r6, #7
 800dc0a:	1d23      	adds	r3, r4, #4
 800dc0c:	1af2      	subs	r2, r6, r3
 800dc0e:	d0ae      	beq.n	800db6e <_malloc_r+0x22>
 800dc10:	1b9b      	subs	r3, r3, r6
 800dc12:	50a3      	str	r3, [r4, r2]
 800dc14:	e7ab      	b.n	800db6e <_malloc_r+0x22>
 800dc16:	42a3      	cmp	r3, r4
 800dc18:	6862      	ldr	r2, [r4, #4]
 800dc1a:	d1dd      	bne.n	800dbd8 <_malloc_r+0x8c>
 800dc1c:	f8c8 2000 	str.w	r2, [r8]
 800dc20:	e7ec      	b.n	800dbfc <_malloc_r+0xb0>
 800dc22:	4623      	mov	r3, r4
 800dc24:	6864      	ldr	r4, [r4, #4]
 800dc26:	e7ac      	b.n	800db82 <_malloc_r+0x36>
 800dc28:	4634      	mov	r4, r6
 800dc2a:	6876      	ldr	r6, [r6, #4]
 800dc2c:	e7b4      	b.n	800db98 <_malloc_r+0x4c>
 800dc2e:	4613      	mov	r3, r2
 800dc30:	e7cc      	b.n	800dbcc <_malloc_r+0x80>
 800dc32:	230c      	movs	r3, #12
 800dc34:	4638      	mov	r0, r7
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	f000 f80e 	bl	800dc58 <__malloc_unlock>
 800dc3c:	e797      	b.n	800db6e <_malloc_r+0x22>
 800dc3e:	6025      	str	r5, [r4, #0]
 800dc40:	e7dc      	b.n	800dbfc <_malloc_r+0xb0>
 800dc42:	605b      	str	r3, [r3, #4]
 800dc44:	deff      	udf	#255	; 0xff
 800dc46:	bf00      	nop
 800dc48:	20002dd0 	.word	0x20002dd0

0800dc4c <__malloc_lock>:
 800dc4c:	4801      	ldr	r0, [pc, #4]	; (800dc54 <__malloc_lock+0x8>)
 800dc4e:	f000 b90b 	b.w	800de68 <__retarget_lock_acquire_recursive>
 800dc52:	bf00      	nop
 800dc54:	20002f14 	.word	0x20002f14

0800dc58 <__malloc_unlock>:
 800dc58:	4801      	ldr	r0, [pc, #4]	; (800dc60 <__malloc_unlock+0x8>)
 800dc5a:	f000 b906 	b.w	800de6a <__retarget_lock_release_recursive>
 800dc5e:	bf00      	nop
 800dc60:	20002f14 	.word	0x20002f14

0800dc64 <sniprintf>:
 800dc64:	b40c      	push	{r2, r3}
 800dc66:	b530      	push	{r4, r5, lr}
 800dc68:	4b17      	ldr	r3, [pc, #92]	; (800dcc8 <sniprintf+0x64>)
 800dc6a:	1e0c      	subs	r4, r1, #0
 800dc6c:	681d      	ldr	r5, [r3, #0]
 800dc6e:	b09d      	sub	sp, #116	; 0x74
 800dc70:	da08      	bge.n	800dc84 <sniprintf+0x20>
 800dc72:	238b      	movs	r3, #139	; 0x8b
 800dc74:	f04f 30ff 	mov.w	r0, #4294967295
 800dc78:	602b      	str	r3, [r5, #0]
 800dc7a:	b01d      	add	sp, #116	; 0x74
 800dc7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc80:	b002      	add	sp, #8
 800dc82:	4770      	bx	lr
 800dc84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dc88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc8c:	bf0c      	ite	eq
 800dc8e:	4623      	moveq	r3, r4
 800dc90:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc94:	9304      	str	r3, [sp, #16]
 800dc96:	9307      	str	r3, [sp, #28]
 800dc98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dc9c:	9002      	str	r0, [sp, #8]
 800dc9e:	9006      	str	r0, [sp, #24]
 800dca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dca4:	4628      	mov	r0, r5
 800dca6:	ab21      	add	r3, sp, #132	; 0x84
 800dca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dcaa:	a902      	add	r1, sp, #8
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	f000 f995 	bl	800dfdc <_svfiprintf_r>
 800dcb2:	1c43      	adds	r3, r0, #1
 800dcb4:	bfbc      	itt	lt
 800dcb6:	238b      	movlt	r3, #139	; 0x8b
 800dcb8:	602b      	strlt	r3, [r5, #0]
 800dcba:	2c00      	cmp	r4, #0
 800dcbc:	d0dd      	beq.n	800dc7a <sniprintf+0x16>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	701a      	strb	r2, [r3, #0]
 800dcc4:	e7d9      	b.n	800dc7a <sniprintf+0x16>
 800dcc6:	bf00      	nop
 800dcc8:	2000025c 	.word	0x2000025c

0800dccc <siprintf>:
 800dccc:	b40e      	push	{r1, r2, r3}
 800dcce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcd2:	b500      	push	{lr}
 800dcd4:	b09c      	sub	sp, #112	; 0x70
 800dcd6:	ab1d      	add	r3, sp, #116	; 0x74
 800dcd8:	9002      	str	r0, [sp, #8]
 800dcda:	9006      	str	r0, [sp, #24]
 800dcdc:	9107      	str	r1, [sp, #28]
 800dcde:	9104      	str	r1, [sp, #16]
 800dce0:	4808      	ldr	r0, [pc, #32]	; (800dd04 <siprintf+0x38>)
 800dce2:	4909      	ldr	r1, [pc, #36]	; (800dd08 <siprintf+0x3c>)
 800dce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce8:	9105      	str	r1, [sp, #20]
 800dcea:	6800      	ldr	r0, [r0, #0]
 800dcec:	a902      	add	r1, sp, #8
 800dcee:	9301      	str	r3, [sp, #4]
 800dcf0:	f000 f974 	bl	800dfdc <_svfiprintf_r>
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	9b02      	ldr	r3, [sp, #8]
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	b01c      	add	sp, #112	; 0x70
 800dcfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd00:	b003      	add	sp, #12
 800dd02:	4770      	bx	lr
 800dd04:	2000025c 	.word	0x2000025c
 800dd08:	ffff0208 	.word	0xffff0208

0800dd0c <memset>:
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	4402      	add	r2, r0
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d100      	bne.n	800dd16 <memset+0xa>
 800dd14:	4770      	bx	lr
 800dd16:	f803 1b01 	strb.w	r1, [r3], #1
 800dd1a:	e7f9      	b.n	800dd10 <memset+0x4>

0800dd1c <strstr>:
 800dd1c:	780a      	ldrb	r2, [r1, #0]
 800dd1e:	b570      	push	{r4, r5, r6, lr}
 800dd20:	b96a      	cbnz	r2, 800dd3e <strstr+0x22>
 800dd22:	bd70      	pop	{r4, r5, r6, pc}
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d109      	bne.n	800dd3c <strstr+0x20>
 800dd28:	460c      	mov	r4, r1
 800dd2a:	4605      	mov	r5, r0
 800dd2c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0f6      	beq.n	800dd22 <strstr+0x6>
 800dd34:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dd38:	429e      	cmp	r6, r3
 800dd3a:	d0f7      	beq.n	800dd2c <strstr+0x10>
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	7803      	ldrb	r3, [r0, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1ef      	bne.n	800dd24 <strstr+0x8>
 800dd44:	4618      	mov	r0, r3
 800dd46:	e7ec      	b.n	800dd22 <strstr+0x6>

0800dd48 <_reclaim_reent>:
 800dd48:	4b29      	ldr	r3, [pc, #164]	; (800ddf0 <_reclaim_reent+0xa8>)
 800dd4a:	b570      	push	{r4, r5, r6, lr}
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4283      	cmp	r3, r0
 800dd52:	d04b      	beq.n	800ddec <_reclaim_reent+0xa4>
 800dd54:	69c3      	ldr	r3, [r0, #28]
 800dd56:	b143      	cbz	r3, 800dd6a <_reclaim_reent+0x22>
 800dd58:	68db      	ldr	r3, [r3, #12]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d144      	bne.n	800dde8 <_reclaim_reent+0xa0>
 800dd5e:	69e3      	ldr	r3, [r4, #28]
 800dd60:	6819      	ldr	r1, [r3, #0]
 800dd62:	b111      	cbz	r1, 800dd6a <_reclaim_reent+0x22>
 800dd64:	4620      	mov	r0, r4
 800dd66:	f000 f897 	bl	800de98 <_free_r>
 800dd6a:	6961      	ldr	r1, [r4, #20]
 800dd6c:	b111      	cbz	r1, 800dd74 <_reclaim_reent+0x2c>
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f000 f892 	bl	800de98 <_free_r>
 800dd74:	69e1      	ldr	r1, [r4, #28]
 800dd76:	b111      	cbz	r1, 800dd7e <_reclaim_reent+0x36>
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f000 f88d 	bl	800de98 <_free_r>
 800dd7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd80:	b111      	cbz	r1, 800dd88 <_reclaim_reent+0x40>
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 f888 	bl	800de98 <_free_r>
 800dd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd8a:	b111      	cbz	r1, 800dd92 <_reclaim_reent+0x4a>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f000 f883 	bl	800de98 <_free_r>
 800dd92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd94:	b111      	cbz	r1, 800dd9c <_reclaim_reent+0x54>
 800dd96:	4620      	mov	r0, r4
 800dd98:	f000 f87e 	bl	800de98 <_free_r>
 800dd9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dd9e:	b111      	cbz	r1, 800dda6 <_reclaim_reent+0x5e>
 800dda0:	4620      	mov	r0, r4
 800dda2:	f000 f879 	bl	800de98 <_free_r>
 800dda6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800dda8:	b111      	cbz	r1, 800ddb0 <_reclaim_reent+0x68>
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 f874 	bl	800de98 <_free_r>
 800ddb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ddb2:	b111      	cbz	r1, 800ddba <_reclaim_reent+0x72>
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 f86f 	bl	800de98 <_free_r>
 800ddba:	6a23      	ldr	r3, [r4, #32]
 800ddbc:	b1b3      	cbz	r3, 800ddec <_reclaim_reent+0xa4>
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddc4:	4718      	bx	r3
 800ddc6:	5949      	ldr	r1, [r1, r5]
 800ddc8:	b941      	cbnz	r1, 800dddc <_reclaim_reent+0x94>
 800ddca:	3504      	adds	r5, #4
 800ddcc:	69e3      	ldr	r3, [r4, #28]
 800ddce:	2d80      	cmp	r5, #128	; 0x80
 800ddd0:	68d9      	ldr	r1, [r3, #12]
 800ddd2:	d1f8      	bne.n	800ddc6 <_reclaim_reent+0x7e>
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 f85f 	bl	800de98 <_free_r>
 800ddda:	e7c0      	b.n	800dd5e <_reclaim_reent+0x16>
 800dddc:	680e      	ldr	r6, [r1, #0]
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 f85a 	bl	800de98 <_free_r>
 800dde4:	4631      	mov	r1, r6
 800dde6:	e7ef      	b.n	800ddc8 <_reclaim_reent+0x80>
 800dde8:	2500      	movs	r5, #0
 800ddea:	e7ef      	b.n	800ddcc <_reclaim_reent+0x84>
 800ddec:	bd70      	pop	{r4, r5, r6, pc}
 800ddee:	bf00      	nop
 800ddf0:	2000025c 	.word	0x2000025c

0800ddf4 <_sbrk_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4d05      	ldr	r5, [pc, #20]	; (800de10 <_sbrk_r+0x1c>)
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	f7f5 fe18 	bl	8003a34 <_sbrk>
 800de04:	1c43      	adds	r3, r0, #1
 800de06:	d102      	bne.n	800de0e <_sbrk_r+0x1a>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b103      	cbz	r3, 800de0e <_sbrk_r+0x1a>
 800de0c:	6023      	str	r3, [r4, #0]
 800de0e:	bd38      	pop	{r3, r4, r5, pc}
 800de10:	20002f10 	.word	0x20002f10

0800de14 <__errno>:
 800de14:	4b01      	ldr	r3, [pc, #4]	; (800de1c <__errno+0x8>)
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	2000025c 	.word	0x2000025c

0800de20 <__libc_init_array>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	2600      	movs	r6, #0
 800de24:	4d0c      	ldr	r5, [pc, #48]	; (800de58 <__libc_init_array+0x38>)
 800de26:	4c0d      	ldr	r4, [pc, #52]	; (800de5c <__libc_init_array+0x3c>)
 800de28:	1b64      	subs	r4, r4, r5
 800de2a:	10a4      	asrs	r4, r4, #2
 800de2c:	42a6      	cmp	r6, r4
 800de2e:	d109      	bne.n	800de44 <__libc_init_array+0x24>
 800de30:	f000 fbc6 	bl	800e5c0 <_init>
 800de34:	2600      	movs	r6, #0
 800de36:	4d0a      	ldr	r5, [pc, #40]	; (800de60 <__libc_init_array+0x40>)
 800de38:	4c0a      	ldr	r4, [pc, #40]	; (800de64 <__libc_init_array+0x44>)
 800de3a:	1b64      	subs	r4, r4, r5
 800de3c:	10a4      	asrs	r4, r4, #2
 800de3e:	42a6      	cmp	r6, r4
 800de40:	d105      	bne.n	800de4e <__libc_init_array+0x2e>
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	f855 3b04 	ldr.w	r3, [r5], #4
 800de48:	4798      	blx	r3
 800de4a:	3601      	adds	r6, #1
 800de4c:	e7ee      	b.n	800de2c <__libc_init_array+0xc>
 800de4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de52:	4798      	blx	r3
 800de54:	3601      	adds	r6, #1
 800de56:	e7f2      	b.n	800de3e <__libc_init_array+0x1e>
 800de58:	0800e9e0 	.word	0x0800e9e0
 800de5c:	0800e9e0 	.word	0x0800e9e0
 800de60:	0800e9e0 	.word	0x0800e9e0
 800de64:	0800e9e4 	.word	0x0800e9e4

0800de68 <__retarget_lock_acquire_recursive>:
 800de68:	4770      	bx	lr

0800de6a <__retarget_lock_release_recursive>:
 800de6a:	4770      	bx	lr

0800de6c <strcpy>:
 800de6c:	4603      	mov	r3, r0
 800de6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de72:	f803 2b01 	strb.w	r2, [r3], #1
 800de76:	2a00      	cmp	r2, #0
 800de78:	d1f9      	bne.n	800de6e <strcpy+0x2>
 800de7a:	4770      	bx	lr

0800de7c <memcpy>:
 800de7c:	440a      	add	r2, r1
 800de7e:	4291      	cmp	r1, r2
 800de80:	f100 33ff 	add.w	r3, r0, #4294967295
 800de84:	d100      	bne.n	800de88 <memcpy+0xc>
 800de86:	4770      	bx	lr
 800de88:	b510      	push	{r4, lr}
 800de8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de8e:	4291      	cmp	r1, r2
 800de90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de94:	d1f9      	bne.n	800de8a <memcpy+0xe>
 800de96:	bd10      	pop	{r4, pc}

0800de98 <_free_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4605      	mov	r5, r0
 800de9c:	2900      	cmp	r1, #0
 800de9e:	d040      	beq.n	800df22 <_free_r+0x8a>
 800dea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dea4:	1f0c      	subs	r4, r1, #4
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bfb8      	it	lt
 800deaa:	18e4      	addlt	r4, r4, r3
 800deac:	f7ff fece 	bl	800dc4c <__malloc_lock>
 800deb0:	4a1c      	ldr	r2, [pc, #112]	; (800df24 <_free_r+0x8c>)
 800deb2:	6813      	ldr	r3, [r2, #0]
 800deb4:	b933      	cbnz	r3, 800dec4 <_free_r+0x2c>
 800deb6:	6063      	str	r3, [r4, #4]
 800deb8:	6014      	str	r4, [r2, #0]
 800deba:	4628      	mov	r0, r5
 800debc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec0:	f7ff beca 	b.w	800dc58 <__malloc_unlock>
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d908      	bls.n	800deda <_free_r+0x42>
 800dec8:	6820      	ldr	r0, [r4, #0]
 800deca:	1821      	adds	r1, r4, r0
 800decc:	428b      	cmp	r3, r1
 800dece:	bf01      	itttt	eq
 800ded0:	6819      	ldreq	r1, [r3, #0]
 800ded2:	685b      	ldreq	r3, [r3, #4]
 800ded4:	1809      	addeq	r1, r1, r0
 800ded6:	6021      	streq	r1, [r4, #0]
 800ded8:	e7ed      	b.n	800deb6 <_free_r+0x1e>
 800deda:	461a      	mov	r2, r3
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	b10b      	cbz	r3, 800dee4 <_free_r+0x4c>
 800dee0:	42a3      	cmp	r3, r4
 800dee2:	d9fa      	bls.n	800deda <_free_r+0x42>
 800dee4:	6811      	ldr	r1, [r2, #0]
 800dee6:	1850      	adds	r0, r2, r1
 800dee8:	42a0      	cmp	r0, r4
 800deea:	d10b      	bne.n	800df04 <_free_r+0x6c>
 800deec:	6820      	ldr	r0, [r4, #0]
 800deee:	4401      	add	r1, r0
 800def0:	1850      	adds	r0, r2, r1
 800def2:	4283      	cmp	r3, r0
 800def4:	6011      	str	r1, [r2, #0]
 800def6:	d1e0      	bne.n	800deba <_free_r+0x22>
 800def8:	6818      	ldr	r0, [r3, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	4408      	add	r0, r1
 800defe:	6010      	str	r0, [r2, #0]
 800df00:	6053      	str	r3, [r2, #4]
 800df02:	e7da      	b.n	800deba <_free_r+0x22>
 800df04:	d902      	bls.n	800df0c <_free_r+0x74>
 800df06:	230c      	movs	r3, #12
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	e7d6      	b.n	800deba <_free_r+0x22>
 800df0c:	6820      	ldr	r0, [r4, #0]
 800df0e:	1821      	adds	r1, r4, r0
 800df10:	428b      	cmp	r3, r1
 800df12:	bf01      	itttt	eq
 800df14:	6819      	ldreq	r1, [r3, #0]
 800df16:	685b      	ldreq	r3, [r3, #4]
 800df18:	1809      	addeq	r1, r1, r0
 800df1a:	6021      	streq	r1, [r4, #0]
 800df1c:	6063      	str	r3, [r4, #4]
 800df1e:	6054      	str	r4, [r2, #4]
 800df20:	e7cb      	b.n	800deba <_free_r+0x22>
 800df22:	bd38      	pop	{r3, r4, r5, pc}
 800df24:	20002dd0 	.word	0x20002dd0

0800df28 <__ssputs_r>:
 800df28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df2c:	461f      	mov	r7, r3
 800df2e:	688e      	ldr	r6, [r1, #8]
 800df30:	4682      	mov	sl, r0
 800df32:	42be      	cmp	r6, r7
 800df34:	460c      	mov	r4, r1
 800df36:	4690      	mov	r8, r2
 800df38:	680b      	ldr	r3, [r1, #0]
 800df3a:	d82c      	bhi.n	800df96 <__ssputs_r+0x6e>
 800df3c:	898a      	ldrh	r2, [r1, #12]
 800df3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df42:	d026      	beq.n	800df92 <__ssputs_r+0x6a>
 800df44:	6965      	ldr	r5, [r4, #20]
 800df46:	6909      	ldr	r1, [r1, #16]
 800df48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df4c:	eba3 0901 	sub.w	r9, r3, r1
 800df50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df54:	1c7b      	adds	r3, r7, #1
 800df56:	444b      	add	r3, r9
 800df58:	106d      	asrs	r5, r5, #1
 800df5a:	429d      	cmp	r5, r3
 800df5c:	bf38      	it	cc
 800df5e:	461d      	movcc	r5, r3
 800df60:	0553      	lsls	r3, r2, #21
 800df62:	d527      	bpl.n	800dfb4 <__ssputs_r+0x8c>
 800df64:	4629      	mov	r1, r5
 800df66:	f7ff fdf1 	bl	800db4c <_malloc_r>
 800df6a:	4606      	mov	r6, r0
 800df6c:	b360      	cbz	r0, 800dfc8 <__ssputs_r+0xa0>
 800df6e:	464a      	mov	r2, r9
 800df70:	6921      	ldr	r1, [r4, #16]
 800df72:	f7ff ff83 	bl	800de7c <memcpy>
 800df76:	89a3      	ldrh	r3, [r4, #12]
 800df78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df80:	81a3      	strh	r3, [r4, #12]
 800df82:	6126      	str	r6, [r4, #16]
 800df84:	444e      	add	r6, r9
 800df86:	6026      	str	r6, [r4, #0]
 800df88:	463e      	mov	r6, r7
 800df8a:	6165      	str	r5, [r4, #20]
 800df8c:	eba5 0509 	sub.w	r5, r5, r9
 800df90:	60a5      	str	r5, [r4, #8]
 800df92:	42be      	cmp	r6, r7
 800df94:	d900      	bls.n	800df98 <__ssputs_r+0x70>
 800df96:	463e      	mov	r6, r7
 800df98:	4632      	mov	r2, r6
 800df9a:	4641      	mov	r1, r8
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	f000 faaf 	bl	800e500 <memmove>
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	68a3      	ldr	r3, [r4, #8]
 800dfa6:	1b9b      	subs	r3, r3, r6
 800dfa8:	60a3      	str	r3, [r4, #8]
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	4433      	add	r3, r6
 800dfae:	6023      	str	r3, [r4, #0]
 800dfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	f000 facb 	bl	800e550 <_realloc_r>
 800dfba:	4606      	mov	r6, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d1e0      	bne.n	800df82 <__ssputs_r+0x5a>
 800dfc0:	4650      	mov	r0, sl
 800dfc2:	6921      	ldr	r1, [r4, #16]
 800dfc4:	f7ff ff68 	bl	800de98 <_free_r>
 800dfc8:	230c      	movs	r3, #12
 800dfca:	f8ca 3000 	str.w	r3, [sl]
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	e7e9      	b.n	800dfb0 <__ssputs_r+0x88>

0800dfdc <_svfiprintf_r>:
 800dfdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe0:	4698      	mov	r8, r3
 800dfe2:	898b      	ldrh	r3, [r1, #12]
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	061b      	lsls	r3, r3, #24
 800dfe8:	460d      	mov	r5, r1
 800dfea:	4614      	mov	r4, r2
 800dfec:	b09d      	sub	sp, #116	; 0x74
 800dfee:	d50e      	bpl.n	800e00e <_svfiprintf_r+0x32>
 800dff0:	690b      	ldr	r3, [r1, #16]
 800dff2:	b963      	cbnz	r3, 800e00e <_svfiprintf_r+0x32>
 800dff4:	2140      	movs	r1, #64	; 0x40
 800dff6:	f7ff fda9 	bl	800db4c <_malloc_r>
 800dffa:	6028      	str	r0, [r5, #0]
 800dffc:	6128      	str	r0, [r5, #16]
 800dffe:	b920      	cbnz	r0, 800e00a <_svfiprintf_r+0x2e>
 800e000:	230c      	movs	r3, #12
 800e002:	603b      	str	r3, [r7, #0]
 800e004:	f04f 30ff 	mov.w	r0, #4294967295
 800e008:	e0d0      	b.n	800e1ac <_svfiprintf_r+0x1d0>
 800e00a:	2340      	movs	r3, #64	; 0x40
 800e00c:	616b      	str	r3, [r5, #20]
 800e00e:	2300      	movs	r3, #0
 800e010:	9309      	str	r3, [sp, #36]	; 0x24
 800e012:	2320      	movs	r3, #32
 800e014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e018:	2330      	movs	r3, #48	; 0x30
 800e01a:	f04f 0901 	mov.w	r9, #1
 800e01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e022:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e1c4 <_svfiprintf_r+0x1e8>
 800e026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e02a:	4623      	mov	r3, r4
 800e02c:	469a      	mov	sl, r3
 800e02e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e032:	b10a      	cbz	r2, 800e038 <_svfiprintf_r+0x5c>
 800e034:	2a25      	cmp	r2, #37	; 0x25
 800e036:	d1f9      	bne.n	800e02c <_svfiprintf_r+0x50>
 800e038:	ebba 0b04 	subs.w	fp, sl, r4
 800e03c:	d00b      	beq.n	800e056 <_svfiprintf_r+0x7a>
 800e03e:	465b      	mov	r3, fp
 800e040:	4622      	mov	r2, r4
 800e042:	4629      	mov	r1, r5
 800e044:	4638      	mov	r0, r7
 800e046:	f7ff ff6f 	bl	800df28 <__ssputs_r>
 800e04a:	3001      	adds	r0, #1
 800e04c:	f000 80a9 	beq.w	800e1a2 <_svfiprintf_r+0x1c6>
 800e050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e052:	445a      	add	r2, fp
 800e054:	9209      	str	r2, [sp, #36]	; 0x24
 800e056:	f89a 3000 	ldrb.w	r3, [sl]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	f000 80a1 	beq.w	800e1a2 <_svfiprintf_r+0x1c6>
 800e060:	2300      	movs	r3, #0
 800e062:	f04f 32ff 	mov.w	r2, #4294967295
 800e066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e06a:	f10a 0a01 	add.w	sl, sl, #1
 800e06e:	9304      	str	r3, [sp, #16]
 800e070:	9307      	str	r3, [sp, #28]
 800e072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e076:	931a      	str	r3, [sp, #104]	; 0x68
 800e078:	4654      	mov	r4, sl
 800e07a:	2205      	movs	r2, #5
 800e07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e080:	4850      	ldr	r0, [pc, #320]	; (800e1c4 <_svfiprintf_r+0x1e8>)
 800e082:	f000 fa57 	bl	800e534 <memchr>
 800e086:	9a04      	ldr	r2, [sp, #16]
 800e088:	b9d8      	cbnz	r0, 800e0c2 <_svfiprintf_r+0xe6>
 800e08a:	06d0      	lsls	r0, r2, #27
 800e08c:	bf44      	itt	mi
 800e08e:	2320      	movmi	r3, #32
 800e090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e094:	0711      	lsls	r1, r2, #28
 800e096:	bf44      	itt	mi
 800e098:	232b      	movmi	r3, #43	; 0x2b
 800e09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e09e:	f89a 3000 	ldrb.w	r3, [sl]
 800e0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0a4:	d015      	beq.n	800e0d2 <_svfiprintf_r+0xf6>
 800e0a6:	4654      	mov	r4, sl
 800e0a8:	2000      	movs	r0, #0
 800e0aa:	f04f 0c0a 	mov.w	ip, #10
 800e0ae:	9a07      	ldr	r2, [sp, #28]
 800e0b0:	4621      	mov	r1, r4
 800e0b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0b6:	3b30      	subs	r3, #48	; 0x30
 800e0b8:	2b09      	cmp	r3, #9
 800e0ba:	d94d      	bls.n	800e158 <_svfiprintf_r+0x17c>
 800e0bc:	b1b0      	cbz	r0, 800e0ec <_svfiprintf_r+0x110>
 800e0be:	9207      	str	r2, [sp, #28]
 800e0c0:	e014      	b.n	800e0ec <_svfiprintf_r+0x110>
 800e0c2:	eba0 0308 	sub.w	r3, r0, r8
 800e0c6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	46a2      	mov	sl, r4
 800e0ce:	9304      	str	r3, [sp, #16]
 800e0d0:	e7d2      	b.n	800e078 <_svfiprintf_r+0x9c>
 800e0d2:	9b03      	ldr	r3, [sp, #12]
 800e0d4:	1d19      	adds	r1, r3, #4
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	9103      	str	r1, [sp, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	bfbb      	ittet	lt
 800e0de:	425b      	neglt	r3, r3
 800e0e0:	f042 0202 	orrlt.w	r2, r2, #2
 800e0e4:	9307      	strge	r3, [sp, #28]
 800e0e6:	9307      	strlt	r3, [sp, #28]
 800e0e8:	bfb8      	it	lt
 800e0ea:	9204      	strlt	r2, [sp, #16]
 800e0ec:	7823      	ldrb	r3, [r4, #0]
 800e0ee:	2b2e      	cmp	r3, #46	; 0x2e
 800e0f0:	d10c      	bne.n	800e10c <_svfiprintf_r+0x130>
 800e0f2:	7863      	ldrb	r3, [r4, #1]
 800e0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f6:	d134      	bne.n	800e162 <_svfiprintf_r+0x186>
 800e0f8:	9b03      	ldr	r3, [sp, #12]
 800e0fa:	3402      	adds	r4, #2
 800e0fc:	1d1a      	adds	r2, r3, #4
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	9203      	str	r2, [sp, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	bfb8      	it	lt
 800e106:	f04f 33ff 	movlt.w	r3, #4294967295
 800e10a:	9305      	str	r3, [sp, #20]
 800e10c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e1c8 <_svfiprintf_r+0x1ec>
 800e110:	2203      	movs	r2, #3
 800e112:	4650      	mov	r0, sl
 800e114:	7821      	ldrb	r1, [r4, #0]
 800e116:	f000 fa0d 	bl	800e534 <memchr>
 800e11a:	b138      	cbz	r0, 800e12c <_svfiprintf_r+0x150>
 800e11c:	2240      	movs	r2, #64	; 0x40
 800e11e:	9b04      	ldr	r3, [sp, #16]
 800e120:	eba0 000a 	sub.w	r0, r0, sl
 800e124:	4082      	lsls	r2, r0
 800e126:	4313      	orrs	r3, r2
 800e128:	3401      	adds	r4, #1
 800e12a:	9304      	str	r3, [sp, #16]
 800e12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e130:	2206      	movs	r2, #6
 800e132:	4826      	ldr	r0, [pc, #152]	; (800e1cc <_svfiprintf_r+0x1f0>)
 800e134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e138:	f000 f9fc 	bl	800e534 <memchr>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d038      	beq.n	800e1b2 <_svfiprintf_r+0x1d6>
 800e140:	4b23      	ldr	r3, [pc, #140]	; (800e1d0 <_svfiprintf_r+0x1f4>)
 800e142:	bb1b      	cbnz	r3, 800e18c <_svfiprintf_r+0x1b0>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	3307      	adds	r3, #7
 800e148:	f023 0307 	bic.w	r3, r3, #7
 800e14c:	3308      	adds	r3, #8
 800e14e:	9303      	str	r3, [sp, #12]
 800e150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e152:	4433      	add	r3, r6
 800e154:	9309      	str	r3, [sp, #36]	; 0x24
 800e156:	e768      	b.n	800e02a <_svfiprintf_r+0x4e>
 800e158:	460c      	mov	r4, r1
 800e15a:	2001      	movs	r0, #1
 800e15c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e160:	e7a6      	b.n	800e0b0 <_svfiprintf_r+0xd4>
 800e162:	2300      	movs	r3, #0
 800e164:	f04f 0c0a 	mov.w	ip, #10
 800e168:	4619      	mov	r1, r3
 800e16a:	3401      	adds	r4, #1
 800e16c:	9305      	str	r3, [sp, #20]
 800e16e:	4620      	mov	r0, r4
 800e170:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e174:	3a30      	subs	r2, #48	; 0x30
 800e176:	2a09      	cmp	r2, #9
 800e178:	d903      	bls.n	800e182 <_svfiprintf_r+0x1a6>
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d0c6      	beq.n	800e10c <_svfiprintf_r+0x130>
 800e17e:	9105      	str	r1, [sp, #20]
 800e180:	e7c4      	b.n	800e10c <_svfiprintf_r+0x130>
 800e182:	4604      	mov	r4, r0
 800e184:	2301      	movs	r3, #1
 800e186:	fb0c 2101 	mla	r1, ip, r1, r2
 800e18a:	e7f0      	b.n	800e16e <_svfiprintf_r+0x192>
 800e18c:	ab03      	add	r3, sp, #12
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	462a      	mov	r2, r5
 800e192:	4638      	mov	r0, r7
 800e194:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <_svfiprintf_r+0x1f8>)
 800e196:	a904      	add	r1, sp, #16
 800e198:	f3af 8000 	nop.w
 800e19c:	1c42      	adds	r2, r0, #1
 800e19e:	4606      	mov	r6, r0
 800e1a0:	d1d6      	bne.n	800e150 <_svfiprintf_r+0x174>
 800e1a2:	89ab      	ldrh	r3, [r5, #12]
 800e1a4:	065b      	lsls	r3, r3, #25
 800e1a6:	f53f af2d 	bmi.w	800e004 <_svfiprintf_r+0x28>
 800e1aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1ac:	b01d      	add	sp, #116	; 0x74
 800e1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b2:	ab03      	add	r3, sp, #12
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	462a      	mov	r2, r5
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <_svfiprintf_r+0x1f8>)
 800e1bc:	a904      	add	r1, sp, #16
 800e1be:	f000 f87d 	bl	800e2bc <_printf_i>
 800e1c2:	e7eb      	b.n	800e19c <_svfiprintf_r+0x1c0>
 800e1c4:	0800e9aa 	.word	0x0800e9aa
 800e1c8:	0800e9b0 	.word	0x0800e9b0
 800e1cc:	0800e9b4 	.word	0x0800e9b4
 800e1d0:	00000000 	.word	0x00000000
 800e1d4:	0800df29 	.word	0x0800df29

0800e1d8 <_printf_common>:
 800e1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1dc:	4616      	mov	r6, r2
 800e1de:	4699      	mov	r9, r3
 800e1e0:	688a      	ldr	r2, [r1, #8]
 800e1e2:	690b      	ldr	r3, [r1, #16]
 800e1e4:	4607      	mov	r7, r0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	bfb8      	it	lt
 800e1ea:	4613      	movlt	r3, r2
 800e1ec:	6033      	str	r3, [r6, #0]
 800e1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1f2:	460c      	mov	r4, r1
 800e1f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1f8:	b10a      	cbz	r2, 800e1fe <_printf_common+0x26>
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	6033      	str	r3, [r6, #0]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	0699      	lsls	r1, r3, #26
 800e202:	bf42      	ittt	mi
 800e204:	6833      	ldrmi	r3, [r6, #0]
 800e206:	3302      	addmi	r3, #2
 800e208:	6033      	strmi	r3, [r6, #0]
 800e20a:	6825      	ldr	r5, [r4, #0]
 800e20c:	f015 0506 	ands.w	r5, r5, #6
 800e210:	d106      	bne.n	800e220 <_printf_common+0x48>
 800e212:	f104 0a19 	add.w	sl, r4, #25
 800e216:	68e3      	ldr	r3, [r4, #12]
 800e218:	6832      	ldr	r2, [r6, #0]
 800e21a:	1a9b      	subs	r3, r3, r2
 800e21c:	42ab      	cmp	r3, r5
 800e21e:	dc2b      	bgt.n	800e278 <_printf_common+0xa0>
 800e220:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e224:	1e13      	subs	r3, r2, #0
 800e226:	6822      	ldr	r2, [r4, #0]
 800e228:	bf18      	it	ne
 800e22a:	2301      	movne	r3, #1
 800e22c:	0692      	lsls	r2, r2, #26
 800e22e:	d430      	bmi.n	800e292 <_printf_common+0xba>
 800e230:	4649      	mov	r1, r9
 800e232:	4638      	mov	r0, r7
 800e234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e238:	47c0      	blx	r8
 800e23a:	3001      	adds	r0, #1
 800e23c:	d023      	beq.n	800e286 <_printf_common+0xae>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	6922      	ldr	r2, [r4, #16]
 800e242:	f003 0306 	and.w	r3, r3, #6
 800e246:	2b04      	cmp	r3, #4
 800e248:	bf14      	ite	ne
 800e24a:	2500      	movne	r5, #0
 800e24c:	6833      	ldreq	r3, [r6, #0]
 800e24e:	f04f 0600 	mov.w	r6, #0
 800e252:	bf08      	it	eq
 800e254:	68e5      	ldreq	r5, [r4, #12]
 800e256:	f104 041a 	add.w	r4, r4, #26
 800e25a:	bf08      	it	eq
 800e25c:	1aed      	subeq	r5, r5, r3
 800e25e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e262:	bf08      	it	eq
 800e264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e268:	4293      	cmp	r3, r2
 800e26a:	bfc4      	itt	gt
 800e26c:	1a9b      	subgt	r3, r3, r2
 800e26e:	18ed      	addgt	r5, r5, r3
 800e270:	42b5      	cmp	r5, r6
 800e272:	d11a      	bne.n	800e2aa <_printf_common+0xd2>
 800e274:	2000      	movs	r0, #0
 800e276:	e008      	b.n	800e28a <_printf_common+0xb2>
 800e278:	2301      	movs	r3, #1
 800e27a:	4652      	mov	r2, sl
 800e27c:	4649      	mov	r1, r9
 800e27e:	4638      	mov	r0, r7
 800e280:	47c0      	blx	r8
 800e282:	3001      	adds	r0, #1
 800e284:	d103      	bne.n	800e28e <_printf_common+0xb6>
 800e286:	f04f 30ff 	mov.w	r0, #4294967295
 800e28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e28e:	3501      	adds	r5, #1
 800e290:	e7c1      	b.n	800e216 <_printf_common+0x3e>
 800e292:	2030      	movs	r0, #48	; 0x30
 800e294:	18e1      	adds	r1, r4, r3
 800e296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a0:	4422      	add	r2, r4
 800e2a2:	3302      	adds	r3, #2
 800e2a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2a8:	e7c2      	b.n	800e230 <_printf_common+0x58>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	4649      	mov	r1, r9
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	47c0      	blx	r8
 800e2b4:	3001      	adds	r0, #1
 800e2b6:	d0e6      	beq.n	800e286 <_printf_common+0xae>
 800e2b8:	3601      	adds	r6, #1
 800e2ba:	e7d9      	b.n	800e270 <_printf_common+0x98>

0800e2bc <_printf_i>:
 800e2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c0:	7e0f      	ldrb	r7, [r1, #24]
 800e2c2:	4691      	mov	r9, r2
 800e2c4:	2f78      	cmp	r7, #120	; 0x78
 800e2c6:	4680      	mov	r8, r0
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	469a      	mov	sl, r3
 800e2cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2d2:	d807      	bhi.n	800e2e4 <_printf_i+0x28>
 800e2d4:	2f62      	cmp	r7, #98	; 0x62
 800e2d6:	d80a      	bhi.n	800e2ee <_printf_i+0x32>
 800e2d8:	2f00      	cmp	r7, #0
 800e2da:	f000 80d5 	beq.w	800e488 <_printf_i+0x1cc>
 800e2de:	2f58      	cmp	r7, #88	; 0x58
 800e2e0:	f000 80c1 	beq.w	800e466 <_printf_i+0x1aa>
 800e2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2ec:	e03a      	b.n	800e364 <_printf_i+0xa8>
 800e2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2f2:	2b15      	cmp	r3, #21
 800e2f4:	d8f6      	bhi.n	800e2e4 <_printf_i+0x28>
 800e2f6:	a101      	add	r1, pc, #4	; (adr r1, 800e2fc <_printf_i+0x40>)
 800e2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2fc:	0800e355 	.word	0x0800e355
 800e300:	0800e369 	.word	0x0800e369
 800e304:	0800e2e5 	.word	0x0800e2e5
 800e308:	0800e2e5 	.word	0x0800e2e5
 800e30c:	0800e2e5 	.word	0x0800e2e5
 800e310:	0800e2e5 	.word	0x0800e2e5
 800e314:	0800e369 	.word	0x0800e369
 800e318:	0800e2e5 	.word	0x0800e2e5
 800e31c:	0800e2e5 	.word	0x0800e2e5
 800e320:	0800e2e5 	.word	0x0800e2e5
 800e324:	0800e2e5 	.word	0x0800e2e5
 800e328:	0800e46f 	.word	0x0800e46f
 800e32c:	0800e395 	.word	0x0800e395
 800e330:	0800e429 	.word	0x0800e429
 800e334:	0800e2e5 	.word	0x0800e2e5
 800e338:	0800e2e5 	.word	0x0800e2e5
 800e33c:	0800e491 	.word	0x0800e491
 800e340:	0800e2e5 	.word	0x0800e2e5
 800e344:	0800e395 	.word	0x0800e395
 800e348:	0800e2e5 	.word	0x0800e2e5
 800e34c:	0800e2e5 	.word	0x0800e2e5
 800e350:	0800e431 	.word	0x0800e431
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	1d1a      	adds	r2, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	602a      	str	r2, [r5, #0]
 800e35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e364:	2301      	movs	r3, #1
 800e366:	e0a0      	b.n	800e4aa <_printf_i+0x1ee>
 800e368:	6820      	ldr	r0, [r4, #0]
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	0607      	lsls	r7, r0, #24
 800e36e:	f103 0104 	add.w	r1, r3, #4
 800e372:	6029      	str	r1, [r5, #0]
 800e374:	d501      	bpl.n	800e37a <_printf_i+0xbe>
 800e376:	681e      	ldr	r6, [r3, #0]
 800e378:	e003      	b.n	800e382 <_printf_i+0xc6>
 800e37a:	0646      	lsls	r6, r0, #25
 800e37c:	d5fb      	bpl.n	800e376 <_printf_i+0xba>
 800e37e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e382:	2e00      	cmp	r6, #0
 800e384:	da03      	bge.n	800e38e <_printf_i+0xd2>
 800e386:	232d      	movs	r3, #45	; 0x2d
 800e388:	4276      	negs	r6, r6
 800e38a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e38e:	230a      	movs	r3, #10
 800e390:	4859      	ldr	r0, [pc, #356]	; (800e4f8 <_printf_i+0x23c>)
 800e392:	e012      	b.n	800e3ba <_printf_i+0xfe>
 800e394:	682b      	ldr	r3, [r5, #0]
 800e396:	6820      	ldr	r0, [r4, #0]
 800e398:	1d19      	adds	r1, r3, #4
 800e39a:	6029      	str	r1, [r5, #0]
 800e39c:	0605      	lsls	r5, r0, #24
 800e39e:	d501      	bpl.n	800e3a4 <_printf_i+0xe8>
 800e3a0:	681e      	ldr	r6, [r3, #0]
 800e3a2:	e002      	b.n	800e3aa <_printf_i+0xee>
 800e3a4:	0641      	lsls	r1, r0, #25
 800e3a6:	d5fb      	bpl.n	800e3a0 <_printf_i+0xe4>
 800e3a8:	881e      	ldrh	r6, [r3, #0]
 800e3aa:	2f6f      	cmp	r7, #111	; 0x6f
 800e3ac:	bf0c      	ite	eq
 800e3ae:	2308      	moveq	r3, #8
 800e3b0:	230a      	movne	r3, #10
 800e3b2:	4851      	ldr	r0, [pc, #324]	; (800e4f8 <_printf_i+0x23c>)
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3ba:	6865      	ldr	r5, [r4, #4]
 800e3bc:	2d00      	cmp	r5, #0
 800e3be:	bfa8      	it	ge
 800e3c0:	6821      	ldrge	r1, [r4, #0]
 800e3c2:	60a5      	str	r5, [r4, #8]
 800e3c4:	bfa4      	itt	ge
 800e3c6:	f021 0104 	bicge.w	r1, r1, #4
 800e3ca:	6021      	strge	r1, [r4, #0]
 800e3cc:	b90e      	cbnz	r6, 800e3d2 <_printf_i+0x116>
 800e3ce:	2d00      	cmp	r5, #0
 800e3d0:	d04b      	beq.n	800e46a <_printf_i+0x1ae>
 800e3d2:	4615      	mov	r5, r2
 800e3d4:	fbb6 f1f3 	udiv	r1, r6, r3
 800e3d8:	fb03 6711 	mls	r7, r3, r1, r6
 800e3dc:	5dc7      	ldrb	r7, [r0, r7]
 800e3de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e3e2:	4637      	mov	r7, r6
 800e3e4:	42bb      	cmp	r3, r7
 800e3e6:	460e      	mov	r6, r1
 800e3e8:	d9f4      	bls.n	800e3d4 <_printf_i+0x118>
 800e3ea:	2b08      	cmp	r3, #8
 800e3ec:	d10b      	bne.n	800e406 <_printf_i+0x14a>
 800e3ee:	6823      	ldr	r3, [r4, #0]
 800e3f0:	07de      	lsls	r6, r3, #31
 800e3f2:	d508      	bpl.n	800e406 <_printf_i+0x14a>
 800e3f4:	6923      	ldr	r3, [r4, #16]
 800e3f6:	6861      	ldr	r1, [r4, #4]
 800e3f8:	4299      	cmp	r1, r3
 800e3fa:	bfde      	ittt	le
 800e3fc:	2330      	movle	r3, #48	; 0x30
 800e3fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e402:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e406:	1b52      	subs	r2, r2, r5
 800e408:	6122      	str	r2, [r4, #16]
 800e40a:	464b      	mov	r3, r9
 800e40c:	4621      	mov	r1, r4
 800e40e:	4640      	mov	r0, r8
 800e410:	f8cd a000 	str.w	sl, [sp]
 800e414:	aa03      	add	r2, sp, #12
 800e416:	f7ff fedf 	bl	800e1d8 <_printf_common>
 800e41a:	3001      	adds	r0, #1
 800e41c:	d14a      	bne.n	800e4b4 <_printf_i+0x1f8>
 800e41e:	f04f 30ff 	mov.w	r0, #4294967295
 800e422:	b004      	add	sp, #16
 800e424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e428:	6823      	ldr	r3, [r4, #0]
 800e42a:	f043 0320 	orr.w	r3, r3, #32
 800e42e:	6023      	str	r3, [r4, #0]
 800e430:	2778      	movs	r7, #120	; 0x78
 800e432:	4832      	ldr	r0, [pc, #200]	; (800e4fc <_printf_i+0x240>)
 800e434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	6829      	ldr	r1, [r5, #0]
 800e43c:	061f      	lsls	r7, r3, #24
 800e43e:	f851 6b04 	ldr.w	r6, [r1], #4
 800e442:	d402      	bmi.n	800e44a <_printf_i+0x18e>
 800e444:	065f      	lsls	r7, r3, #25
 800e446:	bf48      	it	mi
 800e448:	b2b6      	uxthmi	r6, r6
 800e44a:	07df      	lsls	r7, r3, #31
 800e44c:	bf48      	it	mi
 800e44e:	f043 0320 	orrmi.w	r3, r3, #32
 800e452:	6029      	str	r1, [r5, #0]
 800e454:	bf48      	it	mi
 800e456:	6023      	strmi	r3, [r4, #0]
 800e458:	b91e      	cbnz	r6, 800e462 <_printf_i+0x1a6>
 800e45a:	6823      	ldr	r3, [r4, #0]
 800e45c:	f023 0320 	bic.w	r3, r3, #32
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	2310      	movs	r3, #16
 800e464:	e7a6      	b.n	800e3b4 <_printf_i+0xf8>
 800e466:	4824      	ldr	r0, [pc, #144]	; (800e4f8 <_printf_i+0x23c>)
 800e468:	e7e4      	b.n	800e434 <_printf_i+0x178>
 800e46a:	4615      	mov	r5, r2
 800e46c:	e7bd      	b.n	800e3ea <_printf_i+0x12e>
 800e46e:	682b      	ldr	r3, [r5, #0]
 800e470:	6826      	ldr	r6, [r4, #0]
 800e472:	1d18      	adds	r0, r3, #4
 800e474:	6961      	ldr	r1, [r4, #20]
 800e476:	6028      	str	r0, [r5, #0]
 800e478:	0635      	lsls	r5, r6, #24
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	d501      	bpl.n	800e482 <_printf_i+0x1c6>
 800e47e:	6019      	str	r1, [r3, #0]
 800e480:	e002      	b.n	800e488 <_printf_i+0x1cc>
 800e482:	0670      	lsls	r0, r6, #25
 800e484:	d5fb      	bpl.n	800e47e <_printf_i+0x1c2>
 800e486:	8019      	strh	r1, [r3, #0]
 800e488:	2300      	movs	r3, #0
 800e48a:	4615      	mov	r5, r2
 800e48c:	6123      	str	r3, [r4, #16]
 800e48e:	e7bc      	b.n	800e40a <_printf_i+0x14e>
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	2100      	movs	r1, #0
 800e494:	1d1a      	adds	r2, r3, #4
 800e496:	602a      	str	r2, [r5, #0]
 800e498:	681d      	ldr	r5, [r3, #0]
 800e49a:	6862      	ldr	r2, [r4, #4]
 800e49c:	4628      	mov	r0, r5
 800e49e:	f000 f849 	bl	800e534 <memchr>
 800e4a2:	b108      	cbz	r0, 800e4a8 <_printf_i+0x1ec>
 800e4a4:	1b40      	subs	r0, r0, r5
 800e4a6:	6060      	str	r0, [r4, #4]
 800e4a8:	6863      	ldr	r3, [r4, #4]
 800e4aa:	6123      	str	r3, [r4, #16]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4b2:	e7aa      	b.n	800e40a <_printf_i+0x14e>
 800e4b4:	462a      	mov	r2, r5
 800e4b6:	4649      	mov	r1, r9
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	47d0      	blx	sl
 800e4be:	3001      	adds	r0, #1
 800e4c0:	d0ad      	beq.n	800e41e <_printf_i+0x162>
 800e4c2:	6823      	ldr	r3, [r4, #0]
 800e4c4:	079b      	lsls	r3, r3, #30
 800e4c6:	d413      	bmi.n	800e4f0 <_printf_i+0x234>
 800e4c8:	68e0      	ldr	r0, [r4, #12]
 800e4ca:	9b03      	ldr	r3, [sp, #12]
 800e4cc:	4298      	cmp	r0, r3
 800e4ce:	bfb8      	it	lt
 800e4d0:	4618      	movlt	r0, r3
 800e4d2:	e7a6      	b.n	800e422 <_printf_i+0x166>
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	4632      	mov	r2, r6
 800e4d8:	4649      	mov	r1, r9
 800e4da:	4640      	mov	r0, r8
 800e4dc:	47d0      	blx	sl
 800e4de:	3001      	adds	r0, #1
 800e4e0:	d09d      	beq.n	800e41e <_printf_i+0x162>
 800e4e2:	3501      	adds	r5, #1
 800e4e4:	68e3      	ldr	r3, [r4, #12]
 800e4e6:	9903      	ldr	r1, [sp, #12]
 800e4e8:	1a5b      	subs	r3, r3, r1
 800e4ea:	42ab      	cmp	r3, r5
 800e4ec:	dcf2      	bgt.n	800e4d4 <_printf_i+0x218>
 800e4ee:	e7eb      	b.n	800e4c8 <_printf_i+0x20c>
 800e4f0:	2500      	movs	r5, #0
 800e4f2:	f104 0619 	add.w	r6, r4, #25
 800e4f6:	e7f5      	b.n	800e4e4 <_printf_i+0x228>
 800e4f8:	0800e9bb 	.word	0x0800e9bb
 800e4fc:	0800e9cc 	.word	0x0800e9cc

0800e500 <memmove>:
 800e500:	4288      	cmp	r0, r1
 800e502:	b510      	push	{r4, lr}
 800e504:	eb01 0402 	add.w	r4, r1, r2
 800e508:	d902      	bls.n	800e510 <memmove+0x10>
 800e50a:	4284      	cmp	r4, r0
 800e50c:	4623      	mov	r3, r4
 800e50e:	d807      	bhi.n	800e520 <memmove+0x20>
 800e510:	1e43      	subs	r3, r0, #1
 800e512:	42a1      	cmp	r1, r4
 800e514:	d008      	beq.n	800e528 <memmove+0x28>
 800e516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e51e:	e7f8      	b.n	800e512 <memmove+0x12>
 800e520:	4601      	mov	r1, r0
 800e522:	4402      	add	r2, r0
 800e524:	428a      	cmp	r2, r1
 800e526:	d100      	bne.n	800e52a <memmove+0x2a>
 800e528:	bd10      	pop	{r4, pc}
 800e52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e532:	e7f7      	b.n	800e524 <memmove+0x24>

0800e534 <memchr>:
 800e534:	4603      	mov	r3, r0
 800e536:	b510      	push	{r4, lr}
 800e538:	b2c9      	uxtb	r1, r1
 800e53a:	4402      	add	r2, r0
 800e53c:	4293      	cmp	r3, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	d101      	bne.n	800e546 <memchr+0x12>
 800e542:	2000      	movs	r0, #0
 800e544:	e003      	b.n	800e54e <memchr+0x1a>
 800e546:	7804      	ldrb	r4, [r0, #0]
 800e548:	3301      	adds	r3, #1
 800e54a:	428c      	cmp	r4, r1
 800e54c:	d1f6      	bne.n	800e53c <memchr+0x8>
 800e54e:	bd10      	pop	{r4, pc}

0800e550 <_realloc_r>:
 800e550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e554:	4680      	mov	r8, r0
 800e556:	4614      	mov	r4, r2
 800e558:	460e      	mov	r6, r1
 800e55a:	b921      	cbnz	r1, 800e566 <_realloc_r+0x16>
 800e55c:	4611      	mov	r1, r2
 800e55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e562:	f7ff baf3 	b.w	800db4c <_malloc_r>
 800e566:	b92a      	cbnz	r2, 800e574 <_realloc_r+0x24>
 800e568:	f7ff fc96 	bl	800de98 <_free_r>
 800e56c:	4625      	mov	r5, r4
 800e56e:	4628      	mov	r0, r5
 800e570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e574:	f000 f81b 	bl	800e5ae <_malloc_usable_size_r>
 800e578:	4284      	cmp	r4, r0
 800e57a:	4607      	mov	r7, r0
 800e57c:	d802      	bhi.n	800e584 <_realloc_r+0x34>
 800e57e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e582:	d812      	bhi.n	800e5aa <_realloc_r+0x5a>
 800e584:	4621      	mov	r1, r4
 800e586:	4640      	mov	r0, r8
 800e588:	f7ff fae0 	bl	800db4c <_malloc_r>
 800e58c:	4605      	mov	r5, r0
 800e58e:	2800      	cmp	r0, #0
 800e590:	d0ed      	beq.n	800e56e <_realloc_r+0x1e>
 800e592:	42bc      	cmp	r4, r7
 800e594:	4622      	mov	r2, r4
 800e596:	4631      	mov	r1, r6
 800e598:	bf28      	it	cs
 800e59a:	463a      	movcs	r2, r7
 800e59c:	f7ff fc6e 	bl	800de7c <memcpy>
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	f7ff fc78 	bl	800de98 <_free_r>
 800e5a8:	e7e1      	b.n	800e56e <_realloc_r+0x1e>
 800e5aa:	4635      	mov	r5, r6
 800e5ac:	e7df      	b.n	800e56e <_realloc_r+0x1e>

0800e5ae <_malloc_usable_size_r>:
 800e5ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5b2:	1f18      	subs	r0, r3, #4
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bfbc      	itt	lt
 800e5b8:	580b      	ldrlt	r3, [r1, r0]
 800e5ba:	18c0      	addlt	r0, r0, r3
 800e5bc:	4770      	bx	lr
	...

0800e5c0 <_init>:
 800e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c2:	bf00      	nop
 800e5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5c6:	bc08      	pop	{r3}
 800e5c8:	469e      	mov	lr, r3
 800e5ca:	4770      	bx	lr

0800e5cc <_fini>:
 800e5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ce:	bf00      	nop
 800e5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5d2:	bc08      	pop	{r3}
 800e5d4:	469e      	mov	lr, r3
 800e5d6:	4770      	bx	lr
