
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  0800c1b4  0800c1b4  0001c1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c640  0800c640  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c640  0800c640  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c640  0800c640  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c640  0800c640  0001c640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c644  0800c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800c648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be0  20000070  0800c6b4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c50  0800c6b4  00022c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032257  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066b7  00000000  00000000  0005232f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00011ca7  00000000  00000000  000589e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d90  00000000  00000000  0006a690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001805  00000000  00000000  0006c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f66e  00000000  00000000  0006dc25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00031fea  00000000  00000000  0008d293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1df6  00000000  00000000  000bf27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006150  00000000  00000000  00161074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001671c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c19c 	.word	0x0800c19c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800c19c 	.word	0x0800c19c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <sendAknowladge>:
/**
 * \brief 	Simples envio de aknowladge indexado a comando
 * \param 	*ble - Ponteiro para o objeto pai.
 * \param 	Cmd - comando que esta enviando o Aknowladge.
 */
void 			sendAknowladge(Bluetooth* ble,uint8_t Cmd){
 8001094:	b500      	push	{lr}
 8001096:	b083      	sub	sp, #12
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;
 8001098:	2301      	movs	r3, #1
 800109a:	f88d 3004 	strb.w	r3, [sp, #4]
	TXCRC[1] = 0xFF;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	f88d 3005 	strb.w	r3, [sp, #5]
	TXCRC[2] = Cmd;
 80010a4:	f88d 1006 	strb.w	r1, [sp, #6]
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	2203      	movs	r2, #3
 80010ac:	a901      	add	r1, sp, #4
 80010ae:	6800      	ldr	r0, [r0, #0]
 80010b0:	f006 ffb4 	bl	800801c <HAL_UART_Transmit>
}
 80010b4:	b003      	add	sp, #12
 80010b6:	f85d fb04 	ldr.w	pc, [sp], #4

080010ba <bluetoothErroCRC>:
void 			bluetoothErroCRC(Bluetooth* ble){
 80010ba:	b530      	push	{r4, r5, lr}
 80010bc:	b083      	sub	sp, #12
 80010be:	4604      	mov	r4, r0
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 80010c0:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 80010c4:	1e8b      	subs	r3, r1, #2
 80010c6:	4403      	add	r3, r0
 80010c8:	7d1b      	ldrb	r3, [r3, #20]
 80010ca:	f04f 0500 	mov.w	r5, #0
 80010ce:	f363 0507 	bfi	r5, r3, #0, #8
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 80010d2:	1e4b      	subs	r3, r1, #1
 80010d4:	4403      	add	r3, r0
 80010d6:	7d1b      	ldrb	r3, [r3, #20]
 80010d8:	f363 250f 	bfi	r5, r3, #8, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80010dc:	3902      	subs	r1, #2
 80010de:	b289      	uxth	r1, r1
 80010e0:	3014      	adds	r0, #20
 80010e2:	f000 fcd7 	bl	8001a94 <CRC16>
 80010e6:	4601      	mov	r1, r0
	if(validaCRC(CRCKey,CRCReceive)){
 80010e8:	4628      	mov	r0, r5
 80010ea:	f000 fcef 	bl	8001acc <validaCRC>
 80010ee:	b908      	cbnz	r0, 80010f4 <bluetoothErroCRC+0x3a>
}
 80010f0:	b003      	add	sp, #12
 80010f2:	bd30      	pop	{r4, r5, pc}
		TXCRC[0] = 0x01;
 80010f4:	2301      	movs	r3, #1
 80010f6:	f88d 3004 	strb.w	r3, [sp, #4]
		TXCRC[1] = 0xEE;
 80010fa:	23ee      	movs	r3, #238	; 0xee
 80010fc:	f88d 3005 	strb.w	r3, [sp, #5]
		TXCRC[2] = 0xEE;
 8001100:	f88d 3006 	strb.w	r3, [sp, #6]
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 8001104:	2332      	movs	r3, #50	; 0x32
 8001106:	2203      	movs	r2, #3
 8001108:	a901      	add	r1, sp, #4
 800110a:	6820      	ldr	r0, [r4, #0]
 800110c:	f006 ff86 	bl	800801c <HAL_UART_Transmit>
 8001110:	e7ee      	b.n	80010f0 <bluetoothErroCRC+0x36>

08001112 <bluetoothEnviaComando>:
{
 8001112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001116:	af00      	add	r7, sp, #0
 8001118:	4606      	mov	r6, r0
 800111a:	4608      	mov	r0, r1
 800111c:	4614      	mov	r4, r2
	uint8_t	TX_Buffer		[size+3];
 800111e:	f102 0802 	add.w	r8, r2, #2
 8001122:	f102 030a 	add.w	r3, r2, #10
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	ebad 0d03 	sub.w	sp, sp, r3
 800112e:	466d      	mov	r5, sp
	for (int i = 0; i <= size; ++i) {
 8001130:	2300      	movs	r3, #0
 8001132:	e002      	b.n	800113a <bluetoothEnviaComando+0x28>
		TX_Buffer[i]=_out[i];
 8001134:	5cc2      	ldrb	r2, [r0, r3]
 8001136:	54ea      	strb	r2, [r5, r3]
	for (int i = 0; i <= size; ++i) {
 8001138:	3301      	adds	r3, #1
 800113a:	42a3      	cmp	r3, r4
 800113c:	ddfa      	ble.n	8001134 <bluetoothEnviaComando+0x22>
	CRCVar = CRC16(_out,size+1);
 800113e:	fa1f f984 	uxth.w	r9, r4
 8001142:	f109 0101 	add.w	r1, r9, #1
 8001146:	b289      	uxth	r1, r1
 8001148:	f000 fca4 	bl	8001a94 <CRC16>
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 800114c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001150:	f805 3008 	strb.w	r3, [r5, r8]
	TX_Buffer[size+1] = (unsigned char) CRCVar.byte.hi;
 8001154:	3401      	adds	r4, #1
 8001156:	5528      	strb	r0, [r5, r4]
	return HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 8001158:	f109 0203 	add.w	r2, r9, #3
 800115c:	2332      	movs	r3, #50	; 0x32
 800115e:	b292      	uxth	r2, r2
 8001160:	4629      	mov	r1, r5
 8001162:	6830      	ldr	r0, [r6, #0]
 8001164:	f006 ff5a 	bl	800801c <HAL_UART_Transmit>
}
 8001168:	46bd      	mov	sp, r7
 800116a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800116e <bluetooth1000ms>:
	if(ble->JanelaConexao>0)
 800116e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8001172:	b113      	cbz	r3, 800117a <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 8001174:	3b01      	subs	r3, #1
 8001176:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 800117a:	4770      	bx	lr

0800117c <comandHM10>:
void 			comandHM10(Bluetooth *ble, char _out[], uint16_t delay){
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	4606      	mov	r6, r0
 8001180:	460c      	mov	r4, r1
 8001182:	4615      	mov	r5, r2
	HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 8001184:	4608      	mov	r0, r1
 8001186:	f7fe ffe3 	bl	8000150 <strlen>
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	b282      	uxth	r2, r0
 800118e:	4621      	mov	r1, r4
 8001190:	6830      	ldr	r0, [r6, #0]
 8001192:	f006 ff43 	bl	800801c <HAL_UART_Transmit>
	if(delay != 0){
 8001196:	b905      	cbnz	r5, 800119a <comandHM10+0x1e>
}
 8001198:	bd70      	pop	{r4, r5, r6, pc}
		osDelay(delay);
 800119a:	4628      	mov	r0, r5
 800119c:	f007 fb6b 	bl	8008876 <osDelay>
}
 80011a0:	e7fa      	b.n	8001198 <comandHM10+0x1c>
	...

080011a4 <bluetoothDescon>:
void 			bluetoothDescon(Bluetooth* ble){
 80011a4:	b538      	push	{r3, r4, r5, lr}
 80011a6:	4604      	mov	r4, r0
	comandHM10(ble,"AT",50);//DESCONECTA
 80011a8:	4d05      	ldr	r5, [pc, #20]	; (80011c0 <bluetoothDescon+0x1c>)
 80011aa:	2232      	movs	r2, #50	; 0x32
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff ffe5 	bl	800117c <comandHM10>
	comandHM10(ble,"AT",50);//DESCONECTA
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	4629      	mov	r1, r5
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ffe0 	bl	800117c <comandHM10>
}
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	0800c250 	.word	0x0800c250

080011c4 <bluetooth10ms>:
void 			bluetooth10ms(Bluetooth* ble){
 80011c4:	b510      	push	{r4, lr}
 80011c6:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 80011c8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80011ca:	2b78      	cmp	r3, #120	; 0x78
 80011cc:	d801      	bhi.n	80011d2 <bluetooth10ms+0xe>
 80011ce:	3301      	adds	r3, #1
 80011d0:	8603      	strh	r3, [r0, #48]	; 0x30
	if(ble->JanelaConexao>0){
 80011d2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80011d6:	b13b      	cbz	r3, 80011e8 <bluetooth10ms+0x24>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 80011d8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80011da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011de:	d904      	bls.n	80011ea <bluetooth10ms+0x26>
			bluetoothDescon(ble);
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff ffdf 	bl	80011a4 <bluetoothDescon>
 80011e6:	e000      	b.n	80011ea <bluetooth10ms+0x26>
		__NOP();
 80011e8:	bf00      	nop
	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 80011ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80011ec:	2b78      	cmp	r3, #120	; 0x78
 80011ee:	d800      	bhi.n	80011f2 <bluetooth10ms+0x2e>
}
 80011f0:	bd10      	pop	{r4, pc}
		bluetoothDescon(ble);
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff ffd6 	bl	80011a4 <bluetoothDescon>
}
 80011f8:	e7fa      	b.n	80011f0 <bluetooth10ms+0x2c>

080011fa <putQueueComando>:
void putQueueComando(Bluetooth *ble, ConexaoBleRX comando) {
 80011fa:	b538      	push	{r3, r4, r5, lr}
 80011fc:	4604      	mov	r4, r0
 80011fe:	460d      	mov	r5, r1
	// permitir apenas um item por vez na fila. evitando dessincronia com dado recebida.
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom)) {
 8001200:	6880      	ldr	r0, [r0, #8]
 8001202:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001204:	4798      	blx	r3
 8001206:	b138      	cbz	r0, 8001218 <putQueueComando+0x1e>
		ble->myQ_bleCom->insert(ble->myQ_bleCom, comando);
 8001208:	68a0      	ldr	r0, [r4, #8]
 800120a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800120c:	4629      	mov	r1, r5
 800120e:	4798      	blx	r3
		osSignalSet(ble->Task, newMessage);
 8001210:	210a      	movs	r1, #10
 8001212:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001214:	f007 fb8d 	bl	8008932 <osSignalSet>
	}
}
 8001218:	bd38      	pop	{r3, r4, r5, pc}

0800121a <putQueueDataRx>:
void putQueueDataRx(Bluetooth *ble, ComandosBleRX comando) {
 800121a:	b538      	push	{r3, r4, r5, lr}
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
	// permitir apenas um item por vez na fila. evitando dessincronia com dado recebida.
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 8001220:	68c0      	ldr	r0, [r0, #12]
 8001222:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001224:	4798      	blx	r3
 8001226:	b138      	cbz	r0, 8001238 <putQueueDataRx+0x1e>
		ble->myQ_dataRx->insert(ble->myQ_dataRx, comando);
 8001228:	68e0      	ldr	r0, [r4, #12]
 800122a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800122c:	4629      	mov	r1, r5
 800122e:	4798      	blx	r3
		osSignalSet(ble->Task, newMessage);
 8001230:	210a      	movs	r1, #10
 8001232:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001234:	f007 fb7d 	bl	8008932 <osSignalSet>
	}
}
 8001238:	bd38      	pop	{r3, r4, r5, pc}

0800123a <putQueueDataTx>:
void putQueueDataTx(Bluetooth *ble, ComandosBleTX comando) {
 800123a:	b510      	push	{r4, lr}
 800123c:	4604      	mov	r4, r0
	//todo tratar erro de fila cheia //bleError_Handler
	ble->myQ_dataTx->insert(ble->myQ_dataTx, comando);
 800123e:	6900      	ldr	r0, [r0, #16]
 8001240:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001242:	4798      	blx	r3
	osSignalSet(ble->Task, newMessage);
 8001244:	210a      	movs	r1, #10
 8001246:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001248:	f007 fb73 	bl	8008932 <osSignalSet>
}
 800124c:	bd10      	pop	{r4, pc}

0800124e <bleError_Handler>:
void 			bleError_Handler(BLE_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	//todo dependendo do erro resetar o sistema ou nao
	/* User can add his own implementation to report the HAL error return state */
	__NOP();
 800124e:	bf00      	nop
	//	while (1)
	//	{
	//		__NOP();
	//	}
	/* USER CODE END Error_Handler_Debug */
}
 8001250:	4770      	bx	lr

08001252 <bleAddComp>:
void 			bleAddComp(Bluetooth* ble, BleComando* _blecomm, ComandosBleRX __comando){
 8001252:	b570      	push	{r4, r5, r6, lr}
 8001254:	460c      	mov	r4, r1
 8001256:	4616      	mov	r6, r2
	if (ble == NULL || _blecomm == NULL) {
 8001258:	4605      	mov	r5, r0
 800125a:	b188      	cbz	r0, 8001280 <bleAddComp+0x2e>
 800125c:	b181      	cbz	r1, 8001280 <bleAddComp+0x2e>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 800125e:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 8001262:	2b1d      	cmp	r3, #29
 8001264:	d810      	bhi.n	8001288 <bleAddComp+0x36>
	_blecomm->_comando 	= __comando;
 8001266:	7026      	strb	r6, [r4, #0]
	_blecomm->_tipo 	= ComandoBasico;
 8001268:	2300      	movs	r3, #0
 800126a:	7063      	strb	r3, [r4, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 800126c:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 8001270:	f103 0210 	add.w	r2, r3, #16
 8001274:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
	ble->contComandos++;
 8001278:	3301      	adds	r3, #1
 800127a:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
}
 800127e:	bd70      	pop	{r4, r5, r6, pc}
		bleError_Handler(BLE_OBJETO_NULO);
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff ffe4 	bl	800124e <bleError_Handler>
 8001286:	e7ea      	b.n	800125e <bleAddComp+0xc>
		bleError_Handler(BLE_COMANDO_NAO_CRIADO);
 8001288:	2007      	movs	r0, #7
 800128a:	f7ff ffe0 	bl	800124e <bleError_Handler>
 800128e:	e7ea      	b.n	8001266 <bleAddComp+0x14>

08001290 <createBleComp>:
BleComando* 	createBleComp(Bluetooth* ble, ComandosBleRX __comando) {
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
	BleComando *me = (BleComando*)malloc(sizeof(BleComando));
 8001296:	2002      	movs	r0, #2
 8001298:	f009 fd7e 	bl	800ad98 <malloc>
	if (me == NULL) {
 800129c:	4606      	mov	r6, r0
 800129e:	b120      	cbz	r0, 80012aa <createBleComp+0x1a>
	bleAddComp(ble, me, __comando);
 80012a0:	462a      	mov	r2, r5
 80012a2:	4601      	mov	r1, r0
 80012a4:	4620      	mov	r0, r4
 80012a6:	f7ff ffd4 	bl	8001252 <bleAddComp>
}
 80012aa:	4630      	mov	r0, r6
 80012ac:	bd70      	pop	{r4, r5, r6, pc}

080012ae <bleAddCompConexao>:
void 			bleAddCompConexao(Bluetooth* ble, BleComando* _blecomm, ConexaoBleTX __comando){
 80012ae:	b570      	push	{r4, r5, r6, lr}
 80012b0:	460c      	mov	r4, r1
 80012b2:	4616      	mov	r6, r2
	if (ble == NULL || _blecomm == NULL) {
 80012b4:	4605      	mov	r5, r0
 80012b6:	b188      	cbz	r0, 80012dc <bleAddCompConexao+0x2e>
 80012b8:	b181      	cbz	r1, 80012dc <bleAddCompConexao+0x2e>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 80012ba:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 80012be:	2b1d      	cmp	r3, #29
 80012c0:	d810      	bhi.n	80012e4 <bleAddCompConexao+0x36>
	_blecomm->_comando 	= __comando;
 80012c2:	7026      	strb	r6, [r4, #0]
	_blecomm->_tipo 	= ComandoConexao;
 80012c4:	2301      	movs	r3, #1
 80012c6:	7063      	strb	r3, [r4, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80012c8:	f895 30b8 	ldrb.w	r3, [r5, #184]	; 0xb8
 80012cc:	f103 0210 	add.w	r2, r3, #16
 80012d0:	f845 4022 	str.w	r4, [r5, r2, lsl #2]
	ble->contComandos++;
 80012d4:	3301      	adds	r3, #1
 80012d6:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
}
 80012da:	bd70      	pop	{r4, r5, r6, pc}
		bleError_Handler(BLE_OBJETO_NULO);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ffb6 	bl	800124e <bleError_Handler>
 80012e2:	e7ea      	b.n	80012ba <bleAddCompConexao+0xc>
		bleError_Handler(BLE_COMANDOCON_NAO_CRIADO);
 80012e4:	2008      	movs	r0, #8
 80012e6:	f7ff ffb2 	bl	800124e <bleError_Handler>
 80012ea:	e7ea      	b.n	80012c2 <bleAddCompConexao+0x14>

080012ec <readComando>:
void		 	readComando(Bluetooth* ble, TypeComandoBle tipo){
 80012ec:	b530      	push	{r4, r5, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	4604      	mov	r4, r0
 80012f2:	460d      	mov	r5, r1
	bluetoothErroCRC(ble);
 80012f4:	f7ff fee1 	bl	80010ba <bluetoothErroCRC>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 80012f8:	2300      	movs	r3, #0
 80012fa:	e005      	b.n	8001308 <readComando+0x1c>
				putQueueDataRx(ble, ble->ComandoAtual._comando);
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff ff8c 	bl	800121a <putQueueDataRx>
				break;
 8001302:	e023      	b.n	800134c <readComando+0x60>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 8001304:	3301      	adds	r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 800130c:	429a      	cmp	r2, r3
 800130e:	d91a      	bls.n	8001346 <readComando+0x5a>
		localComandoRX = *ble->_BleCommArr[i];
 8001310:	f103 0210 	add.w	r2, r3, #16
 8001314:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001318:	8812      	ldrh	r2, [r2, #0]
 800131a:	f8ad 2004 	strh.w	r2, [sp, #4]
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 800131e:	7d62      	ldrb	r2, [r4, #21]
 8001320:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8001324:	428a      	cmp	r2, r1
 8001326:	d1ed      	bne.n	8001304 <readComando+0x18>
 8001328:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800132c:	42aa      	cmp	r2, r5
 800132e:	d1e9      	bne.n	8001304 <readComando+0x18>
			ble->ComandoAtual = localComandoRX;
 8001330:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001334:	86a3      	strh	r3, [r4, #52]	; 0x34
			switch (tipo) {
 8001336:	2d00      	cmp	r5, #0
 8001338:	d0e0      	beq.n	80012fc <readComando+0x10>
 800133a:	2d01      	cmp	r5, #1
 800133c:	d106      	bne.n	800134c <readComando+0x60>
				putQueueComando(ble, ble->ComandoAtual._comando);
 800133e:	4620      	mov	r0, r4
 8001340:	f7ff ff5b 	bl	80011fa <putQueueComando>
				break;
 8001344:	e002      	b.n	800134c <readComando+0x60>
	bleError_Handler( BLE_COMANDO_NAO_ENCONTRADO);
 8001346:	2004      	movs	r0, #4
 8001348:	f7ff ff81 	bl	800124e <bleError_Handler>
}
 800134c:	b003      	add	sp, #12
 800134e:	bd30      	pop	{r4, r5, pc}

08001350 <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001350:	6843      	ldr	r3, [r0, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	f012 0f02 	tst.w	r2, #2
 800135a:	f000 80aa 	beq.w	80014b2 <BLEDMA_IrqHandler+0x162>
void 			BLEDMA_IrqHandler (Bluetooth *ble){
 800135e:	b530      	push	{r4, r5, lr}
 8001360:	b08b      	sub	sp, #44	; 0x2c
 8001362:	4604      	mov	r4, r0
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001364:	4a53      	ldr	r2, [pc, #332]	; (80014b4 <BLEDMA_IrqHandler+0x164>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d014      	beq.n	8001394 <BLEDMA_IrqHandler+0x44>
 800136a:	3214      	adds	r2, #20
 800136c:	4293      	cmp	r3, r2
 800136e:	d029      	beq.n	80013c4 <BLEDMA_IrqHandler+0x74>
 8001370:	3214      	adds	r2, #20
 8001372:	4293      	cmp	r3, r2
 8001374:	d028      	beq.n	80013c8 <BLEDMA_IrqHandler+0x78>
 8001376:	3214      	adds	r2, #20
 8001378:	4293      	cmp	r3, r2
 800137a:	d028      	beq.n	80013ce <BLEDMA_IrqHandler+0x7e>
 800137c:	3214      	adds	r2, #20
 800137e:	4293      	cmp	r3, r2
 8001380:	d028      	beq.n	80013d4 <BLEDMA_IrqHandler+0x84>
 8001382:	3214      	adds	r2, #20
 8001384:	4293      	cmp	r3, r2
 8001386:	d002      	beq.n	800138e <BLEDMA_IrqHandler+0x3e>
 8001388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800138c:	e003      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
 800138e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001392:	e000      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
 8001394:	2202      	movs	r2, #2
 8001396:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <BLEDMA_IrqHandler+0x168>)
 8001398:	605a      	str	r2, [r3, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f1c3 0318 	rsb	r3, r3, #24
 80013a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 80013a8:	f104 0514 	add.w	r5, r4, #20
 80013ac:	4629      	mov	r1, r5
 80013ae:	a801      	add	r0, sp, #4
 80013b0:	f00a f8d9 	bl	800b566 <strcpy>
		switch(ble->MaquinaConexao){
 80013b4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d848      	bhi.n	800144e <BLEDMA_IrqHandler+0xfe>
 80013bc:	e8df f003 	tbb	[pc, r3]
 80013c0:	623f2a0d 	.word	0x623f2a0d
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80013c4:	2220      	movs	r2, #32
 80013c6:	e7e6      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	e7e3      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
 80013ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d2:	e7e0      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
 80013d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d8:	e7dd      	b.n	8001396 <BLEDMA_IrqHandler+0x46>
			ble->msIdle=0;
 80013da:	2300      	movs	r3, #0
 80013dc:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "OK+ADDR:");
 80013de:	4937      	ldr	r1, [pc, #220]	; (80014bc <BLEDMA_IrqHandler+0x16c>)
 80013e0:	a801      	add	r0, sp, #4
 80013e2:	f009 ffd1 	bl	800b388 <strstr>
			if (ss != NULL){
 80013e6:	b390      	cbz	r0, 800144e <BLEDMA_IrqHandler+0xfe>
				PontoExato = ss - StringRecebida;
 80013e8:	aa01      	add	r2, sp, #4
 80013ea:	1a80      	subs	r0, r0, r2
				for (int i = 0; i < 12; i++) {
 80013ec:	2200      	movs	r2, #0
 80013ee:	e009      	b.n	8001404 <BLEDMA_IrqHandler+0xb4>
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 80013f0:	1813      	adds	r3, r2, r0
 80013f2:	3308      	adds	r3, #8
 80013f4:	4423      	add	r3, r4
 80013f6:	7d19      	ldrb	r1, [r3, #20]
 80013f8:	f102 0328 	add.w	r3, r2, #40	; 0x28
 80013fc:	446b      	add	r3, sp
 80013fe:	f803 1c0c 	strb.w	r1, [r3, #-12]
				for (int i = 0; i < 12; i++) {
 8001402:	3201      	adds	r2, #1
 8001404:	2a0b      	cmp	r2, #11
 8001406:	ddf3      	ble.n	80013f0 <BLEDMA_IrqHandler+0xa0>
				ble->chave = CRC16(addr8Bits,12);
 8001408:	210c      	movs	r1, #12
 800140a:	a807      	add	r0, sp, #28
 800140c:	f000 fb42 	bl	8001a94 <CRC16>
 8001410:	8660      	strh	r0, [r4, #50]	; 0x32
 8001412:	e01c      	b.n	800144e <BLEDMA_IrqHandler+0xfe>
			ble->msIdle=0;
 8001414:	2300      	movs	r3, #0
 8001416:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "OK+CONN");
 8001418:	4929      	ldr	r1, [pc, #164]	; (80014c0 <BLEDMA_IrqHandler+0x170>)
 800141a:	a801      	add	r0, sp, #4
 800141c:	f009 ffb4 	bl	800b388 <strstr>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 8001420:	b118      	cbz	r0, 800142a <BLEDMA_IrqHandler+0xda>
 8001422:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8001426:	2b07      	cmp	r3, #7
 8001428:	d005      	beq.n	8001436 <BLEDMA_IrqHandler+0xe6>
 800142a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142e:	4825      	ldr	r0, [pc, #148]	; (80014c4 <BLEDMA_IrqHandler+0x174>)
 8001430:	f004 fb72 	bl	8005b18 <HAL_GPIO_ReadPin>
 8001434:	b158      	cbz	r0, 800144e <BLEDMA_IrqHandler+0xfe>
				ble->MaquinaConexao = RX_CONECTADO;
 8001436:	2302      	movs	r3, #2
 8001438:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 800143c:	e007      	b.n	800144e <BLEDMA_IrqHandler+0xfe>
			ss = strstr(StringRecebida, "LOST");
 800143e:	4922      	ldr	r1, [pc, #136]	; (80014c8 <BLEDMA_IrqHandler+0x178>)
 8001440:	a801      	add	r0, sp, #4
 8001442:	f009 ffa1 	bl	800b388 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001446:	b188      	cbz	r0, 800146c <BLEDMA_IrqHandler+0x11c>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001448:	2301      	movs	r3, #1
 800144a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
		ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr; /* Set memory address for DMA again */
 800144e:	6863      	ldr	r3, [r4, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	60dd      	str	r5, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 8001454:	6863      	ldr	r3, [r4, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2218      	movs	r2, #24
 800145a:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            	/* Start DMA transfer */
 800145c:	6863      	ldr	r3, [r4, #4]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	b00b      	add	sp, #44	; 0x2c
 800146a:	bd30      	pop	{r4, r5, pc}
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800146c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001470:	4814      	ldr	r0, [pc, #80]	; (80014c4 <BLEDMA_IrqHandler+0x174>)
 8001472:	f004 fb51 	bl	8005b18 <HAL_GPIO_ReadPin>
 8001476:	2800      	cmp	r0, #0
 8001478:	d0e6      	beq.n	8001448 <BLEDMA_IrqHandler+0xf8>
			readComando(ble,ComandoConexao);
 800147a:	2101      	movs	r1, #1
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff35 	bl	80012ec <readComando>
			break;
 8001482:	e7e4      	b.n	800144e <BLEDMA_IrqHandler+0xfe>
			ble->msIdle=0;
 8001484:	2300      	movs	r3, #0
 8001486:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "LOST");
 8001488:	490f      	ldr	r1, [pc, #60]	; (80014c8 <BLEDMA_IrqHandler+0x178>)
 800148a:	a801      	add	r0, sp, #4
 800148c:	f009 ff7c 	bl	800b388 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001490:	b118      	cbz	r0, 800149a <BLEDMA_IrqHandler+0x14a>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001492:	2301      	movs	r3, #1
 8001494:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
				break;
 8001498:	e7d9      	b.n	800144e <BLEDMA_IrqHandler+0xfe>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800149a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <BLEDMA_IrqHandler+0x174>)
 80014a0:	f004 fb3a 	bl	8005b18 <HAL_GPIO_ReadPin>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d0f4      	beq.n	8001492 <BLEDMA_IrqHandler+0x142>
			readComando(ble,ComandoBasico);
 80014a8:	2100      	movs	r1, #0
 80014aa:	4620      	mov	r0, r4
 80014ac:	f7ff ff1e 	bl	80012ec <readComando>
			break;
 80014b0:	e7cd      	b.n	800144e <BLEDMA_IrqHandler+0xfe>
 80014b2:	4770      	bx	lr
 80014b4:	40020008 	.word	0x40020008
 80014b8:	40020000 	.word	0x40020000
 80014bc:	0800c254 	.word	0x0800c254
 80014c0:	0800c260 	.word	0x0800c260
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	0800c268 	.word	0x0800c268

080014cc <BLEUSART_IrqHandler>:
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80014cc:	6803      	ldr	r3, [r0, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	f012 0f10 	tst.w	r2, #16
 80014d6:	d100      	bne.n	80014da <BLEUSART_IrqHandler+0xe>
 80014d8:	4770      	bx	lr
{ //todo comentar melhor
 80014da:	b500      	push	{lr}
 80014dc:	b083      	sub	sp, #12
		tmp = ble->UARTHandle->Instance->SR;                 /* Read status register */
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	9201      	str	r2, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 /* Read data register */
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	9301      	str	r3, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80014e6:	6843      	ldr	r3, [r0, #4]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]
		__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80014f2:	6803      	ldr	r3, [r0, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	68d3      	ldr	r3, [r2, #12]
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	60d3      	str	r3, [r2, #12]
		__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80014fe:	6843      	ldr	r3, [r0, #4]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	6813      	ldr	r3, [r2, #0]
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6013      	str	r3, [r2, #0]
		BLEDMA_IrqHandler (ble);
 800150a:	f7ff ff21 	bl	8001350 <BLEDMA_IrqHandler>
}
 800150e:	b003      	add	sp, #12
 8001510:	f85d fb04 	ldr.w	pc, [sp], #4

08001514 <txBleComando>:
void 			txBleComando(Bluetooth *ble){
 8001514:	b510      	push	{r4, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	4604      	mov	r4, r0
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom)) {
 800151a:	6880      	ldr	r0, [r0, #8]
 800151c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800151e:	4798      	blx	r3
 8001520:	2800      	cmp	r0, #0
 8001522:	d171      	bne.n	8001608 <txBleComando+0xf4>
	buffQueue = ble->myQ_bleCom->remove(ble->myQ_bleCom);
 8001524:	68a0      	ldr	r0, [r4, #8]
 8001526:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001528:	4798      	blx	r3
	if (buffQueue > 0) {
 800152a:	2800      	cmp	r0, #0
 800152c:	dd6c      	ble.n	8001608 <txBleComando+0xf4>
		switch ((uint8_t)buffQueue) {
 800152e:	b2c0      	uxtb	r0, r0
 8001530:	2840      	cmp	r0, #64	; 0x40
 8001532:	d034      	beq.n	800159e <txBleComando+0x8a>
 8001534:	2842      	cmp	r0, #66	; 0x42
 8001536:	d164      	bne.n	8001602 <txBleComando+0xee>
			if(ble->JanelaConexao > 0){
 8001538:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800153c:	b9bb      	cbnz	r3, 800156e <txBleComando+0x5a>
				Buffer[0] 	= 0x01;
 800153e:	2301      	movs	r3, #1
 8001540:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[1] 	= 0x51;
 8001544:	2351      	movs	r3, #81	; 0x51
 8001546:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[2] 	= 0x51;
 800154a:	f88d 3006 	strb.w	r3, [sp, #6]
				Buffer[3] 	= 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[4] 	= 0x00;
 8001554:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[5] 	= 0x00;
 8001558:	f88d 3009 	strb.w	r3, [sp, #9]
				bluetoothEnviaComando(ble,Buffer, 5);
 800155c:	2205      	movs	r2, #5
 800155e:	a901      	add	r1, sp, #4
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff fdd6 	bl	8001112 <bluetoothEnviaComando>
				bleError_Handler(BLE_NEW_DEVICE_NEGADO);
 8001566:	2009      	movs	r0, #9
 8001568:	f7ff fe71 	bl	800124e <bleError_Handler>
			break;
 800156c:	e04c      	b.n	8001608 <txBleComando+0xf4>
				Buffer[0] 	= 0x01;
 800156e:	2301      	movs	r3, #1
 8001570:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[1] 	= 0x51;
 8001574:	2251      	movs	r2, #81	; 0x51
 8001576:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[2] 	= 0x51;
 800157a:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[3] 	= 0x01;
 800157e:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[4] 	= ble->chave.byte.hi	;
 8001582:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8001586:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[5] 	= ble->chave.byte.lo	;
 800158a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800158e:	f88d 3009 	strb.w	r3, [sp, #9]
				bluetoothEnviaComando(ble,Buffer, 5);
 8001592:	2205      	movs	r2, #5
 8001594:	a901      	add	r1, sp, #4
 8001596:	4620      	mov	r0, r4
 8001598:	f7ff fdbb 	bl	8001112 <bluetoothEnviaComando>
				return;
 800159c:	e034      	b.n	8001608 <txBleComando+0xf4>
			chaveApp.byte.hi = ble->_RxDataArr[3];
 800159e:	7de3      	ldrb	r3, [r4, #23]
 80015a0:	f04f 0100 	mov.w	r1, #0
 80015a4:	f363 0107 	bfi	r1, r3, #0, #8
			chaveApp.byte.lo = ble->_RxDataArr[4];
 80015a8:	7e23      	ldrb	r3, [r4, #24]
 80015aa:	f363 210f 	bfi	r1, r3, #8, #8
			if(validaCRC(ble->chave, chaveApp)){
 80015ae:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80015b0:	f000 fa8c 	bl	8001acc <validaCRC>
 80015b4:	b198      	cbz	r0, 80015de <txBleComando+0xca>
				Buffer[0] 	= 0x01;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[1] 	= 0x52;
 80015bc:	2352      	movs	r3, #82	; 0x52
 80015be:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[2] 	= 0x52;
 80015c2:	f88d 3006 	strb.w	r3, [sp, #6]
				Buffer[3] 	= 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f88d 3007 	strb.w	r3, [sp, #7]
				bluetoothEnviaComando(ble,Buffer, 3);
 80015cc:	2203      	movs	r2, #3
 80015ce:	a901      	add	r1, sp, #4
 80015d0:	4620      	mov	r0, r4
 80015d2:	f7ff fd9e 	bl	8001112 <bluetoothEnviaComando>
				bleError_Handler(BLE_SENHA_ERRADA);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f7ff fe39 	bl	800124e <bleError_Handler>
			break;
 80015dc:	e014      	b.n	8001608 <txBleComando+0xf4>
				ble->MaquinaConexao	= RX_VALIDADO;
 80015de:	2203      	movs	r2, #3
 80015e0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
				Buffer[0] 	= 0x01;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[1] 	= 0x52;
 80015ea:	2152      	movs	r1, #82	; 0x52
 80015ec:	f88d 1005 	strb.w	r1, [sp, #5]
				Buffer[2] 	= 0x52;
 80015f0:	f88d 1006 	strb.w	r1, [sp, #6]
				Buffer[3] 	= 0x01;
 80015f4:	f88d 3007 	strb.w	r3, [sp, #7]
				bluetoothEnviaComando(ble,Buffer, 3);
 80015f8:	a901      	add	r1, sp, #4
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fd89 	bl	8001112 <bluetoothEnviaComando>
				return;
 8001600:	e002      	b.n	8001608 <txBleComando+0xf4>
			bleError_Handler(BLE_COMANDO_NAO_ENCONTRADO);
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff fe23 	bl	800124e <bleError_Handler>
}
 8001608:	b004      	add	sp, #16
 800160a:	bd10      	pop	{r4, pc}

0800160c <iniciaBleHm10>:
void		 	iniciaBleHm10(Bluetooth* ble){
 800160c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160e:	b08f      	sub	sp, #60	; 0x3c
 8001610:	4604      	mov	r4, r0
		switch (sequenciaBLE) {
 8001612:	4bc4      	ldr	r3, [pc, #784]	; (8001924 <iniciaBleHm10+0x318>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b04      	cmp	r3, #4
 8001618:	d8fb      	bhi.n	8001612 <iniciaBleHm10+0x6>
 800161a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800161e:	0005      	.short	0x0005
 8001620:	0138004c 	.word	0x0138004c
 8001624:	01720145 	.word	0x01720145
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001628:	4dbf      	ldr	r5, [pc, #764]	; (8001928 <iniciaBleHm10+0x31c>)
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001630:	4628      	mov	r0, r5
 8001632:	f004 fa78 	bl	8005b26 <HAL_GPIO_WritePin>
 8001636:	20c8      	movs	r0, #200	; 0xc8
 8001638:	f007 f91d 	bl	8008876 <osDelay>
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001642:	4628      	mov	r0, r5
 8001644:	f004 fa6f 	bl	8005b26 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001648:	4db8      	ldr	r5, [pc, #736]	; (800192c <iniciaBleHm10+0x320>)
 800164a:	2264      	movs	r2, #100	; 0x64
 800164c:	4629      	mov	r1, r5
 800164e:	4620      	mov	r0, r4
 8001650:	f7ff fd94 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 8001654:	2264      	movs	r2, #100	; 0x64
 8001656:	4629      	mov	r1, r5
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fd8f 	bl	800117c <comandHM10>
			SETUP_UART(115200)
 800165e:	6820      	ldr	r0, [r4, #0]
 8001660:	f006 fd82 	bl	8008168 <HAL_UART_Abort_IT>
 8001664:	6820      	ldr	r0, [r4, #0]
 8001666:	f006 fcbf 	bl	8007fe8 <HAL_UART_DeInit>
 800166a:	2032      	movs	r0, #50	; 0x32
 800166c:	f007 f903 	bl	8008876 <osDelay>
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	f006 fc85 	bl	8007f88 <HAL_UART_Init>
 800167e:	2032      	movs	r0, #50	; 0x32
 8001680:	f007 f8f9 	bl	8008876 <osDelay>
			bluetoothDescon(ble);
 8001684:	4620      	mov	r0, r4
 8001686:	f7ff fd8d 	bl	80011a4 <bluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68d3      	ldr	r3, [r2, #12]
 8001690:	f043 0310 	orr.w	r3, r3, #16
 8001694:	60d3      	str	r3, [r2, #12]
 8001696:	6863      	ldr	r3, [r4, #4]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4621      	mov	r1, r4
 80016a4:	f851 0b14 	ldr.w	r0, [r1], #20
 80016a8:	2218      	movs	r2, #24
 80016aa:	f007 f881 	bl	80087b0 <HAL_UART_Receive_DMA>
			sequenciaBLE = redefineBle;
 80016ae:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <iniciaBleHm10+0x318>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
			break;
 80016b4:	e7ad      	b.n	8001612 <iniciaBleHm10+0x6>
			SETUP_UART(115200)
 80016b6:	6820      	ldr	r0, [r4, #0]
 80016b8:	f006 fd56 	bl	8008168 <HAL_UART_Abort_IT>
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f006 fc93 	bl	8007fe8 <HAL_UART_DeInit>
 80016c2:	2032      	movs	r0, #50	; 0x32
 80016c4:	f007 f8d7 	bl	8008876 <osDelay>
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 80016ce:	605e      	str	r6, [r3, #4]
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f006 fc59 	bl	8007f88 <HAL_UART_Init>
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f007 f8cd 	bl	8008876 <osDelay>
			comandHM10(ble,"AT",100);	//
 80016dc:	4d94      	ldr	r5, [pc, #592]	; (8001930 <iniciaBleHm10+0x324>)
 80016de:	2264      	movs	r2, #100	; 0x64
 80016e0:	4629      	mov	r1, r5
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fd4a 	bl	800117c <comandHM10>
			comandHM10(ble,"AT",100);	//
 80016e8:	2264      	movs	r2, #100	; 0x64
 80016ea:	4629      	mov	r1, r5
 80016ec:	4620      	mov	r0, r4
 80016ee:	f7ff fd45 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80016f2:	4f90      	ldr	r7, [pc, #576]	; (8001934 <iniciaBleHm10+0x328>)
 80016f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f8:	4639      	mov	r1, r7
 80016fa:	4620      	mov	r0, r4
 80016fc:	f7ff fd3e 	bl	800117c <comandHM10>
			SETUP_UART(9600)
 8001700:	6820      	ldr	r0, [r4, #0]
 8001702:	f006 fd31 	bl	8008168 <HAL_UART_Abort_IT>
 8001706:	6820      	ldr	r0, [r4, #0]
 8001708:	f006 fc6e 	bl	8007fe8 <HAL_UART_DeInit>
 800170c:	2032      	movs	r0, #50	; 0x32
 800170e:	f007 f8b2 	bl	8008876 <osDelay>
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	6820      	ldr	r0, [r4, #0]
 800171c:	f006 fc34 	bl	8007f88 <HAL_UART_Init>
 8001720:	2032      	movs	r0, #50	; 0x32
 8001722:	f007 f8a8 	bl	8008876 <osDelay>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001726:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172a:	4639      	mov	r1, r7
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fd25 	bl	800117c <comandHM10>
			comandHM10(ble,"AT",100);	//
 8001732:	2264      	movs	r2, #100	; 0x64
 8001734:	4629      	mov	r1, r5
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff fd20 	bl	800117c <comandHM10>
			comandHM10(ble,"AT",100);	//
 800173c:	2264      	movs	r2, #100	; 0x64
 800173e:	4629      	mov	r1, r5
 8001740:	4620      	mov	r0, r4
 8001742:	f7ff fd1b 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+ADTY3",300);	//BLOQUEIA CONEXAO
 8001746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800174a:	4978      	ldr	r1, [pc, #480]	; (800192c <iniciaBleHm10+0x320>)
 800174c:	4620      	mov	r0, r4
 800174e:	f7ff fd15 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+BAUD4",300);	//COLOCA BAUD EM 115200
 8001752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001756:	4978      	ldr	r1, [pc, #480]	; (8001938 <iniciaBleHm10+0x32c>)
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff fd0f 	bl	800117c <comandHM10>
			SETUP_UART(115200)
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	f006 fd02 	bl	8008168 <HAL_UART_Abort_IT>
 8001764:	6820      	ldr	r0, [r4, #0]
 8001766:	f006 fc3f 	bl	8007fe8 <HAL_UART_DeInit>
 800176a:	2032      	movs	r0, #50	; 0x32
 800176c:	f007 f883 	bl	8008876 <osDelay>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	605e      	str	r6, [r3, #4]
 8001774:	6820      	ldr	r0, [r4, #0]
 8001776:	f006 fc07 	bl	8007f88 <HAL_UART_Init>
 800177a:	2032      	movs	r0, #50	; 0x32
 800177c:	f007 f87b 	bl	8008876 <osDelay>
			MACRO_RESET_BLE
 8001780:	4e69      	ldr	r6, [pc, #420]	; (8001928 <iniciaBleHm10+0x31c>)
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001788:	4630      	mov	r0, r6
 800178a:	f004 f9cc 	bl	8005b26 <HAL_GPIO_WritePin>
 800178e:	20c8      	movs	r0, #200	; 0xc8
 8001790:	f007 f871 	bl	8008876 <osDelay>
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179a:	4630      	mov	r0, r6
 800179c:	f004 f9c3 	bl	8005b26 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT",100);	//
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	4629      	mov	r1, r5
 80017a4:	4620      	mov	r0, r4
 80017a6:	f7ff fce9 	bl	800117c <comandHM10>
			comandHM10(ble,"AT",100);	//
 80017aa:	2264      	movs	r2, #100	; 0x64
 80017ac:	4629      	mov	r1, r5
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fce4 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+POWE3",300);	//POTENCIA MAXIMA
 80017b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017b8:	4960      	ldr	r1, [pc, #384]	; (800193c <iniciaBleHm10+0x330>)
 80017ba:	4620      	mov	r0, r4
 80017bc:	f7ff fcde 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+SHOW3",300);	//MOSTRA O NOME e rssi
 80017c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017c4:	495e      	ldr	r1, [pc, #376]	; (8001940 <iniciaBleHm10+0x334>)
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff fcd8 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+GAIN1",300);	//INSERE GANHO
 80017cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017d0:	495c      	ldr	r1, [pc, #368]	; (8001944 <iniciaBleHm10+0x338>)
 80017d2:	4620      	mov	r0, r4
 80017d4:	f7ff fcd2 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 80017d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017dc:	495a      	ldr	r1, [pc, #360]	; (8001948 <iniciaBleHm10+0x33c>)
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fccc 	bl	800117c <comandHM10>
			comandHM10(ble,"AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 80017e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017e8:	4958      	ldr	r1, [pc, #352]	; (800194c <iniciaBleHm10+0x340>)
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fcc6 	bl	800117c <comandHM10>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 80017f0:	4b57      	ldr	r3, [pc, #348]	; (8001950 <iniciaBleHm10+0x344>)
 80017f2:	4a58      	ldr	r2, [pc, #352]	; (8001954 <iniciaBleHm10+0x348>)
 80017f4:	2132      	movs	r1, #50	; 0x32
 80017f6:	a801      	add	r0, sp, #4
 80017f8:	f009 fcb2 	bl	800b160 <sniprintf>
			comandHM10(ble,comando, 400); 	// Configura o nome no dispositivo
 80017fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001800:	a901      	add	r1, sp, #4
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fcba 	bl	800117c <comandHM10>
			M_BLE_RESET
 8001808:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800180c:	4952      	ldr	r1, [pc, #328]	; (8001958 <iniciaBleHm10+0x34c>)
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fcb4 	bl	800117c <comandHM10>
			sequenciaBLE = capturaAddr;
 8001814:	4b43      	ldr	r3, [pc, #268]	; (8001924 <iniciaBleHm10+0x318>)
 8001816:	2202      	movs	r2, #2
 8001818:	701a      	strb	r2, [r3, #0]
			break;
 800181a:	e6fa      	b.n	8001612 <iniciaBleHm10+0x6>
				comandHM10(ble,"AT+ADDR?",300);//pede addr
 800181c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001820:	494e      	ldr	r1, [pc, #312]	; (800195c <iniciaBleHm10+0x350>)
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff fcaa 	bl	800117c <comandHM10>
				MACRO_DEFINE_INTERRUPT
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68d3      	ldr	r3, [r2, #12]
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	60d3      	str	r3, [r2, #12]
 8001834:	6863      	ldr	r3, [r4, #4]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	f043 0302 	orr.w	r3, r3, #2
 800183e:	6013      	str	r3, [r2, #0]
 8001840:	4625      	mov	r5, r4
 8001842:	f855 0b14 	ldr.w	r0, [r5], #20
 8001846:	2218      	movs	r2, #24
 8001848:	4629      	mov	r1, r5
 800184a:	f006 ffb1 	bl	80087b0 <HAL_UART_Receive_DMA>
				if (ble->chave.hilo != 0){
 800184e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 8001852:	b923      	cbnz	r3, 800185e <iniciaBleHm10+0x252>
					tryingAddr++;
 8001854:	4a42      	ldr	r2, [pc, #264]	; (8001960 <iniciaBleHm10+0x354>)
 8001856:	7813      	ldrb	r3, [r2, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	7013      	strb	r3, [r2, #0]
					break;
 800185c:	e01b      	b.n	8001896 <iniciaBleHm10+0x28a>
					sequenciaBLE = final;
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <iniciaBleHm10+0x318>)
 8001860:	2203      	movs	r2, #3
 8001862:	701a      	strb	r2, [r3, #0]
					MACRO_DEFINE_INTERRUPT
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68d3      	ldr	r3, [r2, #12]
 800186a:	f043 0310 	orr.w	r3, r3, #16
 800186e:	60d3      	str	r3, [r2, #12]
 8001870:	6863      	ldr	r3, [r4, #4]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	6813      	ldr	r3, [r2, #0]
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	2218      	movs	r2, #24
 800187e:	4629      	mov	r1, r5
 8001880:	6820      	ldr	r0, [r4, #0]
 8001882:	f006 ff95 	bl	80087b0 <HAL_UART_Receive_DMA>
					tryingAddr=0;
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <iniciaBleHm10+0x354>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
					break;
 800188c:	e003      	b.n	8001896 <iniciaBleHm10+0x28a>
			while (tryingAddr < max_attempts) {
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <iniciaBleHm10+0x354>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b0e      	cmp	r3, #14
 8001894:	d9c2      	bls.n	800181c <iniciaBleHm10+0x210>
			if(tryingAddr >= max_attempts){
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <iniciaBleHm10+0x354>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b0e      	cmp	r3, #14
 800189c:	f67f aeb9 	bls.w	8001612 <iniciaBleHm10+0x6>
				sequenciaBLE = erro;//extrapolou as tentativas
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <iniciaBleHm10+0x318>)
 80018a2:	2204      	movs	r2, #4
 80018a4:	701a      	strb	r2, [r3, #0]
			break;
 80018a6:	e6b4      	b.n	8001612 <iniciaBleHm10+0x6>
			comandHM10(ble,"AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80018a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ac:	492d      	ldr	r1, [pc, #180]	; (8001964 <iniciaBleHm10+0x358>)
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff fc64 	bl	800117c <comandHM10>
			MACRO_RESET_BLE
 80018b4:	4d1c      	ldr	r5, [pc, #112]	; (8001928 <iniciaBleHm10+0x31c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018bc:	4628      	mov	r0, r5
 80018be:	f004 f932 	bl	8005b26 <HAL_GPIO_WritePin>
 80018c2:	20c8      	movs	r0, #200	; 0xc8
 80018c4:	f006 ffd7 	bl	8008876 <osDelay>
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ce:	4628      	mov	r0, r5
 80018d0:	f004 f929 	bl	8005b26 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 80018d4:	6823      	ldr	r3, [r4, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68d3      	ldr	r3, [r2, #12]
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 80018e0:	6863      	ldr	r3, [r4, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6813      	ldr	r3, [r2, #0]
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 80018ec:	4621      	mov	r1, r4
 80018ee:	f851 0b14 	ldr.w	r0, [r1], #20
 80018f2:	2218      	movs	r2, #24
 80018f4:	f006 ff5c 	bl	80087b0 <HAL_UART_Receive_DMA>
			ble->MaquinaConexao = RX_DESCONECTADO;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 80018fe:	b00f      	add	sp, #60	; 0x3c
 8001900:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bleError_Handler(BLE_EXTRAPOLOU_TRY);
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff fca3 	bl	800124e <bleError_Handler>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001908:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <iniciaBleHm10+0x35c>)
 800190e:	68ca      	ldr	r2, [r1, #12]
 8001910:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <iniciaBleHm10+0x360>)
 8001916:	4313      	orrs	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]
 800191a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800191e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8001920:	e7fd      	b.n	800191e <iniciaBleHm10+0x312>
 8001922:	bf00      	nop
 8001924:	2000008c 	.word	0x2000008c
 8001928:	40010c00 	.word	0x40010c00
 800192c:	0800c270 	.word	0x0800c270
 8001930:	0800c250 	.word	0x0800c250
 8001934:	0800c27c 	.word	0x0800c27c
 8001938:	0800c288 	.word	0x0800c288
 800193c:	0800c294 	.word	0x0800c294
 8001940:	0800c2a0 	.word	0x0800c2a0
 8001944:	0800c2ac 	.word	0x0800c2ac
 8001948:	0800c2b8 	.word	0x0800c2b8
 800194c:	0800c2c4 	.word	0x0800c2c4
 8001950:	0800c2d0 	.word	0x0800c2d0
 8001954:	0800c2dc 	.word	0x0800c2dc
 8001958:	0800c2e8 	.word	0x0800c2e8
 800195c:	0800c2f4 	.word	0x0800c2f4
 8001960:	2000008d 	.word	0x2000008d
 8001964:	0800c300 	.word	0x0800c300
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	05fa0004 	.word	0x05fa0004

08001970 <bleConstrutora>:
void	 		bleConstrutora(Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osThreadId Task){
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	460e      	mov	r6, r1
 8001974:	4617      	mov	r7, r2
 8001976:	461d      	mov	r5, r3
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL) {
 8001978:	4604      	mov	r4, r0
 800197a:	b108      	cbz	r0, 8001980 <bleConstrutora+0x10>
 800197c:	b101      	cbz	r1, 8001980 <bleConstrutora+0x10>
 800197e:	b912      	cbnz	r2, 8001986 <bleConstrutora+0x16>
		bleError_Handler(BLE_OBJETO_NULO);
 8001980:	2001      	movs	r0, #1
 8001982:	f7ff fc64 	bl	800124e <bleError_Handler>
	ble->UARTHandle 	= UARTHandle;
 8001986:	6026      	str	r6, [r4, #0]
	ble->UARTDMAHandle 	= UARTDMAHandle;
 8001988:	6067      	str	r7, [r4, #4]
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 800198a:	2300      	movs	r3, #0
 800198c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 8001990:	2378      	movs	r3, #120	; 0x78
 8001992:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	ble->myQ_bleCom = Queue_create();
 8001996:	f001 fa79 	bl	8002e8c <Queue_create>
 800199a:	60a0      	str	r0, [r4, #8]
	ble->myQ_dataRx = Queue_create();
 800199c:	f001 fa76 	bl	8002e8c <Queue_create>
 80019a0:	60e0      	str	r0, [r4, #12]
	ble->myQ_dataTx = Queue_create();
 80019a2:	f001 fa73 	bl	8002e8c <Queue_create>
 80019a6:	6120      	str	r0, [r4, #16]
	ble->Task 		= Task;
 80019a8:	63e5      	str	r5, [r4, #60]	; 0x3c
	osSignalSet(ble->Task, newMessage);
 80019aa:	210a      	movs	r1, #10
 80019ac:	4628      	mov	r0, r5
 80019ae:	f006 ffc0 	bl	8008932 <osSignalSet>
	bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA);
 80019b2:	2242      	movs	r2, #66	; 0x42
 80019b4:	f104 0136 	add.w	r1, r4, #54	; 0x36
 80019b8:	4620      	mov	r0, r4
 80019ba:	f7ff fc78 	bl	80012ae <bleAddCompConexao>
	bleAddCompConexao(ble, &ble->BLERecebeuSenha, RX_RECEBEU_SENHA);
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fc72 	bl	80012ae <bleAddCompConexao>
	iniciaBleHm10(ble);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f7ff fe1e 	bl	800160c <iniciaBleHm10>
	ble->aknowladge	= sendAknowladge;
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <bleConstrutora+0x68>)
 80019d2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 80019d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d8:	08001095 	.word	0x08001095

080019dc <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	4607      	mov	r7, r0
 80019e2:	460e      	mov	r6, r1
 80019e4:	4615      	mov	r5, r2
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 80019e6:	2400      	movs	r4, #0
 80019e8:	e00a      	b.n	8001a00 <vetor4b_TO_Double+0x24>
		myValue.bytes[i] = vetor[inicio + i] ;
 80019ea:	192b      	adds	r3, r5, r4
 80019ec:	5cf1      	ldrb	r1, [r6, r3]
 80019ee:	f104 0308 	add.w	r3, r4, #8
 80019f2:	446b      	add	r3, sp
 80019f4:	f803 1c04 	strb.w	r1, [r3, #-4]
		printf("%d \n",myValue.bytes[i]);
 80019f8:	4806      	ldr	r0, [pc, #24]	; (8001a14 <vetor4b_TO_Double+0x38>)
 80019fa:	f009 fb43 	bl	800b084 <iprintf>
	for (int i = 0; i < 4; ++i) {
 80019fe:	3401      	adds	r4, #1
 8001a00:	2c03      	cmp	r4, #3
 8001a02:	ddf2      	ble.n	80019ea <vetor4b_TO_Double+0xe>
	}

	*destino = (double)myValue.value;
 8001a04:	9801      	ldr	r0, [sp, #4]
 8001a06:	f7fe fd0f 	bl	8000428 <__aeabi_f2d>
 8001a0a:	e9c7 0100 	strd	r0, r1, [r7]
}
 8001a0e:	b003      	add	sp, #12
 8001a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a12:	bf00      	nop
 8001a14:	0800c30c 	.word	0x0800c30c

08001a18 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001a18:	b508      	push	{r3, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a1a:	b148      	cbz	r0, 8001a30 <vetor2b_TO_uint16+0x18>
 8001a1c:	4684      	mov	ip, r0
 8001a1e:	b139      	cbz	r1, 8001a30 <vetor2b_TO_uint16+0x18>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a20:	5c88      	ldrb	r0, [r1, r2]
 8001a22:	4411      	add	r1, r2
 8001a24:	784b      	ldrb	r3, [r1, #1]
 8001a26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001a2a:	f8ac 3000 	strh.w	r3, [ip]
}
 8001a2e:	bd08      	pop	{r3, pc}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <vetor2b_TO_uint16+0x20>)
 8001a32:	f009 fb8d 	bl	800b150 <puts>
		return;
 8001a36:	e7fa      	b.n	8001a2e <vetor2b_TO_uint16+0x16>
 8001a38:	0800c314 	.word	0x0800c314

08001a3c <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001a3c:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001a3e:	b158      	cbz	r0, 8001a58 <vetor2b_TO_Double+0x1c>
 8001a40:	4604      	mov	r4, r0
 8001a42:	b149      	cbz	r1, 8001a58 <vetor2b_TO_Double+0x1c>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001a44:	5c88      	ldrb	r0, [r1, r2]
 8001a46:	4411      	add	r1, r2
 8001a48:	784b      	ldrb	r3, [r1, #1]
 8001a4a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001a4e:	f7fe fcd9 	bl	8000404 <__aeabi_i2d>
 8001a52:	e9c4 0100 	strd	r0, r1, [r4]
}
 8001a56:	bd10      	pop	{r4, pc}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001a58:	4801      	ldr	r0, [pc, #4]	; (8001a60 <vetor2b_TO_Double+0x24>)
 8001a5a:	f009 fb79 	bl	800b150 <puts>
		return;
 8001a5e:	e7fa      	b.n	8001a56 <vetor2b_TO_Double+0x1a>
 8001a60:	0800c314 	.word	0x0800c314

08001a64 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 8001a64:	b530      	push	{r4, r5, lr}
 8001a66:	b083      	sub	sp, #12
 8001a68:	4615      	mov	r5, r2
 8001a6a:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 8001a6c:	f7fe ffee 	bl	8000a4c <__aeabi_d2f>
 8001a70:	9001      	str	r0, [sp, #4]

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
 8001a72:	2100      	movs	r1, #0
 8001a74:	e009      	b.n	8001a8a <float_TO_vetor4b+0x26>
		vetor[inicio + i] = myValue.bytes[i];
 8001a76:	1860      	adds	r0, r4, r1
 8001a78:	f101 0308 	add.w	r3, r1, #8
 8001a7c:	eb0d 0c03 	add.w	ip, sp, r3
 8001a80:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8001a84:	f805 c000 	strb.w	ip, [r5, r0]
	for (int i = 0; i < sizeof(myValue.value); ++i) {
 8001a88:	3101      	adds	r1, #1
 8001a8a:	2903      	cmp	r1, #3
 8001a8c:	d9f3      	bls.n	8001a76 <float_TO_vetor4b+0x12>
	}
}
 8001a8e:	b003      	add	sp, #12
 8001a90:	bd30      	pop	{r4, r5, pc}
	...

08001a94 <CRC16>:
 */

#include "Crc.h"

CRC_short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 8001a94:	b500      	push	{lr}
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001a96:	22ff      	movs	r2, #255	; 0xff
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001a98:	4696      	mov	lr, r2
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001a9a:	e00a      	b.n	8001ab2 <CRC16+0x1e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001a9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001aa0:	4053      	eors	r3, r2
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <CRC16+0x30>)
 8001aa4:	5cd2      	ldrb	r2, [r2, r3]
 8001aa6:	ea82 020e 	eor.w	r2, r2, lr
		uchCRCHi = auchCRCLo[uIndex] ;
 8001aaa:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <CRC16+0x34>)
 8001aac:	f811 e003 	ldrb.w	lr, [r1, r3]
	while (usDataLen--) /* pass through message buffer */
 8001ab0:	4661      	mov	r1, ip
 8001ab2:	1e4b      	subs	r3, r1, #1
 8001ab4:	fa1f fc83 	uxth.w	ip, r3
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	d1ef      	bne.n	8001a9c <CRC16+0x8>
	}
	ret.hilo = (uchCRCHi << 8 | uchCRCLo);

	return ret ;
}
 8001abc:	ea42 200e 	orr.w	r0, r2, lr, lsl #8
 8001ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac4:	0800c35c 	.word	0x0800c35c
 8001ac8:	0800c45c 	.word	0x0800c45c

08001acc <validaCRC>:

uint8_t validaCRC(CRC_short referencia, CRC_short chave){
 8001acc:	b082      	sub	sp, #8
	if(referencia.byte.hi != chave.byte.hi ||referencia.byte.lo != chave.byte.lo  ){
 8001ace:	f8ad 0004 	strh.w	r0, [sp, #4]
 8001ad2:	b282      	uxth	r2, r0
 8001ad4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8001ad8:	b28b      	uxth	r3, r1
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d102      	bne.n	8001ae4 <validaCRC+0x18>
		return 1;
	}
	return 0;
 8001ade:	2000      	movs	r0, #0
}
 8001ae0:	b002      	add	sp, #8
 8001ae2:	4770      	bx	lr
		return 1;
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	e7fb      	b.n	8001ae0 <validaCRC+0x14>

08001ae8 <set_StdValues8bits>:
	EEPROM_ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
	if (errCode != EEPROM_SUCCESS)
		eepromError_Handler(errCode);
}
void 				set_StdValues8bits(eepromVarArr* 	self, uint8_t 	min, uint8_t 	def, uint8_t 	max) {
	self->minValue.intValue 	= min;
 8001ae8:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001aea:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001aec:	6203      	str	r3, [r0, #32]
}
 8001aee:	4770      	bx	lr

08001af0 <set_StdValues16bits>:
void 				set_StdValues16bits(eepromVarArr* 	self, uint16_t 	min, uint16_t 	def, uint16_t 	max) {
	self->minValue.intValue = min;
 8001af0:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001af2:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue = max;
 8001af4:	6203      	str	r3, [r0, #32]
}
 8001af6:	4770      	bx	lr

08001af8 <set_StdValues32bits>:
void 				set_StdValues32bits(eepromVarArr* 	self, uint32_t 	min, uint32_t 	def, uint32_t 	max) {
	self->minValue.intValue = min;
 8001af8:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001afa:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue = max;
 8001afc:	6203      	str	r3, [r0, #32]
}
 8001afe:	4770      	bx	lr

08001b00 <set_StdValuesFloat>:
void 				set_StdValuesFloat(eepromVarArr* 	self, float 	min, float 		def, float 		max) {
	self->minValue.floatValue = min;
 8001b00:	6181      	str	r1, [r0, #24]
	self->defaultValue.floatValue = def;
 8001b02:	6102      	str	r2, [r0, #16]
	self->maxValue.floatValue = max;
 8001b04:	6203      	str	r3, [r0, #32]
}
 8001b06:	4770      	bx	lr

08001b08 <set_StdValuesDouble>:
void 				set_StdValuesDouble(eepromVarArr* 	self, double 	min, double 	def, double 	max) {
	self->minValue.doubleValue = min;
 8001b08:	e9c0 2306 	strd	r2, r3, [r0, #24]
	self->defaultValue.doubleValue = def;
 8001b0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b10:	e9c0 2304 	strd	r2, r3, [r0, #16]
	self->maxValue.doubleValue = max;
 8001b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001b18:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8001b1c:	4770      	bx	lr
	...

08001b20 <containerEeprom_init>:
	if (self == NULL || i2c == NULL || fila == NULL)
 8001b20:	b1b0      	cbz	r0, 8001b50 <containerEeprom_init+0x30>
EEPROM_ErrorCode 	containerEeprom_init(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 8001b22:	b570      	push	{r4, r5, r6, lr}
 8001b24:	460c      	mov	r4, r1
 8001b26:	4615      	mov	r5, r2
 8001b28:	4606      	mov	r6, r0
	if (self == NULL || i2c == NULL || fila == NULL)
 8001b2a:	b199      	cbz	r1, 8001b54 <containerEeprom_init+0x34>
 8001b2c:	b1a2      	cbz	r2, 8001b58 <containerEeprom_init+0x38>
	memset(self, 0, sizeof(*self));
 8001b2e:	2294      	movs	r2, #148	; 0x94
 8001b30:	2100      	movs	r1, #0
 8001b32:	f009 fc21 	bl	800b378 <memset>
	self->i2cHandle 			= i2c;	// handler de I2C.
 8001b36:	6074      	str	r4, [r6, #4]
	self->filaComandos 			= fila; // fila de salvamento.
 8001b38:	60b5      	str	r5, [r6, #8]
	self->M_AddOnArr = addVarOnContainerEeprom;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <containerEeprom_init+0x3c>)
 8001b3c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	self->M_downloadAllVar = download_containerEeprom;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <containerEeprom_init+0x40>)
 8001b42:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
	self->M_resetAllVar = reset_containerEeprom;
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <containerEeprom_init+0x44>)
 8001b48:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
	return EEPROM_SUCCESS;
 8001b4c:	2000      	movs	r0, #0
}
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
		return EEPROM_OBJETO_NULO;
 8001b50:	2001      	movs	r0, #1
}
 8001b52:	4770      	bx	lr
		return EEPROM_OBJETO_NULO;
 8001b54:	2001      	movs	r0, #1
 8001b56:	e7fa      	b.n	8001b4e <containerEeprom_init+0x2e>
 8001b58:	2001      	movs	r0, #1
 8001b5a:	e7f8      	b.n	8001b4e <containerEeprom_init+0x2e>
 8001b5c:	080020f3 	.word	0x080020f3
 8001b60:	08002113 	.word	0x08002113
 8001b64:	08002123 	.word	0x08002123

08001b68 <objArrEeprom_init>:
EEPROM_ErrorCode 	objArrEeprom_init(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar){
 8001b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b6c:	9f06      	ldr	r7, [sp, #24]
	if (self == NULL || _addrVar == NULL)
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d02e      	beq.n	8001bd0 <objArrEeprom_init+0x68>
 8001b72:	4688      	mov	r8, r1
 8001b74:	4616      	mov	r6, r2
 8001b76:	461d      	mov	r5, r3
 8001b78:	4604      	mov	r4, r0
 8001b7a:	2f00      	cmp	r7, #0
 8001b7c:	d02a      	beq.n	8001bd4 <objArrEeprom_init+0x6c>
	if (addr == 0)
 8001b7e:	2a00      	cmp	r2, #0
 8001b80:	d02a      	beq.n	8001bd8 <objArrEeprom_init+0x70>
	memset(self, 0, sizeof(*self));
 8001b82:	2248      	movs	r2, #72	; 0x48
 8001b84:	2100      	movs	r1, #0
 8001b86:	f009 fbf7 	bl	800b378 <memset>
	self->typeVar 		= type;
 8001b8a:	7125      	strb	r5, [r4, #4]
	self->typeReset 	= typeReset;
 8001b8c:	f884 8000 	strb.w	r8, [r4]
	self->_addrEprom 	= addr;
 8001b90:	8066      	strh	r6, [r4, #2]
	switch (self->typeVar) {
 8001b92:	2d04      	cmp	r5, #4
 8001b94:	d822      	bhi.n	8001bdc <objArrEeprom_init+0x74>
 8001b96:	e8df f005 	tbb	[pc, r5]
 8001b9a:	1303      	.short	0x1303
 8001b9c:	1715      	.short	0x1715
 8001b9e:	19          	.byte	0x19
 8001b9f:	00          	.byte	0x00
	case DATA_8BITS:	self->ptr8 		= (uint8_t *)_addrVar;	break;
 8001ba0:	62a7      	str	r7, [r4, #40]	; 0x28
	self->M_setStdValues8bits		= set_StdValues8bits;
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <objArrEeprom_init+0x78>)
 8001ba4:	6323      	str	r3, [r4, #48]	; 0x30
	self->M_setStdValues16bits		= set_StdValues16bits;
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <objArrEeprom_init+0x7c>)
 8001ba8:	6363      	str	r3, [r4, #52]	; 0x34
	self->M_setStdValues32bits		= set_StdValues32bits;
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <objArrEeprom_init+0x80>)
 8001bac:	63a3      	str	r3, [r4, #56]	; 0x38
	self->M_setStdValuesFloat		= set_StdValuesFloat;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <objArrEeprom_init+0x84>)
 8001bb0:	63e3      	str	r3, [r4, #60]	; 0x3c
	self->M_setStdValuesDouble		= set_StdValuesDouble;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <objArrEeprom_init+0x88>)
 8001bb4:	6423      	str	r3, [r4, #64]	; 0x40
	self->M_update_eepromValue 		= update_eepromObjArr;
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <objArrEeprom_init+0x8c>)
 8001bb8:	6463      	str	r3, [r4, #68]	; 0x44
	return EEPROM_SUCCESS;
 8001bba:	2000      	movs	r0, #0
}
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	case DATA_16BITS:	self->ptr16 	= (uint16_t *)_addrVar;	break;
 8001bc0:	62a7      	str	r7, [r4, #40]	; 0x28
 8001bc2:	e7ee      	b.n	8001ba2 <objArrEeprom_init+0x3a>
	case DATA_32BITS:	self->ptr32 	= (uint32_t *)_addrVar;	break;
 8001bc4:	62a7      	str	r7, [r4, #40]	; 0x28
 8001bc6:	e7ec      	b.n	8001ba2 <objArrEeprom_init+0x3a>
	case DATA_FLOAT:	self->ptrFloat 	= (float *)_addrVar;	break;
 8001bc8:	62a7      	str	r7, [r4, #40]	; 0x28
 8001bca:	e7ea      	b.n	8001ba2 <objArrEeprom_init+0x3a>
	case DATA_DOUBLE:	self->ptrDouble	= (double *)_addrVar;	break;
 8001bcc:	62a7      	str	r7, [r4, #40]	; 0x28
 8001bce:	e7e8      	b.n	8001ba2 <objArrEeprom_init+0x3a>
		return EEPROM_OBJETO_NULO;
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	e7f3      	b.n	8001bbc <objArrEeprom_init+0x54>
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	e7f1      	b.n	8001bbc <objArrEeprom_init+0x54>
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001bd8:	2008      	movs	r0, #8
 8001bda:	e7ef      	b.n	8001bbc <objArrEeprom_init+0x54>
	switch (self->typeVar) {
 8001bdc:	2002      	movs	r0, #2
 8001bde:	e7ed      	b.n	8001bbc <objArrEeprom_init+0x54>
 8001be0:	08001ae9 	.word	0x08001ae9
 8001be4:	08001af1 	.word	0x08001af1
 8001be8:	08001af9 	.word	0x08001af9
 8001bec:	08001b01 	.word	0x08001b01
 8001bf0:	08001b09 	.word	0x08001b09
 8001bf4:	08002103 	.word	0x08002103

08001bf8 <eeprom_AddVarOnArr>:
	return EEPROM_SUCCESS;
}

EEPROM_ErrorCode 	eeprom_AddVarOnArr(Eeprom* eeprom, eepromVarArr* self) {

	if (eeprom->arrCount >= EEPROM_MAX_COMP_COUNT)
 8001bf8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8001bfc:	2b1d      	cmp	r3, #29
 8001bfe:	d82d      	bhi.n	8001c5c <eeprom_AddVarOnArr+0x64>
		return EEPROM_LISTA_CHEIA;
	if (self->_addrEprom == 0)
 8001c00:	884a      	ldrh	r2, [r1, #2]
 8001c02:	b36a      	cbz	r2, 8001c60 <eeprom_AddVarOnArr+0x68>
EEPROM_ErrorCode 	eeprom_AddVarOnArr(Eeprom* eeprom, eepromVarArr* self) {
 8001c04:	b500      	push	{lr}
		return EEPROM_ERRO_ENDERECO_OBJ;

	// Calcula o início da próxima página
	uint16_t inicioProximaPagina = ((self->_addrEprom / PAGE_SIZE) + 1) * PAGE_SIZE;
 8001c06:	0953      	lsrs	r3, r2, #5
 8001c08:	3301      	adds	r3, #1
 8001c0a:	015b      	lsls	r3, r3, #5
 8001c0c:	b29b      	uxth	r3, r3

	// Verifica se o endereço inicial + tamanho da variável ultrapassa o início da próxima página
	uint16_t fimVar;

	switch (self->typeVar) {
 8001c0e:	f891 c004 	ldrb.w	ip, [r1, #4]
 8001c12:	f1bc 0f04 	cmp.w	ip, #4
 8001c16:	d825      	bhi.n	8001c64 <eeprom_AddVarOnArr+0x6c>
 8001c18:	e8df f00c 	tbb	[pc, ip]
 8001c1c:	1a171403 	.word	0x1a171403
 8001c20:	1d          	.byte	0x1d
 8001c21:	00          	.byte	0x00
	case DATA_8BITS:
		fimVar = self->_addrEprom + sizeof(uint8_t);
 8001c22:	3201      	adds	r2, #1
 8001c24:	b292      	uxth	r2, r2
	default:
		return EEPROM_TIPO_DESCONHECIDO;
	}

	// Se a próxima varável começa no início de uma nova página, então essa variável cruzou a fronteira de uma página
	if (fimVar > inicioProximaPagina)
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d81e      	bhi.n	8001c68 <eeprom_AddVarOnArr+0x70>
		return EEPROM_QUEBRA_ENDERECO_OBJ;

	// Configuração do ponteiro parent
	self->parentEeprom = eeprom;
 8001c2a:	62c8      	str	r0, [r1, #44]	; 0x2c
	// Adicionar a variável ao próximo slot livre
	eeprom->arrVar[eeprom->arrCount] = self;
 8001c2c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8001c30:	1c9a      	adds	r2, r3, #2
 8001c32:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c36:	6051      	str	r1, [r2, #4]
	eeprom->arrCount++;
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84

	return EEPROM_SUCCESS;
 8001c3e:	2000      	movs	r0, #0
}
 8001c40:	f85d fb04 	ldr.w	pc, [sp], #4
		fimVar = self->_addrEprom + sizeof(uint16_t);
 8001c44:	3202      	adds	r2, #2
 8001c46:	b292      	uxth	r2, r2
		break;
 8001c48:	e7ed      	b.n	8001c26 <eeprom_AddVarOnArr+0x2e>
		fimVar = self->_addrEprom + sizeof(uint32_t);
 8001c4a:	3204      	adds	r2, #4
 8001c4c:	b292      	uxth	r2, r2
		break;
 8001c4e:	e7ea      	b.n	8001c26 <eeprom_AddVarOnArr+0x2e>
		fimVar = self->_addrEprom + sizeof(float);
 8001c50:	3204      	adds	r2, #4
 8001c52:	b292      	uxth	r2, r2
		break;
 8001c54:	e7e7      	b.n	8001c26 <eeprom_AddVarOnArr+0x2e>
		fimVar = self->_addrEprom + sizeof(double);
 8001c56:	3208      	adds	r2, #8
 8001c58:	b292      	uxth	r2, r2
		break;
 8001c5a:	e7e4      	b.n	8001c26 <eeprom_AddVarOnArr+0x2e>
		return EEPROM_LISTA_CHEIA;
 8001c5c:	2004      	movs	r0, #4
 8001c5e:	4770      	bx	lr
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001c60:	2008      	movs	r0, #8
}
 8001c62:	4770      	bx	lr
	switch (self->typeVar) {
 8001c64:	200a      	movs	r0, #10
 8001c66:	e7eb      	b.n	8001c40 <eeprom_AddVarOnArr+0x48>
		return EEPROM_QUEBRA_ENDERECO_OBJ;
 8001c68:	2009      	movs	r0, #9
 8001c6a:	e7e9      	b.n	8001c40 <eeprom_AddVarOnArr+0x48>

08001c6c <eepromObjArr_update>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(errCode);
	}
}

EEPROM_ErrorCode 	eepromObjArr_update(eepromVarArr* obj) {
 8001c6c:	b530      	push	{r4, r5, lr}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	4604      	mov	r4, r0

	HAL_StatusTypeDef result;
	uint8_t buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)

	LIBERA_EEPROM
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	4845      	ldr	r0, [pc, #276]	; (8001d8c <eepromObjArr_update+0x120>)
 8001c78:	f003 ff55 	bl	8005b26 <HAL_GPIO_WritePin>
 8001c7c:	2005      	movs	r0, #5
 8001c7e:	f003 f903 	bl	8004e88 <HAL_Delay>

	result = HAL_I2C_IsDeviceReady(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001c82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	2232      	movs	r2, #50	; 0x32
 8001c8a:	21a2      	movs	r1, #162	; 0xa2
 8001c8c:	6840      	ldr	r0, [r0, #4]
 8001c8e:	f004 fd0f 	bl	80066b0 <HAL_I2C_IsDeviceReady>
	if (result != HAL_OK)
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d177      	bne.n	8001d86 <eepromObjArr_update+0x11a>
 8001c96:	4605      	mov	r5, r0
			return EEPROM_ERROR;

	switch (obj->typeVar) {
 8001c98:	7923      	ldrb	r3, [r4, #4]
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d817      	bhi.n	8001cce <eepromObjArr_update+0x62>
 8001c9e:	e8df f003 	tbb	[pc, r3]
 8001ca2:	2403      	.short	0x2403
 8001ca4:	4b38      	.short	0x4b38
 8001ca6:	5d          	.byte	0x5d
 8001ca7:	00          	.byte	0x00
	case DATA_8BITS:
		obj->value.intValue 	= *obj->ptr8;
 8001ca8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	60a2      	str	r2, [r4, #8]
		*((uint8_t*)&buffer) 	= *obj->ptr8;
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f88d 3010 	strb.w	r3, [sp, #16]
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001cb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cb6:	6858      	ldr	r0, [r3, #4]
 8001cb8:	23c8      	movs	r3, #200	; 0xc8
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	ab04      	add	r3, sp, #16
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	8862      	ldrh	r2, [r4, #2]
 8001cc8:	21a2      	movs	r1, #162	; 0xa2
 8001cca:	f004 fa9b 	bl	8006204 <HAL_I2C_Mem_Write>
		obj->value.doubleValue 	= *obj->ptrDouble;
		*((double*)&buffer) 	= (double)obj->value.doubleValue;
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
		break;
	}
	osDelay(40);
 8001cce:	2028      	movs	r0, #40	; 0x28
 8001cd0:	f006 fdd1 	bl	8008876 <osDelay>
	TRAVA_EEPROM
 8001cd4:	2005      	movs	r0, #5
 8001cd6:	f003 f8d7 	bl	8004e88 <HAL_Delay>
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	482b      	ldr	r0, [pc, #172]	; (8001d8c <eepromObjArr_update+0x120>)
 8001ce0:	f003 ff21 	bl	8005b26 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS;
}
 8001ce4:	4628      	mov	r0, r5
 8001ce6:	b007      	add	sp, #28
 8001ce8:	bd30      	pop	{r4, r5, pc}
		obj->value.intValue 	= *obj->ptr16;
 8001cea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cec:	881a      	ldrh	r2, [r3, #0]
 8001cee:	60a2      	str	r2, [r4, #8]
		*((uint16_t*)&buffer) 	= *obj->ptr16;
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	f8ad 3010 	strh.w	r3, [sp, #16]
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cf8:	6858      	ldr	r0, [r3, #4]
 8001cfa:	23c8      	movs	r3, #200	; 0xc8
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	ab04      	add	r3, sp, #16
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2310      	movs	r3, #16
 8001d08:	8862      	ldrh	r2, [r4, #2]
 8001d0a:	21a2      	movs	r1, #162	; 0xa2
 8001d0c:	f004 fa7a 	bl	8006204 <HAL_I2C_Mem_Write>
		break;
 8001d10:	e7dd      	b.n	8001cce <eepromObjArr_update+0x62>
		obj->value.intValue 	= *obj->ptr32;
 8001d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	60a2      	str	r2, [r4, #8]
		*((uint32_t*)&buffer) 	= *obj->ptr32;
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	9304      	str	r3, [sp, #16]
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001d1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d1e:	6858      	ldr	r0, [r3, #4]
 8001d20:	23c8      	movs	r3, #200	; 0xc8
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2304      	movs	r3, #4
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	ab04      	add	r3, sp, #16
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	8862      	ldrh	r2, [r4, #2]
 8001d30:	21a2      	movs	r1, #162	; 0xa2
 8001d32:	f004 fa67 	bl	8006204 <HAL_I2C_Mem_Write>
		break;
 8001d36:	e7ca      	b.n	8001cce <eepromObjArr_update+0x62>
		obj->value.floatValue 	= *obj->ptrFloat;
 8001d38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60a3      	str	r3, [r4, #8]
		*((float*)&buffer) 		= *obj->ptrFloat;
 8001d3e:	9304      	str	r3, [sp, #16]
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001d40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d42:	6858      	ldr	r0, [r3, #4]
 8001d44:	23c8      	movs	r3, #200	; 0xc8
 8001d46:	9302      	str	r3, [sp, #8]
 8001d48:	2304      	movs	r3, #4
 8001d4a:	9301      	str	r3, [sp, #4]
 8001d4c:	ab04      	add	r3, sp, #16
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	2310      	movs	r3, #16
 8001d52:	8862      	ldrh	r2, [r4, #2]
 8001d54:	21a2      	movs	r1, #162	; 0xa2
 8001d56:	f004 fa55 	bl	8006204 <HAL_I2C_Mem_Write>
		break;
 8001d5a:	e7b8      	b.n	8001cce <eepromObjArr_update+0x62>
		obj->value.doubleValue 	= *obj->ptrDouble;
 8001d5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d62:	e9c4 2302 	strd	r2, r3, [r4, #8]
		*((double*)&buffer) 	= (double)obj->value.doubleValue;
 8001d66:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001d6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d6c:	6858      	ldr	r0, [r3, #4]
 8001d6e:	23c8      	movs	r3, #200	; 0xc8
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	2308      	movs	r3, #8
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	ab04      	add	r3, sp, #16
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2310      	movs	r3, #16
 8001d7c:	8862      	ldrh	r2, [r4, #2]
 8001d7e:	21a2      	movs	r1, #162	; 0xa2
 8001d80:	f004 fa40 	bl	8006204 <HAL_I2C_Mem_Write>
		break;
 8001d84:	e7a3      	b.n	8001cce <eepromObjArr_update+0x62>
			return EEPROM_ERROR;
 8001d86:	2505      	movs	r5, #5
 8001d88:	e7ac      	b.n	8001ce4 <eepromObjArr_update+0x78>
 8001d8a:	bf00      	nop
 8001d8c:	40010c00 	.word	0x40010c00

08001d90 <containerEeprom_download>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(errCode);
	}
}

EEPROM_ErrorCode 	containerEeprom_download	(Eeprom *eeprom){
 8001d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d94:	b087      	sub	sp, #28
 8001d96:	4606      	mov	r6, r0
	HAL_StatusTypeDef 	result;
	uint8_t 			buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)
	eepromVarArr		*var;

	//verifica disponibilidade da eeprom
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	21a2      	movs	r1, #162	; 0xa2
 8001da0:	6840      	ldr	r0, [r0, #4]
 8001da2:	f004 fc85 	bl	80066b0 <HAL_I2C_IsDeviceReady>
	if (result != HAL_OK) {
 8001da6:	2800      	cmp	r0, #0
 8001da8:	f040 80a1 	bne.w	8001eee <containerEeprom_download+0x15e>
 8001dac:	4607      	mov	r7, r0
		return EEPROM_ERROR;
	}

	// Varredura por todos os elementos
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001dae:	4605      	mov	r5, r0
 8001db0:	e034      	b.n	8001e1c <containerEeprom_download+0x8c>
			return EEPROM_ERRO_ENDERECO_OBJ;
		}

		// Determine o tamanho do dado a ser lido com base no tipo.
		uint8_t dataSize = 0;
		switch (var->typeVar) {
 8001db2:	463b      	mov	r3, r7
 8001db4:	e008      	b.n	8001dc8 <containerEeprom_download+0x38>
		case DATA_8BITS: 	dataSize = 1; break;
		case DATA_16BITS: 	dataSize = 2; break;
 8001db6:	2302      	movs	r3, #2
 8001db8:	e006      	b.n	8001dc8 <containerEeprom_download+0x38>
		case DATA_32BITS: 	dataSize = 4; break;
 8001dba:	2304      	movs	r3, #4
 8001dbc:	e004      	b.n	8001dc8 <containerEeprom_download+0x38>
		case DATA_FLOAT: 	dataSize = 4; break;
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e002      	b.n	8001dc8 <containerEeprom_download+0x38>
		case DATA_DOUBLE: 	dataSize = 8; break;
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e000      	b.n	8001dc8 <containerEeprom_download+0x38>
		case DATA_8BITS: 	dataSize = 1; break;
 8001dc6:	2301      	movs	r3, #1
		}

		// limpe o buffer,
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001dc8:	a904      	add	r1, sp, #16
 8001dca:	2200      	movs	r2, #0
 8001dcc:	9204      	str	r2, [sp, #16]
 8001dce:	9205      	str	r2, [sp, #20]

		// Realiza leitura da EEPROM.
		result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT,buffer, dataSize, 200);
 8001dd0:	8862      	ldrh	r2, [r4, #2]
 8001dd2:	20c8      	movs	r0, #200	; 0xc8
 8001dd4:	9002      	str	r0, [sp, #8]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9100      	str	r1, [sp, #0]
 8001ddc:	2310      	movs	r3, #16
 8001dde:	21a3      	movs	r1, #163	; 0xa3
 8001de0:	6870      	ldr	r0, [r6, #4]
 8001de2:	f004 fac1 	bl	8006368 <HAL_I2C_Mem_Read>
		if (result != HAL_OK)
 8001de6:	2800      	cmp	r0, #0
 8001de8:	f040 8088 	bne.w	8001efc <containerEeprom_download+0x16c>
			return EEPROM_ERRO_LEITURA;

		// verifica e atribui o valor baseado no tipo.
		// certifica de que o valor está dentro dos limites.
		// envia para o ponteiro.
		switch (var->typeVar) {
 8001dec:	7923      	ldrb	r3, [r4, #4]
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d812      	bhi.n	8001e18 <containerEeprom_download+0x88>
 8001df2:	e8df f003 	tbb	[pc, r3]
 8001df6:	2f03      	.short	0x2f03
 8001df8:	4c3e      	.short	0x4c3e
 8001dfa:	60          	.byte	0x60
 8001dfb:	00          	.byte	0x00
		case DATA_8BITS:
			var->value.intValue = *((uint8_t*)&buffer);
 8001dfc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001e00:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001e02:	6a22      	ldr	r2, [r4, #32]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d802      	bhi.n	8001e0e <containerEeprom_download+0x7e>
 8001e08:	69a2      	ldr	r2, [r4, #24]
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d201      	bcs.n	8001e12 <containerEeprom_download+0x82>
				var->value.intValue = var->defaultValue.intValue;
 8001e0e:	6923      	ldr	r3, [r4, #16]
 8001e10:	60a3      	str	r3, [r4, #8]
			}
			*var->ptr8 = var->value.intValue; 	// envio para ponteiro.
 8001e12:	68a2      	ldr	r2, [r4, #8]
 8001e14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e16:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001e18:	3501      	adds	r5, #1
 8001e1a:	b2ed      	uxtb	r5, r5
 8001e1c:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
 8001e20:	42ab      	cmp	r3, r5
 8001e22:	d967      	bls.n	8001ef4 <containerEeprom_download+0x164>
		var = eeprom->arrVar[i];
 8001e24:	1cab      	adds	r3, r5, #2
 8001e26:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001e2a:	685c      	ldr	r4, [r3, #4]
		if (var->_addrEprom == 0) {
 8001e2c:	8863      	ldrh	r3, [r4, #2]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d05f      	beq.n	8001ef2 <containerEeprom_download+0x162>
		switch (var->typeVar) {
 8001e32:	7923      	ldrb	r3, [r4, #4]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d8bc      	bhi.n	8001db2 <containerEeprom_download+0x22>
 8001e38:	a201      	add	r2, pc, #4	; (adr r2, 8001e40 <containerEeprom_download+0xb0>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001dc7 	.word	0x08001dc7
 8001e44:	08001db7 	.word	0x08001db7
 8001e48:	08001dbb 	.word	0x08001dbb
 8001e4c:	08001dbf 	.word	0x08001dbf
 8001e50:	08001dc3 	.word	0x08001dc3
			break;
		case DATA_16BITS:
			var->value.intValue = *((uint16_t*)&buffer);
 8001e54:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8001e58:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001e5a:	6a22      	ldr	r2, [r4, #32]
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d802      	bhi.n	8001e66 <containerEeprom_download+0xd6>
 8001e60:	69a2      	ldr	r2, [r4, #24]
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d201      	bcs.n	8001e6a <containerEeprom_download+0xda>
				var->value.intValue = var->defaultValue.intValue;
 8001e66:	6923      	ldr	r3, [r4, #16]
 8001e68:	60a3      	str	r3, [r4, #8]
			}
			*var->ptr16 = var->value.intValue; 	// envio para ponteiro
 8001e6a:	68a2      	ldr	r2, [r4, #8]
 8001e6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e6e:	801a      	strh	r2, [r3, #0]
			break;
 8001e70:	e7d2      	b.n	8001e18 <containerEeprom_download+0x88>
		case DATA_32BITS:
			var->value.intValue = *((uint32_t*)&buffer);
 8001e72:	9b04      	ldr	r3, [sp, #16]
 8001e74:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001e76:	6a22      	ldr	r2, [r4, #32]
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d802      	bhi.n	8001e82 <containerEeprom_download+0xf2>
 8001e7c:	69a2      	ldr	r2, [r4, #24]
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d201      	bcs.n	8001e86 <containerEeprom_download+0xf6>
				var->value.intValue = var->defaultValue.intValue;
 8001e82:	6923      	ldr	r3, [r4, #16]
 8001e84:	60a3      	str	r3, [r4, #8]
			}
			*var->ptr32 = var->value.intValue;
 8001e86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e88:	68a2      	ldr	r2, [r4, #8]
 8001e8a:	601a      	str	r2, [r3, #0]
			break;
 8001e8c:	e7c4      	b.n	8001e18 <containerEeprom_download+0x88>
		case DATA_FLOAT:
			var->value.floatValue = *((float*)&buffer);
 8001e8e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001e92:	f8c4 8008 	str.w	r8, [r4, #8]
			if (var->value.floatValue > var->maxValue.floatValue || var->value.floatValue < var->minValue.floatValue) {
 8001e96:	6a21      	ldr	r1, [r4, #32]
 8001e98:	4640      	mov	r0, r8
 8001e9a:	f7ff f8f1 	bl	8001080 <__aeabi_fcmpgt>
 8001e9e:	b920      	cbnz	r0, 8001eaa <containerEeprom_download+0x11a>
 8001ea0:	69a1      	ldr	r1, [r4, #24]
 8001ea2:	4640      	mov	r0, r8
 8001ea4:	f7ff f8ce 	bl	8001044 <__aeabi_fcmplt>
 8001ea8:	b108      	cbz	r0, 8001eae <containerEeprom_download+0x11e>
				var->value.floatValue = var->defaultValue.floatValue;
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	60a3      	str	r3, [r4, #8]
			}
			*var->ptrFloat = var->value.floatValue;
 8001eae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001eb0:	68a2      	ldr	r2, [r4, #8]
 8001eb2:	601a      	str	r2, [r3, #0]
			break;
 8001eb4:	e7b0      	b.n	8001e18 <containerEeprom_download+0x88>
		case DATA_DOUBLE:
			var->value.doubleValue = *((double*)&buffer);
 8001eb6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8001eba:	e9c4 8902 	strd	r8, r9, [r4, #8]
			if (var->value.doubleValue > var->maxValue.doubleValue || var->value.doubleValue < var->minValue.doubleValue) {
 8001ebe:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8001ec2:	4640      	mov	r0, r8
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	f7fe fd97 	bl	80009f8 <__aeabi_dcmpgt>
 8001eca:	b930      	cbnz	r0, 8001eda <containerEeprom_download+0x14a>
 8001ecc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8001ed0:	4640      	mov	r0, r8
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	f7fe fd72 	bl	80009bc <__aeabi_dcmplt>
 8001ed8:	b118      	cbz	r0, 8001ee2 <containerEeprom_download+0x152>
				var->value.doubleValue = var->defaultValue.doubleValue;
 8001eda:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001ede:	e9c4 2302 	strd	r2, r3, [r4, #8]
			}
			*var->ptrDouble = var->value.doubleValue;
 8001ee2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001ee4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001ee8:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8001eec:	e794      	b.n	8001e18 <containerEeprom_download+0x88>
		return EEPROM_ERROR;
 8001eee:	2705      	movs	r7, #5
 8001ef0:	e000      	b.n	8001ef4 <containerEeprom_download+0x164>
			return EEPROM_ERRO_ENDERECO_OBJ;
 8001ef2:	2708      	movs	r7, #8
	}

	// Todo: Criar rotina de reset de EEPROM se necessário

	return EEPROM_SUCCESS;
}
 8001ef4:	4638      	mov	r0, r7
 8001ef6:	b007      	add	sp, #28
 8001ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return EEPROM_ERRO_LEITURA;
 8001efc:	2707      	movs	r7, #7
 8001efe:	e7f9      	b.n	8001ef4 <containerEeprom_download+0x164>

08001f00 <containerEeprom_reset>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(errCode);
	}
}

EEPROM_ErrorCode 	containerEeprom_reset(Eeprom *eeprom, TypeRestauracao resetType) {
 8001f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f04:	b086      	sub	sp, #24

	HAL_StatusTypeDef 	result;
	uint8_t 			buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)
	eepromVarArr		*var;
	if (!eeprom) {
 8001f06:	2800      	cmp	r0, #0
 8001f08:	f000 80cb 	beq.w	80020a2 <containerEeprom_reset+0x1a2>
 8001f0c:	460f      	mov	r7, r1
 8001f0e:	4606      	mov	r6, r0
		return EEPROM_OBJETO_NULO;
	}

	LIBERA_EEPROM
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	4869      	ldr	r0, [pc, #420]	; (80020bc <containerEeprom_reset+0x1bc>)
 8001f16:	f003 fe06 	bl	8005b26 <HAL_GPIO_WritePin>
 8001f1a:	2005      	movs	r0, #5
 8001f1c:	f002 ffb4 	bl	8004e88 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295
 8001f24:	2232      	movs	r2, #50	; 0x32
 8001f26:	21a2      	movs	r1, #162	; 0xa2
 8001f28:	6870      	ldr	r0, [r6, #4]
 8001f2a:	f004 fbc1 	bl	80066b0 <HAL_I2C_IsDeviceReady>
	if (result != HAL_OK)
 8001f2e:	4682      	mov	sl, r0
 8001f30:	2800      	cmp	r0, #0
 8001f32:	f040 80bc 	bne.w	80020ae <containerEeprom_reset+0x1ae>
		return EEPROM_ERROR;

	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001f36:	4604      	mov	r4, r0
 8001f38:	e019      	b.n	8001f6e <containerEeprom_reset+0x6e>
			// Reseta a variável para o defaultValue ou zero se não estiver definido
			// atualiza o ponteiro e o digital twin para esse valor.
			// escreve na eeprom.
			switch (var->typeVar) {
			case DATA_8BITS:
				*var->ptr8 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 8001f3a:	692a      	ldr	r2, [r5, #16]
 8001f3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f3e:	701a      	strb	r2, [r3, #0]
				var->value.intValue		= *var->ptr8;
 8001f40:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	60ab      	str	r3, [r5, #8]
				*((uint8_t*)&buffer) 	= var->value.intValue;
 8001f46:	f88d 3010 	strb.w	r3, [sp, #16]
				HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001f4a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f4c:	886a      	ldrh	r2, [r5, #2]
 8001f4e:	6858      	ldr	r0, [r3, #4]
 8001f50:	23c8      	movs	r3, #200	; 0xc8
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	ab04      	add	r3, sp, #16
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	21a2      	movs	r1, #162	; 0xa2
 8001f60:	f004 f950 	bl	8006204 <HAL_I2C_Mem_Write>
			default:
				return EEPROM_ERROR; // Retorna código de erro apropriado para tipo desconhecido
				break;
			}
		}
		osDelay(20);
 8001f64:	2014      	movs	r0, #20
 8001f66:	f006 fc86 	bl	8008876 <osDelay>
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001f6a:	3401      	adds	r4, #1
 8001f6c:	b2e4      	uxtb	r4, r4
 8001f6e:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
 8001f72:	42a3      	cmp	r3, r4
 8001f74:	f240 808c 	bls.w	8002090 <containerEeprom_reset+0x190>
		var = eeprom->arrVar[i];
 8001f78:	1ca3      	adds	r3, r4, #2
 8001f7a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001f7e:	685d      	ldr	r5, [r3, #4]
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001f80:	2300      	movs	r3, #0
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	9305      	str	r3, [sp, #20]
		if (resetType == HARD_RESET || var->typeReset == SOFT_RESET) {
 8001f86:	2f01      	cmp	r7, #1
 8001f88:	d002      	beq.n	8001f90 <containerEeprom_reset+0x90>
 8001f8a:	782b      	ldrb	r3, [r5, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1e9      	bne.n	8001f64 <containerEeprom_reset+0x64>
			switch (var->typeVar) {
 8001f90:	792b      	ldrb	r3, [r5, #4]
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	f200 808e 	bhi.w	80020b4 <containerEeprom_reset+0x1b4>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <containerEeprom_reset+0xa0>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001f3b 	.word	0x08001f3b
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fe1 	.word	0x08001fe1
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	08002047 	.word	0x08002047
				*var->ptr16 = (var->defaultValue.intValue ? var->defaultValue.intValue : 0);
 8001fb4:	692a      	ldr	r2, [r5, #16]
 8001fb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fb8:	801a      	strh	r2, [r3, #0]
				var->value.intValue 	= *var->ptr16;
 8001fba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	60ab      	str	r3, [r5, #8]
				*((uint16_t*)&buffer) 	= var->value.intValue;
 8001fc0:	f8ad 3010 	strh.w	r3, [sp, #16]
				HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001fc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fc6:	886a      	ldrh	r2, [r5, #2]
 8001fc8:	6858      	ldr	r0, [r3, #4]
 8001fca:	23c8      	movs	r3, #200	; 0xc8
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2302      	movs	r3, #2
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	ab04      	add	r3, sp, #16
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	21a2      	movs	r1, #162	; 0xa2
 8001fda:	f004 f913 	bl	8006204 <HAL_I2C_Mem_Write>
				break;
 8001fde:	e7c1      	b.n	8001f64 <containerEeprom_reset+0x64>
				*var->ptr32 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 8001fe0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fe2:	692a      	ldr	r2, [r5, #16]
 8001fe4:	601a      	str	r2, [r3, #0]
				var->value.intValue 	= *var->ptr32;
 8001fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60ab      	str	r3, [r5, #8]
				*((uint32_t*)&buffer) 	= var->value.intValue;
 8001fec:	9304      	str	r3, [sp, #16]
				HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001fee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001ff0:	886a      	ldrh	r2, [r5, #2]
 8001ff2:	6858      	ldr	r0, [r3, #4]
 8001ff4:	23c8      	movs	r3, #200	; 0xc8
 8001ff6:	9302      	str	r3, [sp, #8]
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	9301      	str	r3, [sp, #4]
 8001ffc:	ab04      	add	r3, sp, #16
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2310      	movs	r3, #16
 8002002:	21a2      	movs	r1, #162	; 0xa2
 8002004:	f004 f8fe 	bl	8006204 <HAL_I2C_Mem_Write>
				break;
 8002008:	e7ac      	b.n	8001f64 <containerEeprom_reset+0x64>
				*var->ptrFloat = var->defaultValue.floatValue ? var->defaultValue.floatValue : 0.0;
 800200a:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800200e:	2100      	movs	r1, #0
 8002010:	4640      	mov	r0, r8
 8002012:	f7ff f80d 	bl	8001030 <__aeabi_fcmpeq>
 8002016:	b108      	cbz	r0, 800201c <containerEeprom_reset+0x11c>
 8002018:	f04f 0800 	mov.w	r8, #0
 800201c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800201e:	f8c3 8000 	str.w	r8, [r3]
				var->value.floatValue 	= *var->ptrFloat;
 8002022:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60ab      	str	r3, [r5, #8]
				*((float*)&buffer) 		= var->value.floatValue;
 8002028:	9304      	str	r3, [sp, #16]
				HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 800202a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800202c:	886a      	ldrh	r2, [r5, #2]
 800202e:	6858      	ldr	r0, [r3, #4]
 8002030:	23c8      	movs	r3, #200	; 0xc8
 8002032:	9302      	str	r3, [sp, #8]
 8002034:	2304      	movs	r3, #4
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	ab04      	add	r3, sp, #16
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2310      	movs	r3, #16
 800203e:	21a2      	movs	r1, #162	; 0xa2
 8002040:	f004 f8e0 	bl	8006204 <HAL_I2C_Mem_Write>
				break;
 8002044:	e78e      	b.n	8001f64 <containerEeprom_reset+0x64>
				*var->ptrDouble = var->defaultValue.doubleValue ? var->defaultValue.doubleValue : 0.0;
 8002046:	e9d5 8904 	ldrd	r8, r9, [r5, #16]
 800204a:	2200      	movs	r2, #0
 800204c:	2300      	movs	r3, #0
 800204e:	4640      	mov	r0, r8
 8002050:	4649      	mov	r1, r9
 8002052:	f7fe fca9 	bl	80009a8 <__aeabi_dcmpeq>
 8002056:	b118      	cbz	r0, 8002060 <containerEeprom_reset+0x160>
 8002058:	f04f 0800 	mov.w	r8, #0
 800205c:	f04f 0900 	mov.w	r9, #0
 8002060:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002062:	e9c3 8900 	strd	r8, r9, [r3]
				var->value.doubleValue 	= *var->ptrDouble;
 8002066:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	e9c5 2302 	strd	r2, r3, [r5, #8]
				*((double*)&buffer) 	= (double)*var->ptrDouble;
 8002070:	e9cd 2304 	strd	r2, r3, [sp, #16]
				HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8002074:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002076:	886a      	ldrh	r2, [r5, #2]
 8002078:	6858      	ldr	r0, [r3, #4]
 800207a:	23c8      	movs	r3, #200	; 0xc8
 800207c:	9302      	str	r3, [sp, #8]
 800207e:	2308      	movs	r3, #8
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	ab04      	add	r3, sp, #16
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2310      	movs	r3, #16
 8002088:	21a2      	movs	r1, #162	; 0xa2
 800208a:	f004 f8bb 	bl	8006204 <HAL_I2C_Mem_Write>
				break;
 800208e:	e769      	b.n	8001f64 <containerEeprom_reset+0x64>
	}
	TRAVA_EEPROM
 8002090:	2005      	movs	r0, #5
 8002092:	f002 fef9 	bl	8004e88 <HAL_Delay>
 8002096:	2201      	movs	r2, #1
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	4808      	ldr	r0, [pc, #32]	; (80020bc <containerEeprom_reset+0x1bc>)
 800209c:	f003 fd43 	bl	8005b26 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS; // Retorna sucesso se todos os valores foram resetados
 80020a0:	e001      	b.n	80020a6 <containerEeprom_reset+0x1a6>
		return EEPROM_OBJETO_NULO;
 80020a2:	f04f 0a01 	mov.w	sl, #1
}
 80020a6:	4650      	mov	r0, sl
 80020a8:	b006      	add	sp, #24
 80020aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return EEPROM_ERROR;
 80020ae:	f04f 0a05 	mov.w	sl, #5
 80020b2:	e7f8      	b.n	80020a6 <containerEeprom_reset+0x1a6>
			switch (var->typeVar) {
 80020b4:	f04f 0a05 	mov.w	sl, #5
 80020b8:	e7f5      	b.n	80020a6 <containerEeprom_reset+0x1a6>
 80020ba:	bf00      	nop
 80020bc:	40010c00 	.word	0x40010c00

080020c0 <eepromError_Handler>:

void 			eepromError_Handler(EEPROM_ErrorCode erro){
	/* USER CODE BEGIN Error_Handler_Debug */
	//todo dependendo do erro resetar o sistema ou nao
	/* User can add his own implementation to report the HAL error return state */
	__NOP();
 80020c0:	bf00      	nop
//	while (1)
//	{
//		__NOP();
//	}
	/* USER CODE END Error_Handler_Debug */
}
 80020c2:	4770      	bx	lr

080020c4 <init_containerEeprom>:
void 				init_containerEeprom(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila) {
 80020c4:	b508      	push	{r3, lr}
	EEPROM_ErrorCode errCode = containerEeprom_init(self, i2c, fila);
 80020c6:	f7ff fd2b 	bl	8001b20 <containerEeprom_init>
	if (errCode != EEPROM_SUCCESS) {
 80020ca:	b900      	cbnz	r0, 80020ce <init_containerEeprom+0xa>
}
 80020cc:	bd08      	pop	{r3, pc}
		eepromError_Handler(errCode);
 80020ce:	f7ff fff7 	bl	80020c0 <eepromError_Handler>
}
 80020d2:	e7fb      	b.n	80020cc <init_containerEeprom+0x8>

080020d4 <init_objArrEeprom>:
void 				init_objArrEeprom(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar) {
 80020d4:	b500      	push	{lr}
 80020d6:	b083      	sub	sp, #12
	EEPROM_ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
 80020d8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80020dc:	f8cd c000 	str.w	ip, [sp]
 80020e0:	f7ff fd42 	bl	8001b68 <objArrEeprom_init>
	if (errCode != EEPROM_SUCCESS)
 80020e4:	b910      	cbnz	r0, 80020ec <init_objArrEeprom+0x18>
}
 80020e6:	b003      	add	sp, #12
 80020e8:	f85d fb04 	ldr.w	pc, [sp], #4
		eepromError_Handler(errCode);
 80020ec:	f7ff ffe8 	bl	80020c0 <eepromError_Handler>
}
 80020f0:	e7f9      	b.n	80020e6 <init_objArrEeprom+0x12>

080020f2 <addVarOnContainerEeprom>:
void 				addVarOnContainerEeprom(Eeprom* self, eepromVarArr* var){
 80020f2:	b508      	push	{r3, lr}
	EEPROM_ErrorCode errCode = eeprom_AddVarOnArr(self, var);
 80020f4:	f7ff fd80 	bl	8001bf8 <eeprom_AddVarOnArr>
	if (errCode != EEPROM_SUCCESS) {
 80020f8:	b900      	cbnz	r0, 80020fc <addVarOnContainerEeprom+0xa>
}
 80020fa:	bd08      	pop	{r3, pc}
		eepromError_Handler(errCode);
 80020fc:	f7ff ffe0 	bl	80020c0 <eepromError_Handler>
}
 8002100:	e7fb      	b.n	80020fa <addVarOnContainerEeprom+0x8>

08002102 <update_eepromObjArr>:
void 				update_eepromObjArr(eepromVarArr* obj) {
 8002102:	b508      	push	{r3, lr}
	EEPROM_ErrorCode errCode = eepromObjArr_update(obj);
 8002104:	f7ff fdb2 	bl	8001c6c <eepromObjArr_update>
	if (errCode != EEPROM_SUCCESS) {
 8002108:	b900      	cbnz	r0, 800210c <update_eepromObjArr+0xa>
}
 800210a:	bd08      	pop	{r3, pc}
		eepromError_Handler(errCode);
 800210c:	f7ff ffd8 	bl	80020c0 <eepromError_Handler>
}
 8002110:	e7fb      	b.n	800210a <update_eepromObjArr+0x8>

08002112 <download_containerEeprom>:
void 				download_containerEeprom	(Eeprom *eeprom){
 8002112:	b508      	push	{r3, lr}
	EEPROM_ErrorCode errCode = containerEeprom_download(eeprom);
 8002114:	f7ff fe3c 	bl	8001d90 <containerEeprom_download>
	if (errCode != EEPROM_SUCCESS) {
 8002118:	b900      	cbnz	r0, 800211c <download_containerEeprom+0xa>
}
 800211a:	bd08      	pop	{r3, pc}
		eepromError_Handler(errCode);
 800211c:	f7ff ffd0 	bl	80020c0 <eepromError_Handler>
}
 8002120:	e7fb      	b.n	800211a <download_containerEeprom+0x8>

08002122 <reset_containerEeprom>:
void 				reset_containerEeprom(Eeprom *eeprom, TypeRestauracao resetType) {
 8002122:	b508      	push	{r3, lr}
	EEPROM_ErrorCode errCode = containerEeprom_reset(eeprom, resetType);
 8002124:	f7ff feec 	bl	8001f00 <containerEeprom_reset>
	if (errCode != EEPROM_SUCCESS) {
 8002128:	b900      	cbnz	r0, 800212c <reset_containerEeprom+0xa>
}
 800212a:	bd08      	pop	{r3, pc}
		eepromError_Handler(errCode);
 800212c:	f7ff ffc8 	bl	80020c0 <eepromError_Handler>
}
 8002130:	e7fb      	b.n	800212a <reset_containerEeprom+0x8>

08002132 <onDigital>:

	IndviduoPID_SetPWMValue(_individ, 0);

	return OUTPUT_SUCCESS;
}
void onDigital(IndviduoOutput* outPut) {
 8002132:	b510      	push	{r4, lr}
 8002134:	4604      	mov	r4, r0
	// Implementação do método ON.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 8002136:	2201      	movs	r2, #1
 8002138:	8801      	ldrh	r1, [r0, #0]
 800213a:	6840      	ldr	r0, [r0, #4]
 800213c:	f003 fcf3 	bl	8005b26 <HAL_GPIO_WritePin>
	outPut->_state = on;
 8002140:	2301      	movs	r3, #1
 8002142:	7223      	strb	r3, [r4, #8]
}
 8002144:	bd10      	pop	{r4, pc}

08002146 <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 8002146:	b510      	push	{r4, lr}
 8002148:	4604      	mov	r4, r0
	// Implementação do método OFF.
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	8801      	ldrh	r1, [r0, #0]
 800214e:	6840      	ldr	r0, [r0, #4]
 8002150:	f003 fce9 	bl	8005b26 <HAL_GPIO_WritePin>
	outPut->_state = off;
 8002154:	2300      	movs	r3, #0
 8002156:	7223      	strb	r3, [r4, #8]
}
 8002158:	bd10      	pop	{r4, pc}

0800215a <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 800215a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800215e:	4604      	mov	r4, r0
	// todo criar arquivo de instruçoes: chamar essa funcao em um timer com passo de 1 segundo.

	// varredura saidas digitais.
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002160:	2500      	movs	r5, #0
 8002162:	e00d      	b.n	8002180 <contadorOutput+0x26>

		// processamento dos contadores digitais.
		if(Output->_OutDigitalArr[i]->_state == on){
			Output->_OutDigitalArr[i]->timeOff = 0;
 8002164:	2200      	movs	r2, #0
 8002166:	819a      	strh	r2, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8002168:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 800216c:	8953      	ldrh	r3, [r2, #10]
 800216e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002172:	428b      	cmp	r3, r1
 8002174:	d019      	beq.n	80021aa <contadorOutput+0x50>
 8002176:	3301      	adds	r3, #1
 8002178:	8153      	strh	r3, [r2, #10]
 800217a:	e016      	b.n	80021aa <contadorOutput+0x50>
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800217c:	3501      	adds	r5, #1
 800217e:	b2ed      	uxtb	r5, r5
 8002180:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002184:	42ab      	cmp	r3, r5
 8002186:	d924      	bls.n	80021d2 <contadorOutput+0x78>
		if(Output->_OutDigitalArr[i]->_state == on){
 8002188:	462e      	mov	r6, r5
 800218a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 800218e:	7a1a      	ldrb	r2, [r3, #8]
 8002190:	2a01      	cmp	r2, #1
 8002192:	d0e7      	beq.n	8002164 <contadorOutput+0xa>
		}else{
			Output->_OutDigitalArr[i]->timeOn = 0;
 8002194:	2200      	movs	r2, #0
 8002196:	815a      	strh	r2, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8002198:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 800219c:	8993      	ldrh	r3, [r2, #12]
 800219e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021a2:	428b      	cmp	r3, r1
 80021a4:	d001      	beq.n	80021aa <contadorOutput+0x50>
 80021a6:	3301      	adds	r3, #1
 80021a8:	8193      	strh	r3, [r2, #12]
		}

		// verifica se atingiu timeout ligado.
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 80021aa:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80021ae:	89da      	ldrh	r2, [r3, #14]
 80021b0:	b122      	cbz	r2, 80021bc <contadorOutput+0x62>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 80021b2:	8959      	ldrh	r1, [r3, #10]
 80021b4:	428a      	cmp	r2, r1
 80021b6:	d801      	bhi.n	80021bc <contadorOutput+0x62>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4798      	blx	r3
			}
		}

		// verifica se atingiu timeout desligado.
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 80021bc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80021c0:	8a1a      	ldrh	r2, [r3, #16]
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	d0da      	beq.n	800217c <contadorOutput+0x22>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 80021c6:	8999      	ldrh	r1, [r3, #12]
 80021c8:	428a      	cmp	r2, r1
 80021ca:	d8d7      	bhi.n	800217c <contadorOutput+0x22>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4798      	blx	r3
 80021d0:	e7d4      	b.n	800217c <contadorOutput+0x22>
			}
		}
	}

	// varredura saidas PID.
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 80021d2:	2500      	movs	r5, #0
 80021d4:	e020      	b.n	8002218 <contadorOutput+0xbe>
#endif
#ifndef CALCULA_POR_PWMOUT
		// processa state do item.
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
			Output->_OutPidArr[i]->_PWMstate = idle;
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 80021d6:	f8bb 003a 	ldrh.w	r0, [fp, #58]	; 0x3a
 80021da:	f7fe f913 	bl	8000404 <__aeabi_i2d>
 80021de:	4642      	mov	r2, r8
 80021e0:	464b      	mov	r3, r9
 80021e2:	f7fd ffc3 	bl	800016c <__adddf3>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4630      	mov	r0, r6
 80021ec:	4639      	mov	r1, r7
 80021ee:	f7fe fbe5 	bl	80009bc <__aeabi_dcmplt>
 80021f2:	b118      	cbz	r0, 80021fc <contadorOutput+0xa2>
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 80021f4:	2302      	movs	r3, #2
 80021f6:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
 80021fa:	e024      	b.n	8002246 <contadorOutput+0xec>
		}else
			Output->_OutPidArr[i]->_PWMstate = buscando;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
 8002202:	e020      	b.n	8002246 <contadorOutput+0xec>
#endif
		// processamento dos contadores PID.
		if(Output->_OutPidArr[i]->_PWMstate == mantendo){
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 8002204:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002206:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800220a:	428a      	cmp	r2, r1
 800220c:	d025      	beq.n	800225a <contadorOutput+0x100>
 800220e:	3201      	adds	r2, #1
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002212:	e022      	b.n	800225a <contadorOutput+0x100>
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 8002214:	3501      	adds	r5, #1
 8002216:	b2ed      	uxtb	r5, r5
 8002218:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800221c:	42ab      	cmp	r3, r5
 800221e:	d92a      	bls.n	8002276 <contadorOutput+0x11c>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 8002220:	46aa      	mov	sl, r5
 8002222:	1dab      	adds	r3, r5, #6
 8002224:	f854 b023 	ldr.w	fp, [r4, r3, lsl #2]
 8002228:	e9db 890a 	ldrd	r8, r9, [fp, #40]	; 0x28
 800222c:	e9db 670c 	ldrd	r6, r7, [fp, #48]	; 0x30
 8002230:	4632      	mov	r2, r6
 8002232:	463b      	mov	r3, r7
 8002234:	4640      	mov	r0, r8
 8002236:	4649      	mov	r1, r9
 8002238:	f7fe fbd4 	bl	80009e4 <__aeabi_dcmpge>
 800223c:	2800      	cmp	r0, #0
 800223e:	d0ca      	beq.n	80021d6 <contadorOutput+0x7c>
			Output->_OutPidArr[i]->_PWMstate = idle;
 8002240:	2300      	movs	r3, #0
 8002242:	f88b 303c 	strb.w	r3, [fp, #60]	; 0x3c
		if(Output->_OutPidArr[i]->_PWMstate == mantendo){
 8002246:	f10a 0306 	add.w	r3, sl, #6
 800224a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800224e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002252:	2a02      	cmp	r2, #2
 8002254:	d0d6      	beq.n	8002204 <contadorOutput+0xaa>
		}else{
			Output->_OutPidArr[i]->timeOn=0;
 8002256:	2200      	movs	r2, #0
 8002258:	87da      	strh	r2, [r3, #62]	; 0x3e
		}

		// verifica se atingiu timeout ligado.
		if(Output->_OutPidArr[i]->limiteOn != 0){
 800225a:	f10a 0a06 	add.w	sl, sl, #6
 800225e:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8002262:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002266:	2a00      	cmp	r2, #0
 8002268:	d0d4      	beq.n	8002214 <contadorOutput+0xba>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 800226a:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 800226c:	428a      	cmp	r2, r1
 800226e:	d8d1      	bhi.n	8002214 <contadorOutput+0xba>
				Output->_OutPidArr[i]->timeOut();//chama callback de timeout
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4798      	blx	r3
 8002274:	e7ce      	b.n	8002214 <contadorOutput+0xba>
			}
		}
	}
}
 8002276:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800227a <IndviduoPID_SetPWMValueDirect>:
		outputError_Handler(OUTPUT_TIMERSTART_ERROR);
	}
}
void IndviduoPID_SetPWMValueDirect(IndviduoPID *pid, uint32_t pwmValue) {
	// diretamente acessando o registro de comparação do canal apropriado
	volatile uint32_t *ccrAddress = &pid->TimHandle->Instance->CCR1 + (pid->Channel >> 2);
 800227a:	6803      	ldr	r3, [r0, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3334      	adds	r3, #52	; 0x34
 8002280:	6842      	ldr	r2, [r0, #4]
 8002282:	0892      	lsrs	r2, r2, #2
	*ccrAddress = pwmValue;
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002288:	4770      	bx	lr

0800228a <outputError_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800228a:	b672      	cpsid	i
void outputError_Handler(OUTPUT_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800228c:	e7fe      	b.n	800228c <outputError_Handler+0x2>

0800228e <OutputAddDigital>:
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 800228e:	b538      	push	{r3, r4, r5, lr}
 8002290:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8002294:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (Output == NULL || _individ == NULL || _portaOUT == NULL ) {
 8002298:	b198      	cbz	r0, 80022c2 <OutputAddDigital+0x34>
 800229a:	4684      	mov	ip, r0
 800229c:	b189      	cbz	r1, 80022c2 <OutputAddDigital+0x34>
 800229e:	b183      	cbz	r3, 80022c2 <OutputAddDigital+0x34>
	if(limitOn && limitOff){
 80022a0:	b104      	cbz	r4, 80022a4 <OutputAddDigital+0x16>
 80022a2:	b98d      	cbnz	r5, 80022c8 <OutputAddDigital+0x3a>
	_individ->GPIO_Pin	= _pinoOUT;		// pino a ser controlado.
 80022a4:	800a      	strh	r2, [r1, #0]
	_individ->GPIOx		= _portaOUT;	// porta a ser controlada.
 80022a6:	604b      	str	r3, [r1, #4]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 80022a8:	9b04      	ldr	r3, [sp, #16]
 80022aa:	614b      	str	r3, [r1, #20]
	_individ->limitOn 	= limitOn;		// se houver limite ligado.
 80022ac:	81cc      	strh	r4, [r1, #14]
	_individ->limitOff 	= limitOff;		// se houver limite desligado.
 80022ae:	820d      	strh	r5, [r1, #16]
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 80022b0:	f89c 3028 	ldrb.w	r3, [ip, #40]	; 0x28
 80022b4:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
	Output->_DigitalCount++;
 80022b8:	3301      	adds	r3, #1
 80022ba:	f88c 3028 	strb.w	r3, [ip, #40]	; 0x28
}
 80022be:	2000      	movs	r0, #0
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
		outputError_Handler(OUTPUT_OBJETO_NULO);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff ffe1 	bl	800228a <outputError_Handler>
		outputError_Handler(OUTPUT_MORE_LIMITS);
 80022c8:	2002      	movs	r0, #2
 80022ca:	f7ff ffde 	bl	800228a <outputError_Handler>

080022ce <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 80022ce:	b510      	push	{r4, lr}
 80022d0:	b088      	sub	sp, #32
 80022d2:	4604      	mov	r4, r0
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
	TIM_OC_InitTypeDef sConfigOC = {0};
 80022d8:	2300      	movs	r3, #0
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	9302      	str	r3, [sp, #8]
 80022de:	9303      	str	r3, [sp, #12]
 80022e0:	9304      	str	r3, [sp, #16]
 80022e2:	9305      	str	r3, [sp, #20]
 80022e4:	9306      	str	r3, [sp, #24]
 80022e6:	9307      	str	r3, [sp, #28]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e8:	2360      	movs	r3, #96	; 0x60
 80022ea:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 80022ec:	f7fe fb8e 	bl	8000a0c <__aeabi_d2uiz>
 80022f0:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 80022f2:	6862      	ldr	r2, [r4, #4]
 80022f4:	a901      	add	r1, sp, #4
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f005 fb5c 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 80022fc:	b930      	cbnz	r0, 800230c <IndviduoPID_SetPWMValue+0x3e>
	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 80022fe:	6861      	ldr	r1, [r4, #4]
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	f005 fc5f 	bl	8007bc4 <HAL_TIM_PWM_Start>
 8002306:	b920      	cbnz	r0, 8002312 <IndviduoPID_SetPWMValue+0x44>
}
 8002308:	b008      	add	sp, #32
 800230a:	bd10      	pop	{r4, pc}
		outputError_Handler(OUTPUT_TIMERSET_ERROR);
 800230c:	2003      	movs	r0, #3
 800230e:	f7ff ffbc 	bl	800228a <outputError_Handler>
		outputError_Handler(OUTPUT_TIMERSTART_ERROR);
 8002312:	2004      	movs	r0, #4
 8002314:	f7ff ffb9 	bl	800228a <outputError_Handler>

08002318 <OutputAddPID>:
		uint16_t limit_on,void (*callback)()){
 8002318:	b508      	push	{r3, lr}
	if (Output == NULL || _individ == NULL || htim == NULL ) {
 800231a:	b318      	cbz	r0, 8002364 <OutputAddPID+0x4c>
 800231c:	b311      	cbz	r1, 8002364 <OutputAddPID+0x4c>
 800231e:	b30a      	cbz	r2, 8002364 <OutputAddPID+0x4c>
	_individ->TimHandle = htim;		// definicao do timer.
 8002320:	600a      	str	r2, [r1, #0]
	_individ->Channel   = Channel;	// channel do timer.
 8002322:	604b      	str	r3, [r1, #4]
	_individ->kp	= Kp;
 8002324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002328:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 800232c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002330:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8002334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002338:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;// histerese dada em graus.
 800233c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002340:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;	// callback caso extrapole tempo de acionamento.
 8002342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002344:	644b      	str	r3, [r1, #68]	; 0x44
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002346:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800234a:	1d9a      	adds	r2, r3, #6
 800234c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	Output->_PidCount++;
 8002350:	3301      	adds	r3, #1
 8002352:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	IndviduoPID_SetPWMValue(_individ, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2300      	movs	r3, #0
 800235a:	4608      	mov	r0, r1
 800235c:	f7ff ffb7 	bl	80022ce <IndviduoPID_SetPWMValue>
}
 8002360:	2000      	movs	r0, #0
 8002362:	bd08      	pop	{r3, pc}
		outputError_Handler(OUTPUT_OBJETO_NULO);
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff ff90 	bl	800228a <outputError_Handler>
	...

0800236c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <vApplicationGetIdleTaskMemory+0x10>)
 800236e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <vApplicationGetIdleTaskMemory+0x14>)
 8002372:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000290 	.word	0x20000290
 8002380:	20000090 	.word	0x20000090

08002384 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <vApplicationGetTimerTaskMemory+0x10>)
 8002386:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <vApplicationGetTimerTaskMemory+0x14>)
 800238a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800238c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8002392:	4770      	bx	lr
 8002394:	20000730 	.word	0x20000730
 8002398:	20000330 	.word	0x20000330

0800239c <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 800239c:	b538      	push	{r3, r4, r5, lr}
	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5)
 800239e:	4917      	ldr	r1, [pc, #92]	; (80023fc <timeoutAquecimento+0x60>)
 80023a0:	e9d1 453a 	ldrd	r4, r5, [r1, #232]	; 0xe8
 80023a4:	2200      	movs	r2, #0
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <timeoutAquecimento+0x64>)
 80023a8:	e9d1 013c 	ldrd	r0, r1, [r1, #240]	; 0xf0
 80023ac:	f7fd fedc 	bl	8000168 <__aeabi_dsub>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fe fb00 	bl	80009bc <__aeabi_dcmplt>
 80023bc:	b130      	cbz	r0, 80023cc <timeoutAquecimento+0x30>
		PrimitiveStates.Erro.bit.IdleLastro=1;
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <timeoutAquecimento+0x60>)
 80023c0:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5)
 80023cc:	490b      	ldr	r1, [pc, #44]	; (80023fc <timeoutAquecimento+0x60>)
 80023ce:	e9d1 4528 	ldrd	r4, r5, [r1, #160]	; 0xa0
 80023d2:	2200      	movs	r2, #0
 80023d4:	4b0a      	ldr	r3, [pc, #40]	; (8002400 <timeoutAquecimento+0x64>)
 80023d6:	e9d1 012a 	ldrd	r0, r1, [r1, #168]	; 0xa8
 80023da:	f7fd fec5 	bl	8000168 <__aeabi_dsub>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4620      	mov	r0, r4
 80023e4:	4629      	mov	r1, r5
 80023e6:	f7fe fae9 	bl	80009bc <__aeabi_dcmplt>
 80023ea:	b130      	cbz	r0, 80023fa <timeoutAquecimento+0x5e>
		PrimitiveStates.Erro.bit.IdleTeto=1;
 80023ec:	4a03      	ldr	r2, [pc, #12]	; (80023fc <timeoutAquecimento+0x60>)
 80023ee:	f892 310e 	ldrb.w	r3, [r2, #270]	; 0x10e
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	f882 310e 	strb.w	r3, [r2, #270]	; 0x10e
}
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
 80023fc:	200007e8 	.word	0x200007e8
 8002400:	40140000 	.word	0x40140000

08002404 <MX_GPIO_Init>:
{
 8002404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002408:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240a:	2400      	movs	r4, #0
 800240c:	9402      	str	r4, [sp, #8]
 800240e:	9403      	str	r4, [sp, #12]
 8002410:	9404      	str	r4, [sp, #16]
 8002412:	9405      	str	r4, [sp, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <MX_GPIO_Init+0xd0>)
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	f042 0204 	orr.w	r2, r2, #4
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	f002 0204 	and.w	r2, r2, #4
 8002424:	9200      	str	r2, [sp, #0]
 8002426:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	f042 0208 	orr.w	r2, r2, #8
 800242e:	619a      	str	r2, [r3, #24]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 800243a:	4d27      	ldr	r5, [pc, #156]	; (80024d8 <MX_GPIO_Init+0xd4>)
 800243c:	2201      	movs	r2, #1
 800243e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002442:	4628      	mov	r0, r5
 8002444:	f003 fb6f 	bl	8005b26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002448:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80024dc <MX_GPIO_Init+0xd8>
 800244c:	4622      	mov	r2, r4
 800244e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002452:	4640      	mov	r0, r8
 8002454:	f003 fb67 	bl	8005b26 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002458:	4622      	mov	r2, r4
 800245a:	21f8      	movs	r1, #248	; 0xf8
 800245c:	4628      	mov	r0, r5
 800245e:	f003 fb62 	bl	8005b26 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 8002462:	f246 0378 	movw	r3, #24696	; 0x6078
 8002466:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002468:	2701      	movs	r7, #1
 800246a:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2602      	movs	r6, #2
 8002470:	9605      	str	r6, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	a902      	add	r1, sp, #8
 8002474:	4628      	mov	r0, r5
 8002476:	f003 f9bb 	bl	80057f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 800247a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 800247e:	f8cd 9008 	str.w	r9, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002482:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80024e0 <MX_GPIO_Init+0xdc>
 8002486:	f8cd a00c 	str.w	sl, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800248c:	a902      	add	r1, sp, #8
 800248e:	4628      	mov	r0, r5
 8002490:	f003 f9ae 	bl	80057f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800249a:	f8cd a00c 	str.w	sl, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 80024a0:	a902      	add	r1, sp, #8
 80024a2:	4640      	mov	r0, r8
 80024a4:	f003 f9a4 	bl	80057f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = RELE_1_Pin;
 80024a8:	f8cd 9008 	str.w	r9, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	9605      	str	r6, [sp, #20]
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 80024b2:	a902      	add	r1, sp, #8
 80024b4:	4640      	mov	r0, r8
 80024b6:	f003 f99b 	bl	80057f0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024c0:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	9605      	str	r6, [sp, #20]
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 80024c4:	a902      	add	r1, sp, #8
 80024c6:	4628      	mov	r0, r5
 80024c8:	f003 f992 	bl	80057f0 <HAL_GPIO_Init>
}
 80024cc:	b006      	add	sp, #24
 80024ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	40010800 	.word	0x40010800
 80024e0:	10110000 	.word	0x10110000

080024e4 <MX_DMA_Init>:
{
 80024e4:	b500      	push	{lr}
 80024e6:	b083      	sub	sp, #12
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <MX_DMA_Init+0x50>)
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	615a      	str	r2, [r3, #20]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80024fc:	2200      	movs	r2, #0
 80024fe:	2105      	movs	r1, #5
 8002500:	200b      	movs	r0, #11
 8002502:	f002 ff51 	bl	80053a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002506:	200b      	movs	r0, #11
 8002508:	f002 ff86 	bl	8005418 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2105      	movs	r1, #5
 8002510:	200d      	movs	r0, #13
 8002512:	f002 ff49 	bl	80053a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002516:	200d      	movs	r0, #13
 8002518:	f002 ff7e 	bl	8005418 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	2105      	movs	r1, #5
 8002520:	200f      	movs	r0, #15
 8002522:	f002 ff41 	bl	80053a8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002526:	200f      	movs	r0, #15
 8002528:	f002 ff76 	bl	8005418 <HAL_NVIC_EnableIRQ>
}
 800252c:	b003      	add	sp, #12
 800252e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){
 8002538:	b508      	push	{r3, lr}

	offDigital(&PrimitiveStates.Lampada);
 800253a:	4802      	ldr	r0, [pc, #8]	; (8002544 <timeoutDesligaLampada+0xc>)
 800253c:	f7ff fe03 	bl	8002146 <offDigital>
}
 8002540:	bd08      	pop	{r3, pc}
 8002542:	bf00      	nop
 8002544:	200007e8 	.word	0x200007e8

08002548 <CBTimer10ms>:
	/* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 8002548:	b508      	push	{r3, lr}
	/* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 800254a:	4802      	ldr	r0, [pc, #8]	; (8002554 <CBTimer10ms+0xc>)
 800254c:	f7fe fe3a 	bl	80011c4 <bluetooth10ms>

	/* USER CODE END CBTimer10ms */
}
 8002550:	bd08      	pop	{r3, pc}
 8002552:	bf00      	nop
 8002554:	20000e4c 	.word	0x20000e4c

08002558 <_write>:
{
 8002558:	4610      	mov	r0, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	f04f 0c00 	mov.w	ip, #0
 800255e:	e00a      	b.n	8002576 <_write+0x1e>
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002560:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002562:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f9      	beq.n	8002560 <_write+0x8>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800256c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	f10c 0c01 	add.w	ip, ip, #1
 8002576:	4584      	cmp	ip, r0
 8002578:	da10      	bge.n	800259c <_write+0x44>
		ITM_SendChar(*ptr++);
 800257a:	f811 2b01 	ldrb.w	r2, [r1], #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800257e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002582:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002586:	f013 0f01 	tst.w	r3, #1
 800258a:	d0f2      	beq.n	8002572 <_write+0x1a>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800258c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002594:	f013 0f01 	tst.w	r3, #1
 8002598:	d1e3      	bne.n	8002562 <_write+0xa>
 800259a:	e7ea      	b.n	8002572 <_write+0x1a>
}
 800259c:	4770      	bx	lr
	...

080025a0 <desligaForno>:
	PrimitiveStates.RTTimerMinutos 	= 0;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <desligaForno+0x28>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
	PrimitiveStates.RTTimerSegundos = 0;
 80025a8:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
	PrimitiveStates.SPTimerMinutos 	= 0;
 80025ac:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	PrimitiveStates.SPTimerSegundos = 0;
 80025b0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	PrimitiveStates.Lastro.setPoint	= 0;
 80025b4:	2000      	movs	r0, #0
 80025b6:	2100      	movs	r1, #0
 80025b8:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
	PrimitiveStates.Teto.setPoint 	= 0;
 80025bc:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
	PrimitiveStates.stateTimer 		= TIMER_idle;
 80025c0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	200007e8 	.word	0x200007e8
 80025cc:	00000000 	.word	0x00000000

080025d0 <controleCooler>:
void controleCooler(void){
 80025d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(PrimitiveStates.Lastro.realtime>ON_FAN_TEMPERATURA || PrimitiveStates.Teto.realtime>ON_FAN_TEMPERATURA){
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <controleCooler+0x68>)
 80025d4:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 80025d8:	2200      	movs	r2, #0
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <controleCooler+0x6c>)
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	f7fe fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 80025e4:	b948      	cbnz	r0, 80025fa <controleCooler+0x2a>
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <controleCooler+0x68>)
 80025e8:	e9d3 6728 	ldrd	r6, r7, [r3, #160]	; 0xa0
 80025ec:	2200      	movs	r2, #0
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <controleCooler+0x6c>)
 80025f0:	4630      	mov	r0, r6
 80025f2:	4639      	mov	r1, r7
 80025f4:	f7fe fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80025f8:	b118      	cbz	r0, 8002602 <controleCooler+0x32>
		onDigital(&PrimitiveStates.Cooler);
 80025fa:	4811      	ldr	r0, [pc, #68]	; (8002640 <controleCooler+0x70>)
 80025fc:	f7ff fd99 	bl	8002132 <onDigital>
}
 8002600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else 	if(PrimitiveStates.Lastro.realtime<ON_FAN_TEMPERATURA-5 && PrimitiveStates.Teto.realtime<ON_FAN_TEMPERATURA-5){
 8002602:	a30b      	add	r3, pc, #44	; (adr r3, 8002630 <controleCooler+0x60>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fe f9d6 	bl	80009bc <__aeabi_dcmplt>
 8002610:	2800      	cmp	r0, #0
 8002612:	d0f5      	beq.n	8002600 <controleCooler+0x30>
 8002614:	a306      	add	r3, pc, #24	; (adr r3, 8002630 <controleCooler+0x60>)
 8002616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261a:	4630      	mov	r0, r6
 800261c:	4639      	mov	r1, r7
 800261e:	f7fe f9cd 	bl	80009bc <__aeabi_dcmplt>
 8002622:	2800      	cmp	r0, #0
 8002624:	d0ec      	beq.n	8002600 <controleCooler+0x30>
		offDigital(&PrimitiveStates.Cooler);
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <controleCooler+0x70>)
 8002628:	f7ff fd8d 	bl	8002146 <offDigital>
}
 800262c:	e7e8      	b.n	8002600 <controleCooler+0x30>
 800262e:	bf00      	nop
 8002630:	00000000 	.word	0x00000000
 8002634:	40686000 	.word	0x40686000
 8002638:	200007e8 	.word	0x200007e8
 800263c:	40690000 	.word	0x40690000
 8002640:	20000800 	.word	0x20000800

08002644 <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002644:	b508      	push	{r3, lr}
	/* USER CODE BEGIN CBTimer1000ms */

	printf("passou 1 segundo \n");
 8002646:	480b      	ldr	r0, [pc, #44]	; (8002674 <CBTimer1000ms+0x30>)
 8002648:	f008 fd82 	bl	800b150 <puts>

	bluetooth1000ms(&bluetooth);
 800264c:	480a      	ldr	r0, [pc, #40]	; (8002678 <CBTimer1000ms+0x34>)
 800264e:	f7fe fd8e 	bl	800116e <bluetooth1000ms>
	taskTemperatura1sec();
 8002652:	f002 fb77 	bl	8004d44 <taskTemperatura1sec>
	taskBluetooth1sec();
 8002656:	f001 f9db 	bl	8003a10 <taskBluetooth1sec>
	controleCooler();
 800265a:	f7ff ffb9 	bl	80025d0 <controleCooler>

	//contadores de todas as saidas digitais
	contadorOutput(&outPuts);
 800265e:	4807      	ldr	r0, [pc, #28]	; (800267c <CBTimer1000ms+0x38>)
 8002660:	f7ff fd7b 	bl	800215a <contadorOutput>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <CBTimer1000ms+0x3c>)
 8002666:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800266a:	b903      	cbnz	r3, 800266e <CBTimer1000ms+0x2a>
		desligaForno();
	}
	/* USER CODE END CBTimer1000ms */
}
 800266c:	bd08      	pop	{r3, pc}
		desligaForno();
 800266e:	f7ff ff97 	bl	80025a0 <desligaForno>
}
 8002672:	e7fb      	b.n	800266c <CBTimer1000ms+0x28>
 8002674:	0800c55c 	.word	0x0800c55c
 8002678:	20000e4c 	.word	0x20000e4c
 800267c:	200011a0 	.word	0x200011a0
 8002680:	200007e8 	.word	0x200007e8

08002684 <HAL_ADC_ConvCpltCallback>:
{
 8002684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(i<TAM){
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_ADC_ConvCpltCallback+0xa4>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002690:	d20f      	bcs.n	80026b2 <HAL_ADC_ConvCpltCallback+0x2e>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002692:	4926      	ldr	r1, [pc, #152]	; (800272c <HAL_ADC_ConvCpltCallback+0xa8>)
 8002694:	684c      	ldr	r4, [r1, #4]
 8002696:	4826      	ldr	r0, [pc, #152]	; (8002730 <HAL_ADC_ConvCpltCallback+0xac>)
 8002698:	6802      	ldr	r2, [r0, #0]
 800269a:	4422      	add	r2, r4
 800269c:	6002      	str	r2, [r0, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 800269e:	6808      	ldr	r0, [r1, #0]
 80026a0:	4924      	ldr	r1, [pc, #144]	; (8002734 <HAL_ADC_ConvCpltCallback+0xb0>)
 80026a2:	680a      	ldr	r2, [r1, #0]
 80026a4:	4402      	add	r2, r0
 80026a6:	600a      	str	r2, [r1, #0]
		i++;
 80026a8:	3301      	adds	r3, #1
 80026aa:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <HAL_ADC_ConvCpltCallback+0xa4>)
 80026ac:	8013      	strh	r3, [r2, #0]
}
 80026ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 80026b2:	4d1f      	ldr	r5, [pc, #124]	; (8002730 <HAL_ADC_ConvCpltCallback+0xac>)
 80026b4:	6828      	ldr	r0, [r5, #0]
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_ADC_ConvCpltCallback+0xb4>)
 80026b8:	fb83 1200 	smull	r1, r2, r3, r0
 80026bc:	17c0      	asrs	r0, r0, #31
 80026be:	ebc0 1062 	rsb	r0, r0, r2, asr #5
 80026c2:	6028      	str	r0, [r5, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80026c4:	4e1b      	ldr	r6, [pc, #108]	; (8002734 <HAL_ADC_ConvCpltCallback+0xb0>)
 80026c6:	6834      	ldr	r4, [r6, #0]
 80026c8:	fb83 2304 	smull	r2, r3, r3, r4
 80026cc:	17e4      	asrs	r4, r4, #31
 80026ce:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 80026d2:	6034      	str	r4, [r6, #0]
		Temp1 = somatorio1*16; //calc valor final
 80026d4:	0100      	lsls	r0, r0, #4
 80026d6:	f7fe fac3 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 80026da:	4918      	ldr	r1, [pc, #96]	; (800273c <HAL_ADC_ConvCpltCallback+0xb8>)
 80026dc:	f7fe fbc8 	bl	8000e70 <__aeabi_fdiv>
 80026e0:	4680      	mov	r8, r0
		somatorio1 = 0; 		//zera somatorio
 80026e2:	2700      	movs	r7, #0
 80026e4:	602f      	str	r7, [r5, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 80026e6:	0120      	lsls	r0, r4, #4
 80026e8:	f7fe faba 	bl	8000c60 <__aeabi_i2f>
		Temp2 = Temp2/100;
 80026ec:	4913      	ldr	r1, [pc, #76]	; (800273c <HAL_ADC_ConvCpltCallback+0xb8>)
 80026ee:	f7fe fbbf 	bl	8000e70 <__aeabi_fdiv>
		somatorio2 = 0; 		//zera somatorio
 80026f2:	6037      	str	r7, [r6, #0]
		TempLastro=(double)Temp2;
 80026f4:	f7fd fe98 	bl	8000428 <__aeabi_f2d>
 80026f8:	4604      	mov	r4, r0
 80026fa:	460d      	mov	r5, r1
		TempTeto=(double)Temp1;
 80026fc:	4640      	mov	r0, r8
 80026fe:	f7fd fe93 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 8002702:	2200      	movs	r2, #0
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002706:	f7fd fd2f 	bl	8000168 <__aeabi_dsub>
 800270a:	4e0e      	ldr	r6, [pc, #56]	; (8002744 <HAL_ADC_ConvCpltCallback+0xc0>)
 800270c:	e9c6 0128 	strd	r0, r1, [r6, #160]	; 0xa0
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 8002710:	2200      	movs	r2, #0
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_ADC_ConvCpltCallback+0xbc>)
 8002714:	4620      	mov	r0, r4
 8002716:	4629      	mov	r1, r5
 8002718:	f7fd fd26 	bl	8000168 <__aeabi_dsub>
 800271c:	e9c6 013a 	strd	r0, r1, [r6, #232]	; 0xe8
		i=0;
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002722:	801f      	strh	r7, [r3, #0]
}
 8002724:	e7c3      	b.n	80026ae <HAL_ADC_ConvCpltCallback+0x2a>
 8002726:	bf00      	nop
 8002728:	2000119c 	.word	0x2000119c
 800272c:	20000f0c 	.word	0x20000f0c
 8002730:	200011cc 	.word	0x200011cc
 8002734:	200011d0 	.word	0x200011d0
 8002738:	10624dd3 	.word	0x10624dd3
 800273c:	42c80000 	.word	0x42c80000
 8002740:	40410000 	.word	0x40410000
 8002744:	200007e8 	.word	0x200007e8

08002748 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b508      	push	{r3, lr}
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800274a:	6802      	ldr	r2, [r0, #0]
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x14>)
 800274e:	429a      	cmp	r2, r3
 8002750:	d000      	beq.n	8002754 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002752:	bd08      	pop	{r3, pc}
		HAL_IncTick();
 8002754:	f002 fb86 	bl	8004e64 <HAL_IncTick>
}
 8002758:	e7fb      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xa>
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00

08002760 <Error_Handler>:
 8002760:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002762:	e7fe      	b.n	8002762 <Error_Handler+0x2>

08002764 <MX_ADC1_Init>:
{
 8002764:	b500      	push	{lr}
 8002766:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = {0};
 8002768:	2300      	movs	r3, #0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	9303      	str	r3, [sp, #12]
	hadc1.Instance = ADC1;
 8002770:	481c      	ldr	r0, [pc, #112]	; (80027e4 <MX_ADC1_Init+0x80>)
 8002772:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <MX_ADC1_Init+0x84>)
 8002774:	6002      	str	r2, [r0, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277a:	6082      	str	r2, [r0, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800277c:	2201      	movs	r2, #1
 800277e:	7302      	strb	r2, [r0, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002780:	7503      	strb	r3, [r0, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002782:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002786:	61c2      	str	r2, [r0, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002788:	6043      	str	r3, [r0, #4]
	hadc1.Init.NbrOfConversion = 3;
 800278a:	2303      	movs	r3, #3
 800278c:	6103      	str	r3, [r0, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800278e:	f002 fd75 	bl	800527c <HAL_ADC_Init>
 8002792:	b9f8      	cbnz	r0, 80027d4 <MX_ADC1_Init+0x70>
	sConfig.Channel = ADC_CHANNEL_0;
 8002794:	2300      	movs	r3, #0
 8002796:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002798:	2301      	movs	r3, #1
 800279a:	9302      	str	r3, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800279c:	2306      	movs	r3, #6
 800279e:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a0:	a901      	add	r1, sp, #4
 80027a2:	4810      	ldr	r0, [pc, #64]	; (80027e4 <MX_ADC1_Init+0x80>)
 80027a4:	f002 fbc2 	bl	8004f2c <HAL_ADC_ConfigChannel>
 80027a8:	b9b0      	cbnz	r0, 80027d8 <MX_ADC1_Init+0x74>
	sConfig.Channel = ADC_CHANNEL_1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80027ae:	2302      	movs	r3, #2
 80027b0:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027b2:	a901      	add	r1, sp, #4
 80027b4:	480b      	ldr	r0, [pc, #44]	; (80027e4 <MX_ADC1_Init+0x80>)
 80027b6:	f002 fbb9 	bl	8004f2c <HAL_ADC_ConfigChannel>
 80027ba:	b978      	cbnz	r0, 80027dc <MX_ADC1_Init+0x78>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80027bc:	2310      	movs	r3, #16
 80027be:	9301      	str	r3, [sp, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80027c0:	2303      	movs	r3, #3
 80027c2:	9302      	str	r3, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c4:	a901      	add	r1, sp, #4
 80027c6:	4807      	ldr	r0, [pc, #28]	; (80027e4 <MX_ADC1_Init+0x80>)
 80027c8:	f002 fbb0 	bl	8004f2c <HAL_ADC_ConfigChannel>
 80027cc:	b940      	cbnz	r0, 80027e0 <MX_ADC1_Init+0x7c>
}
 80027ce:	b005      	add	sp, #20
 80027d0:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80027d4:	f7ff ffc4 	bl	8002760 <Error_Handler>
		Error_Handler();
 80027d8:	f7ff ffc2 	bl	8002760 <Error_Handler>
		Error_Handler();
 80027dc:	f7ff ffc0 	bl	8002760 <Error_Handler>
		Error_Handler();
 80027e0:	f7ff ffbe 	bl	8002760 <Error_Handler>
 80027e4:	20000f18 	.word	0x20000f18
 80027e8:	40012400 	.word	0x40012400

080027ec <MX_I2C1_Init>:
{
 80027ec:	b508      	push	{r3, lr}
	hi2c1.Instance = I2C1;
 80027ee:	480a      	ldr	r0, [pc, #40]	; (8002818 <MX_I2C1_Init+0x2c>)
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MX_I2C1_Init+0x30>)
 80027f2:	6003      	str	r3, [r0, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <MX_I2C1_Init+0x34>)
 80027f6:	6043      	str	r3, [r0, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027f8:	2300      	movs	r3, #0
 80027fa:	6083      	str	r3, [r0, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80027fc:	60c3      	str	r3, [r0, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002802:	6102      	str	r2, [r0, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002804:	6143      	str	r3, [r0, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002806:	6183      	str	r3, [r0, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002808:	61c3      	str	r3, [r0, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800280a:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800280c:	f003 fc1c 	bl	8006048 <HAL_I2C_Init>
 8002810:	b900      	cbnz	r0, 8002814 <MX_I2C1_Init+0x28>
}
 8002812:	bd08      	pop	{r3, pc}
		Error_Handler();
 8002814:	f7ff ffa4 	bl	8002760 <Error_Handler>
 8002818:	20001014 	.word	0x20001014
 800281c:	40005400 	.word	0x40005400
 8002820:	000186a0 	.word	0x000186a0

08002824 <MX_TIM3_Init>:
{
 8002824:	b500      	push	{lr}
 8002826:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002828:	2300      	movs	r3, #0
 800282a:	930a      	str	r3, [sp, #40]	; 0x28
 800282c:	930b      	str	r3, [sp, #44]	; 0x2c
 800282e:	930c      	str	r3, [sp, #48]	; 0x30
 8002830:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002832:	9308      	str	r3, [sp, #32]
 8002834:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	9303      	str	r3, [sp, #12]
 800283c:	9304      	str	r3, [sp, #16]
 800283e:	9305      	str	r3, [sp, #20]
 8002840:	9306      	str	r3, [sp, #24]
 8002842:	9307      	str	r3, [sp, #28]
	htim3.Instance = TIM3;
 8002844:	482d      	ldr	r0, [pc, #180]	; (80028fc <MX_TIM3_Init+0xd8>)
 8002846:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <MX_TIM3_Init+0xdc>)
 8002848:	6002      	str	r2, [r0, #0]
	htim3.Init.Prescaler = 4000-1;
 800284a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800284e:	6042      	str	r2, [r0, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002850:	6083      	str	r3, [r0, #8]
	htim3.Init.Period = 100-1;
 8002852:	2263      	movs	r2, #99	; 0x63
 8002854:	60c2      	str	r2, [r0, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	6103      	str	r3, [r0, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800285a:	f005 f821 	bl	80078a0 <HAL_TIM_Base_Init>
 800285e:	2800      	cmp	r0, #0
 8002860:	d13b      	bne.n	80028da <MX_TIM3_Init+0xb6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002868:	a90a      	add	r1, sp, #40	; 0x28
 800286a:	4824      	ldr	r0, [pc, #144]	; (80028fc <MX_TIM3_Init+0xd8>)
 800286c:	f005 f91c 	bl	8007aa8 <HAL_TIM_ConfigClockSource>
 8002870:	2800      	cmp	r0, #0
 8002872:	d134      	bne.n	80028de <MX_TIM3_Init+0xba>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002874:	4821      	ldr	r0, [pc, #132]	; (80028fc <MX_TIM3_Init+0xd8>)
 8002876:	f005 f83f 	bl	80078f8 <HAL_TIM_PWM_Init>
 800287a:	2800      	cmp	r0, #0
 800287c:	d131      	bne.n	80028e2 <MX_TIM3_Init+0xbe>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287e:	2300      	movs	r3, #0
 8002880:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002882:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002884:	a908      	add	r1, sp, #32
 8002886:	481d      	ldr	r0, [pc, #116]	; (80028fc <MX_TIM3_Init+0xd8>)
 8002888:	f005 fa4c 	bl	8007d24 <HAL_TIMEx_MasterConfigSynchronization>
 800288c:	bb58      	cbnz	r0, 80028e6 <MX_TIM3_Init+0xc2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800288e:	2360      	movs	r3, #96	; 0x60
 8002890:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 8002892:	2200      	movs	r2, #0
 8002894:	9202      	str	r2, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002896:	9203      	str	r2, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002898:	2304      	movs	r3, #4
 800289a:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800289c:	eb0d 0103 	add.w	r1, sp, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <MX_TIM3_Init+0xd8>)
 80028a2:	f005 f887 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 80028a6:	bb00      	cbnz	r0, 80028ea <MX_TIM3_Init+0xc6>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028a8:	2204      	movs	r2, #4
 80028aa:	eb0d 0102 	add.w	r1, sp, r2
 80028ae:	4813      	ldr	r0, [pc, #76]	; (80028fc <MX_TIM3_Init+0xd8>)
 80028b0:	f005 f880 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 80028b4:	b9d8      	cbnz	r0, 80028ee <MX_TIM3_Init+0xca>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028b6:	2208      	movs	r2, #8
 80028b8:	a901      	add	r1, sp, #4
 80028ba:	4810      	ldr	r0, [pc, #64]	; (80028fc <MX_TIM3_Init+0xd8>)
 80028bc:	f005 f87a 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 80028c0:	b9b8      	cbnz	r0, 80028f2 <MX_TIM3_Init+0xce>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028c2:	220c      	movs	r2, #12
 80028c4:	a901      	add	r1, sp, #4
 80028c6:	480d      	ldr	r0, [pc, #52]	; (80028fc <MX_TIM3_Init+0xd8>)
 80028c8:	f005 f874 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 80028cc:	b998      	cbnz	r0, 80028f6 <MX_TIM3_Init+0xd2>
	HAL_TIM_MspPostInit(&htim3);
 80028ce:	480b      	ldr	r0, [pc, #44]	; (80028fc <MX_TIM3_Init+0xd8>)
 80028d0:	f000 fe2a 	bl	8003528 <HAL_TIM_MspPostInit>
}
 80028d4:	b00f      	add	sp, #60	; 0x3c
 80028d6:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80028da:	f7ff ff41 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028de:	f7ff ff3f 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028e2:	f7ff ff3d 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028e6:	f7ff ff3b 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028ea:	f7ff ff39 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028ee:	f7ff ff37 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028f2:	f7ff ff35 	bl	8002760 <Error_Handler>
		Error_Handler();
 80028f6:	f7ff ff33 	bl	8002760 <Error_Handler>
 80028fa:	bf00      	nop
 80028fc:	200010c4 	.word	0x200010c4
 8002900:	40000400 	.word	0x40000400

08002904 <MX_TIM2_Init>:
{
 8002904:	b500      	push	{lr}
 8002906:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002908:	2300      	movs	r3, #0
 800290a:	930a      	str	r3, [sp, #40]	; 0x28
 800290c:	930b      	str	r3, [sp, #44]	; 0x2c
 800290e:	930c      	str	r3, [sp, #48]	; 0x30
 8002910:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002912:	9308      	str	r3, [sp, #32]
 8002914:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	9303      	str	r3, [sp, #12]
 800291c:	9304      	str	r3, [sp, #16]
 800291e:	9305      	str	r3, [sp, #20]
 8002920:	9306      	str	r3, [sp, #24]
 8002922:	9307      	str	r3, [sp, #28]
	htim2.Instance = TIM2;
 8002924:	481f      	ldr	r0, [pc, #124]	; (80029a4 <MX_TIM2_Init+0xa0>)
 8002926:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800292a:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 165-1;
 800292c:	22a4      	movs	r2, #164	; 0xa4
 800292e:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002930:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 100-1;
 8002932:	2263      	movs	r2, #99	; 0x63
 8002934:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002936:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002938:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800293a:	f004 ffb1 	bl	80078a0 <HAL_TIM_Base_Init>
 800293e:	bb30      	cbnz	r0, 800298e <MX_TIM2_Init+0x8a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002944:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002946:	a90a      	add	r1, sp, #40	; 0x28
 8002948:	4816      	ldr	r0, [pc, #88]	; (80029a4 <MX_TIM2_Init+0xa0>)
 800294a:	f005 f8ad 	bl	8007aa8 <HAL_TIM_ConfigClockSource>
 800294e:	bb00      	cbnz	r0, 8002992 <MX_TIM2_Init+0x8e>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002950:	4814      	ldr	r0, [pc, #80]	; (80029a4 <MX_TIM2_Init+0xa0>)
 8002952:	f004 ffd1 	bl	80078f8 <HAL_TIM_PWM_Init>
 8002956:	b9f0      	cbnz	r0, 8002996 <MX_TIM2_Init+0x92>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	2300      	movs	r3, #0
 800295a:	9308      	str	r3, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800295e:	a908      	add	r1, sp, #32
 8002960:	4810      	ldr	r0, [pc, #64]	; (80029a4 <MX_TIM2_Init+0xa0>)
 8002962:	f005 f9df 	bl	8007d24 <HAL_TIMEx_MasterConfigSynchronization>
 8002966:	b9c0      	cbnz	r0, 800299a <MX_TIM2_Init+0x96>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002968:	2360      	movs	r3, #96	; 0x60
 800296a:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 50;
 800296c:	2332      	movs	r3, #50	; 0x32
 800296e:	9302      	str	r3, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002970:	2300      	movs	r3, #0
 8002972:	9303      	str	r3, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002974:	9305      	str	r3, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002976:	220c      	movs	r2, #12
 8002978:	a901      	add	r1, sp, #4
 800297a:	480a      	ldr	r0, [pc, #40]	; (80029a4 <MX_TIM2_Init+0xa0>)
 800297c:	f005 f81a 	bl	80079b4 <HAL_TIM_PWM_ConfigChannel>
 8002980:	b968      	cbnz	r0, 800299e <MX_TIM2_Init+0x9a>
	HAL_TIM_MspPostInit(&htim2);
 8002982:	4808      	ldr	r0, [pc, #32]	; (80029a4 <MX_TIM2_Init+0xa0>)
 8002984:	f000 fdd0 	bl	8003528 <HAL_TIM_MspPostInit>
}
 8002988:	b00f      	add	sp, #60	; 0x3c
 800298a:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800298e:	f7ff fee7 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002992:	f7ff fee5 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002996:	f7ff fee3 	bl	8002760 <Error_Handler>
		Error_Handler();
 800299a:	f7ff fee1 	bl	8002760 <Error_Handler>
		Error_Handler();
 800299e:	f7ff fedf 	bl	8002760 <Error_Handler>
 80029a2:	bf00      	nop
 80029a4:	2000107c 	.word	0x2000107c

080029a8 <MX_USART1_UART_Init>:
{
 80029a8:	b508      	push	{r3, lr}
	huart1.Instance = USART1;
 80029aa:	480a      	ldr	r0, [pc, #40]	; (80029d4 <MX_USART1_UART_Init+0x2c>)
 80029ac:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <MX_USART1_UART_Init+0x30>)
 80029ae:	6003      	str	r3, [r0, #0]
	huart1.Init.BaudRate = 9600;
 80029b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80029b4:	6043      	str	r3, [r0, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029b6:	2300      	movs	r3, #0
 80029b8:	6083      	str	r3, [r0, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80029ba:	60c3      	str	r3, [r0, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80029bc:	6103      	str	r3, [r0, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80029be:	220c      	movs	r2, #12
 80029c0:	6142      	str	r2, [r0, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	6183      	str	r3, [r0, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c4:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80029c6:	f005 fadf 	bl	8007f88 <HAL_UART_Init>
 80029ca:	b900      	cbnz	r0, 80029ce <MX_USART1_UART_Init+0x26>
}
 80029cc:	bd08      	pop	{r3, pc}
		Error_Handler();
 80029ce:	f7ff fec7 	bl	8002760 <Error_Handler>
 80029d2:	bf00      	nop
 80029d4:	2000110c 	.word	0x2000110c
 80029d8:	40013800 	.word	0x40013800

080029dc <MX_USART3_UART_Init>:
{
 80029dc:	b508      	push	{r3, lr}
	huart3.Instance = USART3;
 80029de:	480a      	ldr	r0, [pc, #40]	; (8002a08 <MX_USART3_UART_Init+0x2c>)
 80029e0:	4b0a      	ldr	r3, [pc, #40]	; (8002a0c <MX_USART3_UART_Init+0x30>)
 80029e2:	6003      	str	r3, [r0, #0]
	huart3.Init.BaudRate = 115200;
 80029e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80029e8:	6043      	str	r3, [r0, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ea:	2300      	movs	r3, #0
 80029ec:	6083      	str	r3, [r0, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80029ee:	60c3      	str	r3, [r0, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80029f0:	6103      	str	r3, [r0, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80029f2:	220c      	movs	r2, #12
 80029f4:	6142      	str	r2, [r0, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029f6:	6183      	str	r3, [r0, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f8:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80029fa:	f005 fac5 	bl	8007f88 <HAL_UART_Init>
 80029fe:	b900      	cbnz	r0, 8002a02 <MX_USART3_UART_Init+0x26>
}
 8002a00:	bd08      	pop	{r3, pc}
		Error_Handler();
 8002a02:	f7ff fead 	bl	8002760 <Error_Handler>
 8002a06:	bf00      	nop
 8002a08:	20001154 	.word	0x20001154
 8002a0c:	40004800 	.word	0x40004800

08002a10 <MX_RTC_Init>:
{
 8002a10:	b500      	push	{lr}
 8002a12:	b083      	sub	sp, #12
	RTC_TimeTypeDef sTime = {0};
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002a1a:	f88d 3006 	strb.w	r3, [sp, #6]
	RTC_DateTypeDef DateToUpdate = {0};
 8002a1e:	9300      	str	r3, [sp, #0]
	hrtc.Instance = RTC;
 8002a20:	4818      	ldr	r0, [pc, #96]	; (8002a84 <MX_RTC_Init+0x74>)
 8002a22:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <MX_RTC_Init+0x78>)
 8002a24:	6003      	str	r3, [r0, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002a26:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2a:	6043      	str	r3, [r0, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a30:	6083      	str	r3, [r0, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a32:	f004 fcfb 	bl	800742c <HAL_RTC_Init>
 8002a36:	b9f0      	cbnz	r0, 8002a76 <MX_RTC_Init+0x66>
	sTime.Hours = 0x0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f88d 3004 	strb.w	r3, [sp, #4]
	sTime.Minutes = 0x0;
 8002a3e:	f88d 3005 	strb.w	r3, [sp, #5]
	sTime.Seconds = 0x0;
 8002a42:	f88d 3006 	strb.w	r3, [sp, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a46:	2201      	movs	r2, #1
 8002a48:	a901      	add	r1, sp, #4
 8002a4a:	480e      	ldr	r0, [pc, #56]	; (8002a84 <MX_RTC_Init+0x74>)
 8002a4c:	f004 fc07 	bl	800725e <HAL_RTC_SetTime>
 8002a50:	b998      	cbnz	r0, 8002a7a <MX_RTC_Init+0x6a>
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a52:	2201      	movs	r2, #1
 8002a54:	f88d 2000 	strb.w	r2, [sp]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002a58:	f88d 2001 	strb.w	r2, [sp, #1]
	DateToUpdate.Date = 0x1;
 8002a5c:	f88d 2002 	strb.w	r2, [sp, #2]
	DateToUpdate.Year = 0x0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f88d 3003 	strb.w	r3, [sp, #3]
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002a66:	4669      	mov	r1, sp
 8002a68:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_RTC_Init+0x74>)
 8002a6a:	f004 fc59 	bl	8007320 <HAL_RTC_SetDate>
 8002a6e:	b930      	cbnz	r0, 8002a7e <MX_RTC_Init+0x6e>
}
 8002a70:	b003      	add	sp, #12
 8002a72:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002a76:	f7ff fe73 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002a7a:	f7ff fe71 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002a7e:	f7ff fe6f 	bl	8002760 <Error_Handler>
 8002a82:	bf00      	nop
 8002a84:	20001068 	.word	0x20001068
 8002a88:	40002800 	.word	0x40002800

08002a8c <SystemClock_Config>:
{
 8002a8c:	b500      	push	{lr}
 8002a8e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a90:	2228      	movs	r2, #40	; 0x28
 8002a92:	2100      	movs	r1, #0
 8002a94:	eb0d 0002 	add.w	r0, sp, r2
 8002a98:	f008 fc6e 	bl	800b378 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9305      	str	r3, [sp, #20]
 8002aa0:	9306      	str	r3, [sp, #24]
 8002aa2:	9307      	str	r3, [sp, #28]
 8002aa4:	9308      	str	r3, [sp, #32]
 8002aa6:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	9302      	str	r3, [sp, #8]
 8002aac:	9303      	str	r3, [sp, #12]
 8002aae:	9304      	str	r3, [sp, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ab8:	2210      	movs	r2, #16
 8002aba:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002abc:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002ac2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ac6:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac8:	a80a      	add	r0, sp, #40	; 0x28
 8002aca:	f003 fed7 	bl	800687c <HAL_RCC_OscConfig>
 8002ace:	b9e8      	cbnz	r0, 8002b0c <SystemClock_Config+0x80>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae0:	9208      	str	r2, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ae2:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	a805      	add	r0, sp, #20
 8002ae8:	f004 f8fa 	bl	8006ce0 <HAL_RCC_ClockConfig>
 8002aec:	b980      	cbnz	r0, 8002b10 <SystemClock_Config+0x84>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002aee:	2303      	movs	r3, #3
 8002af0:	9301      	str	r3, [sp, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af6:	9302      	str	r3, [sp, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002af8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002afc:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002afe:	a801      	add	r0, sp, #4
 8002b00:	f004 f9e8 	bl	8006ed4 <HAL_RCCEx_PeriphCLKConfig>
 8002b04:	b930      	cbnz	r0, 8002b14 <SystemClock_Config+0x88>
}
 8002b06:	b015      	add	sp, #84	; 0x54
 8002b08:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8002b0c:	f7ff fe28 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002b10:	f7ff fe26 	bl	8002760 <Error_Handler>
		Error_Handler();
 8002b14:	f7ff fe24 	bl	8002760 <Error_Handler>

08002b18 <main>:
{
 8002b18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002b1c:	b0b9      	sub	sp, #228	; 0xe4
	HAL_Init();
 8002b1e:	f002 f98f 	bl	8004e40 <HAL_Init>
	SystemClock_Config();
 8002b22:	f7ff ffb3 	bl	8002a8c <SystemClock_Config>
	MX_GPIO_Init();
 8002b26:	f7ff fc6d 	bl	8002404 <MX_GPIO_Init>
	MX_DMA_Init();
 8002b2a:	f7ff fcdb 	bl	80024e4 <MX_DMA_Init>
	MX_ADC1_Init();
 8002b2e:	f7ff fe19 	bl	8002764 <MX_ADC1_Init>
	MX_I2C1_Init();
 8002b32:	f7ff fe5b 	bl	80027ec <MX_I2C1_Init>
	MX_TIM3_Init();
 8002b36:	f7ff fe75 	bl	8002824 <MX_TIM3_Init>
	MX_TIM2_Init();
 8002b3a:	f7ff fee3 	bl	8002904 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8002b3e:	f7ff ff33 	bl	80029a8 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8002b42:	f7ff ff4b 	bl	80029dc <MX_USART3_UART_Init>
	MX_RTC_Init();
 8002b46:	f7ff ff63 	bl	8002a10 <MX_RTC_Init>
	HAL_Delay(1000);
 8002b4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b4e:	f002 f99b 	bl	8004e88 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002b52:	2203      	movs	r2, #3
 8002b54:	4984      	ldr	r1, [pc, #528]	; (8002d68 <main+0x250>)
 8002b56:	4885      	ldr	r0, [pc, #532]	; (8002d6c <main+0x254>)
 8002b58:	f002 facc 	bl	80050f4 <HAL_ADC_Start_DMA>
	OutputAddDigital(&outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,TIME_LAMPADA	,0);
 8002b5c:	4e84      	ldr	r6, [pc, #528]	; (8002d70 <main+0x258>)
 8002b5e:	4d85      	ldr	r5, [pc, #532]	; (8002d74 <main+0x25c>)
 8002b60:	2400      	movs	r4, #0
 8002b62:	9402      	str	r4, [sp, #8]
 8002b64:	232d      	movs	r3, #45	; 0x2d
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	4b83      	ldr	r3, [pc, #524]	; (8002d78 <main+0x260>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	4b83      	ldr	r3, [pc, #524]	; (8002d7c <main+0x264>)
 8002b6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b72:	4631      	mov	r1, r6
 8002b74:	4628      	mov	r0, r5
 8002b76:	f7ff fb8a 	bl	800228e <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 8002b7a:	4f81      	ldr	r7, [pc, #516]	; (8002d80 <main+0x268>)
 8002b7c:	9402      	str	r4, [sp, #8]
 8002b7e:	9401      	str	r4, [sp, #4]
 8002b80:	9400      	str	r4, [sp, #0]
 8002b82:	463b      	mov	r3, r7
 8002b84:	2208      	movs	r2, #8
 8002b86:	f106 0118 	add.w	r1, r6, #24
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f7ff fb7f 	bl	800228e <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002b90:	9402      	str	r4, [sp, #8]
 8002b92:	9401      	str	r4, [sp, #4]
 8002b94:	9400      	str	r4, [sp, #0]
 8002b96:	463b      	mov	r3, r7
 8002b98:	2210      	movs	r2, #16
 8002b9a:	f106 0160 	add.w	r1, r6, #96	; 0x60
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f7ff fb75 	bl	800228e <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 8002ba4:	9402      	str	r4, [sp, #8]
 8002ba6:	9401      	str	r4, [sp, #4]
 8002ba8:	9400      	str	r4, [sp, #0]
 8002baa:	463b      	mov	r3, r7
 8002bac:	2220      	movs	r2, #32
 8002bae:	f106 0148 	add.w	r1, r6, #72	; 0x48
 8002bb2:	4628      	mov	r0, r5
 8002bb4:	f7ff fb6b 	bl	800228e <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 8002bb8:	9402      	str	r4, [sp, #8]
 8002bba:	9401      	str	r4, [sp, #4]
 8002bbc:	9400      	str	r4, [sp, #0]
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7ff fb61 	bl	800228e <OutputAddDigital>
	OutputAddPID	(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002bcc:	4f6d      	ldr	r7, [pc, #436]	; (8002d84 <main+0x26c>)
 8002bce:	9708      	str	r7, [sp, #32]
 8002bd0:	f44f 7916 	mov.w	r9, #600	; 0x258
 8002bd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8002bd8:	f04f 0803 	mov.w	r8, #3
 8002bdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8002be0:	a35d      	add	r3, pc, #372	; (adr r3, 8002d58 <main+0x240>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002bea:	a25d      	add	r2, pc, #372	; (adr r2, 8002d60 <main+0x248>)
 8002bec:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002bf0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002bf4:	f04f 0a00 	mov.w	sl, #0
 8002bf8:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8002d88 <main+0x270>
 8002bfc:	e9cd ab00 	strd	sl, fp, [sp]
 8002c00:	230c      	movs	r3, #12
 8002c02:	4a62      	ldr	r2, [pc, #392]	; (8002d8c <main+0x274>)
 8002c04:	f106 0178 	add.w	r1, r6, #120	; 0x78
 8002c08:	4628      	mov	r0, r5
 8002c0a:	f7ff fb85 	bl	8002318 <OutputAddPID>
	OutputAddPID	(&outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002c0e:	9708      	str	r7, [sp, #32]
 8002c10:	f8cd 901c 	str.w	r9, [sp, #28]
 8002c14:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c18:	a34f      	add	r3, pc, #316	; (adr r3, 8002d58 <main+0x240>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c22:	a24f      	add	r2, pc, #316	; (adr r2, 8002d60 <main+0x248>)
 8002c24:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002c28:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8002c2c:	e9cd ab00 	strd	sl, fp, [sp]
 8002c30:	2308      	movs	r3, #8
 8002c32:	4a56      	ldr	r2, [pc, #344]	; (8002d8c <main+0x274>)
 8002c34:	f106 01c0 	add.w	r1, r6, #192	; 0xc0
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f7ff fb6d 	bl	8002318 <OutputAddPID>
	osSemaphoreDef(BinSemUartTx);
 8002c3e:	9436      	str	r4, [sp, #216]	; 0xd8
 8002c40:	9437      	str	r4, [sp, #220]	; 0xdc
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002c42:	2101      	movs	r1, #1
 8002c44:	a836      	add	r0, sp, #216	; 0xd8
 8002c46:	f005 fed2 	bl	80089ee <osSemaphoreCreate>
 8002c4a:	4b51      	ldr	r3, [pc, #324]	; (8002d90 <main+0x278>)
 8002c4c:	6018      	str	r0, [r3, #0]
	osTimerDef(timer10ms, CBTimer10ms);
 8002c4e:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <main+0x27c>)
 8002c50:	9334      	str	r3, [sp, #208]	; 0xd0
 8002c52:	9435      	str	r4, [sp, #212]	; 0xd4
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002c54:	4622      	mov	r2, r4
 8002c56:	2101      	movs	r1, #1
 8002c58:	a834      	add	r0, sp, #208	; 0xd0
 8002c5a:	f005 fe13 	bl	8008884 <osTimerCreate>
 8002c5e:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002d98 <main+0x280>
 8002c62:	f8c8 0000 	str.w	r0, [r8]
	osTimerDef(timer1000ms, CBTimer1000ms);
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <main+0x284>)
 8002c68:	9332      	str	r3, [sp, #200]	; 0xc8
 8002c6a:	9433      	str	r4, [sp, #204]	; 0xcc
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	2101      	movs	r1, #1
 8002c70:	a832      	add	r0, sp, #200	; 0xc8
 8002c72:	f005 fe07 	bl	8008884 <osTimerCreate>
 8002c76:	4f4a      	ldr	r7, [pc, #296]	; (8002da0 <main+0x288>)
 8002c78:	6038      	str	r0, [r7, #0]
	osMessageQDef(FilaEeprom, 5, uint8_t);
 8002c7a:	4d4a      	ldr	r5, [pc, #296]	; (8002da4 <main+0x28c>)
 8002c7c:	ae2e      	add	r6, sp, #184	; 0xb8
 8002c7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c82:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002c86:	4621      	mov	r1, r4
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f005 fed4 	bl	8008a36 <osMessageCreate>
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <main+0x290>)
 8002c90:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 8002c92:	ae27      	add	r6, sp, #156	; 0x9c
 8002c94:	f105 0c10 	add.w	ip, r5, #16
 8002c98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002c9c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c9e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002ca2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	a827      	add	r0, sp, #156	; 0x9c
 8002caa:	f005 fda5 	bl	80087f8 <osThreadCreate>
 8002cae:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <main+0x294>)
 8002cb0:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002cb2:	ae20      	add	r6, sp, #128	; 0x80
 8002cb4:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
 8002cb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002cbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cbe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002cc2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	a820      	add	r0, sp, #128	; 0x80
 8002cca:	f005 fd95 	bl	80087f8 <osThreadCreate>
 8002cce:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8002db0 <main+0x298>
 8002cd2:	f8c9 0000 	str.w	r0, [r9]
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002cd6:	ae19      	add	r6, sp, #100	; 0x64
 8002cd8:	f105 0c48 	add.w	ip, r5, #72	; 0x48
 8002cdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002ce0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002ce2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002ce6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002cea:	4621      	mov	r1, r4
 8002cec:	a819      	add	r0, sp, #100	; 0x64
 8002cee:	f005 fd83 	bl	80087f8 <osThreadCreate>
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <main+0x29c>)
 8002cf4:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002cf6:	ae12      	add	r6, sp, #72	; 0x48
 8002cf8:	f105 0c64 	add.w	ip, r5, #100	; 0x64
 8002cfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002d00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d02:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002d06:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	a812      	add	r0, sp, #72	; 0x48
 8002d0e:	f005 fd73 	bl	80087f8 <osThreadCreate>
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <main+0x2a0>)
 8002d14:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002d16:	ae0b      	add	r6, sp, #44	; 0x2c
 8002d18:	3580      	adds	r5, #128	; 0x80
 8002d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002d1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002d22:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8002d26:	4621      	mov	r1, r4
 8002d28:	a80b      	add	r0, sp, #44	; 0x2c
 8002d2a:	f005 fd65 	bl	80087f8 <osThreadCreate>
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <main+0x2a4>)
 8002d30:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 8002d32:	f8d9 0000 	ldr.w	r0, [r9]
 8002d36:	f005 ff0a 	bl	8008b4e <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 8002d3a:	210a      	movs	r1, #10
 8002d3c:	f8d8 0000 	ldr.w	r0, [r8]
 8002d40:	f005 fdc2 	bl	80088c8 <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 8002d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f005 fdbd 	bl	80088c8 <osTimerStart>
	osKernelStart();
 8002d4e:	f005 fd4e 	bl	80087ee <osKernelStart>
	while (1)
 8002d52:	e7fe      	b.n	8002d52 <main+0x23a>
 8002d54:	f3af 8000 	nop.w
 8002d58:	33333333 	.word	0x33333333
 8002d5c:	3fd33333 	.word	0x3fd33333
 8002d60:	47ae147b 	.word	0x47ae147b
 8002d64:	3f847ae1 	.word	0x3f847ae1
 8002d68:	20000f0c 	.word	0x20000f0c
 8002d6c:	20000f18 	.word	0x20000f18
 8002d70:	200007e8 	.word	0x200007e8
 8002d74:	200011a0 	.word	0x200011a0
 8002d78:	08002539 	.word	0x08002539
 8002d7c:	40010800 	.word	0x40010800
 8002d80:	40010c00 	.word	0x40010c00
 8002d84:	0800239d 	.word	0x0800239d
 8002d88:	403e0000 	.word	0x403e0000
 8002d8c:	200010c4 	.word	0x200010c4
 8002d90:	200007d0 	.word	0x200007d0
 8002d94:	08002549 	.word	0x08002549
 8002d98:	200011d8 	.word	0x200011d8
 8002d9c:	08002645 	.word	0x08002645
 8002da0:	200011d4 	.word	0x200011d4
 8002da4:	0800c1b4 	.word	0x0800c1b4
 8002da8:	200007e0 	.word	0x200007e0
 8002dac:	200008f8 	.word	0x200008f8
 8002db0:	20000ba4 	.word	0x20000ba4
 8002db4:	20000b9c 	.word	0x20000b9c
 8002db8:	20000e48 	.word	0x20000e48
 8002dbc:	20000ba0 	.word	0x20000ba0

08002dc0 <Queue_is_full>:
        free(me);
    }
}

int  Queue_is_full  (Queue* const me) {
    return (me->head + 1) % QUEUE_SIZE == me->tail;
 8002dc0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <Queue_is_full+0x24>)
 8002dc6:	fb81 3102 	smull	r3, r1, r1, r2
 8002dca:	17d3      	asrs	r3, r2, #31
 8002dcc:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002dd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002dd4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002dd8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 8002dda:	4283      	cmp	r3, r0
 8002ddc:	bf14      	ite	ne
 8002dde:	2000      	movne	r0, #0
 8002de0:	2001      	moveq	r0, #1
 8002de2:	4770      	bx	lr
 8002de4:	66666667 	.word	0x66666667

08002de8 <Queue_is_empty>:

int  Queue_is_empty (Queue* const me) {
    return (me->head == me->tail);
 8002de8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002dea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
 8002dec:	4282      	cmp	r2, r0
 8002dee:	bf14      	ite	ne
 8002df0:	2000      	movne	r0, #0
 8002df2:	2001      	moveq	r0, #1
 8002df4:	4770      	bx	lr

08002df6 <Queue_get_size>:

int  Queue_get_size (Queue* const me) {
    return me->size;
}
 8002df6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002df8:	4770      	bx	lr
	...

08002dfc <Queue_insert>:

void Queue_insert   (Queue* const me, int k) {
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	460d      	mov	r5, r1
    if (!me->is_full(me)) {
 8002e02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e04:	4798      	blx	r3
 8002e06:	b988      	cbnz	r0, 8002e2c <Queue_insert+0x30>
        me->buffer[me->head] = k;
 8002e08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e0a:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
        me->head = (me->head + 1) % QUEUE_SIZE;
 8002e0e:	3201      	adds	r2, #1
 8002e10:	4907      	ldr	r1, [pc, #28]	; (8002e30 <Queue_insert+0x34>)
 8002e12:	fb81 3102 	smull	r3, r1, r1, r2
 8002e16:	17d3      	asrs	r3, r2, #31
 8002e18:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002e1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e20:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002e24:	62a3      	str	r3, [r4, #40]	; 0x28
        ++me->size;
 8002e26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e28:	3301      	adds	r3, #1
 8002e2a:	6323      	str	r3, [r4, #48]	; 0x30
    }
}
 8002e2c:	bd38      	pop	{r3, r4, r5, pc}
 8002e2e:	bf00      	nop
 8002e30:	66666667 	.word	0x66666667

08002e34 <Queue_remove>:

int  Queue_remove   (Queue* const me) {
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4604      	mov	r4, r0
    int value = -9999; // sentinel value
    if (!me->is_empty(me)) {
 8002e38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e3a:	4798      	blx	r3
 8002e3c:	b990      	cbnz	r0, 8002e64 <Queue_remove+0x30>
        value = me->buffer[me->tail];
 8002e3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e40:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
        me->tail = (me->tail + 1) % QUEUE_SIZE;
 8002e44:	3201      	adds	r2, #1
 8002e46:	4908      	ldr	r1, [pc, #32]	; (8002e68 <Queue_remove+0x34>)
 8002e48:	fb81 3102 	smull	r3, r1, r1, r2
 8002e4c:	17d3      	asrs	r3, r2, #31
 8002e4e:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e56:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 8002e5a:	62e3      	str	r3, [r4, #44]	; 0x2c
        --me->size;
 8002e5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	6323      	str	r3, [r4, #48]	; 0x30
    }
    return value;
}
 8002e62:	bd10      	pop	{r4, pc}
    int value = -9999; // sentinel value
 8002e64:	4801      	ldr	r0, [pc, #4]	; (8002e6c <Queue_remove+0x38>)
    return value;
 8002e66:	e7fc      	b.n	8002e62 <Queue_remove+0x2e>
 8002e68:	66666667 	.word	0x66666667
 8002e6c:	ffffd8f1 	.word	0xffffd8f1

08002e70 <Queue_init>:
               ) {
 8002e70:	b410      	push	{r4}
    me->head  = 0;
 8002e72:	2400      	movs	r4, #0
 8002e74:	6284      	str	r4, [r0, #40]	; 0x28
    me->tail  = 0;
 8002e76:	62c4      	str	r4, [r0, #44]	; 0x2c
    me->size  = 0;
 8002e78:	6304      	str	r4, [r0, #48]	; 0x30
    me->is_full    = pFn_is_full;
 8002e7a:	6341      	str	r1, [r0, #52]	; 0x34
    me->is_empty   = pFn_is_empty;
 8002e7c:	6382      	str	r2, [r0, #56]	; 0x38
    me->get_size   = pFn_get_size;
 8002e7e:	63c3      	str	r3, [r0, #60]	; 0x3c
    me->insert     = pFn_insert;
 8002e80:	9b01      	ldr	r3, [sp, #4]
 8002e82:	6403      	str	r3, [r0, #64]	; 0x40
    me->remove     = pFn_remove;
 8002e84:	9b02      	ldr	r3, [sp, #8]
 8002e86:	6443      	str	r3, [r0, #68]	; 0x44
}
 8002e88:	bc10      	pop	{r4}
 8002e8a:	4770      	bx	lr

08002e8c <Queue_create>:
Queue* Queue_create() {
 8002e8c:	b510      	push	{r4, lr}
 8002e8e:	b082      	sub	sp, #8
    Queue* me = (Queue*) malloc(sizeof(Queue));
 8002e90:	2048      	movs	r0, #72	; 0x48
 8002e92:	f007 ff81 	bl	800ad98 <malloc>
    if (me == NULL)
 8002e96:	4604      	mov	r4, r0
 8002e98:	b140      	cbz	r0, 8002eac <Queue_create+0x20>
    Queue_init(me,
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <Queue_create+0x28>)
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <Queue_create+0x2c>)
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <Queue_create+0x30>)
 8002ea4:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <Queue_create+0x34>)
 8002ea6:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <Queue_create+0x38>)
 8002ea8:	f7ff ffe2 	bl	8002e70 <Queue_init>
}
 8002eac:	4620      	mov	r0, r4
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	bf00      	nop
 8002eb4:	08002e35 	.word	0x08002e35
 8002eb8:	08002dfd 	.word	0x08002dfd
 8002ebc:	08002df7 	.word	0x08002df7
 8002ec0:	08002de9 	.word	0x08002de9
 8002ec4:	08002dc1 	.word	0x08002dc1

08002ec8 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002ec8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 8002ecc:	4604      	mov	r4, r0
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002ece:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002ed0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002ed4:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002ed8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002ee2:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
 8002ee6:	4642      	mov	r2, r8
 8002ee8:	464b      	mov	r3, r9
 8002eea:	4630      	mov	r0, r6
 8002eec:	4639      	mov	r1, r7
 8002eee:	f7fd fd83 	bl	80009f8 <__aeabi_dcmpgt>
 8002ef2:	b118      	cbz	r0, 8002efc <PID_Init+0x34>
	{
		uPID->OutputSum = uPID->OutMax;
 8002ef4:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002ef8:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
	else if (uPID->OutputSum < uPID->OutMin)
 8002efc:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 8002f00:	4642      	mov	r2, r8
 8002f02:	464b      	mov	r3, r9
 8002f04:	4630      	mov	r0, r6
 8002f06:	4639      	mov	r1, r7
 8002f08:	f7fd fd58 	bl	80009bc <__aeabi_dcmplt>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d0f3      	beq.n	8002ef8 <PID_Init+0x30>
		uPID->OutputSum = uPID->OutMin;
 8002f10:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
}
 8002f14:	e7f0      	b.n	8002ef8 <PID_Init+0x30>

08002f16 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	4604      	mov	r4, r0
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002f1e:	7840      	ldrb	r0, [r0, #1]
 8002f20:	b910      	cbnz	r0, 8002f28 <PID_Compute+0x12>
	else
	{
		return _FALSE;
	}
	
}
 8002f22:	b009      	add	sp, #36	; 0x24
 8002f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8002f28:	f001 ffa8 	bl	8004e7c <HAL_GetTick>
 8002f2c:	4605      	mov	r5, r0
	timeChange = (now - uPID->LastTime);
 8002f2e:	6863      	ldr	r3, [r4, #4]
 8002f30:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 8002f32:	68a2      	ldr	r2, [r4, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f200 8096 	bhi.w	8003066 <PID_Compute+0x150>
		input   = *uPID->MyInput;
 8002f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f3c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002f40:	e9cd 6700 	strd	r6, r7, [sp]
		error   = *uPID->MySetpoint - input;
 8002f44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f46:	4632      	mov	r2, r6
 8002f48:	463b      	mov	r3, r7
 8002f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f4e:	f7fd f90b 	bl	8000168 <__aeabi_dsub>
 8002f52:	4680      	mov	r8, r0
 8002f54:	4689      	mov	r9, r1
 8002f56:	e9cd 8904 	strd	r8, r9, [sp, #16]
		dInput  = (input - uPID->LastInput);
 8002f5a:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
 8002f5e:	4630      	mov	r0, r6
 8002f60:	4639      	mov	r1, r7
 8002f62:	f7fd f901 	bl	8000168 <__aeabi_dsub>
 8002f66:	4682      	mov	sl, r0
 8002f68:	468b      	mov	fp, r1
 8002f6a:	e9cd ab02 	strd	sl, fp, [sp, #8]
		uPID->OutputSum     += (uPID->Ki * error);
 8002f6e:	4642      	mov	r2, r8
 8002f70:	464b      	mov	r3, r9
 8002f72:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8002f76:	f7fd faaf 	bl	80004d8 <__aeabi_dmul>
 8002f7a:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 8002f7e:	f7fd f8f5 	bl	800016c <__adddf3>
 8002f82:	4606      	mov	r6, r0
 8002f84:	460f      	mov	r7, r1
 8002f86:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8002f8a:	f894 8000 	ldrb.w	r8, [r4]
 8002f8e:	f1b8 0f00 	cmp.w	r8, #0
 8002f92:	d10d      	bne.n	8002fb0 <PID_Compute+0x9a>
			uPID->OutputSum -= uPID->Kp * dInput;
 8002f94:	4652      	mov	r2, sl
 8002f96:	465b      	mov	r3, fp
 8002f98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002f9c:	f7fd fa9c 	bl	80004d8 <__aeabi_dmul>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	4639      	mov	r1, r7
 8002fa8:	f7fd f8de 	bl	8000168 <__aeabi_dsub>
 8002fac:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 8002fb0:	e9d4 6714 	ldrd	r6, r7, [r4, #80]	; 0x50
 8002fb4:	e9d4 ab1a 	ldrd	sl, fp, [r4, #104]	; 0x68
 8002fb8:	4652      	mov	r2, sl
 8002fba:	465b      	mov	r3, fp
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	f7fd fd1a 	bl	80009f8 <__aeabi_dcmpgt>
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d03c      	beq.n	8003042 <PID_Compute+0x12c>
			uPID->OutputSum = uPID->OutMax;
 8002fc8:	e9c4 ab14 	strd	sl, fp, [r4, #80]	; 0x50
		if (uPID->POnE)
 8002fcc:	f1b8 0f00 	cmp.w	r8, #0
 8002fd0:	d046      	beq.n	8003060 <PID_Compute+0x14a>
			output = uPID->Kp * error;
 8002fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002fd6:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002fda:	f7fd fa7d 	bl	80004d8 <__aeabi_dmul>
 8002fde:	4606      	mov	r6, r0
 8002fe0:	460f      	mov	r7, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002fe2:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 8002fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002fea:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8002fee:	f7fd fa73 	bl	80004d8 <__aeabi_dmul>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	4649      	mov	r1, r9
 8002ffa:	f7fd f8b5 	bl	8000168 <__aeabi_dsub>
 8002ffe:	4632      	mov	r2, r6
 8003000:	463b      	mov	r3, r7
 8003002:	f7fd f8b3 	bl	800016c <__adddf3>
 8003006:	4606      	mov	r6, r0
 8003008:	460f      	mov	r7, r1
		if (output > uPID->OutMax)
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4650      	mov	r0, sl
 8003010:	4659      	mov	r1, fp
 8003012:	f7fd fcd3 	bl	80009bc <__aeabi_dcmplt>
 8003016:	b950      	cbnz	r0, 800302e <PID_Compute+0x118>
		else if (output < uPID->OutMin)
 8003018:	e9d4 ab18 	ldrd	sl, fp, [r4, #96]	; 0x60
 800301c:	4632      	mov	r2, r6
 800301e:	463b      	mov	r3, r7
 8003020:	4650      	mov	r0, sl
 8003022:	4659      	mov	r1, fp
 8003024:	f7fd fce8 	bl	80009f8 <__aeabi_dcmpgt>
 8003028:	b908      	cbnz	r0, 800302e <PID_Compute+0x118>
		output += uPID->OutputSum - uPID->Kd * dInput;
 800302a:	46b2      	mov	sl, r6
 800302c:	46bb      	mov	fp, r7
		*uPID->MyOutput = output;
 800302e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003030:	e9c3 ab00 	strd	sl, fp, [r3]
		uPID->LastInput = input;
 8003034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003038:	e9c4 2316 	strd	r2, r3, [r4, #88]	; 0x58
		uPID->LastTime = now;
 800303c:	6065      	str	r5, [r4, #4]
		return _TRUE;
 800303e:	2001      	movs	r0, #1
 8003040:	e76f      	b.n	8002f22 <PID_Compute+0xc>
		else if (uPID->OutputSum < uPID->OutMin)
 8003042:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8003046:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800304a:	4630      	mov	r0, r6
 800304c:	4639      	mov	r1, r7
 800304e:	f7fd fcb5 	bl	80009bc <__aeabi_dcmplt>
 8003052:	2800      	cmp	r0, #0
 8003054:	d0ba      	beq.n	8002fcc <PID_Compute+0xb6>
			uPID->OutputSum = uPID->OutMin;
 8003056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800305a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 800305e:	e7b5      	b.n	8002fcc <PID_Compute+0xb6>
			output = 0;
 8003060:	2600      	movs	r6, #0
 8003062:	2700      	movs	r7, #0
 8003064:	e7bd      	b.n	8002fe2 <PID_Compute+0xcc>
		return _FALSE;
 8003066:	2000      	movs	r0, #0
 8003068:	e75b      	b.n	8002f22 <PID_Compute+0xc>

0800306a <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800306a:	b538      	push	{r3, r4, r5, lr}
 800306c:	4604      	mov	r4, r0
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800306e:	2901      	cmp	r1, #1
 8003070:	bf0c      	ite	eq
 8003072:	2501      	moveq	r5, #1
 8003074:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003076:	d001      	beq.n	800307c <PID_SetMode+0x12>
	{
		PID_Init(uPID);
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003078:	7065      	strb	r5, [r4, #1]
	
}
 800307a:	bd38      	pop	{r3, r4, r5, pc}
	if (newAuto && !uPID->InAuto)
 800307c:	7843      	ldrb	r3, [r0, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1fa      	bne.n	8003078 <PID_SetMode+0xe>
		PID_Init(uPID);
 8003082:	f7ff ff21 	bl	8002ec8 <PID_Init>
 8003086:	e7f7      	b.n	8003078 <PID_SetMode+0xe>

08003088 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	4682      	mov	sl, r0
 800308e:	4614      	mov	r4, r2
 8003090:	461d      	mov	r5, r3
 8003092:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003096:	4632      	mov	r2, r6
 8003098:	463b      	mov	r3, r7
 800309a:	4620      	mov	r0, r4
 800309c:	4629      	mov	r1, r5
 800309e:	f7fd fca1 	bl	80009e4 <__aeabi_dcmpge>
 80030a2:	bb00      	cbnz	r0, 80030e6 <PID_SetOutputLimits+0x5e>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80030a4:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 80030a8:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80030ac:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80030b0:	b1cb      	cbz	r3, 80030e6 <PID_SetOutputLimits+0x5e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80030b2:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 80030b6:	e9db 8900 	ldrd	r8, r9, [fp]
 80030ba:	4632      	mov	r2, r6
 80030bc:	463b      	mov	r3, r7
 80030be:	4640      	mov	r0, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	f7fd fc99 	bl	80009f8 <__aeabi_dcmpgt>
 80030c6:	b180      	cbz	r0, 80030ea <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 80030c8:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80030cc:	e9da 4514 	ldrd	r4, r5, [sl, #80]	; 0x50
 80030d0:	e9da 671a 	ldrd	r6, r7, [sl, #104]	; 0x68
 80030d4:	4632      	mov	r2, r6
 80030d6:	463b      	mov	r3, r7
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80030e0:	b170      	cbz	r0, 8003100 <PID_SetOutputLimits+0x78>
		{
			uPID->OutputSum = uPID->OutMax;
 80030e2:	e9ca 6714 	strd	r6, r7, [sl, #80]	; 0x50
		}
		else { }
		
	}
	
}
 80030e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if (*uPID->MyOutput < uPID->OutMin)
 80030ea:	4622      	mov	r2, r4
 80030ec:	462b      	mov	r3, r5
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f7fd fc63 	bl	80009bc <__aeabi_dcmplt>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d0e8      	beq.n	80030cc <PID_SetOutputLimits+0x44>
			*uPID->MyOutput = uPID->OutMin;
 80030fa:	e9cb 4500 	strd	r4, r5, [fp]
 80030fe:	e7e5      	b.n	80030cc <PID_SetOutputLimits+0x44>
		else if (uPID->OutputSum < uPID->OutMin)
 8003100:	e9da 6718 	ldrd	r6, r7, [sl, #96]	; 0x60
 8003104:	4632      	mov	r2, r6
 8003106:	463b      	mov	r3, r7
 8003108:	4620      	mov	r0, r4
 800310a:	4629      	mov	r1, r5
 800310c:	f7fd fc56 	bl	80009bc <__aeabi_dcmplt>
 8003110:	2800      	cmp	r0, #0
 8003112:	d0e8      	beq.n	80030e6 <PID_SetOutputLimits+0x5e>
			uPID->OutputSum = uPID->OutMin;
 8003114:	e9ca 6714 	strd	r6, r7, [sl, #80]	; 0x50
		else { }
 8003118:	e7e5      	b.n	80030e6 <PID_SetOutputLimits+0x5e>
	...

0800311c <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800311c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003120:	4682      	mov	sl, r0
 8003122:	4614      	mov	r4, r2
 8003124:	461d      	mov	r5, r3
 8003126:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800312a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800312e:	2200      	movs	r2, #0
 8003130:	2300      	movs	r3, #0
 8003132:	4620      	mov	r0, r4
 8003134:	4629      	mov	r1, r5
 8003136:	f7fd fc41 	bl	80009bc <__aeabi_dcmplt>
 800313a:	2800      	cmp	r0, #0
 800313c:	d146      	bne.n	80031cc <PID_SetTunings2+0xb0>
 800313e:	2200      	movs	r2, #0
 8003140:	2300      	movs	r3, #0
 8003142:	4630      	mov	r0, r6
 8003144:	4639      	mov	r1, r7
 8003146:	f7fd fc39 	bl	80009bc <__aeabi_dcmplt>
 800314a:	2800      	cmp	r0, #0
 800314c:	d13e      	bne.n	80031cc <PID_SetTunings2+0xb0>
 800314e:	2200      	movs	r2, #0
 8003150:	2300      	movs	r3, #0
 8003152:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003156:	f7fd fc31 	bl	80009bc <__aeabi_dcmplt>
 800315a:	2800      	cmp	r0, #0
 800315c:	d136      	bne.n	80031cc <PID_SetTunings2+0xb0>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 800315e:	f88a 8002 	strb.w	r8, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003162:	f1b8 0f01 	cmp.w	r8, #1
 8003166:	bf14      	ite	ne
 8003168:	f04f 0800 	movne.w	r8, #0
 800316c:	f04f 0801 	moveq.w	r8, #1
 8003170:	f88a 8000 	strb.w	r8, [sl]

	uPID->DispKp = Kp;
 8003174:	e9ca 4504 	strd	r4, r5, [sl, #16]
	uPID->DispKi = Ki;
 8003178:	e9ca 6706 	strd	r6, r7, [sl, #24]
	uPID->DispKd = Kd;
 800317c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003180:	e9ca 2308 	strd	r2, r3, [sl, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003184:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003188:	f7fd f92c 	bl	80003e4 <__aeabi_ui2d>
 800318c:	2200      	movs	r2, #0
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <PID_SetTunings2+0xe8>)
 8003190:	f7fd facc 	bl	800072c <__aeabi_ddiv>
 8003194:	4680      	mov	r8, r0
 8003196:	4689      	mov	r9, r1
	
	uPID->Kp = Kp;
 8003198:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4630      	mov	r0, r6
 80031a2:	4639      	mov	r1, r7
 80031a4:	f7fd f998 	bl	80004d8 <__aeabi_dmul>
 80031a8:	4606      	mov	r6, r0
 80031aa:	460f      	mov	r7, r1
 80031ac:	e9ca 670c 	strd	r6, r7, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80031b0:	4642      	mov	r2, r8
 80031b2:	464b      	mov	r3, r9
 80031b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80031b8:	f7fd fab8 	bl	800072c <__aeabi_ddiv>
 80031bc:	4680      	mov	r8, r0
 80031be:	4689      	mov	r9, r1
 80031c0:	e9ca 890e 	strd	r8, r9, [sl, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80031c4:	f89a 3003 	ldrb.w	r3, [sl, #3]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d001      	beq.n	80031d0 <PID_SetTunings2+0xb4>
		uPID->Ki = (0 - uPID->Ki);
		uPID->Kd = (0 - uPID->Kd);
		
	}
	
}
 80031cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uPID->Kp = (0 - uPID->Kp);
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	2000      	movs	r0, #0
 80031d6:	2100      	movs	r1, #0
 80031d8:	f7fc ffc6 	bl	8000168 <__aeabi_dsub>
 80031dc:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80031e0:	4632      	mov	r2, r6
 80031e2:	463b      	mov	r3, r7
 80031e4:	2000      	movs	r0, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	f7fc ffbe 	bl	8000168 <__aeabi_dsub>
 80031ec:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80031f0:	4642      	mov	r2, r8
 80031f2:	464b      	mov	r3, r9
 80031f4:	2000      	movs	r0, #0
 80031f6:	2100      	movs	r1, #0
 80031f8:	f7fc ffb6 	bl	8000168 <__aeabi_dsub>
 80031fc:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
 8003200:	e7e4      	b.n	80031cc <PID_SetTunings2+0xb0>
 8003202:	bf00      	nop
 8003204:	408f4000 	.word	0x408f4000

08003208 <PID_SetTunings>:
{
 8003208:	e92d 4800 	stmdb	sp!, {fp, lr}
 800320c:	b086      	sub	sp, #24
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800320e:	7881      	ldrb	r1, [r0, #2]
 8003210:	9104      	str	r1, [sp, #16]
 8003212:	e9dd bc0a 	ldrd	fp, ip, [sp, #40]	; 0x28
 8003216:	e9cd bc02 	strd	fp, ip, [sp, #8]
 800321a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800321e:	e9cd bc00 	strd	fp, ip, [sp]
 8003222:	f7ff ff7b 	bl	800311c <PID_SetTunings2>
}
 8003226:	b006      	add	sp, #24
 8003228:	e8bd 8800 	ldmia.w	sp!, {fp, pc}

0800322c <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	460d      	mov	r5, r1
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003232:	7843      	ldrb	r3, [r0, #1]
 8003234:	b1d3      	cbz	r3, 800326c <PID_SetControllerDirection+0x40>
 8003236:	78c3      	ldrb	r3, [r0, #3]
 8003238:	428b      	cmp	r3, r1
 800323a:	d017      	beq.n	800326c <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800323c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8003240:	2000      	movs	r0, #0
 8003242:	2100      	movs	r1, #0
 8003244:	f7fc ff90 	bl	8000168 <__aeabi_dsub>
 8003248:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800324c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003250:	2000      	movs	r0, #0
 8003252:	2100      	movs	r1, #0
 8003254:	f7fc ff88 	bl	8000168 <__aeabi_dsub>
 8003258:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800325c:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8003260:	2000      	movs	r0, #0
 8003262:	2100      	movs	r1, #0
 8003264:	f7fc ff80 	bl	8000168 <__aeabi_dsub>
 8003268:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 800326c:	70e5      	strb	r5, [r4, #3]
	
}
 800326e:	bd38      	pop	{r3, r4, r5, pc}

08003270 <PID>:
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	4604      	mov	r4, r0
	uPID->MyOutput   = Output;
 8003276:	6442      	str	r2, [r0, #68]	; 0x44
	uPID->MyInput    = Input;
 8003278:	6401      	str	r1, [r0, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800327a:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800327c:	2300      	movs	r3, #0
 800327e:	7043      	strb	r3, [r0, #1]
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003280:	a313      	add	r3, pc, #76	; (adr r3, 80032d0 <PID+0x60>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	e9cd 2300 	strd	r2, r3, [sp]
 800328a:	2200      	movs	r2, #0
 800328c:	2300      	movs	r3, #0
 800328e:	f7ff fefb 	bl	8003088 <PID_SetOutputLimits>
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003292:	2364      	movs	r3, #100	; 0x64
 8003294:	60a3      	str	r3, [r4, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003296:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800329a:	4620      	mov	r0, r4
 800329c:	f7ff ffc6 	bl	800322c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80032a0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80032a4:	9304      	str	r3, [sp, #16]
 80032a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80032aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80032b2:	e9cd 2300 	strd	r2, r3, [sp]
 80032b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032ba:	4620      	mov	r0, r4
 80032bc:	f7ff ff2e 	bl	800311c <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80032c0:	f001 fddc 	bl	8004e7c <HAL_GetTick>
 80032c4:	68a3      	ldr	r3, [r4, #8]
 80032c6:	1ac0      	subs	r0, r0, r3
 80032c8:	6060      	str	r0, [r4, #4]
}
 80032ca:	b006      	add	sp, #24
 80032cc:	bd10      	pop	{r4, pc}
 80032ce:	bf00      	nop
 80032d0:	00000000 	.word	0x00000000
 80032d4:	406fe000 	.word	0x406fe000

080032d8 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80032da:	1e0d      	subs	r5, r1, #0
 80032dc:	dd21      	ble.n	8003322 <PID_SetSampleTime+0x4a>
 80032de:	4604      	mov	r4, r0
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80032e0:	4628      	mov	r0, r5
 80032e2:	f7fd f88f 	bl	8000404 <__aeabi_i2d>
 80032e6:	4606      	mov	r6, r0
 80032e8:	460f      	mov	r7, r1
 80032ea:	68a0      	ldr	r0, [r4, #8]
 80032ec:	f7fd f87a 	bl	80003e4 <__aeabi_ui2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4630      	mov	r0, r6
 80032f6:	4639      	mov	r1, r7
 80032f8:	f7fd fa18 	bl	800072c <__aeabi_ddiv>
 80032fc:	4606      	mov	r6, r0
 80032fe:	460f      	mov	r7, r1
		
		uPID->Ki *= ratio;
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003308:	f7fd f8e6 	bl	80004d8 <__aeabi_dmul>
 800330c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 8003310:	4632      	mov	r2, r6
 8003312:	463b      	mov	r3, r7
 8003314:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 8003318:	f7fd fa08 	bl	800072c <__aeabi_ddiv>
 800331c:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003320:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8003322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b500      	push	{lr}
 8003326:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_MspInit+0x4c>)
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	619a      	str	r2, [r3, #24]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	f002 0201 	and.w	r2, r2, #1
 8003338:	9200      	str	r2, [sp, #0]
 800333a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003342:	61da      	str	r2, [r3, #28]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	210f      	movs	r1, #15
 8003352:	f06f 0001 	mvn.w	r0, #1
 8003356:	f002 f827 	bl	80053a8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800335a:	4a06      	ldr	r2, [pc, #24]	; (8003374 <HAL_MspInit+0x50>)
 800335c:	6853      	ldr	r3, [r2, #4]
 800335e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003362:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003366:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003368:	b003      	add	sp, #12
 800336a:	f85d fb04 	ldr.w	pc, [sp], #4
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40010000 	.word	0x40010000

08003378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003378:	b510      	push	{r4, lr}
 800337a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	2300      	movs	r3, #0
 800337e:	9302      	str	r3, [sp, #8]
 8003380:	9303      	str	r3, [sp, #12]
 8003382:	9304      	str	r3, [sp, #16]
 8003384:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <HAL_ADC_MspInit+0x88>)
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800338e:	b006      	add	sp, #24
 8003390:	bd10      	pop	{r4, pc}
 8003392:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003394:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	619a      	str	r2, [r3, #24]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80033a6:	9200      	str	r2, [sp, #0]
 80033a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	f042 0204 	orr.w	r2, r2, #4
 80033b0:	619a      	str	r2, [r3, #24]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033bc:	2303      	movs	r3, #3
 80033be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	a902      	add	r1, sp, #8
 80033c4:	480f      	ldr	r0, [pc, #60]	; (8003404 <HAL_ADC_MspInit+0x8c>)
 80033c6:	f002 fa13 	bl	80057f0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80033ca:	480f      	ldr	r0, [pc, #60]	; (8003408 <HAL_ADC_MspInit+0x90>)
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_ADC_MspInit+0x94>)
 80033ce:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033d0:	2300      	movs	r3, #0
 80033d2:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d4:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e4:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033e6:	2220      	movs	r2, #32
 80033e8:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033ea:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033ec:	f002 f84a 	bl	8005484 <HAL_DMA_Init>
 80033f0:	b918      	cbnz	r0, 80033fa <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_ADC_MspInit+0x90>)
 80033f4:	6223      	str	r3, [r4, #32]
 80033f6:	625c      	str	r4, [r3, #36]	; 0x24
}
 80033f8:	e7c9      	b.n	800338e <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80033fa:	f7ff f9b1 	bl	8002760 <Error_Handler>
 80033fe:	e7f8      	b.n	80033f2 <HAL_ADC_MspInit+0x7a>
 8003400:	40012400 	.word	0x40012400
 8003404:	40010800 	.word	0x40010800
 8003408:	20000f48 	.word	0x20000f48
 800340c:	40020008 	.word	0x40020008

08003410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003410:	b510      	push	{r4, lr}
 8003412:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	2300      	movs	r3, #0
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	9303      	str	r3, [sp, #12]
 800341a:	9304      	str	r3, [sp, #16]
 800341c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800341e:	6802      	ldr	r2, [r0, #0]
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <HAL_I2C_MspInit+0x68>)
 8003422:	429a      	cmp	r2, r3
 8003424:	d001      	beq.n	800342a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003426:	b006      	add	sp, #24
 8003428:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	4c14      	ldr	r4, [pc, #80]	; (800347c <HAL_I2C_MspInit+0x6c>)
 800342c:	69a3      	ldr	r3, [r4, #24]
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	61a3      	str	r3, [r4, #24]
 8003434:	69a3      	ldr	r3, [r4, #24]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800343e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003442:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003444:	2312      	movs	r3, #18
 8003446:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344c:	a902      	add	r1, sp, #8
 800344e:	480c      	ldr	r0, [pc, #48]	; (8003480 <HAL_I2C_MspInit+0x70>)
 8003450:	f002 f9ce 	bl	80057f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <HAL_I2C_MspInit+0x74>)
 8003456:	6853      	ldr	r3, [r2, #4]
 8003458:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003462:	69e3      	ldr	r3, [r4, #28]
 8003464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003468:	61e3      	str	r3, [r4, #28]
 800346a:	69e3      	ldr	r3, [r4, #28]
 800346c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	9b01      	ldr	r3, [sp, #4]
}
 8003474:	e7d7      	b.n	8003426 <HAL_I2C_MspInit+0x16>
 8003476:	bf00      	nop
 8003478:	40005400 	.word	0x40005400
 800347c:	40021000 	.word	0x40021000
 8003480:	40010c00 	.word	0x40010c00
 8003484:	40010000 	.word	0x40010000

08003488 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8003488:	6802      	ldr	r2, [r0, #0]
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <HAL_RTC_MspInit+0x34>)
 800348c:	429a      	cmp	r2, r3
 800348e:	d000      	beq.n	8003492 <HAL_RTC_MspInit+0xa>
 8003490:	4770      	bx	lr
{
 8003492:	b500      	push	{lr}
 8003494:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003496:	f003 f9d5 	bl	8006844 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800349a:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <HAL_RTC_MspInit+0x38>)
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80034a2:	61da      	str	r2, [r3, #28]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RTC_MspInit+0x3c>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80034b6:	b003      	add	sp, #12
 80034b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80034bc:	40002800 	.word	0x40002800
 80034c0:	40021000 	.word	0x40021000
 80034c4:	42420000 	.word	0x42420000

080034c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034c8:	b500      	push	{lr}
 80034ca:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80034cc:	6803      	ldr	r3, [r0, #0]
 80034ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d2:	d005      	beq.n	80034e0 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIM_Base_MspInit+0x58>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00e      	beq.n	80034f8 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034da:	b003      	add	sp, #12
 80034dc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	f042 0201 	orr.w	r2, r2, #1
 80034ea:	61da      	str	r2, [r3, #28]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	9b00      	ldr	r3, [sp, #0]
 80034f6:	e7f0      	b.n	80034da <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_TIM_Base_MspInit+0x5c>)
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	f042 0202 	orr.w	r2, r2, #2
 8003500:	61da      	str	r2, [r3, #28]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	2105      	movs	r1, #5
 8003510:	201d      	movs	r0, #29
 8003512:	f001 ff49 	bl	80053a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003516:	201d      	movs	r0, #29
 8003518:	f001 ff7e 	bl	8005418 <HAL_NVIC_EnableIRQ>
}
 800351c:	e7dd      	b.n	80034da <HAL_TIM_Base_MspInit+0x12>
 800351e:	bf00      	nop
 8003520:	40000400 	.word	0x40000400
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003528:	b510      	push	{r4, lr}
 800352a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	2300      	movs	r3, #0
 800352e:	9304      	str	r3, [sp, #16]
 8003530:	9305      	str	r3, [sp, #20]
 8003532:	9306      	str	r3, [sp, #24]
 8003534:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM2)
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d004      	beq.n	8003548 <HAL_TIM_MspPostInit+0x20>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800353e:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <HAL_TIM_MspPostInit+0x94>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d016      	beq.n	8003572 <HAL_TIM_MspPostInit+0x4a>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003544:	b008      	add	sp, #32
 8003546:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	f042 0204 	orr.w	r2, r2, #4
 8003552:	619a      	str	r2, [r3, #24]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800355e:	2308      	movs	r3, #8
 8003560:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003568:	a904      	add	r1, sp, #16
 800356a:	4815      	ldr	r0, [pc, #84]	; (80035c0 <HAL_TIM_MspPostInit+0x98>)
 800356c:	f002 f940 	bl	80057f0 <HAL_GPIO_Init>
 8003570:	e7e8      	b.n	8003544 <HAL_TIM_MspPostInit+0x1c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003572:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_TIM_MspPostInit+0x9c>)
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	f042 0204 	orr.w	r2, r2, #4
 800357a:	619a      	str	r2, [r3, #24]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	f002 0204 	and.w	r2, r2, #4
 8003582:	9202      	str	r2, [sp, #8]
 8003584:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	f042 0208 	orr.w	r2, r2, #8
 800358c:	619a      	str	r2, [r3, #24]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2402      	movs	r4, #2
 800359e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	a904      	add	r1, sp, #16
 80035a4:	4806      	ldr	r0, [pc, #24]	; (80035c0 <HAL_TIM_MspPostInit+0x98>)
 80035a6:	f002 f923 	bl	80057f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80035aa:	2303      	movs	r3, #3
 80035ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b2:	a904      	add	r1, sp, #16
 80035b4:	4804      	ldr	r0, [pc, #16]	; (80035c8 <HAL_TIM_MspPostInit+0xa0>)
 80035b6:	f002 f91b 	bl	80057f0 <HAL_GPIO_Init>
}
 80035ba:	e7c3      	b.n	8003544 <HAL_TIM_MspPostInit+0x1c>
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40010800 	.word	0x40010800
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40010c00 	.word	0x40010c00

080035cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035cc:	b570      	push	{r4, r5, r6, lr}
 80035ce:	b088      	sub	sp, #32
 80035d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d2:	2300      	movs	r3, #0
 80035d4:	9304      	str	r3, [sp, #16]
 80035d6:	9305      	str	r3, [sp, #20]
 80035d8:	9306      	str	r3, [sp, #24]
 80035da:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80035dc:	6803      	ldr	r3, [r0, #0]
 80035de:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_UART_MspInit+0x12c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80035e4:	4a45      	ldr	r2, [pc, #276]	; (80036fc <HAL_UART_MspInit+0x130>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d047      	beq.n	800367a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035ea:	b008      	add	sp, #32
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ee:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_UART_MspInit+0x134>)
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035f6:	619a      	str	r2, [r3, #24]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	f042 0204 	orr.w	r2, r2, #4
 8003608:	619a      	str	r2, [r3, #24]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003618:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361a:	2302      	movs	r3, #2
 800361c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800361e:	2303      	movs	r3, #3
 8003620:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003622:	4e38      	ldr	r6, [pc, #224]	; (8003704 <HAL_UART_MspInit+0x138>)
 8003624:	a904      	add	r1, sp, #16
 8003626:	4630      	mov	r0, r6
 8003628:	f002 f8e2 	bl	80057f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800362c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003630:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003632:	2500      	movs	r5, #0
 8003634:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	a904      	add	r1, sp, #16
 800363a:	4630      	mov	r0, r6
 800363c:	f002 f8d8 	bl	80057f0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003640:	4831      	ldr	r0, [pc, #196]	; (8003708 <HAL_UART_MspInit+0x13c>)
 8003642:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_UART_MspInit+0x140>)
 8003644:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003646:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003648:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003650:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003652:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003654:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003656:	f001 ff15 	bl	8005484 <HAL_DMA_Init>
 800365a:	b958      	cbnz	r0, 8003674 <HAL_UART_MspInit+0xa8>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800365c:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <HAL_UART_MspInit+0x13c>)
 800365e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003660:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003662:	2200      	movs	r2, #0
 8003664:	2105      	movs	r1, #5
 8003666:	2025      	movs	r0, #37	; 0x25
 8003668:	f001 fe9e 	bl	80053a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800366c:	2025      	movs	r0, #37	; 0x25
 800366e:	f001 fed3 	bl	8005418 <HAL_NVIC_EnableIRQ>
 8003672:	e7ba      	b.n	80035ea <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8003674:	f7ff f874 	bl	8002760 <Error_Handler>
 8003678:	e7f0      	b.n	800365c <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART3_CLK_ENABLE();
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_UART_MspInit+0x134>)
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003682:	61da      	str	r2, [r3, #28]
 8003684:	69da      	ldr	r2, [r3, #28]
 8003686:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800368a:	9202      	str	r2, [sp, #8]
 800368c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	f042 0208 	orr.w	r2, r2, #8
 8003694:	619a      	str	r2, [r3, #24]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	9303      	str	r3, [sp, #12]
 800369e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036aa:	2303      	movs	r3, #3
 80036ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	4e18      	ldr	r6, [pc, #96]	; (8003710 <HAL_UART_MspInit+0x144>)
 80036b0:	a904      	add	r1, sp, #16
 80036b2:	4630      	mov	r0, r6
 80036b4:	f002 f89c 	bl	80057f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036be:	2500      	movs	r5, #0
 80036c0:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c4:	a904      	add	r1, sp, #16
 80036c6:	4630      	mov	r0, r6
 80036c8:	f002 f892 	bl	80057f0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80036cc:	4811      	ldr	r0, [pc, #68]	; (8003714 <HAL_UART_MspInit+0x148>)
 80036ce:	4b12      	ldr	r3, [pc, #72]	; (8003718 <HAL_UART_MspInit+0x14c>)
 80036d0:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d2:	6045      	str	r5, [r0, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036d4:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036da:	6105      	str	r5, [r0, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036dc:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80036de:	2320      	movs	r3, #32
 80036e0:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036e2:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036e4:	f001 fece 	bl	8005484 <HAL_DMA_Init>
 80036e8:	b918      	cbnz	r0, 80036f2 <HAL_UART_MspInit+0x126>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_UART_MspInit+0x148>)
 80036ec:	63e3      	str	r3, [r4, #60]	; 0x3c
 80036ee:	625c      	str	r4, [r3, #36]	; 0x24
}
 80036f0:	e77b      	b.n	80035ea <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80036f2:	f7ff f835 	bl	8002760 <Error_Handler>
 80036f6:	e7f8      	b.n	80036ea <HAL_UART_MspInit+0x11e>
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40004800 	.word	0x40004800
 8003700:	40021000 	.word	0x40021000
 8003704:	40010800 	.word	0x40010800
 8003708:	20000f8c 	.word	0x20000f8c
 800370c:	40020058 	.word	0x40020058
 8003710:	40010c00 	.word	0x40010c00
 8003714:	20000fd0 	.word	0x20000fd0
 8003718:	40020030 	.word	0x40020030

0800371c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 8003720:	6803      	ldr	r3, [r0, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_UART_MspDeInit+0x58>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d003      	beq.n	8003730 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_UART_MspDeInit+0x5c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d012      	beq.n	8003754 <HAL_UART_MspDeInit+0x38>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800372e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_DISABLE();
 8003730:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 8003734:	6993      	ldr	r3, [r2, #24]
 8003736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800373a:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800373c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003740:	480e      	ldr	r0, [pc, #56]	; (800377c <HAL_UART_MspDeInit+0x60>)
 8003742:	f002 f967 	bl	8005a14 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003746:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003748:	f001 fed2 	bl	80054f0 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800374c:	2025      	movs	r0, #37	; 0x25
 800374e:	f001 fe71 	bl	8005434 <HAL_NVIC_DisableIRQ>
 8003752:	e7ec      	b.n	800372e <HAL_UART_MspDeInit+0x12>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003754:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8003758:	69d3      	ldr	r3, [r2, #28]
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003760:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003764:	4806      	ldr	r0, [pc, #24]	; (8003780 <HAL_UART_MspDeInit+0x64>)
 8003766:	f002 f955 	bl	8005a14 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800376a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800376c:	f001 fec0 	bl	80054f0 <HAL_DMA_DeInit>
}
 8003770:	e7dd      	b.n	800372e <HAL_UART_MspDeInit+0x12>
 8003772:	bf00      	nop
 8003774:	40013800 	.word	0x40013800
 8003778:	40004800 	.word	0x40004800
 800377c:	40010800 	.word	0x40010800
 8003780:	40010c00 	.word	0x40010c00

08003784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003784:	b530      	push	{r4, r5, lr}
 8003786:	b089      	sub	sp, #36	; 0x24
 8003788:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800378a:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_InitTick+0x80>)
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003792:	619a      	str	r2, [r3, #24]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800379e:	a902      	add	r1, sp, #8
 80037a0:	a803      	add	r0, sp, #12
 80037a2:	f003 fb79 	bl	8006e98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80037a6:	f003 fb67 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037aa:	4a17      	ldr	r2, [pc, #92]	; (8003808 <HAL_InitTick+0x84>)
 80037ac:	fba2 2300 	umull	r2, r3, r2, r0
 80037b0:	0c9b      	lsrs	r3, r3, #18
 80037b2:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037b4:	4815      	ldr	r0, [pc, #84]	; (800380c <HAL_InitTick+0x88>)
 80037b6:	4a16      	ldr	r2, [pc, #88]	; (8003810 <HAL_InitTick+0x8c>)
 80037b8:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037be:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037c0:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c6:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c8:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80037ca:	f004 f869 	bl	80078a0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80037ce:	4605      	mov	r5, r0
 80037d0:	b110      	cbz	r0, 80037d8 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 80037d2:	4628      	mov	r0, r5
 80037d4:	b009      	add	sp, #36	; 0x24
 80037d6:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037d8:	480c      	ldr	r0, [pc, #48]	; (800380c <HAL_InitTick+0x88>)
 80037da:	f003 ff31 	bl	8007640 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80037de:	4605      	mov	r5, r0
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d1f6      	bne.n	80037d2 <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80037e4:	2019      	movs	r0, #25
 80037e6:	f001 fe17 	bl	8005418 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ea:	2c0f      	cmp	r4, #15
 80037ec:	d901      	bls.n	80037f2 <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 80037ee:	2501      	movs	r5, #1
 80037f0:	e7ef      	b.n	80037d2 <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80037f2:	2200      	movs	r2, #0
 80037f4:	4621      	mov	r1, r4
 80037f6:	2019      	movs	r0, #25
 80037f8:	f001 fdd6 	bl	80053a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_InitTick+0x90>)
 80037fe:	601c      	str	r4, [r3, #0]
 8003800:	e7e7      	b.n	80037d2 <HAL_InitTick+0x4e>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	431bde83 	.word	0x431bde83
 800380c:	200011dc 	.word	0x200011dc
 8003810:	40012c00 	.word	0x40012c00
 8003814:	20000008 	.word	0x20000008

08003818 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <NMI_Handler>

0800381a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800381a:	e7fe      	b.n	800381a <HardFault_Handler>

0800381c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <MemManage_Handler>

0800381e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800381e:	e7fe      	b.n	800381e <BusFault_Handler>

08003820 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003820:	e7fe      	b.n	8003820 <UsageFault_Handler>

08003822 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003822:	4770      	bx	lr

08003824 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003824:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003826:	4802      	ldr	r0, [pc, #8]	; (8003830 <DMA1_Channel1_IRQHandler+0xc>)
 8003828:	f001 ff40 	bl	80056ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800382c:	bd08      	pop	{r3, pc}
 800382e:	bf00      	nop
 8003830:	20000f48 	.word	0x20000f48

08003834 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003834:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003836:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Channel3_IRQHandler+0xc>)
 8003838:	f001 ff38 	bl	80056ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800383c:	bd08      	pop	{r3, pc}
 800383e:	bf00      	nop
 8003840:	20000fd0 	.word	0x20000fd0

08003844 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003846:	4803      	ldr	r0, [pc, #12]	; (8003854 <DMA1_Channel5_IRQHandler+0x10>)
 8003848:	f001 ff30 	bl	80056ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <DMA1_Channel5_IRQHandler+0x14>)
 800384e:	f7fd fd7f 	bl	8001350 <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003852:	bd08      	pop	{r3, pc}
 8003854:	20000f8c 	.word	0x20000f8c
 8003858:	20000e4c 	.word	0x20000e4c

0800385c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800385c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800385e:	4802      	ldr	r0, [pc, #8]	; (8003868 <TIM1_UP_IRQHandler+0xc>)
 8003860:	f003 ff27 	bl	80076b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003864:	bd08      	pop	{r3, pc}
 8003866:	bf00      	nop
 8003868:	200011dc 	.word	0x200011dc

0800386c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800386c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800386e:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM3_IRQHandler+0xc>)
 8003870:	f003 ff1f 	bl	80076b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003874:	bd08      	pop	{r3, pc}
 8003876:	bf00      	nop
 8003878:	200010c4 	.word	0x200010c4

0800387c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800387c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800387e:	4803      	ldr	r0, [pc, #12]	; (800388c <USART1_IRQHandler+0x10>)
 8003880:	f004 fda4 	bl	80083cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 8003884:	4802      	ldr	r0, [pc, #8]	; (8003890 <USART1_IRQHandler+0x14>)
 8003886:	f7fd fe21 	bl	80014cc <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 800388a:	bd08      	pop	{r3, pc}
 800388c:	2000110c 	.word	0x2000110c
 8003890:	20000e4c 	.word	0x20000e4c

08003894 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	460c      	mov	r4, r1
 8003898:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389a:	2500      	movs	r5, #0
 800389c:	e006      	b.n	80038ac <_read+0x18>
  {
    *ptr++ = __io_getchar();
 800389e:	f3af 8000 	nop.w
 80038a2:	4621      	mov	r1, r4
 80038a4:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a8:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80038aa:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ac:	42b5      	cmp	r5, r6
 80038ae:	dbf6      	blt.n	800389e <_read+0xa>
  }

  return len;
}
 80038b0:	4630      	mov	r0, r6
 80038b2:	bd70      	pop	{r4, r5, r6, pc}

080038b4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	4770      	bx	lr

080038ba <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80038ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038be:	604b      	str	r3, [r1, #4]
  return 0;
}
 80038c0:	2000      	movs	r0, #0
 80038c2:	4770      	bx	lr

080038c4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80038c4:	2001      	movs	r0, #1
 80038c6:	4770      	bx	lr

080038c8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80038c8:	2000      	movs	r0, #0
 80038ca:	4770      	bx	lr

080038cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d0:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <_sbrk+0x38>)
 80038d2:	490d      	ldr	r1, [pc, #52]	; (8003908 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d4:	480d      	ldr	r0, [pc, #52]	; (800390c <_sbrk+0x40>)
 80038d6:	6800      	ldr	r0, [r0, #0]
 80038d8:	b140      	cbz	r0, 80038ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <_sbrk+0x40>)
 80038dc:	6800      	ldr	r0, [r0, #0]
 80038de:	4403      	add	r3, r0
 80038e0:	1a52      	subs	r2, r2, r1
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d806      	bhi.n	80038f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <_sbrk+0x40>)
 80038e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80038ea:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80038ec:	4807      	ldr	r0, [pc, #28]	; (800390c <_sbrk+0x40>)
 80038ee:	4c08      	ldr	r4, [pc, #32]	; (8003910 <_sbrk+0x44>)
 80038f0:	6004      	str	r4, [r0, #0]
 80038f2:	e7f2      	b.n	80038da <_sbrk+0xe>
    errno = ENOMEM;
 80038f4:	f007 fe0a 	bl	800b50c <__errno>
 80038f8:	230c      	movs	r3, #12
 80038fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	e7f3      	b.n	80038ea <_sbrk+0x1e>
 8003902:	bf00      	nop
 8003904:	20005000 	.word	0x20005000
 8003908:	00000400 	.word	0x00000400
 800390c:	20001224 	.word	0x20001224
 8003910:	20002c50 	.word	0x20002c50

08003914 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003914:	4770      	bx	lr
	...

08003918 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003918:	f7ff fffc 	bl	8003914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800391c:	480b      	ldr	r0, [pc, #44]	; (800394c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800391e:	490c      	ldr	r1, [pc, #48]	; (8003950 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003920:	4a0c      	ldr	r2, [pc, #48]	; (8003954 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800392c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800392e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003934:	4c09      	ldr	r4, [pc, #36]	; (800395c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800393e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003942:	f007 fde9 	bl	800b518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003946:	f7ff f8e7 	bl	8002b18 <main>
  bx lr
 800394a:	4770      	bx	lr
  ldr r0, =_sdata
 800394c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003950:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003954:	0800c648 	.word	0x0800c648
  ldr r2, =_sbss
 8003958:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800395c:	20002c50 	.word	0x20002c50

08003960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC1_2_IRQHandler>
	...

08003964 <initBluetooth>:
			osSignalSet(bluetooth.Task, newMessage);

		osDelay(40);
	}
}
void initBluetooth(void){
 8003964:	b510      	push	{r4, lr}

	//inicializacao do bluetooth
	//todo tratar returns
	bleConstrutora(&bluetooth, &huart1, &hdma_usart1_rx, TaskBluetoothHandle);
 8003966:	4c26      	ldr	r4, [pc, #152]	; (8003a00 <initBluetooth+0x9c>)
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <initBluetooth+0xa0>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <initBluetooth+0xa4>)
 800396e:	4927      	ldr	r1, [pc, #156]	; (8003a0c <initBluetooth+0xa8>)
 8003970:	4620      	mov	r0, r4
 8003972:	f7fd fffd 	bl	8001970 <bleConstrutora>

	//possiveis comandos a serem recebidos pelo bluetooth
	createBleComp(&bluetooth, RX_SOLICITA_REALTIME);
 8003976:	2115      	movs	r1, #21
 8003978:	4620      	mov	r0, r4
 800397a:	f7fd fc89 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_SOLICITA_SINCRONIA);
 800397e:	2117      	movs	r1, #23
 8003980:	4620      	mov	r0, r4
 8003982:	f7fd fc85 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_TEMPERATURA);
 8003986:	2126      	movs	r1, #38	; 0x26
 8003988:	4620      	mov	r0, r4
 800398a:	f7fd fc81 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA);
 800398e:	2110      	movs	r1, #16
 8003990:	4620      	mov	r0, r4
 8003992:	f7fd fc7d 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA_HARD);
 8003996:	2109      	movs	r1, #9
 8003998:	4620      	mov	r0, r4
 800399a:	f7fd fc79 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_TETO);
 800399e:	2121      	movs	r1, #33	; 0x21
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7fd fc75 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_LASTRO);
 80039a6:	2122      	movs	r1, #34	; 0x22
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7fd fc71 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMPO);
 80039ae:	2123      	movs	r1, #35	; 0x23
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7fd fc6d 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_TEMPO);
 80039b6:	2124      	movs	r1, #36	; 0x24
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd fc69 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_RECEITA);
 80039be:	2125      	movs	r1, #37	; 0x25
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7fd fc65 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_LIGA_LAMPADA);
 80039c6:	2127      	movs	r1, #39	; 0x27
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7fd fc61 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_DESLIGA_LAMPADA);
 80039ce:	2128      	movs	r1, #40	; 0x28
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7fd fc5d 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_LAMPADA);
 80039d6:	2130      	movs	r1, #48	; 0x30
 80039d8:	4620      	mov	r0, r4
 80039da:	f7fd fc59 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_CANCELA_PROCESSO);
 80039de:	2129      	movs	r1, #41	; 0x29
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7fd fc55 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_TETO);
 80039e6:	2133      	movs	r1, #51	; 0x33
 80039e8:	4620      	mov	r0, r4
 80039ea:	f7fd fc51 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_LASTRO);
 80039ee:	2134      	movs	r1, #52	; 0x34
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7fd fc4d 	bl	8001290 <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_BUZZER);
 80039f6:	2135      	movs	r1, #53	; 0x35
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7fd fc49 	bl	8001290 <createBleComp>

}
 80039fe:	bd10      	pop	{r4, pc}
 8003a00:	20000e4c 	.word	0x20000e4c
 8003a04:	200008f8 	.word	0x200008f8
 8003a08:	20000f8c 	.word	0x20000f8c
 8003a0c:	2000110c 	.word	0x2000110c

08003a10 <taskBluetooth1sec>:
void taskBluetooth1sec(void){
 8003a10:	b508      	push	{r3, lr}

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <taskBluetooth1sec+0x38>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003a1a:	d20d      	bcs.n	8003a38 <taskBluetooth1sec+0x28>
		desligaForno();
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <taskBluetooth1sec+0x3c>)
 8003a1e:	f892 210d 	ldrb.w	r2, [r2, #269]	; 0x10d
 8003a22:	2a01      	cmp	r2, #1
 8003a24:	d002      	beq.n	8003a2c <taskBluetooth1sec+0x1c>
		tempoSemAtividade++;
 8003a26:	3301      	adds	r3, #1
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <taskBluetooth1sec+0x38>)
 8003a2a:	8013      	strh	r3, [r2, #0]
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <taskBluetooth1sec+0x40>)
 8003a2e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d003      	beq.n	8003a3e <taskBluetooth1sec+0x2e>
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 8003a36:	bd08      	pop	{r3, pc}
		desligaForno();
 8003a38:	f7fe fdb2 	bl	80025a0 <desligaForno>
 8003a3c:	e7f6      	b.n	8003a2c <taskBluetooth1sec+0x1c>
		FlagSincronia.cont=0;
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <taskBluetooth1sec+0x44>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	705a      	strb	r2, [r3, #1]
		FlagSincronia.flag=0;
 8003a44:	701a      	strb	r2, [r3, #0]
}
 8003a46:	e7f6      	b.n	8003a36 <taskBluetooth1sec+0x26>
 8003a48:	2000122a 	.word	0x2000122a
 8003a4c:	200007e8 	.word	0x200007e8
 8003a50:	20000e4c 	.word	0x20000e4c
 8003a54:	20001228 	.word	0x20001228

08003a58 <txBluetooth>:
void txBluetooth(void){
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	b086      	sub	sp, #24
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	int bufferQ_dataTx;

	// exite item na lista.
	if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx)) {
 8003a5c:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <txBluetooth+0x29c>)
 8003a5e:	6918      	ldr	r0, [r3, #16]
 8003a60:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003a62:	4798      	blx	r3
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d16a      	bne.n	8003b3e <txBluetooth+0xe6>

		// remove item da lista.
		bufferQ_dataTx = bluetooth.myQ_dataTx->remove(bluetooth.myQ_dataTx);
 8003a68:	4ba2      	ldr	r3, [pc, #648]	; (8003cf4 <txBluetooth+0x29c>)
 8003a6a:	6918      	ldr	r0, [r3, #16]
 8003a6c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a6e:	4798      	blx	r3
		if (bufferQ_dataTx > 0) {
 8003a70:	2800      	cmp	r0, #0
 8003a72:	dd64      	ble.n	8003b3e <txBluetooth+0xe6>

			switch ((uint8_t)bufferQ_dataTx) {
 8003a74:	b2c0      	uxtb	r0, r0
 8003a76:	3816      	subs	r0, #22
 8003a78:	281a      	cmp	r0, #26
 8003a7a:	d860      	bhi.n	8003b3e <txBluetooth+0xe6>
 8003a7c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8003a80:	0061001b 	.word	0x0061001b
 8003a84:	00c10095 	.word	0x00c10095
 8003a88:	005f005f 	.word	0x005f005f
 8003a8c:	005f005f 	.word	0x005f005f
 8003a90:	005f005f 	.word	0x005f005f
 8003a94:	005f00ee 	.word	0x005f00ee
 8003a98:	005f005f 	.word	0x005f005f
 8003a9c:	005f005f 	.word	0x005f005f
 8003aa0:	005f005f 	.word	0x005f005f
 8003aa4:	011b005f 	.word	0x011b005f
 8003aa8:	005f005f 	.word	0x005f005f
 8003aac:	005f005f 	.word	0x005f005f
 8003ab0:	005f005f 	.word	0x005f005f
 8003ab4:	0129      	.short	0x0129
			case TX_REALTIME_DATA:
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x16;									// FUNÇÃO -
 8003abc:	2316      	movs	r3, #22
 8003abe:	f88d 3001 	strb.w	r3, [sp, #1]
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003ac2:	4c8d      	ldr	r4, [pc, #564]	; (8003cf8 <txBluetooth+0x2a0>)
 8003ac4:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 8003ac8:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003acc:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8003ad0:	f88d 3003 	strb.w	r3, [sp, #3]
				Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 8003ad4:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8003ad8:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003adc:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8003ae0:	f7fc ff94 	bl	8000a0c <__aeabi_d2uiz>
 8003ae4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003ae8:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 8003aec:	f88d 0006 	strb.w	r0, [sp, #6]
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003af0:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
 8003af4:	f7fc ff8a 	bl	8000a0c <__aeabi_d2uiz>
 8003af8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003afc:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003b00:	f88d 0008 	strb.w	r0, [sp, #8]
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003b04:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8003b08:	f7fc ff80 	bl	8000a0c <__aeabi_d2uiz>
 8003b0c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b10:	f88d 3009 	strb.w	r3, [sp, #9]
				Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003b14:	f88d 000a 	strb.w	r0, [sp, #10]
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003b18:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
 8003b1c:	f7fc ff76 	bl	8000a0c <__aeabi_d2uiz>
 8003b20:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003b24:	f88d 300b 	strb.w	r3, [sp, #11]
				Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 8003b28:	f88d 000c 	strb.w	r0, [sp, #12]
				Buffer[13] 	= PrimitiveStates.Buzzer;
 8003b2c:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8003b30:	f88d 300d 	strb.w	r3, [sp, #13]

				bluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003b34:	220d      	movs	r2, #13
 8003b36:	4669      	mov	r1, sp
 8003b38:	486e      	ldr	r0, [pc, #440]	; (8003cf4 <txBluetooth+0x29c>)
 8003b3a:	f7fd faea 	bl	8001112 <bluetoothEnviaComando>

				break;
			}
		}
	}
}
 8003b3e:	b006      	add	sp, #24
 8003b40:	bd10      	pop	{r4, pc}
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b42:	2301      	movs	r3, #1
 8003b44:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003b48:	2317      	movs	r3, #23
 8003b4a:	f88d 3001 	strb.w	r3, [sp, #1]
				Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <txBluetooth+0x2a0>)
 8003b50:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8003b54:	f88d 2002 	strb.w	r2, [sp, #2]
				Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 8003b58:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8003b5c:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 8003b60:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8003b64:	f88d 2004 	strb.w	r2, [sp, #4]
				Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 8003b68:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003b6c:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003b70:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 8003b74:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003b78:	4a60      	ldr	r2, [pc, #384]	; (8003cfc <txBluetooth+0x2a4>)
 8003b7a:	8811      	ldrh	r1, [r2, #0]
 8003b7c:	0a08      	lsrs	r0, r1, #8
 8003b7e:	f88d 0007 	strb.w	r0, [sp, #7]
				Buffer[8] 	= (uint16_t)Calendario.Horimetro_horas & 0x00FF;
 8003b82:	f88d 1008 	strb.w	r1, [sp, #8]
				Buffer[9] 	= (uint8_t)Calendario.Horimetro_parcial_min;
 8003b86:	7891      	ldrb	r1, [r2, #2]
 8003b88:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[10]	= PrimitiveStates.Lampada._state;
 8003b8c:	7a1b      	ldrb	r3, [r3, #8]
 8003b8e:	f88d 300a 	strb.w	r3, [sp, #10]
				Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003b92:	8893      	ldrh	r3, [r2, #4]
 8003b94:	0a1a      	lsrs	r2, r3, #8
 8003b96:	f88d 200b 	strb.w	r2, [sp, #11]
				Buffer[12] 	= (uint16_t)Calendario.TotalCiclos & 0x00FF;
 8003b9a:	f88d 300c 	strb.w	r3, [sp, #12]
				bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003b9e:	220c      	movs	r2, #12
 8003ba0:	4669      	mov	r1, sp
 8003ba2:	4854      	ldr	r0, [pc, #336]	; (8003cf4 <txBluetooth+0x29c>)
 8003ba4:	f7fd fab5 	bl	8001112 <bluetoothEnviaComando>
				break;
 8003ba8:	e7c9      	b.n	8003b3e <txBluetooth+0xe6>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003baa:	2301      	movs	r3, #1
 8003bac:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003bb0:	2218      	movs	r2, #24
 8003bb2:	f88d 2001 	strb.w	r2, [sp, #1]
				Buffer[2] 	= 0x01;									// Modelo
 8003bb6:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003bba:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <txBluetooth+0x2a0>)
 8003bbc:	89db      	ldrh	r3, [r3, #14]
 8003bbe:	0a1a      	lsrs	r2, r3, #8
 8003bc0:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 8003bc4:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint8_t)0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[6] 	= (uint8_t)0;
 8003bce:	f88d 3006 	strb.w	r3, [sp, #6]
				Buffer[7] 	= (uint8_t)0;
 8003bd2:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[8]	= VERSAO;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003bdc:	4b47      	ldr	r3, [pc, #284]	; (8003cfc <txBluetooth+0x2a4>)
 8003bde:	88da      	ldrh	r2, [r3, #6]
 8003be0:	0a11      	lsrs	r1, r2, #8
 8003be2:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 8003be6:	f88d 200a 	strb.w	r2, [sp, #10]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003bea:	891b      	ldrh	r3, [r3, #8]
 8003bec:	0a1a      	lsrs	r2, r3, #8
 8003bee:	f88d 200b 	strb.w	r2, [sp, #11]
				Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 8003bf2:	f88d 300c 	strb.w	r3, [sp, #12]
				bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	4669      	mov	r1, sp
 8003bfa:	483e      	ldr	r0, [pc, #248]	; (8003cf4 <txBluetooth+0x29c>)
 8003bfc:	f7fd fa89 	bl	8001112 <bluetoothEnviaComando>
				break;
 8003c00:	e79d      	b.n	8003b3e <txBluetooth+0xe6>
				Buffer[0] = 0x01;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] = 0x19;
 8003c08:	2319      	movs	r3, #25
 8003c0a:	f88d 3001 	strb.w	r3, [sp, #1]
				float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003c0e:	4c3a      	ldr	r4, [pc, #232]	; (8003cf8 <txBluetooth+0x2a0>)
 8003c10:	2302      	movs	r3, #2
 8003c12:	466a      	mov	r2, sp
 8003c14:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
 8003c18:	f7fd ff24 	bl	8001a64 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003c1c:	2306      	movs	r3, #6
 8003c1e:	466a      	mov	r2, sp
 8003c20:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	; 0x88
 8003c24:	f7fd ff1e 	bl	8001a64 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003c28:	230a      	movs	r3, #10
 8003c2a:	466a      	mov	r2, sp
 8003c2c:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 8003c30:	f7fd ff18 	bl	8001a64 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003c34:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8003c38:	0a1a      	lsrs	r2, r3, #8
 8003c3a:	f88d 200e 	strb.w	r2, [sp, #14]
				Buffer[15] 	= (uint16_t)PrimitiveStates.Teto.histerese 	& 0x00FF;
 8003c3e:	f88d 300f 	strb.w	r3, [sp, #15]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 8003c42:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8003c46:	0a1a      	lsrs	r2, r3, #8
 8003c48:	f88d 2010 	strb.w	r2, [sp, #16]
				Buffer[17] 	= (uint16_t)PrimitiveStates.Teto.limite 		& 0x00FF;
 8003c4c:	f88d 3011 	strb.w	r3, [sp, #17]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003c50:	2211      	movs	r2, #17
 8003c52:	4669      	mov	r1, sp
 8003c54:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <txBluetooth+0x29c>)
 8003c56:	f7fd fa5c 	bl	8001112 <bluetoothEnviaComando>
				break;
 8003c5a:	e770      	b.n	8003b3e <txBluetooth+0xe6>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x20;									// FUNÇÃO -
 8003c62:	2320      	movs	r3, #32
 8003c64:	f88d 3001 	strb.w	r3, [sp, #1]
				float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003c68:	4c23      	ldr	r4, [pc, #140]	; (8003cf8 <txBluetooth+0x2a0>)
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	466a      	mov	r2, sp
 8003c6e:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
 8003c72:	f7fd fef7 	bl	8001a64 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 8003c76:	2306      	movs	r3, #6
 8003c78:	466a      	mov	r2, sp
 8003c7a:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8003c7e:	f7fd fef1 	bl	8001a64 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 8003c82:	230a      	movs	r3, #10
 8003c84:	466a      	mov	r2, sp
 8003c86:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8003c8a:	f7fd feeb 	bl	8001a64 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 8003c8e:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8003c92:	0a1a      	lsrs	r2, r3, #8
 8003c94:	f88d 200e 	strb.w	r2, [sp, #14]
				Buffer[15] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	& 0x00FF;
 8003c98:	f88d 300f 	strb.w	r3, [sp, #15]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003c9c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003ca0:	0a1a      	lsrs	r2, r3, #8
 8003ca2:	f88d 2010 	strb.w	r2, [sp, #16]
				Buffer[17] 	= (uint16_t)PrimitiveStates.Lastro.limite 		& 0x00FF;
 8003ca6:	f88d 3011 	strb.w	r3, [sp, #17]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003caa:	2211      	movs	r2, #17
 8003cac:	4669      	mov	r1, sp
 8003cae:	4811      	ldr	r0, [pc, #68]	; (8003cf4 <txBluetooth+0x29c>)
 8003cb0:	f7fd fa2f 	bl	8001112 <bluetoothEnviaComando>
				break;
 8003cb4:	e743      	b.n	8003b3e <txBluetooth+0xe6>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x29;									// FUNÇÃO -
 8003cbc:	2329      	movs	r3, #41	; 0x29
 8003cbe:	f88d 3001 	strb.w	r3, [sp, #1]
				Buffer[2] 	= 0x29;									// FUNÇÃO -
 8003cc2:	f88d 3002 	strb.w	r3, [sp, #2]
				bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	4669      	mov	r1, sp
 8003cca:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <txBluetooth+0x29c>)
 8003ccc:	f7fd fa21 	bl	8001112 <bluetoothEnviaComando>
				break;
 8003cd0:	e735      	b.n	8003b3e <txBluetooth+0xe6>
				FlagSincronia.flag=0;
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <txBluetooth+0x2a8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f88d 3000 	strb.w	r3, [sp]
				Buffer[1] 	= 0x30;									// FUNÇÃO -
 8003cde:	2330      	movs	r3, #48	; 0x30
 8003ce0:	f88d 3001 	strb.w	r3, [sp, #1]
				Buffer[2] 	= 0x30;									// FUNÇÃO -
 8003ce4:	f88d 3002 	strb.w	r3, [sp, #2]
				bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4669      	mov	r1, sp
 8003cec:	4801      	ldr	r0, [pc, #4]	; (8003cf4 <txBluetooth+0x29c>)
 8003cee:	f7fd fa10 	bl	8001112 <bluetoothEnviaComando>
}
 8003cf2:	e724      	b.n	8003b3e <txBluetooth+0xe6>
 8003cf4:	20000e4c 	.word	0x20000e4c
 8003cf8:	200007e8 	.word	0x200007e8
 8003cfc:	200007d4 	.word	0x200007d4
 8003d00:	20001228 	.word	0x20001228

08003d04 <verificaLimiteSetpoint>:
				break;
			}
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003d08:	e9d0 670c 	ldrd	r6, r7, [r0, #48]	; 0x30
 8003d0c:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8003d0e:	4628      	mov	r0, r5
 8003d10:	f7fc fb78 	bl	8000404 <__aeabi_i2d>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4630      	mov	r0, r6
 8003d1a:	4639      	mov	r1, r7
 8003d1c:	f7fc fe4e 	bl	80009bc <__aeabi_dcmplt>
 8003d20:	b920      	cbnz	r0, 8003d2c <verificaLimiteSetpoint+0x28>
		return;

	canal->setPoint = canal->limite;
 8003d22:	4628      	mov	r0, r5
 8003d24:	f7fc fb5e 	bl	80003e4 <__aeabi_ui2d>
 8003d28:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d30 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <sincAutomatico+0x28>)
 8003d32:	7818      	ldrb	r0, [r3, #0]
 8003d34:	b968      	cbnz	r0, 8003d52 <sincAutomatico+0x22>
		if(FlagSincronia.cont<ENVIO_DE_SINCRONIAS){
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d804      	bhi.n	8003d46 <sincAutomatico+0x16>
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <sincAutomatico+0x28>)
 8003d40:	7053      	strb	r3, [r2, #1]
			return 1;
 8003d42:	2001      	movs	r0, #1
 8003d44:	4770      	bx	lr
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003d46:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <sincAutomatico+0x28>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	705a      	strb	r2, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
			return 0;
 8003d50:	4770      	bx	lr
		}
	}
	return 0;
 8003d52:	2000      	movs	r0, #0
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20001228 	.word	0x20001228

08003d5c <rxBluetooth>:
void rxBluetooth(void){
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	b084      	sub	sp, #16
	if (!bluetooth.myQ_dataRx->is_empty(bluetooth.myQ_dataRx)) {
 8003d60:	4b9b      	ldr	r3, [pc, #620]	; (8003fd0 <rxBluetooth+0x274>)
 8003d62:	68d8      	ldr	r0, [r3, #12]
 8003d64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d66:	4798      	blx	r3
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d157      	bne.n	8003e1c <rxBluetooth+0xc0>
		if (bluetooth.myQ_dataRx->remove(bluetooth.myQ_dataRx) > 0) {
 8003d6c:	4b98      	ldr	r3, [pc, #608]	; (8003fd0 <rxBluetooth+0x274>)
 8003d6e:	68d8      	ldr	r0, [r3, #12]
 8003d70:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003d72:	4798      	blx	r3
 8003d74:	2800      	cmp	r0, #0
 8003d76:	dd51      	ble.n	8003e1c <rxBluetooth+0xc0>
			switch (bluetooth.ComandoAtual._comando) {
 8003d78:	4b95      	ldr	r3, [pc, #596]	; (8003fd0 <rxBluetooth+0x274>)
 8003d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d7e:	3b09      	subs	r3, #9
 8003d80:	2b2c      	cmp	r3, #44	; 0x2c
 8003d82:	d84b      	bhi.n	8003e1c <rxBluetooth+0xc0>
 8003d84:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003d88:	004a004c 	.word	0x004a004c
 8003d8c:	004a004a 	.word	0x004a004a
 8003d90:	004a004a 	.word	0x004a004a
 8003d94:	005f004a 	.word	0x005f004a
 8003d98:	004a004a 	.word	0x004a004a
 8003d9c:	004a004a 	.word	0x004a004a
 8003da0:	004a002d 	.word	0x004a002d
 8003da4:	004a0046 	.word	0x004a0046
 8003da8:	004a004a 	.word	0x004a004a
 8003dac:	004a004a 	.word	0x004a004a
 8003db0:	004a004a 	.word	0x004a004a
 8003db4:	004a004a 	.word	0x004a004a
 8003db8:	00870072 	.word	0x00870072
 8003dbc:	00c9009c 	.word	0x00c9009c
 8003dc0:	004a0134 	.word	0x004a0134
 8003dc4:	0190017a 	.word	0x0190017a
 8003dc8:	004a01bd 	.word	0x004a01bd
 8003dcc:	004a004a 	.word	0x004a004a
 8003dd0:	004a004a 	.word	0x004a004a
 8003dd4:	01a6004a 	.word	0x01a6004a
 8003dd8:	004a004a 	.word	0x004a004a
 8003ddc:	020e01ca 	.word	0x020e01ca
 8003de0:	0252      	.short	0x0252
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA);
 8003de2:	4c7b      	ldr	r4, [pc, #492]	; (8003fd0 <rxBluetooth+0x274>)
 8003de4:	2116      	movs	r1, #22
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7fd fa27 	bl	800123a <putQueueDataTx>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 8003dec:	2117      	movs	r1, #23
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7fd fa23 	bl	800123a <putQueueDataTx>
				if(sincAutomatico()){
 8003df4:	f7ff ff9c 	bl	8003d30 <sincAutomatico>
 8003df8:	b180      	cbz	r0, 8003e1c <rxBluetooth+0xc0>
					putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8003dfa:	2118      	movs	r1, #24
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7fd fa1c 	bl	800123a <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 8003e02:	2119      	movs	r1, #25
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fd fa18 	bl	800123a <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 8003e0a:	2120      	movs	r1, #32
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7fd fa14 	bl	800123a <putQueueDataTx>
 8003e12:	e003      	b.n	8003e1c <rxBluetooth+0xc0>
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8003e14:	2118      	movs	r1, #24
 8003e16:	486e      	ldr	r0, [pc, #440]	; (8003fd0 <rxBluetooth+0x274>)
 8003e18:	f7fd fa0f 	bl	800123a <putQueueDataTx>
}
 8003e1c:	b004      	add	sp, #16
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
				osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003e20:	2200      	movs	r2, #0
 8003e22:	2101      	movs	r1, #1
 8003e24:	4b6b      	ldr	r3, [pc, #428]	; (8003fd4 <rxBluetooth+0x278>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	f004 fe1a 	bl	8008a60 <osMessagePut>
				putQueueDataTx(&bluetooth, TX_RESETANDO);
 8003e2c:	4c68      	ldr	r4, [pc, #416]	; (8003fd0 <rxBluetooth+0x274>)
 8003e2e:	2129      	movs	r1, #41	; 0x29
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7fd fa02 	bl	800123a <putQueueDataTx>
				osDelay(50);
 8003e36:	2032      	movs	r0, #50	; 0x32
 8003e38:	f004 fd1d 	bl	8008876 <osDelay>
				putQueueDataTx(&bluetooth, TX_RESETADO_OK);
 8003e3c:	2130      	movs	r1, #48	; 0x30
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7fd f9fb 	bl	800123a <putQueueDataTx>
				break;
 8003e44:	e7ea      	b.n	8003e1c <rxBluetooth+0xc0>
				osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <rxBluetooth+0x278>)
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	f004 fe07 	bl	8008a60 <osMessagePut>
				putQueueDataTx(&bluetooth, TX_RESETANDO);
 8003e52:	4c5f      	ldr	r4, [pc, #380]	; (8003fd0 <rxBluetooth+0x274>)
 8003e54:	2129      	movs	r1, #41	; 0x29
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7fd f9ef 	bl	800123a <putQueueDataTx>
				osDelay(50);
 8003e5c:	2032      	movs	r0, #50	; 0x32
 8003e5e:	f004 fd0a 	bl	8008876 <osDelay>
				putQueueDataTx(&bluetooth, TX_RESETADO_OK);
 8003e62:	2130      	movs	r1, #48	; 0x30
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7fd f9e8 	bl	800123a <putQueueDataTx>
				break;
 8003e6a:	e7d7      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 8003e6c:	4b5a      	ldr	r3, [pc, #360]	; (8003fd8 <rxBluetooth+0x27c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003e72:	4c5a      	ldr	r4, [pc, #360]	; (8003fdc <rxBluetooth+0x280>)
 8003e74:	4d5a      	ldr	r5, [pc, #360]	; (8003fe0 <rxBluetooth+0x284>)
 8003e76:	2202      	movs	r2, #2
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7fd fdde 	bl	8001a3c <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003e80:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003e84:	f7ff ff3e 	bl	8003d04 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_TETO);
 8003e88:	f1a4 0014 	sub.w	r0, r4, #20
 8003e8c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8003e90:	2121      	movs	r1, #33	; 0x21
 8003e92:	4798      	blx	r3
				break;
 8003e94:	e7c2      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 8003e96:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <rxBluetooth+0x27c>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003e9c:	4c4f      	ldr	r4, [pc, #316]	; (8003fdc <rxBluetooth+0x280>)
 8003e9e:	4d51      	ldr	r5, [pc, #324]	; (8003fe4 <rxBluetooth+0x288>)
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	f7fd fdc9 	bl	8001a3c <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003eaa:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8003eae:	f7ff ff29 	bl	8003d04 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_LASTRO);
 8003eb2:	f1a4 0014 	sub.w	r0, r4, #20
 8003eb6:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8003eba:	2122      	movs	r1, #34	; 0x22
 8003ebc:	4798      	blx	r3
				break;
 8003ebe:	e7ad      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 8003ec0:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <rxBluetooth+0x27c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	801a      	strh	r2, [r3, #0]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003ec6:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <rxBluetooth+0x274>)
 8003ec8:	7d91      	ldrb	r1, [r2, #22]
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <rxBluetooth+0x28c>)
 8003ecc:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003ed0:	7dd2      	ldrb	r2, [r2, #23]
 8003ed2:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003ed6:	f883 110b 	strb.w	r1, [r3, #267]	; 0x10b
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003eda:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003ede:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d004      	beq.n	8003ef0 <rxBluetooth+0x194>
 8003ee6:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <rxBluetooth+0x28c>)
 8003ee8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d10a      	bne.n	8003f06 <rxBluetooth+0x1aa>
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003ef0:	2102      	movs	r1, #2
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <rxBluetooth+0x290>)
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	f004 fd1c 	bl	8008932 <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMPO);
 8003efa:	4835      	ldr	r0, [pc, #212]	; (8003fd0 <rxBluetooth+0x274>)
 8003efc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8003f00:	2123      	movs	r1, #35	; 0x23
 8003f02:	4798      	blx	r3
			break;
 8003f04:	e78a      	b.n	8003e1c <rxBluetooth+0xc0>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003f06:	4b38      	ldr	r3, [pc, #224]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003f0e:	2104      	movs	r1, #4
 8003f10:	4b36      	ldr	r3, [pc, #216]	; (8003fec <rxBluetooth+0x290>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	f004 fd0d 	bl	8008932 <osSignalSet>
 8003f18:	e7ef      	b.n	8003efa <rxBluetooth+0x19e>
				MACRO_ANULA_INATIVIDADE
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <rxBluetooth+0x27c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
				switch (PrimitiveStates.stateTimer) {
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f22:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d047      	beq.n	8003fba <rxBluetooth+0x25e>
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d02c      	beq.n	8003f88 <rxBluetooth+0x22c>
 8003f2e:	b12b      	cbz	r3, 8003f3c <rxBluetooth+0x1e0>
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_TEMPO);
 8003f30:	4827      	ldr	r0, [pc, #156]	; (8003fd0 <rxBluetooth+0x274>)
 8003f32:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8003f36:	2124      	movs	r1, #36	; 0x24
 8003f38:	4798      	blx	r3
			break;
 8003f3a:	e76f      	b.n	8003e1c <rxBluetooth+0xc0>
					PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f3e:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003f42:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
					PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003f46:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 8003f4a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003f4e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d004      	beq.n	8003f60 <rxBluetooth+0x204>
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f58:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d109      	bne.n	8003f74 <rxBluetooth+0x218>
						PrimitiveStates.stateTimer = TIMER_idle;
 8003f60:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
						osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <rxBluetooth+0x290>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f004 fce0 	bl	8008932 <osSignalSet>
 8003f72:	e7dd      	b.n	8003f30 <rxBluetooth+0x1d4>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003f7c:	2104      	movs	r1, #4
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <rxBluetooth+0x290>)
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	f004 fcd6 	bl	8008932 <osSignalSet>
 8003f86:	e7d3      	b.n	8003f30 <rxBluetooth+0x1d4>
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003f88:	4b17      	ldr	r3, [pc, #92]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f8a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d004      	beq.n	8003f9c <rxBluetooth+0x240>
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f94:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d104      	bne.n	8003fa6 <rxBluetooth+0x24a>
						PrimitiveStates.stateTimer = TIMER_idle;
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <rxBluetooth+0x28c>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
 8003fa4:	e7c4      	b.n	8003f30 <rxBluetooth+0x1d4>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <rxBluetooth+0x28c>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003fae:	2104      	movs	r1, #4
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <rxBluetooth+0x290>)
 8003fb2:	6818      	ldr	r0, [r3, #0]
 8003fb4:	f004 fcbd 	bl	8008932 <osSignalSet>
 8003fb8:	e7ba      	b.n	8003f30 <rxBluetooth+0x1d4>
					PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <rxBluetooth+0x28c>)
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003fc2:	2104      	movs	r1, #4
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <rxBluetooth+0x290>)
 8003fc6:	6818      	ldr	r0, [r3, #0]
 8003fc8:	f004 fcb3 	bl	8008932 <osSignalSet>
					break;
 8003fcc:	e7b0      	b.n	8003f30 <rxBluetooth+0x1d4>
 8003fce:	bf00      	nop
 8003fd0:	20000e4c 	.word	0x20000e4c
 8003fd4:	200007e0 	.word	0x200007e0
 8003fd8:	2000122a 	.word	0x2000122a
 8003fdc:	20000e60 	.word	0x20000e60
 8003fe0:	20000890 	.word	0x20000890
 8003fe4:	200008d8 	.word	0x200008d8
 8003fe8:	200007e8 	.word	0x200007e8
 8003fec:	20000b9c 	.word	0x20000b9c
				MACRO_ANULA_INATIVIDADE
 8003ff0:	4ba0      	ldr	r3, [pc, #640]	; (8004274 <rxBluetooth+0x518>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003ff6:	4da0      	ldr	r5, [pc, #640]	; (8004278 <rxBluetooth+0x51c>)
 8003ff8:	4ca0      	ldr	r4, [pc, #640]	; (800427c <rxBluetooth+0x520>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7fd fd1c 	bl	8001a3c <vetor2b_TO_Double>
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 8004004:	2204      	movs	r2, #4
 8004006:	4629      	mov	r1, r5
 8004008:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800400c:	f7fd fd16 	bl	8001a3c <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8004010:	f104 0018 	add.w	r0, r4, #24
 8004014:	f7ff fe76 	bl	8003d04 <verificaLimiteSetpoint>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8004018:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 800401c:	f7ff fe72 	bl	8003d04 <verificaLimiteSetpoint>
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004020:	79aa      	ldrb	r2, [r5, #6]
 8004022:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8004026:	79eb      	ldrb	r3, [r5, #7]
 8004028:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 800402c:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004030:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
				contadorOutput(&outPuts);
 8004034:	4892      	ldr	r0, [pc, #584]	; (8004280 <rxBluetooth+0x524>)
 8004036:	f7fe f890 	bl	800215a <contadorOutput>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 800403a:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 800403e:	3ca8      	subs	r4, #168	; 0xa8
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8004040:	2b01      	cmp	r3, #1
 8004042:	d003      	beq.n	800404c <rxBluetooth+0x2f0>
 8004044:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10e      	bne.n	800406a <rxBluetooth+0x30e>
					PrimitiveStates.stateTimer = TIMER_idle;
 800404c:	4b8d      	ldr	r3, [pc, #564]	; (8004284 <rxBluetooth+0x528>)
 800404e:	2200      	movs	r2, #0
 8004050:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8004054:	2102      	movs	r1, #2
 8004056:	4b8c      	ldr	r3, [pc, #560]	; (8004288 <rxBluetooth+0x52c>)
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	f004 fc6a 	bl	8008932 <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_RECEITA);
 800405e:	488b      	ldr	r0, [pc, #556]	; (800428c <rxBluetooth+0x530>)
 8004060:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8004064:	2125      	movs	r1, #37	; 0x25
 8004066:	4798      	blx	r3
			break;
 8004068:	e6d8      	b.n	8003e1c <rxBluetooth+0xc0>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 800406a:	2201      	movs	r2, #1
 800406c:	f884 210d 	strb.w	r2, [r4, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004070:	2104      	movs	r1, #4
 8004072:	4b85      	ldr	r3, [pc, #532]	; (8004288 <rxBluetooth+0x52c>)
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f004 fc5c 	bl	8008932 <osSignalSet>
 800407a:	e7f0      	b.n	800405e <rxBluetooth+0x302>
				MACRO_ANULA_INATIVIDADE
 800407c:	4b7d      	ldr	r3, [pc, #500]	; (8004274 <rxBluetooth+0x518>)
 800407e:	2200      	movs	r2, #0
 8004080:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004082:	2104      	movs	r1, #4
 8004084:	4b80      	ldr	r3, [pc, #512]	; (8004288 <rxBluetooth+0x52c>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	f004 fc53 	bl	8008932 <osSignalSet>
				onDigital(&PrimitiveStates.Lampada);
 800408c:	487d      	ldr	r0, [pc, #500]	; (8004284 <rxBluetooth+0x528>)
 800408e:	f7fe f850 	bl	8002132 <onDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 8004092:	4c7e      	ldr	r4, [pc, #504]	; (800428c <rxBluetooth+0x530>)
 8004094:	2117      	movs	r1, #23
 8004096:	4620      	mov	r0, r4
 8004098:	f7fd f8cf 	bl	800123a <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_LIGA_LAMPADA);
 800409c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80040a0:	2127      	movs	r1, #39	; 0x27
 80040a2:	4620      	mov	r0, r4
 80040a4:	4798      	blx	r3
				break;
 80040a6:	e6b9      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 80040a8:	4b72      	ldr	r3, [pc, #456]	; (8004274 <rxBluetooth+0x518>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80040ae:	2104      	movs	r1, #4
 80040b0:	4b75      	ldr	r3, [pc, #468]	; (8004288 <rxBluetooth+0x52c>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	f004 fc3d 	bl	8008932 <osSignalSet>
				offDigital(&PrimitiveStates.Lampada);
 80040b8:	4872      	ldr	r0, [pc, #456]	; (8004284 <rxBluetooth+0x528>)
 80040ba:	f7fe f844 	bl	8002146 <offDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 80040be:	4c73      	ldr	r4, [pc, #460]	; (800428c <rxBluetooth+0x530>)
 80040c0:	2117      	movs	r1, #23
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7fd f8b9 	bl	800123a <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_DESLIGA_LAMPADA);
 80040c8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80040cc:	2128      	movs	r1, #40	; 0x28
 80040ce:	4620      	mov	r0, r4
 80040d0:	4798      	blx	r3
				break;
 80040d2:	e6a3      	b.n	8003e1c <rxBluetooth+0xc0>
				PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 80040d4:	4c6d      	ldr	r4, [pc, #436]	; (800428c <rxBluetooth+0x530>)
 80040d6:	7de2      	ldrb	r2, [r4, #23]
 80040d8:	4b6a      	ldr	r3, [pc, #424]	; (8004284 <rxBluetooth+0x528>)
 80040da:	81da      	strh	r2, [r3, #14]
				osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	2104      	movs	r1, #4
 80040e0:	4b6b      	ldr	r3, [pc, #428]	; (8004290 <rxBluetooth+0x534>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	f004 fcbc 	bl	8008a60 <osMessagePut>
				FlagSincronia.cont=0;
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <rxBluetooth+0x538>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	705a      	strb	r2, [r3, #1]
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 80040ee:	2118      	movs	r1, #24
 80040f0:	4620      	mov	r0, r4
 80040f2:	f7fd f8a2 	bl	800123a <putQueueDataTx>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80040f6:	2104      	movs	r1, #4
 80040f8:	4b63      	ldr	r3, [pc, #396]	; (8004288 <rxBluetooth+0x52c>)
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	f004 fc19 	bl	8008932 <osSignalSet>
				break;
 8004100:	e68c      	b.n	8003e1c <rxBluetooth+0xc0>
				desligaForno();
 8004102:	f7fe fa4d 	bl	80025a0 <desligaForno>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004106:	2104      	movs	r1, #4
 8004108:	4b5f      	ldr	r3, [pc, #380]	; (8004288 <rxBluetooth+0x52c>)
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	f004 fc11 	bl	8008932 <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 8004110:	485e      	ldr	r0, [pc, #376]	; (800428c <rxBluetooth+0x530>)
 8004112:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8004116:	2129      	movs	r1, #41	; 0x29
 8004118:	4798      	blx	r3
				break;
 800411a:	e67f      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 800411c:	2600      	movs	r6, #0
 800411e:	4b55      	ldr	r3, [pc, #340]	; (8004274 <rxBluetooth+0x518>)
 8004120:	801e      	strh	r6, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8004122:	4d55      	ldr	r5, [pc, #340]	; (8004278 <rxBluetooth+0x51c>)
 8004124:	4c5c      	ldr	r4, [pc, #368]	; (8004298 <rxBluetooth+0x53c>)
 8004126:	2202      	movs	r2, #2
 8004128:	4629      	mov	r1, r5
 800412a:	4620      	mov	r0, r4
 800412c:	f7fd fc56 	bl	80019dc <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8004130:	2206      	movs	r2, #6
 8004132:	4629      	mov	r1, r5
 8004134:	f104 0008 	add.w	r0, r4, #8
 8004138:	f7fd fc50 	bl	80019dc <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 800413c:	220a      	movs	r2, #10
 800413e:	4629      	mov	r1, r5
 8004140:	f104 0010 	add.w	r0, r4, #16
 8004144:	f7fd fc4a 	bl	80019dc <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8004148:	220e      	movs	r2, #14
 800414a:	4629      	mov	r1, r5
 800414c:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8004150:	f7fd fc62 	bl	8001a18 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8004154:	2210      	movs	r2, #16
 8004156:	4629      	mov	r1, r5
 8004158:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800415c:	f7fd fc5c 	bl	8001a18 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8004160:	f1a4 0008 	sub.w	r0, r4, #8
 8004164:	f7ff fdce 	bl	8003d04 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8004168:	4632      	mov	r2, r6
 800416a:	2108      	movs	r1, #8
 800416c:	4b48      	ldr	r3, [pc, #288]	; (8004290 <rxBluetooth+0x534>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f004 fc76 	bl	8008a60 <osMessagePut>
				PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 8004174:	e874 2320 	ldrd	r2, r3, [r4], #-128	; 0x80
 8004178:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 800417c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004180:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	; 0x88
 8004184:	e9cd 0100 	strd	r0, r1, [sp]
 8004188:	4844      	ldr	r0, [pc, #272]	; (800429c <rxBluetooth+0x540>)
 800418a:	f7ff f83d 	bl	8003208 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 800418e:	2119      	movs	r1, #25
 8004190:	f1a5 0014 	sub.w	r0, r5, #20
 8004194:	f7fd f851 	bl	800123a <putQueueDataTx>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004198:	2104      	movs	r1, #4
 800419a:	4b3b      	ldr	r3, [pc, #236]	; (8004288 <rxBluetooth+0x52c>)
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f004 fbc8 	bl	8008932 <osSignalSet>
				break;
 80041a2:	e63b      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 80041a4:	2600      	movs	r6, #0
 80041a6:	4b33      	ldr	r3, [pc, #204]	; (8004274 <rxBluetooth+0x518>)
 80041a8:	801e      	strh	r6, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 80041aa:	4d33      	ldr	r5, [pc, #204]	; (8004278 <rxBluetooth+0x51c>)
 80041ac:	4c3c      	ldr	r4, [pc, #240]	; (80042a0 <rxBluetooth+0x544>)
 80041ae:	2202      	movs	r2, #2
 80041b0:	4629      	mov	r1, r5
 80041b2:	4620      	mov	r0, r4
 80041b4:	f7fd fc12 	bl	80019dc <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 80041b8:	2206      	movs	r2, #6
 80041ba:	4629      	mov	r1, r5
 80041bc:	f104 0008 	add.w	r0, r4, #8
 80041c0:	f7fd fc0c 	bl	80019dc <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 80041c4:	220a      	movs	r2, #10
 80041c6:	4629      	mov	r1, r5
 80041c8:	f104 0010 	add.w	r0, r4, #16
 80041cc:	f7fd fc06 	bl	80019dc <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 80041d0:	220e      	movs	r2, #14
 80041d2:	4629      	mov	r1, r5
 80041d4:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80041d8:	f7fd fc1e 	bl	8001a18 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 80041dc:	2210      	movs	r2, #16
 80041de:	4629      	mov	r1, r5
 80041e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80041e4:	f7fd fc18 	bl	8001a18 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 80041e8:	f1a4 0008 	sub.w	r0, r4, #8
 80041ec:	f7ff fd8a 	bl	8003d04 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 80041f0:	4632      	mov	r2, r6
 80041f2:	2108      	movs	r1, #8
 80041f4:	4b26      	ldr	r3, [pc, #152]	; (8004290 <rxBluetooth+0x534>)
 80041f6:	6818      	ldr	r0, [r3, #0]
 80041f8:	f004 fc32 	bl	8008a60 <osMessagePut>
				PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 80041fc:	e874 2332 	ldrd	r2, r3, [r4], #-200	; 0xc8
 8004200:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8004204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004208:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 800420c:	e9cd 0100 	strd	r0, r1, [sp]
 8004210:	4824      	ldr	r0, [pc, #144]	; (80042a4 <rxBluetooth+0x548>)
 8004212:	f7fe fff9 	bl	8003208 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 8004216:	2120      	movs	r1, #32
 8004218:	f1a5 0014 	sub.w	r0, r5, #20
 800421c:	f7fd f80d 	bl	800123a <putQueueDataTx>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004220:	2104      	movs	r1, #4
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <rxBluetooth+0x52c>)
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f004 fb84 	bl	8008932 <osSignalSet>
				break;
 800422a:	e5f7      	b.n	8003e1c <rxBluetooth+0xc0>
				MACRO_ANULA_INATIVIDADE
 800422c:	4b11      	ldr	r3, [pc, #68]	; (8004274 <rxBluetooth+0x518>)
 800422e:	2200      	movs	r2, #0
 8004230:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004232:	2104      	movs	r1, #4
 8004234:	4b14      	ldr	r3, [pc, #80]	; (8004288 <rxBluetooth+0x52c>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	f004 fb7b 	bl	8008932 <osSignalSet>
				PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 800423c:	4a11      	ldr	r2, [pc, #68]	; (8004284 <rxBluetooth+0x528>)
 800423e:	f892 3108 	ldrb.w	r3, [r2, #264]	; 0x108
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
				if(PrimitiveStates.Buzzer){
 800424c:	b95b      	cbnz	r3, 8004266 <rxBluetooth+0x50a>
				osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 800424e:	2200      	movs	r2, #0
 8004250:	2109      	movs	r1, #9
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <rxBluetooth+0x534>)
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f004 fc03 	bl	8008a60 <osMessagePut>
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 800425a:	480c      	ldr	r0, [pc, #48]	; (800428c <rxBluetooth+0x530>)
 800425c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8004260:	2135      	movs	r1, #53	; 0x35
 8004262:	4798      	blx	r3
}
 8004264:	e5da      	b.n	8003e1c <rxBluetooth+0xc0>
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004266:	2104      	movs	r1, #4
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <rxBluetooth+0x52c>)
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	f004 fb61 	bl	8008932 <osSignalSet>
 8004270:	e7ed      	b.n	800424e <rxBluetooth+0x4f2>
 8004272:	bf00      	nop
 8004274:	2000122a 	.word	0x2000122a
 8004278:	20000e60 	.word	0x20000e60
 800427c:	20000890 	.word	0x20000890
 8004280:	200011a0 	.word	0x200011a0
 8004284:	200007e8 	.word	0x200007e8
 8004288:	20000b9c 	.word	0x20000b9c
 800428c:	20000e4c 	.word	0x20000e4c
 8004290:	200007e0 	.word	0x200007e0
 8004294:	20001228 	.word	0x20001228
 8004298:	20000868 	.word	0x20000868
 800429c:	20001800 	.word	0x20001800
 80042a0:	200008b0 	.word	0x200008b0
 80042a4:	20001790 	.word	0x20001790

080042a8 <StartBluetooth>:
{
 80042a8:	b500      	push	{lr}
 80042aa:	b085      	sub	sp, #20
	initBluetooth();
 80042ac:	f7ff fb5a 	bl	8003964 <initBluetooth>
 80042b0:	e00f      	b.n	80042d2 <StartBluetooth+0x2a>
			txBleComando(&bluetooth);
 80042b2:	4810      	ldr	r0, [pc, #64]	; (80042f4 <StartBluetooth+0x4c>)
 80042b4:	f7fd f92e 	bl	8001514 <txBleComando>
			rxBluetooth();
 80042b8:	f7ff fd50 	bl	8003d5c <rxBluetooth>
			txBluetooth();
 80042bc:	f7ff fbcc 	bl	8003a58 <txBluetooth>
 80042c0:	e010      	b.n	80042e4 <StartBluetooth+0x3c>
			osSignalSet(bluetooth.Task, newMessage);
 80042c2:	210a      	movs	r1, #10
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <StartBluetooth+0x4c>)
 80042c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042c8:	f004 fb33 	bl	8008932 <osSignalSet>
		osDelay(40);
 80042cc:	2028      	movs	r0, #40	; 0x28
 80042ce:	f004 fad2 	bl	8008876 <osDelay>
		evt = osSignalWait(newMessage, osWaitForever);
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	210a      	movs	r1, #10
 80042d8:	a801      	add	r0, sp, #4
 80042da:	f004 fb5c 	bl	8008996 <osSignalWait>
		if (evt.status == osEventSignal) {
 80042de:	9b01      	ldr	r3, [sp, #4]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d0e6      	beq.n	80042b2 <StartBluetooth+0xa>
		if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx))
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <StartBluetooth+0x4c>)
 80042e6:	6918      	ldr	r0, [r3, #16]
 80042e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042ea:	4798      	blx	r3
 80042ec:	2800      	cmp	r0, #0
 80042ee:	d0e8      	beq.n	80042c2 <StartBluetooth+0x1a>
 80042f0:	e7ec      	b.n	80042cc <StartBluetooth+0x24>
 80042f2:	bf00      	nop
 80042f4:	20000e4c 	.word	0x20000e4c

080042f8 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 80042f8:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 80042fa:	4d0a      	ldr	r5, [pc, #40]	; (8004324 <sequencia2Buzzer+0x2c>)
 80042fc:	210c      	movs	r1, #12
 80042fe:	4628      	mov	r0, r5
 8004300:	f003 fcce 	bl	8007ca0 <HAL_TIM_PWM_Stop>
	onDigital(&PrimitiveStates.Lampada);
 8004304:	4c08      	ldr	r4, [pc, #32]	; (8004328 <sequencia2Buzzer+0x30>)
 8004306:	4620      	mov	r0, r4
 8004308:	f7fd ff13 	bl	8002132 <onDigital>
	osDelay(100);
 800430c:	2064      	movs	r0, #100	; 0x64
 800430e:	f004 fab2 	bl	8008876 <osDelay>
	M_BUZZER_OFF
 8004312:	210c      	movs	r1, #12
 8004314:	4628      	mov	r0, r5
 8004316:	f003 fcc3 	bl	8007ca0 <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 800431a:	4620      	mov	r0, r4
 800431c:	f7fd ff13 	bl	8002146 <offDigital>
}
 8004320:	bd38      	pop	{r3, r4, r5, pc}
 8004322:	bf00      	nop
 8004324:	2000107c 	.word	0x2000107c
 8004328:	200007e8 	.word	0x200007e8

0800432c <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	b084      	sub	sp, #16
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	210f      	movs	r1, #15
 8004336:	a801      	add	r0, sp, #4
 8004338:	f004 fb2d 	bl	8008996 <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 800433c:	9b01      	ldr	r3, [sp, #4]
 800433e:	2b08      	cmp	r3, #8
 8004340:	d001      	beq.n	8004346 <waitBuzzerSignal+0x1a>
				osDelay(100);
			}
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
		}
	}
}
 8004342:	b004      	add	sp, #16
 8004344:	bd70      	pop	{r4, r5, r6, pc}
		if (evt.value.signals & SINAL_TEMP_REACH) {
 8004346:	9e02      	ldr	r6, [sp, #8]
 8004348:	f016 0f01 	tst.w	r6, #1
 800434c:	d11f      	bne.n	800438e <waitBuzzerSignal+0x62>
		if (evt.value.signals & SINAL_COMFIRMA) {
 800434e:	f016 0f04 	tst.w	r6, #4
 8004352:	d013      	beq.n	800437c <waitBuzzerSignal+0x50>
			if(!PrimitiveStates.Buzzer){
 8004354:	4b39      	ldr	r3, [pc, #228]	; (800443c <waitBuzzerSignal+0x110>)
 8004356:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800435a:	b383      	cbz	r3, 80043be <waitBuzzerSignal+0x92>
			M_BUZZER_ON
 800435c:	4c38      	ldr	r4, [pc, #224]	; (8004440 <waitBuzzerSignal+0x114>)
 800435e:	210c      	movs	r1, #12
 8004360:	4620      	mov	r0, r4
 8004362:	f003 fc9d 	bl	8007ca0 <HAL_TIM_PWM_Stop>
			osDelay(70);
 8004366:	2046      	movs	r0, #70	; 0x46
 8004368:	f004 fa85 	bl	8008876 <osDelay>
			M_BUZZER_OFF
 800436c:	210c      	movs	r1, #12
 800436e:	4620      	mov	r0, r4
 8004370:	f003 fc96 	bl	8007ca0 <HAL_TIM_PWM_Stop>
			osDelay(500);
 8004374:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004378:	f004 fa7d 	bl	8008876 <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 800437c:	f016 0f02 	tst.w	r6, #2
 8004380:	d039      	beq.n	80043f6 <waitBuzzerSignal+0xca>
			if(!PrimitiveStates.Buzzer){
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <waitBuzzerSignal+0x110>)
 8004384:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8004388:	b1f3      	cbz	r3, 80043c8 <waitBuzzerSignal+0x9c>
			for (int i = 0; i < N_REP_SINAL_NEGADO; ++i) {
 800438a:	2400      	movs	r4, #0
 800438c:	e031      	b.n	80043f2 <waitBuzzerSignal+0xc6>
			onDigital(&PrimitiveStates.Lampada);
 800438e:	482b      	ldr	r0, [pc, #172]	; (800443c <waitBuzzerSignal+0x110>)
 8004390:	f7fd fecf 	bl	8002132 <onDigital>
			for (int i = 0; i < 5; ++i) {
 8004394:	2400      	movs	r4, #0
 8004396:	e00f      	b.n	80043b8 <waitBuzzerSignal+0x8c>
				M_BUZZER_ON
 8004398:	4d29      	ldr	r5, [pc, #164]	; (8004440 <waitBuzzerSignal+0x114>)
 800439a:	210c      	movs	r1, #12
 800439c:	4628      	mov	r0, r5
 800439e:	f003 fc7f 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				osDelay(50);
 80043a2:	2032      	movs	r0, #50	; 0x32
 80043a4:	f004 fa67 	bl	8008876 <osDelay>
				M_BUZZER_OFF
 80043a8:	210c      	movs	r1, #12
 80043aa:	4628      	mov	r0, r5
 80043ac:	f003 fc78 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				osDelay(30);
 80043b0:	201e      	movs	r0, #30
 80043b2:	f004 fa60 	bl	8008876 <osDelay>
			for (int i = 0; i < 5; ++i) {
 80043b6:	3401      	adds	r4, #1
 80043b8:	2c04      	cmp	r4, #4
 80043ba:	dded      	ble.n	8004398 <waitBuzzerSignal+0x6c>
 80043bc:	e7c7      	b.n	800434e <waitBuzzerSignal+0x22>
				M_BUZZER_OFF
 80043be:	210c      	movs	r1, #12
 80043c0:	481f      	ldr	r0, [pc, #124]	; (8004440 <waitBuzzerSignal+0x114>)
 80043c2:	f003 fc6d 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				return;
 80043c6:	e7bc      	b.n	8004342 <waitBuzzerSignal+0x16>
				M_BUZZER_OFF
 80043c8:	210c      	movs	r1, #12
 80043ca:	481d      	ldr	r0, [pc, #116]	; (8004440 <waitBuzzerSignal+0x114>)
 80043cc:	f003 fc68 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				return;
 80043d0:	e7b7      	b.n	8004342 <waitBuzzerSignal+0x16>
				M_BUZZER_ON
 80043d2:	4d1b      	ldr	r5, [pc, #108]	; (8004440 <waitBuzzerSignal+0x114>)
 80043d4:	210c      	movs	r1, #12
 80043d6:	4628      	mov	r0, r5
 80043d8:	f003 fc62 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				osDelay(70);
 80043dc:	2046      	movs	r0, #70	; 0x46
 80043de:	f004 fa4a 	bl	8008876 <osDelay>
				M_BUZZER_OFF
 80043e2:	210c      	movs	r1, #12
 80043e4:	4628      	mov	r0, r5
 80043e6:	f003 fc5b 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				osDelay(50);
 80043ea:	2032      	movs	r0, #50	; 0x32
 80043ec:	f004 fa43 	bl	8008876 <osDelay>
			for (int i = 0; i < N_REP_SINAL_NEGADO; ++i) {
 80043f0:	3401      	adds	r4, #1
 80043f2:	2c01      	cmp	r4, #1
 80043f4:	dded      	ble.n	80043d2 <waitBuzzerSignal+0xa6>
		if (evt.value.signals & SINAL_PRONTO) {
 80043f6:	f016 0f08 	tst.w	r6, #8
 80043fa:	d0a2      	beq.n	8004342 <waitBuzzerSignal+0x16>
			for (int i = 0; i < N_REP_SINAL_PRONTO; ++i) {
 80043fc:	2400      	movs	r4, #0
 80043fe:	e016      	b.n	800442e <waitBuzzerSignal+0x102>
				M_BUZZER_ON
 8004400:	4e0f      	ldr	r6, [pc, #60]	; (8004440 <waitBuzzerSignal+0x114>)
 8004402:	210c      	movs	r1, #12
 8004404:	4630      	mov	r0, r6
 8004406:	f003 fc4b 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				onDigital(&PrimitiveStates.Lampada);
 800440a:	4d0c      	ldr	r5, [pc, #48]	; (800443c <waitBuzzerSignal+0x110>)
 800440c:	4628      	mov	r0, r5
 800440e:	f7fd fe90 	bl	8002132 <onDigital>
				osDelay(250);
 8004412:	20fa      	movs	r0, #250	; 0xfa
 8004414:	f004 fa2f 	bl	8008876 <osDelay>
				M_BUZZER_OFF
 8004418:	210c      	movs	r1, #12
 800441a:	4630      	mov	r0, r6
 800441c:	f003 fc40 	bl	8007ca0 <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 8004420:	4628      	mov	r0, r5
 8004422:	f7fd fe90 	bl	8002146 <offDigital>
				osDelay(100);
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f004 fa25 	bl	8008876 <osDelay>
			for (int i = 0; i < N_REP_SINAL_PRONTO; ++i) {
 800442c:	3401      	adds	r4, #1
 800442e:	2c09      	cmp	r4, #9
 8004430:	dde6      	ble.n	8004400 <waitBuzzerSignal+0xd4>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 8004432:	4802      	ldr	r0, [pc, #8]	; (800443c <waitBuzzerSignal+0x110>)
 8004434:	f7fd fe7d 	bl	8002132 <onDigital>
 8004438:	e783      	b.n	8004342 <waitBuzzerSignal+0x16>
 800443a:	bf00      	nop
 800443c:	200007e8 	.word	0x200007e8
 8004440:	2000107c 	.word	0x2000107c

08004444 <StartBuzzer>:
{
 8004444:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 8004446:	f7ff ff57 	bl	80042f8 <sequencia2Buzzer>
		waitBuzzerSignal();
 800444a:	f7ff ff6f 	bl	800432c <waitBuzzerSignal>
		osThreadYield();
 800444e:	f004 fa06 	bl	800885e <osThreadYield>
		osDelay(100);
 8004452:	2064      	movs	r0, #100	; 0x64
 8004454:	f004 fa0f 	bl	8008876 <osDelay>
	for(;;)
 8004458:	e7f7      	b.n	800444a <StartBuzzer+0x6>
 800445a:	0000      	movs	r0, r0
 800445c:	0000      	movs	r0, r0
	...

08004460 <setupEepromVarArr>:
		osThreadYield();
		osDelay(500);
	}
}

void setupEepromVarArr(void){
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	b085      	sub	sp, #20

	// tempo de LUZ.
	init_objArrEeprom(&E_tempoDelayLuz, SOFT_RESET, addrTEMPO_LUZ, DATA_16BITS, &PrimitiveStates.Lampada.limitOn);
 8004466:	4cce      	ldr	r4, [pc, #824]	; (80047a0 <setupEepromVarArr+0x340>)
 8004468:	f8df 9338 	ldr.w	r9, [pc, #824]	; 80047a4 <setupEepromVarArr+0x344>
 800446c:	f8cd 9000 	str.w	r9, [sp]
 8004470:	2301      	movs	r3, #1
 8004472:	461a      	mov	r2, r3
 8004474:	2100      	movs	r1, #0
 8004476:	4620      	mov	r0, r4
 8004478:	f7fd fe2c 	bl	80020d4 <init_objArrEeprom>
	E_tempoDelayLuz.M_setStdValues16bits(&E_tempoDelayLuz, 0 ,TIME_LAMPADA,6000);
 800447c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800447e:	f241 7370 	movw	r3, #6000	; 0x1770
 8004482:	222d      	movs	r2, #45	; 0x2d
 8004484:	2100      	movs	r1, #0
 8004486:	4620      	mov	r0, r4
 8004488:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_tempoDelayLuz);
 800448a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 80047a8 <setupEepromVarArr+0x348>
 800448e:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004492:	4621      	mov	r1, r4
 8004494:	4640      	mov	r0, r8
 8004496:	4798      	blx	r3

	// HORIMETRO, total apenas de HORAS em funcionamento.
	init_objArrEeprom(&E_horimetroHoras, HARD_RESET, addrHORIMETRO, DATA_16BITS, &Calendario.Horimetro_horas);
 8004498:	4ec4      	ldr	r6, [pc, #784]	; (80047ac <setupEepromVarArr+0x34c>)
 800449a:	4cc5      	ldr	r4, [pc, #788]	; (80047b0 <setupEepromVarArr+0x350>)
 800449c:	9400      	str	r4, [sp, #0]
 800449e:	2301      	movs	r3, #1
 80044a0:	2203      	movs	r2, #3
 80044a2:	4619      	mov	r1, r3
 80044a4:	4630      	mov	r0, r6
 80044a6:	f7fd fe15 	bl	80020d4 <init_objArrEeprom>
	E_horimetroHoras.M_setStdValues16bits(&E_horimetroHoras, 0,0,60000);
 80044aa:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80044ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044b0:	2200      	movs	r2, #0
 80044b2:	4611      	mov	r1, r2
 80044b4:	4630      	mov	r0, r6
 80044b6:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroHoras);
 80044b8:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80044bc:	4631      	mov	r1, r6
 80044be:	4640      	mov	r0, r8
 80044c0:	4798      	blx	r3

	// HORIMETRO, parte em MINUTOS do total.
	init_objArrEeprom(&E_horimetroMinutos, HARD_RESET, addrMINUTIMETRO, DATA_8BITS, &Calendario.Horimetro_parcial_min);
 80044c2:	4ebc      	ldr	r6, [pc, #752]	; (80047b4 <setupEepromVarArr+0x354>)
 80044c4:	1ca3      	adds	r3, r4, #2
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2300      	movs	r3, #0
 80044ca:	2205      	movs	r2, #5
 80044cc:	2101      	movs	r1, #1
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fd fe00 	bl	80020d4 <init_objArrEeprom>
	E_horimetroMinutos.M_setStdValues8bits(&E_horimetroMinutos, 0,0,60);
 80044d4:	6b35      	ldr	r5, [r6, #48]	; 0x30
 80044d6:	233c      	movs	r3, #60	; 0x3c
 80044d8:	2200      	movs	r2, #0
 80044da:	4611      	mov	r1, r2
 80044dc:	4630      	mov	r0, r6
 80044de:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroMinutos);
 80044e0:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80044e4:	4631      	mov	r1, r6
 80044e6:	4640      	mov	r0, r8
 80044e8:	4798      	blx	r3

	// contagem total de ciclos realizados pelo TIMER.
	init_objArrEeprom(&E_totalCiclos, HARD_RESET, addrTOTAL_GERAL, DATA_16BITS, &Calendario.TotalCiclos);
 80044ea:	4eb3      	ldr	r6, [pc, #716]	; (80047b8 <setupEepromVarArr+0x358>)
 80044ec:	1d23      	adds	r3, r4, #4
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2301      	movs	r3, #1
 80044f2:	2209      	movs	r2, #9
 80044f4:	4619      	mov	r1, r3
 80044f6:	4630      	mov	r0, r6
 80044f8:	f7fd fdec 	bl	80020d4 <init_objArrEeprom>
	E_totalCiclos.M_setStdValues16bits(&E_totalCiclos, 0,0,60000);
 80044fc:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80044fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004502:	2200      	movs	r2, #0
 8004504:	4611      	mov	r1, r2
 8004506:	4630      	mov	r0, r6
 8004508:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_totalCiclos);
 800450a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800450e:	4631      	mov	r1, r6
 8004510:	4640      	mov	r0, r8
 8004512:	4798      	blx	r3

	// contagem total de vezes que o sensor de TETO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContTetoMax, HARD_RESET, addrCONT_MAX_TETO, DATA_16BITS, &Calendario.ContMaxTeto);
 8004514:	4ea9      	ldr	r6, [pc, #676]	; (80047bc <setupEepromVarArr+0x35c>)
 8004516:	1da3      	adds	r3, r4, #6
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2301      	movs	r3, #1
 800451c:	220b      	movs	r2, #11
 800451e:	4619      	mov	r1, r3
 8004520:	4630      	mov	r0, r6
 8004522:	f7fd fdd7 	bl	80020d4 <init_objArrEeprom>
	E_ContTetoMax.M_setStdValues16bits(&E_ContTetoMax, 0,0,60000);
 8004526:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8004528:	f64e 2360 	movw	r3, #60000	; 0xea60
 800452c:	2200      	movs	r2, #0
 800452e:	4611      	mov	r1, r2
 8004530:	4630      	mov	r0, r6
 8004532:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_ContTetoMax);
 8004534:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004538:	4631      	mov	r1, r6
 800453a:	4640      	mov	r0, r8
 800453c:	4798      	blx	r3

	// contagem total de vezes que o sensor de LASTRO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContLastroMax, HARD_RESET, addrCONT_MAX_LASTRO, DATA_16BITS, &Calendario.ContMaxLastro);
 800453e:	4da0      	ldr	r5, [pc, #640]	; (80047c0 <setupEepromVarArr+0x360>)
 8004540:	3408      	adds	r4, #8
 8004542:	9400      	str	r4, [sp, #0]
 8004544:	2301      	movs	r3, #1
 8004546:	220d      	movs	r2, #13
 8004548:	4619      	mov	r1, r3
 800454a:	4628      	mov	r0, r5
 800454c:	f7fd fdc2 	bl	80020d4 <init_objArrEeprom>
	E_ContLastroMax.M_setStdValues16bits(&E_ContLastroMax, 0,0,60000);
 8004550:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8004552:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004556:	2200      	movs	r2, #0
 8004558:	4611      	mov	r1, r2
 800455a:	4628      	mov	r0, r5
 800455c:	47a0      	blx	r4
	eeprom.M_AddOnArr(&eeprom,	&E_ContLastroMax);
 800455e:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004562:	4629      	mov	r1, r5
 8004564:	4640      	mov	r0, r8
 8004566:	4798      	blx	r3

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE TETO -----------------*/
	// HISTERESE em graus do TETO.
	init_objArrEeprom(&E_hitereseStateTeto, SOFT_RESET, addrTETO_HIST, DATA_16BITS, &PrimitiveStates.Teto.histerese);
 8004568:	4c96      	ldr	r4, [pc, #600]	; (80047c4 <setupEepromVarArr+0x364>)
 800456a:	f109 03a4 	add.w	r3, r9, #164	; 0xa4
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2301      	movs	r3, #1
 8004572:	2229      	movs	r2, #41	; 0x29
 8004574:	2100      	movs	r1, #0
 8004576:	4620      	mov	r0, r4
 8004578:	f7fd fdac 	bl	80020d4 <init_objArrEeprom>
	E_hitereseStateTeto.M_setStdValues16bits(&E_hitereseStateTeto, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 800457c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800457e:	2314      	movs	r3, #20
 8004580:	2203      	movs	r2, #3
 8004582:	2100      	movs	r1, #0
 8004584:	4620      	mov	r0, r4
 8004586:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateTeto);
 8004588:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800458c:	4621      	mov	r1, r4
 800458e:	4640      	mov	r0, r8
 8004590:	4798      	blx	r3

	// LIMITE para TETO.
	init_objArrEeprom(&E_limiteTeto, SOFT_RESET, addrTETO_LIMIT, DATA_16BITS, &PrimitiveStates.Teto.limite);
 8004592:	4c8d      	ldr	r4, [pc, #564]	; (80047c8 <setupEepromVarArr+0x368>)
 8004594:	f109 03a2 	add.w	r3, r9, #162	; 0xa2
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2301      	movs	r3, #1
 800459c:	222b      	movs	r2, #43	; 0x2b
 800459e:	2100      	movs	r1, #0
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7fd fd97 	bl	80020d4 <init_objArrEeprom>
	E_limiteTeto.M_setStdValues16bits(&E_limiteTeto, 0 ,STD_LIMITETETO,STD_LIMITE_TEMP);
 80045a6:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80045a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80045ac:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80045b0:	2100      	movs	r1, #0
 80045b2:	4620      	mov	r0, r4
 80045b4:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_limiteTeto);
 80045b6:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80045ba:	4621      	mov	r1, r4
 80045bc:	4640      	mov	r0, r8
 80045be:	4798      	blx	r3

	// KP value para TETO.
	init_objArrEeprom(&E_kPTeto, SOFT_RESET, addrTETO_KP, DATA_DOUBLE, &PrimitiveStates.Teto.kp);
 80045c0:	f8df a208 	ldr.w	sl, [pc, #520]	; 80047cc <setupEepromVarArr+0x36c>
 80045c4:	f109 0372 	add.w	r3, r9, #114	; 0x72
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	2304      	movs	r3, #4
 80045cc:	220f      	movs	r2, #15
 80045ce:	2100      	movs	r1, #0
 80045d0:	4650      	mov	r0, sl
 80045d2:	f7fd fd7f 	bl	80020d4 <init_objArrEeprom>
	E_kPTeto.M_setStdValuesDouble(&E_kPTeto, 0 ,STD_KP,1000);
 80045d6:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 80045da:	2400      	movs	r4, #0
 80045dc:	2500      	movs	r5, #0
 80045de:	2600      	movs	r6, #0
 80045e0:	4f7b      	ldr	r7, [pc, #492]	; (80047d0 <setupEepromVarArr+0x370>)
 80045e2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80045e6:	2200      	movs	r2, #0
 80045e8:	4b7a      	ldr	r3, [pc, #488]	; (80047d4 <setupEepromVarArr+0x374>)
 80045ea:	e9cd 2300 	strd	r2, r3, [sp]
 80045ee:	4622      	mov	r2, r4
 80045f0:	462b      	mov	r3, r5
 80045f2:	4650      	mov	r0, sl
 80045f4:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPTeto);
 80045f6:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80045fa:	4651      	mov	r1, sl
 80045fc:	4640      	mov	r0, r8
 80045fe:	4798      	blx	r3

	// KI value para TETO.
	init_objArrEeprom(&E_kITeto, SOFT_RESET, addrTETO_KI, DATA_DOUBLE, &PrimitiveStates.Teto.ki);
 8004600:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 80047d8 <setupEepromVarArr+0x378>
 8004604:	f109 037a 	add.w	r3, r9, #122	; 0x7a
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2304      	movs	r3, #4
 800460c:	2217      	movs	r2, #23
 800460e:	2100      	movs	r1, #0
 8004610:	4650      	mov	r0, sl
 8004612:	f7fd fd5f 	bl	80020d4 <init_objArrEeprom>
	E_kITeto.M_setStdValuesDouble(&E_kITeto, 0 ,STD_KI,1000);
 8004616:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 800461a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800461e:	a35c      	add	r3, pc, #368	; (adr r3, 8004790 <setupEepromVarArr+0x330>)
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	e9cd 2300 	strd	r2, r3, [sp]
 8004628:	4622      	mov	r2, r4
 800462a:	462b      	mov	r3, r5
 800462c:	4650      	mov	r0, sl
 800462e:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kITeto);
 8004630:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004634:	4651      	mov	r1, sl
 8004636:	4640      	mov	r0, r8
 8004638:	4798      	blx	r3

	// KD value para TETO.
	init_objArrEeprom(&E_kDTeto, SOFT_RESET, addrTETO_KD, DATA_DOUBLE, &PrimitiveStates.Teto.kd);
 800463a:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80047dc <setupEepromVarArr+0x37c>
 800463e:	f109 0382 	add.w	r3, r9, #130	; 0x82
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2304      	movs	r3, #4
 8004646:	2221      	movs	r2, #33	; 0x21
 8004648:	2100      	movs	r1, #0
 800464a:	4650      	mov	r0, sl
 800464c:	f7fd fd42 	bl	80020d4 <init_objArrEeprom>
	E_kDTeto.M_setStdValuesDouble(&E_kDTeto, 0 ,STD_KD,1000);
 8004650:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8004654:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004658:	f20f 1c3c 	addw	ip, pc, #316	; 0x13c
 800465c:	e9dc bc00 	ldrd	fp, ip, [ip]
 8004660:	e9cd bc00 	strd	fp, ip, [sp]
 8004664:	4622      	mov	r2, r4
 8004666:	462b      	mov	r3, r5
 8004668:	4650      	mov	r0, sl
 800466a:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDTeto);
 800466c:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004670:	4651      	mov	r1, sl
 8004672:	4640      	mov	r0, r8
 8004674:	4798      	blx	r3

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE LASTRO -----------------*/
	// HISTERESE em graus do LASTRO.
	init_objArrEeprom(&E_hitereseStateLastro, SOFT_RESET, addrLASTRO_HIST, DATA_16BITS, &PrimitiveStates.Lastro.histerese);
 8004676:	f8df a168 	ldr.w	sl, [pc, #360]	; 80047e0 <setupEepromVarArr+0x380>
 800467a:	f109 03ec 	add.w	r3, r9, #236	; 0xec
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	2301      	movs	r3, #1
 8004682:	2249      	movs	r2, #73	; 0x49
 8004684:	2100      	movs	r1, #0
 8004686:	4650      	mov	r0, sl
 8004688:	f7fd fd24 	bl	80020d4 <init_objArrEeprom>
	E_hitereseStateLastro.M_setStdValues16bits(&E_hitereseStateLastro, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 800468c:	2314      	movs	r3, #20
 800468e:	2203      	movs	r2, #3
 8004690:	2100      	movs	r1, #0
 8004692:	4650      	mov	r0, sl
 8004694:	f8da c034 	ldr.w	ip, [sl, #52]	; 0x34
 8004698:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateLastro);
 800469a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800469e:	4651      	mov	r1, sl
 80046a0:	4640      	mov	r0, r8
 80046a2:	4798      	blx	r3

	// LIMITE para LASTRO.
	init_objArrEeprom(&E_limiteLastro, SOFT_RESET, addrLASTRO_LIMIT, DATA_16BITS, &PrimitiveStates.Lastro.limite);
 80046a4:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80047e4 <setupEepromVarArr+0x384>
 80046a8:	f109 03ea 	add.w	r3, r9, #234	; 0xea
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2301      	movs	r3, #1
 80046b0:	224b      	movs	r2, #75	; 0x4b
 80046b2:	2100      	movs	r1, #0
 80046b4:	4650      	mov	r0, sl
 80046b6:	f7fd fd0d 	bl	80020d4 <init_objArrEeprom>
	E_limiteLastro.M_setStdValues16bits(&E_limiteLastro, 0 ,STD_LIMITELASTRO,STD_LIMITE_TEMP);
 80046ba:	f44f 7316 	mov.w	r3, #600	; 0x258
 80046be:	f240 12db 	movw	r2, #475	; 0x1db
 80046c2:	2100      	movs	r1, #0
 80046c4:	4650      	mov	r0, sl
 80046c6:	f8da c034 	ldr.w	ip, [sl, #52]	; 0x34
 80046ca:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_limiteLastro);
 80046cc:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80046d0:	4651      	mov	r1, sl
 80046d2:	4640      	mov	r0, r8
 80046d4:	4798      	blx	r3

	// KP value para LASTRO.
	init_objArrEeprom(&E_kPLastro, SOFT_RESET, addrLASTRO_KP, DATA_DOUBLE, &PrimitiveStates.Lastro.kp);
 80046d6:	f8df a110 	ldr.w	sl, [pc, #272]	; 80047e8 <setupEepromVarArr+0x388>
 80046da:	f109 03ba 	add.w	r3, r9, #186	; 0xba
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2304      	movs	r3, #4
 80046e2:	222d      	movs	r2, #45	; 0x2d
 80046e4:	2100      	movs	r1, #0
 80046e6:	4650      	mov	r0, sl
 80046e8:	f7fd fcf4 	bl	80020d4 <init_objArrEeprom>
	E_kPLastro.M_setStdValuesDouble(&E_kPLastro, 0 ,STD_KP,1000);
 80046ec:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 80046f0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <setupEepromVarArr+0x374>)
 80046f8:	e9cd 2300 	strd	r2, r3, [sp]
 80046fc:	4622      	mov	r2, r4
 80046fe:	462b      	mov	r3, r5
 8004700:	4650      	mov	r0, sl
 8004702:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPLastro);
 8004704:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004708:	4651      	mov	r1, sl
 800470a:	4640      	mov	r0, r8
 800470c:	4798      	blx	r3

	// KI value para LASTRO.
	init_objArrEeprom(&E_kILastro, SOFT_RESET, addrLASTRO_KI, DATA_DOUBLE, &PrimitiveStates.Lastro.ki);
 800470e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80047ec <setupEepromVarArr+0x38c>
 8004712:	f109 03c2 	add.w	r3, r9, #194	; 0xc2
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2304      	movs	r3, #4
 800471a:	2235      	movs	r2, #53	; 0x35
 800471c:	2100      	movs	r1, #0
 800471e:	4650      	mov	r0, sl
 8004720:	f7fd fcd8 	bl	80020d4 <init_objArrEeprom>
	E_kILastro.M_setStdValuesDouble(&E_kILastro, 0 ,STD_KI,1000);
 8004724:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8004728:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800472c:	a318      	add	r3, pc, #96	; (adr r3, 8004790 <setupEepromVarArr+0x330>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	e9cd 2300 	strd	r2, r3, [sp]
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	4650      	mov	r0, sl
 800473c:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kILastro);
 800473e:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004742:	4651      	mov	r1, sl
 8004744:	4640      	mov	r0, r8
 8004746:	4798      	blx	r3

	// KD value para LASTRO.
	init_objArrEeprom(&E_kDLastro, SOFT_RESET, addrLASTRO_KD, DATA_DOUBLE, &PrimitiveStates.Lastro.kd);
 8004748:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80047f0 <setupEepromVarArr+0x390>
 800474c:	f109 03ca 	add.w	r3, r9, #202	; 0xca
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2304      	movs	r3, #4
 8004754:	2241      	movs	r2, #65	; 0x41
 8004756:	2100      	movs	r1, #0
 8004758:	4650      	mov	r0, sl
 800475a:	f7fd fcbb 	bl	80020d4 <init_objArrEeprom>
	E_kDLastro.M_setStdValuesDouble(&E_kDLastro, 0 ,STD_KD,1000);
 800475e:	f8da 1040 	ldr.w	r1, [sl, #64]	; 0x40
 8004762:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004766:	f20f 0c30 	addw	ip, pc, #48	; 0x30
 800476a:	e9dc bc00 	ldrd	fp, ip, [ip]
 800476e:	e9cd bc00 	strd	fp, ip, [sp]
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	4650      	mov	r0, sl
 8004778:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDLastro);
 800477a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 800477e:	4651      	mov	r1, sl
 8004780:	4640      	mov	r0, r8
 8004782:	4798      	blx	r3

	//flag buzzer
	init_objArrEeprom(&E_FlagBuzzer, SOFT_RESET, addrBUZZER, DATA_8BITS, &PrimitiveStates.Buzzer);
 8004784:	4c1b      	ldr	r4, [pc, #108]	; (80047f4 <setupEepromVarArr+0x394>)
 8004786:	f109 03fa 	add.w	r3, r9, #250	; 0xfa
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	e034      	b.n	80047f8 <setupEepromVarArr+0x398>
 800478e:	bf00      	nop
 8004790:	47ae147b 	.word	0x47ae147b
 8004794:	3f847ae1 	.word	0x3f847ae1
 8004798:	33333333 	.word	0x33333333
 800479c:	3fd33333 	.word	0x3fd33333
 80047a0:	20001668 	.word	0x20001668
 80047a4:	200007f6 	.word	0x200007f6
 80047a8:	200016f8 	.word	0x200016f8
 80047ac:	20001398 	.word	0x20001398
 80047b0:	200007d4 	.word	0x200007d4
 80047b4:	200013e0 	.word	0x200013e0
 80047b8:	200016b0 	.word	0x200016b0
 80047bc:	20001278 	.word	0x20001278
 80047c0:	20001230 	.word	0x20001230
 80047c4:	20001350 	.word	0x20001350
 80047c8:	20001620 	.word	0x20001620
 80047cc:	20001590 	.word	0x20001590
 80047d0:	408f4000 	.word	0x408f4000
 80047d4:	403e0000 	.word	0x403e0000
 80047d8:	20001500 	.word	0x20001500
 80047dc:	20001470 	.word	0x20001470
 80047e0:	20001308 	.word	0x20001308
 80047e4:	200015d8 	.word	0x200015d8
 80047e8:	20001548 	.word	0x20001548
 80047ec:	200014b8 	.word	0x200014b8
 80047f0:	20001428 	.word	0x20001428
 80047f4:	200012c0 	.word	0x200012c0
 80047f8:	2300      	movs	r3, #0
 80047fa:	223d      	movs	r2, #61	; 0x3d
 80047fc:	4619      	mov	r1, r3
 80047fe:	4620      	mov	r0, r4
 8004800:	f7fd fc68 	bl	80020d4 <init_objArrEeprom>
	E_FlagBuzzer.M_setStdValues8bits(&E_FlagBuzzer, 0,0,1);
 8004804:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004806:	2301      	movs	r3, #1
 8004808:	2200      	movs	r2, #0
 800480a:	4611      	mov	r1, r2
 800480c:	4620      	mov	r0, r4
 800480e:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_FlagBuzzer);
 8004810:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8004814:	4621      	mov	r1, r4
 8004816:	4640      	mov	r0, r8
 8004818:	4798      	blx	r3

}
 800481a:	b005      	add	sp, #20
 800481c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004820 <processaEeprom>:


void processaEeprom(void){
 8004820:	b500      	push	{lr}
 8004822:	b085      	sub	sp, #20
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8004824:	f04f 32ff 	mov.w	r2, #4294967295
 8004828:	4b34      	ldr	r3, [pc, #208]	; (80048fc <processaEeprom+0xdc>)
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	a801      	add	r0, sp, #4
 800482e:	f004 f94a 	bl	8008ac6 <osMessageGet>
	if (evt.status == osEventMessage) {
 8004832:	9b01      	ldr	r3, [sp, #4]
 8004834:	2b10      	cmp	r3, #16
 8004836:	d002      	beq.n	800483e <processaEeprom+0x1e>
			break;
		default:
			break;
		}
	}
}
 8004838:	b005      	add	sp, #20
 800483a:	f85d fb04 	ldr.w	pc, [sp], #4
		switch ((unsigned int)evt.value.p) {
 800483e:	9b02      	ldr	r3, [sp, #8]
 8004840:	2b09      	cmp	r3, #9
 8004842:	d8f9      	bhi.n	8004838 <processaEeprom+0x18>
 8004844:	e8df f003 	tbb	[pc, r3]
 8004848:	1c101609 	.word	0x1c101609
 800484c:	2f270523 	.word	0x2f270523
 8004850:	5637      	.short	0x5637
			E_totalCiclos.M_update_eepromValue(&E_totalCiclos);
 8004852:	482b      	ldr	r0, [pc, #172]	; (8004900 <processaEeprom+0xe0>)
 8004854:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004856:	4798      	blx	r3
			break;
 8004858:	e7ee      	b.n	8004838 <processaEeprom+0x18>
			E_horimetroHoras.M_update_eepromValue(&E_horimetroHoras);
 800485a:	482a      	ldr	r0, [pc, #168]	; (8004904 <processaEeprom+0xe4>)
 800485c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800485e:	4798      	blx	r3
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 8004860:	4829      	ldr	r0, [pc, #164]	; (8004908 <processaEeprom+0xe8>)
 8004862:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004864:	4798      	blx	r3
			break;
 8004866:	e7e7      	b.n	8004838 <processaEeprom+0x18>
			eeprom.M_resetAllVar(&eeprom,SOFT_RESET);
 8004868:	4828      	ldr	r0, [pc, #160]	; (800490c <processaEeprom+0xec>)
 800486a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800486e:	2100      	movs	r1, #0
 8004870:	4798      	blx	r3
			break;
 8004872:	e7e1      	b.n	8004838 <processaEeprom+0x18>
			eeprom.M_resetAllVar(&eeprom,HARD_RESET);
 8004874:	4825      	ldr	r0, [pc, #148]	; (800490c <processaEeprom+0xec>)
 8004876:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800487a:	2101      	movs	r1, #1
 800487c:	4798      	blx	r3
			break;
 800487e:	e7db      	b.n	8004838 <processaEeprom+0x18>
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 8004880:	4823      	ldr	r0, [pc, #140]	; (8004910 <processaEeprom+0xf0>)
 8004882:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004884:	4798      	blx	r3
			E_limiteLastro.M_update_eepromValue(&E_limiteLastro);
 8004886:	4823      	ldr	r0, [pc, #140]	; (8004914 <processaEeprom+0xf4>)
 8004888:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800488a:	4798      	blx	r3
			break;
 800488c:	e7d4      	b.n	8004838 <processaEeprom+0x18>
			E_tempoDelayLuz.M_update_eepromValue(&E_tempoDelayLuz);
 800488e:	4822      	ldr	r0, [pc, #136]	; (8004918 <processaEeprom+0xf8>)
 8004890:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004892:	4798      	blx	r3
			break;
 8004894:	e7d0      	b.n	8004838 <processaEeprom+0x18>
			Calendario.ContMaxTeto+=1;
 8004896:	4a21      	ldr	r2, [pc, #132]	; (800491c <processaEeprom+0xfc>)
 8004898:	88d3      	ldrh	r3, [r2, #6]
 800489a:	3301      	adds	r3, #1
 800489c:	80d3      	strh	r3, [r2, #6]
			E_ContTetoMax.M_update_eepromValue(&E_ContTetoMax);
 800489e:	4820      	ldr	r0, [pc, #128]	; (8004920 <processaEeprom+0x100>)
 80048a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048a2:	4798      	blx	r3
			break;
 80048a4:	e7c8      	b.n	8004838 <processaEeprom+0x18>
			Calendario.ContMaxLastro+=1;
 80048a6:	4a1d      	ldr	r2, [pc, #116]	; (800491c <processaEeprom+0xfc>)
 80048a8:	8913      	ldrh	r3, [r2, #8]
 80048aa:	3301      	adds	r3, #1
 80048ac:	8113      	strh	r3, [r2, #8]
			E_ContLastroMax.M_update_eepromValue(&E_ContLastroMax);
 80048ae:	481d      	ldr	r0, [pc, #116]	; (8004924 <processaEeprom+0x104>)
 80048b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048b2:	4798      	blx	r3
			break;
 80048b4:	e7c0      	b.n	8004838 <processaEeprom+0x18>
			E_hitereseStateTeto.M_update_eepromValue(&E_hitereseStateTeto);
 80048b6:	481c      	ldr	r0, [pc, #112]	; (8004928 <processaEeprom+0x108>)
 80048b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048ba:	4798      	blx	r3
			E_kPTeto.M_update_eepromValue(&E_kPTeto);
 80048bc:	481b      	ldr	r0, [pc, #108]	; (800492c <processaEeprom+0x10c>)
 80048be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048c0:	4798      	blx	r3
			E_kITeto.M_update_eepromValue(&E_kITeto);
 80048c2:	481b      	ldr	r0, [pc, #108]	; (8004930 <processaEeprom+0x110>)
 80048c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048c6:	4798      	blx	r3
			E_kDTeto.M_update_eepromValue(&E_kDTeto);
 80048c8:	481a      	ldr	r0, [pc, #104]	; (8004934 <processaEeprom+0x114>)
 80048ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048cc:	4798      	blx	r3
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 80048ce:	4810      	ldr	r0, [pc, #64]	; (8004910 <processaEeprom+0xf0>)
 80048d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048d2:	4798      	blx	r3
			E_hitereseStateLastro.M_update_eepromValue(&E_hitereseStateLastro);
 80048d4:	4818      	ldr	r0, [pc, #96]	; (8004938 <processaEeprom+0x118>)
 80048d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048d8:	4798      	blx	r3
			E_kPLastro.M_update_eepromValue(&E_kPLastro);
 80048da:	4818      	ldr	r0, [pc, #96]	; (800493c <processaEeprom+0x11c>)
 80048dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048de:	4798      	blx	r3
			E_kILastro.M_update_eepromValue(&E_kILastro);
 80048e0:	4817      	ldr	r0, [pc, #92]	; (8004940 <processaEeprom+0x120>)
 80048e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048e4:	4798      	blx	r3
			E_kDLastro.M_update_eepromValue(&E_kDLastro);
 80048e6:	4817      	ldr	r0, [pc, #92]	; (8004944 <processaEeprom+0x124>)
 80048e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048ea:	4798      	blx	r3
			E_limiteLastro.M_update_eepromValue(&E_limiteLastro);
 80048ec:	4809      	ldr	r0, [pc, #36]	; (8004914 <processaEeprom+0xf4>)
 80048ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048f0:	4798      	blx	r3
			break;
 80048f2:	e7a1      	b.n	8004838 <processaEeprom+0x18>
			E_FlagBuzzer.M_update_eepromValue(&E_FlagBuzzer);
 80048f4:	4814      	ldr	r0, [pc, #80]	; (8004948 <processaEeprom+0x128>)
 80048f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048f8:	4798      	blx	r3
}
 80048fa:	e79d      	b.n	8004838 <processaEeprom+0x18>
 80048fc:	200007e0 	.word	0x200007e0
 8004900:	200016b0 	.word	0x200016b0
 8004904:	20001398 	.word	0x20001398
 8004908:	200013e0 	.word	0x200013e0
 800490c:	200016f8 	.word	0x200016f8
 8004910:	20001620 	.word	0x20001620
 8004914:	200015d8 	.word	0x200015d8
 8004918:	20001668 	.word	0x20001668
 800491c:	200007d4 	.word	0x200007d4
 8004920:	20001278 	.word	0x20001278
 8004924:	20001230 	.word	0x20001230
 8004928:	20001350 	.word	0x20001350
 800492c:	20001590 	.word	0x20001590
 8004930:	20001500 	.word	0x20001500
 8004934:	20001470 	.word	0x20001470
 8004938:	20001308 	.word	0x20001308
 800493c:	20001548 	.word	0x20001548
 8004940:	200014b8 	.word	0x200014b8
 8004944:	20001428 	.word	0x20001428
 8004948:	200012c0 	.word	0x200012c0

0800494c <StartEeprom>:
{
 800494c:	b508      	push	{r3, lr}
	init_containerEeprom(&eeprom, &hi2c1 ,&FilaEepromHandle);
 800494e:	4c0c      	ldr	r4, [pc, #48]	; (8004980 <StartEeprom+0x34>)
 8004950:	4a0c      	ldr	r2, [pc, #48]	; (8004984 <StartEeprom+0x38>)
 8004952:	490d      	ldr	r1, [pc, #52]	; (8004988 <StartEeprom+0x3c>)
 8004954:	4620      	mov	r0, r4
 8004956:	f7fd fbb5 	bl	80020c4 <init_containerEeprom>
	setupEepromVarArr();
 800495a:	f7ff fd81 	bl	8004460 <setupEepromVarArr>
	eeprom.M_downloadAllVar(&eeprom);	//le
 800495e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004962:	4620      	mov	r0, r4
 8004964:	4798      	blx	r3
	osThreadResume(TaskTemperaturaHandle);
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <StartEeprom+0x40>)
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	f004 f8f5 	bl	8008b58 <osThreadResume>
		processaEeprom();
 800496e:	f7ff ff57 	bl	8004820 <processaEeprom>
		osThreadYield();
 8004972:	f003 ff74 	bl	800885e <osThreadYield>
		osDelay(500);
 8004976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497a:	f003 ff7c 	bl	8008876 <osDelay>
	for(;;)
 800497e:	e7f6      	b.n	800496e <StartEeprom+0x22>
 8004980:	200016f8 	.word	0x200016f8
 8004984:	200007e0 	.word	0x200007e0
 8004988:	20001014 	.word	0x20001014
 800498c:	20000ba4 	.word	0x20000ba4

08004990 <initPID>:

	}
}


void initPID(void){
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	b088      	sub	sp, #32

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <initPID+0xc0>)
 8004998:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004a54 <initPID+0xc4>
 800499c:	2700      	movs	r7, #0
 800499e:	9707      	str	r7, [sp, #28]
 80049a0:	2601      	movs	r6, #1
 80049a2:	9606      	str	r6, [sp, #24]
 80049a4:	f1a3 04a8 	sub.w	r4, r3, #168	; 0xa8
 80049a8:	e953 0106 	ldrd	r0, r1, [r3, #-24]
 80049ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049b0:	e953 0108 	ldrd	r0, r1, [r3, #-32]
 80049b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049b8:	e953 010a 	ldrd	r0, r1, [r3, #-40]	; 0x28
 80049bc:	e9cd 0100 	strd	r0, r1, [sp]
 80049c0:	f1a3 0210 	sub.w	r2, r3, #16
 80049c4:	f1a3 0108 	sub.w	r1, r3, #8
 80049c8:	4650      	mov	r0, sl
 80049ca:	f7fe fc51 	bl	8003270 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80049ce:	4d22      	ldr	r5, [pc, #136]	; (8004a58 <initPID+0xc8>)
 80049d0:	9707      	str	r7, [sp, #28]
 80049d2:	9606      	str	r6, [sp, #24]
 80049d4:	e9d4 2336 	ldrd	r2, r3, [r4, #216]	; 0xd8
 80049d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049dc:	e9d4 2334 	ldrd	r2, r3, [r4, #208]	; 0xd0
 80049e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049e4:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
 80049e8:	e9cd 2300 	strd	r2, r3, [sp]
 80049ec:	f104 03f0 	add.w	r3, r4, #240	; 0xf0
 80049f0:	f104 02e0 	add.w	r2, r4, #224	; 0xe0
 80049f4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 80049f8:	4628      	mov	r0, r5
 80049fa:	f7fe fc39 	bl	8003270 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80049fe:	4631      	mov	r1, r6
 8004a00:	4650      	mov	r0, sl
 8004a02:	f7fe fb32 	bl	800306a <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	f7fe fb2e 	bl	800306a <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004a0e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a12:	4650      	mov	r0, sl
 8004a14:	f7fe fc60 	bl	80032d8 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7fe fc5b 	bl	80032d8 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a22:	2600      	movs	r6, #0
 8004a24:	2700      	movs	r7, #0
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	f8df 9030 	ldr.w	r9, [pc, #48]	; 8004a5c <initPID+0xcc>
 8004a2e:	e9cd 8900 	strd	r8, r9, [sp]
 8004a32:	4632      	mov	r2, r6
 8004a34:	463b      	mov	r3, r7
 8004a36:	4650      	mov	r0, sl
 8004a38:	f7fe fb26 	bl	8003088 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004a3c:	e9cd 8900 	strd	r8, r9, [sp]
 8004a40:	4632      	mov	r2, r6
 8004a42:	463b      	mov	r3, r7
 8004a44:	4628      	mov	r0, r5
 8004a46:	f7fe fb1f 	bl	8003088 <PID_SetOutputLimits>
}
 8004a4a:	b008      	add	sp, #32
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	20000890 	.word	0x20000890
 8004a54:	20001800 	.word	0x20001800
 8004a58:	20001790 	.word	0x20001790
 8004a5c:	40590000 	.word	0x40590000

08004a60 <computaPID>:
void computaPID(void){
 8004a60:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004a62:	480d      	ldr	r0, [pc, #52]	; (8004a98 <computaPID+0x38>)
 8004a64:	f7fe fa57 	bl	8002f16 <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004a68:	480c      	ldr	r0, [pc, #48]	; (8004a9c <computaPID+0x3c>)
 8004a6a:	f7fe fa54 	bl	8002f16 <PID_Compute>

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 8004a6e:	4c0c      	ldr	r4, [pc, #48]	; (8004aa0 <computaPID+0x40>)
 8004a70:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 8004a74:	f7fb ffca 	bl	8000a0c <__aeabi_d2uiz>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8004a7e:	f7fd fbfc 	bl	800227a <IndviduoPID_SetPWMValueDirect>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 8004a82:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
 8004a86:	f7fb ffc1 	bl	8000a0c <__aeabi_d2uiz>
 8004a8a:	4601      	mov	r1, r0
 8004a8c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8004a90:	f7fd fbf3 	bl	800227a <IndviduoPID_SetPWMValueDirect>

}
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	20001800 	.word	0x20001800
 8004a9c:	20001790 	.word	0x20001790
 8004aa0:	200007e8 	.word	0x200007e8

08004aa4 <StartTemperatura>:
void StartTemperatura(void const * argument){
 8004aa4:	b500      	push	{lr}
 8004aa6:	b083      	sub	sp, #12
	xLastWakeTime = xTaskGetTickCount();
 8004aa8:	f004 ffa6 	bl	80099f8 <xTaskGetTickCount>
 8004aac:	9001      	str	r0, [sp, #4]
	initPID();
 8004aae:	f7ff ff6f 	bl	8004990 <initPID>
		computaPID();
 8004ab2:	f7ff ffd5 	bl	8004a60 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 8004ab6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004aba:	a801      	add	r0, sp, #4
 8004abc:	f004 f866 	bl	8008b8c <osDelayUntil>
		osThreadYield();
 8004ac0:	f003 fecd 	bl	800885e <osThreadYield>
	for(;;)	{
 8004ac4:	e7f5      	b.n	8004ab2 <StartTemperatura+0xe>
	...

08004ac8 <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 8004ac8:	b538      	push	{r3, r4, r5, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004aca:	4b4d      	ldr	r3, [pc, #308]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004acc:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8004ad0:	f8b3 00b0 	ldrh.w	r0, [r3, #176]	; 0xb0
 8004ad4:	f7fb fc96 	bl	8000404 <__aeabi_i2d>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb ff8a 	bl	80009f8 <__aeabi_dcmpgt>
 8004ae4:	b158      	cbz	r0, 8004afe <WatchDogLimitesTemperatura+0x36>
		if(!flagMaxTeto){
 8004ae6:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <WatchDogLimitesTemperatura+0x13c>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d060      	beq.n	8004bb0 <WatchDogLimitesTemperatura+0xe8>
			flagMaxTeto = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004aee:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <WatchDogLimitesTemperatura+0x140>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b923      	cbnz	r3, 8004afe <WatchDogLimitesTemperatura+0x36>
 8004af4:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004af6:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d062      	beq.n	8004bc4 <WatchDogLimitesTemperatura+0xfc>
			flagTimer = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004afe:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <WatchDogLimitesTemperatura+0x13c>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	b18b      	cbz	r3, 8004b28 <WatchDogLimitesTemperatura+0x60>
 8004b04:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004b06:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8004b0a:	f8b3 00b0 	ldrh.w	r0, [r3, #176]	; 0xb0
 8004b0e:	3814      	subs	r0, #20
 8004b10:	f7fb fc78 	bl	8000404 <__aeabi_i2d>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fb ff4e 	bl	80009bc <__aeabi_dcmplt>
 8004b20:	b110      	cbz	r0, 8004b28 <WatchDogLimitesTemperatura+0x60>
		flagMaxTeto = 0;
 8004b22:	4b38      	ldr	r3, [pc, #224]	; (8004c04 <WatchDogLimitesTemperatura+0x13c>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004b28:	4b37      	ldr	r3, [pc, #220]	; (8004c08 <WatchDogLimitesTemperatura+0x140>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b133      	cbz	r3, 8004b3c <WatchDogLimitesTemperatura+0x74>
 8004b2e:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004b30:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8004b34:	b913      	cbnz	r3, 8004b3c <WatchDogLimitesTemperatura+0x74>
		flagTimer=0;
 8004b36:	4b34      	ldr	r3, [pc, #208]	; (8004c08 <WatchDogLimitesTemperatura+0x140>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004b3e:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8004b42:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	; 0xf8
 8004b46:	f7fb fc5d 	bl	8000404 <__aeabi_i2d>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb ff51 	bl	80009f8 <__aeabi_dcmpgt>
 8004b56:	b158      	cbz	r0, 8004b70 <WatchDogLimitesTemperatura+0xa8>
		if(!flagMaxLastro){
 8004b58:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <WatchDogLimitesTemperatura+0x144>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d03b      	beq.n	8004bd8 <WatchDogLimitesTemperatura+0x110>
			flagMaxLastro = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004b60:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <WatchDogLimitesTemperatura+0x148>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b923      	cbnz	r3, 8004b70 <WatchDogLimitesTemperatura+0xa8>
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004b68:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d03d      	beq.n	8004bec <WatchDogLimitesTemperatura+0x124>
			flagTimerLastro = 1;
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <WatchDogLimitesTemperatura+0x144>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b18b      	cbz	r3, 8004b9a <WatchDogLimitesTemperatura+0xd2>
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004b78:	e9d3 453a 	ldrd	r4, r5, [r3, #232]	; 0xe8
 8004b7c:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	; 0xf8
 8004b80:	3814      	subs	r0, #20
 8004b82:	f7fb fc3f 	bl	8000404 <__aeabi_i2d>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	f7fb ff15 	bl	80009bc <__aeabi_dcmplt>
 8004b92:	b110      	cbz	r0, 8004b9a <WatchDogLimitesTemperatura+0xd2>
		flagMaxLastro = 0;
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <WatchDogLimitesTemperatura+0x144>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <WatchDogLimitesTemperatura+0x148>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	b133      	cbz	r3, 8004bae <WatchDogLimitesTemperatura+0xe6>
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <WatchDogLimitesTemperatura+0x138>)
 8004ba2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 8004ba6:	b913      	cbnz	r3, 8004bae <WatchDogLimitesTemperatura+0xe6>
		flagTimerLastro=0;
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <WatchDogLimitesTemperatura+0x148>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]


}
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
			flagMaxTeto = 1;
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <WatchDogLimitesTemperatura+0x13c>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2106      	movs	r1, #6
 8004bba:	4b16      	ldr	r3, [pc, #88]	; (8004c14 <WatchDogLimitesTemperatura+0x14c>)
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	f003 ff4f 	bl	8008a60 <osMessagePut>
 8004bc2:	e794      	b.n	8004aee <WatchDogLimitesTemperatura+0x26>
			flagTimer = 1;
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <WatchDogLimitesTemperatura+0x140>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2106      	movs	r1, #6
 8004bce:	4b11      	ldr	r3, [pc, #68]	; (8004c14 <WatchDogLimitesTemperatura+0x14c>)
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	f003 ff45 	bl	8008a60 <osMessagePut>
 8004bd6:	e792      	b.n	8004afe <WatchDogLimitesTemperatura+0x36>
			flagMaxLastro = 1;
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <WatchDogLimitesTemperatura+0x144>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2107      	movs	r1, #7
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <WatchDogLimitesTemperatura+0x14c>)
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	f003 ff3b 	bl	8008a60 <osMessagePut>
 8004bea:	e7b9      	b.n	8004b60 <WatchDogLimitesTemperatura+0x98>
			flagTimerLastro = 1;
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <WatchDogLimitesTemperatura+0x148>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2107      	movs	r1, #7
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <WatchDogLimitesTemperatura+0x14c>)
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f003 ff31 	bl	8008a60 <osMessagePut>
 8004bfe:	e7b7      	b.n	8004b70 <WatchDogLimitesTemperatura+0xa8>
 8004c00:	200007e8 	.word	0x200007e8
 8004c04:	20001873 	.word	0x20001873
 8004c08:	20001874 	.word	0x20001874
 8004c0c:	20001872 	.word	0x20001872
 8004c10:	20001875 	.word	0x20001875
 8004c14:	200007e0 	.word	0x200007e0

08004c18 <SaidasLeds>:
void SaidasLeds(void){
 8004c18:	b508      	push	{r3, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 8004c1a:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <SaidasLeds+0x58>)
 8004c1c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d004      	beq.n	8004c2e <SaidasLeds+0x16>
 8004c24:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <SaidasLeds+0x58>)
 8004c26:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d113      	bne.n	8004c56 <SaidasLeds+0x3e>
		onDigital(&PrimitiveStates.LedVerde);
	}else{
		offDigital(&PrimitiveStates.LedVerde);
 8004c2e:	4811      	ldr	r0, [pc, #68]	; (8004c74 <SaidasLeds+0x5c>)
 8004c30:	f7fd fa89 	bl	8002146 <offDigital>
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004c34:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <SaidasLeds+0x58>)
 8004c36:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d00f      	beq.n	8004c5e <SaidasLeds+0x46>
		onDigital(&PrimitiveStates.LedTeto);
	}else{
		offDigital(&PrimitiveStates.LedTeto);
 8004c3e:	480e      	ldr	r0, [pc, #56]	; (8004c78 <SaidasLeds+0x60>)
 8004c40:	f7fd fa81 	bl	8002146 <offDigital>
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <SaidasLeds+0x58>)
 8004c46:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d00b      	beq.n	8004c66 <SaidasLeds+0x4e>
		onDigital(&PrimitiveStates.LedLastro);
	}else{
		offDigital(&PrimitiveStates.LedLastro);
 8004c4e:	480b      	ldr	r0, [pc, #44]	; (8004c7c <SaidasLeds+0x64>)
 8004c50:	f7fd fa79 	bl	8002146 <offDigital>
	}
}
 8004c54:	bd08      	pop	{r3, pc}
		onDigital(&PrimitiveStates.LedVerde);
 8004c56:	4807      	ldr	r0, [pc, #28]	; (8004c74 <SaidasLeds+0x5c>)
 8004c58:	f7fd fa6b 	bl	8002132 <onDigital>
 8004c5c:	e7ea      	b.n	8004c34 <SaidasLeds+0x1c>
		onDigital(&PrimitiveStates.LedTeto);
 8004c5e:	4806      	ldr	r0, [pc, #24]	; (8004c78 <SaidasLeds+0x60>)
 8004c60:	f7fd fa67 	bl	8002132 <onDigital>
 8004c64:	e7ee      	b.n	8004c44 <SaidasLeds+0x2c>
		onDigital(&PrimitiveStates.LedLastro);
 8004c66:	4805      	ldr	r0, [pc, #20]	; (8004c7c <SaidasLeds+0x64>)
 8004c68:	f7fd fa63 	bl	8002132 <onDigital>
 8004c6c:	e7f2      	b.n	8004c54 <SaidasLeds+0x3c>
 8004c6e:	bf00      	nop
 8004c70:	200007e8 	.word	0x200007e8
 8004c74:	20000818 	.word	0x20000818
 8004c78:	20000830 	.word	0x20000830
 8004c7c:	20000848 	.word	0x20000848

08004c80 <Horimetro>:
void Horimetro(void){
 8004c80:	b508      	push	{r3, lr}
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004c82:	4b16      	ldr	r3, [pc, #88]	; (8004cdc <Horimetro+0x5c>)
 8004c84:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004c88:	b91b      	cbnz	r3, 8004c92 <Horimetro+0x12>
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <Horimetro+0x5c>)
 8004c8c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004c90:	b1fb      	cbz	r3, 8004cd2 <Horimetro+0x52>
		segundos++;
 8004c92:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <Horimetro+0x60>)
 8004c94:	7813      	ldrb	r3, [r2, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	7013      	strb	r3, [r2, #0]
		if(segundos == 60){
 8004c9c:	2b3c      	cmp	r3, #60	; 0x3c
 8004c9e:	d000      	beq.n	8004ca2 <Horimetro+0x22>
		}

	}else{
		segundos = 1;
	}
}
 8004ca0:	bd08      	pop	{r3, pc}
			segundos = 0;
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]
			if(Calendario.Horimetro_parcial_min<59){
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <Horimetro+0x64>)
 8004caa:	789b      	ldrb	r3, [r3, #2]
 8004cac:	2b3a      	cmp	r3, #58	; 0x3a
 8004cae:	d809      	bhi.n	8004cc4 <Horimetro+0x44>
				Calendario.Horimetro_parcial_min++;
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <Horimetro+0x64>)
 8004cb4:	7093      	strb	r3, [r2, #2]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <Horimetro+0x68>)
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	f003 fecf 	bl	8008a60 <osMessagePut>
 8004cc2:	e7ed      	b.n	8004ca0 <Horimetro+0x20>
				Calendario.Horimetro_parcial_min=0;
 8004cc4:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <Horimetro+0x64>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	709a      	strb	r2, [r3, #2]
				Calendario.Horimetro_horas++;
 8004cca:	881a      	ldrh	r2, [r3, #0]
 8004ccc:	3201      	adds	r2, #1
 8004cce:	801a      	strh	r2, [r3, #0]
 8004cd0:	e7f1      	b.n	8004cb6 <Horimetro+0x36>
		segundos = 1;
 8004cd2:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <Horimetro+0x60>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	701a      	strb	r2, [r3, #0]
}
 8004cd8:	e7e2      	b.n	8004ca0 <Horimetro+0x20>
 8004cda:	bf00      	nop
 8004cdc:	200007e8 	.word	0x200007e8
 8004ce0:	20001876 	.word	0x20001876
 8004ce4:	200007d4 	.word	0x200007d4
 8004ce8:	200007e0 	.word	0x200007e0

08004cec <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004cec:	b508      	push	{r3, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004cee:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <sinalizacaoReachTemp+0x48>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d00d      	beq.n	8004d12 <sinalizacaoReachTemp+0x26>
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <sinalizacaoReachTemp+0x4c>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d009      	beq.n	8004d12 <sinalizacaoReachTemp+0x26>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004cfe:	4b0f      	ldr	r3, [pc, #60]	; (8004d3c <sinalizacaoReachTemp+0x50>)
 8004d00:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 8004d04:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <sinalizacaoReachTemp+0x48>)
 8004d06:	7011      	strb	r1, [r2, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004d08:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <sinalizacaoReachTemp+0x4c>)
 8004d0e:	701a      	strb	r2, [r3, #0]


}
 8004d10:	bd08      	pop	{r3, pc}
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <sinalizacaoReachTemp+0x50>)
 8004d14:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d0f0      	beq.n	8004cfe <sinalizacaoReachTemp+0x12>
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <sinalizacaoReachTemp+0x50>)
 8004d1e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d0eb      	beq.n	8004cfe <sinalizacaoReachTemp+0x12>
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004d26:	2101      	movs	r1, #1
 8004d28:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <sinalizacaoReachTemp+0x54>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	f003 fe01 	bl	8008932 <osSignalSet>
 8004d30:	e7e5      	b.n	8004cfe <sinalizacaoReachTemp+0x12>
 8004d32:	bf00      	nop
 8004d34:	20001871 	.word	0x20001871
 8004d38:	20001870 	.word	0x20001870
 8004d3c:	200007e8 	.word	0x200007e8
 8004d40:	20000b9c 	.word	0x20000b9c

08004d44 <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004d44:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 8004d46:	f7ff febf 	bl	8004ac8 <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004d4a:	f7ff ffcf 	bl	8004cec <sinalizacaoReachTemp>
	SaidasLeds();
 8004d4e:	f7ff ff63 	bl	8004c18 <SaidasLeds>
	Horimetro();
 8004d52:	f7ff ff95 	bl	8004c80 <Horimetro>
}
 8004d56:	bd08      	pop	{r3, pc}

08004d58 <funcionamentoTimer>:
}

void funcionamentoTimer(void){

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004d58:	4b20      	ldr	r3, [pc, #128]	; (8004ddc <funcionamentoTimer+0x84>)
 8004d5a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8004d5e:	b12b      	cbz	r3, 8004d6c <funcionamentoTimer+0x14>
 8004d60:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <funcionamentoTimer+0x84>)
 8004d62:	f8b2 210c 	ldrh.w	r2, [r2, #268]	; 0x10c
 8004d66:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004d6a:	d00a      	beq.n	8004d82 <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
		PrimitiveStates.RTTimerMinutos--;
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004d6c:	b91b      	cbnz	r3, 8004d76 <funcionamentoTimer+0x1e>
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <funcionamentoTimer+0x84>)
 8004d70:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
 8004d74:	b122      	cbz	r2, 8004d80 <funcionamentoTimer+0x28>
 8004d76:	4a19      	ldr	r2, [pc, #100]	; (8004ddc <funcionamentoTimer+0x84>)
 8004d78:	f892 110d 	ldrb.w	r1, [r2, #269]	; 0x10d
 8004d7c:	2901      	cmp	r1, #1
 8004d7e:	d008      	beq.n	8004d92 <funcionamentoTimer+0x3a>
 8004d80:	4770      	bx	lr
		PrimitiveStates.RTTimerSegundos = 59;
 8004d82:	4a16      	ldr	r2, [pc, #88]	; (8004ddc <funcionamentoTimer+0x84>)
 8004d84:	213b      	movs	r1, #59	; 0x3b
 8004d86:	f882 110c 	strb.w	r1, [r2, #268]	; 0x10c
		PrimitiveStates.RTTimerMinutos--;
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	f882 310b 	strb.w	r3, [r2, #267]	; 0x10b
 8004d90:	4770      	bx	lr
		PrimitiveStates.RTTimerSegundos--;
 8004d92:	4610      	mov	r0, r2
 8004d94:	f892 210c 	ldrb.w	r2, [r2, #268]	; 0x10c
 8004d98:	3a01      	subs	r2, #1
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	f880 210c 	strb.w	r2, [r0, #268]	; 0x10c

		//chegou ao zero --- ROTINA DE FIM DE CICLO
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d1ed      	bne.n	8004d80 <funcionamentoTimer+0x28>
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1eb      	bne.n	8004d80 <funcionamentoTimer+0x28>
 8004da8:	2900      	cmp	r1, #0
 8004daa:	d0e9      	beq.n	8004d80 <funcionamentoTimer+0x28>
void funcionamentoTimer(void){
 8004dac:	b510      	push	{r4, lr}
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004dae:	4a0c      	ldr	r2, [pc, #48]	; (8004de0 <funcionamentoTimer+0x88>)
 8004db0:	8893      	ldrh	r3, [r2, #4]
 8004db2:	3301      	adds	r3, #1
 8004db4:	8093      	strh	r3, [r2, #4]
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2105      	movs	r1, #5
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <funcionamentoTimer+0x8c>)
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	f003 fe4f 	bl	8008a60 <osMessagePut>
			//notifica buzzer
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004dc2:	4c09      	ldr	r4, [pc, #36]	; (8004de8 <funcionamentoTimer+0x90>)
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f003 fdb3 	bl	8008932 <osSignalSet>
			PrimitiveStates.stateTimer = TIMER_idle;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <funcionamentoTimer+0x84>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
			osThreadResume(TaskBuzzerHandle);
 8004dd4:	6820      	ldr	r0, [r4, #0]
 8004dd6:	f003 febf 	bl	8008b58 <osThreadResume>
		}
	}
}
 8004dda:	bd10      	pop	{r4, pc}
 8004ddc:	200007e8 	.word	0x200007e8
 8004de0:	200007d4 	.word	0x200007d4
 8004de4:	200007e0 	.word	0x200007e0
 8004de8:	20000b9c 	.word	0x20000b9c

08004dec <verificaErro>:


void verificaErro(void){
 8004dec:	b500      	push	{lr}
 8004dee:	b085      	sub	sp, #20
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004df0:	2200      	movs	r2, #0
 8004df2:	210f      	movs	r1, #15
 8004df4:	a801      	add	r0, sp, #4
 8004df6:	f003 fdce 	bl	8008996 <osSignalWait>
	if (evt.status == osEventSignal){
 8004dfa:	9b01      	ldr	r3, [sp, #4]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d002      	beq.n	8004e06 <verificaErro+0x1a>

		if(evt.value.v == ERRO_CRITICO){
			osThreadSuspend(TaskTimerHandle);
		}
	}
}
 8004e00:	b005      	add	sp, #20
 8004e02:	f85d fb04 	ldr.w	pc, [sp], #4
		if(evt.value.v == ERRO_CRITICO){
 8004e06:	9b02      	ldr	r3, [sp, #8]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d1f9      	bne.n	8004e00 <verificaErro+0x14>
			osThreadSuspend(TaskTimerHandle);
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <verificaErro+0x2c>)
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	f003 fe9d 	bl	8008b4e <osThreadSuspend>
}
 8004e14:	e7f4      	b.n	8004e00 <verificaErro+0x14>
 8004e16:	bf00      	nop
 8004e18:	20000e48 	.word	0x20000e48

08004e1c <StartTimer>:
{
 8004e1c:	b500      	push	{lr}
 8004e1e:	b083      	sub	sp, #12
	xLastWakeTime = xTaskGetTickCount();
 8004e20:	f004 fdea 	bl	80099f8 <xTaskGetTickCount>
 8004e24:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004e26:	f7ff ffe1 	bl	8004dec <verificaErro>
		funcionamentoTimer();
 8004e2a:	f7ff ff95 	bl	8004d58 <funcionamentoTimer>
		osThreadYield();
 8004e2e:	f003 fd16 	bl	800885e <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e36:	a801      	add	r0, sp, #4
 8004e38:	f003 fea8 	bl	8008b8c <osDelayUntil>
	for(;;)
 8004e3c:	e7f3      	b.n	8004e26 <StartTimer+0xa>
	...

08004e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e40:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e42:	4a07      	ldr	r2, [pc, #28]	; (8004e60 <HAL_Init+0x20>)
 8004e44:	6813      	ldr	r3, [r2, #0]
 8004e46:	f043 0310 	orr.w	r3, r3, #16
 8004e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	f000 fa99 	bl	8005384 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e52:	200f      	movs	r0, #15
 8004e54:	f7fe fc96 	bl	8003784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e58:	f7fe fa64 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004e5c:	2000      	movs	r0, #0
 8004e5e:	bd08      	pop	{r3, pc}
 8004e60:	40022000 	.word	0x40022000

08004e64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e64:	4a03      	ldr	r2, [pc, #12]	; (8004e74 <HAL_IncTick+0x10>)
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	4b03      	ldr	r3, [pc, #12]	; (8004e78 <HAL_IncTick+0x14>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	6013      	str	r3, [r2, #0]
}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20001878 	.word	0x20001878
 8004e78:	20000004 	.word	0x20000004

08004e7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <HAL_GetTick+0x8>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20001878 	.word	0x20001878

08004e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e8c:	f7ff fff6 	bl	8004e7c <HAL_GetTick>
 8004e90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e92:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004e96:	d002      	beq.n	8004e9e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <HAL_Delay+0x24>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e9e:	f7ff ffed 	bl	8004e7c <HAL_GetTick>
 8004ea2:	1b40      	subs	r0, r0, r5
 8004ea4:	42a0      	cmp	r0, r4
 8004ea6:	d3fa      	bcc.n	8004e9e <HAL_Delay+0x16>
  {
  }
}
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000004 	.word	0x20000004

08004eb0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004eb0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eb6:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004eba:	d11e      	bne.n	8004efa <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	6892      	ldr	r2, [r2, #8]
 8004ec8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004ecc:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8004ed0:	d003      	beq.n	8004eda <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fbd6 	bl	8002684 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ed8:	bd08      	pop	{r3, pc}
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004eda:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	d1f8      	bne.n	8004ed2 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eea:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8004eee:	d1f0      	bne.n	8004ed2 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ef8:	e7eb      	b.n	8004ed2 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	4798      	blx	r3
}
 8004f00:	e7ea      	b.n	8004ed8 <ADC_DMAConvCplt+0x28>

08004f02 <HAL_ADC_ConvHalfCpltCallback>:
}
 8004f02:	4770      	bx	lr

08004f04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f04:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004f08:	f7ff fffb 	bl	8004f02 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f0c:	bd08      	pop	{r3, pc}

08004f0e <HAL_ADC_ErrorCallback>:
}
 8004f0e:	4770      	bx	lr

08004f10 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f10:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f12:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004f1e:	f043 0304 	orr.w	r3, r3, #4
 8004f22:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f24:	f7ff fff3 	bl	8004f0e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f28:	bd08      	pop	{r3, pc}
	...

08004f2c <HAL_ADC_ConfigChannel>:
{ 
 8004f2c:	b430      	push	{r4, r5}
 8004f2e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8004f30:	2200      	movs	r2, #0
 8004f32:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004f34:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8004f38:	2a01      	cmp	r2, #1
 8004f3a:	f000 808f 	beq.w	800505c <HAL_ADC_ConfigChannel+0x130>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2201      	movs	r2, #1
 8004f42:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004f46:	684a      	ldr	r2, [r1, #4]
 8004f48:	2a06      	cmp	r2, #6
 8004f4a:	d82d      	bhi.n	8004fa8 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f4c:	6804      	ldr	r4, [r0, #0]
 8004f4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004f50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004f54:	3a05      	subs	r2, #5
 8004f56:	f04f 0c1f 	mov.w	ip, #31
 8004f5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8004f5e:	ea20 000c 	bic.w	r0, r0, ip
 8004f62:	680d      	ldr	r5, [r1, #0]
 8004f64:	fa05 f202 	lsl.w	r2, r5, r2
 8004f68:	4302      	orrs	r2, r0
 8004f6a:	6362      	str	r2, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f6c:	680a      	ldr	r2, [r1, #0]
 8004f6e:	2a09      	cmp	r2, #9
 8004f70:	d938      	bls.n	8004fe4 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f72:	681c      	ldr	r4, [r3, #0]
 8004f74:	68e0      	ldr	r0, [r4, #12]
 8004f76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004f7a:	3a1e      	subs	r2, #30
 8004f7c:	f04f 0c07 	mov.w	ip, #7
 8004f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8004f84:	ea20 000c 	bic.w	r0, r0, ip
 8004f88:	688d      	ldr	r5, [r1, #8]
 8004f8a:	fa05 f202 	lsl.w	r2, r5, r2
 8004f8e:	4302      	orrs	r2, r0
 8004f90:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f92:	680a      	ldr	r2, [r1, #0]
 8004f94:	3a10      	subs	r2, #16
 8004f96:	2a01      	cmp	r2, #1
 8004f98:	d934      	bls.n	8005004 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f9a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8004fa2:	b002      	add	sp, #8
 8004fa4:	bc30      	pop	{r4, r5}
 8004fa6:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8004fa8:	2a0c      	cmp	r2, #12
 8004faa:	d80d      	bhi.n	8004fc8 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004fac:	6805      	ldr	r5, [r0, #0]
 8004fae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004fb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004fb4:	3a23      	subs	r2, #35	; 0x23
 8004fb6:	241f      	movs	r4, #31
 8004fb8:	4094      	lsls	r4, r2
 8004fba:	ea20 0004 	bic.w	r0, r0, r4
 8004fbe:	680c      	ldr	r4, [r1, #0]
 8004fc0:	4094      	lsls	r4, r2
 8004fc2:	4320      	orrs	r0, r4
 8004fc4:	6328      	str	r0, [r5, #48]	; 0x30
 8004fc6:	e7d1      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004fc8:	6805      	ldr	r5, [r0, #0]
 8004fca:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004fcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004fd0:	3a41      	subs	r2, #65	; 0x41
 8004fd2:	241f      	movs	r4, #31
 8004fd4:	4094      	lsls	r4, r2
 8004fd6:	ea20 0004 	bic.w	r0, r0, r4
 8004fda:	680c      	ldr	r4, [r1, #0]
 8004fdc:	4094      	lsls	r4, r2
 8004fde:	4320      	orrs	r0, r4
 8004fe0:	62e8      	str	r0, [r5, #44]	; 0x2c
 8004fe2:	e7c3      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004fe4:	681c      	ldr	r4, [r3, #0]
 8004fe6:	6920      	ldr	r0, [r4, #16]
 8004fe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004fec:	f04f 0c07 	mov.w	ip, #7
 8004ff0:	fa0c fc02 	lsl.w	ip, ip, r2
 8004ff4:	ea20 000c 	bic.w	r0, r0, ip
 8004ff8:	688d      	ldr	r5, [r1, #8]
 8004ffa:	fa05 f202 	lsl.w	r2, r5, r2
 8004ffe:	4302      	orrs	r2, r0
 8005000:	6122      	str	r2, [r4, #16]
 8005002:	e7c6      	b.n	8004f92 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4816      	ldr	r0, [pc, #88]	; (8005060 <HAL_ADC_ConfigChannel+0x134>)
 8005008:	4282      	cmp	r2, r0
 800500a:	d005      	beq.n	8005018 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800500c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500e:	f042 0220 	orr.w	r2, r2, #32
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8005014:	2001      	movs	r0, #1
 8005016:	e7c1      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005018:	6890      	ldr	r0, [r2, #8]
 800501a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800501e:	d11b      	bne.n	8005058 <HAL_ADC_ConfigChannel+0x12c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005020:	6890      	ldr	r0, [r2, #8]
 8005022:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005026:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005028:	680a      	ldr	r2, [r1, #0]
 800502a:	2a10      	cmp	r2, #16
 800502c:	d001      	beq.n	8005032 <HAL_ADC_ConfigChannel+0x106>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502e:	2000      	movs	r0, #0
 8005030:	e7b4      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005032:	4a0c      	ldr	r2, [pc, #48]	; (8005064 <HAL_ADC_ConfigChannel+0x138>)
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	490c      	ldr	r1, [pc, #48]	; (8005068 <HAL_ADC_ConfigChannel+0x13c>)
 8005038:	fba1 1202 	umull	r1, r2, r1, r2
 800503c:	0c92      	lsrs	r2, r2, #18
 800503e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005042:	0052      	lsls	r2, r2, #1
 8005044:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005046:	e002      	b.n	800504e <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8005048:	9a01      	ldr	r2, [sp, #4]
 800504a:	3a01      	subs	r2, #1
 800504c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800504e:	9a01      	ldr	r2, [sp, #4]
 8005050:	2a00      	cmp	r2, #0
 8005052:	d1f9      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x11c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005054:	2000      	movs	r0, #0
 8005056:	e7a1      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x70>
 8005058:	2000      	movs	r0, #0
 800505a:	e79f      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800505c:	2002      	movs	r0, #2
 800505e:	e7a0      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x76>
 8005060:	40012400 	.word	0x40012400
 8005064:	20000000 	.word	0x20000000
 8005068:	431bde83 	.word	0x431bde83

0800506c <ADC_Enable>:
{
 800506c:	b530      	push	{r4, r5, lr}
 800506e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005074:	6803      	ldr	r3, [r0, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f012 0f01 	tst.w	r2, #1
 800507c:	d133      	bne.n	80050e6 <ADC_Enable+0x7a>
 800507e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005088:	4b18      	ldr	r3, [pc, #96]	; (80050ec <ADC_Enable+0x80>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a18      	ldr	r2, [pc, #96]	; (80050f0 <ADC_Enable+0x84>)
 800508e:	fba2 2303 	umull	r2, r3, r2, r3
 8005092:	0c9b      	lsrs	r3, r3, #18
 8005094:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8005096:	e002      	b.n	800509e <ADC_Enable+0x32>
      wait_loop_index--;
 8005098:	9b01      	ldr	r3, [sp, #4]
 800509a:	3b01      	subs	r3, #1
 800509c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800509e:	9b01      	ldr	r3, [sp, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f9      	bne.n	8005098 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80050a4:	f7ff feea 	bl	8004e7c <HAL_GetTick>
 80050a8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f013 0f01 	tst.w	r3, #1
 80050b2:	d116      	bne.n	80050e2 <ADC_Enable+0x76>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050b4:	f7ff fee2 	bl	8004e7c <HAL_GetTick>
 80050b8:	1b43      	subs	r3, r0, r5
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d9f5      	bls.n	80050aa <ADC_Enable+0x3e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f013 0f01 	tst.w	r3, #1
 80050c6:	d1f0      	bne.n	80050aa <ADC_Enable+0x3e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ca:	f043 0310 	orr.w	r3, r3, #16
 80050ce:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	62e3      	str	r3, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80050d8:	2300      	movs	r3, #0
 80050da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_ERROR;
 80050de:	2001      	movs	r0, #1
 80050e0:	e002      	b.n	80050e8 <ADC_Enable+0x7c>
  return HAL_OK;
 80050e2:	2000      	movs	r0, #0
 80050e4:	e000      	b.n	80050e8 <ADC_Enable+0x7c>
 80050e6:	2000      	movs	r0, #0
}
 80050e8:	b003      	add	sp, #12
 80050ea:	bd30      	pop	{r4, r5, pc}
 80050ec:	20000000 	.word	0x20000000
 80050f0:	431bde83 	.word	0x431bde83

080050f4 <HAL_ADC_Start_DMA>:
{
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	4604      	mov	r4, r0
 80050f8:	460d      	mov	r5, r1
 80050fa:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80050fc:	6801      	ldr	r1, [r0, #0]
 80050fe:	4844      	ldr	r0, [pc, #272]	; (8005210 <HAL_ADC_Start_DMA+0x11c>)
 8005100:	4281      	cmp	r1, r0
 8005102:	d059      	beq.n	80051b8 <HAL_ADC_Start_DMA+0xc4>
 8005104:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_ADC_Start_DMA+0x120>)
 8005106:	4299      	cmp	r1, r3
 8005108:	d056      	beq.n	80051b8 <HAL_ADC_Start_DMA+0xc4>
    __HAL_LOCK(hadc);
 800510a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800510e:	2b01      	cmp	r3, #1
 8005110:	d07c      	beq.n	800520c <HAL_ADC_Start_DMA+0x118>
 8005112:	2301      	movs	r3, #1
 8005114:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff ffa7 	bl	800506c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800511e:	4607      	mov	r7, r0
 8005120:	2800      	cmp	r0, #0
 8005122:	d16e      	bne.n	8005202 <HAL_ADC_Start_DMA+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 8005124:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005126:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
 800512a:	f021 0101 	bic.w	r1, r1, #1
 800512e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005132:	62a1      	str	r1, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005134:	6822      	ldr	r2, [r4, #0]
 8005136:	4b37      	ldr	r3, [pc, #220]	; (8005214 <HAL_ADC_Start_DMA+0x120>)
 8005138:	429a      	cmp	r2, r3
 800513a:	d044      	beq.n	80051c6 <HAL_ADC_Start_DMA+0xd2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800513c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800513e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005142:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005144:	6853      	ldr	r3, [r2, #4]
 8005146:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800514a:	d005      	beq.n	8005158 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800514c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800514e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005156:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800515a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800515e:	d048      	beq.n	80051f2 <HAL_ADC_Start_DMA+0xfe>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005162:	f023 0306 	bic.w	r3, r3, #6
 8005166:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8005168:	2300      	movs	r3, #0
 800516a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800516e:	6a23      	ldr	r3, [r4, #32]
 8005170:	4a29      	ldr	r2, [pc, #164]	; (8005218 <HAL_ADC_Start_DMA+0x124>)
 8005172:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005174:	6a23      	ldr	r3, [r4, #32]
 8005176:	4a29      	ldr	r2, [pc, #164]	; (800521c <HAL_ADC_Start_DMA+0x128>)
 8005178:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800517a:	6a23      	ldr	r3, [r4, #32]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <HAL_ADC_Start_DMA+0x12c>)
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	f06f 0202 	mvn.w	r2, #2
 8005186:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005188:	6822      	ldr	r2, [r4, #0]
 800518a:	6893      	ldr	r3, [r2, #8]
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	4633      	mov	r3, r6
 8005196:	462a      	mov	r2, r5
 8005198:	314c      	adds	r1, #76	; 0x4c
 800519a:	6a20      	ldr	r0, [r4, #32]
 800519c:	f000 f9dc 	bl	8005558 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80051a8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80051ac:	d024      	beq.n	80051f8 <HAL_ADC_Start_DMA+0x104>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	e027      	b.n	8005208 <HAL_ADC_Start_DMA+0x114>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <HAL_ADC_Start_DMA+0x11c>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80051c0:	d0a3      	beq.n	800510a <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80051c2:	2701      	movs	r7, #1
 80051c4:	e020      	b.n	8005208 <HAL_ADC_Start_DMA+0x114>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051c6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80051d0:	d0b4      	beq.n	800513c <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051d8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80051da:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <HAL_ADC_Start_DMA+0x11c>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80051e2:	d0b9      	beq.n	8005158 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80051e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80051e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80051f0:	e7b2      	b.n	8005158 <HAL_ADC_Start_DMA+0x64>
        ADC_CLEAR_ERRORCODE(hadc);
 80051f2:	2300      	movs	r3, #0
 80051f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051f6:	e7b7      	b.n	8005168 <HAL_ADC_Start_DMA+0x74>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80051fe:	609a      	str	r2, [r3, #8]
 8005200:	e002      	b.n	8005208 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8005202:	2300      	movs	r3, #0
 8005204:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8005208:	4638      	mov	r0, r7
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800520c:	2702      	movs	r7, #2
 800520e:	e7fb      	b.n	8005208 <HAL_ADC_Start_DMA+0x114>
 8005210:	40012400 	.word	0x40012400
 8005214:	40012800 	.word	0x40012800
 8005218:	08004eb1 	.word	0x08004eb1
 800521c:	08004f05 	.word	0x08004f05
 8005220:	08004f11 	.word	0x08004f11

08005224 <ADC_ConversionStop_Disable>:
{
 8005224:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005226:	6803      	ldr	r3, [r0, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	f012 0f01 	tst.w	r2, #1
 800522e:	d101      	bne.n	8005234 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8005230:	2000      	movs	r0, #0
}
 8005232:	bd38      	pop	{r3, r4, r5, pc}
 8005234:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800523e:	f7ff fe1d 	bl	8004e7c <HAL_GetTick>
 8005242:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f013 0f01 	tst.w	r3, #1
 800524c:	d013      	beq.n	8005276 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800524e:	f7ff fe15 	bl	8004e7c <HAL_GetTick>
 8005252:	1b43      	subs	r3, r0, r5
 8005254:	2b02      	cmp	r3, #2
 8005256:	d9f5      	bls.n	8005244 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f013 0f01 	tst.w	r3, #1
 8005260:	d0f0      	beq.n	8005244 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005264:	f043 0310 	orr.w	r3, r3, #16
 8005268:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8005272:	2001      	movs	r0, #1
 8005274:	e7dd      	b.n	8005232 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8005276:	2000      	movs	r0, #0
 8005278:	e7db      	b.n	8005232 <ADC_ConversionStop_Disable+0xe>
	...

0800527c <HAL_ADC_Init>:
  if(hadc == NULL)
 800527c:	2800      	cmp	r0, #0
 800527e:	d07b      	beq.n	8005378 <HAL_ADC_Init+0xfc>
{
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005284:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04d      	beq.n	8005326 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800528a:	4620      	mov	r0, r4
 800528c:	f7ff ffca 	bl	8005224 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005292:	f013 0310 	ands.w	r3, r3, #16
 8005296:	d169      	bne.n	800536c <HAL_ADC_Init+0xf0>
 8005298:	2800      	cmp	r0, #0
 800529a:	d167      	bne.n	800536c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800529c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800529e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80052a2:	f022 0202 	bic.w	r2, r2, #2
 80052a6:	f042 0202 	orr.w	r2, r2, #2
 80052aa:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80052ac:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80052ae:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80052b0:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80052b2:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80052b4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80052b8:	68a5      	ldr	r5, [r4, #8]
 80052ba:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80052be:	d002      	beq.n	80052c6 <HAL_ADC_Init+0x4a>
 80052c0:	2d01      	cmp	r5, #1
 80052c2:	d036      	beq.n	8005332 <HAL_ADC_Init+0xb6>
 80052c4:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052c6:	7d26      	ldrb	r6, [r4, #20]
 80052c8:	2e01      	cmp	r6, #1
 80052ca:	d035      	beq.n	8005338 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 80052cc:	6826      	ldr	r6, [r4, #0]
 80052ce:	6871      	ldr	r1, [r6, #4]
 80052d0:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80052d4:	4329      	orrs	r1, r5
 80052d6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	68ae      	ldr	r6, [r5, #8]
 80052dc:	4927      	ldr	r1, [pc, #156]	; (800537c <HAL_ADC_Init+0x100>)
 80052de:	4031      	ands	r1, r6
 80052e0:	4311      	orrs	r1, r2
 80052e2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80052e4:	68a1      	ldr	r1, [r4, #8]
 80052e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80052ea:	d001      	beq.n	80052f0 <HAL_ADC_Init+0x74>
 80052ec:	2901      	cmp	r1, #1
 80052ee:	d102      	bne.n	80052f6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	3b01      	subs	r3, #1
 80052f4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80052f6:	6825      	ldr	r5, [r4, #0]
 80052f8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80052fa:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80052fe:	430b      	orrs	r3, r1
 8005300:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	4b1e      	ldr	r3, [pc, #120]	; (8005380 <HAL_ADC_Init+0x104>)
 8005308:	400b      	ands	r3, r1
 800530a:	429a      	cmp	r2, r3
 800530c:	d025      	beq.n	800535a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 800530e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005310:	f023 0312 	bic.w	r3, r3, #18
 8005314:	f043 0310 	orr.w	r3, r3, #16
 8005318:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8005322:	2001      	movs	r0, #1
 8005324:	e027      	b.n	8005376 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 8005326:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8005328:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800532c:	f7fe f824 	bl	8003378 <HAL_ADC_MspInit>
 8005330:	e7ab      	b.n	800528a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005332:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005336:	e7c6      	b.n	80052c6 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005338:	b931      	cbnz	r1, 8005348 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800533a:	69a1      	ldr	r1, [r4, #24]
 800533c:	3901      	subs	r1, #1
 800533e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8005342:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8005346:	e7c1      	b.n	80052cc <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005348:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800534a:	f041 0120 	orr.w	r1, r1, #32
 800534e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005350:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005352:	f041 0101 	orr.w	r1, r1, #1
 8005356:	62e1      	str	r1, [r4, #44]	; 0x2c
 8005358:	e7b8      	b.n	80052cc <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800535a:	2300      	movs	r3, #0
 800535c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800535e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005360:	f023 0303 	bic.w	r3, r3, #3
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	62a3      	str	r3, [r4, #40]	; 0x28
 800536a:	e004      	b.n	8005376 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800536c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800536e:	f043 0310 	orr.w	r3, r3, #16
 8005372:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005374:	2001      	movs	r0, #1
}
 8005376:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005378:	2001      	movs	r0, #1
}
 800537a:	4770      	bx	lr
 800537c:	ffe1f7fd 	.word	0xffe1f7fd
 8005380:	ff1f0efe 	.word	0xff1f0efe

08005384 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005386:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005388:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005390:	0200      	lsls	r0, r0, #8
 8005392:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005396:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005398:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800539c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80053a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80053a2:	4770      	bx	lr
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053a8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_NVIC_SetPriority+0x68>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b2:	f1c3 0c07 	rsb	ip, r3, #7
 80053b6:	f1bc 0f04 	cmp.w	ip, #4
 80053ba:	bf28      	it	cs
 80053bc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c0:	f103 0e04 	add.w	lr, r3, #4
 80053c4:	f1be 0f06 	cmp.w	lr, #6
 80053c8:	d918      	bls.n	80053fc <HAL_NVIC_SetPriority+0x54>
 80053ca:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053cc:	f04f 3eff 	mov.w	lr, #4294967295
 80053d0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80053d4:	ea21 010c 	bic.w	r1, r1, ip
 80053d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053da:	fa0e fe03 	lsl.w	lr, lr, r3
 80053de:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053e2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80053e4:	2800      	cmp	r0, #0
 80053e6:	db0b      	blt.n	8005400 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80053f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80053f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80053f8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053fc:	2300      	movs	r3, #0
 80053fe:	e7e5      	b.n	80053cc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005400:	f000 000f 	and.w	r0, r0, #15
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	4b02      	ldr	r3, [pc, #8]	; (8005414 <HAL_NVIC_SetPriority+0x6c>)
 800540a:	541a      	strb	r2, [r3, r0]
 800540c:	e7f4      	b.n	80053f8 <HAL_NVIC_SetPriority+0x50>
 800540e:	bf00      	nop
 8005410:	e000ed00 	.word	0xe000ed00
 8005414:	e000ed14 	.word	0xe000ed14

08005418 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005418:	2800      	cmp	r0, #0
 800541a:	db07      	blt.n	800542c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800541c:	f000 021f 	and.w	r2, r0, #31
 8005420:	0940      	lsrs	r0, r0, #5
 8005422:	2301      	movs	r3, #1
 8005424:	4093      	lsls	r3, r2
 8005426:	4a02      	ldr	r2, [pc, #8]	; (8005430 <HAL_NVIC_EnableIRQ+0x18>)
 8005428:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	e000e100 	.word	0xe000e100

08005434 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005434:	2800      	cmp	r0, #0
 8005436:	db0c      	blt.n	8005452 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005438:	f000 021f 	and.w	r2, r0, #31
 800543c:	0940      	lsrs	r0, r0, #5
 800543e:	2301      	movs	r3, #1
 8005440:	4093      	lsls	r3, r2
 8005442:	3020      	adds	r0, #32
 8005444:	4a03      	ldr	r2, [pc, #12]	; (8005454 <HAL_NVIC_DisableIRQ+0x20>)
 8005446:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800544a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800544e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005452:	4770      	bx	lr
 8005454:	e000e100 	.word	0xe000e100

08005458 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005458:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800545a:	2401      	movs	r4, #1
 800545c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800545e:	40ac      	lsls	r4, r5
 8005460:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8005462:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005464:	6804      	ldr	r4, [r0, #0]
 8005466:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005468:	6843      	ldr	r3, [r0, #4]
 800546a:	2b10      	cmp	r3, #16
 800546c:	d005      	beq.n	800547a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800546e:	6803      	ldr	r3, [r0, #0]
 8005470:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005472:	6803      	ldr	r3, [r0, #0]
 8005474:	60da      	str	r2, [r3, #12]
  }
}
 8005476:	bc30      	pop	{r4, r5}
 8005478:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800547a:	6803      	ldr	r3, [r0, #0]
 800547c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800547e:	6803      	ldr	r3, [r0, #0]
 8005480:	60d9      	str	r1, [r3, #12]
 8005482:	e7f8      	b.n	8005476 <DMA_SetConfig+0x1e>

08005484 <HAL_DMA_Init>:
  if(hdma == NULL)
 8005484:	b360      	cbz	r0, 80054e0 <HAL_DMA_Init+0x5c>
{
 8005486:	b410      	push	{r4}
 8005488:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800548a:	6801      	ldr	r1, [r0, #0]
 800548c:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_DMA_Init+0x60>)
 800548e:	440b      	add	r3, r1
 8005490:	4815      	ldr	r0, [pc, #84]	; (80054e8 <HAL_DMA_Init+0x64>)
 8005492:	fba0 0303 	umull	r0, r3, r0, r3
 8005496:	091b      	lsrs	r3, r3, #4
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_DMA_Init+0x68>)
 800549e:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 80054a0:	2302      	movs	r3, #2
 80054a2:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 80054a6:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80054a8:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80054ac:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80054b0:	6853      	ldr	r3, [r2, #4]
 80054b2:	6894      	ldr	r4, [r2, #8]
 80054b4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054b6:	68d4      	ldr	r4, [r2, #12]
 80054b8:	4323      	orrs	r3, r4
 80054ba:	6914      	ldr	r4, [r2, #16]
 80054bc:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054be:	6954      	ldr	r4, [r2, #20]
 80054c0:	4323      	orrs	r3, r4
 80054c2:	6994      	ldr	r4, [r2, #24]
 80054c4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80054c6:	69d4      	ldr	r4, [r2, #28]
 80054c8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80054ca:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80054cc:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ce:	2000      	movs	r0, #0
 80054d0:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80054d8:	f882 0020 	strb.w	r0, [r2, #32]
}
 80054dc:	bc10      	pop	{r4}
 80054de:	4770      	bx	lr
    return HAL_ERROR;
 80054e0:	2001      	movs	r0, #1
}
 80054e2:	4770      	bx	lr
 80054e4:	bffdfff8 	.word	0xbffdfff8
 80054e8:	cccccccd 	.word	0xcccccccd
 80054ec:	40020000 	.word	0x40020000

080054f0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d029      	beq.n	8005548 <HAL_DMA_DeInit+0x58>
{
 80054f4:	b410      	push	{r4}
 80054f6:	4603      	mov	r3, r0
  __HAL_DMA_DISABLE(hdma);
 80054f8:	6801      	ldr	r1, [r0, #0]
 80054fa:	680a      	ldr	r2, [r1, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	600a      	str	r2, [r1, #0]
  hdma->Instance->CCR  = 0U;
 8005502:	6802      	ldr	r2, [r0, #0]
 8005504:	2000      	movs	r0, #0
 8005506:	6010      	str	r0, [r2, #0]
  hdma->Instance->CNDTR = 0U;
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	6050      	str	r0, [r2, #4]
  hdma->Instance->CPAR  = 0U;
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	6090      	str	r0, [r2, #8]
  hdma->Instance->CMAR = 0U;
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	60d0      	str	r0, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005514:	6819      	ldr	r1, [r3, #0]
 8005516:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_DMA_DeInit+0x5c>)
 8005518:	440a      	add	r2, r1
 800551a:	490d      	ldr	r1, [pc, #52]	; (8005550 <HAL_DMA_DeInit+0x60>)
 800551c:	fba1 1202 	umull	r1, r2, r1, r2
 8005520:	0912      	lsrs	r2, r2, #4
 8005522:	0092      	lsls	r2, r2, #2
 8005524:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005526:	4c0b      	ldr	r4, [pc, #44]	; (8005554 <HAL_DMA_DeInit+0x64>)
 8005528:	63dc      	str	r4, [r3, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f202 	lsl.w	r2, r1, r2
 8005530:	6062      	str	r2, [r4, #4]
  hdma->XferCpltCallback = NULL;
 8005532:	6298      	str	r0, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8005534:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8005536:	6318      	str	r0, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8005538:	6358      	str	r0, [r3, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800553a:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 800553c:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8005540:	f883 0020 	strb.w	r0, [r3, #32]
}
 8005544:	bc10      	pop	{r4}
 8005546:	4770      	bx	lr
    return HAL_ERROR;
 8005548:	2001      	movs	r0, #1
}
 800554a:	4770      	bx	lr
 800554c:	bffdfff8 	.word	0xbffdfff8
 8005550:	cccccccd 	.word	0xcccccccd
 8005554:	40020000 	.word	0x40020000

08005558 <HAL_DMA_Start_IT>:
{
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800555c:	f890 0020 	ldrb.w	r0, [r0, #32]
 8005560:	2801      	cmp	r0, #1
 8005562:	d032      	beq.n	80055ca <HAL_DMA_Start_IT+0x72>
 8005564:	2001      	movs	r0, #1
 8005566:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800556a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800556e:	b2c0      	uxtb	r0, r0
 8005570:	2801      	cmp	r0, #1
 8005572:	d004      	beq.n	800557e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma); 
 8005574:	2300      	movs	r3, #0
 8005576:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 800557a:	2002      	movs	r0, #2
}
 800557c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800557e:	2002      	movs	r0, #2
 8005580:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005584:	2000      	movs	r0, #0
 8005586:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005588:	6825      	ldr	r5, [r4, #0]
 800558a:	6828      	ldr	r0, [r5, #0]
 800558c:	f020 0001 	bic.w	r0, r0, #1
 8005590:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005592:	4620      	mov	r0, r4
 8005594:	f7ff ff60 	bl	8005458 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8005598:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800559a:	b15b      	cbz	r3, 80055b4 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	6813      	ldr	r3, [r2, #0]
 80055a0:	f043 030e 	orr.w	r3, r3, #14
 80055a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7e3      	b.n	800557c <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	f023 0304 	bic.w	r3, r3, #4
 80055bc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	f043 030a 	orr.w	r3, r3, #10
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e7ed      	b.n	80055a6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80055ca:	2002      	movs	r0, #2
 80055cc:	e7d6      	b.n	800557c <HAL_DMA_Start_IT+0x24>

080055ce <HAL_DMA_Abort>:
{
 80055ce:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	2a02      	cmp	r2, #2
 80055d8:	d006      	beq.n	80055e8 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055da:	2204      	movs	r2, #4
 80055dc:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80055de:	2200      	movs	r2, #0
 80055e0:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80055e4:	2001      	movs	r0, #1
 80055e6:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055e8:	6801      	ldr	r1, [r0, #0]
 80055ea:	680a      	ldr	r2, [r1, #0]
 80055ec:	f022 020e 	bic.w	r2, r2, #14
 80055f0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80055f2:	6801      	ldr	r1, [r0, #0]
 80055f4:	680a      	ldr	r2, [r1, #0]
 80055f6:	f022 0201 	bic.w	r2, r2, #1
 80055fa:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80055fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80055fe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f202 	lsl.w	r2, r1, r2
 8005606:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8005608:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 800560c:	2000      	movs	r0, #0
 800560e:	f883 0020 	strb.w	r0, [r3, #32]
}
 8005612:	4770      	bx	lr

08005614 <HAL_DMA_Abort_IT>:
{  
 8005614:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005616:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d003      	beq.n	8005628 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005620:	2304      	movs	r3, #4
 8005622:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005624:	2001      	movs	r0, #1
}
 8005626:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005628:	6802      	ldr	r2, [r0, #0]
 800562a:	6813      	ldr	r3, [r2, #0]
 800562c:	f023 030e 	bic.w	r3, r3, #14
 8005630:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005632:	6802      	ldr	r2, [r0, #0]
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800563c:	6803      	ldr	r3, [r0, #0]
 800563e:	4a19      	ldr	r2, [pc, #100]	; (80056a4 <HAL_DMA_Abort_IT+0x90>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d014      	beq.n	800566e <HAL_DMA_Abort_IT+0x5a>
 8005644:	3214      	adds	r2, #20
 8005646:	4293      	cmp	r3, r2
 8005648:	d01f      	beq.n	800568a <HAL_DMA_Abort_IT+0x76>
 800564a:	3214      	adds	r2, #20
 800564c:	4293      	cmp	r3, r2
 800564e:	d01e      	beq.n	800568e <HAL_DMA_Abort_IT+0x7a>
 8005650:	3214      	adds	r2, #20
 8005652:	4293      	cmp	r3, r2
 8005654:	d01e      	beq.n	8005694 <HAL_DMA_Abort_IT+0x80>
 8005656:	3214      	adds	r2, #20
 8005658:	4293      	cmp	r3, r2
 800565a:	d01e      	beq.n	800569a <HAL_DMA_Abort_IT+0x86>
 800565c:	3214      	adds	r2, #20
 800565e:	4293      	cmp	r3, r2
 8005660:	d002      	beq.n	8005668 <HAL_DMA_Abort_IT+0x54>
 8005662:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005666:	e003      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
 8005668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800566c:	e000      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
 800566e:	2201      	movs	r2, #1
 8005670:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_DMA_Abort_IT+0x94>)
 8005672:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005674:	2301      	movs	r3, #1
 8005676:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800567a:	2300      	movs	r3, #0
 800567c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005680:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005682:	b16b      	cbz	r3, 80056a0 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8005684:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2000      	movs	r0, #0
 8005688:	e7cd      	b.n	8005626 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800568a:	2210      	movs	r2, #16
 800568c:	e7f0      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
 800568e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005692:	e7ed      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
 8005694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005698:	e7ea      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
 800569a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800569e:	e7e7      	b.n	8005670 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2000      	movs	r0, #0
 80056a2:	e7c0      	b.n	8005626 <HAL_DMA_Abort_IT+0x12>
 80056a4:	40020008 	.word	0x40020008
 80056a8:	40020000 	.word	0x40020000

080056ac <HAL_DMA_IRQHandler>:
{
 80056ac:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80056b0:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80056b2:	6804      	ldr	r4, [r0, #0]
 80056b4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80056b8:	2304      	movs	r3, #4
 80056ba:	408b      	lsls	r3, r1
 80056bc:	4213      	tst	r3, r2
 80056be:	d035      	beq.n	800572c <HAL_DMA_IRQHandler+0x80>
 80056c0:	f015 0f04 	tst.w	r5, #4
 80056c4:	d032      	beq.n	800572c <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f013 0f20 	tst.w	r3, #32
 80056cc:	d103      	bne.n	80056d6 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80056d6:	6803      	ldr	r3, [r0, #0]
 80056d8:	4a43      	ldr	r2, [pc, #268]	; (80057e8 <HAL_DMA_IRQHandler+0x13c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d014      	beq.n	8005708 <HAL_DMA_IRQHandler+0x5c>
 80056de:	3214      	adds	r2, #20
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <HAL_DMA_IRQHandler+0x6a>
 80056e4:	3214      	adds	r2, #20
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d017      	beq.n	800571a <HAL_DMA_IRQHandler+0x6e>
 80056ea:	3214      	adds	r2, #20
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d017      	beq.n	8005720 <HAL_DMA_IRQHandler+0x74>
 80056f0:	3214      	adds	r2, #20
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <HAL_DMA_IRQHandler+0x7a>
 80056f6:	3214      	adds	r2, #20
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d002      	beq.n	8005702 <HAL_DMA_IRQHandler+0x56>
 80056fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005700:	e003      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
 8005702:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005706:	e000      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
 8005708:	2204      	movs	r2, #4
 800570a:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_DMA_IRQHandler+0x140>)
 800570c:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800570e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005710:	b103      	cbz	r3, 8005714 <HAL_DMA_IRQHandler+0x68>
      hdma->XferHalfCpltCallback(hdma);
 8005712:	4798      	blx	r3
}
 8005714:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005716:	2240      	movs	r2, #64	; 0x40
 8005718:	e7f7      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
 800571a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800571e:	e7f4      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
 8005720:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005724:	e7f1      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
 8005726:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800572a:	e7ee      	b.n	800570a <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800572c:	2302      	movs	r3, #2
 800572e:	408b      	lsls	r3, r1
 8005730:	4213      	tst	r3, r2
 8005732:	d03c      	beq.n	80057ae <HAL_DMA_IRQHandler+0x102>
 8005734:	f015 0f02 	tst.w	r5, #2
 8005738:	d039      	beq.n	80057ae <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	f013 0f20 	tst.w	r3, #32
 8005740:	d106      	bne.n	8005750 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	f023 030a 	bic.w	r3, r3, #10
 8005748:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800574a:	2301      	movs	r3, #1
 800574c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005750:	6803      	ldr	r3, [r0, #0]
 8005752:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <HAL_DMA_IRQHandler+0x13c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d014      	beq.n	8005782 <HAL_DMA_IRQHandler+0xd6>
 8005758:	3214      	adds	r2, #20
 800575a:	4293      	cmp	r3, r2
 800575c:	d01c      	beq.n	8005798 <HAL_DMA_IRQHandler+0xec>
 800575e:	3214      	adds	r2, #20
 8005760:	4293      	cmp	r3, r2
 8005762:	d01b      	beq.n	800579c <HAL_DMA_IRQHandler+0xf0>
 8005764:	3214      	adds	r2, #20
 8005766:	4293      	cmp	r3, r2
 8005768:	d01b      	beq.n	80057a2 <HAL_DMA_IRQHandler+0xf6>
 800576a:	3214      	adds	r2, #20
 800576c:	4293      	cmp	r3, r2
 800576e:	d01b      	beq.n	80057a8 <HAL_DMA_IRQHandler+0xfc>
 8005770:	3214      	adds	r2, #20
 8005772:	4293      	cmp	r3, r2
 8005774:	d002      	beq.n	800577c <HAL_DMA_IRQHandler+0xd0>
 8005776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800577a:	e003      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
 800577c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005780:	e000      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
 8005782:	2202      	movs	r2, #2
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_DMA_IRQHandler+0x140>)
 8005786:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8005788:	2300      	movs	r3, #0
 800578a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800578e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0bf      	beq.n	8005714 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8005794:	4798      	blx	r3
 8005796:	e7bd      	b.n	8005714 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005798:	2220      	movs	r2, #32
 800579a:	e7f3      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
 800579c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a0:	e7f0      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
 80057a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057a6:	e7ed      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
 80057a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057ac:	e7ea      	b.n	8005784 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80057ae:	2308      	movs	r3, #8
 80057b0:	408b      	lsls	r3, r1
 80057b2:	4213      	tst	r3, r2
 80057b4:	d0ae      	beq.n	8005714 <HAL_DMA_IRQHandler+0x68>
 80057b6:	f015 0f08 	tst.w	r5, #8
 80057ba:	d0ab      	beq.n	8005714 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	f023 030e 	bic.w	r3, r3, #14
 80057c2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057c4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80057c6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80057c8:	2301      	movs	r3, #1
 80057ca:	fa03 f202 	lsl.w	r2, r3, r2
 80057ce:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057d0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80057d2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80057d6:	2300      	movs	r3, #0
 80057d8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80057dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d098      	beq.n	8005714 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 80057e2:	4798      	blx	r3
  return;
 80057e4:	e796      	b.n	8005714 <HAL_DMA_IRQHandler+0x68>
 80057e6:	bf00      	nop
 80057e8:	40020008 	.word	0x40020008
 80057ec:	40020000 	.word	0x40020000

080057f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80057f4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 80057f6:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057f8:	e0a6      	b.n	8005948 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80057fa:	4d80      	ldr	r5, [pc, #512]	; (80059fc <HAL_GPIO_Init+0x20c>)
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	d010      	beq.n	8005822 <HAL_GPIO_Init+0x32>
 8005800:	d907      	bls.n	8005812 <HAL_GPIO_Init+0x22>
 8005802:	4d7f      	ldr	r5, [pc, #508]	; (8005a00 <HAL_GPIO_Init+0x210>)
 8005804:	42ab      	cmp	r3, r5
 8005806:	d00c      	beq.n	8005822 <HAL_GPIO_Init+0x32>
 8005808:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 800580c:	42ab      	cmp	r3, r5
 800580e:	d008      	beq.n	8005822 <HAL_GPIO_Init+0x32>
 8005810:	e013      	b.n	800583a <HAL_GPIO_Init+0x4a>
 8005812:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005816:	42ab      	cmp	r3, r5
 8005818:	d003      	beq.n	8005822 <HAL_GPIO_Init+0x32>
 800581a:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 800581e:	42ab      	cmp	r3, r5
 8005820:	d107      	bne.n	8005832 <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005822:	688b      	ldr	r3, [r1, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d058      	beq.n	80058da <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005828:	2b01      	cmp	r3, #1
 800582a:	d051      	beq.n	80058d0 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 800582c:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800582e:	2408      	movs	r4, #8
 8005830:	e003      	b.n	800583a <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8005832:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005836:	42ab      	cmp	r3, r5
 8005838:	d0f3      	beq.n	8005822 <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800583a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800583e:	d84e      	bhi.n	80058de <HAL_GPIO_Init+0xee>
 8005840:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005842:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8005846:	d84c      	bhi.n	80058e2 <HAL_GPIO_Init+0xf2>
 8005848:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	250f      	movs	r5, #15
 8005850:	4095      	lsls	r5, r2
 8005852:	ea23 0305 	bic.w	r3, r3, r5
 8005856:	fa04 f202 	lsl.w	r2, r4, r2
 800585a:	4313      	orrs	r3, r2
 800585c:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800585e:	684b      	ldr	r3, [r1, #4]
 8005860:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005864:	d06e      	beq.n	8005944 <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005866:	4b67      	ldr	r3, [pc, #412]	; (8005a04 <HAL_GPIO_Init+0x214>)
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	619a      	str	r2, [r3, #24]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800587a:	ea4f 029c 	mov.w	r2, ip, lsr #2
 800587e:	1c95      	adds	r5, r2, #2
 8005880:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_GPIO_Init+0x218>)
 8005882:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005886:	f00c 0503 	and.w	r5, ip, #3
 800588a:	00ad      	lsls	r5, r5, #2
 800588c:	230f      	movs	r3, #15
 800588e:	40ab      	lsls	r3, r5
 8005890:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005894:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <HAL_GPIO_Init+0x21c>)
 8005896:	4298      	cmp	r0, r3
 8005898:	d029      	beq.n	80058ee <HAL_GPIO_Init+0xfe>
 800589a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589e:	4298      	cmp	r0, r3
 80058a0:	f000 808e 	beq.w	80059c0 <HAL_GPIO_Init+0x1d0>
 80058a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058a8:	4298      	cmp	r0, r3
 80058aa:	f000 808b 	beq.w	80059c4 <HAL_GPIO_Init+0x1d4>
 80058ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b2:	4298      	cmp	r0, r3
 80058b4:	d019      	beq.n	80058ea <HAL_GPIO_Init+0xfa>
 80058b6:	2304      	movs	r3, #4
 80058b8:	e01a      	b.n	80058f0 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80058ba:	68cc      	ldr	r4, [r1, #12]
          break;
 80058bc:	e7bd      	b.n	800583a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80058be:	68cc      	ldr	r4, [r1, #12]
 80058c0:	3404      	adds	r4, #4
          break;
 80058c2:	e7ba      	b.n	800583a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80058c4:	68cc      	ldr	r4, [r1, #12]
 80058c6:	3408      	adds	r4, #8
          break;
 80058c8:	e7b7      	b.n	800583a <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80058ca:	68cc      	ldr	r4, [r1, #12]
 80058cc:	340c      	adds	r4, #12
          break;
 80058ce:	e7b4      	b.n	800583a <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 80058d0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80058d2:	2408      	movs	r4, #8
 80058d4:	e7b1      	b.n	800583a <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80058d6:	2400      	movs	r4, #0
 80058d8:	e7af      	b.n	800583a <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80058da:	2404      	movs	r4, #4
 80058dc:	e7ad      	b.n	800583a <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80058de:	1d06      	adds	r6, r0, #4
 80058e0:	e7af      	b.n	8005842 <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80058e2:	f1ac 0208 	sub.w	r2, ip, #8
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	e7b0      	b.n	800584c <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80058ea:	2303      	movs	r3, #3
 80058ec:	e000      	b.n	80058f0 <HAL_GPIO_Init+0x100>
 80058ee:	2300      	movs	r3, #0
 80058f0:	40ab      	lsls	r3, r5
 80058f2:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 80058f4:	3202      	adds	r2, #2
 80058f6:	4d44      	ldr	r5, [pc, #272]	; (8005a08 <HAL_GPIO_Init+0x218>)
 80058f8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058fc:	684b      	ldr	r3, [r1, #4]
 80058fe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005902:	d061      	beq.n	80059c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005904:	4a42      	ldr	r2, [pc, #264]	; (8005a10 <HAL_GPIO_Init+0x220>)
 8005906:	6893      	ldr	r3, [r2, #8]
 8005908:	ea43 030e 	orr.w	r3, r3, lr
 800590c:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800590e:	684b      	ldr	r3, [r1, #4]
 8005910:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8005914:	d05e      	beq.n	80059d4 <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005916:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <HAL_GPIO_Init+0x220>)
 8005918:	68d3      	ldr	r3, [r2, #12]
 800591a:	ea43 030e 	orr.w	r3, r3, lr
 800591e:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005920:	684b      	ldr	r3, [r1, #4]
 8005922:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005926:	d05b      	beq.n	80059e0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <HAL_GPIO_Init+0x220>)
 800592a:	6853      	ldr	r3, [r2, #4]
 800592c:	ea43 030e 	orr.w	r3, r3, lr
 8005930:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005932:	684b      	ldr	r3, [r1, #4]
 8005934:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005938:	d058      	beq.n	80059ec <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800593a:	4a35      	ldr	r2, [pc, #212]	; (8005a10 <HAL_GPIO_Init+0x220>)
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	ea43 030e 	orr.w	r3, r3, lr
 8005942:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8005944:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005948:	680b      	ldr	r3, [r1, #0]
 800594a:	fa33 f20c 	lsrs.w	r2, r3, ip
 800594e:	d053      	beq.n	80059f8 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8005950:	2201      	movs	r2, #1
 8005952:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005956:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 800595a:	ea32 0303 	bics.w	r3, r2, r3
 800595e:	d1f1      	bne.n	8005944 <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8005960:	684b      	ldr	r3, [r1, #4]
 8005962:	2b12      	cmp	r3, #18
 8005964:	f63f af49 	bhi.w	80057fa <HAL_GPIO_Init+0xa>
 8005968:	2b12      	cmp	r3, #18
 800596a:	f63f af66 	bhi.w	800583a <HAL_GPIO_Init+0x4a>
 800596e:	a501      	add	r5, pc, #4	; (adr r5, 8005974 <HAL_GPIO_Init+0x184>)
 8005970:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8005974:	08005823 	.word	0x08005823
 8005978:	080058bb 	.word	0x080058bb
 800597c:	080058c5 	.word	0x080058c5
 8005980:	080058d7 	.word	0x080058d7
 8005984:	0800583b 	.word	0x0800583b
 8005988:	0800583b 	.word	0x0800583b
 800598c:	0800583b 	.word	0x0800583b
 8005990:	0800583b 	.word	0x0800583b
 8005994:	0800583b 	.word	0x0800583b
 8005998:	0800583b 	.word	0x0800583b
 800599c:	0800583b 	.word	0x0800583b
 80059a0:	0800583b 	.word	0x0800583b
 80059a4:	0800583b 	.word	0x0800583b
 80059a8:	0800583b 	.word	0x0800583b
 80059ac:	0800583b 	.word	0x0800583b
 80059b0:	0800583b 	.word	0x0800583b
 80059b4:	0800583b 	.word	0x0800583b
 80059b8:	080058bf 	.word	0x080058bf
 80059bc:	080058cb 	.word	0x080058cb
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80059c0:	2301      	movs	r3, #1
 80059c2:	e795      	b.n	80058f0 <HAL_GPIO_Init+0x100>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e793      	b.n	80058f0 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80059c8:	4a11      	ldr	r2, [pc, #68]	; (8005a10 <HAL_GPIO_Init+0x220>)
 80059ca:	6893      	ldr	r3, [r2, #8]
 80059cc:	ea23 030e 	bic.w	r3, r3, lr
 80059d0:	6093      	str	r3, [r2, #8]
 80059d2:	e79c      	b.n	800590e <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80059d4:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <HAL_GPIO_Init+0x220>)
 80059d6:	68d3      	ldr	r3, [r2, #12]
 80059d8:	ea23 030e 	bic.w	r3, r3, lr
 80059dc:	60d3      	str	r3, [r2, #12]
 80059de:	e79f      	b.n	8005920 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80059e0:	4a0b      	ldr	r2, [pc, #44]	; (8005a10 <HAL_GPIO_Init+0x220>)
 80059e2:	6853      	ldr	r3, [r2, #4]
 80059e4:	ea23 030e 	bic.w	r3, r3, lr
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	e7a2      	b.n	8005932 <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80059ec:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <HAL_GPIO_Init+0x220>)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	ea23 030e 	bic.w	r3, r3, lr
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e7a5      	b.n	8005944 <HAL_GPIO_Init+0x154>
  }
}
 80059f8:	b002      	add	sp, #8
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	10220000 	.word	0x10220000
 8005a00:	10310000 	.word	0x10310000
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40010800 	.word	0x40010800
 8005a10:	40010400 	.word	0x40010400

08005a14 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005a14:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005a16:	e06e      	b.n	8005af6 <HAL_GPIO_DeInit+0xe2>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a18:	2503      	movs	r5, #3
 8005a1a:	e000      	b.n	8005a1e <HAL_GPIO_DeInit+0xa>
 8005a1c:	2500      	movs	r5, #0
 8005a1e:	fa05 f404 	lsl.w	r4, r5, r4
 8005a22:	4564      	cmp	r4, ip
 8005a24:	d044      	beq.n	8005ab0 <HAL_GPIO_DeInit+0x9c>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005a26:	2bff      	cmp	r3, #255	; 0xff
 8005a28:	d85c      	bhi.n	8005ae4 <HAL_GPIO_DeInit+0xd0>
 8005a2a:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a2c:	2bff      	cmp	r3, #255	; 0xff
 8005a2e:	d85c      	bhi.n	8005aea <HAL_GPIO_DeInit+0xd6>
 8005a30:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005a32:	f8de 4000 	ldr.w	r4, [lr]
 8005a36:	f04f 0c0f 	mov.w	ip, #15
 8005a3a:	fa0c fc05 	lsl.w	ip, ip, r5
 8005a3e:	ea24 040c 	bic.w	r4, r4, ip
 8005a42:	f04f 0c04 	mov.w	ip, #4
 8005a46:	fa0c fc05 	lsl.w	ip, ip, r5
 8005a4a:	ea44 040c 	orr.w	r4, r4, ip
 8005a4e:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005a52:	68c4      	ldr	r4, [r0, #12]
 8005a54:	ea24 0303 	bic.w	r3, r4, r3
 8005a58:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8005a5a:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8005a5c:	fa31 f302 	lsrs.w	r3, r1, r2
 8005a60:	d047      	beq.n	8005af2 <HAL_GPIO_DeInit+0xde>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a62:	2301      	movs	r3, #1
 8005a64:	4093      	lsls	r3, r2
    if (iocurrent)
 8005a66:	400b      	ands	r3, r1
 8005a68:	d0f7      	beq.n	8005a5a <HAL_GPIO_DeInit+0x46>
      tmp = AFIO->EXTICR[position >> 2u];
 8005a6a:	0896      	lsrs	r6, r2, #2
 8005a6c:	1cb5      	adds	r5, r6, #2
 8005a6e:	4c27      	ldr	r4, [pc, #156]	; (8005b0c <HAL_GPIO_DeInit+0xf8>)
 8005a70:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005a74:	f002 0403 	and.w	r4, r2, #3
 8005a78:	00a4      	lsls	r4, r4, #2
 8005a7a:	f04f 0c0f 	mov.w	ip, #15
 8005a7e:	fa0c fe04 	lsl.w	lr, ip, r4
 8005a82:	ea0e 0c05 	and.w	ip, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005a86:	4d22      	ldr	r5, [pc, #136]	; (8005b10 <HAL_GPIO_DeInit+0xfc>)
 8005a88:	42a8      	cmp	r0, r5
 8005a8a:	d0c7      	beq.n	8005a1c <HAL_GPIO_DeInit+0x8>
 8005a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a90:	42a8      	cmp	r0, r5
 8005a92:	d009      	beq.n	8005aa8 <HAL_GPIO_DeInit+0x94>
 8005a94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a98:	42a8      	cmp	r0, r5
 8005a9a:	d007      	beq.n	8005aac <HAL_GPIO_DeInit+0x98>
 8005a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005aa0:	42a8      	cmp	r0, r5
 8005aa2:	d0b9      	beq.n	8005a18 <HAL_GPIO_DeInit+0x4>
 8005aa4:	2504      	movs	r5, #4
 8005aa6:	e7ba      	b.n	8005a1e <HAL_GPIO_DeInit+0xa>
 8005aa8:	2501      	movs	r5, #1
 8005aaa:	e7b8      	b.n	8005a1e <HAL_GPIO_DeInit+0xa>
 8005aac:	2502      	movs	r5, #2
 8005aae:	e7b6      	b.n	8005a1e <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005ab0:	4c18      	ldr	r4, [pc, #96]	; (8005b14 <HAL_GPIO_DeInit+0x100>)
 8005ab2:	6825      	ldr	r5, [r4, #0]
 8005ab4:	ea25 0503 	bic.w	r5, r5, r3
 8005ab8:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005aba:	6865      	ldr	r5, [r4, #4]
 8005abc:	ea25 0503 	bic.w	r5, r5, r3
 8005ac0:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8005ac2:	68e5      	ldr	r5, [r4, #12]
 8005ac4:	ea25 0503 	bic.w	r5, r5, r3
 8005ac8:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005aca:	68a5      	ldr	r5, [r4, #8]
 8005acc:	ea25 0503 	bic.w	r5, r5, r3
 8005ad0:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8005ad2:	4f0e      	ldr	r7, [pc, #56]	; (8005b0c <HAL_GPIO_DeInit+0xf8>)
 8005ad4:	1cb4      	adds	r4, r6, #2
 8005ad6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005ada:	ea25 050e 	bic.w	r5, r5, lr
 8005ade:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8005ae2:	e7a0      	b.n	8005a26 <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ae4:	f100 0e04 	add.w	lr, r0, #4
 8005ae8:	e7a0      	b.n	8005a2c <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005aea:	f1a2 0508 	sub.w	r5, r2, #8
 8005aee:	00ad      	lsls	r5, r5, #2
 8005af0:	e79f      	b.n	8005a32 <HAL_GPIO_DeInit+0x1e>
  }
}
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8005af4:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8005af6:	fa31 f302 	lsrs.w	r3, r1, r2
 8005afa:	d005      	beq.n	8005b08 <HAL_GPIO_DeInit+0xf4>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005afc:	2301      	movs	r3, #1
 8005afe:	4093      	lsls	r3, r2
    if (iocurrent)
 8005b00:	400b      	ands	r3, r1
 8005b02:	d0f7      	beq.n	8005af4 <HAL_GPIO_DeInit+0xe0>
{
 8005b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b06:	e7b0      	b.n	8005a6a <HAL_GPIO_DeInit+0x56>
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40010000 	.word	0x40010000
 8005b10:	40010800 	.word	0x40010800
 8005b14:	40010400 	.word	0x40010400

08005b18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b18:	6883      	ldr	r3, [r0, #8]
 8005b1a:	4219      	tst	r1, r3
 8005b1c:	d001      	beq.n	8005b22 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8005b1e:	2001      	movs	r0, #1
 8005b20:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b22:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8005b24:	4770      	bx	lr

08005b26 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b26:	b10a      	cbz	r2, 8005b2c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b28:	6101      	str	r1, [r0, #16]
 8005b2a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005b2c:	0409      	lsls	r1, r1, #16
 8005b2e:	6101      	str	r1, [r0, #16]
  }
}
 8005b30:	4770      	bx	lr

08005b32 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b32:	6803      	ldr	r3, [r0, #0]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005b3a:	d101      	bne.n	8005b40 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8005b3c:	2000      	movs	r0, #0
}
 8005b3e:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b44:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b50:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b54:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005b56:	f042 0204 	orr.w	r2, r2, #4
 8005b5a:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8005b5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8005b60:	2001      	movs	r0, #1
 8005b62:	4770      	bx	lr

08005b64 <I2C_WaitOnFlagUntilTimeout>:
{
 8005b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b68:	4606      	mov	r6, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	4617      	mov	r7, r2
 8005b6e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b70:	e03b      	b.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7ff f983 	bl	8004e7c <HAL_GetTick>
 8005b76:	9b06      	ldr	r3, [sp, #24]
 8005b78:	1ac0      	subs	r0, r0, r3
 8005b7a:	4540      	cmp	r0, r8
 8005b7c:	d802      	bhi.n	8005b84 <I2C_WaitOnFlagUntilTimeout+0x20>
 8005b7e:	f1b8 0f00 	cmp.w	r8, #0
 8005b82:	d132      	bne.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b84:	2d01      	cmp	r5, #1
 8005b86:	d018      	beq.n	8005bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b88:	6833      	ldr	r3, [r6, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	ea24 0303 	bic.w	r3, r4, r3
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	fab3 f383 	clz	r3, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	429f      	cmp	r7, r3
 8005b9a:	d126      	bne.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ba6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005baa:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8005bac:	f042 0220 	orr.w	r2, r2, #32
 8005bb0:	6432      	str	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005bb2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          return HAL_ERROR;
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	e027      	b.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005bba:	6833      	ldr	r3, [r6, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	ea24 0303 	bic.w	r3, r4, r3
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	fab3 f383 	clz	r3, r3
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	e7e5      	b.n	8005b98 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	ea24 0c03 	bic.w	ip, r4, r3
 8005bd4:	fa1f fc8c 	uxth.w	ip, ip
 8005bd8:	fabc fc8c 	clz	ip, ip
 8005bdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005be0:	4567      	cmp	r7, ip
 8005be2:	d111      	bne.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8005be4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005be8:	d1c3      	bne.n	8005b72 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bea:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8005bee:	2d01      	cmp	r5, #1
 8005bf0:	d0ec      	beq.n	8005bcc <I2C_WaitOnFlagUntilTimeout+0x68>
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	ea24 0c03 	bic.w	ip, r4, r3
 8005bfa:	fa1f fc8c 	uxth.w	ip, ip
 8005bfe:	fabc fc8c 	clz	ip, ip
 8005c02:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8005c06:	e7eb      	b.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8005c08:	2000      	movs	r0, #0
}
 8005c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005c0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c12:	4605      	mov	r5, r0
 8005c14:	460e      	mov	r6, r1
 8005c16:	4690      	mov	r8, r2
 8005c18:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c1a:	e053      	b.n	8005cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c22:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c30:	2220      	movs	r2, #32
 8005c32:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c36:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c3a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005c3c:	f042 0204 	orr.w	r2, r2, #4
 8005c40:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005c42:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005c46:	2001      	movs	r0, #1
 8005c48:	e04a      	b.n	8005ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7ff f917 	bl	8004e7c <HAL_GetTick>
 8005c4e:	eba0 0009 	sub.w	r0, r0, r9
 8005c52:	4540      	cmp	r0, r8
 8005c54:	d802      	bhi.n	8005c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 8005c56:	f1b8 0f00 	cmp.w	r8, #0
 8005c5a:	d133      	bne.n	8005cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c5c:	2f01      	cmp	r7, #1
 8005c5e:	d017      	beq.n	8005c90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	ea26 0303 	bic.w	r3, r6, r3
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b00      	subs	r3, #0
 8005c6c:	bf18      	it	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	b343      	cbz	r3, 8005cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	632b      	str	r3, [r5, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c76:	2220      	movs	r2, #32
 8005c78:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c7c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c80:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005c82:	f042 0220 	orr.w	r2, r2, #32
 8005c86:	642a      	str	r2, [r5, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005c88:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8005c8c:	2001      	movs	r0, #1
 8005c8e:	e027      	b.n	8005ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	ea26 0303 	bic.w	r3, r6, r3
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b00      	subs	r3, #0
 8005c9c:	bf18      	it	ne
 8005c9e:	2301      	movne	r3, #1
 8005ca0:	e7e6      	b.n	8005c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	699c      	ldr	r4, [r3, #24]
 8005ca6:	ea26 0404 	bic.w	r4, r6, r4
 8005caa:	b2a4      	uxth	r4, r4
 8005cac:	3c00      	subs	r4, #0
 8005cae:	bf18      	it	ne
 8005cb0:	2401      	movne	r4, #1
 8005cb2:	b1a4      	cbz	r4, 8005cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005cbc:	d1ae      	bne.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8005cbe:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005cc2:	d1c2      	bne.n	8005c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cc4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8005cc8:	2f01      	cmp	r7, #1
 8005cca:	d1ea      	bne.n	8005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8005ccc:	682b      	ldr	r3, [r5, #0]
 8005cce:	695c      	ldr	r4, [r3, #20]
 8005cd0:	ea26 0404 	bic.w	r4, r6, r4
 8005cd4:	b2a4      	uxth	r4, r4
 8005cd6:	3c00      	subs	r4, #0
 8005cd8:	bf18      	it	ne
 8005cda:	2401      	movne	r4, #1
 8005cdc:	e7e9      	b.n	8005cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 8005cde:	2000      	movs	r0, #0
}
 8005ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460d      	mov	r5, r1
 8005cea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005cf4:	d121      	bne.n	8005d3a <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f7ff ff1b 	bl	8005b32 <I2C_IsAcknowledgeFailed>
 8005cfc:	b9f8      	cbnz	r0, 8005d3e <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005cfe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005d02:	d0f3      	beq.n	8005cec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d04:	f7ff f8ba 	bl	8004e7c <HAL_GetTick>
 8005d08:	1b80      	subs	r0, r0, r6
 8005d0a:	42a8      	cmp	r0, r5
 8005d0c:	d801      	bhi.n	8005d12 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	d1ec      	bne.n	8005cec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d1a:	d1e7      	bne.n	8005cec <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d20:	2220      	movs	r2, #32
 8005d22:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d2c:	f042 0220 	orr.w	r2, r2, #32
 8005d30:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005d32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005d36:	2001      	movs	r0, #1
 8005d38:	e000      	b.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8005d3a:	2000      	movs	r0, #0
}
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005d3e:	2001      	movs	r0, #1
 8005d40:	e7fc      	b.n	8005d3c <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08005d44 <I2C_RequestMemoryWrite>:
{
 8005d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	4691      	mov	r9, r2
 8005d50:	461f      	mov	r7, r3
 8005d52:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005d56:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005d60:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d62:	9600      	str	r6, [sp, #0]
 8005d64:	4643      	mov	r3, r8
 8005d66:	2200      	movs	r2, #0
 8005d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6c:	f7ff fefa 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 8005d70:	b960      	cbnz	r0, 8005d8c <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005d78:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d7a:	4633      	mov	r3, r6
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4926      	ldr	r1, [pc, #152]	; (8005e18 <I2C_RequestMemoryWrite+0xd4>)
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff ff44 	bl	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d86:	b168      	cbz	r0, 8005da4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8005d88:	2001      	movs	r0, #1
 8005d8a:	e008      	b.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d94:	d002      	beq.n	8005d9c <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d9a:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005d9c:	2003      	movs	r0, #3
}
 8005d9e:	b005      	add	sp, #20
 8005da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da4:	2300      	movs	r3, #0
 8005da6:	9303      	str	r3, [sp, #12]
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	695a      	ldr	r2, [r3, #20]
 8005dac:	9203      	str	r2, [sp, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db4:	4632      	mov	r2, r6
 8005db6:	4641      	mov	r1, r8
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7ff ff93 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dbe:	b930      	cbnz	r0, 8005dce <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dc0:	2f01      	cmp	r7, #1
 8005dc2:	d10f      	bne.n	8005de4 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	fa5f f689 	uxtb.w	r6, r9
 8005dca:	611e      	str	r6, [r3, #16]
 8005dcc:	e7e7      	b.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d001      	beq.n	8005dd8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8005dd4:	2001      	movs	r0, #1
 8005dd6:	e7e2      	b.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	e7f7      	b.n	8005dd4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8005dea:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dec:	4632      	mov	r2, r6
 8005dee:	4641      	mov	r1, r8
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff ff77 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df6:	b920      	cbnz	r0, 8005e02 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	fa5f f689 	uxtb.w	r6, r9
 8005dfe:	611e      	str	r6, [r3, #16]
 8005e00:	e7cd      	b.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d001      	beq.n	8005e0c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8005e08:	2001      	movs	r0, #1
 8005e0a:	e7c8      	b.n	8005d9e <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0c:	6822      	ldr	r2, [r4, #0]
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e7f7      	b.n	8005e08 <I2C_RequestMemoryWrite+0xc4>
 8005e18:	00010002 	.word	0x00010002

08005e1c <I2C_RequestMemoryRead>:
{
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	4604      	mov	r4, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	4616      	mov	r6, r2
 8005e28:	4699      	mov	r9, r3
 8005e2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005e2c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e30:	6802      	ldr	r2, [r0, #0]
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e38:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e3a:	6803      	ldr	r3, [r0, #0]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005e42:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e44:	f8cd 8000 	str.w	r8, [sp]
 8005e48:	463b      	mov	r3, r7
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e50:	f7ff fe88 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 8005e54:	b970      	cbnz	r0, 8005e74 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e56:	fa5f fa85 	uxtb.w	sl, r5
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8005e60:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e62:	4643      	mov	r3, r8
 8005e64:	463a      	mov	r2, r7
 8005e66:	4941      	ldr	r1, [pc, #260]	; (8005f6c <I2C_RequestMemoryRead+0x150>)
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff fed0 	bl	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6e:	b168      	cbz	r0, 8005e8c <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8005e70:	2001      	movs	r0, #1
 8005e72:	e008      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e7c:	d002      	beq.n	8005e84 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e82:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005e84:	2003      	movs	r0, #3
}
 8005e86:	b004      	add	sp, #16
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	9203      	str	r2, [sp, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	9303      	str	r3, [sp, #12]
 8005e9a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e9c:	4642      	mov	r2, r8
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f7ff ff1f 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ea6:	b980      	cbnz	r0, 8005eca <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ea8:	f1b9 0f01 	cmp.w	r9, #1
 8005eac:	d118      	bne.n	8005ee0 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	b2f6      	uxtb	r6, r6
 8005eb2:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f7ff ff13 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ebe:	b368      	cbz	r0, 8005f1c <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d024      	beq.n	8005f10 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	e7dd      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d001      	beq.n	8005ed4 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	e7d8      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	6813      	ldr	r3, [r2, #0]
 8005ed8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	e7f7      	b.n	8005ed0 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	0a32      	lsrs	r2, r6, #8
 8005ee4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	4642      	mov	r2, r8
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff fefa 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	b918      	cbnz	r0, 8005efa <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	b2f6      	uxtb	r6, r6
 8005ef6:	611e      	str	r6, [r3, #16]
 8005ef8:	e7dc      	b.n	8005eb4 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d001      	beq.n	8005f04 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8005f00:	2001      	movs	r0, #1
 8005f02:	e7c0      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	6822      	ldr	r2, [r4, #0]
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e7f7      	b.n	8005f00 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e7d4      	b.n	8005ec6 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1c:	6822      	ldr	r2, [r4, #0]
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f26:	f8cd 8000 	str.w	r8, [sp]
 8005f2a:	463b      	mov	r3, r7
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f32:	4620      	mov	r0, r4
 8005f34:	f7ff fe16 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	b968      	cbnz	r0, 8005f56 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f3a:	6822      	ldr	r2, [r4, #0]
 8005f3c:	f04a 0301 	orr.w	r3, sl, #1
 8005f40:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f42:	4643      	mov	r3, r8
 8005f44:	463a      	mov	r2, r7
 8005f46:	4909      	ldr	r1, [pc, #36]	; (8005f6c <I2C_RequestMemoryRead+0x150>)
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff fe60 	bl	8005c0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f4e:	2800      	cmp	r0, #0
 8005f50:	d099      	beq.n	8005e86 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8005f52:	2001      	movs	r0, #1
 8005f54:	e797      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f5e:	d002      	beq.n	8005f66 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f64:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005f66:	2003      	movs	r0, #3
 8005f68:	e78d      	b.n	8005e86 <I2C_RequestMemoryRead+0x6a>
 8005f6a:	bf00      	nop
 8005f6c:	00010002 	.word	0x00010002

08005f70 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	4604      	mov	r4, r0
 8005f74:	460d      	mov	r5, r1
 8005f76:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f013 0f04 	tst.w	r3, #4
 8005f80:	d121      	bne.n	8005fc6 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff fdd5 	bl	8005b32 <I2C_IsAcknowledgeFailed>
 8005f88:	b9f8      	cbnz	r0, 8005fca <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005f8e:	d0f3      	beq.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f90:	f7fe ff74 	bl	8004e7c <HAL_GetTick>
 8005f94:	1b80      	subs	r0, r0, r6
 8005f96:	42a8      	cmp	r0, r5
 8005f98:	d801      	bhi.n	8005f9e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005f9a:	2d00      	cmp	r5, #0
 8005f9c:	d1ec      	bne.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f013 0f04 	tst.w	r3, #4
 8005fa6:	d1e7      	bne.n	8005f78 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	2220      	movs	r2, #32
 8005fae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fb6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fb8:	f042 0220 	orr.w	r2, r2, #32
 8005fbc:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005fbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e000      	b.n	8005fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8005fc6:	2000      	movs	r0, #0
}
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005fca:	2001      	movs	r0, #1
 8005fcc:	e7fc      	b.n	8005fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

08005fce <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005fce:	b570      	push	{r4, r5, r6, lr}
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	460d      	mov	r5, r1
 8005fd4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fd6:	e014      	b.n	8006002 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd8:	f06f 0210 	mvn.w	r2, #16
 8005fdc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fe8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005fec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005fee:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005ff0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e025      	b.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006000:	d010      	beq.n	8006024 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	6958      	ldr	r0, [r3, #20]
 8006006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800600a:	d11a      	bne.n	8006042 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800600c:	6958      	ldr	r0, [r3, #20]
 800600e:	f010 0f10 	tst.w	r0, #16
 8006012:	d1e1      	bne.n	8005fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fe ff32 	bl	8004e7c <HAL_GetTick>
 8006018:	1b80      	subs	r0, r0, r6
 800601a:	42a8      	cmp	r0, r5
 800601c:	d8ec      	bhi.n	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800601e:	2d00      	cmp	r5, #0
 8006020:	d1ef      	bne.n	8006002 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 8006022:	e7e9      	b.n	8005ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006024:	2300      	movs	r3, #0
 8006026:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006028:	2220      	movs	r2, #32
 800602a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800602e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006034:	f042 0220 	orr.w	r2, r2, #32
 8006038:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800603a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800603e:	2001      	movs	r0, #1
 8006040:	e000      	b.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 8006042:	2000      	movs	r0, #0
}
 8006044:	bd70      	pop	{r4, r5, r6, pc}
	...

08006048 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006048:	2800      	cmp	r0, #0
 800604a:	f000 80cc 	beq.w	80061e6 <HAL_I2C_Init+0x19e>
{
 800604e:	b570      	push	{r4, r5, r6, lr}
 8006050:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006052:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006056:	2b00      	cmp	r3, #0
 8006058:	d077      	beq.n	800614a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800605a:	2324      	movs	r3, #36	; 0x24
 800605c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800606a:	6822      	ldr	r2, [r4, #0]
 800606c:	6813      	ldr	r3, [r2, #0]
 800606e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006072:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006074:	6822      	ldr	r2, [r4, #0]
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800607c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800607e:	f000 feeb 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	4b5a      	ldr	r3, [pc, #360]	; (80061f0 <HAL_I2C_Init+0x1a8>)
 8006086:	429a      	cmp	r2, r3
 8006088:	d864      	bhi.n	8006154 <HAL_I2C_Init+0x10c>
 800608a:	4b5a      	ldr	r3, [pc, #360]	; (80061f4 <HAL_I2C_Init+0x1ac>)
 800608c:	4298      	cmp	r0, r3
 800608e:	bf8c      	ite	hi
 8006090:	2300      	movhi	r3, #0
 8006092:	2301      	movls	r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	f040 80a8 	bne.w	80061ea <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800609a:	4957      	ldr	r1, [pc, #348]	; (80061f8 <HAL_I2C_Init+0x1b0>)
 800609c:	fba1 3100 	umull	r3, r1, r1, r0
 80060a0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060a2:	6825      	ldr	r5, [r4, #0]
 80060a4:	686a      	ldr	r2, [r5, #4]
 80060a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80060aa:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80060ae:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060b0:	6821      	ldr	r1, [r4, #0]
 80060b2:	6a0a      	ldr	r2, [r1, #32]
 80060b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80060b8:	6866      	ldr	r6, [r4, #4]
 80060ba:	4d4d      	ldr	r5, [pc, #308]	; (80061f0 <HAL_I2C_Init+0x1a8>)
 80060bc:	42ae      	cmp	r6, r5
 80060be:	d84f      	bhi.n	8006160 <HAL_I2C_Init+0x118>
 80060c0:	3301      	adds	r3, #1
 80060c2:	4313      	orrs	r3, r2
 80060c4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060c6:	6821      	ldr	r1, [r4, #0]
 80060c8:	69ca      	ldr	r2, [r1, #28]
 80060ca:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80060ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060d2:	6865      	ldr	r5, [r4, #4]
 80060d4:	4b46      	ldr	r3, [pc, #280]	; (80061f0 <HAL_I2C_Init+0x1a8>)
 80060d6:	429d      	cmp	r5, r3
 80060d8:	d84c      	bhi.n	8006174 <HAL_I2C_Init+0x12c>
 80060da:	1e43      	subs	r3, r0, #1
 80060dc:	006d      	lsls	r5, r5, #1
 80060de:	fbb3 f3f5 	udiv	r3, r3, r5
 80060e2:	3301      	adds	r3, #1
 80060e4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80060e8:	4203      	tst	r3, r0
 80060ea:	d078      	beq.n	80061de <HAL_I2C_Init+0x196>
 80060ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f0:	431a      	orrs	r2, r3
 80060f2:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	680b      	ldr	r3, [r1, #0]
 80060f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060fc:	69e2      	ldr	r2, [r4, #28]
 80060fe:	6a20      	ldr	r0, [r4, #32]
 8006100:	4302      	orrs	r2, r0
 8006102:	4313      	orrs	r3, r2
 8006104:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006106:	6821      	ldr	r1, [r4, #0]
 8006108:	688b      	ldr	r3, [r1, #8]
 800610a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800610e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006112:	6922      	ldr	r2, [r4, #16]
 8006114:	68e0      	ldr	r0, [r4, #12]
 8006116:	4302      	orrs	r2, r0
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800611c:	6821      	ldr	r1, [r4, #0]
 800611e:	68cb      	ldr	r3, [r1, #12]
 8006120:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006124:	6962      	ldr	r2, [r4, #20]
 8006126:	69a0      	ldr	r0, [r4, #24]
 8006128:	4302      	orrs	r2, r0
 800612a:	4313      	orrs	r3, r2
 800612c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800612e:	6822      	ldr	r2, [r4, #0]
 8006130:	6813      	ldr	r3, [r2, #0]
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006138:	2000      	movs	r0, #0
 800613a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800613c:	2320      	movs	r3, #32
 800613e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006142:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006144:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8006148:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800614a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800614e:	f7fd f95f 	bl	8003410 <HAL_I2C_MspInit>
 8006152:	e782      	b.n	800605a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006154:	4b29      	ldr	r3, [pc, #164]	; (80061fc <HAL_I2C_Init+0x1b4>)
 8006156:	4298      	cmp	r0, r3
 8006158:	bf8c      	ite	hi
 800615a:	2300      	movhi	r3, #0
 800615c:	2301      	movls	r3, #1
 800615e:	e799      	b.n	8006094 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006160:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8006164:	fb05 f303 	mul.w	r3, r5, r3
 8006168:	4d25      	ldr	r5, [pc, #148]	; (8006200 <HAL_I2C_Init+0x1b8>)
 800616a:	fba5 5303 	umull	r5, r3, r5, r3
 800616e:	099b      	lsrs	r3, r3, #6
 8006170:	3301      	adds	r3, #1
 8006172:	e7a6      	b.n	80060c2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006174:	68a6      	ldr	r6, [r4, #8]
 8006176:	b9be      	cbnz	r6, 80061a8 <HAL_I2C_Init+0x160>
 8006178:	1e43      	subs	r3, r0, #1
 800617a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800617e:	fbb3 f3fc 	udiv	r3, r3, ip
 8006182:	3301      	adds	r3, #1
 8006184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006188:	fab3 f383 	clz	r3, r3
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	bb43      	cbnz	r3, 80061e2 <HAL_I2C_Init+0x19a>
 8006190:	b9c6      	cbnz	r6, 80061c4 <HAL_I2C_Init+0x17c>
 8006192:	1e43      	subs	r3, r0, #1
 8006194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006198:	fbb3 f3f5 	udiv	r3, r3, r5
 800619c:	3301      	adds	r3, #1
 800619e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a6:	e7a3      	b.n	80060f0 <HAL_I2C_Init+0xa8>
 80061a8:	1e43      	subs	r3, r0, #1
 80061aa:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80061ae:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80061b2:	fbb3 f3fc 	udiv	r3, r3, ip
 80061b6:	3301      	adds	r3, #1
 80061b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	e7e4      	b.n	800618e <HAL_I2C_Init+0x146>
 80061c4:	1e43      	subs	r3, r0, #1
 80061c6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061ca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80061ce:	fbb3 f3f5 	udiv	r3, r3, r5
 80061d2:	3301      	adds	r3, #1
 80061d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061dc:	e788      	b.n	80060f0 <HAL_I2C_Init+0xa8>
 80061de:	2304      	movs	r3, #4
 80061e0:	e786      	b.n	80060f0 <HAL_I2C_Init+0xa8>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e784      	b.n	80060f0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80061e6:	2001      	movs	r0, #1
}
 80061e8:	4770      	bx	lr
    return HAL_ERROR;
 80061ea:	2001      	movs	r0, #1
 80061ec:	e7ac      	b.n	8006148 <HAL_I2C_Init+0x100>
 80061ee:	bf00      	nop
 80061f0:	000186a0 	.word	0x000186a0
 80061f4:	001e847f 	.word	0x001e847f
 80061f8:	431bde83 	.word	0x431bde83
 80061fc:	003d08ff 	.word	0x003d08ff
 8006200:	10624dd3 	.word	0x10624dd3

08006204 <HAL_I2C_Mem_Write>:
{
 8006204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006208:	b083      	sub	sp, #12
 800620a:	4604      	mov	r4, r0
 800620c:	460f      	mov	r7, r1
 800620e:	4690      	mov	r8, r2
 8006210:	4699      	mov	r9, r3
 8006212:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006214:	f7fe fe32 	bl	8004e7c <HAL_GetTick>
 8006218:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800621a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800621e:	b2c0      	uxtb	r0, r0
 8006220:	2820      	cmp	r0, #32
 8006222:	d003      	beq.n	800622c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8006224:	2002      	movs	r0, #2
}
 8006226:	b003      	add	sp, #12
 8006228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800622c:	9500      	str	r5, [sp, #0]
 800622e:	2319      	movs	r3, #25
 8006230:	2201      	movs	r2, #1
 8006232:	494b      	ldr	r1, [pc, #300]	; (8006360 <HAL_I2C_Mem_Write+0x15c>)
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff fc95 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 800623a:	2800      	cmp	r0, #0
 800623c:	f040 8089 	bne.w	8006352 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8006240:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006244:	2b01      	cmp	r3, #1
 8006246:	f000 8086 	beq.w	8006356 <HAL_I2C_Mem_Write+0x152>
 800624a:	2301      	movs	r3, #1
 800624c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	f012 0f01 	tst.w	r2, #1
 8006258:	d103      	bne.n	8006262 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f042 0201 	orr.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800626a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800626c:	2321      	movs	r3, #33	; 0x21
 800626e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006278:	2300      	movs	r3, #0
 800627a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800627c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006280:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006284:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006286:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006288:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800628a:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_I2C_Mem_Write+0x160>)
 800628c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800628e:	9501      	str	r5, [sp, #4]
 8006290:	9600      	str	r6, [sp, #0]
 8006292:	464b      	mov	r3, r9
 8006294:	4642      	mov	r2, r8
 8006296:	4639      	mov	r1, r7
 8006298:	4620      	mov	r0, r4
 800629a:	f7ff fd53 	bl	8005d44 <I2C_RequestMemoryWrite>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d15b      	bne.n	800635a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80062a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d035      	beq.n	8006314 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a8:	462a      	mov	r2, r5
 80062aa:	4631      	mov	r1, r6
 80062ac:	4620      	mov	r0, r4
 80062ae:	f7ff fd19 	bl	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b2:	bb20      	cbnz	r0, 80062fe <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80062bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062be:	1c53      	adds	r3, r2, #1
 80062c0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80062c2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80062c4:	3901      	subs	r1, #1
 80062c6:	b289      	uxth	r1, r1
 80062c8:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80062ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	6958      	ldr	r0, [r3, #20]
 80062d8:	f010 0f04 	tst.w	r0, #4
 80062dc:	d0e1      	beq.n	80062a2 <HAL_I2C_Mem_Write+0x9e>
 80062de:	2900      	cmp	r1, #0
 80062e0:	d0df      	beq.n	80062a2 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e2:	7852      	ldrb	r2, [r2, #1]
 80062e4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80062e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80062ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80062ee:	3b01      	subs	r3, #1
 80062f0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80062f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8563      	strh	r3, [r4, #42]	; 0x2a
 80062fc:	e7d1      	b.n	80062a2 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006300:	2b04      	cmp	r3, #4
 8006302:	d001      	beq.n	8006308 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8006304:	2001      	movs	r0, #1
 8006306:	e78e      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	6813      	ldr	r3, [r2, #0]
 800630c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	e7f7      	b.n	8006304 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006314:	462a      	mov	r2, r5
 8006316:	4631      	mov	r1, r6
 8006318:	4620      	mov	r0, r4
 800631a:	f7ff fe29 	bl	8005f70 <I2C_WaitOnBTFFlagUntilTimeout>
 800631e:	b150      	cbz	r0, 8006336 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006322:	2b04      	cmp	r3, #4
 8006324:	d001      	beq.n	800632a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8006326:	2001      	movs	r0, #1
 8006328:	e77d      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	6813      	ldr	r3, [r2, #0]
 800632e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	e7f7      	b.n	8006326 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006336:	6822      	ldr	r2, [r4, #0]
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800633e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006340:	2320      	movs	r3, #32
 8006342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	2300      	movs	r3, #0
 8006348:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800634c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8006350:	e769      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8006352:	2002      	movs	r0, #2
 8006354:	e767      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8006356:	2002      	movs	r0, #2
 8006358:	e765      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800635a:	2001      	movs	r0, #1
 800635c:	e763      	b.n	8006226 <HAL_I2C_Mem_Write+0x22>
 800635e:	bf00      	nop
 8006360:	00100002 	.word	0x00100002
 8006364:	ffff0000 	.word	0xffff0000

08006368 <HAL_I2C_Mem_Read>:
{
 8006368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800636c:	b089      	sub	sp, #36	; 0x24
 800636e:	4604      	mov	r4, r0
 8006370:	460f      	mov	r7, r1
 8006372:	4690      	mov	r8, r2
 8006374:	4699      	mov	r9, r3
 8006376:	9e12      	ldr	r6, [sp, #72]	; 0x48
  __IO uint32_t count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 800637c:	f7fe fd7e 	bl	8004e7c <HAL_GetTick>
 8006380:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006382:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8006386:	b2c0      	uxtb	r0, r0
 8006388:	2820      	cmp	r0, #32
 800638a:	d004      	beq.n	8006396 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 800638c:	2702      	movs	r7, #2
}
 800638e:	4638      	mov	r0, r7
 8006390:	b009      	add	sp, #36	; 0x24
 8006392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006396:	9500      	str	r5, [sp, #0]
 8006398:	2319      	movs	r3, #25
 800639a:	2201      	movs	r2, #1
 800639c:	4981      	ldr	r1, [pc, #516]	; (80065a4 <HAL_I2C_Mem_Read+0x23c>)
 800639e:	4620      	mov	r0, r4
 80063a0:	f7ff fbe0 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f040 8172 	bne.w	800668e <HAL_I2C_Mem_Read+0x326>
    __HAL_LOCK(hi2c);
 80063aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f000 816f 	beq.w	8006692 <HAL_I2C_Mem_Read+0x32a>
 80063b4:	2301      	movs	r3, #1
 80063b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	f012 0f01 	tst.w	r2, #1
 80063c2:	d103      	bne.n	80063cc <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063cc:	6822      	ldr	r2, [r4, #0]
 80063ce:	6813      	ldr	r3, [r2, #0]
 80063d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063d4:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063d6:	2322      	movs	r3, #34	; 0x22
 80063d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063dc:	2340      	movs	r3, #64	; 0x40
 80063de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80063e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063e8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063ea:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80063ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063f2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063f4:	4b6c      	ldr	r3, [pc, #432]	; (80065a8 <HAL_I2C_Mem_Read+0x240>)
 80063f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80063f8:	9501      	str	r5, [sp, #4]
 80063fa:	9600      	str	r6, [sp, #0]
 80063fc:	464b      	mov	r3, r9
 80063fe:	4642      	mov	r2, r8
 8006400:	4639      	mov	r1, r7
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff fd0a 	bl	8005e1c <I2C_RequestMemoryRead>
 8006408:	4607      	mov	r7, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	f040 8143 	bne.w	8006696 <HAL_I2C_Mem_Read+0x32e>
    if (hi2c->XferSize == 0U)
 8006410:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006412:	b95b      	cbnz	r3, 800642c <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006414:	9303      	str	r3, [sp, #12]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	695a      	ldr	r2, [r3, #20]
 800641a:	9203      	str	r2, [sp, #12]
 800641c:	699a      	ldr	r2, [r3, #24]
 800641e:	9203      	str	r2, [sp, #12]
 8006420:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e0ed      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
    else if (hi2c->XferSize == 1U)
 800642c:	2b01      	cmp	r3, #1
 800642e:	d00f      	beq.n	8006450 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 8006430:	2b02      	cmp	r3, #2
 8006432:	d021      	beq.n	8006478 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006434:	6822      	ldr	r2, [r4, #0]
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800643c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800643e:	2300      	movs	r3, #0
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	9206      	str	r2, [sp, #24]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	9306      	str	r3, [sp, #24]
 800644c:	9b06      	ldr	r3, [sp, #24]
 800644e:	e0db      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006458:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800645a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645c:	2300      	movs	r3, #0
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	695a      	ldr	r2, [r3, #20]
 8006464:	9204      	str	r2, [sp, #16]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	9204      	str	r2, [sp, #16]
 800646a:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006472:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006474:	b662      	cpsie	i
}
 8006476:	e0c7      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006480:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006482:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006484:	2300      	movs	r3, #0
 8006486:	9305      	str	r3, [sp, #20]
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	9205      	str	r2, [sp, #20]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	9205      	str	r2, [sp, #20]
 8006492:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800649c:	b662      	cpsie	i
}
 800649e:	e0b3      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064a0:	462a      	mov	r2, r5
 80064a2:	4631      	mov	r1, r6
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7ff fd92 	bl	8005fce <I2C_WaitOnRXNEFlagUntilTimeout>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f040 80f5 	bne.w	800669a <HAL_I2C_Mem_Read+0x332>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80064b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064ba:	3301      	adds	r3, #1
 80064bc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80064be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064c0:	3b01      	subs	r3, #1
 80064c2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80064c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80064ce:	e09b      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064d0:	9500      	str	r5, [sp, #0]
 80064d2:	4633      	mov	r3, r6
 80064d4:	2200      	movs	r2, #0
 80064d6:	4935      	ldr	r1, [pc, #212]	; (80065ac <HAL_I2C_Mem_Read+0x244>)
 80064d8:	4620      	mov	r0, r4
 80064da:	f7ff fb43 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 80df 	bne.w	80066a2 <HAL_I2C_Mem_Read+0x33a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ec:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80064ee:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	691a      	ldr	r2, [r3, #16]
 80064f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80064f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064fa:	3301      	adds	r3, #1
 80064fc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80064fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006500:	3b01      	subs	r3, #1
 8006502:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006504:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006506:	b29b      	uxth	r3, r3
 8006508:	3b01      	subs	r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800650e:	4b28      	ldr	r3, [pc, #160]	; (80065b0 <HAL_I2C_Mem_Read+0x248>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <HAL_I2C_Mem_Read+0x24c>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	0a1b      	lsrs	r3, r3, #8
 800651c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006520:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006524:	9307      	str	r3, [sp, #28]
            count--;
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	3b01      	subs	r3, #1
 800652a:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 800652c:	9b07      	ldr	r3, [sp, #28]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d028      	beq.n	8006584 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	f012 0f04 	tst.w	r2, #4
 800653a:	d0f4      	beq.n	8006526 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006542:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800654c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800654e:	3301      	adds	r3, #1
 8006550:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006552:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006554:	3b01      	subs	r3, #1
 8006556:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006558:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29b      	uxth	r3, r3
 8006560:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006562:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800656a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800656c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800656e:	3301      	adds	r3, #1
 8006570:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006572:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006574:	3b01      	subs	r3, #1
 8006576:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006582:	e041      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006584:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006586:	2220      	movs	r2, #32
 8006588:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800658c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006590:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006592:	f042 0220 	orr.w	r2, r2, #32
 8006596:	6422      	str	r2, [r4, #64]	; 0x40
 8006598:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800659a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 800659e:	2701      	movs	r7, #1
 80065a0:	e6f5      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
 80065a2:	bf00      	nop
 80065a4:	00100002 	.word	0x00100002
 80065a8:	ffff0000 	.word	0xffff0000
 80065ac:	00010004 	.word	0x00010004
 80065b0:	20000000 	.word	0x20000000
 80065b4:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065b8:	462a      	mov	r2, r5
 80065ba:	4631      	mov	r1, r6
 80065bc:	4620      	mov	r0, r4
 80065be:	f7ff fd06 	bl	8005fce <I2C_WaitOnRXNEFlagUntilTimeout>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d16f      	bne.n	80066a6 <HAL_I2C_Mem_Read+0x33e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	691a      	ldr	r2, [r3, #16]
 80065ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065cc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065d0:	1c53      	adds	r3, r2, #1
 80065d2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80065d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065d6:	3b01      	subs	r3, #1
 80065d8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80065da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	3b01      	subs	r3, #1
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	6959      	ldr	r1, [r3, #20]
 80065e8:	f011 0f04 	tst.w	r1, #4
 80065ec:	d00c      	beq.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80065f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f4:	3301      	adds	r3, #1
 80065f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80065f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80065fa:	3b01      	subs	r3, #1
 80065fc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80065fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006600:	b29b      	uxth	r3, r3
 8006602:	3b01      	subs	r3, #1
 8006604:	b29b      	uxth	r3, r3
 8006606:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006608:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d036      	beq.n	800667c <HAL_I2C_Mem_Read+0x314>
      if (hi2c->XferSize <= 3U)
 800660e:	2b03      	cmp	r3, #3
 8006610:	d8d2      	bhi.n	80065b8 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 8006612:	2b01      	cmp	r3, #1
 8006614:	f43f af44 	beq.w	80064a0 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8006618:	2b02      	cmp	r3, #2
 800661a:	f47f af59 	bne.w	80064d0 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800661e:	9500      	str	r5, [sp, #0]
 8006620:	4633      	mov	r3, r6
 8006622:	2200      	movs	r2, #0
 8006624:	4921      	ldr	r1, [pc, #132]	; (80066ac <HAL_I2C_Mem_Read+0x344>)
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff fa9c 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 800662c:	2800      	cmp	r0, #0
 800662e:	d136      	bne.n	800669e <HAL_I2C_Mem_Read+0x336>
  __ASM volatile ("cpsid i" : : : "memory");
 8006630:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	6813      	ldr	r3, [r2, #0]
 8006636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800663a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006642:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006646:	3301      	adds	r3, #1
 8006648:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800664a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006650:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29b      	uxth	r3, r3
 8006658:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800665a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006662:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006666:	3301      	adds	r3, #1
 8006668:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800666a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800666c:	3b01      	subs	r3, #1
 800666e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006670:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29b      	uxth	r3, r3
 8006678:	8563      	strh	r3, [r4, #42]	; 0x2a
 800667a:	e7c5      	b.n	8006608 <HAL_I2C_Mem_Read+0x2a0>
    hi2c->State = HAL_I2C_STATE_READY;
 800667c:	2320      	movs	r3, #32
 800667e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006682:	2300      	movs	r3, #0
 8006684:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8006688:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800668c:	e67f      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 800668e:	2702      	movs	r7, #2
 8006690:	e67d      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8006692:	2702      	movs	r7, #2
 8006694:	e67b      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8006696:	2701      	movs	r7, #1
 8006698:	e679      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800669a:	2701      	movs	r7, #1
 800669c:	e677      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 800669e:	2701      	movs	r7, #1
 80066a0:	e675      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 80066a2:	2701      	movs	r7, #1
 80066a4:	e673      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 80066a6:	2701      	movs	r7, #1
 80066a8:	e671      	b.n	800638e <HAL_I2C_Mem_Read+0x26>
 80066aa:	bf00      	nop
 80066ac:	00010004 	.word	0x00010004

080066b0 <HAL_I2C_IsDeviceReady>:
{
 80066b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b4:	b085      	sub	sp, #20
 80066b6:	4604      	mov	r4, r0
 80066b8:	4688      	mov	r8, r1
 80066ba:	4691      	mov	r9, r2
 80066bc:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80066be:	f7fe fbdd 	bl	8004e7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d003      	beq.n	80066d4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80066cc:	2002      	movs	r0, #2
}
 80066ce:	b005      	add	sp, #20
 80066d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066d4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066d6:	9000      	str	r0, [sp, #0]
 80066d8:	2319      	movs	r3, #25
 80066da:	2201      	movs	r2, #1
 80066dc:	4957      	ldr	r1, [pc, #348]	; (800683c <HAL_I2C_IsDeviceReady+0x18c>)
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff fa40 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	f040 80a0 	bne.w	800682a <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 80066ea:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	f000 809d 	beq.w	800682e <HAL_I2C_IsDeviceReady+0x17e>
 80066f4:	2301      	movs	r3, #1
 80066f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	f012 0f01 	tst.w	r2, #1
 8006702:	d103      	bne.n	800670c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006714:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006716:	2324      	movs	r3, #36	; 0x24
 8006718:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800671c:	2700      	movs	r7, #0
 800671e:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006720:	4b47      	ldr	r3, [pc, #284]	; (8006840 <HAL_I2C_IsDeviceReady+0x190>)
 8006722:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006724:	e040      	b.n	80067a8 <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800672e:	d002      	beq.n	8006736 <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006730:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006734:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8006736:	2003      	movs	r0, #3
 8006738:	e7c9      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800673a:	23a0      	movs	r3, #160	; 0xa0
 800673c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006740:	6822      	ldr	r2, [r4, #0]
 8006742:	6953      	ldr	r3, [r2, #20]
 8006744:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006748:	6952      	ldr	r2, [r2, #20]
 800674a:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800674e:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
 8006752:	fa5f fc8c 	uxtb.w	ip, ip
 8006756:	f1bc 0fa0 	cmp.w	ip, #160	; 0xa0
 800675a:	d009      	beq.n	8006770 <HAL_I2C_IsDeviceReady+0xc0>
 800675c:	b943      	cbnz	r3, 8006770 <HAL_I2C_IsDeviceReady+0xc0>
 800675e:	b93a      	cbnz	r2, 8006770 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006760:	f7fe fb8c 	bl	8004e7c <HAL_GetTick>
 8006764:	1b80      	subs	r0, r0, r6
 8006766:	42a8      	cmp	r0, r5
 8006768:	d8e7      	bhi.n	800673a <HAL_I2C_IsDeviceReady+0x8a>
 800676a:	2d00      	cmp	r5, #0
 800676c:	d1e8      	bne.n	8006740 <HAL_I2C_IsDeviceReady+0x90>
 800676e:	e7e4      	b.n	800673a <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8006770:	2320      	movs	r3, #32
 8006772:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	f012 0f02 	tst.w	r2, #2
 800677e:	d131      	bne.n	80067e4 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006786:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800678e:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006790:	9600      	str	r6, [sp, #0]
 8006792:	2319      	movs	r3, #25
 8006794:	2201      	movs	r2, #1
 8006796:	4929      	ldr	r1, [pc, #164]	; (800683c <HAL_I2C_IsDeviceReady+0x18c>)
 8006798:	4620      	mov	r0, r4
 800679a:	f7ff f9e3 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d149      	bne.n	8006836 <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 80067a2:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80067a4:	454f      	cmp	r7, r9
 80067a6:	d238      	bcs.n	800681a <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80067b2:	9600      	str	r6, [sp, #0]
 80067b4:	462b      	mov	r3, r5
 80067b6:	2200      	movs	r2, #0
 80067b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff f9d1 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d1af      	bne.n	8006726 <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 80067cc:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80067ce:	f7fe fb55 	bl	8004e7c <HAL_GetTick>
 80067d2:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	6953      	ldr	r3, [r2, #20]
 80067d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067dc:	6952      	ldr	r2, [r2, #20]
 80067de:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067e2:	e7b4      	b.n	800674e <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ec:	2300      	movs	r3, #0
 80067ee:	9303      	str	r3, [sp, #12]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	695a      	ldr	r2, [r3, #20]
 80067f4:	9203      	str	r2, [sp, #12]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	9303      	str	r3, [sp, #12]
 80067fa:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067fc:	9600      	str	r6, [sp, #0]
 80067fe:	2319      	movs	r3, #25
 8006800:	2201      	movs	r2, #1
 8006802:	490e      	ldr	r1, [pc, #56]	; (800683c <HAL_I2C_IsDeviceReady+0x18c>)
 8006804:	4620      	mov	r0, r4
 8006806:	f7ff f9ad 	bl	8005b64 <I2C_WaitOnFlagUntilTimeout>
 800680a:	b990      	cbnz	r0, 8006832 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 800680c:	2320      	movs	r3, #32
 800680e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8006812:	2300      	movs	r3, #0
 8006814:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_OK;
 8006818:	e759      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800681a:	2320      	movs	r3, #32
 800681c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006820:	2300      	movs	r3, #0
 8006822:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8006826:	2001      	movs	r0, #1
 8006828:	e751      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 800682a:	2002      	movs	r0, #2
 800682c:	e74f      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800682e:	2002      	movs	r0, #2
 8006830:	e74d      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006832:	2001      	movs	r0, #1
 8006834:	e74b      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8006836:	2001      	movs	r0, #1
 8006838:	e749      	b.n	80066ce <HAL_I2C_IsDeviceReady+0x1e>
 800683a:	bf00      	nop
 800683c:	00100002 	.word	0x00100002
 8006840:	ffff0000 	.word	0xffff0000

08006844 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006844:	4b01      	ldr	r3, [pc, #4]	; (800684c <HAL_PWR_EnableBkUpAccess+0x8>)
 8006846:	2201      	movs	r2, #1
 8006848:	621a      	str	r2, [r3, #32]
}
 800684a:	4770      	bx	lr
 800684c:	420e0000 	.word	0x420e0000

08006850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006850:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <RCC_Delay+0x24>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a08      	ldr	r2, [pc, #32]	; (8006878 <RCC_Delay+0x28>)
 8006858:	fba2 2303 	umull	r2, r3, r2, r3
 800685c:	0a5b      	lsrs	r3, r3, #9
 800685e:	fb00 f303 	mul.w	r3, r0, r3
 8006862:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006864:	bf00      	nop
  }
  while (Delay --);
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	1e5a      	subs	r2, r3, #1
 800686a:	9201      	str	r2, [sp, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1f9      	bne.n	8006864 <RCC_Delay+0x14>
}
 8006870:	b002      	add	sp, #8
 8006872:	4770      	bx	lr
 8006874:	20000000 	.word	0x20000000
 8006878:	10624dd3 	.word	0x10624dd3

0800687c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800687c:	2800      	cmp	r0, #0
 800687e:	f000 81f1 	beq.w	8006c64 <HAL_RCC_OscConfig+0x3e8>
{
 8006882:	b570      	push	{r4, r5, r6, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006888:	6803      	ldr	r3, [r0, #0]
 800688a:	f013 0f01 	tst.w	r3, #1
 800688e:	d02c      	beq.n	80068ea <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006890:	4b99      	ldr	r3, [pc, #612]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b04      	cmp	r3, #4
 800689a:	d01d      	beq.n	80068d8 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800689c:	4b96      	ldr	r3, [pc, #600]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f003 030c 	and.w	r3, r3, #12
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d012      	beq.n	80068ce <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ae:	d041      	beq.n	8006934 <HAL_RCC_OscConfig+0xb8>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d155      	bne.n	8006960 <HAL_RCC_OscConfig+0xe4>
 80068b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e037      	b.n	800693e <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80068ce:	4b8a      	ldr	r3, [pc, #552]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80068d6:	d0e7      	beq.n	80068a8 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d8:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80068e0:	d003      	beq.n	80068ea <HAL_RCC_OscConfig+0x6e>
 80068e2:	6863      	ldr	r3, [r4, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 81bf 	beq.w	8006c68 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f013 0f02 	tst.w	r3, #2
 80068f0:	d075      	beq.n	80069de <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068f2:	4b81      	ldr	r3, [pc, #516]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f013 0f0c 	tst.w	r3, #12
 80068fa:	d05f      	beq.n	80069bc <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80068fc:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 030c 	and.w	r3, r3, #12
 8006904:	2b08      	cmp	r3, #8
 8006906:	d054      	beq.n	80069b2 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006908:	6923      	ldr	r3, [r4, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 808a 	beq.w	8006a24 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8006910:	4b7a      	ldr	r3, [pc, #488]	; (8006afc <HAL_RCC_OscConfig+0x280>)
 8006912:	2201      	movs	r2, #1
 8006914:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006916:	f7fe fab1 	bl	8004e7c <HAL_GetTick>
 800691a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	4b76      	ldr	r3, [pc, #472]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f013 0f02 	tst.w	r3, #2
 8006924:	d175      	bne.n	8006a12 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006926:	f7fe faa9 	bl	8004e7c <HAL_GetTick>
 800692a:	1b40      	subs	r0, r0, r5
 800692c:	2802      	cmp	r0, #2
 800692e:	d9f5      	bls.n	800691c <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8006930:	2003      	movs	r0, #3
 8006932:	e19e      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006934:	4a70      	ldr	r2, [pc, #448]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006936:	6813      	ldr	r3, [r2, #0]
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800693e:	6863      	ldr	r3, [r4, #4]
 8006940:	b343      	cbz	r3, 8006994 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8006942:	f7fe fa9b 	bl	8004e7c <HAL_GetTick>
 8006946:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006948:	4b6b      	ldr	r3, [pc, #428]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006950:	d1cb      	bne.n	80068ea <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006952:	f7fe fa93 	bl	8004e7c <HAL_GetTick>
 8006956:	1b40      	subs	r0, r0, r5
 8006958:	2864      	cmp	r0, #100	; 0x64
 800695a:	d9f5      	bls.n	8006948 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 800695c:	2003      	movs	r0, #3
 800695e:	e188      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006964:	d009      	beq.n	800697a <HAL_RCC_OscConfig+0xfe>
 8006966:	4b64      	ldr	r3, [pc, #400]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e7e1      	b.n	800693e <HAL_RCC_OscConfig+0xc2>
 800697a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800697e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e7d4      	b.n	800693e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8006994:	f7fe fa72 	bl	8004e7c <HAL_GetTick>
 8006998:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800699a:	4b57      	ldr	r3, [pc, #348]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80069a2:	d0a2      	beq.n	80068ea <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069a4:	f7fe fa6a 	bl	8004e7c <HAL_GetTick>
 80069a8:	1b40      	subs	r0, r0, r5
 80069aa:	2864      	cmp	r0, #100	; 0x64
 80069ac:	d9f5      	bls.n	800699a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 80069ae:	2003      	movs	r0, #3
 80069b0:	e15f      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80069b2:	4b51      	ldr	r3, [pc, #324]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80069ba:	d1a5      	bne.n	8006908 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069bc:	4b4e      	ldr	r3, [pc, #312]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f013 0f02 	tst.w	r3, #2
 80069c4:	d003      	beq.n	80069ce <HAL_RCC_OscConfig+0x152>
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	f040 814f 	bne.w	8006c6c <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ce:	4a4a      	ldr	r2, [pc, #296]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80069d0:	6813      	ldr	r3, [r2, #0]
 80069d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80069d6:	6961      	ldr	r1, [r4, #20]
 80069d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80069dc:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	f013 0f08 	tst.w	r3, #8
 80069e4:	d033      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069e6:	69a3      	ldr	r3, [r4, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d05c      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 80069ec:	4b43      	ldr	r3, [pc, #268]	; (8006afc <HAL_RCC_OscConfig+0x280>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80069f4:	f7fe fa42 	bl	8004e7c <HAL_GetTick>
 80069f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fa:	4b3f      	ldr	r3, [pc, #252]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	f013 0f02 	tst.w	r3, #2
 8006a02:	d121      	bne.n	8006a48 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a04:	f7fe fa3a 	bl	8004e7c <HAL_GetTick>
 8006a08:	1b40      	subs	r0, r0, r5
 8006a0a:	2802      	cmp	r0, #2
 8006a0c:	d9f5      	bls.n	80069fa <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8006a0e:	2003      	movs	r0, #3
 8006a10:	e12f      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a12:	4a39      	ldr	r2, [pc, #228]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006a14:	6813      	ldr	r3, [r2, #0]
 8006a16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a1a:	6961      	ldr	r1, [r4, #20]
 8006a1c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e7dc      	b.n	80069de <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8006a24:	4b35      	ldr	r3, [pc, #212]	; (8006afc <HAL_RCC_OscConfig+0x280>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a2a:	f7fe fa27 	bl	8004e7c <HAL_GetTick>
 8006a2e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a30:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f013 0f02 	tst.w	r3, #2
 8006a38:	d0d1      	beq.n	80069de <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a3a:	f7fe fa1f 	bl	8004e7c <HAL_GetTick>
 8006a3e:	1b40      	subs	r0, r0, r5
 8006a40:	2802      	cmp	r0, #2
 8006a42:	d9f5      	bls.n	8006a30 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8006a44:	2003      	movs	r0, #3
 8006a46:	e114      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8006a48:	2001      	movs	r0, #1
 8006a4a:	f7ff ff01 	bl	8006850 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f013 0f04 	tst.w	r3, #4
 8006a54:	f000 8096 	beq.w	8006b84 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006a60:	d134      	bne.n	8006acc <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a62:	4b25      	ldr	r3, [pc, #148]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	69da      	ldr	r2, [r3, #28]
 8006a66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	9301      	str	r3, [sp, #4]
 8006a74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006a76:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a78:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_RCC_OscConfig+0x284>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006a80:	d026      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a82:	68e3      	ldr	r3, [r4, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d03d      	beq.n	8006b04 <HAL_RCC_OscConfig+0x288>
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d153      	bne.n	8006b34 <HAL_RCC_OscConfig+0x2b8>
 8006a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a90:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006a94:	6a1a      	ldr	r2, [r3, #32]
 8006a96:	f022 0201 	bic.w	r2, r2, #1
 8006a9a:	621a      	str	r2, [r3, #32]
 8006a9c:	6a1a      	ldr	r2, [r3, #32]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	621a      	str	r2, [r3, #32]
 8006aa4:	e033      	b.n	8006b0e <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8006aa6:	4b15      	ldr	r3, [pc, #84]	; (8006afc <HAL_RCC_OscConfig+0x280>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006aae:	f7fe f9e5 	bl	8004e7c <HAL_GetTick>
 8006ab2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab4:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <HAL_RCC_OscConfig+0x27c>)
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f013 0f02 	tst.w	r3, #2
 8006abc:	d0c7      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fe f9dd 	bl	8004e7c <HAL_GetTick>
 8006ac2:	1b40      	subs	r0, r0, r5
 8006ac4:	2802      	cmp	r0, #2
 8006ac6:	d9f5      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8006ac8:	2003      	movs	r0, #3
 8006aca:	e0d2      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8006acc:	2500      	movs	r5, #0
 8006ace:	e7d3      	b.n	8006a78 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <HAL_RCC_OscConfig+0x284>)
 8006ad2:	6813      	ldr	r3, [r2, #0]
 8006ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ad8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006ada:	f7fe f9cf 	bl	8004e7c <HAL_GetTick>
 8006ade:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RCC_OscConfig+0x284>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006ae8:	d1cb      	bne.n	8006a82 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aea:	f7fe f9c7 	bl	8004e7c <HAL_GetTick>
 8006aee:	1b80      	subs	r0, r0, r6
 8006af0:	2864      	cmp	r0, #100	; 0x64
 8006af2:	d9f5      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8006af4:	2003      	movs	r0, #3
 8006af6:	e0bc      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
 8006af8:	40021000 	.word	0x40021000
 8006afc:	42420000 	.word	0x42420000
 8006b00:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b04:	4a5f      	ldr	r2, [pc, #380]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b06:	6a13      	ldr	r3, [r2, #32]
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	b333      	cbz	r3, 8006b60 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8006b12:	f7fe f9b3 	bl	8004e7c <HAL_GetTick>
 8006b16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b18:	4b5a      	ldr	r3, [pc, #360]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	f013 0f02 	tst.w	r3, #2
 8006b20:	d12f      	bne.n	8006b82 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b22:	f7fe f9ab 	bl	8004e7c <HAL_GetTick>
 8006b26:	1b80      	subs	r0, r0, r6
 8006b28:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b2c:	4298      	cmp	r0, r3
 8006b2e:	d9f3      	bls.n	8006b18 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 8006b30:	2003      	movs	r0, #3
 8006b32:	e09e      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b34:	2b05      	cmp	r3, #5
 8006b36:	d009      	beq.n	8006b4c <HAL_RCC_OscConfig+0x2d0>
 8006b38:	4b52      	ldr	r3, [pc, #328]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	621a      	str	r2, [r3, #32]
 8006b42:	6a1a      	ldr	r2, [r3, #32]
 8006b44:	f022 0204 	bic.w	r2, r2, #4
 8006b48:	621a      	str	r2, [r3, #32]
 8006b4a:	e7e0      	b.n	8006b0e <HAL_RCC_OscConfig+0x292>
 8006b4c:	4b4d      	ldr	r3, [pc, #308]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	f042 0204 	orr.w	r2, r2, #4
 8006b54:	621a      	str	r2, [r3, #32]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	621a      	str	r2, [r3, #32]
 8006b5e:	e7d6      	b.n	8006b0e <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 8006b60:	f7fe f98c 	bl	8004e7c <HAL_GetTick>
 8006b64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b66:	4b47      	ldr	r3, [pc, #284]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f013 0f02 	tst.w	r3, #2
 8006b6e:	d008      	beq.n	8006b82 <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b70:	f7fe f984 	bl	8004e7c <HAL_GetTick>
 8006b74:	1b80      	subs	r0, r0, r6
 8006b76:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b7a:	4298      	cmp	r0, r3
 8006b7c:	d9f3      	bls.n	8006b66 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8006b7e:	2003      	movs	r0, #3
 8006b80:	e077      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8006b82:	b9e5      	cbnz	r5, 8006bbe <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b84:	69e3      	ldr	r3, [r4, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d072      	beq.n	8006c70 <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b8a:	4a3e      	ldr	r2, [pc, #248]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006b8c:	6852      	ldr	r2, [r2, #4]
 8006b8e:	f002 020c 	and.w	r2, r2, #12
 8006b92:	2a08      	cmp	r2, #8
 8006b94:	d056      	beq.n	8006c44 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d017      	beq.n	8006bca <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8006b9a:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <HAL_RCC_OscConfig+0x40c>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006ba0:	f7fe f96c 	bl	8004e7c <HAL_GetTick>
 8006ba4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ba6:	4b37      	ldr	r3, [pc, #220]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006bae:	d047      	beq.n	8006c40 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fe f964 	bl	8004e7c <HAL_GetTick>
 8006bb4:	1b00      	subs	r0, r0, r4
 8006bb6:	2802      	cmp	r0, #2
 8006bb8:	d9f5      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8006bba:	2003      	movs	r0, #3
 8006bbc:	e059      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bbe:	4a31      	ldr	r2, [pc, #196]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006bc0:	69d3      	ldr	r3, [r2, #28]
 8006bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc6:	61d3      	str	r3, [r2, #28]
 8006bc8:	e7dc      	b.n	8006b84 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8006bca:	4b2f      	ldr	r3, [pc, #188]	; (8006c88 <HAL_RCC_OscConfig+0x40c>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006bd0:	f7fe f954 	bl	8004e7c <HAL_GetTick>
 8006bd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bd6:	4b2b      	ldr	r3, [pc, #172]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006bde:	d006      	beq.n	8006bee <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fe f94c 	bl	8004e7c <HAL_GetTick>
 8006be4:	1b40      	subs	r0, r0, r5
 8006be6:	2802      	cmp	r0, #2
 8006be8:	d9f5      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8006bea:	2003      	movs	r0, #3
 8006bec:	e041      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006bee:	6a23      	ldr	r3, [r4, #32]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d01a      	beq.n	8006c2c <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bf6:	4923      	ldr	r1, [pc, #140]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006bf8:	684b      	ldr	r3, [r1, #4]
 8006bfa:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8006bfe:	6a22      	ldr	r2, [r4, #32]
 8006c00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c02:	4302      	orrs	r2, r0
 8006c04:	4313      	orrs	r3, r2
 8006c06:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8006c08:	4b1f      	ldr	r3, [pc, #124]	; (8006c88 <HAL_RCC_OscConfig+0x40c>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006c0e:	f7fe f935 	bl	8004e7c <HAL_GetTick>
 8006c12:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c14:	4b1b      	ldr	r3, [pc, #108]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c1c:	d10e      	bne.n	8006c3c <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1e:	f7fe f92d 	bl	8004e7c <HAL_GetTick>
 8006c22:	1b00      	subs	r0, r0, r4
 8006c24:	2802      	cmp	r0, #2
 8006c26:	d9f5      	bls.n	8006c14 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8006c28:	2003      	movs	r0, #3
 8006c2a:	e022      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c2c:	4a15      	ldr	r2, [pc, #84]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006c2e:	6853      	ldr	r3, [r2, #4]
 8006c30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c34:	68a1      	ldr	r1, [r4, #8]
 8006c36:	430b      	orrs	r3, r1
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	e7dc      	b.n	8006bf6 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	e018      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
 8006c40:	2000      	movs	r0, #0
 8006c42:	e016      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d016      	beq.n	8006c76 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8006c48:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_RCC_OscConfig+0x408>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006c50:	6a22      	ldr	r2, [r4, #32]
 8006c52:	4291      	cmp	r1, r2
 8006c54:	d111      	bne.n	8006c7a <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006c56:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006c5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d10e      	bne.n	8006c7e <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8006c60:	2000      	movs	r0, #0
 8006c62:	e006      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8006c64:	2001      	movs	r0, #1
}
 8006c66:	4770      	bx	lr
        return HAL_ERROR;
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e002      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e000      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8006c70:	2000      	movs	r0, #0
}
 8006c72:	b002      	add	sp, #8
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8006c76:	2001      	movs	r0, #1
 8006c78:	e7fb      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
 8006c7c:	e7f9      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e7f7      	b.n	8006c72 <HAL_RCC_OscConfig+0x3f6>
 8006c82:	bf00      	nop
 8006c84:	40021000 	.word	0x40021000
 8006c88:	42420000 	.word	0x42420000

08006c8c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006c8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x40>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006c90:	f003 020c 	and.w	r2, r3, #12
 8006c94:	2a08      	cmp	r2, #8
 8006c96:	d001      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8006c98:	480d      	ldr	r0, [pc, #52]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x44>)
}
 8006c9a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c9c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8006ca0:	490c      	ldr	r1, [pc, #48]	; (8006cd4 <HAL_RCC_GetSysClockFreq+0x48>)
 8006ca2:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ca4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006ca8:	d00b      	beq.n	8006cc2 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006caa:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <HAL_RCC_GetSysClockFreq+0x40>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8006cb2:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <HAL_RCC_GetSysClockFreq+0x4c>)
 8006cb4:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cb6:	4a06      	ldr	r2, [pc, #24]	; (8006cd0 <HAL_RCC_GetSysClockFreq+0x44>)
 8006cb8:	fb02 f000 	mul.w	r0, r2, r0
 8006cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8006cc0:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <HAL_RCC_GetSysClockFreq+0x50>)
 8006cc4:	fb03 f000 	mul.w	r0, r3, r0
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	007a1200 	.word	0x007a1200
 8006cd4:	0800c5cc 	.word	0x0800c5cc
 8006cd8:	0800c5dc 	.word	0x0800c5dc
 8006cdc:	003d0900 	.word	0x003d0900

08006ce0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f000 80a0 	beq.w	8006e26 <HAL_RCC_ClockConfig+0x146>
{
 8006ce6:	b570      	push	{r4, r5, r6, lr}
 8006ce8:	460d      	mov	r5, r1
 8006cea:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cec:	4b52      	ldr	r3, [pc, #328]	; (8006e38 <HAL_RCC_ClockConfig+0x158>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	428b      	cmp	r3, r1
 8006cf6:	d20b      	bcs.n	8006d10 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf8:	4a4f      	ldr	r2, [pc, #316]	; (8006e38 <HAL_RCC_ClockConfig+0x158>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	f023 0307 	bic.w	r3, r3, #7
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d04:	6813      	ldr	r3, [r2, #0]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	428b      	cmp	r3, r1
 8006d0c:	f040 808d 	bne.w	8006e2a <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	f013 0f02 	tst.w	r3, #2
 8006d16:	d017      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	f013 0f04 	tst.w	r3, #4
 8006d1c:	d004      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d1e:	4a47      	ldr	r2, [pc, #284]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d20:	6853      	ldr	r3, [r2, #4]
 8006d22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d26:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	f013 0f08 	tst.w	r3, #8
 8006d2e:	d004      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d30:	4a42      	ldr	r2, [pc, #264]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d32:	6853      	ldr	r3, [r2, #4]
 8006d34:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d38:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d3a:	4a40      	ldr	r2, [pc, #256]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d3c:	6853      	ldr	r3, [r2, #4]
 8006d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d42:	68a1      	ldr	r1, [r4, #8]
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	f013 0f01 	tst.w	r3, #1
 8006d4e:	d031      	beq.n	8006db4 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d020      	beq.n	8006d98 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d025      	beq.n	8006da6 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5a:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	f012 0f02 	tst.w	r2, #2
 8006d62:	d064      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d64:	4935      	ldr	r1, [pc, #212]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d66:	684a      	ldr	r2, [r1, #4]
 8006d68:	f022 0203 	bic.w	r2, r2, #3
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8006d70:	f7fe f884 	bl	8004e7c <HAL_GetTick>
 8006d74:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d76:	4b31      	ldr	r3, [pc, #196]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f003 030c 	and.w	r3, r3, #12
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006d84:	d016      	beq.n	8006db4 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d86:	f7fe f879 	bl	8004e7c <HAL_GetTick>
 8006d8a:	1b80      	subs	r0, r0, r6
 8006d8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d90:	4298      	cmp	r0, r3
 8006d92:	d9f0      	bls.n	8006d76 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8006d94:	2003      	movs	r0, #3
 8006d96:	e045      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d98:	4a28      	ldr	r2, [pc, #160]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006da0:	d1e0      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8006da2:	2001      	movs	r0, #1
 8006da4:	e03e      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006da6:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006dae:	d1d9      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8006db0:	2001      	movs	r0, #1
 8006db2:	e037      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006db4:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <HAL_RCC_ClockConfig+0x158>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0307 	and.w	r3, r3, #7
 8006dbc:	42ab      	cmp	r3, r5
 8006dbe:	d90a      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <HAL_RCC_ClockConfig+0x158>)
 8006dc2:	6813      	ldr	r3, [r2, #0]
 8006dc4:	f023 0307 	bic.w	r3, r3, #7
 8006dc8:	432b      	orrs	r3, r5
 8006dca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dcc:	6813      	ldr	r3, [r2, #0]
 8006dce:	f003 0307 	and.w	r3, r3, #7
 8006dd2:	42ab      	cmp	r3, r5
 8006dd4:	d12d      	bne.n	8006e32 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f013 0f04 	tst.w	r3, #4
 8006ddc:	d006      	beq.n	8006dec <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dde:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006de0:	6853      	ldr	r3, [r2, #4]
 8006de2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006de6:	68e1      	ldr	r1, [r4, #12]
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	f013 0f08 	tst.w	r3, #8
 8006df2:	d007      	beq.n	8006e04 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006df4:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006df6:	6853      	ldr	r3, [r2, #4]
 8006df8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006dfc:	6921      	ldr	r1, [r4, #16]
 8006dfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006e02:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e04:	f7ff ff42 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <HAL_RCC_ClockConfig+0x15c>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006e10:	4a0b      	ldr	r2, [pc, #44]	; (8006e40 <HAL_RCC_ClockConfig+0x160>)
 8006e12:	5cd3      	ldrb	r3, [r2, r3]
 8006e14:	40d8      	lsrs	r0, r3
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <HAL_RCC_ClockConfig+0x164>)
 8006e18:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_ClockConfig+0x168>)
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	f7fc fcb1 	bl	8003784 <HAL_InitTick>
  return HAL_OK;
 8006e22:	2000      	movs	r0, #0
}
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006e26:	2001      	movs	r0, #1
}
 8006e28:	4770      	bx	lr
    return HAL_ERROR;
 8006e2a:	2001      	movs	r0, #1
 8006e2c:	e7fa      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8006e2e:	2001      	movs	r0, #1
 8006e30:	e7f8      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8006e32:	2001      	movs	r0, #1
 8006e34:	e7f6      	b.n	8006e24 <HAL_RCC_ClockConfig+0x144>
 8006e36:	bf00      	nop
 8006e38:	40022000 	.word	0x40022000
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	0800c5b4 	.word	0x0800c5b4
 8006e44:	20000000 	.word	0x20000000
 8006e48:	20000008 	.word	0x20000008

08006e4c <HAL_RCC_GetHCLKFreq>:
}
 8006e4c:	4b01      	ldr	r3, [pc, #4]	; (8006e54 <HAL_RCC_GetHCLKFreq+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000000 	.word	0x20000000

08006e58 <HAL_RCC_GetPCLK1Freq>:
{
 8006e58:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e5a:	f7ff fff7 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006e66:	4a03      	ldr	r2, [pc, #12]	; (8006e74 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
}
 8006e6a:	40d8      	lsrs	r0, r3
 8006e6c:	bd08      	pop	{r3, pc}
 8006e6e:	bf00      	nop
 8006e70:	40021000 	.word	0x40021000
 8006e74:	0800c5c4 	.word	0x0800c5c4

08006e78 <HAL_RCC_GetPCLK2Freq>:
{
 8006e78:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e7a:	f7ff ffe7 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e7e:	4b04      	ldr	r3, [pc, #16]	; (8006e90 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006e86:	4a03      	ldr	r2, [pc, #12]	; (8006e94 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006e88:	5cd3      	ldrb	r3, [r2, r3]
}
 8006e8a:	40d8      	lsrs	r0, r3
 8006e8c:	bd08      	pop	{r3, pc}
 8006e8e:	bf00      	nop
 8006e90:	40021000 	.word	0x40021000
 8006e94:	0800c5c4 	.word	0x0800c5c4

08006e98 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e98:	230f      	movs	r3, #15
 8006e9a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_RCC_GetClockConfig+0x34>)
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	f002 0203 	and.w	r2, r2, #3
 8006ea4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006eac:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006eb4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	08db      	lsrs	r3, r3, #3
 8006eba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ebe:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ec0:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <HAL_RCC_GetClockConfig+0x38>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	600b      	str	r3, [r1, #0]
}
 8006eca:	4770      	bx	lr
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	40022000 	.word	0x40022000

08006ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006eda:	6803      	ldr	r3, [r0, #0]
 8006edc:	f013 0f01 	tst.w	r3, #1
 8006ee0:	d036      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006eea:	d149      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eec:	4b3c      	ldr	r3, [pc, #240]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ef4:	61da      	str	r2, [r3, #28]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006f00:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f02:	4b38      	ldr	r3, [pc, #224]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f0a:	d03b      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f0c:	4b34      	ldr	r3, [pc, #208]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f10:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006f14:	d013      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d00e      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f20:	4a2f      	ldr	r2, [pc, #188]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006f22:	6a13      	ldr	r3, [r2, #32]
 8006f24:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f28:	492f      	ldr	r1, [pc, #188]	; (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8006f2a:	2601      	movs	r6, #1
 8006f2c:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f30:	2600      	movs	r6, #0
 8006f32:	f8c1 6440 	str.w	r6, [r1, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f36:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f38:	f013 0f01 	tst.w	r3, #1
 8006f3c:	d136      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f3e:	4a28      	ldr	r2, [pc, #160]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006f40:	6a13      	ldr	r3, [r2, #32]
 8006f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f46:	6861      	ldr	r1, [r4, #4]
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	d13e      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xfa>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f50:	6823      	ldr	r3, [r4, #0]
 8006f52:	f013 0f02 	tst.w	r3, #2
 8006f56:	d006      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f58:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006f5a:	6853      	ldr	r3, [r2, #4]
 8006f5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006f60:	68a1      	ldr	r1, [r4, #8]
 8006f62:	430b      	orrs	r3, r1
 8006f64:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	f013 0f10 	tst.w	r3, #16
 8006f6c:	d034      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006f70:	6853      	ldr	r3, [r2, #4]
 8006f72:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006f76:	68e1      	ldr	r1, [r4, #12]
 8006f78:	430b      	orrs	r3, r1
 8006f7a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e02c      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus pwrclkchanged = RESET;
 8006f80:	2500      	movs	r5, #0
 8006f82:	e7be      	b.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f84:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f8c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006f8e:	f7fd ff75 	bl	8004e7c <HAL_GetTick>
 8006f92:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f94:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006f9c:	d1b6      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f9e:	f7fd ff6d 	bl	8004e7c <HAL_GetTick>
 8006fa2:	1b80      	subs	r0, r0, r6
 8006fa4:	2864      	cmp	r0, #100	; 0x64
 8006fa6:	d9f5      	bls.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8006fa8:	2003      	movs	r0, #3
 8006faa:	e016      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8006fac:	f7fd ff66 	bl	8004e7c <HAL_GetTick>
 8006fb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f013 0f02 	tst.w	r3, #2
 8006fba:	d1c0      	bne.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x6a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fbc:	f7fd ff5e 	bl	8004e7c <HAL_GetTick>
 8006fc0:	1b80      	subs	r0, r0, r6
 8006fc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	d9f3      	bls.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xde>
            return HAL_TIMEOUT;
 8006fca:	2003      	movs	r0, #3
 8006fcc:	e005      	b.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fce:	69d3      	ldr	r3, [r2, #28]
 8006fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd4:	61d3      	str	r3, [r2, #28]
 8006fd6:	e7bb      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  return HAL_OK;
 8006fd8:	2000      	movs	r0, #0
}
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd70      	pop	{r4, r5, r6, pc}
 8006fde:	bf00      	nop
 8006fe0:	40021000 	.word	0x40021000
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	42420000 	.word	0x42420000

08006fec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fec:	b508      	push	{r3, lr}
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006fee:	2802      	cmp	r0, #2
 8006ff0:	d04e      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8006ff2:	2810      	cmp	r0, #16
 8006ff4:	d003      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8006ff6:	2801      	cmp	r0, #1
 8006ff8:	d028      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8006ffa:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8006ffc:	bd08      	pop	{r3, pc}
      temp_reg = RCC->CFGR;
 8006ffe:	4b2b      	ldr	r3, [pc, #172]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007000:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007002:	6818      	ldr	r0, [r3, #0]
 8007004:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8007008:	d0f8      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800700a:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800700e:	4928      	ldr	r1, [pc, #160]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8007010:	5cc8      	ldrb	r0, [r1, r3]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007012:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8007016:	d015      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007018:	4b24      	ldr	r3, [pc, #144]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8007020:	4a24      	ldr	r2, [pc, #144]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 8007022:	5cd2      	ldrb	r2, [r2, r3]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007024:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8007026:	fbb3 f3f2 	udiv	r3, r3, r2
 800702a:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800702e:	4b1f      	ldr	r3, [pc, #124]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007036:	d1e1      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          frequency = (pllclk * 2) / 3;
 8007038:	0040      	lsls	r0, r0, #1
 800703a:	4b20      	ldr	r3, [pc, #128]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>)
 800703c:	fba3 3000 	umull	r3, r0, r3, r0
 8007040:	0840      	lsrs	r0, r0, #1
 8007042:	e7db      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>)
 8007046:	fb03 f000 	mul.w	r0, r3, r0
 800704a:	e7f0      	b.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
      temp_reg = RCC->BDCR;
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 800704e:	6a1b      	ldr	r3, [r3, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007050:	f240 3202 	movw	r2, #770	; 0x302
 8007054:	401a      	ands	r2, r3
 8007056:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800705a:	d024      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800705c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007064:	d004      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800706a:	d009      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  uint32_t temp_reg = 0U, frequency = 0U;
 800706c:	2000      	movs	r0, #0
 800706e:	e7c5      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007070:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007074:	f012 0f02 	tst.w	r2, #2
 8007078:	d0f5      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSI_VALUE;
 800707a:	f649 4040 	movw	r0, #40000	; 0x9c40
 800707e:	e7bd      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007088:	d0b8      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = HSE_VALUE / 128U;
 800708a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return (frequency);
 800708e:	e7b5      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007090:	f7ff fef2 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800709c:	3301      	adds	r3, #1
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80070a4:	e7aa      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
        frequency = LSE_VALUE;
 80070a6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80070aa:	e7a7      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 80070ac:	40021000 	.word	0x40021000
 80070b0:	0800c5e0 	.word	0x0800c5e0
 80070b4:	0800c5f0 	.word	0x0800c5f0
 80070b8:	007a1200 	.word	0x007a1200
 80070bc:	aaaaaaab 	.word	0xaaaaaaab
 80070c0:	003d0900 	.word	0x003d0900

080070c4 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80070c4:	b500      	push	{lr}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80070c6:	6803      	ldr	r3, [r0, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	fa1f fe81 	uxth.w	lr, r1
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80070ce:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	fa1f fc82 	uxth.w	ip, r2

  if (high1 != high2)
 80070d6:	45e6      	cmp	lr, ip
 80070d8:	d005      	beq.n	80070e6 <RTC_ReadTimeCounter+0x22>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80070da:	69d8      	ldr	r0, [r3, #28]
 80070dc:	b280      	uxth	r0, r0
 80070de:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 80070e2:	f85d fb04 	ldr.w	pc, [sp], #4
    timecounter = (((uint32_t) high1 << 16U) | low);
 80070e6:	b280      	uxth	r0, r0
 80070e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
  return timecounter;
 80070ec:	e7f9      	b.n	80070e2 <RTC_ReadTimeCounter+0x1e>

080070ee <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80070f4:	b29b      	uxth	r3, r3
}
 80070f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80070fa:	4770      	bx	lr

080070fc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80070fc:	0903      	lsrs	r3, r0, #4
 80070fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8007102:	f000 000f 	and.w	r0, r0, #15
 8007106:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800710a:	b2c0      	uxtb	r0, r0
 800710c:	4770      	bx	lr
	...

08007110 <RTC_WeekDayNum>:
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8007110:	f500 6cfa 	add.w	ip, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 8007114:	2902      	cmp	r1, #2
 8007116:	d821      	bhi.n	800715c <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007118:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800711c:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <RTC_WeekDayNum+0x8c>)
 8007122:	fba3 3101 	umull	r3, r1, r3, r1
 8007126:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 800712a:	4463      	add	r3, ip
 800712c:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 8007130:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 8007134:	4a1a      	ldr	r2, [pc, #104]	; (80071a0 <RTC_WeekDayNum+0x90>)
 8007136:	fba2 2000 	umull	r2, r0, r2, r0
 800713a:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 800713e:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 8007142:	3304      	adds	r3, #4
 8007144:	4817      	ldr	r0, [pc, #92]	; (80071a4 <RTC_WeekDayNum+0x94>)
 8007146:	fba0 2003 	umull	r2, r0, r0, r3
 800714a:	1a1a      	subs	r2, r3, r0
 800714c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8007150:	0880      	lsrs	r0, r0, #2
 8007152:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007156:	1a18      	subs	r0, r3, r0
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
  }

  return (uint8_t)weekday;
}
 8007158:	b2c0      	uxtb	r0, r0
 800715a:	4770      	bx	lr
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800715c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8007160:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <RTC_WeekDayNum+0x8c>)
 8007166:	fba3 3101 	umull	r3, r1, r3, r1
 800716a:	eb02 0351 	add.w	r3, r2, r1, lsr #1
 800716e:	4463      	add	r3, ip
 8007170:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 8007174:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <RTC_WeekDayNum+0x90>)
 8007176:	fba2 120c 	umull	r1, r2, r2, ip
 800717a:	eba3 1352 	sub.w	r3, r3, r2, lsr #5
 800717e:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8007182:	3302      	adds	r3, #2
 8007184:	4807      	ldr	r0, [pc, #28]	; (80071a4 <RTC_WeekDayNum+0x94>)
 8007186:	fba0 2003 	umull	r2, r0, r0, r3
 800718a:	1a1a      	subs	r2, r3, r0
 800718c:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8007190:	0880      	lsrs	r0, r0, #2
 8007192:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007196:	1a18      	subs	r0, r3, r0
 8007198:	e7de      	b.n	8007158 <RTC_WeekDayNum+0x48>
 800719a:	bf00      	nop
 800719c:	38e38e39 	.word	0x38e38e39
 80071a0:	51eb851f 	.word	0x51eb851f
 80071a4:	24924925 	.word	0x24924925

080071a8 <RTC_EnterInitMode>:
{
 80071a8:	b538      	push	{r3, r4, r5, lr}
 80071aa:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80071ac:	f7fd fe66 	bl	8004e7c <HAL_GetTick>
 80071b0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	f012 0f20 	tst.w	r2, #32
 80071ba:	d107      	bne.n	80071cc <RTC_EnterInitMode+0x24>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80071bc:	f7fd fe5e 	bl	8004e7c <HAL_GetTick>
 80071c0:	1b40      	subs	r0, r0, r5
 80071c2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80071c6:	d9f4      	bls.n	80071b2 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80071c8:	2003      	movs	r0, #3
 80071ca:	e004      	b.n	80071d6 <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	f042 0210 	orr.w	r2, r2, #16
 80071d2:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 80071d4:	2000      	movs	r0, #0
}
 80071d6:	bd38      	pop	{r3, r4, r5, pc}

080071d8 <RTC_ExitInitMode>:
{
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071dc:	6802      	ldr	r2, [r0, #0]
 80071de:	6853      	ldr	r3, [r2, #4]
 80071e0:	f023 0310 	bic.w	r3, r3, #16
 80071e4:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80071e6:	f7fd fe49 	bl	8004e7c <HAL_GetTick>
 80071ea:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f013 0f20 	tst.w	r3, #32
 80071f4:	d107      	bne.n	8007206 <RTC_ExitInitMode+0x2e>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80071f6:	f7fd fe41 	bl	8004e7c <HAL_GetTick>
 80071fa:	1b40      	subs	r0, r0, r5
 80071fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007200:	d9f4      	bls.n	80071ec <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8007202:	2003      	movs	r0, #3
 8007204:	e000      	b.n	8007208 <RTC_ExitInitMode+0x30>
  return HAL_OK;
 8007206:	2000      	movs	r0, #0
}
 8007208:	bd38      	pop	{r3, r4, r5, pc}

0800720a <RTC_WriteTimeCounter>:
{
 800720a:	b538      	push	{r3, r4, r5, lr}
 800720c:	4605      	mov	r5, r0
 800720e:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007210:	f7ff ffca 	bl	80071a8 <RTC_EnterInitMode>
 8007214:	b108      	cbz	r0, 800721a <RTC_WriteTimeCounter+0x10>
    status = HAL_ERROR;
 8007216:	2001      	movs	r0, #1
}
 8007218:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	0c22      	lsrs	r2, r4, #16
 800721e:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b2a4      	uxth	r4, r4
 8007224:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007226:	4628      	mov	r0, r5
 8007228:	f7ff ffd6 	bl	80071d8 <RTC_ExitInitMode>
 800722c:	2800      	cmp	r0, #0
 800722e:	d0f3      	beq.n	8007218 <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 8007230:	2001      	movs	r0, #1
 8007232:	e7f1      	b.n	8007218 <RTC_WriteTimeCounter+0xe>

08007234 <RTC_WriteAlarmCounter>:
{
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4605      	mov	r5, r0
 8007238:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800723a:	f7ff ffb5 	bl	80071a8 <RTC_EnterInitMode>
 800723e:	b108      	cbz	r0, 8007244 <RTC_WriteAlarmCounter+0x10>
    status = HAL_ERROR;
 8007240:	2001      	movs	r0, #1
}
 8007242:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	0c22      	lsrs	r2, r4, #16
 8007248:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b2a4      	uxth	r4, r4
 800724e:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007250:	4628      	mov	r0, r5
 8007252:	f7ff ffc1 	bl	80071d8 <RTC_ExitInitMode>
 8007256:	2800      	cmp	r0, #0
 8007258:	d0f3      	beq.n	8007242 <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 800725a:	2001      	movs	r0, #1
 800725c:	e7f1      	b.n	8007242 <RTC_WriteAlarmCounter+0xe>

0800725e <HAL_RTC_SetTime>:
{
 800725e:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8007260:	2800      	cmp	r0, #0
 8007262:	d057      	beq.n	8007314 <HAL_RTC_SetTime+0xb6>
 8007264:	460d      	mov	r5, r1
 8007266:	4606      	mov	r6, r0
 8007268:	2900      	cmp	r1, #0
 800726a:	d055      	beq.n	8007318 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 800726c:	7c03      	ldrb	r3, [r0, #16]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d054      	beq.n	800731c <HAL_RTC_SetTime+0xbe>
 8007272:	2301      	movs	r3, #1
 8007274:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007276:	2302      	movs	r3, #2
 8007278:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800727a:	b9ba      	cbnz	r2, 80072ac <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800727c:	780b      	ldrb	r3, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 800727e:	784c      	ldrb	r4, [r1, #1]
 8007280:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 8007284:	00a4      	lsls	r4, r4, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007286:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800728a:	fb02 4403 	mla	r4, r2, r3, r4
                              ((uint32_t)sTime->Seconds));
 800728e:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007290:	441c      	add	r4, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007292:	4621      	mov	r1, r4
 8007294:	4630      	mov	r0, r6
 8007296:	f7ff ffb8 	bl	800720a <RTC_WriteTimeCounter>
 800729a:	4605      	mov	r5, r0
 800729c:	b1c8      	cbz	r0, 80072d2 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800729e:	2304      	movs	r3, #4
 80072a0:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 80072a2:	2300      	movs	r3, #0
 80072a4:	7433      	strb	r3, [r6, #16]
    return HAL_ERROR;
 80072a6:	2501      	movs	r5, #1
}
 80072a8:	4628      	mov	r0, r5
 80072aa:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80072ac:	7808      	ldrb	r0, [r1, #0]
 80072ae:	f7ff ff25 	bl	80070fc <RTC_Bcd2ToByte>
 80072b2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80072b6:	fb03 f400 	mul.w	r4, r3, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80072ba:	7868      	ldrb	r0, [r5, #1]
 80072bc:	f7ff ff1e 	bl	80070fc <RTC_Bcd2ToByte>
 80072c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80072c4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80072c8:	78a8      	ldrb	r0, [r5, #2]
 80072ca:	f7ff ff17 	bl	80070fc <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80072ce:	4404      	add	r4, r0
 80072d0:	e7df      	b.n	8007292 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80072d2:	6832      	ldr	r2, [r6, #0]
 80072d4:	6853      	ldr	r3, [r2, #4]
 80072d6:	f023 0305 	bic.w	r3, r3, #5
 80072da:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff ff06 	bl	80070ee <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80072e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072e6:	d001      	beq.n	80072ec <HAL_RTC_SetTime+0x8e>
      if (counter_alarm < counter_time)
 80072e8:	4284      	cmp	r4, r0
 80072ea:	d804      	bhi.n	80072f6 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 80072ec:	2301      	movs	r3, #1
 80072ee:	7473      	strb	r3, [r6, #17]
    __HAL_UNLOCK(hrtc);
 80072f0:	2300      	movs	r3, #0
 80072f2:	7433      	strb	r3, [r6, #16]
    return HAL_OK;
 80072f4:	e7d8      	b.n	80072a8 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80072f6:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80072fa:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ff98 	bl	8007234 <RTC_WriteAlarmCounter>
 8007304:	2800      	cmp	r0, #0
 8007306:	d0f1      	beq.n	80072ec <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007308:	2304      	movs	r3, #4
 800730a:	7473      	strb	r3, [r6, #17]
          __HAL_UNLOCK(hrtc);
 800730c:	2300      	movs	r3, #0
 800730e:	7433      	strb	r3, [r6, #16]
          return HAL_ERROR;
 8007310:	2501      	movs	r5, #1
 8007312:	e7c9      	b.n	80072a8 <HAL_RTC_SetTime+0x4a>
    return HAL_ERROR;
 8007314:	2501      	movs	r5, #1
 8007316:	e7c7      	b.n	80072a8 <HAL_RTC_SetTime+0x4a>
 8007318:	2501      	movs	r5, #1
 800731a:	e7c5      	b.n	80072a8 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 800731c:	2502      	movs	r5, #2
 800731e:	e7c3      	b.n	80072a8 <HAL_RTC_SetTime+0x4a>

08007320 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 8007320:	2800      	cmp	r0, #0
 8007322:	d05a      	beq.n	80073da <HAL_RTC_SetDate+0xba>
{
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	460d      	mov	r5, r1
 8007328:	4604      	mov	r4, r0
  if ((hrtc == NULL) || (sDate == NULL))
 800732a:	2900      	cmp	r1, #0
 800732c:	d057      	beq.n	80073de <HAL_RTC_SetDate+0xbe>
  __HAL_LOCK(hrtc);
 800732e:	7c03      	ldrb	r3, [r0, #16]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d056      	beq.n	80073e2 <HAL_RTC_SetDate+0xc2>
 8007334:	2301      	movs	r3, #1
 8007336:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007338:	2302      	movs	r3, #2
 800733a:	7443      	strb	r3, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 800733c:	b9ba      	cbnz	r2, 800736e <HAL_RTC_SetDate+0x4e>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800733e:	78cb      	ldrb	r3, [r1, #3]
 8007340:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007342:	784b      	ldrb	r3, [r1, #1]
 8007344:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007346:	788b      	ldrb	r3, [r1, #2]
 8007348:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800734a:	7ba2      	ldrb	r2, [r4, #14]
 800734c:	7b61      	ldrb	r1, [r4, #13]
 800734e:	7be0      	ldrb	r0, [r4, #15]
 8007350:	f7ff fede 	bl	8007110 <RTC_WeekDayNum>
 8007354:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007356:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff feb3 	bl	80070c4 <RTC_ReadTimeCounter>
  if (hours > 24U)
 800735e:	4b22      	ldr	r3, [pc, #136]	; (80073e8 <HAL_RTC_SetDate+0xc8>)
 8007360:	4298      	cmp	r0, r3
 8007362:	d811      	bhi.n	8007388 <HAL_RTC_SetDate+0x68>
  hrtc->State = HAL_RTC_STATE_READY ;
 8007364:	2301      	movs	r3, #1
 8007366:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8007368:	2000      	movs	r0, #0
 800736a:	7420      	strb	r0, [r4, #16]
}
 800736c:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800736e:	78c8      	ldrb	r0, [r1, #3]
 8007370:	f7ff fec4 	bl	80070fc <RTC_Bcd2ToByte>
 8007374:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007376:	7868      	ldrb	r0, [r5, #1]
 8007378:	f7ff fec0 	bl	80070fc <RTC_Bcd2ToByte>
 800737c:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800737e:	78a8      	ldrb	r0, [r5, #2]
 8007380:	f7ff febc 	bl	80070fc <RTC_Bcd2ToByte>
 8007384:	73a0      	strb	r0, [r4, #14]
 8007386:	e7e0      	b.n	800734a <HAL_RTC_SetDate+0x2a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007388:	4d18      	ldr	r5, [pc, #96]	; (80073ec <HAL_RTC_SetDate+0xcc>)
 800738a:	fba5 3500 	umull	r3, r5, r5, r0
 800738e:	0c2d      	lsrs	r5, r5, #16
 8007390:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <HAL_RTC_SetDate+0xd0>)
 8007392:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007396:	4629      	mov	r1, r5
 8007398:	4620      	mov	r0, r4
 800739a:	f7ff ff36 	bl	800720a <RTC_WriteTimeCounter>
 800739e:	b128      	cbz	r0, 80073ac <HAL_RTC_SetDate+0x8c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073a0:	2304      	movs	r3, #4
 80073a2:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80073a4:	2300      	movs	r3, #0
 80073a6:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 80073a8:	2001      	movs	r0, #1
 80073aa:	e7df      	b.n	800736c <HAL_RTC_SetDate+0x4c>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7ff fe9e 	bl	80070ee <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80073b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80073b6:	d0d5      	beq.n	8007364 <HAL_RTC_SetDate+0x44>
      if (counter_alarm < counter_time)
 80073b8:	4285      	cmp	r5, r0
 80073ba:	d9d3      	bls.n	8007364 <HAL_RTC_SetDate+0x44>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80073bc:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80073c0:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80073c4:	4620      	mov	r0, r4
 80073c6:	f7ff ff35 	bl	8007234 <RTC_WriteAlarmCounter>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0ca      	beq.n	8007364 <HAL_RTC_SetDate+0x44>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80073ce:	2304      	movs	r3, #4
 80073d0:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80073d2:	2300      	movs	r3, #0
 80073d4:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 80073d6:	2001      	movs	r0, #1
 80073d8:	e7c8      	b.n	800736c <HAL_RTC_SetDate+0x4c>
    return HAL_ERROR;
 80073da:	2001      	movs	r0, #1
}
 80073dc:	4770      	bx	lr
    return HAL_ERROR;
 80073de:	2001      	movs	r0, #1
 80073e0:	e7c4      	b.n	800736c <HAL_RTC_SetDate+0x4c>
  __HAL_LOCK(hrtc);
 80073e2:	2002      	movs	r0, #2
 80073e4:	e7c2      	b.n	800736c <HAL_RTC_SetDate+0x4c>
 80073e6:	bf00      	nop
 80073e8:	00015f8f 	.word	0x00015f8f
 80073ec:	c22e4507 	.word	0xc22e4507
 80073f0:	00015180 	.word	0x00015180

080073f4 <HAL_RTC_WaitForSynchro>:
  if (hrtc == NULL)
 80073f4:	b1c0      	cbz	r0, 8007428 <HAL_RTC_WaitForSynchro+0x34>
{
 80073f6:	b538      	push	{r3, r4, r5, lr}
 80073f8:	4605      	mov	r5, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80073fa:	6802      	ldr	r2, [r0, #0]
 80073fc:	6853      	ldr	r3, [r2, #4]
 80073fe:	f023 0308 	bic.w	r3, r3, #8
 8007402:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8007404:	f7fd fd3a 	bl	8004e7c <HAL_GetTick>
 8007408:	4604      	mov	r4, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f013 0f08 	tst.w	r3, #8
 8007412:	d107      	bne.n	8007424 <HAL_RTC_WaitForSynchro+0x30>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007414:	f7fd fd32 	bl	8004e7c <HAL_GetTick>
 8007418:	1b00      	subs	r0, r0, r4
 800741a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800741e:	d9f4      	bls.n	800740a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8007420:	2003      	movs	r0, #3
 8007422:	e000      	b.n	8007426 <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8007424:	2000      	movs	r0, #0
}
 8007426:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8007428:	2001      	movs	r0, #1
}
 800742a:	4770      	bx	lr

0800742c <HAL_RTC_Init>:
  if (hrtc == NULL)
 800742c:	2800      	cmp	r0, #0
 800742e:	d050      	beq.n	80074d2 <HAL_RTC_Init+0xa6>
{
 8007430:	b510      	push	{r4, lr}
 8007432:	4604      	mov	r4, r0
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007434:	7c43      	ldrb	r3, [r0, #17]
 8007436:	b14b      	cbz	r3, 800744c <HAL_RTC_Init+0x20>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007438:	2302      	movs	r3, #2
 800743a:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800743c:	4620      	mov	r0, r4
 800743e:	f7ff ffd9 	bl	80073f4 <HAL_RTC_WaitForSynchro>
 8007442:	b138      	cbz	r0, 8007454 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007444:	2304      	movs	r3, #4
 8007446:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8007448:	2001      	movs	r0, #1
}
 800744a:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 800744c:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 800744e:	f7fc f81b 	bl	8003488 <HAL_RTC_MspInit>
 8007452:	e7f1      	b.n	8007438 <HAL_RTC_Init+0xc>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007454:	4620      	mov	r0, r4
 8007456:	f7ff fea7 	bl	80071a8 <RTC_EnterInitMode>
 800745a:	bb28      	cbnz	r0, 80074a8 <HAL_RTC_Init+0x7c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	6853      	ldr	r3, [r2, #4]
 8007460:	f023 0307 	bic.w	r3, r3, #7
 8007464:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007466:	68a3      	ldr	r3, [r4, #8]
 8007468:	b123      	cbz	r3, 8007474 <HAL_RTC_Init+0x48>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800746a:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <HAL_RTC_Init+0xac>)
 800746c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007474:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <HAL_RTC_Init+0xac>)
 8007476:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007478:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800747c:	68a1      	ldr	r1, [r4, #8]
 800747e:	430b      	orrs	r3, r1
 8007480:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d012      	beq.n	80074b0 <HAL_RTC_Init+0x84>
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	f3c3 4103 	ubfx	r1, r3, #16, #4
 8007490:	6091      	str	r1, [r2, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	60d3      	str	r3, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007498:	4620      	mov	r0, r4
 800749a:	f7ff fe9d 	bl	80071d8 <RTC_ExitInitMode>
 800749e:	b188      	cbz	r0, 80074c4 <HAL_RTC_Init+0x98>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80074a0:	2304      	movs	r3, #4
 80074a2:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7d0      	b.n	800744a <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074a8:	2304      	movs	r3, #4
 80074aa:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80074ac:	2001      	movs	r0, #1
 80074ae:	e7cc      	b.n	800744a <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80074b0:	2001      	movs	r0, #1
 80074b2:	f7ff fd9b 	bl	8006fec <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80074b6:	b108      	cbz	r0, 80074bc <HAL_RTC_Init+0x90>
        prescaler = prescaler - 1U;
 80074b8:	1e43      	subs	r3, r0, #1
 80074ba:	e7e6      	b.n	800748a <HAL_RTC_Init+0x5e>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80074bc:	2304      	movs	r3, #4
 80074be:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 80074c0:	2001      	movs	r0, #1
 80074c2:	e7c2      	b.n	800744a <HAL_RTC_Init+0x1e>
    hrtc->DateToUpdate.Year = 0x00U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80074c8:	2301      	movs	r3, #1
 80074ca:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80074cc:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 80074ce:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 80074d0:	e7bb      	b.n	800744a <HAL_RTC_Init+0x1e>
    return HAL_ERROR;
 80074d2:	2001      	movs	r0, #1
}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40006c00 	.word	0x40006c00

080074dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e0:	6a03      	ldr	r3, [r0, #32]
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ea:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074ec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f0:	680c      	ldr	r4, [r1, #0]
 80074f2:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074f4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074f8:	688b      	ldr	r3, [r1, #8]
 80074fa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074fc:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <TIM_OC1_SetConfig+0x58>)
 80074fe:	4290      	cmp	r0, r2
 8007500:	d009      	beq.n	8007516 <TIM_OC1_SetConfig+0x3a>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007502:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <TIM_OC1_SetConfig+0x58>)
 8007504:	4290      	cmp	r0, r2
 8007506:	d00d      	beq.n	8007524 <TIM_OC1_SetConfig+0x48>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800750a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800750c:	684a      	ldr	r2, [r1, #4]
 800750e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007510:	6203      	str	r3, [r0, #32]
}
 8007512:	bc30      	pop	{r4, r5}
 8007514:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8007516:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800751a:	68ca      	ldr	r2, [r1, #12]
 800751c:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800751e:	f022 0304 	bic.w	r3, r2, #4
 8007522:	e7ee      	b.n	8007502 <TIM_OC1_SetConfig+0x26>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007524:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8007528:	694a      	ldr	r2, [r1, #20]
 800752a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800752c:	698d      	ldr	r5, [r1, #24]
 800752e:	4315      	orrs	r5, r2
 8007530:	e7ea      	b.n	8007508 <TIM_OC1_SetConfig+0x2c>
 8007532:	bf00      	nop
 8007534:	40012c00 	.word	0x40012c00

08007538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753a:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800753c:	6a02      	ldr	r2, [r0, #32]
 800753e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007542:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007544:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007546:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007548:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800754c:	680d      	ldr	r5, [r1, #0]
 800754e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007554:	688a      	ldr	r2, [r1, #8]
 8007556:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800755a:	4a0f      	ldr	r2, [pc, #60]	; (8007598 <TIM_OC3_SetConfig+0x60>)
 800755c:	4290      	cmp	r0, r2
 800755e:	d009      	beq.n	8007574 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007560:	4a0d      	ldr	r2, [pc, #52]	; (8007598 <TIM_OC3_SetConfig+0x60>)
 8007562:	4290      	cmp	r0, r2
 8007564:	d00e      	beq.n	8007584 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007566:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007568:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800756a:	684a      	ldr	r2, [r1, #4]
 800756c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756e:	6203      	str	r3, [r0, #32]
}
 8007570:	bc30      	pop	{r4, r5}
 8007572:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8007574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007578:	68ca      	ldr	r2, [r1, #12]
 800757a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800757e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007582:	e7ed      	b.n	8007560 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007584:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007588:	694a      	ldr	r2, [r1, #20]
 800758a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800758e:	698a      	ldr	r2, [r1, #24]
 8007590:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8007594:	e7e7      	b.n	8007566 <TIM_OC3_SetConfig+0x2e>
 8007596:	bf00      	nop
 8007598:	40012c00 	.word	0x40012c00

0800759c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800759c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075a0:	6a02      	ldr	r2, [r0, #32]
 80075a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075ac:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b0:	680d      	ldr	r5, [r1, #0]
 80075b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075ba:	688d      	ldr	r5, [r1, #8]
 80075bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c0:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <TIM_OC4_SetConfig+0x44>)
 80075c2:	42a8      	cmp	r0, r5
 80075c4:	d006      	beq.n	80075d4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075c8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075ca:	684a      	ldr	r2, [r1, #4]
 80075cc:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ce:	6203      	str	r3, [r0, #32]
}
 80075d0:	bc30      	pop	{r4, r5}
 80075d2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075d4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075d8:	694d      	ldr	r5, [r1, #20]
 80075da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80075de:	e7f2      	b.n	80075c6 <TIM_OC4_SetConfig+0x2a>
 80075e0:	40012c00 	.word	0x40012c00

080075e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e4:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075e6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e8:	6a04      	ldr	r4, [r0, #32]
 80075ea:	f024 0401 	bic.w	r4, r4, #1
 80075ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f2:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f6:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075fa:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80075fe:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007600:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007602:	6203      	str	r3, [r0, #32]
}
 8007604:	bc10      	pop	{r4}
 8007606:	4770      	bx	lr

08007608 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007608:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800760a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800760c:	6a04      	ldr	r4, [r0, #32]
 800760e:	f024 0410 	bic.w	r4, r4, #16
 8007612:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007614:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007616:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800761a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8007622:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007626:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007628:	6203      	str	r3, [r0, #32]
}
 800762a:	bc10      	pop	{r4}
 800762c:	4770      	bx	lr

0800762e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800762e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007634:	430b      	orrs	r3, r1
 8007636:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	6083      	str	r3, [r0, #8]
}
 800763c:	4770      	bx	lr
	...

08007640 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007640:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b01      	cmp	r3, #1
 8007648:	d127      	bne.n	800769a <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800764a:	2302      	movs	r3, #2
 800764c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007650:	6802      	ldr	r2, [r0, #0]
 8007652:	68d3      	ldr	r3, [r2, #12]
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765a:	6803      	ldr	r3, [r0, #0]
 800765c:	4a11      	ldr	r2, [pc, #68]	; (80076a4 <HAL_TIM_Base_Start_IT+0x64>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d010      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x44>
 8007662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007666:	d00d      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x44>
 8007668:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x44>
 8007670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007674:	4293      	cmp	r3, r2
 8007676:	d005      	beq.n	8007684 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007680:	2000      	movs	r0, #0
 8007682:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768a:	2a06      	cmp	r2, #6
 800768c:	d007      	beq.n	800769e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007696:	2000      	movs	r0, #0
 8007698:	4770      	bx	lr
    return HAL_ERROR;
 800769a:	2001      	movs	r0, #1
 800769c:	4770      	bx	lr
  return HAL_OK;
 800769e:	2000      	movs	r0, #0
}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00

080076a8 <HAL_TIM_PWM_MspInit>:
}
 80076a8:	4770      	bx	lr

080076aa <HAL_TIM_OC_DelayElapsedCallback>:
}
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_IC_CaptureCallback>:
}
 80076ac:	4770      	bx	lr

080076ae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIM_TriggerCallback>:
}
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_IRQHandler>:
{
 80076b2:	b510      	push	{r4, lr}
 80076b4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076b6:	6803      	ldr	r3, [r0, #0]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	f012 0f02 	tst.w	r2, #2
 80076be:	d011      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	f012 0f02 	tst.w	r2, #2
 80076c6:	d00d      	beq.n	80076e4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076c8:	f06f 0202 	mvn.w	r2, #2
 80076cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ce:	2301      	movs	r3, #1
 80076d0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076d2:	6803      	ldr	r3, [r0, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f013 0f03 	tst.w	r3, #3
 80076da:	d070      	beq.n	80077be <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80076dc:	f7ff ffe6 	bl	80076ac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e0:	2300      	movs	r3, #0
 80076e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	f012 0f04 	tst.w	r2, #4
 80076ec:	d012      	beq.n	8007714 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	f012 0f04 	tst.w	r2, #4
 80076f4:	d00e      	beq.n	8007714 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076f6:	f06f 0204 	mvn.w	r2, #4
 80076fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076fc:	2302      	movs	r3, #2
 80076fe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007708:	d05f      	beq.n	80077ca <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff ffce 	bl	80076ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007710:	2300      	movs	r3, #0
 8007712:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	691a      	ldr	r2, [r3, #16]
 8007718:	f012 0f08 	tst.w	r2, #8
 800771c:	d012      	beq.n	8007744 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800771e:	68da      	ldr	r2, [r3, #12]
 8007720:	f012 0f08 	tst.w	r2, #8
 8007724:	d00e      	beq.n	8007744 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007726:	f06f 0208 	mvn.w	r2, #8
 800772a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800772c:	2304      	movs	r3, #4
 800772e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	f013 0f03 	tst.w	r3, #3
 8007738:	d04e      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800773a:	4620      	mov	r0, r4
 800773c:	f7ff ffb6 	bl	80076ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007740:	2300      	movs	r3, #0
 8007742:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	f012 0f10 	tst.w	r2, #16
 800774c:	d012      	beq.n	8007774 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	f012 0f10 	tst.w	r2, #16
 8007754:	d00e      	beq.n	8007774 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007756:	f06f 0210 	mvn.w	r2, #16
 800775a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800775c:	2308      	movs	r3, #8
 800775e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007768:	d03d      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800776a:	4620      	mov	r0, r4
 800776c:	f7ff ff9e 	bl	80076ac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007770:	2300      	movs	r3, #0
 8007772:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	691a      	ldr	r2, [r3, #16]
 8007778:	f012 0f01 	tst.w	r2, #1
 800777c:	d003      	beq.n	8007786 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	f012 0f01 	tst.w	r2, #1
 8007784:	d136      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800778e:	d003      	beq.n	8007798 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007796:	d134      	bne.n	8007802 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	f012 0f40 	tst.w	r2, #64	; 0x40
 80077a0:	d003      	beq.n	80077aa <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80077a8:	d132      	bne.n	8007810 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	691a      	ldr	r2, [r3, #16]
 80077ae:	f012 0f20 	tst.w	r2, #32
 80077b2:	d003      	beq.n	80077bc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	f012 0f20 	tst.w	r2, #32
 80077ba:	d130      	bne.n	800781e <HAL_TIM_IRQHandler+0x16c>
}
 80077bc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077be:	f7ff ff74 	bl	80076aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff ff73 	bl	80076ae <HAL_TIM_PWM_PulseFinishedCallback>
 80077c8:	e78a      	b.n	80076e0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff ff6d 	bl	80076aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7ff ff6c 	bl	80076ae <HAL_TIM_PWM_PulseFinishedCallback>
 80077d6:	e79b      	b.n	8007710 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077d8:	4620      	mov	r0, r4
 80077da:	f7ff ff66 	bl	80076aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff ff65 	bl	80076ae <HAL_TIM_PWM_PulseFinishedCallback>
 80077e4:	e7ac      	b.n	8007740 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e6:	4620      	mov	r0, r4
 80077e8:	f7ff ff5f 	bl	80076aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff ff5e 	bl	80076ae <HAL_TIM_PWM_PulseFinishedCallback>
 80077f2:	e7bd      	b.n	8007770 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077f4:	f06f 0201 	mvn.w	r2, #1
 80077f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7fa ffa4 	bl	8002748 <HAL_TIM_PeriodElapsedCallback>
 8007800:	e7c1      	b.n	8007786 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007802:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007806:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007808:	4620      	mov	r0, r4
 800780a:	f000 fac2 	bl	8007d92 <HAL_TIMEx_BreakCallback>
 800780e:	e7c3      	b.n	8007798 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007814:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007816:	4620      	mov	r0, r4
 8007818:	f7ff ff4a 	bl	80076b0 <HAL_TIM_TriggerCallback>
 800781c:	e7c5      	b.n	80077aa <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800781e:	f06f 0220 	mvn.w	r2, #32
 8007822:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007824:	4620      	mov	r0, r4
 8007826:	f000 fab3 	bl	8007d90 <HAL_TIMEx_CommutCallback>
}
 800782a:	e7c7      	b.n	80077bc <HAL_TIM_IRQHandler+0x10a>

0800782c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800782c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800782e:	4a1b      	ldr	r2, [pc, #108]	; (800789c <TIM_Base_SetConfig+0x70>)
 8007830:	4290      	cmp	r0, r2
 8007832:	d00a      	beq.n	800784a <TIM_Base_SetConfig+0x1e>
 8007834:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007838:	d007      	beq.n	800784a <TIM_Base_SetConfig+0x1e>
 800783a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800783e:	4290      	cmp	r0, r2
 8007840:	d003      	beq.n	800784a <TIM_Base_SetConfig+0x1e>
 8007842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007846:	4290      	cmp	r0, r2
 8007848:	d103      	bne.n	8007852 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800784a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800784e:	684a      	ldr	r2, [r1, #4]
 8007850:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007852:	4a12      	ldr	r2, [pc, #72]	; (800789c <TIM_Base_SetConfig+0x70>)
 8007854:	4290      	cmp	r0, r2
 8007856:	d00a      	beq.n	800786e <TIM_Base_SetConfig+0x42>
 8007858:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800785c:	d007      	beq.n	800786e <TIM_Base_SetConfig+0x42>
 800785e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007862:	4290      	cmp	r0, r2
 8007864:	d003      	beq.n	800786e <TIM_Base_SetConfig+0x42>
 8007866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800786a:	4290      	cmp	r0, r2
 800786c:	d103      	bne.n	8007876 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800786e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007872:	68ca      	ldr	r2, [r1, #12]
 8007874:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787a:	694a      	ldr	r2, [r1, #20]
 800787c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800787e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007880:	688b      	ldr	r3, [r1, #8]
 8007882:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007884:	680b      	ldr	r3, [r1, #0]
 8007886:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <TIM_Base_SetConfig+0x70>)
 800788a:	4298      	cmp	r0, r3
 800788c:	d002      	beq.n	8007894 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800788e:	2301      	movs	r3, #1
 8007890:	6143      	str	r3, [r0, #20]
}
 8007892:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8007894:	690b      	ldr	r3, [r1, #16]
 8007896:	6303      	str	r3, [r0, #48]	; 0x30
 8007898:	e7f9      	b.n	800788e <TIM_Base_SetConfig+0x62>
 800789a:	bf00      	nop
 800789c:	40012c00 	.word	0x40012c00

080078a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80078a0:	b340      	cbz	r0, 80078f4 <HAL_TIM_Base_Init+0x54>
{
 80078a2:	b510      	push	{r4, lr}
 80078a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80078a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80078aa:	b1f3      	cbz	r3, 80078ea <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80078ac:	2302      	movs	r3, #2
 80078ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b2:	4621      	mov	r1, r4
 80078b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80078b8:	f7ff ffb8 	bl	800782c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078bc:	2301      	movs	r3, #1
 80078be:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078c2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80078c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80078ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80078ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80078de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80078e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80078e6:	2000      	movs	r0, #0
}
 80078e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80078ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80078ee:	f7fb fdeb 	bl	80034c8 <HAL_TIM_Base_MspInit>
 80078f2:	e7db      	b.n	80078ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80078f4:	2001      	movs	r0, #1
}
 80078f6:	4770      	bx	lr

080078f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80078f8:	b340      	cbz	r0, 800794c <HAL_TIM_PWM_Init+0x54>
{
 80078fa:	b510      	push	{r4, lr}
 80078fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80078fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007902:	b1f3      	cbz	r3, 8007942 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	2302      	movs	r3, #2
 8007906:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790a:	4621      	mov	r1, r4
 800790c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007910:	f7ff ff8c 	bl	800782c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007914:	2301      	movs	r3, #1
 8007916:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800791a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800791e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007922:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800792e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007932:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007936:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800793a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800793e:	2000      	movs	r0, #0
}
 8007940:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007942:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007946:	f7ff feaf 	bl	80076a8 <HAL_TIM_PWM_MspInit>
 800794a:	e7db      	b.n	8007904 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800794c:	2001      	movs	r0, #1
}
 800794e:	4770      	bx	lr

08007950 <TIM_OC2_SetConfig>:
{
 8007950:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 8007952:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007954:	6a02      	ldr	r2, [r0, #32]
 8007956:	f022 0210 	bic.w	r2, r2, #16
 800795a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800795c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800795e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007960:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007964:	680d      	ldr	r5, [r1, #0]
 8007966:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800796a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800796e:	688d      	ldr	r5, [r1, #8]
 8007970:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007974:	4d0e      	ldr	r5, [pc, #56]	; (80079b0 <TIM_OC2_SetConfig+0x60>)
 8007976:	42a8      	cmp	r0, r5
 8007978:	d009      	beq.n	800798e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800797a:	4d0d      	ldr	r5, [pc, #52]	; (80079b0 <TIM_OC2_SetConfig+0x60>)
 800797c:	42a8      	cmp	r0, r5
 800797e:	d00e      	beq.n	800799e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8007980:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007982:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007984:	684a      	ldr	r2, [r1, #4]
 8007986:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007988:	6203      	str	r3, [r0, #32]
}
 800798a:	bc30      	pop	{r4, r5}
 800798c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800798e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007992:	68cd      	ldr	r5, [r1, #12]
 8007994:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800799c:	e7ed      	b.n	800797a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800799e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a2:	694d      	ldr	r5, [r1, #20]
 80079a4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079a8:	698d      	ldr	r5, [r1, #24]
 80079aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80079ae:	e7e7      	b.n	8007980 <TIM_OC2_SetConfig+0x30>
 80079b0:	40012c00 	.word	0x40012c00

080079b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80079b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80079b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d066      	beq.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80079be:	4604      	mov	r4, r0
 80079c0:	460d      	mov	r5, r1
 80079c2:	2301      	movs	r3, #1
 80079c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80079c8:	2a0c      	cmp	r2, #12
 80079ca:	d85a      	bhi.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0xce>
 80079cc:	e8df f002 	tbb	[pc, r2]
 80079d0:	59595907 	.word	0x59595907
 80079d4:	5959591b 	.word	0x5959591b
 80079d8:	59595930 	.word	0x59595930
 80079dc:	44          	.byte	0x44
 80079dd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	f7ff fd7c 	bl	80074dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079e4:	6822      	ldr	r2, [r4, #0]
 80079e6:	6993      	ldr	r3, [r2, #24]
 80079e8:	f043 0308 	orr.w	r3, r3, #8
 80079ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	6993      	ldr	r3, [r2, #24]
 80079f2:	f023 0304 	bic.w	r3, r3, #4
 80079f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	6993      	ldr	r3, [r2, #24]
 80079fc:	6929      	ldr	r1, [r5, #16]
 80079fe:	430b      	orrs	r3, r1
 8007a00:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2000      	movs	r0, #0
      break;
 8007a04:	e03e      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	f7ff ffa2 	bl	8007950 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	6993      	ldr	r3, [r2, #24]
 8007a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a14:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	6993      	ldr	r3, [r2, #24]
 8007a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a20:	6822      	ldr	r2, [r4, #0]
 8007a22:	6993      	ldr	r3, [r2, #24]
 8007a24:	6929      	ldr	r1, [r5, #16]
 8007a26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a2a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007a2c:	2000      	movs	r0, #0
      break;
 8007a2e:	e029      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a30:	6800      	ldr	r0, [r0, #0]
 8007a32:	f7ff fd81 	bl	8007538 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a36:	6822      	ldr	r2, [r4, #0]
 8007a38:	69d3      	ldr	r3, [r2, #28]
 8007a3a:	f043 0308 	orr.w	r3, r3, #8
 8007a3e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	69d3      	ldr	r3, [r2, #28]
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a4a:	6822      	ldr	r2, [r4, #0]
 8007a4c:	69d3      	ldr	r3, [r2, #28]
 8007a4e:	6929      	ldr	r1, [r5, #16]
 8007a50:	430b      	orrs	r3, r1
 8007a52:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a54:	2000      	movs	r0, #0
      break;
 8007a56:	e015      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a58:	6800      	ldr	r0, [r0, #0]
 8007a5a:	f7ff fd9f 	bl	800759c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	69d3      	ldr	r3, [r2, #28]
 8007a62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a66:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a68:	6822      	ldr	r2, [r4, #0]
 8007a6a:	69d3      	ldr	r3, [r2, #28]
 8007a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a70:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	69d3      	ldr	r3, [r2, #28]
 8007a76:	6929      	ldr	r1, [r5, #16]
 8007a78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007a7c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7e:	2000      	movs	r0, #0
      break;
 8007a80:	e000      	b.n	8007a84 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 8007a82:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007a84:	2300      	movs	r3, #0
 8007a86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8007a8c:	2002      	movs	r0, #2
 8007a8e:	e7fc      	b.n	8007a8a <HAL_TIM_PWM_ConfigChannel+0xd6>

08007a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a90:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a92:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a94:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a98:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa2:	6082      	str	r2, [r0, #8]
}
 8007aa4:	bc10      	pop	{r4}
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007aa8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d078      	beq.n	8007ba2 <HAL_TIM_ConfigClockSource+0xfa>
{
 8007ab0:	b510      	push	{r4, lr}
 8007ab2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	2302      	movs	r3, #2
 8007abc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8007ac0:	6802      	ldr	r2, [r0, #0]
 8007ac2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ac4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ac8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8007acc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8007ace:	680b      	ldr	r3, [r1, #0]
 8007ad0:	2b60      	cmp	r3, #96	; 0x60
 8007ad2:	d04c      	beq.n	8007b6e <HAL_TIM_ConfigClockSource+0xc6>
 8007ad4:	d829      	bhi.n	8007b2a <HAL_TIM_ConfigClockSource+0x82>
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d054      	beq.n	8007b84 <HAL_TIM_ConfigClockSource+0xdc>
 8007ada:	d90c      	bls.n	8007af6 <HAL_TIM_ConfigClockSource+0x4e>
 8007adc:	2b50      	cmp	r3, #80	; 0x50
 8007ade:	d122      	bne.n	8007b26 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae0:	68ca      	ldr	r2, [r1, #12]
 8007ae2:	6849      	ldr	r1, [r1, #4]
 8007ae4:	6800      	ldr	r0, [r0, #0]
 8007ae6:	f7ff fd7d 	bl	80075e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007aea:	2150      	movs	r1, #80	; 0x50
 8007aec:	6820      	ldr	r0, [r4, #0]
 8007aee:	f7ff fd9e 	bl	800762e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007af2:	2000      	movs	r0, #0
      break;
 8007af4:	e005      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d00d      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x6e>
 8007afa:	d909      	bls.n	8007b10 <HAL_TIM_ConfigClockSource+0x68>
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d00a      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8007b00:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007b0e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8007b10:	b10b      	cbz	r3, 8007b16 <HAL_TIM_ConfigClockSource+0x6e>
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d105      	bne.n	8007b22 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b16:	4619      	mov	r1, r3
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	f7ff fd88 	bl	800762e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b1e:	2000      	movs	r0, #0
      break;
 8007b20:	e7ef      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7ed      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
 8007b26:	2001      	movs	r0, #1
 8007b28:	e7eb      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2e:	d034      	beq.n	8007b9a <HAL_TIM_ConfigClockSource+0xf2>
 8007b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b34:	d10c      	bne.n	8007b50 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8007b36:	68cb      	ldr	r3, [r1, #12]
 8007b38:	684a      	ldr	r2, [r1, #4]
 8007b3a:	6889      	ldr	r1, [r1, #8]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f7ff ffa7 	bl	8007a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b42:	6822      	ldr	r2, [r4, #0]
 8007b44:	6893      	ldr	r3, [r2, #8]
 8007b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b4a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4c:	2000      	movs	r0, #0
      break;
 8007b4e:	e7d8      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007b50:	2b70      	cmp	r3, #112	; 0x70
 8007b52:	d124      	bne.n	8007b9e <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8007b54:	68cb      	ldr	r3, [r1, #12]
 8007b56:	684a      	ldr	r2, [r1, #4]
 8007b58:	6889      	ldr	r1, [r1, #8]
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	f7ff ff98 	bl	8007a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b60:	6822      	ldr	r2, [r4, #0]
 8007b62:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8007b68:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6a:	2000      	movs	r0, #0
      break;
 8007b6c:	e7c9      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b6e:	68ca      	ldr	r2, [r1, #12]
 8007b70:	6849      	ldr	r1, [r1, #4]
 8007b72:	6800      	ldr	r0, [r0, #0]
 8007b74:	f7ff fd48 	bl	8007608 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b78:	2160      	movs	r1, #96	; 0x60
 8007b7a:	6820      	ldr	r0, [r4, #0]
 8007b7c:	f7ff fd57 	bl	800762e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b80:	2000      	movs	r0, #0
      break;
 8007b82:	e7be      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b84:	68ca      	ldr	r2, [r1, #12]
 8007b86:	6849      	ldr	r1, [r1, #4]
 8007b88:	6800      	ldr	r0, [r0, #0]
 8007b8a:	f7ff fd2b 	bl	80075e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b8e:	2140      	movs	r1, #64	; 0x40
 8007b90:	6820      	ldr	r0, [r4, #0]
 8007b92:	f7ff fd4c 	bl	800762e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8007b96:	2000      	movs	r0, #0
      break;
 8007b98:	e7b3      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e7b1      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	e7af      	b.n	8007b02 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8007ba2:	2002      	movs	r0, #2
}
 8007ba4:	4770      	bx	lr

08007ba6 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ba6:	f001 011f 	and.w	r1, r1, #31
 8007baa:	f04f 0c01 	mov.w	ip, #1
 8007bae:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bb2:	6a03      	ldr	r3, [r0, #32]
 8007bb4:	ea23 030c 	bic.w	r3, r3, ip
 8007bb8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bba:	6a03      	ldr	r3, [r0, #32]
 8007bbc:	408a      	lsls	r2, r1
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	6203      	str	r3, [r0, #32]
}
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_PWM_Start>:
{
 8007bc4:	b510      	push	{r4, lr}
 8007bc6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bc8:	4608      	mov	r0, r1
 8007bca:	bb51      	cbnz	r1, 8007c22 <HAL_TIM_PWM_Start+0x5e>
 8007bcc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	bf18      	it	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d15b      	bne.n	8007c94 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d139      	bne.n	8007c54 <HAL_TIM_PWM_Start+0x90>
 8007be0:	2302      	movs	r3, #2
 8007be2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007be6:	2201      	movs	r2, #1
 8007be8:	4601      	mov	r1, r0
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	f7ff ffdb 	bl	8007ba6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	4a2a      	ldr	r2, [pc, #168]	; (8007c9c <HAL_TIM_PWM_Start+0xd8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d03d      	beq.n	8007c74 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <HAL_TIM_PWM_Start+0xd8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d03e      	beq.n	8007c7e <HAL_TIM_PWM_Start+0xba>
 8007c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c04:	d03b      	beq.n	8007c7e <HAL_TIM_PWM_Start+0xba>
 8007c06:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d037      	beq.n	8007c7e <HAL_TIM_PWM_Start+0xba>
 8007c0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d033      	beq.n	8007c7e <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e039      	b.n	8007c96 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c22:	2904      	cmp	r1, #4
 8007c24:	d008      	beq.n	8007c38 <HAL_TIM_PWM_Start+0x74>
 8007c26:	2908      	cmp	r1, #8
 8007c28:	d00d      	beq.n	8007c46 <HAL_TIM_PWM_Start+0x82>
 8007c2a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	bf18      	it	ne
 8007c34:	2301      	movne	r3, #1
 8007c36:	e7cf      	b.n	8007bd8 <HAL_TIM_PWM_Start+0x14>
 8007c38:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	bf18      	it	ne
 8007c42:	2301      	movne	r3, #1
 8007c44:	e7c8      	b.n	8007bd8 <HAL_TIM_PWM_Start+0x14>
 8007c46:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	bf18      	it	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	e7c1      	b.n	8007bd8 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c54:	2804      	cmp	r0, #4
 8007c56:	d005      	beq.n	8007c64 <HAL_TIM_PWM_Start+0xa0>
 8007c58:	2808      	cmp	r0, #8
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_PWM_Start+0xa8>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007c62:	e7c0      	b.n	8007be6 <HAL_TIM_PWM_Start+0x22>
 8007c64:	2302      	movs	r3, #2
 8007c66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c6a:	e7bc      	b.n	8007be6 <HAL_TIM_PWM_Start+0x22>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c72:	e7b8      	b.n	8007be6 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8007c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c7a:	645a      	str	r2, [r3, #68]	; 0x44
 8007c7c:	e7bc      	b.n	8007bf8 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c7e:	689a      	ldr	r2, [r3, #8]
 8007c80:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c84:	2a06      	cmp	r2, #6
 8007c86:	d007      	beq.n	8007c98 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007c90:	2000      	movs	r0, #0
 8007c92:	e000      	b.n	8007c96 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8007c94:	2001      	movs	r0, #1
}
 8007c96:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7fc      	b.n	8007c96 <HAL_TIM_PWM_Start+0xd2>
 8007c9c:	40012c00 	.word	0x40012c00

08007ca0 <HAL_TIM_PWM_Stop>:
{
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	6800      	ldr	r0, [r0, #0]
 8007caa:	f7ff ff7c 	bl	8007ba6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <HAL_TIM_PWM_Stop+0x80>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d014      	beq.n	8007ce0 <HAL_TIM_PWM_Stop+0x40>
  __HAL_TIM_DISABLE(htim);
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	6a19      	ldr	r1, [r3, #32]
 8007cba:	f241 1211 	movw	r2, #4369	; 0x1111
 8007cbe:	4211      	tst	r1, r2
 8007cc0:	d108      	bne.n	8007cd4 <HAL_TIM_PWM_Stop+0x34>
 8007cc2:	6a19      	ldr	r1, [r3, #32]
 8007cc4:	f240 4244 	movw	r2, #1092	; 0x444
 8007cc8:	4211      	tst	r1, r2
 8007cca:	d103      	bne.n	8007cd4 <HAL_TIM_PWM_Stop+0x34>
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	b99d      	cbnz	r5, 8007cfe <HAL_TIM_PWM_Stop+0x5e>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007cdc:	2000      	movs	r0, #0
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8007ce0:	6a19      	ldr	r1, [r3, #32]
 8007ce2:	f241 1211 	movw	r2, #4369	; 0x1111
 8007ce6:	4211      	tst	r1, r2
 8007ce8:	d1e5      	bne.n	8007cb6 <HAL_TIM_PWM_Stop+0x16>
 8007cea:	6a19      	ldr	r1, [r3, #32]
 8007cec:	f240 4244 	movw	r2, #1092	; 0x444
 8007cf0:	4211      	tst	r1, r2
 8007cf2:	d1e0      	bne.n	8007cb6 <HAL_TIM_PWM_Stop+0x16>
 8007cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cfa:	645a      	str	r2, [r3, #68]	; 0x44
 8007cfc:	e7db      	b.n	8007cb6 <HAL_TIM_PWM_Stop+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007cfe:	2d04      	cmp	r5, #4
 8007d00:	d005      	beq.n	8007d0e <HAL_TIM_PWM_Stop+0x6e>
 8007d02:	2d08      	cmp	r5, #8
 8007d04:	d007      	beq.n	8007d16 <HAL_TIM_PWM_Stop+0x76>
 8007d06:	2301      	movs	r3, #1
 8007d08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007d0c:	e7e6      	b.n	8007cdc <HAL_TIM_PWM_Stop+0x3c>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007d14:	e7e2      	b.n	8007cdc <HAL_TIM_PWM_Stop+0x3c>
 8007d16:	2301      	movs	r3, #1
 8007d18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007d1c:	e7de      	b.n	8007cdc <HAL_TIM_PWM_Stop+0x3c>
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00

08007d24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d24:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8007d28:	2a01      	cmp	r2, #1
 8007d2a:	d02c      	beq.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8007d2c:	b410      	push	{r4}
 8007d2e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8007d30:	2201      	movs	r2, #1
 8007d32:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d36:	2202      	movs	r2, #2
 8007d38:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d3c:	6802      	ldr	r2, [r0, #0]
 8007d3e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d42:	f020 0c70 	bic.w	ip, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d46:	6808      	ldr	r0, [r1, #0]
 8007d48:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d4c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	480e      	ldr	r0, [pc, #56]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8007d52:	4282      	cmp	r2, r0
 8007d54:	d00a      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8007d56:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007d5a:	d007      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8007d5c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 8007d60:	4282      	cmp	r2, r0
 8007d62:	d003      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8007d64:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007d68:	4282      	cmp	r2, r0
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d70:	6849      	ldr	r1, [r1, #4]
 8007d72:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d74:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8007d82:	bc10      	pop	{r4}
 8007d84:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007d86:	2002      	movs	r0, #2
}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40012c00 	.word	0x40012c00

08007d90 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d90:	4770      	bx	lr

08007d92 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d92:	4770      	bx	lr

08007d94 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d94:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	f102 030c 	add.w	r3, r2, #12
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	320c      	adds	r2, #12
 8007da4:	e842 3100 	strex	r1, r3, [r2]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	d1f3      	bne.n	8007d94 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dac:	2320      	movs	r3, #32
 8007dae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
}
 8007db2:	4770      	bx	lr

08007db4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	f102 030c 	add.w	r3, r2, #12
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	320c      	adds	r2, #12
 8007dc4:	e842 3100 	strex	r1, r3, [r2]
 8007dc8:	2900      	cmp	r1, #0
 8007dca:	d1f3      	bne.n	8007db4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	f102 0314 	add.w	r3, r2, #20
 8007dd2:	e853 3f00 	ldrex	r3, [r3]
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	3214      	adds	r2, #20
 8007ddc:	e842 3100 	strex	r1, r3, [r2]
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d1f3      	bne.n	8007dcc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d005      	beq.n	8007df6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dea:	2320      	movs	r3, #32
 8007dec:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007df0:	2300      	movs	r3, #0
 8007df2:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007df4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	f102 030c 	add.w	r3, r2, #12
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e04:	320c      	adds	r2, #12
 8007e06:	e842 3100 	strex	r1, r3, [r2]
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d1f3      	bne.n	8007df6 <UART_EndRxTransfer+0x42>
 8007e0e:	e7ec      	b.n	8007dea <UART_EndRxTransfer+0x36>

08007e10 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b21      	cmp	r3, #33	; 0x21
 8007e18:	d001      	beq.n	8007e1e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8007e1a:	2002      	movs	r0, #2
  }
}
 8007e1c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e1e:	6883      	ldr	r3, [r0, #8]
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	d017      	beq.n	8007e56 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e26:	6a03      	ldr	r3, [r0, #32]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	6202      	str	r2, [r0, #32]
 8007e2c:	781a      	ldrb	r2, [r3, #0]
 8007e2e:	6803      	ldr	r3, [r0, #0]
 8007e30:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8007e32:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	84c3      	strh	r3, [r0, #38]	; 0x26
 8007e3c:	b94b      	cbnz	r3, 8007e52 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e3e:	6802      	ldr	r2, [r0, #0]
 8007e40:	68d3      	ldr	r3, [r2, #12]
 8007e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e46:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e48:	6802      	ldr	r2, [r0, #0]
 8007e4a:	68d3      	ldr	r3, [r2, #12]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8007e52:	2000      	movs	r0, #0
 8007e54:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e56:	6903      	ldr	r3, [r0, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e4      	bne.n	8007e26 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e5c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	6802      	ldr	r2, [r0, #0]
 8007e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e66:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8007e68:	6a03      	ldr	r3, [r0, #32]
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	6203      	str	r3, [r0, #32]
 8007e6e:	e7e0      	b.n	8007e32 <UART_Transmit_IT+0x22>

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	b510      	push	{r4, lr}
 8007e72:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e74:	6802      	ldr	r2, [r0, #0]
 8007e76:	6913      	ldr	r3, [r2, #16]
 8007e78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e7c:	68c1      	ldr	r1, [r0, #12]
 8007e7e:	430b      	orrs	r3, r1
 8007e80:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e82:	6883      	ldr	r3, [r0, #8]
 8007e84:	6902      	ldr	r2, [r0, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	6942      	ldr	r2, [r0, #20]
 8007e8a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8007e8c:	6801      	ldr	r1, [r0, #0]
 8007e8e:	68cb      	ldr	r3, [r1, #12]
 8007e90:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e94:	f023 030c 	bic.w	r3, r3, #12
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e9c:	6802      	ldr	r2, [r0, #0]
 8007e9e:	6953      	ldr	r3, [r2, #20]
 8007ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea4:	6981      	ldr	r1, [r0, #24]
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8007eaa:	6802      	ldr	r2, [r0, #0]
 8007eac:	4b13      	ldr	r3, [pc, #76]	; (8007efc <UART_SetConfig+0x8c>)
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d020      	beq.n	8007ef4 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007eb2:	f7fe ffd1 	bl	8006e58 <HAL_RCC_GetPCLK1Freq>
 8007eb6:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007ebc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ec8:	480d      	ldr	r0, [pc, #52]	; (8007f00 <UART_SetConfig+0x90>)
 8007eca:	fba0 3102 	umull	r3, r1, r0, r2
 8007ece:	0949      	lsrs	r1, r1, #5
 8007ed0:	2364      	movs	r3, #100	; 0x64
 8007ed2:	fb03 2311 	mls	r3, r3, r1, r2
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	3332      	adds	r3, #50	; 0x32
 8007eda:	fba0 0303 	umull	r0, r3, r0, r3
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ee4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	6821      	ldr	r1, [r4, #0]
 8007eee:	4413      	add	r3, r2
 8007ef0:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ef2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8007ef4:	f7fe ffc0 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	e7dd      	b.n	8007eb8 <UART_SetConfig+0x48>
 8007efc:	40013800 	.word	0x40013800
 8007f00:	51eb851f 	.word	0x51eb851f

08007f04 <UART_WaitOnFlagUntilTimeout>:
{
 8007f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	4616      	mov	r6, r2
 8007f0e:	4699      	mov	r9, r3
 8007f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	681c      	ldr	r4, [r3, #0]
 8007f18:	ea37 0404 	bics.w	r4, r7, r4
 8007f1c:	bf0c      	ite	eq
 8007f1e:	2401      	moveq	r4, #1
 8007f20:	2400      	movne	r4, #0
 8007f22:	42b4      	cmp	r4, r6
 8007f24:	d12d      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8007f26:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007f2a:	d0f3      	beq.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f2c:	f1b8 0f00 	cmp.w	r8, #0
 8007f30:	d005      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x3a>
 8007f32:	f7fc ffa3 	bl	8004e7c <HAL_GetTick>
 8007f36:	eba0 0009 	sub.w	r0, r0, r9
 8007f3a:	4540      	cmp	r0, r8
 8007f3c:	d9ea      	bls.n	8007f14 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f3e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	f102 030c 	add.w	r3, r2, #12
 8007f44:	e853 3f00 	ldrex	r3, [r3]
 8007f48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	320c      	adds	r2, #12
 8007f4e:	e842 3100 	strex	r1, r3, [r2]
 8007f52:	2900      	cmp	r1, #0
 8007f54:	d1f3      	bne.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f56:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	f102 0314 	add.w	r3, r2, #20
 8007f5c:	e853 3f00 	ldrex	r3, [r3]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	3214      	adds	r2, #20
 8007f66:	e842 3100 	strex	r1, r3, [r2]
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	d1f3      	bne.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8007f6e:	2320      	movs	r3, #32
 8007f70:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007f74:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        __HAL_UNLOCK(huart);
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8007f7e:	2003      	movs	r0, #3
 8007f80:	e000      	b.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8007f82:	2000      	movs	r0, #0
}
 8007f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007f88 <HAL_UART_Init>:
  if (huart == NULL)
 8007f88:	b360      	cbz	r0, 8007fe4 <HAL_UART_Init+0x5c>
{
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007f8e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007f92:	b313      	cbz	r3, 8007fda <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8007f94:	2324      	movs	r3, #36	; 0x24
 8007f96:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007f9a:	6822      	ldr	r2, [r4, #0]
 8007f9c:	68d3      	ldr	r3, [r2, #12]
 8007f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f7ff ff63 	bl	8007e70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	6913      	ldr	r3, [r2, #16]
 8007fae:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007fb2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb4:	6822      	ldr	r2, [r4, #0]
 8007fb6:	6953      	ldr	r3, [r2, #20]
 8007fb8:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007fbc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	68d3      	ldr	r3, [r2, #12]
 8007fc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fc6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	2000      	movs	r0, #0
 8007fca:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fcc:	2320      	movs	r3, #32
 8007fce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd6:	6360      	str	r0, [r4, #52]	; 0x34
}
 8007fd8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007fda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8007fde:	f7fb faf5 	bl	80035cc <HAL_UART_MspInit>
 8007fe2:	e7d7      	b.n	8007f94 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007fe4:	2001      	movs	r0, #1
}
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_UART_DeInit>:
  if (huart == NULL)
 8007fe8:	b1b0      	cbz	r0, 8008018 <HAL_UART_DeInit+0x30>
{
 8007fea:	b510      	push	{r4, lr}
 8007fec:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8007fee:	2324      	movs	r3, #36	; 0x24
 8007ff0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007ff4:	6802      	ldr	r2, [r0, #0]
 8007ff6:	68d3      	ldr	r3, [r2, #12]
 8007ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ffc:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8007ffe:	f7fb fb8d 	bl	800371c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008002:	2000      	movs	r0, #0
 8008004:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8008006:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800800a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008010:	6360      	str	r0, [r4, #52]	; 0x34
  __HAL_UNLOCK(huart);
 8008012:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8008016:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008018:	2001      	movs	r0, #1
}
 800801a:	4770      	bx	lr

0800801c <HAL_UART_Transmit>:
{
 800801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008024:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b20      	cmp	r3, #32
 800802c:	d14b      	bne.n	80080c6 <HAL_UART_Transmit+0xaa>
 800802e:	4604      	mov	r4, r0
 8008030:	460d      	mov	r5, r1
 8008032:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008034:	2900      	cmp	r1, #0
 8008036:	d04a      	beq.n	80080ce <HAL_UART_Transmit+0xb2>
 8008038:	b90a      	cbnz	r2, 800803e <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800803a:	2001      	movs	r0, #1
 800803c:	e044      	b.n	80080c8 <HAL_UART_Transmit+0xac>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008042:	2321      	movs	r3, #33	; 0x21
 8008044:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 8008048:	f7fc ff18 	bl	8004e7c <HAL_GetTick>
 800804c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800804e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8008052:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805c:	d002      	beq.n	8008064 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800805e:	f04f 0800 	mov.w	r8, #0
 8008062:	e00f      	b.n	8008084 <HAL_UART_Transmit+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008064:	6923      	ldr	r3, [r4, #16]
 8008066:	b1fb      	cbz	r3, 80080a8 <HAL_UART_Transmit+0x8c>
      pdata16bits = NULL;
 8008068:	f04f 0800 	mov.w	r8, #0
 800806c:	e00a      	b.n	8008084 <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800806e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008078:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800807a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800807c:	b292      	uxth	r2, r2
 800807e:	3a01      	subs	r2, #1
 8008080:	b292      	uxth	r2, r2
 8008082:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008084:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008086:	b29b      	uxth	r3, r3
 8008088:	b18b      	cbz	r3, 80080ae <HAL_UART_Transmit+0x92>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800808a:	9600      	str	r6, [sp, #0]
 800808c:	463b      	mov	r3, r7
 800808e:	2200      	movs	r2, #0
 8008090:	2180      	movs	r1, #128	; 0x80
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff ff36 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 8008098:	b9d8      	cbnz	r0, 80080d2 <HAL_UART_Transmit+0xb6>
      if (pdata8bits == NULL)
 800809a:	2d00      	cmp	r5, #0
 800809c:	d0e7      	beq.n	800806e <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800809e:	f815 2b01 	ldrb.w	r2, [r5], #1
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080a6:	e7e8      	b.n	800807a <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 80080a8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80080aa:	2500      	movs	r5, #0
 80080ac:	e7ea      	b.n	8008084 <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080ae:	9600      	str	r6, [sp, #0]
 80080b0:	463b      	mov	r3, r7
 80080b2:	2200      	movs	r2, #0
 80080b4:	2140      	movs	r1, #64	; 0x40
 80080b6:	4620      	mov	r0, r4
 80080b8:	f7ff ff24 	bl	8007f04 <UART_WaitOnFlagUntilTimeout>
 80080bc:	b958      	cbnz	r0, 80080d6 <HAL_UART_Transmit+0xba>
    huart->gState = HAL_UART_STATE_READY;
 80080be:	2320      	movs	r3, #32
 80080c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80080c4:	e000      	b.n	80080c8 <HAL_UART_Transmit+0xac>
    return HAL_BUSY;
 80080c6:	2002      	movs	r0, #2
}
 80080c8:	b002      	add	sp, #8
 80080ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80080ce:	2001      	movs	r0, #1
 80080d0:	e7fa      	b.n	80080c8 <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 80080d2:	2003      	movs	r0, #3
 80080d4:	e7f8      	b.n	80080c8 <HAL_UART_Transmit+0xac>
      return HAL_TIMEOUT;
 80080d6:	2003      	movs	r0, #3
 80080d8:	e7f6      	b.n	80080c8 <HAL_UART_Transmit+0xac>

080080da <HAL_UART_TxCpltCallback>:
}
 80080da:	4770      	bx	lr

080080dc <UART_EndTransmit_IT>:
{
 80080dc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080de:	6801      	ldr	r1, [r0, #0]
 80080e0:	68ca      	ldr	r2, [r1, #12]
 80080e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80080e8:	2220      	movs	r2, #32
 80080ea:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 80080ee:	f7ff fff4 	bl	80080da <HAL_UART_TxCpltCallback>
}
 80080f2:	2000      	movs	r0, #0
 80080f4:	bd08      	pop	{r3, pc}

080080f6 <HAL_UART_RxCpltCallback>:
}
 80080f6:	4770      	bx	lr

080080f8 <HAL_UART_RxHalfCpltCallback>:
}
 80080f8:	4770      	bx	lr

080080fa <HAL_UART_ErrorCallback>:
}
 80080fa:	4770      	bx	lr

080080fc <UART_DMAError>:
{
 80080fc:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fe:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008104:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b21      	cmp	r3, #33	; 0x21
 800810c:	d010      	beq.n	8008130 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	695a      	ldr	r2, [r3, #20]
 8008112:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008116:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b22      	cmp	r3, #34	; 0x22
 800811e:	d011      	beq.n	8008144 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008120:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008122:	f043 0310 	orr.w	r3, r3, #16
 8008126:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff ffe6 	bl	80080fa <HAL_UART_ErrorCallback>
}
 800812e:	bd10      	pop	{r4, pc}
 8008130:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008134:	2a00      	cmp	r2, #0
 8008136:	d0ea      	beq.n	800810e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8008138:	2300      	movs	r3, #0
 800813a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800813c:	4620      	mov	r0, r4
 800813e:	f7ff fe29 	bl	8007d94 <UART_EndTxTransfer>
 8008142:	e7e4      	b.n	800810e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008144:	2a00      	cmp	r2, #0
 8008146:	d0eb      	beq.n	8008120 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8008148:	2300      	movs	r3, #0
 800814a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff fe31 	bl	8007db4 <UART_EndRxTransfer>
 8008152:	e7e5      	b.n	8008120 <UART_DMAError+0x24>

08008154 <UART_DMAAbortOnError>:
{
 8008154:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008156:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008158:	2300      	movs	r3, #0
 800815a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800815c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800815e:	f7ff ffcc 	bl	80080fa <HAL_UART_ErrorCallback>
}
 8008162:	bd08      	pop	{r3, pc}

08008164 <HAL_UART_AbortCpltCallback>:
}
 8008164:	4770      	bx	lr
	...

08008168 <HAL_UART_Abort_IT>:
{
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800816c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	f102 030c 	add.w	r3, r2, #12
 8008172:	e853 3f00 	ldrex	r3, [r3]
 8008176:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817a:	320c      	adds	r2, #12
 800817c:	e842 3100 	strex	r1, r3, [r2]
 8008180:	2900      	cmp	r1, #0
 8008182:	d1f3      	bne.n	800816c <HAL_UART_Abort_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008184:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	f102 0314 	add.w	r3, r2, #20
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008192:	3214      	adds	r2, #20
 8008194:	e842 3100 	strex	r1, r3, [r2]
 8008198:	2900      	cmp	r1, #0
 800819a:	d1f3      	bne.n	8008184 <HAL_UART_Abort_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d02e      	beq.n	8008200 <HAL_UART_Abort_IT+0x98>
  if (huart->hdmatx != NULL)
 80081a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081a4:	b133      	cbz	r3, 80081b4 <HAL_UART_Abort_IT+0x4c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80081a6:	6822      	ldr	r2, [r4, #0]
 80081a8:	6952      	ldr	r2, [r2, #20]
 80081aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80081ae:	d034      	beq.n	800821a <HAL_UART_Abort_IT+0xb2>
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80081b0:	4a34      	ldr	r2, [pc, #208]	; (8008284 <HAL_UART_Abort_IT+0x11c>)
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmarx != NULL)
 80081b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081b6:	b133      	cbz	r3, 80081c6 <HAL_UART_Abort_IT+0x5e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b8:	6822      	ldr	r2, [r4, #0]
 80081ba:	6952      	ldr	r2, [r2, #20]
 80081bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80081c0:	d02e      	beq.n	8008220 <HAL_UART_Abort_IT+0xb8>
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80081c2:	4a31      	ldr	r2, [pc, #196]	; (8008288 <HAL_UART_Abort_IT+0x120>)
 80081c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081ce:	d02a      	beq.n	8008226 <HAL_UART_Abort_IT+0xbe>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081d0:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	f101 0314 	add.w	r3, r1, #20
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	3114      	adds	r1, #20
 80081e0:	e841 3200 	strex	r2, r3, [r1]
 80081e4:	4615      	mov	r5, r2
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	d1f2      	bne.n	80081d0 <HAL_UART_Abort_IT+0x68>
    if (huart->hdmatx != NULL)
 80081ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d042      	beq.n	8008276 <HAL_UART_Abort_IT+0x10e>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80081f0:	f7fd fa10 	bl	8005614 <HAL_DMA_Abort_IT>
 80081f4:	b1c0      	cbz	r0, 8008228 <HAL_UART_Abort_IT+0xc0>
        huart->hdmatx->XferAbortCallback = NULL;
 80081f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081f8:	2200      	movs	r2, #0
 80081fa:	635a      	str	r2, [r3, #52]	; 0x34
  uint32_t AbortCplt = 0x01U;
 80081fc:	2501      	movs	r5, #1
 80081fe:	e013      	b.n	8008228 <HAL_UART_Abort_IT+0xc0>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008200:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	f102 030c 	add.w	r3, r2, #12
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	320c      	adds	r2, #12
 8008210:	e842 3100 	strex	r1, r3, [r2]
 8008214:	2900      	cmp	r1, #0
 8008216:	d1f3      	bne.n	8008200 <HAL_UART_Abort_IT+0x98>
 8008218:	e7c3      	b.n	80081a2 <HAL_UART_Abort_IT+0x3a>
      huart->hdmatx->XferAbortCallback = NULL;
 800821a:	2200      	movs	r2, #0
 800821c:	635a      	str	r2, [r3, #52]	; 0x34
 800821e:	e7c9      	b.n	80081b4 <HAL_UART_Abort_IT+0x4c>
      huart->hdmarx->XferAbortCallback = NULL;
 8008220:	2200      	movs	r2, #0
 8008222:	635a      	str	r2, [r3, #52]	; 0x34
 8008224:	e7cf      	b.n	80081c6 <HAL_UART_Abort_IT+0x5e>
  uint32_t AbortCplt = 0x01U;
 8008226:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008230:	d023      	beq.n	800827a <HAL_UART_Abort_IT+0x112>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008232:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	f102 0314 	add.w	r3, r2, #20
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	3214      	adds	r2, #20
 8008242:	e842 3100 	strex	r1, r3, [r2]
 8008246:	2900      	cmp	r1, #0
 8008248:	d1f3      	bne.n	8008232 <HAL_UART_Abort_IT+0xca>
    if (huart->hdmarx != NULL)
 800824a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800824c:	b1a8      	cbz	r0, 800827a <HAL_UART_Abort_IT+0x112>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800824e:	f7fd f9e1 	bl	8005614 <HAL_DMA_Abort_IT>
 8008252:	b1a0      	cbz	r0, 800827e <HAL_UART_Abort_IT+0x116>
        huart->hdmarx->XferAbortCallback = NULL;
 8008254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008256:	2200      	movs	r2, #0
 8008258:	635a      	str	r2, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 800825a:	2300      	movs	r3, #0
 800825c:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 800825e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008260:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8008262:	2220      	movs	r2, #32
 8008264:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8008268:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 800826e:	4620      	mov	r0, r4
 8008270:	f7ff ff78 	bl	8008164 <HAL_UART_AbortCpltCallback>
 8008274:	e003      	b.n	800827e <HAL_UART_Abort_IT+0x116>
  uint32_t AbortCplt = 0x01U;
 8008276:	2501      	movs	r5, #1
 8008278:	e7d6      	b.n	8008228 <HAL_UART_Abort_IT+0xc0>
  if (AbortCplt == 0x01U)
 800827a:	2d01      	cmp	r5, #1
 800827c:	d0ed      	beq.n	800825a <HAL_UART_Abort_IT+0xf2>
}
 800827e:	2000      	movs	r0, #0
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	bf00      	nop
 8008284:	080082b9 	.word	0x080082b9
 8008288:	0800828d 	.word	0x0800828d

0800828c <UART_DMARxAbortCallback>:
{
 800828c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800828e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 8008290:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8008292:	2200      	movs	r2, #0
 8008294:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmatx != NULL)
 8008296:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008298:	b10b      	cbz	r3, 800829e <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 800829a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829c:	b95b      	cbnz	r3, 80082b6 <UART_DMARxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 800829e:	2300      	movs	r3, #0
 80082a0:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80082a2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80082a6:	2220      	movs	r2, #32
 80082a8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082ac:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b0:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80082b2:	f7ff ff57 	bl	8008164 <HAL_UART_AbortCpltCallback>
}
 80082b6:	bd08      	pop	{r3, pc}

080082b8 <UART_DMATxAbortCallback>:
{
 80082b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 80082bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80082be:	2200      	movs	r2, #0
 80082c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (huart->hdmarx != NULL)
 80082c2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80082c4:	b10b      	cbz	r3, 80082ca <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	b95b      	cbnz	r3, 80082e2 <UART_DMATxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 80082ca:	2300      	movs	r3, #0
 80082cc:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80082ce:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d0:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80082d2:	2220      	movs	r2, #32
 80082d4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80082d8:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082dc:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80082de:	f7ff ff41 	bl	8008164 <HAL_UART_AbortCpltCallback>
}
 80082e2:	bd08      	pop	{r3, pc}

080082e4 <HAL_UARTEx_RxEventCallback>:
}
 80082e4:	4770      	bx	lr

080082e6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082e6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b22      	cmp	r3, #34	; 0x22
 80082ee:	d169      	bne.n	80083c4 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	6883      	ldr	r3, [r0, #8]
 80082f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f6:	d04f      	beq.n	8008398 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082f8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fe:	d004      	beq.n	800830a <UART_Receive_IT+0x24>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d156      	bne.n	80083b2 <UART_Receive_IT+0xcc>
 8008304:	6903      	ldr	r3, [r0, #16]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d153      	bne.n	80083b2 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800830a:	6803      	ldr	r3, [r0, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8008310:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008312:	3301      	adds	r3, #1
 8008314:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008316:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29b      	uxth	r3, r3
 800831e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8008320:	2b00      	cmp	r3, #0
 8008322:	d151      	bne.n	80083c8 <UART_Receive_IT+0xe2>
{
 8008324:	b500      	push	{lr}
 8008326:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008328:	6802      	ldr	r2, [r0, #0]
 800832a:	68d3      	ldr	r3, [r2, #12]
 800832c:	f023 0320 	bic.w	r3, r3, #32
 8008330:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008332:	6802      	ldr	r2, [r0, #0]
 8008334:	68d3      	ldr	r3, [r2, #12]
 8008336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800833a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800833c:	6802      	ldr	r2, [r0, #0]
 800833e:	6953      	ldr	r3, [r2, #20]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008346:	2320      	movs	r3, #32
 8008348:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	2300      	movs	r3, #0
 800834e:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008352:	2b01      	cmp	r3, #1
 8008354:	d133      	bne.n	80083be <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008356:	2300      	movs	r3, #0
 8008358:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	f102 030c 	add.w	r3, r2, #12
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	320c      	adds	r2, #12
 800836a:	e842 3100 	strex	r1, r3, [r2]
 800836e:	2900      	cmp	r1, #0
 8008370:	d1f3      	bne.n	800835a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008372:	6803      	ldr	r3, [r0, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f012 0f10 	tst.w	r2, #16
 800837a:	d006      	beq.n	800838a <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800837c:	2200      	movs	r2, #0
 800837e:	9201      	str	r2, [sp, #4]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	9201      	str	r2, [sp, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800838a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800838c:	f7ff ffaa 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8008390:	2000      	movs	r0, #0
}
 8008392:	b003      	add	sp, #12
 8008394:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008398:	6902      	ldr	r2, [r0, #16]
 800839a:	2a00      	cmp	r2, #0
 800839c:	d1ac      	bne.n	80082f8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800839e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083a0:	6803      	ldr	r3, [r0, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80083aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80083ac:	3302      	adds	r3, #2
 80083ae:	6283      	str	r3, [r0, #40]	; 0x28
 80083b0:	e7b1      	b.n	8008316 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b2:	6803      	ldr	r3, [r0, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ba:	7013      	strb	r3, [r2, #0]
 80083bc:	e7a8      	b.n	8008310 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80083be:	f7ff fe9a 	bl	80080f6 <HAL_UART_RxCpltCallback>
 80083c2:	e7e5      	b.n	8008390 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80083c4:	2002      	movs	r0, #2
 80083c6:	4770      	bx	lr
    return HAL_OK;
 80083c8:	2000      	movs	r0, #0
}
 80083ca:	4770      	bx	lr

080083cc <HAL_UART_IRQHandler>:
{
 80083cc:	b530      	push	{r4, r5, lr}
 80083ce:	b083      	sub	sp, #12
 80083d0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083d2:	6802      	ldr	r2, [r0, #0]
 80083d4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083d6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083d8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80083da:	f013 050f 	ands.w	r5, r3, #15
 80083de:	d105      	bne.n	80083ec <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083e0:	f013 0f20 	tst.w	r3, #32
 80083e4:	d002      	beq.n	80083ec <HAL_UART_IRQHandler+0x20>
 80083e6:	f010 0f20 	tst.w	r0, #32
 80083ea:	d119      	bne.n	8008420 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083ec:	b12d      	cbz	r5, 80083fa <HAL_UART_IRQHandler+0x2e>
 80083ee:	f011 0101 	ands.w	r1, r1, #1
 80083f2:	d119      	bne.n	8008428 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083f4:	f410 7f90 	tst.w	r0, #288	; 0x120
 80083f8:	d116      	bne.n	8008428 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80083fc:	2901      	cmp	r1, #1
 80083fe:	d07d      	beq.n	80084fc <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008404:	d003      	beq.n	800840e <HAL_UART_IRQHandler+0x42>
 8008406:	f010 0f80 	tst.w	r0, #128	; 0x80
 800840a:	f040 8118 	bne.w	800863e <HAL_UART_IRQHandler+0x272>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800840e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008412:	d003      	beq.n	800841c <HAL_UART_IRQHandler+0x50>
 8008414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008418:	f040 8115 	bne.w	8008646 <HAL_UART_IRQHandler+0x27a>
}
 800841c:	b003      	add	sp, #12
 800841e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8008420:	4620      	mov	r0, r4
 8008422:	f7ff ff60 	bl	80082e6 <UART_Receive_IT>
      return;
 8008426:	e7f9      	b.n	800841c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008428:	f013 0f01 	tst.w	r3, #1
 800842c:	d006      	beq.n	800843c <HAL_UART_IRQHandler+0x70>
 800842e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008432:	d003      	beq.n	800843c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008434:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800843c:	f013 0f04 	tst.w	r3, #4
 8008440:	d004      	beq.n	800844c <HAL_UART_IRQHandler+0x80>
 8008442:	b119      	cbz	r1, 800844c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008444:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008446:	f042 0202 	orr.w	r2, r2, #2
 800844a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800844c:	f013 0f02 	tst.w	r3, #2
 8008450:	d004      	beq.n	800845c <HAL_UART_IRQHandler+0x90>
 8008452:	b119      	cbz	r1, 800845c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008454:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008456:	f042 0204 	orr.w	r2, r2, #4
 800845a:	6462      	str	r2, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800845c:	f013 0f08 	tst.w	r3, #8
 8008460:	d007      	beq.n	8008472 <HAL_UART_IRQHandler+0xa6>
 8008462:	f010 0f20 	tst.w	r0, #32
 8008466:	d100      	bne.n	800846a <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008468:	b119      	cbz	r1, 8008472 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800846a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800846c:	f042 0208 	orr.w	r2, r2, #8
 8008470:	6462      	str	r2, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008472:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008474:	2a00      	cmp	r2, #0
 8008476:	d0d1      	beq.n	800841c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008478:	f013 0f20 	tst.w	r3, #32
 800847c:	d002      	beq.n	8008484 <HAL_UART_IRQHandler+0xb8>
 800847e:	f010 0f20 	tst.w	r0, #32
 8008482:	d129      	bne.n	80084d8 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800848c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800848e:	f012 0f08 	tst.w	r2, #8
 8008492:	d100      	bne.n	8008496 <HAL_UART_IRQHandler+0xca>
 8008494:	b363      	cbz	r3, 80084f0 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff fc8c 	bl	8007db4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80084a4:	d020      	beq.n	80084e8 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	f102 0314 	add.w	r3, r2, #20
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	3214      	adds	r2, #20
 80084b6:	e842 3100 	strex	r1, r3, [r2]
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d1f3      	bne.n	80084a6 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 80084be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084c0:	b173      	cbz	r3, 80084e0 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084c2:	4a63      	ldr	r2, [pc, #396]	; (8008650 <HAL_UART_IRQHandler+0x284>)
 80084c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80084c8:	f7fd f8a4 	bl	8005614 <HAL_DMA_Abort_IT>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d0a5      	beq.n	800841c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80084d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80084d4:	4798      	blx	r3
 80084d6:	e7a1      	b.n	800841c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80084d8:	4620      	mov	r0, r4
 80084da:	f7ff ff04 	bl	80082e6 <UART_Receive_IT>
 80084de:	e7d1      	b.n	8008484 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 80084e0:	4620      	mov	r0, r4
 80084e2:	f7ff fe0a 	bl	80080fa <HAL_UART_ErrorCallback>
 80084e6:	e799      	b.n	800841c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7ff fe06 	bl	80080fa <HAL_UART_ErrorCallback>
 80084ee:	e795      	b.n	800841c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 80084f0:	4620      	mov	r0, r4
 80084f2:	f7ff fe02 	bl	80080fa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	6463      	str	r3, [r4, #68]	; 0x44
    return;
 80084fa:	e78f      	b.n	800841c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084fc:	f013 0f10 	tst.w	r3, #16
 8008500:	f43f af7e 	beq.w	8008400 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008504:	f010 0f10 	tst.w	r0, #16
 8008508:	f43f af7a 	beq.w	8008400 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800850c:	2300      	movs	r3, #0
 800850e:	9301      	str	r3, [sp, #4]
 8008510:	6813      	ldr	r3, [r2, #0]
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	6853      	ldr	r3, [r2, #4]
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851a:	6953      	ldr	r3, [r2, #20]
 800851c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008520:	d051      	beq.n	80085c6 <HAL_UART_IRQHandler+0x1fa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008522:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008524:	6813      	ldr	r3, [r2, #0]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f af76 	beq.w	800841c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008530:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008532:	4299      	cmp	r1, r3
 8008534:	f67f af72 	bls.w	800841c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8008538:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800853a:	6993      	ldr	r3, [r2, #24]
 800853c:	2b20      	cmp	r3, #32
 800853e:	d037      	beq.n	80085b0 <HAL_UART_IRQHandler+0x1e4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008540:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008542:	f102 030c 	add.w	r3, r2, #12
 8008546:	e853 3f00 	ldrex	r3, [r3]
 800854a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854e:	320c      	adds	r2, #12
 8008550:	e842 3100 	strex	r1, r3, [r2]
 8008554:	2900      	cmp	r1, #0
 8008556:	d1f3      	bne.n	8008540 <HAL_UART_IRQHandler+0x174>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008558:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	f102 0314 	add.w	r3, r2, #20
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	3214      	adds	r2, #20
 8008568:	e842 3100 	strex	r1, r3, [r2]
 800856c:	2900      	cmp	r1, #0
 800856e:	d1f3      	bne.n	8008558 <HAL_UART_IRQHandler+0x18c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008570:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	f102 0314 	add.w	r3, r2, #20
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	3214      	adds	r2, #20
 8008580:	e842 3100 	strex	r1, r3, [r2]
 8008584:	2900      	cmp	r1, #0
 8008586:	d1f3      	bne.n	8008570 <HAL_UART_IRQHandler+0x1a4>
          huart->RxState = HAL_UART_STATE_READY;
 8008588:	2320      	movs	r3, #32
 800858a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858e:	2300      	movs	r3, #0
 8008590:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008592:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	f102 030c 	add.w	r3, r2, #12
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	320c      	adds	r2, #12
 80085a2:	e842 3100 	strex	r1, r3, [r2]
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d1f3      	bne.n	8008592 <HAL_UART_IRQHandler+0x1c6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80085ac:	f7fd f80f 	bl	80055ce <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b0:	2302      	movs	r3, #2
 80085b2:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80085b6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	1ac9      	subs	r1, r1, r3
 80085bc:	b289      	uxth	r1, r1
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff fe90 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
      return;
 80085c4:	e72a      	b.n	800841c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085c6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80085c8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	1ac9      	subs	r1, r1, r3
 80085ce:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80085d0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f43f af21 	beq.w	800841c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 80085da:	2900      	cmp	r1, #0
 80085dc:	f43f af1e 	beq.w	800841c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085e0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	f102 030c 	add.w	r3, r2, #12
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	320c      	adds	r2, #12
 80085f0:	e842 3000 	strex	r0, r3, [r2]
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d1f3      	bne.n	80085e0 <HAL_UART_IRQHandler+0x214>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	f102 0314 	add.w	r3, r2, #20
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	3214      	adds	r2, #20
 8008608:	e842 3000 	strex	r0, r3, [r2]
 800860c:	2800      	cmp	r0, #0
 800860e:	d1f3      	bne.n	80085f8 <HAL_UART_IRQHandler+0x22c>
        huart->RxState = HAL_UART_STATE_READY;
 8008610:	2320      	movs	r3, #32
 8008612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008616:	2300      	movs	r3, #0
 8008618:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800861a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	f102 030c 	add.w	r3, r2, #12
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	320c      	adds	r2, #12
 800862a:	e842 3000 	strex	r0, r3, [r2]
 800862e:	2800      	cmp	r0, #0
 8008630:	d1f3      	bne.n	800861a <HAL_UART_IRQHandler+0x24e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008632:	2302      	movs	r3, #2
 8008634:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff fe54 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
      return;
 800863c:	e6ee      	b.n	800841c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 800863e:	4620      	mov	r0, r4
 8008640:	f7ff fbe6 	bl	8007e10 <UART_Transmit_IT>
    return;
 8008644:	e6ea      	b.n	800841c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff fd48 	bl	80080dc <UART_EndTransmit_IT>
    return;
 800864c:	e6e6      	b.n	800841c <HAL_UART_IRQHandler+0x50>
 800864e:	bf00      	nop
 8008650:	08008155 	.word	0x08008155

08008654 <UART_DMARxHalfCplt>:
{
 8008654:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008656:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008658:	2301      	movs	r3, #1
 800865a:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800865e:	2b01      	cmp	r3, #1
 8008660:	d002      	beq.n	8008668 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8008662:	f7ff fd49 	bl	80080f8 <HAL_UART_RxHalfCpltCallback>
}
 8008666:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008668:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800866a:	0849      	lsrs	r1, r1, #1
 800866c:	f7ff fe3a 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
 8008670:	e7f9      	b.n	8008666 <UART_DMARxHalfCplt+0x12>

08008672 <UART_DMAReceiveCplt>:
{
 8008672:	b508      	push	{r3, lr}
 8008674:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008676:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f013 0f20 	tst.w	r3, #32
 8008680:	d12b      	bne.n	80086da <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008686:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008688:	f102 030c 	add.w	r3, r2, #12
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008694:	320c      	adds	r2, #12
 8008696:	e842 3100 	strex	r1, r3, [r2]
 800869a:	2900      	cmp	r1, #0
 800869c:	d1f3      	bne.n	8008686 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	f102 0314 	add.w	r3, r2, #20
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ac:	3214      	adds	r2, #20
 80086ae:	e842 3100 	strex	r1, r3, [r2]
 80086b2:	2900      	cmp	r1, #0
 80086b4:	d1f3      	bne.n	800869e <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086b6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	f102 0314 	add.w	r3, r2, #20
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	3214      	adds	r2, #20
 80086c6:	e842 3100 	strex	r1, r3, [r2]
 80086ca:	2900      	cmp	r1, #0
 80086cc:	d1f3      	bne.n	80086b6 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80086ce:	2320      	movs	r3, #32
 80086d0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d007      	beq.n	80086ea <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086da:	2300      	movs	r3, #0
 80086dc:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d00f      	beq.n	8008704 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80086e4:	f7ff fd07 	bl	80080f6 <HAL_UART_RxCpltCallback>
}
 80086e8:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	f102 030c 	add.w	r3, r2, #12
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f8:	320c      	adds	r2, #12
 80086fa:	e842 3100 	strex	r1, r3, [r2]
 80086fe:	2900      	cmp	r1, #0
 8008700:	d1f3      	bne.n	80086ea <UART_DMAReceiveCplt+0x78>
 8008702:	e7ea      	b.n	80086da <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008704:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008706:	f7ff fded 	bl	80082e4 <HAL_UARTEx_RxEventCallback>
 800870a:	e7ed      	b.n	80086e8 <UART_DMAReceiveCplt+0x76>

0800870c <UART_Start_Receive_DMA>:
{
 800870c:	b530      	push	{r4, r5, lr}
 800870e:	b083      	sub	sp, #12
 8008710:	4604      	mov	r4, r0
 8008712:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8008714:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8008716:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	2500      	movs	r5, #0
 800871a:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800871c:	2222      	movs	r2, #34	; 0x22
 800871e:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008722:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008724:	481f      	ldr	r0, [pc, #124]	; (80087a4 <UART_Start_Receive_DMA+0x98>)
 8008726:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008728:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800872a:	481f      	ldr	r0, [pc, #124]	; (80087a8 <UART_Start_Receive_DMA+0x9c>)
 800872c:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800872e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008730:	481e      	ldr	r0, [pc, #120]	; (80087ac <UART_Start_Receive_DMA+0xa0>)
 8008732:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8008734:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008736:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008738:	6820      	ldr	r0, [r4, #0]
 800873a:	460a      	mov	r2, r1
 800873c:	1d01      	adds	r1, r0, #4
 800873e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008740:	f7fc ff0a 	bl	8005558 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008744:	9501      	str	r5, [sp, #4]
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	9201      	str	r2, [sp, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	b15b      	cbz	r3, 800876e <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008756:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	f102 030c 	add.w	r3, r2, #12
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	320c      	adds	r2, #12
 8008766:	e842 3100 	strex	r1, r3, [r2]
 800876a:	2900      	cmp	r1, #0
 800876c:	d1f3      	bne.n	8008756 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	f102 0314 	add.w	r3, r2, #20
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	3214      	adds	r2, #20
 800877e:	e842 3100 	strex	r1, r3, [r2]
 8008782:	2900      	cmp	r1, #0
 8008784:	d1f3      	bne.n	800876e <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008786:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008788:	f102 0314 	add.w	r3, r2, #20
 800878c:	e853 3f00 	ldrex	r3, [r3]
 8008790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	3214      	adds	r2, #20
 8008796:	e842 3100 	strex	r1, r3, [r2]
 800879a:	2900      	cmp	r1, #0
 800879c:	d1f3      	bne.n	8008786 <UART_Start_Receive_DMA+0x7a>
}
 800879e:	2000      	movs	r0, #0
 80087a0:	b003      	add	sp, #12
 80087a2:	bd30      	pop	{r4, r5, pc}
 80087a4:	08008673 	.word	0x08008673
 80087a8:	08008655 	.word	0x08008655
 80087ac:	080080fd 	.word	0x080080fd

080087b0 <HAL_UART_Receive_DMA>:
{
 80087b0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80087b2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b20      	cmp	r3, #32
 80087ba:	d108      	bne.n	80087ce <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 80087bc:	b149      	cbz	r1, 80087d2 <HAL_UART_Receive_DMA+0x22>
 80087be:	b90a      	cbnz	r2, 80087c4 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 80087c0:	2001      	movs	r0, #1
}
 80087c2:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	2300      	movs	r3, #0
 80087c6:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80087c8:	f7ff ffa0 	bl	800870c <UART_Start_Receive_DMA>
 80087cc:	e7f9      	b.n	80087c2 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 80087ce:	2002      	movs	r0, #2
 80087d0:	e7f7      	b.n	80087c2 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 80087d2:	2001      	movs	r0, #1
 80087d4:	e7f5      	b.n	80087c2 <HAL_UART_Receive_DMA+0x12>

080087d6 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80087d6:	2884      	cmp	r0, #132	; 0x84
 80087d8:	d001      	beq.n	80087de <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80087da:	3003      	adds	r0, #3
 80087dc:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80087de:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80087e0:	4770      	bx	lr

080087e2 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e2:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 80087e6:	3800      	subs	r0, #0
 80087e8:	bf18      	it	ne
 80087ea:	2001      	movne	r0, #1
 80087ec:	4770      	bx	lr

080087ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80087ee:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80087f0:	f001 f8a4 	bl	800993c <vTaskStartScheduler>
  
  return osOK;
}
 80087f4:	2000      	movs	r0, #0
 80087f6:	bd08      	pop	{r3, pc}

080087f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80087f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087fc:	b087      	sub	sp, #28
 80087fe:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008800:	6944      	ldr	r4, [r0, #20]
 8008802:	b1c4      	cbz	r4, 8008836 <osThreadCreate+0x3e>
 8008804:	6985      	ldr	r5, [r0, #24]
 8008806:	b1b5      	cbz	r5, 8008836 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008808:	6847      	ldr	r7, [r0, #4]
 800880a:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800880e:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008812:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008816:	f7ff ffde 	bl	80087d6 <makeFreeRtosPriority>
 800881a:	9502      	str	r5, [sp, #8]
 800881c:	9401      	str	r4, [sp, #4]
 800881e:	9000      	str	r0, [sp, #0]
 8008820:	4633      	mov	r3, r6
 8008822:	464a      	mov	r2, r9
 8008824:	4641      	mov	r1, r8
 8008826:	4638      	mov	r0, r7
 8008828:	f000 ff84 	bl	8009734 <xTaskCreateStatic>
 800882c:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800882e:	9805      	ldr	r0, [sp, #20]
}
 8008830:	b007      	add	sp, #28
 8008832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008836:	6844      	ldr	r4, [r0, #4]
 8008838:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800883a:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800883c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008840:	f7ff ffc9 	bl	80087d6 <makeFreeRtosPriority>
 8008844:	ab05      	add	r3, sp, #20
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	9000      	str	r0, [sp, #0]
 800884a:	4633      	mov	r3, r6
 800884c:	b2ba      	uxth	r2, r7
 800884e:	4629      	mov	r1, r5
 8008850:	4620      	mov	r0, r4
 8008852:	f000 ffa9 	bl	80097a8 <xTaskCreate>
 8008856:	2801      	cmp	r0, #1
 8008858:	d0e9      	beq.n	800882e <osThreadCreate+0x36>
      return NULL;
 800885a:	2000      	movs	r0, #0
 800885c:	e7e8      	b.n	8008830 <osThreadCreate+0x38>

0800885e <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 800885e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008866:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8008872:	2000      	movs	r0, #0
 8008874:	4770      	bx	lr

08008876 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008876:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008878:	b900      	cbnz	r0, 800887c <osDelay+0x6>
 800887a:	2001      	movs	r0, #1
 800887c:	f001 fa1c 	bl	8009cb8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008880:	2000      	movs	r0, #0
 8008882:	bd08      	pop	{r3, pc}

08008884 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008884:	b510      	push	{r4, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800888a:	6844      	ldr	r4, [r0, #4]
 800888c:	b16c      	cbz	r4, 80088aa <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 800888e:	2901      	cmp	r1, #1
 8008890:	d009      	beq.n	80088a6 <osTimerCreate+0x22>
 8008892:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008894:	6801      	ldr	r1, [r0, #0]
    return xTimerCreateStatic((const char *)"",
 8008896:	9401      	str	r4, [sp, #4]
 8008898:	9100      	str	r1, [sp, #0]
 800889a:	2101      	movs	r1, #1
 800889c:	4809      	ldr	r0, [pc, #36]	; (80088c4 <osTimerCreate+0x40>)
 800889e:	f001 fe65 	bl	800a56c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 80088a2:	b002      	add	sp, #8
 80088a4:	bd10      	pop	{r4, pc}
    return xTimerCreateStatic((const char *)"",
 80088a6:	2201      	movs	r2, #1
 80088a8:	e7f4      	b.n	8008894 <osTimerCreate+0x10>
    return xTimerCreate((const char *)"",
 80088aa:	2901      	cmp	r1, #1
 80088ac:	d007      	beq.n	80088be <osTimerCreate+0x3a>
 80088ae:	2200      	movs	r2, #0
                      (TaskFunction_t)timer_def->ptimer);
 80088b0:	6801      	ldr	r1, [r0, #0]
    return xTimerCreate((const char *)"",
 80088b2:	9100      	str	r1, [sp, #0]
 80088b4:	2101      	movs	r1, #1
 80088b6:	4803      	ldr	r0, [pc, #12]	; (80088c4 <osTimerCreate+0x40>)
 80088b8:	f001 fe3c 	bl	800a534 <xTimerCreate>
 80088bc:	e7f1      	b.n	80088a2 <osTimerCreate+0x1e>
 80088be:	2201      	movs	r2, #1
 80088c0:	e7f6      	b.n	80088b0 <osTimerCreate+0x2c>
 80088c2:	bf00      	nop
 80088c4:	0800c310 	.word	0x0800c310

080088c8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80088c8:	b530      	push	{r4, r5, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	4604      	mov	r4, r0
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80088ce:	2300      	movs	r3, #0
 80088d0:	9303      	str	r3, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 80088d2:	460d      	mov	r5, r1
 80088d4:	b901      	cbnz	r1, 80088d8 <osTimerStart+0x10>
    ticks = 1;
 80088d6:	2501      	movs	r5, #1
    
  if (inHandlerMode()) 
 80088d8:	f7ff ff83 	bl	80087e2 <inHandlerMode>
 80088dc:	b1d0      	cbz	r0, 8008914 <osTimerStart+0x4c>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80088de:	2300      	movs	r3, #0
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	ab03      	add	r3, sp, #12
 80088e4:	462a      	mov	r2, r5
 80088e6:	2109      	movs	r1, #9
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 fe67 	bl	800a5bc <xTimerGenericCommand>
 80088ee:	2801      	cmp	r0, #1
 80088f0:	d002      	beq.n	80088f8 <osTimerStart+0x30>
    {
      result = osErrorOS;
 80088f2:	20ff      	movs	r0, #255	; 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 80088f4:	b005      	add	sp, #20
 80088f6:	bd30      	pop	{r4, r5, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 80088f8:	9b03      	ldr	r3, [sp, #12]
 80088fa:	b1c3      	cbz	r3, 800892e <osTimerStart+0x66>
 80088fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008904:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8008910:	2000      	movs	r0, #0
 8008912:	e7ef      	b.n	80088f4 <osTimerStart+0x2c>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008914:	2300      	movs	r3, #0
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	2104      	movs	r1, #4
 800891c:	4620      	mov	r0, r4
 800891e:	f001 fe4d 	bl	800a5bc <xTimerGenericCommand>
 8008922:	2801      	cmp	r0, #1
 8008924:	d001      	beq.n	800892a <osTimerStart+0x62>
      result = osErrorOS;
 8008926:	20ff      	movs	r0, #255	; 0xff
  return result;
 8008928:	e7e4      	b.n	80088f4 <osTimerStart+0x2c>
  osStatus result = osOK;
 800892a:	2000      	movs	r0, #0
 800892c:	e7e2      	b.n	80088f4 <osTimerStart+0x2c>
 800892e:	2000      	movs	r0, #0
 8008930:	e7e0      	b.n	80088f4 <osTimerStart+0x2c>

08008932 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8008932:	b530      	push	{r4, r5, lr}
 8008934:	b085      	sub	sp, #20
 8008936:	4604      	mov	r4, r0
 8008938:	460d      	mov	r5, r1
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800893a:	2300      	movs	r3, #0
 800893c:	9303      	str	r3, [sp, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800893e:	9302      	str	r3, [sp, #8]
  
  if (inHandlerMode())
 8008940:	f7ff ff4f 	bl	80087e2 <inHandlerMode>
 8008944:	b1b0      	cbz	r0, 8008974 <osSignalSet+0x42>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8008946:	ab03      	add	r3, sp, #12
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	ab02      	add	r3, sp, #8
 800894c:	2201      	movs	r2, #1
 800894e:	4629      	mov	r1, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f001 fc9f 	bl	800a294 <xTaskGenericNotifyFromISR>
 8008956:	2801      	cmp	r0, #1
 8008958:	d117      	bne.n	800898a <osSignalSet+0x58>
      return 0x80000000;
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	b193      	cbz	r3, 8008984 <osSignalSet+0x52>
 800895e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008966:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	e007      	b.n	8008984 <osSignalSet+0x52>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8008974:	ab02      	add	r3, sp, #8
 8008976:	2201      	movs	r2, #1
 8008978:	4629      	mov	r1, r5
 800897a:	4620      	mov	r0, r4
 800897c:	f001 fc12 	bl	800a1a4 <xTaskGenericNotify>
 8008980:	2801      	cmp	r0, #1
 8008982:	d105      	bne.n	8008990 <osSignalSet+0x5e>
    return 0x80000000;
  
  return ulPreviousNotificationValue;
 8008984:	9802      	ldr	r0, [sp, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8008986:	b005      	add	sp, #20
 8008988:	bd30      	pop	{r4, r5, pc}
      return 0x80000000;
 800898a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800898e:	e7fa      	b.n	8008986 <osSignalSet+0x54>
    return 0x80000000;
 8008990:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008994:	e7f7      	b.n	8008986 <osSignalSet+0x54>

08008996 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8008996:	b570      	push	{r4, r5, r6, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	4604      	mov	r4, r0
 800899c:	460e      	mov	r6, r1
 800899e:	4615      	mov	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80089a0:	2300      	movs	r3, #0
 80089a2:	9302      	str	r3, [sp, #8]
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80089a4:	f7ff ff1d 	bl	80087e2 <inHandlerMode>
 80089a8:	b148      	cbz	r0, 80089be <osSignalWait+0x28>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80089aa:	2382      	movs	r3, #130	; 0x82
 80089ac:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80089ae:	ab04      	add	r3, sp, #16
 80089b0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80089b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80089b8:	4620      	mov	r0, r4
 80089ba:	b004      	add	sp, #16
 80089bc:	bd70      	pop	{r4, r5, r6, pc}
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80089be:	462b      	mov	r3, r5
 80089c0:	aa02      	add	r2, sp, #8
 80089c2:	4631      	mov	r1, r6
 80089c4:	2000      	movs	r0, #0
 80089c6:	f001 fb9b 	bl	800a100 <xTaskNotifyWait>
 80089ca:	2801      	cmp	r0, #1
 80089cc:	d006      	beq.n	80089dc <osSignalWait+0x46>
      if(ticks == 0)  ret.status = osOK;
 80089ce:	b915      	cbnz	r5, 80089d6 <osSignalWait+0x40>
 80089d0:	2300      	movs	r3, #0
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	e7eb      	b.n	80089ae <osSignalWait+0x18>
      else  ret.status = osEventTimeout;
 80089d6:	2340      	movs	r3, #64	; 0x40
 80089d8:	9301      	str	r3, [sp, #4]
 80089da:	e7e8      	b.n	80089ae <osSignalWait+0x18>
    else if(ret.value.signals < 0)
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	db02      	blt.n	80089e8 <osSignalWait+0x52>
    else  ret.status =  osEventSignal;
 80089e2:	2308      	movs	r3, #8
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	e7e2      	b.n	80089ae <osSignalWait+0x18>
      ret.status =  osErrorValue;     
 80089e8:	2386      	movs	r3, #134	; 0x86
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	e7df      	b.n	80089ae <osSignalWait+0x18>

080089ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80089ee:	b510      	push	{r4, lr}
 80089f0:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80089f2:	6844      	ldr	r4, [r0, #4]
 80089f4:	b17c      	cbz	r4, 8008a16 <osSemaphoreCreate+0x28>
    if (count == 1) {
 80089f6:	2901      	cmp	r1, #1
 80089f8:	d003      	beq.n	8008a02 <osSemaphoreCreate+0x14>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80089fa:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 80089fc:	4620      	mov	r0, r4
 80089fe:	b002      	add	sp, #8
 8008a00:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008a02:	2303      	movs	r3, #3
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4623      	mov	r3, r4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	2001      	movs	r0, #1
 8008a0e:	f000 f9f9 	bl	8008e04 <xQueueGenericCreateStatic>
 8008a12:	4604      	mov	r4, r0
 8008a14:	e7f2      	b.n	80089fc <osSemaphoreCreate+0xe>
    if (count == 1) {
 8008a16:	2901      	cmp	r1, #1
 8008a18:	d1f0      	bne.n	80089fc <osSemaphoreCreate+0xe>
      vSemaphoreCreateBinary(sema);
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	2001      	movs	r0, #1
 8008a20:	f000 fa39 	bl	8008e96 <xQueueGenericCreate>
 8008a24:	4604      	mov	r4, r0
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d0e8      	beq.n	80089fc <osSemaphoreCreate+0xe>
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f000 fa58 	bl	8008ee4 <xQueueGenericSend>
      return sema;
 8008a34:	e7e2      	b.n	80089fc <osSemaphoreCreate+0xe>

08008a36 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a36:	b500      	push	{lr}
 8008a38:	b083      	sub	sp, #12
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008a3a:	6882      	ldr	r2, [r0, #8]
 8008a3c:	b142      	cbz	r2, 8008a50 <osMessageCreate+0x1a>
 8008a3e:	68c3      	ldr	r3, [r0, #12]
 8008a40:	b133      	cbz	r3, 8008a50 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008a42:	2100      	movs	r1, #0
 8008a44:	9100      	str	r1, [sp, #0]
 8008a46:	6841      	ldr	r1, [r0, #4]
 8008a48:	6800      	ldr	r0, [r0, #0]
 8008a4a:	f000 f9db 	bl	8008e04 <xQueueGenericCreateStatic>
 8008a4e:	e004      	b.n	8008a5a <osMessageCreate+0x24>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a50:	2200      	movs	r2, #0
 8008a52:	6841      	ldr	r1, [r0, #4]
 8008a54:	6800      	ldr	r0, [r0, #0]
 8008a56:	f000 fa1e 	bl	8008e96 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008a5a:	b003      	add	sp, #12
 8008a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08008a60 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a60:	b530      	push	{r4, r5, lr}
 8008a62:	b085      	sub	sp, #20
 8008a64:	4604      	mov	r4, r0
 8008a66:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	b902      	cbnz	r2, 8008a72 <osMessagePut+0x12>
    ticks = 1;
 8008a70:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 8008a72:	f7ff feb6 	bl	80087e2 <inHandlerMode>
 8008a76:	b1a8      	cbz	r0, 8008aa4 <osMessagePut+0x44>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008a78:	2300      	movs	r3, #0
 8008a7a:	aa03      	add	r2, sp, #12
 8008a7c:	a901      	add	r1, sp, #4
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f000 faf4 	bl	800906c <xQueueGenericSendFromISR>
 8008a84:	2801      	cmp	r0, #1
 8008a86:	d118      	bne.n	8008aba <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	b1c3      	cbz	r3, 8008abe <osMessagePut+0x5e>
 8008a8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	e008      	b.n	8008ab6 <osMessagePut+0x56>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	a901      	add	r1, sp, #4
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 fa1a 	bl	8008ee4 <xQueueGenericSend>
 8008ab0:	2801      	cmp	r0, #1
 8008ab2:	d106      	bne.n	8008ac2 <osMessagePut+0x62>
  return osOK;
 8008ab4:	2000      	movs	r0, #0
}
 8008ab6:	b005      	add	sp, #20
 8008ab8:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8008aba:	20ff      	movs	r0, #255	; 0xff
 8008abc:	e7fb      	b.n	8008ab6 <osMessagePut+0x56>
  return osOK;
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e7f9      	b.n	8008ab6 <osMessagePut+0x56>
      return osErrorOS;
 8008ac2:	20ff      	movs	r0, #255	; 0xff
 8008ac4:	e7f7      	b.n	8008ab6 <osMessagePut+0x56>

08008ac6 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008ac6:	b570      	push	{r4, r5, r6, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008acc:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8008ad2:	b1e1      	cbz	r1, 8008b0e <osMessageGet+0x48>
 8008ad4:	460d      	mov	r5, r1
 8008ad6:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	9303      	str	r3, [sp, #12]
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8008adc:	f7ff fe81 	bl	80087e2 <inHandlerMode>
 8008ae0:	b300      	cbz	r0, 8008b24 <osMessageGet+0x5e>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008ae2:	aa03      	add	r2, sp, #12
 8008ae4:	a901      	add	r1, sp, #4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 fbd5 	bl	8009296 <xQueueReceiveFromISR>
 8008aec:	2801      	cmp	r0, #1
 8008aee:	d016      	beq.n	8008b1e <osMessageGet+0x58>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	b1fb      	cbz	r3, 8008b38 <osMessageGet+0x72>
 8008af8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	e014      	b.n	8008b38 <osMessageGet+0x72>
    event.status = osErrorParameter;
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	9300      	str	r3, [sp, #0]
    return event;
 8008b12:	466b      	mov	r3, sp
 8008b14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b1c:	e011      	b.n	8008b42 <osMessageGet+0x7c>
      event.status = osEventMessage;
 8008b1e:	2310      	movs	r3, #16
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	e7e7      	b.n	8008af4 <osMessageGet+0x2e>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008b24:	4632      	mov	r2, r6
 8008b26:	a901      	add	r1, sp, #4
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f000 fb05 	bl	8009138 <xQueueReceive>
 8008b2e:	2801      	cmp	r0, #1
 8008b30:	d00a      	beq.n	8008b48 <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008b32:	b106      	cbz	r6, 8008b36 <osMessageGet+0x70>
 8008b34:	2640      	movs	r6, #64	; 0x40
 8008b36:	9600      	str	r6, [sp, #0]
    }
  }
  
  return event;
 8008b38:	466b      	mov	r3, sp
 8008b3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008b42:	4620      	mov	r0, r4
 8008b44:	b004      	add	sp, #16
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8008b48:	2310      	movs	r3, #16
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	e7f4      	b.n	8008b38 <osMessageGet+0x72>

08008b4e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8008b4e:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8008b50:	f001 f92a 	bl	8009da8 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008b54:	2000      	movs	r0, #0
 8008b56:	bd08      	pop	{r3, pc}

08008b58 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4604      	mov	r4, r0
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008b5c:	f7ff fe41 	bl	80087e2 <inHandlerMode>
 8008b60:	b178      	cbz	r0, 8008b82 <osThreadResume+0x2a>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 fe98 	bl	8009898 <xTaskResumeFromISR>
 8008b68:	2801      	cmp	r0, #1
 8008b6a:	d10d      	bne.n	8008b88 <osThreadResume+0x30>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8008b6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	e002      	b.n	8008b88 <osThreadResume+0x30>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 fe44 	bl	8009810 <vTaskResume>
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008b88:	2000      	movs	r0, #0
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8008b8c:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 8008b8e:	b901      	cbnz	r1, 8008b92 <osDelayUntil+0x6>
 8008b90:	2101      	movs	r1, #1
 8008b92:	f001 f83f 	bl	8009c14 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 8008b96:	2000      	movs	r0, #0
 8008b98:	bd08      	pop	{r3, pc}

08008b9a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b9a:	f100 0308 	add.w	r3, r0, #8
 8008b9e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ba8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bae:	4770      	bx	lr

08008bb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bb4:	4770      	bx	lr

08008bb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bb6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bbe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bc0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008bc2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008bc4:	6803      	ldr	r3, [r0, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	6003      	str	r3, [r0, #0]
}
 8008bca:	4770      	bx	lr

08008bcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bcc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bce:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bd0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008bd4:	d011      	beq.n	8008bfa <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bd6:	f100 0308 	add.w	r3, r0, #8
 8008bda:	461c      	mov	r4, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	42aa      	cmp	r2, r5
 8008be2:	d9fa      	bls.n	8008bda <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008be4:	6863      	ldr	r3, [r4, #4]
 8008be6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008be8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008bea:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008bec:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008bee:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008bf0:	6803      	ldr	r3, [r0, #0]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6003      	str	r3, [r0, #0]
}
 8008bf6:	bc30      	pop	{r4, r5}
 8008bf8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bfa:	6904      	ldr	r4, [r0, #16]
 8008bfc:	e7f2      	b.n	8008be4 <vListInsert+0x18>

08008bfe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008bfe:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c00:	6841      	ldr	r1, [r0, #4]
 8008c02:	6882      	ldr	r2, [r0, #8]
 8008c04:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c06:	6841      	ldr	r1, [r0, #4]
 8008c08:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4282      	cmp	r2, r0
 8008c0e:	d006      	beq.n	8008c1e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008c10:	2200      	movs	r2, #0
 8008c12:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	3a01      	subs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c1a:	6818      	ldr	r0, [r3, #0]
}
 8008c1c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c1e:	6882      	ldr	r2, [r0, #8]
 8008c20:	605a      	str	r2, [r3, #4]
 8008c22:	e7f5      	b.n	8008c10 <uxListRemove+0x12>

08008c24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c24:	b510      	push	{r4, lr}
 8008c26:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c28:	f001 fe8c 	bl	800a944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d004      	beq.n	8008c3e <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008c34:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008c36:	f001 fea7 	bl	800a988 <vPortExitCritical>

	return xReturn;
}
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008c3e:	2401      	movs	r4, #1
 8008c40:	e7f9      	b.n	8008c36 <prvIsQueueFull+0x12>

08008c42 <prvIsQueueEmpty>:
{
 8008c42:	b510      	push	{r4, lr}
 8008c44:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008c46:	f001 fe7d 	bl	800a944 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008c4c:	b923      	cbnz	r3, 8008c58 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008c4e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008c50:	f001 fe9a 	bl	800a988 <vPortExitCritical>
}
 8008c54:	4620      	mov	r0, r4
 8008c56:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008c58:	2400      	movs	r4, #0
 8008c5a:	e7f9      	b.n	8008c50 <prvIsQueueEmpty+0xe>

08008c5c <prvCopyDataToQueue>:
{
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4604      	mov	r4, r0
 8008c60:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c62:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008c66:	b95a      	cbnz	r2, 8008c80 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c68:	6803      	ldr	r3, [r0, #0]
 8008c6a:	b11b      	cbz	r3, 8008c74 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008c6c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c6e:	3601      	adds	r6, #1
 8008c70:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008c74:	6840      	ldr	r0, [r0, #4]
 8008c76:	f001 f9eb 	bl	800a050 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	6063      	str	r3, [r4, #4]
 8008c7e:	e7f6      	b.n	8008c6e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008c80:	b96d      	cbnz	r5, 8008c9e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008c82:	6880      	ldr	r0, [r0, #8]
 8008c84:	f002 fc77 	bl	800b576 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c90:	6862      	ldr	r2, [r4, #4]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d319      	bcc.n	8008cca <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	e7e7      	b.n	8008c6e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c9e:	68c0      	ldr	r0, [r0, #12]
 8008ca0:	f002 fc69 	bl	800b576 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008ca4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008ca6:	4251      	negs	r1, r2
 8008ca8:	68e3      	ldr	r3, [r4, #12]
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cae:	6822      	ldr	r2, [r4, #0]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d202      	bcs.n	8008cba <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	440b      	add	r3, r1
 8008cb8:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008cba:	2d02      	cmp	r5, #2
 8008cbc:	d001      	beq.n	8008cc2 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8008cbe:	2000      	movs	r0, #0
 8008cc0:	e7d5      	b.n	8008c6e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc2:	b126      	cbz	r6, 8008cce <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8008cc4:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e7d1      	b.n	8008c6e <prvCopyDataToQueue+0x12>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	e7cf      	b.n	8008c6e <prvCopyDataToQueue+0x12>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e7cd      	b.n	8008c6e <prvCopyDataToQueue+0x12>

08008cd2 <prvCopyDataFromQueue>:
{
 8008cd2:	b508      	push	{r3, lr}
 8008cd4:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008cd6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008cd8:	b162      	cbz	r2, 8008cf4 <prvCopyDataFromQueue+0x22>
 8008cda:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008cdc:	68d9      	ldr	r1, [r3, #12]
 8008cde:	4411      	add	r1, r2
 8008ce0:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ce2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8008ce6:	4561      	cmp	r1, ip
 8008ce8:	d301      	bcc.n	8008cee <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008cea:	6819      	ldr	r1, [r3, #0]
 8008cec:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008cee:	68d9      	ldr	r1, [r3, #12]
 8008cf0:	f002 fc41 	bl	800b576 <memcpy>
}
 8008cf4:	bd08      	pop	{r3, pc}

08008cf6 <prvUnlockQueue>:
{
 8008cf6:	b538      	push	{r3, r4, r5, lr}
 8008cf8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008cfa:	f001 fe23 	bl	800a944 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008cfe:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008d02:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d04:	e001      	b.n	8008d0a <prvUnlockQueue+0x14>
			--cTxLock;
 8008d06:	3c01      	subs	r4, #1
 8008d08:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d0a:	2c00      	cmp	r4, #0
 8008d0c:	dd0a      	ble.n	8008d24 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d10:	b143      	cbz	r3, 8008d24 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d12:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008d16:	f001 f8f1 	bl	8009efc <xTaskRemoveFromEventList>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0f3      	beq.n	8008d06 <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008d1e:	f001 f981 	bl	800a024 <vTaskMissedYield>
 8008d22:	e7f0      	b.n	8008d06 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008d24:	23ff      	movs	r3, #255	; 0xff
 8008d26:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008d2a:	f001 fe2d 	bl	800a988 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008d2e:	f001 fe09 	bl	800a944 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008d32:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008d36:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d38:	e001      	b.n	8008d3e <prvUnlockQueue+0x48>
				--cRxLock;
 8008d3a:	3c01      	subs	r4, #1
 8008d3c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	dd0a      	ble.n	8008d58 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d42:	692b      	ldr	r3, [r5, #16]
 8008d44:	b143      	cbz	r3, 8008d58 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d46:	f105 0010 	add.w	r0, r5, #16
 8008d4a:	f001 f8d7 	bl	8009efc <xTaskRemoveFromEventList>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0f3      	beq.n	8008d3a <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8008d52:	f001 f967 	bl	800a024 <vTaskMissedYield>
 8008d56:	e7f0      	b.n	8008d3a <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008d58:	23ff      	movs	r3, #255	; 0xff
 8008d5a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008d5e:	f001 fe13 	bl	800a988 <vPortExitCritical>
}
 8008d62:	bd38      	pop	{r3, r4, r5, pc}

08008d64 <xQueueGenericReset>:
{
 8008d64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8008d66:	b1e0      	cbz	r0, 8008da2 <xQueueGenericReset+0x3e>
 8008d68:	460d      	mov	r5, r1
 8008d6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008d6c:	f001 fdea 	bl	800a944 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008d74:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008d76:	fb01 3002 	mla	r0, r1, r2, r3
 8008d7a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d80:	60a3      	str	r3, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008d82:	3a01      	subs	r2, #1
 8008d84:	fb02 3301 	mla	r3, r2, r1, r3
 8008d88:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d8a:	23ff      	movs	r3, #255	; 0xff
 8008d8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008d94:	b9fd      	cbnz	r5, 8008dd6 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d96:	6923      	ldr	r3, [r4, #16]
 8008d98:	b963      	cbnz	r3, 8008db4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8008d9a:	f001 fdf5 	bl	800a988 <vPortExitCritical>
}
 8008d9e:	2001      	movs	r0, #1
 8008da0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008db2:	e7fe      	b.n	8008db2 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008db4:	f104 0010 	add.w	r0, r4, #16
 8008db8:	f001 f8a0 	bl	8009efc <xTaskRemoveFromEventList>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d0ec      	beq.n	8008d9a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8008dc0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	e7e1      	b.n	8008d9a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008dd6:	f104 0010 	add.w	r0, r4, #16
 8008dda:	f7ff fede 	bl	8008b9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008dde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008de2:	f7ff feda 	bl	8008b9a <vListInitialise>
 8008de6:	e7d8      	b.n	8008d9a <xQueueGenericReset+0x36>

08008de8 <prvInitialiseNewQueue>:
{
 8008de8:	b510      	push	{r4, lr}
 8008dea:	4603      	mov	r3, r0
 8008dec:	9802      	ldr	r0, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008dee:	460c      	mov	r4, r1
 8008df0:	b931      	cbnz	r1, 8008e00 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008df2:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008df4:	63c3      	str	r3, [r0, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008df6:	6404      	str	r4, [r0, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008df8:	2101      	movs	r1, #1
 8008dfa:	f7ff ffb3 	bl	8008d64 <xQueueGenericReset>
}
 8008dfe:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e00:	6002      	str	r2, [r0, #0]
 8008e02:	e7f7      	b.n	8008df4 <prvInitialiseNewQueue+0xc>

08008e04 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e04:	b940      	cbnz	r0, 8008e18 <xQueueGenericCreateStatic+0x14>
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	e7fe      	b.n	8008e16 <xQueueGenericCreateStatic+0x12>
	{
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	461c      	mov	r4, r3
 8008e1e:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8008e20:	b153      	cbz	r3, 8008e38 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e22:	b192      	cbz	r2, 8008e4a <xQueueGenericCreateStatic+0x46>
 8008e24:	b989      	cbnz	r1, 8008e4a <xQueueGenericCreateStatic+0x46>
 8008e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	e7fe      	b.n	8008e36 <xQueueGenericCreateStatic+0x32>
 8008e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008e48:	e7fe      	b.n	8008e48 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e4a:	b16a      	cbz	r2, 8008e68 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e4c:	2348      	movs	r3, #72	; 0x48
 8008e4e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e50:	9b03      	ldr	r3, [sp, #12]
 8008e52:	2b48      	cmp	r3, #72	; 0x48
 8008e54:	d013      	beq.n	8008e7e <xQueueGenericCreateStatic+0x7a>
 8008e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	e7fe      	b.n	8008e66 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d0ef      	beq.n	8008e4c <xQueueGenericCreateStatic+0x48>
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	e7fe      	b.n	8008e7c <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e84:	9400      	str	r4, [sp, #0]
 8008e86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008e8a:	4660      	mov	r0, ip
 8008e8c:	f7ff ffac 	bl	8008de8 <prvInitialiseNewQueue>
	}
 8008e90:	4620      	mov	r0, r4
 8008e92:	b004      	add	sp, #16
 8008e94:	bd10      	pop	{r4, pc}

08008e96 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e96:	b940      	cbnz	r0, 8008eaa <xQueueGenericCreate+0x14>
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	e7fe      	b.n	8008ea8 <xQueueGenericCreate+0x12>
	{
 8008eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eac:	b083      	sub	sp, #12
 8008eae:	460c      	mov	r4, r1
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008eb4:	b1a1      	cbz	r1, 8008ee0 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eb6:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008eba:	3048      	adds	r0, #72	; 0x48
 8008ebc:	f001 febc 	bl	800ac38 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008ec0:	4606      	mov	r6, r0
 8008ec2:	b150      	cbz	r0, 8008eda <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008eca:	9000      	str	r0, [sp, #0]
 8008ecc:	462b      	mov	r3, r5
 8008ece:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7ff ff87 	bl	8008de8 <prvInitialiseNewQueue>
	}
 8008eda:	4630      	mov	r0, r6
 8008edc:	b003      	add	sp, #12
 8008ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	e7ea      	b.n	8008eba <xQueueGenericCreate+0x24>

08008ee4 <xQueueGenericSend>:
{
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008eea:	b188      	cbz	r0, 8008f10 <xQueueGenericSend+0x2c>
 8008eec:	460f      	mov	r7, r1
 8008eee:	461d      	mov	r5, r3
 8008ef0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef2:	b1b1      	cbz	r1, 8008f22 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ef4:	2d02      	cmp	r5, #2
 8008ef6:	d120      	bne.n	8008f3a <xQueueGenericSend+0x56>
 8008ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d01d      	beq.n	8008f3a <xQueueGenericSend+0x56>
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	e7fe      	b.n	8008f0e <xQueueGenericSend+0x2a>
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8008f20:	e7fe      	b.n	8008f20 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0e5      	beq.n	8008ef4 <xQueueGenericSend+0x10>
 8008f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2c:	f383 8811 	msr	BASEPRI, r3
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	f3bf 8f4f 	dsb	sy
 8008f38:	e7fe      	b.n	8008f38 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f3a:	f001 f879 	bl	800a030 <xTaskGetSchedulerState>
 8008f3e:	4606      	mov	r6, r0
 8008f40:	b958      	cbnz	r0, 8008f5a <xQueueGenericSend+0x76>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d048      	beq.n	8008fda <xQueueGenericSend+0xf6>
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	e7fe      	b.n	8008f58 <xQueueGenericSend+0x74>
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	e03d      	b.n	8008fda <xQueueGenericSend+0xf6>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4639      	mov	r1, r7
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff fe7a 	bl	8008c5c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6a:	b97b      	cbnz	r3, 8008f8c <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8008f6c:	b148      	cbz	r0, 8008f82 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008f6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f76:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008f82:	f001 fd01 	bl	800a988 <vPortExitCritical>
				return pdPASS;
 8008f86:	2001      	movs	r0, #1
}
 8008f88:	b005      	add	sp, #20
 8008f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008f90:	f000 ffb4 	bl	8009efc <xTaskRemoveFromEventList>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0f4      	beq.n	8008f82 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8008f98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	e7e9      	b.n	8008f82 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8008fae:	f001 fceb 	bl	800a988 <vPortExitCritical>
					return errQUEUE_FULL;
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e7e8      	b.n	8008f88 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fb6:	a802      	add	r0, sp, #8
 8008fb8:	f000 ffe6 	bl	8009f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fbc:	2601      	movs	r6, #1
 8008fbe:	e019      	b.n	8008ff4 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008fc6:	e021      	b.n	800900c <xQueueGenericSend+0x128>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008fce:	e023      	b.n	8009018 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f7ff fe90 	bl	8008cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fd6:	f000 fda1 	bl	8009b1c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008fda:	f001 fcb3 	bl	800a944 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fde:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d3bb      	bcc.n	8008f5e <xQueueGenericSend+0x7a>
 8008fe6:	2d02      	cmp	r5, #2
 8008fe8:	d0b9      	beq.n	8008f5e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fea:	9b01      	ldr	r3, [sp, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0de      	beq.n	8008fae <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8008ff0:	2e00      	cmp	r6, #0
 8008ff2:	d0e0      	beq.n	8008fb6 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8008ff4:	f001 fcc8 	bl	800a988 <vPortExitCritical>
		vTaskSuspendAll();
 8008ff8:	f000 fcf6 	bl	80099e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ffc:	f001 fca2 	bl	800a944 <vPortEnterCritical>
 8009000:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009004:	b252      	sxtb	r2, r2
 8009006:	f1b2 3fff 	cmp.w	r2, #4294967295
 800900a:	d0d9      	beq.n	8008fc0 <xQueueGenericSend+0xdc>
 800900c:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009010:	b252      	sxtb	r2, r2
 8009012:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009016:	d0d7      	beq.n	8008fc8 <xQueueGenericSend+0xe4>
 8009018:	f001 fcb6 	bl	800a988 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800901c:	a901      	add	r1, sp, #4
 800901e:	a802      	add	r0, sp, #8
 8009020:	f000 ffbe 	bl	8009fa0 <xTaskCheckForTimeOut>
 8009024:	b9d8      	cbnz	r0, 800905e <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009026:	4620      	mov	r0, r4
 8009028:	f7ff fdfc 	bl	8008c24 <prvIsQueueFull>
 800902c:	2800      	cmp	r0, #0
 800902e:	d0cf      	beq.n	8008fd0 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009030:	9901      	ldr	r1, [sp, #4]
 8009032:	f104 0010 	add.w	r0, r4, #16
 8009036:	f000 ff2d 	bl	8009e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800903a:	4620      	mov	r0, r4
 800903c:	f7ff fe5b 	bl	8008cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009040:	f000 fd6c 	bl	8009b1c <xTaskResumeAll>
 8009044:	2800      	cmp	r0, #0
 8009046:	d1c8      	bne.n	8008fda <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009048:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800904c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009050:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	e7bd      	b.n	8008fda <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff fe49 	bl	8008cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009064:	f000 fd5a 	bl	8009b1c <xTaskResumeAll>
			return errQUEUE_FULL;
 8009068:	2000      	movs	r0, #0
 800906a:	e78d      	b.n	8008f88 <xQueueGenericSend+0xa4>

0800906c <xQueueGenericSendFromISR>:
{
 800906c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009070:	b190      	cbz	r0, 8009098 <xQueueGenericSendFromISR+0x2c>
 8009072:	460f      	mov	r7, r1
 8009074:	4616      	mov	r6, r2
 8009076:	461c      	mov	r4, r3
 8009078:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800907a:	b1b1      	cbz	r1, 80090aa <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800907c:	2c02      	cmp	r4, #2
 800907e:	d120      	bne.n	80090c2 <xQueueGenericSendFromISR+0x56>
 8009080:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d01d      	beq.n	80090c2 <xQueueGenericSendFromISR+0x56>
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	e7fe      	b.n	8009096 <xQueueGenericSendFromISR+0x2a>
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80090a8:	e7fe      	b.n	80090a8 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0e5      	beq.n	800907c <xQueueGenericSendFromISR+0x10>
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	e7fe      	b.n	80090c0 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090c2:	f001 fd29 	bl	800ab18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80090c6:	f3ef 8811 	mrs	r8, BASEPRI
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090da:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80090dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80090de:	429a      	cmp	r2, r3
 80090e0:	d306      	bcc.n	80090f0 <xQueueGenericSendFromISR+0x84>
 80090e2:	2c02      	cmp	r4, #2
 80090e4:	d004      	beq.n	80090f0 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80090e6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090e8:	f388 8811 	msr	BASEPRI, r8
}
 80090ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80090f0:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 80090f4:	fa4f f989 	sxtb.w	r9, r9
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090f8:	4622      	mov	r2, r4
 80090fa:	4639      	mov	r1, r7
 80090fc:	4628      	mov	r0, r5
 80090fe:	f7ff fdad 	bl	8008c5c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009102:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009106:	d006      	beq.n	8009116 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009108:	f109 0301 	add.w	r3, r9, #1
 800910c:	b25b      	sxtb	r3, r3
 800910e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009112:	2001      	movs	r0, #1
 8009114:	e7e8      	b.n	80090e8 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009118:	b90b      	cbnz	r3, 800911e <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 800911a:	2001      	movs	r0, #1
 800911c:	e7e4      	b.n	80090e8 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800911e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009122:	f000 feeb 	bl	8009efc <xTaskRemoveFromEventList>
 8009126:	b118      	cbz	r0, 8009130 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009128:	b126      	cbz	r6, 8009134 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800912a:	2001      	movs	r0, #1
 800912c:	6030      	str	r0, [r6, #0]
 800912e:	e7db      	b.n	80090e8 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009130:	2001      	movs	r0, #1
 8009132:	e7d9      	b.n	80090e8 <xQueueGenericSendFromISR+0x7c>
 8009134:	2001      	movs	r0, #1
 8009136:	e7d7      	b.n	80090e8 <xQueueGenericSendFromISR+0x7c>

08009138 <xQueueReceive>:
{
 8009138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800913a:	b085      	sub	sp, #20
 800913c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800913e:	b190      	cbz	r0, 8009166 <xQueueReceive+0x2e>
 8009140:	460f      	mov	r7, r1
 8009142:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009144:	b1c1      	cbz	r1, 8009178 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009146:	f000 ff73 	bl	800a030 <xTaskGetSchedulerState>
 800914a:	4606      	mov	r6, r0
 800914c:	bb00      	cbnz	r0, 8009190 <xQueueReceive+0x58>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d05e      	beq.n	8009212 <xQueueReceive+0xda>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	e7fe      	b.n	8009164 <xQueueReceive+0x2c>
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009176:	e7fe      	b.n	8009176 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009178:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0e3      	beq.n	8009146 <xQueueReceive+0xe>
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	e7fe      	b.n	800918e <xQueueReceive+0x56>
 8009190:	2600      	movs	r6, #0
 8009192:	e03e      	b.n	8009212 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009194:	4639      	mov	r1, r7
 8009196:	4620      	mov	r0, r4
 8009198:	f7ff fd9b 	bl	8008cd2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800919c:	3d01      	subs	r5, #1
 800919e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	b923      	cbnz	r3, 80091ae <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 80091a4:	f001 fbf0 	bl	800a988 <vPortExitCritical>
				return pdPASS;
 80091a8:	2001      	movs	r0, #1
}
 80091aa:	b005      	add	sp, #20
 80091ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ae:	f104 0010 	add.w	r0, r4, #16
 80091b2:	f000 fea3 	bl	8009efc <xTaskRemoveFromEventList>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d0f4      	beq.n	80091a4 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 80091ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	e7e9      	b.n	80091a4 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80091d0:	f001 fbda 	bl	800a988 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80091d4:	2000      	movs	r0, #0
 80091d6:	e7e8      	b.n	80091aa <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091d8:	a802      	add	r0, sp, #8
 80091da:	f000 fed5 	bl	8009f88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091de:	2601      	movs	r6, #1
 80091e0:	e021      	b.n	8009226 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 80091e2:	2300      	movs	r3, #0
 80091e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80091e8:	e029      	b.n	800923e <xQueueReceive+0x106>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091f0:	e02b      	b.n	800924a <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7ff fd7f 	bl	8008cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091f8:	f000 fc90 	bl	8009b1c <xTaskResumeAll>
 80091fc:	e009      	b.n	8009212 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff fd79 	bl	8008cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009204:	f000 fc8a 	bl	8009b1c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009208:	4620      	mov	r0, r4
 800920a:	f7ff fd1a 	bl	8008c42 <prvIsQueueEmpty>
 800920e:	2800      	cmp	r0, #0
 8009210:	d13f      	bne.n	8009292 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009212:	f001 fb97 	bl	800a944 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009216:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009218:	2d00      	cmp	r5, #0
 800921a:	d1bb      	bne.n	8009194 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800921c:	9b01      	ldr	r3, [sp, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0d6      	beq.n	80091d0 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009222:	2e00      	cmp	r6, #0
 8009224:	d0d8      	beq.n	80091d8 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009226:	f001 fbaf 	bl	800a988 <vPortExitCritical>
		vTaskSuspendAll();
 800922a:	f000 fbdd 	bl	80099e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800922e:	f001 fb89 	bl	800a944 <vPortEnterCritical>
 8009232:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009236:	b25b      	sxtb	r3, r3
 8009238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923c:	d0d1      	beq.n	80091e2 <xQueueReceive+0xaa>
 800923e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009242:	b25b      	sxtb	r3, r3
 8009244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009248:	d0cf      	beq.n	80091ea <xQueueReceive+0xb2>
 800924a:	f001 fb9d 	bl	800a988 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800924e:	a901      	add	r1, sp, #4
 8009250:	a802      	add	r0, sp, #8
 8009252:	f000 fea5 	bl	8009fa0 <xTaskCheckForTimeOut>
 8009256:	2800      	cmp	r0, #0
 8009258:	d1d1      	bne.n	80091fe <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800925a:	4620      	mov	r0, r4
 800925c:	f7ff fcf1 	bl	8008c42 <prvIsQueueEmpty>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0c6      	beq.n	80091f2 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009264:	9901      	ldr	r1, [sp, #4]
 8009266:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800926a:	f000 fe13 	bl	8009e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff fd41 	bl	8008cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009274:	f000 fc52 	bl	8009b1c <xTaskResumeAll>
 8009278:	2800      	cmp	r0, #0
 800927a:	d1ca      	bne.n	8009212 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800927c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009284:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	e7bf      	b.n	8009212 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8009292:	2000      	movs	r0, #0
 8009294:	e789      	b.n	80091aa <xQueueReceive+0x72>

08009296 <xQueueReceiveFromISR>:
{
 8009296:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800929a:	b1b0      	cbz	r0, 80092ca <xQueueReceiveFromISR+0x34>
 800929c:	460d      	mov	r5, r1
 800929e:	4690      	mov	r8, r2
 80092a0:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092a2:	b1d9      	cbz	r1, 80092dc <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a4:	f001 fc38 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 80092a8:	f3ef 8711 	mrs	r7, BASEPRI
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092be:	b9ce      	cbnz	r6, 80092f4 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80092c0:	2000      	movs	r0, #0
	__asm volatile
 80092c2:	f387 8811 	msr	BASEPRI, r7
}
 80092c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80092da:	e7fe      	b.n	80092da <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0e0      	beq.n	80092a4 <xQueueReceiveFromISR+0xe>
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	e7fe      	b.n	80092f2 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80092f4:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 80092f8:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092fc:	4629      	mov	r1, r5
 80092fe:	4620      	mov	r0, r4
 8009300:	f7ff fce7 	bl	8008cd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009304:	1e73      	subs	r3, r6, #1
 8009306:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009308:	f1b9 3fff 	cmp.w	r9, #4294967295
 800930c:	d006      	beq.n	800931c <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800930e:	f109 0301 	add.w	r3, r9, #1
 8009312:	b25b      	sxtb	r3, r3
 8009314:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8009318:	2001      	movs	r0, #1
 800931a:	e7d2      	b.n	80092c2 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	b90b      	cbnz	r3, 8009324 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8009320:	2001      	movs	r0, #1
 8009322:	e7ce      	b.n	80092c2 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009324:	f104 0010 	add.w	r0, r4, #16
 8009328:	f000 fde8 	bl	8009efc <xTaskRemoveFromEventList>
 800932c:	b130      	cbz	r0, 800933c <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800932e:	f1b8 0f00 	cmp.w	r8, #0
 8009332:	d005      	beq.n	8009340 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009334:	2001      	movs	r0, #1
 8009336:	f8c8 0000 	str.w	r0, [r8]
 800933a:	e7c2      	b.n	80092c2 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800933c:	2001      	movs	r0, #1
 800933e:	e7c0      	b.n	80092c2 <xQueueReceiveFromISR+0x2c>
 8009340:	2001      	movs	r0, #1
 8009342:	e7be      	b.n	80092c2 <xQueueReceiveFromISR+0x2c>

08009344 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009344:	2300      	movs	r3, #0
 8009346:	2b07      	cmp	r3, #7
 8009348:	d80c      	bhi.n	8009364 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800934a:	4a07      	ldr	r2, [pc, #28]	; (8009368 <vQueueAddToRegistry+0x24>)
 800934c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009350:	b10a      	cbz	r2, 8009356 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009352:	3301      	adds	r3, #1
 8009354:	e7f7      	b.n	8009346 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009356:	4a04      	ldr	r2, [pc, #16]	; (8009368 <vQueueAddToRegistry+0x24>)
 8009358:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800935c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009360:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009362:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	2000187c 	.word	0x2000187c

0800936c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	4604      	mov	r4, r0
 8009370:	460d      	mov	r5, r1
 8009372:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009374:	f001 fae6 	bl	800a944 <vPortEnterCritical>
 8009378:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800937c:	b25b      	sxtb	r3, r3
 800937e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009382:	d00d      	beq.n	80093a0 <vQueueWaitForMessageRestricted+0x34>
 8009384:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009388:	b25b      	sxtb	r3, r3
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d00b      	beq.n	80093a8 <vQueueWaitForMessageRestricted+0x3c>
 8009390:	f001 fafa 	bl	800a988 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009396:	b15b      	cbz	r3, 80093b0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff fcac 	bl	8008cf6 <prvUnlockQueue>
	}
 800939e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80093a0:	2300      	movs	r3, #0
 80093a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80093a6:	e7ed      	b.n	8009384 <vQueueWaitForMessageRestricted+0x18>
 80093a8:	2300      	movs	r3, #0
 80093aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80093ae:	e7ef      	b.n	8009390 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093b0:	4632      	mov	r2, r6
 80093b2:	4629      	mov	r1, r5
 80093b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80093b8:	f000 fd84 	bl	8009ec4 <vTaskPlaceOnEventListRestricted>
 80093bc:	e7ec      	b.n	8009398 <vQueueWaitForMessageRestricted+0x2c>
	...

080093c0 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80093c0:	b128      	cbz	r0, 80093ce <prvTaskIsTaskSuspended+0xe>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093c2:	6941      	ldr	r1, [r0, #20]
 80093c4:	4a0c      	ldr	r2, [pc, #48]	; (80093f8 <prvTaskIsTaskSuspended+0x38>)
 80093c6:	4291      	cmp	r1, r2
 80093c8:	d00a      	beq.n	80093e0 <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 80093ca:	2000      	movs	r0, #0
 80093cc:	4770      	bx	lr
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
		configASSERT( xTask );
 80093de:	e7fe      	b.n	80093de <prvTaskIsTaskSuspended+0x1e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80093e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80093e2:	4a06      	ldr	r2, [pc, #24]	; (80093fc <prvTaskIsTaskSuspended+0x3c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d002      	beq.n	80093ee <prvTaskIsTaskSuspended+0x2e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80093e8:	b11b      	cbz	r3, 80093f2 <prvTaskIsTaskSuspended+0x32>
	BaseType_t xReturn = pdFALSE;
 80093ea:	2000      	movs	r0, #0
 80093ec:	4770      	bx	lr
 80093ee:	2000      	movs	r0, #0
 80093f0:	4770      	bx	lr
				{
					xReturn = pdTRUE;
 80093f2:	2001      	movs	r0, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	200019b8 	.word	0x200019b8
 80093fc:	200019a0 	.word	0x200019a0

08009400 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009400:	4b08      	ldr	r3, [pc, #32]	; (8009424 <prvResetNextTaskUnblockTime+0x24>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	b923      	cbnz	r3, 8009412 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009408:	4b07      	ldr	r3, [pc, #28]	; (8009428 <prvResetNextTaskUnblockTime+0x28>)
 800940a:	f04f 32ff 	mov.w	r2, #4294967295
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009412:	4b04      	ldr	r3, [pc, #16]	; (8009424 <prvResetNextTaskUnblockTime+0x24>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <prvResetNextTaskUnblockTime+0x28>)
 800941e:	601a      	str	r2, [r3, #0]
	}
}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	200018c0 	.word	0x200018c0
 8009428:	20001998 	.word	0x20001998

0800942c <prvInitialiseNewTask>:
{
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	4607      	mov	r7, r0
 8009432:	4698      	mov	r8, r3
 8009434:	9d08      	ldr	r5, [sp, #32]
 8009436:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800943a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800943c:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800943e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009442:	3a01      	subs	r2, #1
 8009444:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009448:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800944c:	f04f 0c00 	mov.w	ip, #0
 8009450:	f1bc 0f0f 	cmp.w	ip, #15
 8009454:	d809      	bhi.n	800946a <prvInitialiseNewTask+0x3e>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009456:	f811 200c 	ldrb.w	r2, [r1, ip]
 800945a:	eb04 030c 	add.w	r3, r4, ip
 800945e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8009462:	b112      	cbz	r2, 800946a <prvInitialiseNewTask+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009464:	f10c 0c01 	add.w	ip, ip, #1
 8009468:	e7f2      	b.n	8009450 <prvInitialiseNewTask+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800946a:	2300      	movs	r3, #0
 800946c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009470:	2d06      	cmp	r5, #6
 8009472:	d900      	bls.n	8009476 <prvInitialiseNewTask+0x4a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009474:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8009476:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009478:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800947a:	f04f 0a00 	mov.w	sl, #0
 800947e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009482:	1d20      	adds	r0, r4, #4
 8009484:	f7ff fb94 	bl	8008bb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009488:	f104 0018 	add.w	r0, r4, #24
 800948c:	f7ff fb90 	bl	8008bb0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009490:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009492:	f1c5 0507 	rsb	r5, r5, #7
 8009496:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009498:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800949a:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800949e:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094a2:	224c      	movs	r2, #76	; 0x4c
 80094a4:	4651      	mov	r1, sl
 80094a6:	18a0      	adds	r0, r4, r2
 80094a8:	f001 ff66 	bl	800b378 <memset>
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <prvInitialiseNewTask+0xa8>)
 80094ae:	6523      	str	r3, [r4, #80]	; 0x50
 80094b0:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80094b4:	6562      	str	r2, [r4, #84]	; 0x54
 80094b6:	33d0      	adds	r3, #208	; 0xd0
 80094b8:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094ba:	4642      	mov	r2, r8
 80094bc:	4639      	mov	r1, r7
 80094be:	4630      	mov	r0, r6
 80094c0:	f001 fa1c 	bl	800a8fc <pxPortInitialiseStack>
 80094c4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80094c6:	f1b9 0f00 	cmp.w	r9, #0
 80094ca:	d001      	beq.n	80094d0 <prvInitialiseNewTask+0xa4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094cc:	f8c9 4000 	str.w	r4, [r9]
}
 80094d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d4:	20002b0c 	.word	0x20002b0c

080094d8 <prvInitialiseTaskLists>:
{
 80094d8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094da:	2400      	movs	r4, #0
 80094dc:	e007      	b.n	80094ee <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80094e2:	0093      	lsls	r3, r2, #2
 80094e4:	480e      	ldr	r0, [pc, #56]	; (8009520 <prvInitialiseTaskLists+0x48>)
 80094e6:	4418      	add	r0, r3
 80094e8:	f7ff fb57 	bl	8008b9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094ec:	3401      	adds	r4, #1
 80094ee:	2c06      	cmp	r4, #6
 80094f0:	d9f5      	bls.n	80094de <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80094f2:	4d0c      	ldr	r5, [pc, #48]	; (8009524 <prvInitialiseTaskLists+0x4c>)
 80094f4:	4628      	mov	r0, r5
 80094f6:	f7ff fb50 	bl	8008b9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094fa:	4c0b      	ldr	r4, [pc, #44]	; (8009528 <prvInitialiseTaskLists+0x50>)
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7ff fb4c 	bl	8008b9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009502:	480a      	ldr	r0, [pc, #40]	; (800952c <prvInitialiseTaskLists+0x54>)
 8009504:	f7ff fb49 	bl	8008b9a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009508:	4809      	ldr	r0, [pc, #36]	; (8009530 <prvInitialiseTaskLists+0x58>)
 800950a:	f7ff fb46 	bl	8008b9a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800950e:	4809      	ldr	r0, [pc, #36]	; (8009534 <prvInitialiseTaskLists+0x5c>)
 8009510:	f7ff fb43 	bl	8008b9a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009514:	4b08      	ldr	r3, [pc, #32]	; (8009538 <prvInitialiseTaskLists+0x60>)
 8009516:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009518:	4b08      	ldr	r3, [pc, #32]	; (800953c <prvInitialiseTaskLists+0x64>)
 800951a:	601c      	str	r4, [r3, #0]
}
 800951c:	bd38      	pop	{r3, r4, r5, pc}
 800951e:	bf00      	nop
 8009520:	200018c8 	.word	0x200018c8
 8009524:	2000196c 	.word	0x2000196c
 8009528:	20001980 	.word	0x20001980
 800952c:	200019a0 	.word	0x200019a0
 8009530:	200019cc 	.word	0x200019cc
 8009534:	200019b8 	.word	0x200019b8
 8009538:	200018c0 	.word	0x200018c0
 800953c:	200018c4 	.word	0x200018c4

08009540 <prvAddNewTaskToReadyList>:
{
 8009540:	b510      	push	{r4, lr}
 8009542:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009544:	f001 f9fe 	bl	800a944 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009548:	4a21      	ldr	r2, [pc, #132]	; (80095d0 <prvAddNewTaskToReadyList+0x90>)
 800954a:	6813      	ldr	r3, [r2, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009550:	4b20      	ldr	r3, [pc, #128]	; (80095d4 <prvAddNewTaskToReadyList+0x94>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	b15b      	cbz	r3, 800956e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009556:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <prvAddNewTaskToReadyList+0x98>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	b96b      	cbnz	r3, 8009578 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800955c:	4b1d      	ldr	r3, [pc, #116]	; (80095d4 <prvAddNewTaskToReadyList+0x94>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009564:	429a      	cmp	r2, r3
 8009566:	d807      	bhi.n	8009578 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009568:	4b1a      	ldr	r3, [pc, #104]	; (80095d4 <prvAddNewTaskToReadyList+0x94>)
 800956a:	601c      	str	r4, [r3, #0]
 800956c:	e004      	b.n	8009578 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800956e:	4b19      	ldr	r3, [pc, #100]	; (80095d4 <prvAddNewTaskToReadyList+0x94>)
 8009570:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009572:	6813      	ldr	r3, [r2, #0]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d028      	beq.n	80095ca <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8009578:	4a18      	ldr	r2, [pc, #96]	; (80095dc <prvAddNewTaskToReadyList+0x9c>)
 800957a:	6813      	ldr	r3, [r2, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8009580:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009582:	2301      	movs	r3, #1
 8009584:	4083      	lsls	r3, r0
 8009586:	4a16      	ldr	r2, [pc, #88]	; (80095e0 <prvAddNewTaskToReadyList+0xa0>)
 8009588:	6811      	ldr	r1, [r2, #0]
 800958a:	430b      	orrs	r3, r1
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009592:	1d21      	adds	r1, r4, #4
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <prvAddNewTaskToReadyList+0xa4>)
 8009596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800959a:	f7ff fb0c 	bl	8008bb6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800959e:	f001 f9f3 	bl	800a988 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80095a2:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <prvAddNewTaskToReadyList+0x98>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	b17b      	cbz	r3, 80095c8 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <prvAddNewTaskToReadyList+0x94>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d209      	bcs.n	80095c8 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 80095b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	f3bf 8f6f 	isb	sy
}
 80095c8:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80095ca:	f7ff ff85 	bl	80094d8 <prvInitialiseTaskLists>
 80095ce:	e7d3      	b.n	8009578 <prvAddNewTaskToReadyList+0x38>
 80095d0:	20001954 	.word	0x20001954
 80095d4:	200018bc 	.word	0x200018bc
 80095d8:	200019b4 	.word	0x200019b4
 80095dc:	20001964 	.word	0x20001964
 80095e0:	20001968 	.word	0x20001968
 80095e4:	200018c8 	.word	0x200018c8

080095e8 <prvDeleteTCB>:
	{
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095ec:	304c      	adds	r0, #76	; 0x4c
 80095ee:	f001 fef1 	bl	800b3d4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095f2:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 80095f6:	b163      	cbz	r3, 8009612 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d011      	beq.n	8009620 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d00e      	beq.n	800961e <prvDeleteTCB+0x36>
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	e7fe      	b.n	8009610 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8009612:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009614:	f001 fb88 	bl	800ad28 <vPortFree>
				vPortFree( pxTCB );
 8009618:	4620      	mov	r0, r4
 800961a:	f001 fb85 	bl	800ad28 <vPortFree>
	}
 800961e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8009620:	4620      	mov	r0, r4
 8009622:	f001 fb81 	bl	800ad28 <vPortFree>
 8009626:	e7fa      	b.n	800961e <prvDeleteTCB+0x36>

08009628 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009628:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <prvCheckTasksWaitingTermination+0x40>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	b1d3      	cbz	r3, 8009664 <prvCheckTasksWaitingTermination+0x3c>
{
 800962e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8009630:	f001 f988 	bl	800a944 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009634:	4b0d      	ldr	r3, [pc, #52]	; (800966c <prvCheckTasksWaitingTermination+0x44>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963a:	1d20      	adds	r0, r4, #4
 800963c:	f7ff fadf 	bl	8008bfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009640:	4a0b      	ldr	r2, [pc, #44]	; (8009670 <prvCheckTasksWaitingTermination+0x48>)
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	3b01      	subs	r3, #1
 8009646:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009648:	4a07      	ldr	r2, [pc, #28]	; (8009668 <prvCheckTasksWaitingTermination+0x40>)
 800964a:	6813      	ldr	r3, [r2, #0]
 800964c:	3b01      	subs	r3, #1
 800964e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8009650:	f001 f99a 	bl	800a988 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff ffc7 	bl	80095e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800965a:	4b03      	ldr	r3, [pc, #12]	; (8009668 <prvCheckTasksWaitingTermination+0x40>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e6      	bne.n	8009630 <prvCheckTasksWaitingTermination+0x8>
}
 8009662:	bd10      	pop	{r4, pc}
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	20001958 	.word	0x20001958
 800966c:	200019cc 	.word	0x200019cc
 8009670:	20001954 	.word	0x20001954

08009674 <prvIdleTask>:
{
 8009674:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009676:	f7ff ffd7 	bl	8009628 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800967a:	4b07      	ldr	r3, [pc, #28]	; (8009698 <prvIdleTask+0x24>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d9f9      	bls.n	8009676 <prvIdleTask+0x2>
				taskYIELD();
 8009682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800968e:	f3bf 8f4f 	dsb	sy
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	e7ee      	b.n	8009676 <prvIdleTask+0x2>
 8009698:	200018c8 	.word	0x200018c8

0800969c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096a2:	4b1d      	ldr	r3, [pc, #116]	; (8009718 <prvAddCurrentTaskToDelayedList+0x7c>)
 80096a4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a6:	4b1d      	ldr	r3, [pc, #116]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	3004      	adds	r0, #4
 80096ac:	f7ff faa7 	bl	8008bfe <uxListRemove>
 80096b0:	b948      	cbnz	r0, 80096c6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80096b2:	4b1a      	ldr	r3, [pc, #104]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b8:	2201      	movs	r2, #1
 80096ba:	409a      	lsls	r2, r3
 80096bc:	4918      	ldr	r1, [pc, #96]	; (8009720 <prvAddCurrentTaskToDelayedList+0x84>)
 80096be:	680b      	ldr	r3, [r1, #0]
 80096c0:	ea23 0302 	bic.w	r3, r3, r2
 80096c4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096c6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80096ca:	d00d      	beq.n	80096e8 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096cc:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	d910      	bls.n	80096fa <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d8:	4b12      	ldr	r3, [pc, #72]	; (8009724 <prvAddCurrentTaskToDelayedList+0x88>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4b0f      	ldr	r3, [pc, #60]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 80096de:	6819      	ldr	r1, [r3, #0]
 80096e0:	3104      	adds	r1, #4
 80096e2:	f7ff fa73 	bl	8008bcc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096e8:	2d00      	cmp	r5, #0
 80096ea:	d0ef      	beq.n	80096cc <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ec:	4b0b      	ldr	r3, [pc, #44]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 80096ee:	6819      	ldr	r1, [r3, #0]
 80096f0:	3104      	adds	r1, #4
 80096f2:	480d      	ldr	r0, [pc, #52]	; (8009728 <prvAddCurrentTaskToDelayedList+0x8c>)
 80096f4:	f7ff fa5f 	bl	8008bb6 <vListInsertEnd>
 80096f8:	e7f5      	b.n	80096e6 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <prvAddCurrentTaskToDelayedList+0x90>)
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	4b07      	ldr	r3, [pc, #28]	; (800971c <prvAddCurrentTaskToDelayedList+0x80>)
 8009700:	6819      	ldr	r1, [r3, #0]
 8009702:	3104      	adds	r1, #4
 8009704:	f7ff fa62 	bl	8008bcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <prvAddCurrentTaskToDelayedList+0x94>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	42a3      	cmp	r3, r4
 800970e:	d9ea      	bls.n	80096e6 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <prvAddCurrentTaskToDelayedList+0x94>)
 8009712:	601c      	str	r4, [r3, #0]
}
 8009714:	e7e7      	b.n	80096e6 <prvAddCurrentTaskToDelayedList+0x4a>
 8009716:	bf00      	nop
 8009718:	200019e0 	.word	0x200019e0
 800971c:	200018bc 	.word	0x200018bc
 8009720:	20001968 	.word	0x20001968
 8009724:	200018c4 	.word	0x200018c4
 8009728:	200019b8 	.word	0x200019b8
 800972c:	200018c0 	.word	0x200018c0
 8009730:	20001998 	.word	0x20001998

08009734 <xTaskCreateStatic>:
	{
 8009734:	b530      	push	{r4, r5, lr}
 8009736:	b087      	sub	sp, #28
 8009738:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800973a:	b17c      	cbz	r4, 800975c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800973c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800973e:	b1b5      	cbz	r5, 800976e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009740:	25a0      	movs	r5, #160	; 0xa0
 8009742:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009744:	9d04      	ldr	r5, [sp, #16]
 8009746:	2da0      	cmp	r5, #160	; 0xa0
 8009748:	d01a      	beq.n	8009780 <xTaskCreateStatic+0x4c>
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	e7fe      	b.n	800975a <xTaskCreateStatic+0x26>
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800976c:	e7fe      	b.n	800976c <xTaskCreateStatic+0x38>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800977e:	e7fe      	b.n	800977e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009782:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009784:	2402      	movs	r4, #2
 8009786:	f885 409d 	strb.w	r4, [r5, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800978a:	2400      	movs	r4, #0
 800978c:	9403      	str	r4, [sp, #12]
 800978e:	9502      	str	r5, [sp, #8]
 8009790:	ac05      	add	r4, sp, #20
 8009792:	9401      	str	r4, [sp, #4]
 8009794:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009796:	9400      	str	r4, [sp, #0]
 8009798:	f7ff fe48 	bl	800942c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800979c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800979e:	f7ff fecf 	bl	8009540 <prvAddNewTaskToReadyList>
	}
 80097a2:	9805      	ldr	r0, [sp, #20]
 80097a4:	b007      	add	sp, #28
 80097a6:	bd30      	pop	{r4, r5, pc}

080097a8 <xTaskCreate>:
	{
 80097a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097ac:	b085      	sub	sp, #20
 80097ae:	4607      	mov	r7, r0
 80097b0:	4688      	mov	r8, r1
 80097b2:	4614      	mov	r4, r2
 80097b4:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b6:	0090      	lsls	r0, r2, #2
 80097b8:	f001 fa3e 	bl	800ac38 <pvPortMalloc>
			if( pxStack != NULL )
 80097bc:	b300      	cbz	r0, 8009800 <xTaskCreate+0x58>
 80097be:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80097c0:	20a0      	movs	r0, #160	; 0xa0
 80097c2:	f001 fa39 	bl	800ac38 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80097c6:	4605      	mov	r5, r0
 80097c8:	b1b0      	cbz	r0, 80097f8 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 80097ca:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80097ce:	b1e5      	cbz	r5, 800980a <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097d0:	2300      	movs	r3, #0
 80097d2:	f885 309d 	strb.w	r3, [r5, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	9502      	str	r5, [sp, #8]
 80097da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	4633      	mov	r3, r6
 80097e4:	4622      	mov	r2, r4
 80097e6:	4641      	mov	r1, r8
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff fe1f 	bl	800942c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097ee:	4628      	mov	r0, r5
 80097f0:	f7ff fea6 	bl	8009540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097f4:	2001      	movs	r0, #1
 80097f6:	e005      	b.n	8009804 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 80097f8:	4648      	mov	r0, r9
 80097fa:	f001 fa95 	bl	800ad28 <vPortFree>
 80097fe:	e7e6      	b.n	80097ce <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009804:	b005      	add	sp, #20
 8009806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800980e:	e7f9      	b.n	8009804 <xTaskCreate+0x5c>

08009810 <vTaskResume>:
	{
 8009810:	b538      	push	{r3, r4, r5, lr}
		configASSERT( xTaskToResume );
 8009812:	b168      	cbz	r0, 8009830 <vTaskResume+0x20>
 8009814:	4604      	mov	r4, r0
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8009816:	4b1d      	ldr	r3, [pc, #116]	; (800988c <vTaskResume+0x7c>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4283      	cmp	r3, r0
 800981c:	d007      	beq.n	800982e <vTaskResume+0x1e>
			taskENTER_CRITICAL();
 800981e:	f001 f891 	bl	800a944 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff fdcc 	bl	80093c0 <prvTaskIsTaskSuspended>
 8009828:	b958      	cbnz	r0, 8009842 <vTaskResume+0x32>
			taskEXIT_CRITICAL();
 800982a:	f001 f8ad 	bl	800a988 <vPortExitCritical>
	}
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8009840:	e7fe      	b.n	8009840 <vTaskResume+0x30>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8009842:	1d25      	adds	r5, r4, #4
 8009844:	4628      	mov	r0, r5
 8009846:	f7ff f9da 	bl	8008bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800984a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800984c:	2301      	movs	r3, #1
 800984e:	4083      	lsls	r3, r0
 8009850:	4a0f      	ldr	r2, [pc, #60]	; (8009890 <vTaskResume+0x80>)
 8009852:	6811      	ldr	r1, [r2, #0]
 8009854:	430b      	orrs	r3, r1
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800985c:	4629      	mov	r1, r5
 800985e:	4b0d      	ldr	r3, [pc, #52]	; (8009894 <vTaskResume+0x84>)
 8009860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009864:	f7ff f9a7 	bl	8008bb6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009868:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <vTaskResume+0x7c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009870:	429a      	cmp	r2, r3
 8009872:	d3da      	bcc.n	800982a <vTaskResume+0x1a>
						taskYIELD_IF_USING_PREEMPTION();
 8009874:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	e7cf      	b.n	800982a <vTaskResume+0x1a>
 800988a:	bf00      	nop
 800988c:	200018bc 	.word	0x200018bc
 8009890:	20001968 	.word	0x20001968
 8009894:	200018c8 	.word	0x200018c8

08009898 <xTaskResumeFromISR>:
	{
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800989a:	b390      	cbz	r0, 8009902 <xTaskResumeFromISR+0x6a>
 800989c:	4605      	mov	r5, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800989e:	f001 f93b 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 80098a2:	f3ef 8411 	mrs	r4, BASEPRI
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff fd82 	bl	80093c0 <prvTaskIsTaskSuspended>
 80098bc:	4606      	mov	r6, r0
 80098be:	b1e0      	cbz	r0, 80098fa <xTaskResumeFromISR+0x62>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098c0:	4b19      	ldr	r3, [pc, #100]	; (8009928 <xTaskResumeFromISR+0x90>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	bb43      	cbnz	r3, 8009918 <xTaskResumeFromISR+0x80>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80098c8:	4b18      	ldr	r3, [pc, #96]	; (800992c <xTaskResumeFromISR+0x94>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d220      	bcs.n	8009914 <xTaskResumeFromISR+0x7c>
	BaseType_t xYieldRequired = pdFALSE;
 80098d2:	2600      	movs	r6, #0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098d4:	1d2f      	adds	r7, r5, #4
 80098d6:	4638      	mov	r0, r7
 80098d8:	f7ff f991 	bl	8008bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80098de:	2301      	movs	r3, #1
 80098e0:	4083      	lsls	r3, r0
 80098e2:	4a13      	ldr	r2, [pc, #76]	; (8009930 <xTaskResumeFromISR+0x98>)
 80098e4:	6811      	ldr	r1, [r2, #0]
 80098e6:	430b      	orrs	r3, r1
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80098ee:	4639      	mov	r1, r7
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTaskResumeFromISR+0x9c>)
 80098f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098f6:	f7ff f95e 	bl	8008bb6 <vListInsertEnd>
	__asm volatile
 80098fa:	f384 8811 	msr	BASEPRI, r4
	}
 80098fe:	4630      	mov	r0, r6
 8009900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8009912:	e7fe      	b.n	8009912 <xTaskResumeFromISR+0x7a>
						xYieldRequired = pdTRUE;
 8009914:	2601      	movs	r6, #1
 8009916:	e7dd      	b.n	80098d4 <xTaskResumeFromISR+0x3c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009918:	f105 0118 	add.w	r1, r5, #24
 800991c:	4806      	ldr	r0, [pc, #24]	; (8009938 <xTaskResumeFromISR+0xa0>)
 800991e:	f7ff f94a 	bl	8008bb6 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8009922:	2600      	movs	r6, #0
 8009924:	e7e9      	b.n	80098fa <xTaskResumeFromISR+0x62>
 8009926:	bf00      	nop
 8009928:	20001960 	.word	0x20001960
 800992c:	200018bc 	.word	0x200018bc
 8009930:	20001968 	.word	0x20001968
 8009934:	200018c8 	.word	0x200018c8
 8009938:	200019a0 	.word	0x200019a0

0800993c <vTaskStartScheduler>:
{
 800993c:	b510      	push	{r4, lr}
 800993e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009940:	2400      	movs	r4, #0
 8009942:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009944:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009946:	aa07      	add	r2, sp, #28
 8009948:	a906      	add	r1, sp, #24
 800994a:	a805      	add	r0, sp, #20
 800994c:	f7f8 fd0e 	bl	800236c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	9b06      	ldr	r3, [sp, #24]
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	9400      	str	r4, [sp, #0]
 800995a:	4623      	mov	r3, r4
 800995c:	9a07      	ldr	r2, [sp, #28]
 800995e:	491a      	ldr	r1, [pc, #104]	; (80099c8 <vTaskStartScheduler+0x8c>)
 8009960:	481a      	ldr	r0, [pc, #104]	; (80099cc <vTaskStartScheduler+0x90>)
 8009962:	f7ff fee7 	bl	8009734 <xTaskCreateStatic>
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <vTaskStartScheduler+0x94>)
 8009968:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800996a:	b140      	cbz	r0, 800997e <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800996c:	f000 fdb0 	bl	800a4d0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009970:	2801      	cmp	r0, #1
 8009972:	d006      	beq.n	8009982 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009974:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009978:	d01d      	beq.n	80099b6 <vTaskStartScheduler+0x7a>
}
 800997a:	b008      	add	sp, #32
 800997c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800997e:	2000      	movs	r0, #0
 8009980:	e7f6      	b.n	8009970 <vTaskStartScheduler+0x34>
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009992:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <vTaskStartScheduler+0x98>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	334c      	adds	r3, #76	; 0x4c
 8009998:	4a0f      	ldr	r2, [pc, #60]	; (80099d8 <vTaskStartScheduler+0x9c>)
 800999a:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800999c:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <vTaskStartScheduler+0xa0>)
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099a4:	4b0e      	ldr	r3, [pc, #56]	; (80099e0 <vTaskStartScheduler+0xa4>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80099aa:	4b0e      	ldr	r3, [pc, #56]	; (80099e4 <vTaskStartScheduler+0xa8>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80099b0:	f001 f852 	bl	800aa58 <xPortStartScheduler>
 80099b4:	e7e1      	b.n	800997a <vTaskStartScheduler+0x3e>
 80099b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ba:	f383 8811 	msr	BASEPRI, r3
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099c6:	e7fe      	b.n	80099c6 <vTaskStartScheduler+0x8a>
 80099c8:	0800c5f4 	.word	0x0800c5f4
 80099cc:	08009675 	.word	0x08009675
 80099d0:	20001994 	.word	0x20001994
 80099d4:	200018bc 	.word	0x200018bc
 80099d8:	20000068 	.word	0x20000068
 80099dc:	20001998 	.word	0x20001998
 80099e0:	200019b4 	.word	0x200019b4
 80099e4:	200019e0 	.word	0x200019e0

080099e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80099e8:	4a02      	ldr	r2, [pc, #8]	; (80099f4 <vTaskSuspendAll+0xc>)
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	6013      	str	r3, [r2, #0]
}
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20001960 	.word	0x20001960

080099f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80099f8:	4b01      	ldr	r3, [pc, #4]	; (8009a00 <xTaskGetTickCount+0x8>)
 80099fa:	6818      	ldr	r0, [r3, #0]
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	200019e0 	.word	0x200019e0

08009a04 <xTaskIncrementTick>:
{
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a06:	4b3a      	ldr	r3, [pc, #232]	; (8009af0 <xTaskIncrementTick+0xec>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d164      	bne.n	8009ad8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a0e:	4b39      	ldr	r3, [pc, #228]	; (8009af4 <xTaskIncrementTick+0xf0>)
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009a14:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a16:	b9c5      	cbnz	r5, 8009a4a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009a18:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <xTaskIncrementTick+0xf4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	b143      	cbz	r3, 8009a32 <xTaskIncrementTick+0x2e>
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	e7fe      	b.n	8009a30 <xTaskIncrementTick+0x2c>
 8009a32:	4a31      	ldr	r2, [pc, #196]	; (8009af8 <xTaskIncrementTick+0xf4>)
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	4b31      	ldr	r3, [pc, #196]	; (8009afc <xTaskIncrementTick+0xf8>)
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	6019      	str	r1, [r3, #0]
 8009a3e:	4a30      	ldr	r2, [pc, #192]	; (8009b00 <xTaskIncrementTick+0xfc>)
 8009a40:	6813      	ldr	r3, [r2, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	f7ff fcdb 	bl	8009400 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a4a:	4b2e      	ldr	r3, [pc, #184]	; (8009b04 <xTaskIncrementTick+0x100>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	42ab      	cmp	r3, r5
 8009a50:	d938      	bls.n	8009ac4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009a52:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a54:	4b2c      	ldr	r3, [pc, #176]	; (8009b08 <xTaskIncrementTick+0x104>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a5e:	009a      	lsls	r2, r3, #2
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <xTaskIncrementTick+0x108>)
 8009a62:	589b      	ldr	r3, [r3, r2]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d93c      	bls.n	8009ae2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8009a68:	2701      	movs	r7, #1
 8009a6a:	e03a      	b.n	8009ae2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009a6c:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6e:	4b22      	ldr	r3, [pc, #136]	; (8009af8 <xTaskIncrementTick+0xf4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b343      	cbz	r3, 8009ac8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009a76:	4b20      	ldr	r3, [pc, #128]	; (8009af8 <xTaskIncrementTick+0xf4>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a7e:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009a80:	429d      	cmp	r5, r3
 8009a82:	d326      	bcc.n	8009ad2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a84:	1d26      	adds	r6, r4, #4
 8009a86:	4630      	mov	r0, r6
 8009a88:	f7ff f8b9 	bl	8008bfe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a8e:	b11b      	cbz	r3, 8009a98 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a90:	f104 0018 	add.w	r0, r4, #24
 8009a94:	f7ff f8b3 	bl	8008bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	409a      	lsls	r2, r3
 8009a9e:	491c      	ldr	r1, [pc, #112]	; (8009b10 <xTaskIncrementTick+0x10c>)
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	4302      	orrs	r2, r0
 8009aa4:	600a      	str	r2, [r1, #0]
 8009aa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009aaa:	009a      	lsls	r2, r3, #2
 8009aac:	4631      	mov	r1, r6
 8009aae:	4817      	ldr	r0, [pc, #92]	; (8009b0c <xTaskIncrementTick+0x108>)
 8009ab0:	4410      	add	r0, r2
 8009ab2:	f7ff f880 	bl	8008bb6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ab6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ab8:	4b13      	ldr	r3, [pc, #76]	; (8009b08 <xTaskIncrementTick+0x104>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d2d4      	bcs.n	8009a6c <xTaskIncrementTick+0x68>
 8009ac2:	e7d4      	b.n	8009a6e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009ac4:	2700      	movs	r7, #0
 8009ac6:	e7d2      	b.n	8009a6e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac8:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <xTaskIncrementTick+0x100>)
 8009aca:	f04f 32ff 	mov.w	r2, #4294967295
 8009ace:	601a      	str	r2, [r3, #0]
					break;
 8009ad0:	e7c0      	b.n	8009a54 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009ad2:	4a0c      	ldr	r2, [pc, #48]	; (8009b04 <xTaskIncrementTick+0x100>)
 8009ad4:	6013      	str	r3, [r2, #0]
						break;
 8009ad6:	e7bd      	b.n	8009a54 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8009ad8:	4a0e      	ldr	r2, [pc, #56]	; (8009b14 <xTaskIncrementTick+0x110>)
 8009ada:	6813      	ldr	r3, [r2, #0]
 8009adc:	3301      	adds	r3, #1
 8009ade:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009ae0:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8009ae2:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <xTaskIncrementTick+0x114>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8009ae8:	2701      	movs	r7, #1
}
 8009aea:	4638      	mov	r0, r7
 8009aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20001960 	.word	0x20001960
 8009af4:	200019e0 	.word	0x200019e0
 8009af8:	200018c0 	.word	0x200018c0
 8009afc:	200018c4 	.word	0x200018c4
 8009b00:	2000199c 	.word	0x2000199c
 8009b04:	20001998 	.word	0x20001998
 8009b08:	200018bc 	.word	0x200018bc
 8009b0c:	200018c8 	.word	0x200018c8
 8009b10:	20001968 	.word	0x20001968
 8009b14:	2000195c 	.word	0x2000195c
 8009b18:	200019e4 	.word	0x200019e4

08009b1c <xTaskResumeAll>:
{
 8009b1c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009b1e:	4b35      	ldr	r3, [pc, #212]	; (8009bf4 <xTaskResumeAll+0xd8>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b943      	cbnz	r3, 8009b36 <xTaskResumeAll+0x1a>
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	e7fe      	b.n	8009b34 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009b36:	f000 ff05 	bl	800a944 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	; (8009bf4 <xTaskResumeAll+0xd8>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	3a01      	subs	r2, #1
 8009b40:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d14f      	bne.n	8009be8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b48:	4b2b      	ldr	r3, [pc, #172]	; (8009bf8 <xTaskResumeAll+0xdc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009b4e:	2400      	movs	r4, #0
 8009b50:	e04b      	b.n	8009bea <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009b52:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b54:	4b29      	ldr	r3, [pc, #164]	; (8009bfc <xTaskResumeAll+0xe0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	b31b      	cbz	r3, 8009ba2 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009b5a:	4b28      	ldr	r3, [pc, #160]	; (8009bfc <xTaskResumeAll+0xe0>)
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b60:	f104 0018 	add.w	r0, r4, #24
 8009b64:	f7ff f84b 	bl	8008bfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b68:	1d25      	adds	r5, r4, #4
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7ff f847 	bl	8008bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009b72:	2301      	movs	r3, #1
 8009b74:	4083      	lsls	r3, r0
 8009b76:	4a22      	ldr	r2, [pc, #136]	; (8009c00 <xTaskResumeAll+0xe4>)
 8009b78:	6811      	ldr	r1, [r2, #0]
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009b82:	4629      	mov	r1, r5
 8009b84:	4b1f      	ldr	r3, [pc, #124]	; (8009c04 <xTaskResumeAll+0xe8>)
 8009b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009b8a:	f7ff f814 	bl	8008bb6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b90:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <xTaskResumeAll+0xec>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d3dc      	bcc.n	8009b54 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009b9a:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <xTaskResumeAll+0xf0>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	e7d8      	b.n	8009b54 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009ba2:	b10c      	cbz	r4, 8009ba8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009ba4:	f7ff fc2c 	bl	8009400 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009ba8:	4b19      	ldr	r3, [pc, #100]	; (8009c10 <xTaskResumeAll+0xf4>)
 8009baa:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009bac:	b984      	cbnz	r4, 8009bd0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009bae:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <xTaskResumeAll+0xf0>)
 8009bb0:	681c      	ldr	r4, [r3, #0]
 8009bb2:	b1d4      	cbz	r4, 8009bea <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009bb4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009bc8:	2401      	movs	r4, #1
 8009bca:	e00e      	b.n	8009bea <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009bcc:	3c01      	subs	r4, #1
 8009bce:	d007      	beq.n	8009be0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8009bd0:	f7ff ff18 	bl	8009a04 <xTaskIncrementTick>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d0f9      	beq.n	8009bcc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <xTaskResumeAll+0xf0>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	e7f5      	b.n	8009bcc <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8009be0:	4b0b      	ldr	r3, [pc, #44]	; (8009c10 <xTaskResumeAll+0xf4>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	e7e2      	b.n	8009bae <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009be8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009bea:	f000 fecd 	bl	800a988 <vPortExitCritical>
}
 8009bee:	4620      	mov	r0, r4
 8009bf0:	bd38      	pop	{r3, r4, r5, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20001960 	.word	0x20001960
 8009bf8:	20001954 	.word	0x20001954
 8009bfc:	200019a0 	.word	0x200019a0
 8009c00:	20001968 	.word	0x20001968
 8009c04:	200018c8 	.word	0x200018c8
 8009c08:	200018bc 	.word	0x200018bc
 8009c0c:	200019e4 	.word	0x200019e4
 8009c10:	2000195c 	.word	0x2000195c

08009c14 <vTaskDelayUntil>:
	{
 8009c14:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 8009c16:	b158      	cbz	r0, 8009c30 <vTaskDelayUntil+0x1c>
 8009c18:	460c      	mov	r4, r1
 8009c1a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 8009c1c:	b989      	cbnz	r1, 8009c42 <vTaskDelayUntil+0x2e>
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	e7fe      	b.n	8009c2e <vTaskDelayUntil+0x1a>
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8009c40:	e7fe      	b.n	8009c40 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 8009c42:	4b1b      	ldr	r3, [pc, #108]	; (8009cb0 <vTaskDelayUntil+0x9c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	b143      	cbz	r3, 8009c5a <vTaskDelayUntil+0x46>
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	f383 8811 	msr	BASEPRI, r3
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	f3bf 8f4f 	dsb	sy
 8009c58:	e7fe      	b.n	8009c58 <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 8009c5a:	f7ff fec5 	bl	80099e8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b15      	ldr	r3, [pc, #84]	; (8009cb4 <vTaskDelayUntil+0xa0>)
 8009c60:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 8009c66:	4283      	cmp	r3, r0
 8009c68:	d909      	bls.n	8009c7e <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c6a:	42a3      	cmp	r3, r4
 8009c6c:	d801      	bhi.n	8009c72 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 8009c6e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009c70:	e00e      	b.n	8009c90 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009c72:	42a0      	cmp	r0, r4
 8009c74:	d301      	bcc.n	8009c7a <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 8009c76:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009c78:	e00a      	b.n	8009c90 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 8009c7a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009c7c:	e004      	b.n	8009c88 <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	d801      	bhi.n	8009c86 <vTaskDelayUntil+0x72>
 8009c82:	42a0      	cmp	r0, r4
 8009c84:	d212      	bcs.n	8009cac <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 8009c86:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009c88:	2100      	movs	r1, #0
 8009c8a:	1a20      	subs	r0, r4, r0
 8009c8c:	f7ff fd06 	bl	800969c <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 8009c90:	f7ff ff44 	bl	8009b1c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009c94:	b948      	cbnz	r0, 8009caa <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 8009c96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	f3bf 8f6f 	isb	sy
	}
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 8009cac:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 8009cae:	e7ef      	b.n	8009c90 <vTaskDelayUntil+0x7c>
 8009cb0:	20001960 	.word	0x20001960
 8009cb4:	200019e0 	.word	0x200019e0

08009cb8 <vTaskDelay>:
	{
 8009cb8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cba:	b1a8      	cbz	r0, 8009ce8 <vTaskDelay+0x30>
 8009cbc:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009cbe:	4b10      	ldr	r3, [pc, #64]	; (8009d00 <vTaskDelay+0x48>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	b143      	cbz	r3, 8009cd6 <vTaskDelay+0x1e>
 8009cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc8:	f383 8811 	msr	BASEPRI, r3
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	f3bf 8f4f 	dsb	sy
 8009cd4:	e7fe      	b.n	8009cd4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009cd6:	f7ff fe87 	bl	80099e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f7ff fcdd 	bl	800969c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009ce2:	f7ff ff1b 	bl	8009b1c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009ce6:	b948      	cbnz	r0, 8009cfc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8009ce8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
	}
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	20001960 	.word	0x20001960

08009d04 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d04:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <vTaskSwitchContext+0x8c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	b11b      	cbz	r3, 8009d12 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009d0a:	4b22      	ldr	r3, [pc, #136]	; (8009d94 <vTaskSwitchContext+0x90>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <vTaskSwitchContext+0x90>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009d18:	4b1f      	ldr	r3, [pc, #124]	; (8009d98 <vTaskSwitchContext+0x94>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009d1c:	fab3 f383 	clz	r3, r3
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	f1c3 031f 	rsb	r3, r3, #31
 8009d26:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009d2a:	008a      	lsls	r2, r1, #2
 8009d2c:	491b      	ldr	r1, [pc, #108]	; (8009d9c <vTaskSwitchContext+0x98>)
 8009d2e:	588a      	ldr	r2, [r1, r2]
 8009d30:	b942      	cbnz	r2, 8009d44 <vTaskSwitchContext+0x40>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	e7fe      	b.n	8009d42 <vTaskSwitchContext+0x3e>
 8009d44:	4915      	ldr	r1, [pc, #84]	; (8009d9c <vTaskSwitchContext+0x98>)
 8009d46:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009d4a:	0082      	lsls	r2, r0, #2
 8009d4c:	440a      	add	r2, r1
 8009d4e:	6850      	ldr	r0, [r2, #4]
 8009d50:	6840      	ldr	r0, [r0, #4]
 8009d52:	6050      	str	r0, [r2, #4]
 8009d54:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009d58:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8009d5c:	3208      	adds	r2, #8
 8009d5e:	4411      	add	r1, r2
 8009d60:	4288      	cmp	r0, r1
 8009d62:	d00d      	beq.n	8009d80 <vTaskSwitchContext+0x7c>
 8009d64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009d68:	009a      	lsls	r2, r3, #2
 8009d6a:	4b0c      	ldr	r3, [pc, #48]	; (8009d9c <vTaskSwitchContext+0x98>)
 8009d6c:	4413      	add	r3, r2
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <vTaskSwitchContext+0x9c>)
 8009d74:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	334c      	adds	r3, #76	; 0x4c
 8009d7a:	4a0a      	ldr	r2, [pc, #40]	; (8009da4 <vTaskSwitchContext+0xa0>)
 8009d7c:	6013      	str	r3, [r2, #0]
}
 8009d7e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009d80:	6840      	ldr	r0, [r0, #4]
 8009d82:	4662      	mov	r2, ip
 8009d84:	0091      	lsls	r1, r2, #2
 8009d86:	4a05      	ldr	r2, [pc, #20]	; (8009d9c <vTaskSwitchContext+0x98>)
 8009d88:	440a      	add	r2, r1
 8009d8a:	6050      	str	r0, [r2, #4]
 8009d8c:	e7ea      	b.n	8009d64 <vTaskSwitchContext+0x60>
 8009d8e:	bf00      	nop
 8009d90:	20001960 	.word	0x20001960
 8009d94:	200019e4 	.word	0x200019e4
 8009d98:	20001968 	.word	0x20001968
 8009d9c:	200018c8 	.word	0x200018c8
 8009da0:	200018bc 	.word	0x200018bc
 8009da4:	20000068 	.word	0x20000068

08009da8 <vTaskSuspend>:
	{
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8009dac:	f000 fdca 	bl	800a944 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009db0:	b364      	cbz	r4, 8009e0c <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009db2:	1d25      	adds	r5, r4, #4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7fe ff22 	bl	8008bfe <uxListRemove>
 8009dba:	b970      	cbnz	r0, 8009dda <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009dbc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009dbe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	492c      	ldr	r1, [pc, #176]	; (8009e78 <vTaskSuspend+0xd0>)
 8009dc6:	58cb      	ldr	r3, [r1, r3]
 8009dc8:	b93b      	cbnz	r3, 8009dda <vTaskSuspend+0x32>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	fa03 f202 	lsl.w	r2, r3, r2
 8009dd0:	492a      	ldr	r1, [pc, #168]	; (8009e7c <vTaskSuspend+0xd4>)
 8009dd2:	680b      	ldr	r3, [r1, #0]
 8009dd4:	ea23 0302 	bic.w	r3, r3, r2
 8009dd8:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ddc:	b11b      	cbz	r3, 8009de6 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dde:	f104 0018 	add.w	r0, r4, #24
 8009de2:	f7fe ff0c 	bl	8008bfe <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8009de6:	4629      	mov	r1, r5
 8009de8:	4825      	ldr	r0, [pc, #148]	; (8009e80 <vTaskSuspend+0xd8>)
 8009dea:	f7fe fee4 	bl	8008bb6 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009dee:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d00c      	beq.n	8009e12 <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8009df8:	f000 fdc6 	bl	800a988 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8009dfc:	4b21      	ldr	r3, [pc, #132]	; (8009e84 <vTaskSuspend+0xdc>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	b95b      	cbnz	r3, 8009e1a <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <vTaskSuspend+0xe0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	d00e      	beq.n	8009e28 <vTaskSuspend+0x80>
	}
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8009e0c:	4b1e      	ldr	r3, [pc, #120]	; (8009e88 <vTaskSuspend+0xe0>)
 8009e0e:	681c      	ldr	r4, [r3, #0]
 8009e10:	e7cf      	b.n	8009db2 <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e12:	2300      	movs	r3, #0
 8009e14:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
 8009e18:	e7ee      	b.n	8009df8 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 8009e1a:	f000 fd93 	bl	800a944 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8009e1e:	f7ff faef 	bl	8009400 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8009e22:	f000 fdb1 	bl	800a988 <vPortExitCritical>
 8009e26:	e7ec      	b.n	8009e02 <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8009e28:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <vTaskSuspend+0xdc>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	b1b3      	cbz	r3, 8009e5c <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 8009e2e:	4b17      	ldr	r3, [pc, #92]	; (8009e8c <vTaskSuspend+0xe4>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	b143      	cbz	r3, 8009e46 <vTaskSuspend+0x9e>
 8009e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e38:	f383 8811 	msr	BASEPRI, r3
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	f3bf 8f4f 	dsb	sy
 8009e44:	e7fe      	b.n	8009e44 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8009e46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	e7d6      	b.n	8009e0a <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009e5c:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <vTaskSuspend+0xd8>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <vTaskSuspend+0xe8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d103      	bne.n	8009e70 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <vTaskSuspend+0xe0>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e7cc      	b.n	8009e0a <vTaskSuspend+0x62>
					vTaskSwitchContext();
 8009e70:	f7ff ff48 	bl	8009d04 <vTaskSwitchContext>
	}
 8009e74:	e7c9      	b.n	8009e0a <vTaskSuspend+0x62>
 8009e76:	bf00      	nop
 8009e78:	200018c8 	.word	0x200018c8
 8009e7c:	20001968 	.word	0x20001968
 8009e80:	200019b8 	.word	0x200019b8
 8009e84:	200019b4 	.word	0x200019b4
 8009e88:	200018bc 	.word	0x200018bc
 8009e8c:	20001960 	.word	0x20001960
 8009e90:	20001954 	.word	0x20001954

08009e94 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009e94:	b158      	cbz	r0, 8009eae <vTaskPlaceOnEventList+0x1a>
{
 8009e96:	b510      	push	{r4, lr}
 8009e98:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e9a:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <vTaskPlaceOnEventList+0x2c>)
 8009e9c:	6811      	ldr	r1, [r2, #0]
 8009e9e:	3118      	adds	r1, #24
 8009ea0:	f7fe fe94 	bl	8008bcc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f7ff fbf8 	bl	800969c <prvAddCurrentTaskToDelayedList>
}
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009ebe:	e7fe      	b.n	8009ebe <vTaskPlaceOnEventList+0x2a>
 8009ec0:	200018bc 	.word	0x200018bc

08009ec4 <vTaskPlaceOnEventListRestricted>:
	{
 8009ec4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009ec6:	b170      	cbz	r0, 8009ee6 <vTaskPlaceOnEventListRestricted+0x22>
 8009ec8:	460d      	mov	r5, r1
 8009eca:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ecc:	4a0a      	ldr	r2, [pc, #40]	; (8009ef8 <vTaskPlaceOnEventListRestricted+0x34>)
 8009ece:	6811      	ldr	r1, [r2, #0]
 8009ed0:	3118      	adds	r1, #24
 8009ed2:	f7fe fe70 	bl	8008bb6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009ed6:	b10c      	cbz	r4, 8009edc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009ed8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7ff fbdc 	bl	800969c <prvAddCurrentTaskToDelayedList>
	}
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009ef6:	e7fe      	b.n	8009ef6 <vTaskPlaceOnEventListRestricted+0x32>
 8009ef8:	200018bc 	.word	0x200018bc

08009efc <xTaskRemoveFromEventList>:
{
 8009efc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009efe:	68c3      	ldr	r3, [r0, #12]
 8009f00:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009f02:	b324      	cbz	r4, 8009f4e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009f04:	f104 0518 	add.w	r5, r4, #24
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f7fe fe78 	bl	8008bfe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f0e:	4b18      	ldr	r3, [pc, #96]	; (8009f70 <xTaskRemoveFromEventList+0x74>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	bb2b      	cbnz	r3, 8009f60 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009f14:	1d25      	adds	r5, r4, #4
 8009f16:	4628      	mov	r0, r5
 8009f18:	f7fe fe71 	bl	8008bfe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009f1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4083      	lsls	r3, r0
 8009f22:	4a14      	ldr	r2, [pc, #80]	; (8009f74 <xTaskRemoveFromEventList+0x78>)
 8009f24:	6811      	ldr	r1, [r2, #0]
 8009f26:	430b      	orrs	r3, r1
 8009f28:	6013      	str	r3, [r2, #0]
 8009f2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009f2e:	4629      	mov	r1, r5
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <xTaskRemoveFromEventList+0x7c>)
 8009f32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f36:	f7fe fe3e 	bl	8008bb6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f3c:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <xTaskRemoveFromEventList+0x80>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d911      	bls.n	8009f6a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009f46:	2001      	movs	r0, #1
 8009f48:	4b0d      	ldr	r3, [pc, #52]	; (8009f80 <xTaskRemoveFromEventList+0x84>)
 8009f4a:	6018      	str	r0, [r3, #0]
}
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009f5e:	e7fe      	b.n	8009f5e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f60:	4629      	mov	r1, r5
 8009f62:	4808      	ldr	r0, [pc, #32]	; (8009f84 <xTaskRemoveFromEventList+0x88>)
 8009f64:	f7fe fe27 	bl	8008bb6 <vListInsertEnd>
 8009f68:	e7e7      	b.n	8009f3a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8009f6a:	2000      	movs	r0, #0
	return xReturn;
 8009f6c:	e7ee      	b.n	8009f4c <xTaskRemoveFromEventList+0x50>
 8009f6e:	bf00      	nop
 8009f70:	20001960 	.word	0x20001960
 8009f74:	20001968 	.word	0x20001968
 8009f78:	200018c8 	.word	0x200018c8
 8009f7c:	200018bc 	.word	0x200018bc
 8009f80:	200019e4 	.word	0x200019e4
 8009f84:	200019a0 	.word	0x200019a0

08009f88 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f88:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <vTaskInternalSetTimeOutState+0x10>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f8e:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <vTaskInternalSetTimeOutState+0x14>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6043      	str	r3, [r0, #4]
}
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	2000199c 	.word	0x2000199c
 8009f9c:	200019e0 	.word	0x200019e0

08009fa0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8009fa0:	b1d8      	cbz	r0, 8009fda <xTaskCheckForTimeOut+0x3a>
{
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	460c      	mov	r4, r1
 8009fa6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009fa8:	b301      	cbz	r1, 8009fec <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8009faa:	f000 fccb 	bl	800a944 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009fae:	4b1b      	ldr	r3, [pc, #108]	; (800a01c <xTaskCheckForTimeOut+0x7c>)
 8009fb0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fb2:	686b      	ldr	r3, [r5, #4]
 8009fb4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009fb6:	6822      	ldr	r2, [r4, #0]
 8009fb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009fbc:	d027      	beq.n	800a00e <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fbe:	4e18      	ldr	r6, [pc, #96]	; (800a020 <xTaskCheckForTimeOut+0x80>)
 8009fc0:	6836      	ldr	r6, [r6, #0]
 8009fc2:	f8d5 c000 	ldr.w	ip, [r5]
 8009fc6:	45b4      	cmp	ip, r6
 8009fc8:	d001      	beq.n	8009fce <xTaskCheckForTimeOut+0x2e>
 8009fca:	428b      	cmp	r3, r1
 8009fcc:	d924      	bls.n	800a018 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fce:	4282      	cmp	r2, r0
 8009fd0:	d815      	bhi.n	8009ffe <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009fd6:	2401      	movs	r4, #1
 8009fd8:	e01a      	b.n	800a010 <xTaskCheckForTimeOut+0x70>
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009fea:	e7fe      	b.n	8009fea <xTaskCheckForTimeOut+0x4a>
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009ffc:	e7fe      	b.n	8009ffc <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 8009ffe:	1a5b      	subs	r3, r3, r1
 800a000:	4413      	add	r3, r2
 800a002:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a004:	4628      	mov	r0, r5
 800a006:	f7ff ffbf 	bl	8009f88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a00a:	2400      	movs	r4, #0
 800a00c:	e000      	b.n	800a010 <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800a00e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a010:	f000 fcba 	bl	800a988 <vPortExitCritical>
}
 800a014:	4620      	mov	r0, r4
 800a016:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a018:	2401      	movs	r4, #1
 800a01a:	e7f9      	b.n	800a010 <xTaskCheckForTimeOut+0x70>
 800a01c:	200019e0 	.word	0x200019e0
 800a020:	2000199c 	.word	0x2000199c

0800a024 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a024:	4b01      	ldr	r3, [pc, #4]	; (800a02c <vTaskMissedYield+0x8>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	4770      	bx	lr
 800a02c:	200019e4 	.word	0x200019e4

0800a030 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a030:	4b05      	ldr	r3, [pc, #20]	; (800a048 <xTaskGetSchedulerState+0x18>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	b133      	cbz	r3, 800a044 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <xTaskGetSchedulerState+0x1c>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	b10b      	cbz	r3, 800a040 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a03c:	2000      	movs	r0, #0
	}
 800a03e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a040:	2002      	movs	r0, #2
 800a042:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a044:	2001      	movs	r0, #1
 800a046:	4770      	bx	lr
 800a048:	200019b4 	.word	0x200019b4
 800a04c:	20001960 	.word	0x20001960

0800a050 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a050:	2800      	cmp	r0, #0
 800a052:	d04b      	beq.n	800a0ec <xTaskPriorityDisinherit+0x9c>
	{
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a058:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <xTaskPriorityDisinherit+0xa4>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4283      	cmp	r3, r0
 800a05e:	d008      	beq.n	800a072 <xTaskPriorityDisinherit+0x22>
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	e7fe      	b.n	800a070 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a072:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800a074:	b943      	cbnz	r3, 800a088 <xTaskPriorityDisinherit+0x38>
 800a076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	e7fe      	b.n	800a086 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a088:	3b01      	subs	r3, #1
 800a08a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a08c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a08e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a090:	4291      	cmp	r1, r2
 800a092:	d02d      	beq.n	800a0f0 <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a094:	b10b      	cbz	r3, 800a09a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a096:	2000      	movs	r0, #0
	}
 800a098:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a09a:	1d05      	adds	r5, r0, #4
 800a09c:	4628      	mov	r0, r5
 800a09e:	f7fe fdae 	bl	8008bfe <uxListRemove>
 800a0a2:	b968      	cbnz	r0, 800a0c0 <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a0a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a0aa:	0092      	lsls	r2, r2, #2
 800a0ac:	4912      	ldr	r1, [pc, #72]	; (800a0f8 <xTaskPriorityDisinherit+0xa8>)
 800a0ae:	588a      	ldr	r2, [r1, r2]
 800a0b0:	b932      	cbnz	r2, 800a0c0 <xTaskPriorityDisinherit+0x70>
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	409a      	lsls	r2, r3
 800a0b6:	4911      	ldr	r1, [pc, #68]	; (800a0fc <xTaskPriorityDisinherit+0xac>)
 800a0b8:	680b      	ldr	r3, [r1, #0]
 800a0ba:	ea23 0302 	bic.w	r3, r3, r2
 800a0be:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0c0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a0c2:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c4:	f1c0 0307 	rsb	r3, r0, #7
 800a0c8:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0ca:	2401      	movs	r4, #1
 800a0cc:	fa04 f300 	lsl.w	r3, r4, r0
 800a0d0:	4a0a      	ldr	r2, [pc, #40]	; (800a0fc <xTaskPriorityDisinherit+0xac>)
 800a0d2:	6811      	ldr	r1, [r2, #0]
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6013      	str	r3, [r2, #0]
 800a0d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a0dc:	4629      	mov	r1, r5
 800a0de:	4b06      	ldr	r3, [pc, #24]	; (800a0f8 <xTaskPriorityDisinherit+0xa8>)
 800a0e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a0e4:	f7fe fd67 	bl	8008bb6 <vListInsertEnd>
					xReturn = pdTRUE;
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	e7d5      	b.n	800a098 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a0ec:	2000      	movs	r0, #0
	}
 800a0ee:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	e7d1      	b.n	800a098 <xTaskPriorityDisinherit+0x48>
 800a0f4:	200018bc 	.word	0x200018bc
 800a0f8:	200018c8 	.word	0x200018c8
 800a0fc:	20001968 	.word	0x20001968

0800a100 <xTaskNotifyWait>:
	{
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	4614      	mov	r4, r2
 800a108:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800a10a:	f000 fc1b 	bl	800a944 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a10e:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f893 209c 	ldrb.w	r2, [r3, #156]	; 0x9c
 800a116:	b2d2      	uxtb	r2, r2
 800a118:	2a02      	cmp	r2, #2
 800a11a:	d00c      	beq.n	800a136 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a11c:	4a20      	ldr	r2, [pc, #128]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a11e:	6811      	ldr	r1, [r2, #0]
 800a120:	f8d1 3098 	ldr.w	r3, [r1, #152]	; 0x98
 800a124:	ea23 0306 	bic.w	r3, r3, r6
 800a128:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a12c:	6813      	ldr	r3, [r2, #0]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 800a134:	b9d5      	cbnz	r5, 800a16c <xTaskNotifyWait+0x6c>
		taskEXIT_CRITICAL();
 800a136:	f000 fc27 	bl	800a988 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a13a:	f000 fc03 	bl	800a944 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a13e:	b124      	cbz	r4, 800a14a <xTaskNotifyWait+0x4a>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a148:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a14a:	4b15      	ldr	r3, [pc, #84]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b02      	cmp	r3, #2
 800a156:	d018      	beq.n	800a18a <xTaskNotifyWait+0x8a>
				xReturn = pdFALSE;
 800a158:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a15a:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 800a164:	f000 fc10 	bl	800a988 <vPortExitCritical>
	}
 800a168:	4620      	mov	r0, r4
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a16c:	4611      	mov	r1, r2
 800a16e:	4628      	mov	r0, r5
 800a170:	f7ff fa94 	bl	800969c <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800a174:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	e7d5      	b.n	800a136 <xTaskNotifyWait+0x36>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a18a:	4b05      	ldr	r3, [pc, #20]	; (800a1a0 <xTaskNotifyWait+0xa0>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800a192:	ea23 0307 	bic.w	r3, r3, r7
 800a196:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				xReturn = pdTRUE;
 800a19a:	2401      	movs	r4, #1
 800a19c:	e7dd      	b.n	800a15a <xTaskNotifyWait+0x5a>
 800a19e:	bf00      	nop
 800a1a0:	200018bc 	.word	0x200018bc

0800a1a4 <xTaskGenericNotify>:
	{
 800a1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800a1a6:	b1b0      	cbz	r0, 800a1d6 <xTaskGenericNotify+0x32>
 800a1a8:	460e      	mov	r6, r1
 800a1aa:	4617      	mov	r7, r2
 800a1ac:	461c      	mov	r4, r3
 800a1ae:	4605      	mov	r5, r0
		taskENTER_CRITICAL();
 800a1b0:	f000 fbc8 	bl	800a944 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800a1b4:	b114      	cbz	r4, 800a1bc <xTaskGenericNotify+0x18>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a1b6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a1ba:	6023      	str	r3, [r4, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a1bc:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 800a1c0:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
			switch( eAction )
 800a1c8:	1e7a      	subs	r2, r7, #1
 800a1ca:	2a03      	cmp	r2, #3
 800a1cc:	d829      	bhi.n	800a222 <xTaskGenericNotify+0x7e>
 800a1ce:	e8df f002 	tbb	[pc, r2]
 800a1d2:	170b      	.short	0x170b
 800a1d4:	221e      	.short	0x221e
 800a1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a1e6:	e7fe      	b.n	800a1e6 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue |= ulValue;
 800a1e8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a1ec:	4332      	orrs	r2, r6
 800a1ee:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a1f2:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d018      	beq.n	800a22a <xTaskGenericNotify+0x86>
		taskEXIT_CRITICAL();
 800a1f8:	f000 fbc6 	bl	800a988 <vPortExitCritical>
	}
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800a200:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a204:	3201      	adds	r2, #1
 800a206:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a20a:	2401      	movs	r4, #1
					break;
 800a20c:	e7f2      	b.n	800a1f4 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue = ulValue;
 800a20e:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a212:	2401      	movs	r4, #1
					break;
 800a214:	e7ee      	b.n	800a1f4 <xTaskGenericNotify+0x50>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a216:	2b02      	cmp	r3, #2
 800a218:	d005      	beq.n	800a226 <xTaskGenericNotify+0x82>
						pxTCB->ulNotifiedValue = ulValue;
 800a21a:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a21e:	2401      	movs	r4, #1
 800a220:	e7e8      	b.n	800a1f4 <xTaskGenericNotify+0x50>
			switch( eAction )
 800a222:	2401      	movs	r4, #1
 800a224:	e7e6      	b.n	800a1f4 <xTaskGenericNotify+0x50>
						xReturn = pdFAIL;
 800a226:	2400      	movs	r4, #0
 800a228:	e7e4      	b.n	800a1f4 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a22a:	1d2e      	adds	r6, r5, #4
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7fe fce6 	bl	8008bfe <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a232:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a234:	2301      	movs	r3, #1
 800a236:	4083      	lsls	r3, r0
 800a238:	4a13      	ldr	r2, [pc, #76]	; (800a288 <xTaskGenericNotify+0xe4>)
 800a23a:	6811      	ldr	r1, [r2, #0]
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a244:	4631      	mov	r1, r6
 800a246:	4b11      	ldr	r3, [pc, #68]	; (800a28c <xTaskGenericNotify+0xe8>)
 800a248:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a24c:	f7fe fcb3 	bl	8008bb6 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a250:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a252:	b143      	cbz	r3, 800a266 <xTaskGenericNotify+0xc2>
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	e7fe      	b.n	800a264 <xTaskGenericNotify+0xc0>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a266:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <xTaskGenericNotify+0xec>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d9c2      	bls.n	800a1f8 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 800a272:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	f3bf 8f6f 	isb	sy
 800a286:	e7b7      	b.n	800a1f8 <xTaskGenericNotify+0x54>
 800a288:	20001968 	.word	0x20001968
 800a28c:	200018c8 	.word	0x200018c8
 800a290:	200018bc 	.word	0x200018bc

0800a294 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800a294:	b310      	cbz	r0, 800a2dc <xTaskGenericNotifyFromISR+0x48>
	{
 800a296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	460e      	mov	r6, r1
 800a29c:	4617      	mov	r7, r2
 800a29e:	461c      	mov	r4, r3
 800a2a0:	4605      	mov	r5, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2a2:	f000 fc39 	bl	800ab18 <vPortValidateInterruptPriority>
	__asm volatile
 800a2a6:	f3ef 8811 	mrs	r8, BASEPRI
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800a2ba:	b114      	cbz	r4, 800a2c2 <xTaskGenericNotifyFromISR+0x2e>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a2bc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a2c0:	6023      	str	r3, [r4, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a2c2:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 800a2c6:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
			switch( eAction )
 800a2ce:	1e7a      	subs	r2, r7, #1
 800a2d0:	2a03      	cmp	r2, #3
 800a2d2:	d82a      	bhi.n	800a32a <xTaskGenericNotifyFromISR+0x96>
 800a2d4:	e8df f002 	tbb	[pc, r2]
 800a2d8:	231f180b 	.word	0x231f180b
	__asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800a2ec:	e7fe      	b.n	800a2ec <xTaskGenericNotifyFromISR+0x58>
					pxTCB->ulNotifiedValue |= ulValue;
 800a2ee:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a2f2:	4332      	orrs	r2, r6
 800a2f4:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a2f8:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d019      	beq.n	800a332 <xTaskGenericNotifyFromISR+0x9e>
	__asm volatile
 800a2fe:	f388 8811 	msr	BASEPRI, r8
	}
 800a302:	4620      	mov	r0, r4
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					( pxTCB->ulNotifiedValue )++;
 800a308:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 800a30c:	3201      	adds	r2, #1
 800a30e:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a312:	2401      	movs	r4, #1
					break;
 800a314:	e7f1      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x66>
					pxTCB->ulNotifiedValue = ulValue;
 800a316:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a31a:	2401      	movs	r4, #1
					break;
 800a31c:	e7ed      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d005      	beq.n	800a32e <xTaskGenericNotifyFromISR+0x9a>
						pxTCB->ulNotifiedValue = ulValue;
 800a322:	f8c5 6098 	str.w	r6, [r5, #152]	; 0x98
	BaseType_t xReturn = pdPASS;
 800a326:	2401      	movs	r4, #1
 800a328:	e7e7      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x66>
			switch( eAction )
 800a32a:	2401      	movs	r4, #1
 800a32c:	e7e5      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x66>
						xReturn = pdFAIL;
 800a32e:	2400      	movs	r4, #0
 800a330:	e7e3      	b.n	800a2fa <xTaskGenericNotifyFromISR+0x66>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a332:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a334:	b143      	cbz	r3, 800a348 <xTaskGenericNotifyFromISR+0xb4>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	e7fe      	b.n	800a346 <xTaskGenericNotifyFromISR+0xb2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a348:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <xTaskGenericNotifyFromISR+0x10c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	b9f3      	cbnz	r3, 800a38c <xTaskGenericNotifyFromISR+0xf8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a34e:	1d2e      	adds	r6, r5, #4
 800a350:	4630      	mov	r0, r6
 800a352:	f7fe fc54 	bl	8008bfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a356:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a358:	2301      	movs	r3, #1
 800a35a:	4083      	lsls	r3, r0
 800a35c:	4a11      	ldr	r2, [pc, #68]	; (800a3a4 <xTaskGenericNotifyFromISR+0x110>)
 800a35e:	6811      	ldr	r1, [r2, #0]
 800a360:	430b      	orrs	r3, r1
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a368:	4631      	mov	r1, r6
 800a36a:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <xTaskGenericNotifyFromISR+0x114>)
 800a36c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a370:	f7fe fc21 	bl	8008bb6 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a374:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800a376:	4b0d      	ldr	r3, [pc, #52]	; (800a3ac <xTaskGenericNotifyFromISR+0x118>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d9be      	bls.n	800a2fe <xTaskGenericNotifyFromISR+0x6a>
					if( pxHigherPriorityTaskWoken != NULL )
 800a380:	9b06      	ldr	r3, [sp, #24]
 800a382:	b14b      	cbz	r3, 800a398 <xTaskGenericNotifyFromISR+0x104>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a384:	2301      	movs	r3, #1
 800a386:	9a06      	ldr	r2, [sp, #24]
 800a388:	6013      	str	r3, [r2, #0]
 800a38a:	e7b8      	b.n	800a2fe <xTaskGenericNotifyFromISR+0x6a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a38c:	f105 0118 	add.w	r1, r5, #24
 800a390:	4807      	ldr	r0, [pc, #28]	; (800a3b0 <xTaskGenericNotifyFromISR+0x11c>)
 800a392:	f7fe fc10 	bl	8008bb6 <vListInsertEnd>
 800a396:	e7ed      	b.n	800a374 <xTaskGenericNotifyFromISR+0xe0>
						xYieldPending = pdTRUE;
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <xTaskGenericNotifyFromISR+0x120>)
 800a39a:	2201      	movs	r2, #1
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e7ae      	b.n	800a2fe <xTaskGenericNotifyFromISR+0x6a>
 800a3a0:	20001960 	.word	0x20001960
 800a3a4:	20001968 	.word	0x20001968
 800a3a8:	200018c8 	.word	0x200018c8
 800a3ac:	200018bc 	.word	0x200018bc
 800a3b0:	200019a0 	.word	0x200019a0
 800a3b4:	200019e4 	.word	0x200019e4

0800a3b8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <prvGetNextExpireTime+0x1c>)
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	6813      	ldr	r3, [r2, #0]
 800a3be:	fab3 f383 	clz	r3, r3
 800a3c2:	095b      	lsrs	r3, r3, #5
 800a3c4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a3c6:	b913      	cbnz	r3, 800a3ce <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3c8:	68d3      	ldr	r3, [r2, #12]
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a3ce:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	200019e8 	.word	0x200019e8

0800a3d8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3d8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3da:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3dc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3de:	4291      	cmp	r1, r2
 800a3e0:	d80c      	bhi.n	800a3fc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	6983      	ldr	r3, [r0, #24]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d301      	bcc.n	800a3ee <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a3ea:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a3ec:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3ee:	1d01      	adds	r1, r0, #4
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <prvInsertTimerInActiveList+0x40>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	f7fe fbea 	bl	8008bcc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	e7f7      	b.n	800a3ec <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d201      	bcs.n	800a404 <prvInsertTimerInActiveList+0x2c>
 800a400:	4299      	cmp	r1, r3
 800a402:	d206      	bcs.n	800a412 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a404:	1d01      	adds	r1, r0, #4
 800a406:	4b05      	ldr	r3, [pc, #20]	; (800a41c <prvInsertTimerInActiveList+0x44>)
 800a408:	6818      	ldr	r0, [r3, #0]
 800a40a:	f7fe fbdf 	bl	8008bcc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a40e:	2000      	movs	r0, #0
 800a410:	e7ec      	b.n	800a3ec <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a412:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a414:	e7ea      	b.n	800a3ec <prvInsertTimerInActiveList+0x14>
 800a416:	bf00      	nop
 800a418:	200019ec 	.word	0x200019ec
 800a41c:	200019e8 	.word	0x200019e8

0800a420 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a420:	b530      	push	{r4, r5, lr}
 800a422:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a424:	f000 fa8e 	bl	800a944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a428:	4b11      	ldr	r3, [pc, #68]	; (800a470 <prvCheckForValidListAndQueue+0x50>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	b11b      	cbz	r3, 800a436 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a42e:	f000 faab 	bl	800a988 <vPortExitCritical>
}
 800a432:	b003      	add	sp, #12
 800a434:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a436:	4d0f      	ldr	r5, [pc, #60]	; (800a474 <prvCheckForValidListAndQueue+0x54>)
 800a438:	4628      	mov	r0, r5
 800a43a:	f7fe fbae 	bl	8008b9a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a43e:	4c0e      	ldr	r4, [pc, #56]	; (800a478 <prvCheckForValidListAndQueue+0x58>)
 800a440:	4620      	mov	r0, r4
 800a442:	f7fe fbaa 	bl	8008b9a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a446:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <prvCheckForValidListAndQueue+0x5c>)
 800a448:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a44a:	4b0d      	ldr	r3, [pc, #52]	; (800a480 <prvCheckForValidListAndQueue+0x60>)
 800a44c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a44e:	2300      	movs	r3, #0
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <prvCheckForValidListAndQueue+0x64>)
 800a454:	4a0c      	ldr	r2, [pc, #48]	; (800a488 <prvCheckForValidListAndQueue+0x68>)
 800a456:	210c      	movs	r1, #12
 800a458:	200a      	movs	r0, #10
 800a45a:	f7fe fcd3 	bl	8008e04 <xQueueGenericCreateStatic>
 800a45e:	4b04      	ldr	r3, [pc, #16]	; (800a470 <prvCheckForValidListAndQueue+0x50>)
 800a460:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a462:	2800      	cmp	r0, #0
 800a464:	d0e3      	beq.n	800a42e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a466:	4909      	ldr	r1, [pc, #36]	; (800a48c <prvCheckForValidListAndQueue+0x6c>)
 800a468:	f7fe ff6c 	bl	8009344 <vQueueAddToRegistry>
 800a46c:	e7df      	b.n	800a42e <prvCheckForValidListAndQueue+0xe>
 800a46e:	bf00      	nop
 800a470:	20001adc 	.word	0x20001adc
 800a474:	20001a68 	.word	0x20001a68
 800a478:	20001a7c 	.word	0x20001a7c
 800a47c:	200019e8 	.word	0x200019e8
 800a480:	200019ec 	.word	0x200019ec
 800a484:	20001a94 	.word	0x20001a94
 800a488:	200019f0 	.word	0x200019f0
 800a48c:	0800c5fc 	.word	0x0800c5fc

0800a490 <prvInitialiseNewTimer>:
{
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	9f07      	ldr	r7, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a496:	b941      	cbnz	r1, 800a4aa <prvInitialiseNewTimer+0x1a>
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	e7fe      	b.n	800a4a8 <prvInitialiseNewTimer+0x18>
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	461c      	mov	r4, r3
 800a4b0:	4688      	mov	r8, r1
	if( pxNewTimer != NULL )
 800a4b2:	b15f      	cbz	r7, 800a4cc <prvInitialiseNewTimer+0x3c>
		prvCheckForValidListAndQueue();
 800a4b4:	f7ff ffb4 	bl	800a420 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
 800a4b8:	603e      	str	r6, [r7, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a4ba:	f8c7 8018 	str.w	r8, [r7, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800a4be:	61fd      	str	r5, [r7, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800a4c0:	623c      	str	r4, [r7, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a4c2:	9b06      	ldr	r3, [sp, #24]
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a4c6:	1d38      	adds	r0, r7, #4
 800a4c8:	f7fe fb72 	bl	8008bb0 <vListInitialiseItem>
}
 800a4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4d0 <xTimerCreateTimerTask>:
{
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a4d4:	f7ff ffa4 	bl	800a420 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a4d8:	4b12      	ldr	r3, [pc, #72]	; (800a524 <xTimerCreateTimerTask+0x54>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	b1cb      	cbz	r3, 800a512 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4de:	2400      	movs	r4, #0
 800a4e0:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4e2:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4e4:	aa07      	add	r2, sp, #28
 800a4e6:	a906      	add	r1, sp, #24
 800a4e8:	a805      	add	r0, sp, #20
 800a4ea:	f7f7 ff4b 	bl	8002384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4ee:	9b05      	ldr	r3, [sp, #20]
 800a4f0:	9302      	str	r3, [sp, #8]
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4623      	mov	r3, r4
 800a4fc:	9a07      	ldr	r2, [sp, #28]
 800a4fe:	490a      	ldr	r1, [pc, #40]	; (800a528 <xTimerCreateTimerTask+0x58>)
 800a500:	480a      	ldr	r0, [pc, #40]	; (800a52c <xTimerCreateTimerTask+0x5c>)
 800a502:	f7ff f917 	bl	8009734 <xTaskCreateStatic>
 800a506:	4b0a      	ldr	r3, [pc, #40]	; (800a530 <xTimerCreateTimerTask+0x60>)
 800a508:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800a50a:	b110      	cbz	r0, 800a512 <xTimerCreateTimerTask+0x42>
}
 800a50c:	2001      	movs	r0, #1
 800a50e:	b008      	add	sp, #32
 800a510:	bd10      	pop	{r4, pc}
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a522:	e7fe      	b.n	800a522 <xTimerCreateTimerTask+0x52>
 800a524:	20001adc 	.word	0x20001adc
 800a528:	0800c604 	.word	0x0800c604
 800a52c:	0800a885 	.word	0x0800a885
 800a530:	20001ae0 	.word	0x20001ae0

0800a534 <xTimerCreate>:
	{
 800a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	4604      	mov	r4, r0
 800a53c:	4688      	mov	r8, r1
 800a53e:	4615      	mov	r5, r2
 800a540:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800a542:	202c      	movs	r0, #44	; 0x2c
 800a544:	f000 fb78 	bl	800ac38 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800a548:	4607      	mov	r7, r0
 800a54a:	b158      	cbz	r0, 800a564 <xTimerCreate+0x30>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a54c:	9001      	str	r0, [sp, #4]
 800a54e:	9b08      	ldr	r3, [sp, #32]
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	4633      	mov	r3, r6
 800a554:	462a      	mov	r2, r5
 800a556:	4641      	mov	r1, r8
 800a558:	4620      	mov	r0, r4
 800a55a:	f7ff ff99 	bl	800a490 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	}
 800a564:	4638      	mov	r0, r7
 800a566:	b002      	add	sp, #8
 800a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a56c <xTimerCreateStatic>:
	{
 800a56c:	b510      	push	{r4, lr}
 800a56e:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a570:	242c      	movs	r4, #44	; 0x2c
 800a572:	9403      	str	r4, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a574:	9c03      	ldr	r4, [sp, #12]
 800a576:	2c2c      	cmp	r4, #44	; 0x2c
 800a578:	d008      	beq.n	800a58c <xTimerCreateStatic+0x20>
 800a57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a57e:	f383 8811 	msr	BASEPRI, r3
 800a582:	f3bf 8f6f 	isb	sy
 800a586:	f3bf 8f4f 	dsb	sy
 800a58a:	e7fe      	b.n	800a58a <xTimerCreateStatic+0x1e>
		configASSERT( pxTimerBuffer );
 800a58c:	9c07      	ldr	r4, [sp, #28]
 800a58e:	b164      	cbz	r4, 800a5aa <xTimerCreateStatic+0x3e>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a590:	9c07      	ldr	r4, [sp, #28]
 800a592:	9401      	str	r4, [sp, #4]
 800a594:	9c06      	ldr	r4, [sp, #24]
 800a596:	9400      	str	r4, [sp, #0]
 800a598:	f7ff ff7a 	bl	800a490 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800a59c:	2301      	movs	r3, #1
 800a59e:	9a07      	ldr	r2, [sp, #28]
 800a5a0:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	}
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	b004      	add	sp, #16
 800a5a8:	bd10      	pop	{r4, pc}
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTimerBuffer );
 800a5ba:	e7fe      	b.n	800a5ba <xTimerCreateStatic+0x4e>

0800a5bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a5bc:	b1b8      	cbz	r0, 800a5ee <xTimerGenericCommand+0x32>
 800a5be:	469c      	mov	ip, r3
 800a5c0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a5c2:	4818      	ldr	r0, [pc, #96]	; (800a624 <xTimerGenericCommand+0x68>)
 800a5c4:	6800      	ldr	r0, [r0, #0]
 800a5c6:	b358      	cbz	r0, 800a620 <xTimerGenericCommand+0x64>
{
 800a5c8:	b500      	push	{lr}
 800a5ca:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800a5cc:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5ce:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a5d0:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5d2:	2905      	cmp	r1, #5
 800a5d4:	dc1c      	bgt.n	800a610 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5d6:	f7ff fd2b 	bl	800a030 <xTaskGetSchedulerState>
 800a5da:	2802      	cmp	r0, #2
 800a5dc:	d010      	beq.n	800a600 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5de:	2300      	movs	r3, #0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	a901      	add	r1, sp, #4
 800a5e4:	480f      	ldr	r0, [pc, #60]	; (800a624 <xTimerGenericCommand+0x68>)
 800a5e6:	6800      	ldr	r0, [r0, #0]
 800a5e8:	f7fe fc7c 	bl	8008ee4 <xQueueGenericSend>
 800a5ec:	e015      	b.n	800a61a <xTimerGenericCommand+0x5e>
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a5fe:	e7fe      	b.n	800a5fe <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a600:	2300      	movs	r3, #0
 800a602:	9a06      	ldr	r2, [sp, #24]
 800a604:	a901      	add	r1, sp, #4
 800a606:	4807      	ldr	r0, [pc, #28]	; (800a624 <xTimerGenericCommand+0x68>)
 800a608:	6800      	ldr	r0, [r0, #0]
 800a60a:	f7fe fc6b 	bl	8008ee4 <xQueueGenericSend>
 800a60e:	e004      	b.n	800a61a <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a610:	2300      	movs	r3, #0
 800a612:	4662      	mov	r2, ip
 800a614:	a901      	add	r1, sp, #4
 800a616:	f7fe fd29 	bl	800906c <xQueueGenericSendFromISR>
}
 800a61a:	b005      	add	sp, #20
 800a61c:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800a620:	2000      	movs	r0, #0
}
 800a622:	4770      	bx	lr
 800a624:	20001adc 	.word	0x20001adc

0800a628 <prvSwitchTimerLists>:
{
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a62c:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <prvSwitchTimerLists+0x70>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	b352      	cbz	r2, 800a68a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a638:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a63a:	1d25      	adds	r5, r4, #4
 800a63c:	4628      	mov	r0, r5
 800a63e:	f7fe fade 	bl	8008bfe <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a642:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a644:	4620      	mov	r0, r4
 800a646:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a648:	69e3      	ldr	r3, [r4, #28]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d1ee      	bne.n	800a62c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a64e:	69a3      	ldr	r3, [r4, #24]
 800a650:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a652:	429e      	cmp	r6, r3
 800a654:	d207      	bcs.n	800a666 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a656:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a658:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a65a:	4629      	mov	r1, r5
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <prvSwitchTimerLists+0x70>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	f7fe fab4 	bl	8008bcc <vListInsert>
 800a664:	e7e2      	b.n	800a62c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a666:	2100      	movs	r1, #0
 800a668:	9100      	str	r1, [sp, #0]
 800a66a:	460b      	mov	r3, r1
 800a66c:	4632      	mov	r2, r6
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff ffa4 	bl	800a5bc <xTimerGenericCommand>
				configASSERT( xResult );
 800a674:	2800      	cmp	r0, #0
 800a676:	d1d9      	bne.n	800a62c <prvSwitchTimerLists+0x4>
 800a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67c:	f383 8811 	msr	BASEPRI, r3
 800a680:	f3bf 8f6f 	isb	sy
 800a684:	f3bf 8f4f 	dsb	sy
 800a688:	e7fe      	b.n	800a688 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800a68a:	4a04      	ldr	r2, [pc, #16]	; (800a69c <prvSwitchTimerLists+0x74>)
 800a68c:	6810      	ldr	r0, [r2, #0]
 800a68e:	4902      	ldr	r1, [pc, #8]	; (800a698 <prvSwitchTimerLists+0x70>)
 800a690:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a692:	6013      	str	r3, [r2, #0]
}
 800a694:	b002      	add	sp, #8
 800a696:	bd70      	pop	{r4, r5, r6, pc}
 800a698:	200019e8 	.word	0x200019e8
 800a69c:	200019ec 	.word	0x200019ec

0800a6a0 <prvSampleTimeNow>:
{
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a6a4:	f7ff f9a8 	bl	80099f8 <xTaskGetTickCount>
 800a6a8:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a6aa:	4b07      	ldr	r3, [pc, #28]	; (800a6c8 <prvSampleTimeNow+0x28>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4283      	cmp	r3, r0
 800a6b0:	d805      	bhi.n	800a6be <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a6b6:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <prvSampleTimeNow+0x28>)
 800a6b8:	601c      	str	r4, [r3, #0]
}
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a6be:	f7ff ffb3 	bl	800a628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	602b      	str	r3, [r5, #0]
 800a6c6:	e7f6      	b.n	800a6b6 <prvSampleTimeNow+0x16>
 800a6c8:	20001a90 	.word	0x20001a90

0800a6cc <prvProcessExpiredTimer>:
{
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6d4:	4914      	ldr	r1, [pc, #80]	; (800a728 <prvProcessExpiredTimer+0x5c>)
 800a6d6:	6809      	ldr	r1, [r1, #0]
 800a6d8:	68c9      	ldr	r1, [r1, #12]
 800a6da:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6dc:	1d20      	adds	r0, r4, #4
 800a6de:	f7fe fa8e 	bl	8008bfe <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a6e2:	69e1      	ldr	r1, [r4, #28]
 800a6e4:	2901      	cmp	r1, #1
 800a6e6:	d004      	beq.n	800a6f2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	4798      	blx	r3
}
 800a6ee:	b002      	add	sp, #8
 800a6f0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6f2:	69a1      	ldr	r1, [r4, #24]
 800a6f4:	4633      	mov	r3, r6
 800a6f6:	462a      	mov	r2, r5
 800a6f8:	4431      	add	r1, r6
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f7ff fe6c 	bl	800a3d8 <prvInsertTimerInActiveList>
 800a700:	2800      	cmp	r0, #0
 800a702:	d0f1      	beq.n	800a6e8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a704:	2100      	movs	r1, #0
 800a706:	9100      	str	r1, [sp, #0]
 800a708:	460b      	mov	r3, r1
 800a70a:	4632      	mov	r2, r6
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff ff55 	bl	800a5bc <xTimerGenericCommand>
			configASSERT( xResult );
 800a712:	2800      	cmp	r0, #0
 800a714:	d1e8      	bne.n	800a6e8 <prvProcessExpiredTimer+0x1c>
 800a716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a71a:	f383 8811 	msr	BASEPRI, r3
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	e7fe      	b.n	800a726 <prvProcessExpiredTimer+0x5a>
 800a728:	200019e8 	.word	0x200019e8

0800a72c <prvProcessTimerOrBlockTask>:
{
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	4606      	mov	r6, r0
 800a732:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a734:	f7ff f958 	bl	80099e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a738:	a801      	add	r0, sp, #4
 800a73a:	f7ff ffb1 	bl	800a6a0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a73e:	9b01      	ldr	r3, [sp, #4]
 800a740:	bb2b      	cbnz	r3, 800a78e <prvProcessTimerOrBlockTask+0x62>
 800a742:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a744:	b90c      	cbnz	r4, 800a74a <prvProcessTimerOrBlockTask+0x1e>
 800a746:	42b0      	cmp	r0, r6
 800a748:	d21a      	bcs.n	800a780 <prvProcessTimerOrBlockTask+0x54>
				if( xListWasEmpty != pdFALSE )
 800a74a:	b12c      	cbz	r4, 800a758 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a74c:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvProcessTimerOrBlockTask+0x6c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681c      	ldr	r4, [r3, #0]
 800a752:	fab4 f484 	clz	r4, r4
 800a756:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a758:	4622      	mov	r2, r4
 800a75a:	1b71      	subs	r1, r6, r5
 800a75c:	4b0f      	ldr	r3, [pc, #60]	; (800a79c <prvProcessTimerOrBlockTask+0x70>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	f7fe fe04 	bl	800936c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a764:	f7ff f9da 	bl	8009b1c <xTaskResumeAll>
 800a768:	b998      	cbnz	r0, 800a792 <prvProcessTimerOrBlockTask+0x66>
					portYIELD_WITHIN_API();
 800a76a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	e008      	b.n	800a792 <prvProcessTimerOrBlockTask+0x66>
				( void ) xTaskResumeAll();
 800a780:	f7ff f9cc 	bl	8009b1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a784:	4629      	mov	r1, r5
 800a786:	4630      	mov	r0, r6
 800a788:	f7ff ffa0 	bl	800a6cc <prvProcessExpiredTimer>
 800a78c:	e001      	b.n	800a792 <prvProcessTimerOrBlockTask+0x66>
			( void ) xTaskResumeAll();
 800a78e:	f7ff f9c5 	bl	8009b1c <xTaskResumeAll>
}
 800a792:	b002      	add	sp, #8
 800a794:	bd70      	pop	{r4, r5, r6, pc}
 800a796:	bf00      	nop
 800a798:	200019ec 	.word	0x200019ec
 800a79c:	20001adc 	.word	0x20001adc

0800a7a0 <prvProcessReceivedCommands>:
{
 800a7a0:	b510      	push	{r4, lr}
 800a7a2:	b086      	sub	sp, #24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	a903      	add	r1, sp, #12
 800a7a8:	4b35      	ldr	r3, [pc, #212]	; (800a880 <prvProcessReceivedCommands+0xe0>)
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	f7fe fcc4 	bl	8009138 <xQueueReceive>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d063      	beq.n	800a87c <prvProcessReceivedCommands+0xdc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	dbf4      	blt.n	800a7a4 <prvProcessReceivedCommands+0x4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7ba:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7bc:	6963      	ldr	r3, [r4, #20]
 800a7be:	b113      	cbz	r3, 800a7c6 <prvProcessReceivedCommands+0x26>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c0:	1d20      	adds	r0, r4, #4
 800a7c2:	f7fe fa1c 	bl	8008bfe <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7c6:	a802      	add	r0, sp, #8
 800a7c8:	f7ff ff6a 	bl	800a6a0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d8e8      	bhi.n	800a7a4 <prvProcessReceivedCommands+0x4>
 800a7d2:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <prvProcessReceivedCommands+0x38>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a801 	.word	0x0800a801
 800a7e0:	0800a801 	.word	0x0800a801
 800a7e4:	0800a7a5 	.word	0x0800a7a5
 800a7e8:	0800a847 	.word	0x0800a847
 800a7ec:	0800a86d 	.word	0x0800a86d
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a801 	.word	0x0800a801
 800a7f8:	0800a7a5 	.word	0x0800a7a5
 800a7fc:	0800a847 	.word	0x0800a847
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a800:	9b04      	ldr	r3, [sp, #16]
 800a802:	69a1      	ldr	r1, [r4, #24]
 800a804:	4602      	mov	r2, r0
 800a806:	4419      	add	r1, r3
 800a808:	4620      	mov	r0, r4
 800a80a:	f7ff fde5 	bl	800a3d8 <prvInsertTimerInActiveList>
 800a80e:	2800      	cmp	r0, #0
 800a810:	d0c8      	beq.n	800a7a4 <prvProcessReceivedCommands+0x4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a814:	4620      	mov	r0, r4
 800a816:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a818:	69e3      	ldr	r3, [r4, #28]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d1c2      	bne.n	800a7a4 <prvProcessReceivedCommands+0x4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a81e:	69a2      	ldr	r2, [r4, #24]
 800a820:	2100      	movs	r1, #0
 800a822:	9100      	str	r1, [sp, #0]
 800a824:	460b      	mov	r3, r1
 800a826:	9804      	ldr	r0, [sp, #16]
 800a828:	4402      	add	r2, r0
 800a82a:	4620      	mov	r0, r4
 800a82c:	f7ff fec6 	bl	800a5bc <xTimerGenericCommand>
							configASSERT( xResult );
 800a830:	2800      	cmp	r0, #0
 800a832:	d1b7      	bne.n	800a7a4 <prvProcessReceivedCommands+0x4>
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	e7fe      	b.n	800a844 <prvProcessReceivedCommands+0xa4>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a846:	9904      	ldr	r1, [sp, #16]
 800a848:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a84a:	b131      	cbz	r1, 800a85a <prvProcessReceivedCommands+0xba>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a84c:	4603      	mov	r3, r0
 800a84e:	4602      	mov	r2, r0
 800a850:	4401      	add	r1, r0
 800a852:	4620      	mov	r0, r4
 800a854:	f7ff fdc0 	bl	800a3d8 <prvInsertTimerInActiveList>
					break;
 800a858:	e7a4      	b.n	800a7a4 <prvProcessReceivedCommands+0x4>
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a86a:	e7fe      	b.n	800a86a <prvProcessReceivedCommands+0xca>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a86c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a870:	2b00      	cmp	r3, #0
 800a872:	d197      	bne.n	800a7a4 <prvProcessReceivedCommands+0x4>
							vPortFree( pxTimer );
 800a874:	4620      	mov	r0, r4
 800a876:	f000 fa57 	bl	800ad28 <vPortFree>
 800a87a:	e793      	b.n	800a7a4 <prvProcessReceivedCommands+0x4>
}
 800a87c:	b006      	add	sp, #24
 800a87e:	bd10      	pop	{r4, pc}
 800a880:	20001adc 	.word	0x20001adc

0800a884 <prvTimerTask>:
{
 800a884:	b500      	push	{lr}
 800a886:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a888:	a801      	add	r0, sp, #4
 800a88a:	f7ff fd95 	bl	800a3b8 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a88e:	9901      	ldr	r1, [sp, #4]
 800a890:	f7ff ff4c 	bl	800a72c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a894:	f7ff ff84 	bl	800a7a0 <prvProcessReceivedCommands>
	for( ;; )
 800a898:	e7f6      	b.n	800a888 <prvTimerTask+0x4>
	...

0800a89c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a89c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a8a2:	4b0d      	ldr	r3, [pc, #52]	; (800a8d8 <prvTaskExitError+0x3c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d008      	beq.n	800a8be <prvTaskExitError+0x22>
 800a8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	e7fe      	b.n	800a8bc <prvTaskExitError+0x20>
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0fc      	beq.n	800a8ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a8d4:	b002      	add	sp, #8
 800a8d6:	4770      	bx	lr
 800a8d8:	2000000c 	.word	0x2000000c

0800a8dc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a8dc:	4806      	ldr	r0, [pc, #24]	; (800a8f8 <prvPortStartFirstTask+0x1c>)
 800a8de:	6800      	ldr	r0, [r0, #0]
 800a8e0:	6800      	ldr	r0, [r0, #0]
 800a8e2:	f380 8808 	msr	MSP, r0
 800a8e6:	b662      	cpsie	i
 800a8e8:	b661      	cpsie	f
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	df00      	svc	0
 800a8f4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a8f6:	0000      	.short	0x0000
 800a8f8:	e000ed08 	.word	0xe000ed08

0800a8fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a900:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a904:	f021 0101 	bic.w	r1, r1, #1
 800a908:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a90c:	4b03      	ldr	r3, [pc, #12]	; (800a91c <pxPortInitialiseStack+0x20>)
 800a90e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a912:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a916:	3840      	subs	r0, #64	; 0x40
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	0800a89d 	.word	0x0800a89d

0800a920 <SVC_Handler>:
	__asm volatile (
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <pxCurrentTCBConst2>)
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	6808      	ldr	r0, [r1, #0]
 800a926:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a92a:	f380 8809 	msr	PSP, r0
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f04f 0000 	mov.w	r0, #0
 800a936:	f380 8811 	msr	BASEPRI, r0
 800a93a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a93e:	4770      	bx	lr

0800a940 <pxCurrentTCBConst2>:
 800a940:	200018bc 	.word	0x200018bc

0800a944 <vPortEnterCritical>:
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a954:	4a0b      	ldr	r2, [pc, #44]	; (800a984 <vPortEnterCritical+0x40>)
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	3301      	adds	r3, #1
 800a95a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d000      	beq.n	800a962 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a960:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a962:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a966:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800a96a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a96e:	d0f7      	beq.n	800a960 <vPortEnterCritical+0x1c>
 800a970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	e7fe      	b.n	800a980 <vPortEnterCritical+0x3c>
 800a982:	bf00      	nop
 800a984:	2000000c 	.word	0x2000000c

0800a988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a988:	4b09      	ldr	r3, [pc, #36]	; (800a9b0 <vPortExitCritical+0x28>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	b943      	cbnz	r3, 800a9a0 <vPortExitCritical+0x18>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	e7fe      	b.n	800a99e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	4a03      	ldr	r2, [pc, #12]	; (800a9b0 <vPortExitCritical+0x28>)
 800a9a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9a6:	b90b      	cbnz	r3, 800a9ac <vPortExitCritical+0x24>
	__asm volatile
 800a9a8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	2000000c 	.word	0x2000000c
	...

0800a9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9c0:	f3ef 8009 	mrs	r0, PSP
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	; (800aa00 <pxCurrentTCBConst>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9d0:	6010      	str	r0, [r2, #0]
 800a9d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a9d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9da:	f380 8811 	msr	BASEPRI, r0
 800a9de:	f7ff f991 	bl	8009d04 <vTaskSwitchContext>
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8811 	msr	BASEPRI, r0
 800a9ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a9ee:	6819      	ldr	r1, [r3, #0]
 800a9f0:	6808      	ldr	r0, [r1, #0]
 800a9f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9f6:	f380 8809 	msr	PSP, r0
 800a9fa:	f3bf 8f6f 	isb	sy
 800a9fe:	4770      	bx	lr

0800aa00 <pxCurrentTCBConst>:
 800aa00:	200018bc 	.word	0x200018bc

0800aa04 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa04:	b508      	push	{r3, lr}
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa16:	f7fe fff5 	bl	8009a04 <xTaskIncrementTick>
 800aa1a:	b128      	cbz	r0, 800aa28 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800aa28:	2300      	movs	r3, #0
 800aa2a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa2e:	bd08      	pop	{r3, pc}

0800aa30 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa30:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800aa34:	2300      	movs	r3, #0
 800aa36:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa38:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa3a:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <vPortSetupTimerInterrupt+0x20>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4905      	ldr	r1, [pc, #20]	; (800aa54 <vPortSetupTimerInterrupt+0x24>)
 800aa40:	fba1 1303 	umull	r1, r3, r1, r3
 800aa44:	099b      	lsrs	r3, r3, #6
 800aa46:	3b01      	subs	r3, #1
 800aa48:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa4a:	2307      	movs	r3, #7
 800aa4c:	6113      	str	r3, [r2, #16]
}
 800aa4e:	4770      	bx	lr
 800aa50:	20000000 	.word	0x20000000
 800aa54:	10624dd3 	.word	0x10624dd3

0800aa58 <xPortStartScheduler>:
{
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa5c:	4b2a      	ldr	r3, [pc, #168]	; (800ab08 <xPortStartScheduler+0xb0>)
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	b2d2      	uxtb	r2, r2
 800aa62:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa64:	22ff      	movs	r2, #255	; 0xff
 800aa66:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa70:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aa74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa78:	4a24      	ldr	r2, [pc, #144]	; (800ab0c <xPortStartScheduler+0xb4>)
 800aa7a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa7c:	4b24      	ldr	r3, [pc, #144]	; (800ab10 <xPortStartScheduler+0xb8>)
 800aa7e:	2207      	movs	r2, #7
 800aa80:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa82:	e009      	b.n	800aa98 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800aa84:	4a22      	ldr	r2, [pc, #136]	; (800ab10 <xPortStartScheduler+0xb8>)
 800aa86:	6813      	ldr	r3, [r2, #0]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa98:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800aa9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aaa0:	d1f0      	bne.n	800aa84 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aaa2:	4b1b      	ldr	r3, [pc, #108]	; (800ab10 <xPortStartScheduler+0xb8>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d008      	beq.n	800aabc <xPortStartScheduler+0x64>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	e7fe      	b.n	800aaba <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	4a14      	ldr	r2, [pc, #80]	; (800ab10 <xPortStartScheduler+0xb8>)
 800aac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aac2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aac6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	4a0e      	ldr	r2, [pc, #56]	; (800ab08 <xPortStartScheduler+0xb0>)
 800aace:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aad0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aad4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800aad8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800aadc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aae0:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800aae4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800aae8:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800aaec:	f7ff ffa0 	bl	800aa30 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800aaf0:	2400      	movs	r4, #0
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <xPortStartScheduler+0xbc>)
 800aaf4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800aaf6:	f7ff fef1 	bl	800a8dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800aafa:	f7ff f903 	bl	8009d04 <vTaskSwitchContext>
	prvTaskExitError();
 800aafe:	f7ff fecd 	bl	800a89c <prvTaskExitError>
}
 800ab02:	4620      	mov	r0, r4
 800ab04:	b002      	add	sp, #8
 800ab06:	bd10      	pop	{r4, pc}
 800ab08:	e000e400 	.word	0xe000e400
 800ab0c:	20001ae4 	.word	0x20001ae4
 800ab10:	20001ae8 	.word	0x20001ae8
 800ab14:	2000000c 	.word	0x2000000c

0800ab18 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab18:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab1c:	2b0f      	cmp	r3, #15
 800ab1e:	d90f      	bls.n	800ab40 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab20:	4a11      	ldr	r2, [pc, #68]	; (800ab68 <vPortValidateInterruptPriority+0x50>)
 800ab22:	5c9b      	ldrb	r3, [r3, r2]
 800ab24:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab26:	4a11      	ldr	r2, [pc, #68]	; (800ab6c <vPortValidateInterruptPriority+0x54>)
 800ab28:	7812      	ldrb	r2, [r2, #0]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d908      	bls.n	800ab40 <vPortValidateInterruptPriority+0x28>
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	e7fe      	b.n	800ab3e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab44:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800ab48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab4c:	4a08      	ldr	r2, [pc, #32]	; (800ab70 <vPortValidateInterruptPriority+0x58>)
 800ab4e:	6812      	ldr	r2, [r2, #0]
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d908      	bls.n	800ab66 <vPortValidateInterruptPriority+0x4e>
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	e7fe      	b.n	800ab64 <vPortValidateInterruptPriority+0x4c>
	}
 800ab66:	4770      	bx	lr
 800ab68:	e000e3f0 	.word	0xe000e3f0
 800ab6c:	20001ae4 	.word	0x20001ae4
 800ab70:	20001ae8 	.word	0x20001ae8

0800ab74 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab74:	4a12      	ldr	r2, [pc, #72]	; (800abc0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab76:	f012 0f07 	tst.w	r2, #7
 800ab7a:	d01e      	beq.n	800abba <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab7e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab82:	f5c1 5380 	rsb	r3, r1, #4096	; 0x1000
 800ab86:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab88:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab8a:	480e      	ldr	r0, [pc, #56]	; (800abc4 <prvHeapInit+0x50>)
 800ab8c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab8e:	2100      	movs	r1, #0
 800ab90:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab92:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ab94:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab96:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800ab9a:	480b      	ldr	r0, [pc, #44]	; (800abc8 <prvHeapInit+0x54>)
 800ab9c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800ab9e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aba0:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aba2:	1a99      	subs	r1, r3, r2
 800aba4:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aba6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aba8:	4b08      	ldr	r3, [pc, #32]	; (800abcc <prvHeapInit+0x58>)
 800abaa:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abac:	4b08      	ldr	r3, [pc, #32]	; (800abd0 <prvHeapInit+0x5c>)
 800abae:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abb0:	4b08      	ldr	r3, [pc, #32]	; (800abd4 <prvHeapInit+0x60>)
 800abb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abb6:	601a      	str	r2, [r3, #0]
}
 800abb8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abbe:	e7e4      	b.n	800ab8a <prvHeapInit+0x16>
 800abc0:	20001af0 	.word	0x20001af0
 800abc4:	20002afc 	.word	0x20002afc
 800abc8:	20001aec 	.word	0x20001aec
 800abcc:	20002af8 	.word	0x20002af8
 800abd0:	20002af4 	.word	0x20002af4
 800abd4:	20002af0 	.word	0x20002af0

0800abd8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abd8:	4b15      	ldr	r3, [pc, #84]	; (800ac30 <prvInsertBlockIntoFreeList+0x58>)
 800abda:	461a      	mov	r2, r3
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4283      	cmp	r3, r0
 800abe0:	d3fb      	bcc.n	800abda <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abe2:	6851      	ldr	r1, [r2, #4]
 800abe4:	eb02 0c01 	add.w	ip, r2, r1
 800abe8:	4584      	cmp	ip, r0
 800abea:	d009      	beq.n	800ac00 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abec:	6841      	ldr	r1, [r0, #4]
 800abee:	eb00 0c01 	add.w	ip, r0, r1
 800abf2:	4563      	cmp	r3, ip
 800abf4:	d009      	beq.n	800ac0a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abf6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abf8:	4290      	cmp	r0, r2
 800abfa:	d018      	beq.n	800ac2e <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abfc:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800abfe:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac00:	6840      	ldr	r0, [r0, #4]
 800ac02:	4401      	add	r1, r0
 800ac04:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800ac06:	4610      	mov	r0, r2
 800ac08:	e7f0      	b.n	800abec <prvInsertBlockIntoFreeList+0x14>
{
 800ac0a:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac0c:	4c09      	ldr	r4, [pc, #36]	; (800ac34 <prvInsertBlockIntoFreeList+0x5c>)
 800ac0e:	6824      	ldr	r4, [r4, #0]
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	d00a      	beq.n	800ac2a <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	4419      	add	r1, r3
 800ac18:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac1a:	6813      	ldr	r3, [r2, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800ac20:	4290      	cmp	r0, r2
 800ac22:	d000      	beq.n	800ac26 <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac24:	6010      	str	r0, [r2, #0]
	}
}
 800ac26:	bc10      	pop	{r4}
 800ac28:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac2a:	6004      	str	r4, [r0, #0]
 800ac2c:	e7f8      	b.n	800ac20 <prvInsertBlockIntoFreeList+0x48>
 800ac2e:	4770      	bx	lr
 800ac30:	20002afc 	.word	0x20002afc
 800ac34:	20001aec 	.word	0x20001aec

0800ac38 <pvPortMalloc>:
{
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4605      	mov	r5, r0
	vTaskSuspendAll();
 800ac3c:	f7fe fed4 	bl	80099e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800ac40:	4b34      	ldr	r3, [pc, #208]	; (800ad14 <pvPortMalloc+0xdc>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	b1a3      	cbz	r3, 800ac70 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac46:	4b34      	ldr	r3, [pc, #208]	; (800ad18 <pvPortMalloc+0xe0>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	421d      	tst	r5, r3
 800ac4c:	d14a      	bne.n	800ace4 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800ac4e:	b135      	cbz	r5, 800ac5e <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800ac50:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac52:	f015 0f07 	tst.w	r5, #7
 800ac56:	d002      	beq.n	800ac5e <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac58:	f025 0507 	bic.w	r5, r5, #7
 800ac5c:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac5e:	2d00      	cmp	r5, #0
 800ac60:	d042      	beq.n	800ace8 <pvPortMalloc+0xb0>
 800ac62:	4b2e      	ldr	r3, [pc, #184]	; (800ad1c <pvPortMalloc+0xe4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	42ab      	cmp	r3, r5
 800ac68:	d34d      	bcc.n	800ad06 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800ac6a:	4a2d      	ldr	r2, [pc, #180]	; (800ad20 <pvPortMalloc+0xe8>)
 800ac6c:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac6e:	e004      	b.n	800ac7a <pvPortMalloc+0x42>
			prvHeapInit();
 800ac70:	f7ff ff80 	bl	800ab74 <prvHeapInit>
 800ac74:	e7e7      	b.n	800ac46 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800ac76:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800ac78:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	d202      	bcs.n	800ac86 <pvPortMalloc+0x4e>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1f7      	bne.n	800ac76 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800ac86:	4b23      	ldr	r3, [pc, #140]	; (800ad14 <pvPortMalloc+0xdc>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	42a3      	cmp	r3, r4
 800ac8c:	d03d      	beq.n	800ad0a <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac8e:	6816      	ldr	r6, [r2, #0]
 800ac90:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac96:	6863      	ldr	r3, [r4, #4]
 800ac98:	1b5b      	subs	r3, r3, r5
 800ac9a:	2b10      	cmp	r3, #16
 800ac9c:	d910      	bls.n	800acc0 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac9e:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca0:	f010 0f07 	tst.w	r0, #7
 800aca4:	d008      	beq.n	800acb8 <pvPortMalloc+0x80>
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	e7fe      	b.n	800acb6 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800acb8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800acba:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800acbc:	f7ff ff8c 	bl	800abd8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800acc0:	6862      	ldr	r2, [r4, #4]
 800acc2:	4916      	ldr	r1, [pc, #88]	; (800ad1c <pvPortMalloc+0xe4>)
 800acc4:	680b      	ldr	r3, [r1, #0]
 800acc6:	1a9b      	subs	r3, r3, r2
 800acc8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acca:	4916      	ldr	r1, [pc, #88]	; (800ad24 <pvPortMalloc+0xec>)
 800accc:	6809      	ldr	r1, [r1, #0]
 800acce:	428b      	cmp	r3, r1
 800acd0:	d201      	bcs.n	800acd6 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acd2:	4914      	ldr	r1, [pc, #80]	; (800ad24 <pvPortMalloc+0xec>)
 800acd4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <pvPortMalloc+0xe0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4313      	orrs	r3, r2
 800acdc:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800acde:	2300      	movs	r3, #0
 800ace0:	6023      	str	r3, [r4, #0]
 800ace2:	e002      	b.n	800acea <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 800ace4:	2600      	movs	r6, #0
 800ace6:	e000      	b.n	800acea <pvPortMalloc+0xb2>
 800ace8:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800acea:	f7fe ff17 	bl	8009b1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800acee:	f016 0f07 	tst.w	r6, #7
 800acf2:	d00c      	beq.n	800ad0e <pvPortMalloc+0xd6>
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	e7fe      	b.n	800ad04 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800ad06:	2600      	movs	r6, #0
 800ad08:	e7ef      	b.n	800acea <pvPortMalloc+0xb2>
 800ad0a:	2600      	movs	r6, #0
 800ad0c:	e7ed      	b.n	800acea <pvPortMalloc+0xb2>
}
 800ad0e:	4630      	mov	r0, r6
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	bf00      	nop
 800ad14:	20001aec 	.word	0x20001aec
 800ad18:	20002af0 	.word	0x20002af0
 800ad1c:	20002af4 	.word	0x20002af4
 800ad20:	20002afc 	.word	0x20002afc
 800ad24:	20002af8 	.word	0x20002af8

0800ad28 <vPortFree>:
	if( pv != NULL )
 800ad28:	b380      	cbz	r0, 800ad8c <vPortFree+0x64>
{
 800ad2a:	b538      	push	{r3, r4, r5, lr}
 800ad2c:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ad2e:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad32:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ad36:	4a16      	ldr	r2, [pc, #88]	; (800ad90 <vPortFree+0x68>)
 800ad38:	6812      	ldr	r2, [r2, #0]
 800ad3a:	4213      	tst	r3, r2
 800ad3c:	d108      	bne.n	800ad50 <vPortFree+0x28>
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	e7fe      	b.n	800ad4e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad50:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ad54:	b141      	cbz	r1, 800ad68 <vPortFree+0x40>
 800ad56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5a:	f383 8811 	msr	BASEPRI, r3
 800ad5e:	f3bf 8f6f 	isb	sy
 800ad62:	f3bf 8f4f 	dsb	sy
 800ad66:	e7fe      	b.n	800ad66 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad68:	ea23 0302 	bic.w	r3, r3, r2
 800ad6c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ad70:	f7fe fe3a 	bl	80099e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad74:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ad78:	4a06      	ldr	r2, [pc, #24]	; (800ad94 <vPortFree+0x6c>)
 800ad7a:	6813      	ldr	r3, [r2, #0]
 800ad7c:	440b      	add	r3, r1
 800ad7e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7ff ff29 	bl	800abd8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800ad86:	f7fe fec9 	bl	8009b1c <xTaskResumeAll>
}
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	20002af0 	.word	0x20002af0
 800ad94:	20002af4 	.word	0x20002af4

0800ad98 <malloc>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <malloc+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 b823 	b.w	800ade8 <_malloc_r>
 800ada2:	bf00      	nop
 800ada4:	20000068 	.word	0x20000068

0800ada8 <sbrk_aligned>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	4e0e      	ldr	r6, [pc, #56]	; (800ade4 <sbrk_aligned+0x3c>)
 800adac:	460c      	mov	r4, r1
 800adae:	6831      	ldr	r1, [r6, #0]
 800adb0:	4605      	mov	r5, r0
 800adb2:	b911      	cbnz	r1, 800adba <sbrk_aligned+0x12>
 800adb4:	f000 fb88 	bl	800b4c8 <_sbrk_r>
 800adb8:	6030      	str	r0, [r6, #0]
 800adba:	4621      	mov	r1, r4
 800adbc:	4628      	mov	r0, r5
 800adbe:	f000 fb83 	bl	800b4c8 <_sbrk_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	d00a      	beq.n	800addc <sbrk_aligned+0x34>
 800adc6:	1cc4      	adds	r4, r0, #3
 800adc8:	f024 0403 	bic.w	r4, r4, #3
 800adcc:	42a0      	cmp	r0, r4
 800adce:	d007      	beq.n	800ade0 <sbrk_aligned+0x38>
 800add0:	1a21      	subs	r1, r4, r0
 800add2:	4628      	mov	r0, r5
 800add4:	f000 fb78 	bl	800b4c8 <_sbrk_r>
 800add8:	3001      	adds	r0, #1
 800adda:	d101      	bne.n	800ade0 <sbrk_aligned+0x38>
 800addc:	f04f 34ff 	mov.w	r4, #4294967295
 800ade0:	4620      	mov	r0, r4
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	20002b08 	.word	0x20002b08

0800ade8 <_malloc_r>:
 800ade8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adec:	1ccd      	adds	r5, r1, #3
 800adee:	f025 0503 	bic.w	r5, r5, #3
 800adf2:	3508      	adds	r5, #8
 800adf4:	2d0c      	cmp	r5, #12
 800adf6:	bf38      	it	cc
 800adf8:	250c      	movcc	r5, #12
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	4607      	mov	r7, r0
 800adfe:	db01      	blt.n	800ae04 <_malloc_r+0x1c>
 800ae00:	42a9      	cmp	r1, r5
 800ae02:	d905      	bls.n	800ae10 <_malloc_r+0x28>
 800ae04:	230c      	movs	r3, #12
 800ae06:	2600      	movs	r6, #0
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aee4 <_malloc_r+0xfc>
 800ae14:	f000 f868 	bl	800aee8 <__malloc_lock>
 800ae18:	f8d8 3000 	ldr.w	r3, [r8]
 800ae1c:	461c      	mov	r4, r3
 800ae1e:	bb5c      	cbnz	r4, 800ae78 <_malloc_r+0x90>
 800ae20:	4629      	mov	r1, r5
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7ff ffc0 	bl	800ada8 <sbrk_aligned>
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	d155      	bne.n	800aeda <_malloc_r+0xf2>
 800ae2e:	f8d8 4000 	ldr.w	r4, [r8]
 800ae32:	4626      	mov	r6, r4
 800ae34:	2e00      	cmp	r6, #0
 800ae36:	d145      	bne.n	800aec4 <_malloc_r+0xdc>
 800ae38:	2c00      	cmp	r4, #0
 800ae3a:	d048      	beq.n	800aece <_malloc_r+0xe6>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4638      	mov	r0, r7
 800ae42:	eb04 0903 	add.w	r9, r4, r3
 800ae46:	f000 fb3f 	bl	800b4c8 <_sbrk_r>
 800ae4a:	4581      	cmp	r9, r0
 800ae4c:	d13f      	bne.n	800aece <_malloc_r+0xe6>
 800ae4e:	6821      	ldr	r1, [r4, #0]
 800ae50:	4638      	mov	r0, r7
 800ae52:	1a6d      	subs	r5, r5, r1
 800ae54:	4629      	mov	r1, r5
 800ae56:	f7ff ffa7 	bl	800ada8 <sbrk_aligned>
 800ae5a:	3001      	adds	r0, #1
 800ae5c:	d037      	beq.n	800aece <_malloc_r+0xe6>
 800ae5e:	6823      	ldr	r3, [r4, #0]
 800ae60:	442b      	add	r3, r5
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	f8d8 3000 	ldr.w	r3, [r8]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d038      	beq.n	800aede <_malloc_r+0xf6>
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	42a2      	cmp	r2, r4
 800ae70:	d12b      	bne.n	800aeca <_malloc_r+0xe2>
 800ae72:	2200      	movs	r2, #0
 800ae74:	605a      	str	r2, [r3, #4]
 800ae76:	e00f      	b.n	800ae98 <_malloc_r+0xb0>
 800ae78:	6822      	ldr	r2, [r4, #0]
 800ae7a:	1b52      	subs	r2, r2, r5
 800ae7c:	d41f      	bmi.n	800aebe <_malloc_r+0xd6>
 800ae7e:	2a0b      	cmp	r2, #11
 800ae80:	d917      	bls.n	800aeb2 <_malloc_r+0xca>
 800ae82:	1961      	adds	r1, r4, r5
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	6025      	str	r5, [r4, #0]
 800ae88:	bf18      	it	ne
 800ae8a:	6059      	strne	r1, [r3, #4]
 800ae8c:	6863      	ldr	r3, [r4, #4]
 800ae8e:	bf08      	it	eq
 800ae90:	f8c8 1000 	streq.w	r1, [r8]
 800ae94:	5162      	str	r2, [r4, r5]
 800ae96:	604b      	str	r3, [r1, #4]
 800ae98:	4638      	mov	r0, r7
 800ae9a:	f104 060b 	add.w	r6, r4, #11
 800ae9e:	f000 f829 	bl	800aef4 <__malloc_unlock>
 800aea2:	f026 0607 	bic.w	r6, r6, #7
 800aea6:	1d23      	adds	r3, r4, #4
 800aea8:	1af2      	subs	r2, r6, r3
 800aeaa:	d0ae      	beq.n	800ae0a <_malloc_r+0x22>
 800aeac:	1b9b      	subs	r3, r3, r6
 800aeae:	50a3      	str	r3, [r4, r2]
 800aeb0:	e7ab      	b.n	800ae0a <_malloc_r+0x22>
 800aeb2:	42a3      	cmp	r3, r4
 800aeb4:	6862      	ldr	r2, [r4, #4]
 800aeb6:	d1dd      	bne.n	800ae74 <_malloc_r+0x8c>
 800aeb8:	f8c8 2000 	str.w	r2, [r8]
 800aebc:	e7ec      	b.n	800ae98 <_malloc_r+0xb0>
 800aebe:	4623      	mov	r3, r4
 800aec0:	6864      	ldr	r4, [r4, #4]
 800aec2:	e7ac      	b.n	800ae1e <_malloc_r+0x36>
 800aec4:	4634      	mov	r4, r6
 800aec6:	6876      	ldr	r6, [r6, #4]
 800aec8:	e7b4      	b.n	800ae34 <_malloc_r+0x4c>
 800aeca:	4613      	mov	r3, r2
 800aecc:	e7cc      	b.n	800ae68 <_malloc_r+0x80>
 800aece:	230c      	movs	r3, #12
 800aed0:	4638      	mov	r0, r7
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	f000 f80e 	bl	800aef4 <__malloc_unlock>
 800aed8:	e797      	b.n	800ae0a <_malloc_r+0x22>
 800aeda:	6025      	str	r5, [r4, #0]
 800aedc:	e7dc      	b.n	800ae98 <_malloc_r+0xb0>
 800aede:	605b      	str	r3, [r3, #4]
 800aee0:	deff      	udf	#255	; 0xff
 800aee2:	bf00      	nop
 800aee4:	20002b04 	.word	0x20002b04

0800aee8 <__malloc_lock>:
 800aee8:	4801      	ldr	r0, [pc, #4]	; (800aef0 <__malloc_lock+0x8>)
 800aeea:	f000 bb3a 	b.w	800b562 <__retarget_lock_acquire_recursive>
 800aeee:	bf00      	nop
 800aef0:	20002c4c 	.word	0x20002c4c

0800aef4 <__malloc_unlock>:
 800aef4:	4801      	ldr	r0, [pc, #4]	; (800aefc <__malloc_unlock+0x8>)
 800aef6:	f000 bb35 	b.w	800b564 <__retarget_lock_release_recursive>
 800aefa:	bf00      	nop
 800aefc:	20002c4c 	.word	0x20002c4c

0800af00 <std>:
 800af00:	2300      	movs	r3, #0
 800af02:	b510      	push	{r4, lr}
 800af04:	4604      	mov	r4, r0
 800af06:	e9c0 3300 	strd	r3, r3, [r0]
 800af0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af0e:	6083      	str	r3, [r0, #8]
 800af10:	8181      	strh	r1, [r0, #12]
 800af12:	6643      	str	r3, [r0, #100]	; 0x64
 800af14:	81c2      	strh	r2, [r0, #14]
 800af16:	6183      	str	r3, [r0, #24]
 800af18:	4619      	mov	r1, r3
 800af1a:	2208      	movs	r2, #8
 800af1c:	305c      	adds	r0, #92	; 0x5c
 800af1e:	f000 fa2b 	bl	800b378 <memset>
 800af22:	4b0d      	ldr	r3, [pc, #52]	; (800af58 <std+0x58>)
 800af24:	6224      	str	r4, [r4, #32]
 800af26:	6263      	str	r3, [r4, #36]	; 0x24
 800af28:	4b0c      	ldr	r3, [pc, #48]	; (800af5c <std+0x5c>)
 800af2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800af2c:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <std+0x60>)
 800af2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <std+0x64>)
 800af32:	6323      	str	r3, [r4, #48]	; 0x30
 800af34:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <std+0x68>)
 800af36:	429c      	cmp	r4, r3
 800af38:	d006      	beq.n	800af48 <std+0x48>
 800af3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800af3e:	4294      	cmp	r4, r2
 800af40:	d002      	beq.n	800af48 <std+0x48>
 800af42:	33d0      	adds	r3, #208	; 0xd0
 800af44:	429c      	cmp	r4, r3
 800af46:	d105      	bne.n	800af54 <std+0x54>
 800af48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af50:	f000 bb06 	b.w	800b560 <__retarget_lock_init_recursive>
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	0800b1c9 	.word	0x0800b1c9
 800af5c:	0800b1eb 	.word	0x0800b1eb
 800af60:	0800b223 	.word	0x0800b223
 800af64:	0800b247 	.word	0x0800b247
 800af68:	20002b0c 	.word	0x20002b0c

0800af6c <stdio_exit_handler>:
 800af6c:	4a02      	ldr	r2, [pc, #8]	; (800af78 <stdio_exit_handler+0xc>)
 800af6e:	4903      	ldr	r1, [pc, #12]	; (800af7c <stdio_exit_handler+0x10>)
 800af70:	4803      	ldr	r0, [pc, #12]	; (800af80 <stdio_exit_handler+0x14>)
 800af72:	f000 b869 	b.w	800b048 <_fwalk_sglue>
 800af76:	bf00      	nop
 800af78:	20000010 	.word	0x20000010
 800af7c:	0800bf85 	.word	0x0800bf85
 800af80:	2000001c 	.word	0x2000001c

0800af84 <cleanup_stdio>:
 800af84:	6841      	ldr	r1, [r0, #4]
 800af86:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <cleanup_stdio+0x34>)
 800af88:	b510      	push	{r4, lr}
 800af8a:	4299      	cmp	r1, r3
 800af8c:	4604      	mov	r4, r0
 800af8e:	d001      	beq.n	800af94 <cleanup_stdio+0x10>
 800af90:	f000 fff8 	bl	800bf84 <_fflush_r>
 800af94:	68a1      	ldr	r1, [r4, #8]
 800af96:	4b09      	ldr	r3, [pc, #36]	; (800afbc <cleanup_stdio+0x38>)
 800af98:	4299      	cmp	r1, r3
 800af9a:	d002      	beq.n	800afa2 <cleanup_stdio+0x1e>
 800af9c:	4620      	mov	r0, r4
 800af9e:	f000 fff1 	bl	800bf84 <_fflush_r>
 800afa2:	68e1      	ldr	r1, [r4, #12]
 800afa4:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <cleanup_stdio+0x3c>)
 800afa6:	4299      	cmp	r1, r3
 800afa8:	d004      	beq.n	800afb4 <cleanup_stdio+0x30>
 800afaa:	4620      	mov	r0, r4
 800afac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb0:	f000 bfe8 	b.w	800bf84 <_fflush_r>
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	bf00      	nop
 800afb8:	20002b0c 	.word	0x20002b0c
 800afbc:	20002b74 	.word	0x20002b74
 800afc0:	20002bdc 	.word	0x20002bdc

0800afc4 <global_stdio_init.part.0>:
 800afc4:	b510      	push	{r4, lr}
 800afc6:	4b0b      	ldr	r3, [pc, #44]	; (800aff4 <global_stdio_init.part.0+0x30>)
 800afc8:	4c0b      	ldr	r4, [pc, #44]	; (800aff8 <global_stdio_init.part.0+0x34>)
 800afca:	4a0c      	ldr	r2, [pc, #48]	; (800affc <global_stdio_init.part.0+0x38>)
 800afcc:	4620      	mov	r0, r4
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	2104      	movs	r1, #4
 800afd2:	2200      	movs	r2, #0
 800afd4:	f7ff ff94 	bl	800af00 <std>
 800afd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800afdc:	2201      	movs	r2, #1
 800afde:	2109      	movs	r1, #9
 800afe0:	f7ff ff8e 	bl	800af00 <std>
 800afe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800afe8:	2202      	movs	r2, #2
 800afea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afee:	2112      	movs	r1, #18
 800aff0:	f7ff bf86 	b.w	800af00 <std>
 800aff4:	20002c44 	.word	0x20002c44
 800aff8:	20002b0c 	.word	0x20002b0c
 800affc:	0800af6d 	.word	0x0800af6d

0800b000 <__sfp_lock_acquire>:
 800b000:	4801      	ldr	r0, [pc, #4]	; (800b008 <__sfp_lock_acquire+0x8>)
 800b002:	f000 baae 	b.w	800b562 <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	20002c4d 	.word	0x20002c4d

0800b00c <__sfp_lock_release>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__sfp_lock_release+0x8>)
 800b00e:	f000 baa9 	b.w	800b564 <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	20002c4d 	.word	0x20002c4d

0800b018 <__sinit>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	4604      	mov	r4, r0
 800b01c:	f7ff fff0 	bl	800b000 <__sfp_lock_acquire>
 800b020:	6a23      	ldr	r3, [r4, #32]
 800b022:	b11b      	cbz	r3, 800b02c <__sinit+0x14>
 800b024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b028:	f7ff bff0 	b.w	800b00c <__sfp_lock_release>
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <__sinit+0x28>)
 800b02e:	6223      	str	r3, [r4, #32]
 800b030:	4b04      	ldr	r3, [pc, #16]	; (800b044 <__sinit+0x2c>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1f5      	bne.n	800b024 <__sinit+0xc>
 800b038:	f7ff ffc4 	bl	800afc4 <global_stdio_init.part.0>
 800b03c:	e7f2      	b.n	800b024 <__sinit+0xc>
 800b03e:	bf00      	nop
 800b040:	0800af85 	.word	0x0800af85
 800b044:	20002c44 	.word	0x20002c44

0800b048 <_fwalk_sglue>:
 800b048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b04c:	4607      	mov	r7, r0
 800b04e:	4688      	mov	r8, r1
 800b050:	4614      	mov	r4, r2
 800b052:	2600      	movs	r6, #0
 800b054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b058:	f1b9 0901 	subs.w	r9, r9, #1
 800b05c:	d505      	bpl.n	800b06a <_fwalk_sglue+0x22>
 800b05e:	6824      	ldr	r4, [r4, #0]
 800b060:	2c00      	cmp	r4, #0
 800b062:	d1f7      	bne.n	800b054 <_fwalk_sglue+0xc>
 800b064:	4630      	mov	r0, r6
 800b066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b06a:	89ab      	ldrh	r3, [r5, #12]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d907      	bls.n	800b080 <_fwalk_sglue+0x38>
 800b070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b074:	3301      	adds	r3, #1
 800b076:	d003      	beq.n	800b080 <_fwalk_sglue+0x38>
 800b078:	4629      	mov	r1, r5
 800b07a:	4638      	mov	r0, r7
 800b07c:	47c0      	blx	r8
 800b07e:	4306      	orrs	r6, r0
 800b080:	3568      	adds	r5, #104	; 0x68
 800b082:	e7e9      	b.n	800b058 <_fwalk_sglue+0x10>

0800b084 <iprintf>:
 800b084:	b40f      	push	{r0, r1, r2, r3}
 800b086:	b507      	push	{r0, r1, r2, lr}
 800b088:	4906      	ldr	r1, [pc, #24]	; (800b0a4 <iprintf+0x20>)
 800b08a:	ab04      	add	r3, sp, #16
 800b08c:	6808      	ldr	r0, [r1, #0]
 800b08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b092:	6881      	ldr	r1, [r0, #8]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	f000 fc45 	bl	800b924 <_vfiprintf_r>
 800b09a:	b003      	add	sp, #12
 800b09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a0:	b004      	add	sp, #16
 800b0a2:	4770      	bx	lr
 800b0a4:	20000068 	.word	0x20000068

0800b0a8 <_puts_r>:
 800b0a8:	6a03      	ldr	r3, [r0, #32]
 800b0aa:	b570      	push	{r4, r5, r6, lr}
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	460e      	mov	r6, r1
 800b0b0:	6884      	ldr	r4, [r0, #8]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <_puts_r+0x10>
 800b0b4:	f7ff ffb0 	bl	800b018 <__sinit>
 800b0b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0ba:	07db      	lsls	r3, r3, #31
 800b0bc:	d405      	bmi.n	800b0ca <_puts_r+0x22>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	0598      	lsls	r0, r3, #22
 800b0c2:	d402      	bmi.n	800b0ca <_puts_r+0x22>
 800b0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c6:	f000 fa4c 	bl	800b562 <__retarget_lock_acquire_recursive>
 800b0ca:	89a3      	ldrh	r3, [r4, #12]
 800b0cc:	0719      	lsls	r1, r3, #28
 800b0ce:	d513      	bpl.n	800b0f8 <_puts_r+0x50>
 800b0d0:	6923      	ldr	r3, [r4, #16]
 800b0d2:	b18b      	cbz	r3, 800b0f8 <_puts_r+0x50>
 800b0d4:	3e01      	subs	r6, #1
 800b0d6:	68a3      	ldr	r3, [r4, #8]
 800b0d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	b9e9      	cbnz	r1, 800b11e <_puts_r+0x76>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da2e      	bge.n	800b144 <_puts_r+0x9c>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	210a      	movs	r1, #10
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 f8af 	bl	800b24e <__swbuf_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d007      	beq.n	800b104 <_puts_r+0x5c>
 800b0f4:	250a      	movs	r5, #10
 800b0f6:	e007      	b.n	800b108 <_puts_r+0x60>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 f8e4 	bl	800b2c8 <__swsetup_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	d0e7      	beq.n	800b0d4 <_puts_r+0x2c>
 800b104:	f04f 35ff 	mov.w	r5, #4294967295
 800b108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b10a:	07da      	lsls	r2, r3, #31
 800b10c:	d405      	bmi.n	800b11a <_puts_r+0x72>
 800b10e:	89a3      	ldrh	r3, [r4, #12]
 800b110:	059b      	lsls	r3, r3, #22
 800b112:	d402      	bmi.n	800b11a <_puts_r+0x72>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f000 fa25 	bl	800b564 <__retarget_lock_release_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	bd70      	pop	{r4, r5, r6, pc}
 800b11e:	2b00      	cmp	r3, #0
 800b120:	da04      	bge.n	800b12c <_puts_r+0x84>
 800b122:	69a2      	ldr	r2, [r4, #24]
 800b124:	429a      	cmp	r2, r3
 800b126:	dc06      	bgt.n	800b136 <_puts_r+0x8e>
 800b128:	290a      	cmp	r1, #10
 800b12a:	d004      	beq.n	800b136 <_puts_r+0x8e>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	6022      	str	r2, [r4, #0]
 800b132:	7019      	strb	r1, [r3, #0]
 800b134:	e7cf      	b.n	800b0d6 <_puts_r+0x2e>
 800b136:	4622      	mov	r2, r4
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 f888 	bl	800b24e <__swbuf_r>
 800b13e:	3001      	adds	r0, #1
 800b140:	d1c9      	bne.n	800b0d6 <_puts_r+0x2e>
 800b142:	e7df      	b.n	800b104 <_puts_r+0x5c>
 800b144:	250a      	movs	r5, #10
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	1c5a      	adds	r2, r3, #1
 800b14a:	6022      	str	r2, [r4, #0]
 800b14c:	701d      	strb	r5, [r3, #0]
 800b14e:	e7db      	b.n	800b108 <_puts_r+0x60>

0800b150 <puts>:
 800b150:	4b02      	ldr	r3, [pc, #8]	; (800b15c <puts+0xc>)
 800b152:	4601      	mov	r1, r0
 800b154:	6818      	ldr	r0, [r3, #0]
 800b156:	f7ff bfa7 	b.w	800b0a8 <_puts_r>
 800b15a:	bf00      	nop
 800b15c:	20000068 	.word	0x20000068

0800b160 <sniprintf>:
 800b160:	b40c      	push	{r2, r3}
 800b162:	b530      	push	{r4, r5, lr}
 800b164:	4b17      	ldr	r3, [pc, #92]	; (800b1c4 <sniprintf+0x64>)
 800b166:	1e0c      	subs	r4, r1, #0
 800b168:	681d      	ldr	r5, [r3, #0]
 800b16a:	b09d      	sub	sp, #116	; 0x74
 800b16c:	da08      	bge.n	800b180 <sniprintf+0x20>
 800b16e:	238b      	movs	r3, #139	; 0x8b
 800b170:	f04f 30ff 	mov.w	r0, #4294967295
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	b01d      	add	sp, #116	; 0x74
 800b178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b17c:	b002      	add	sp, #8
 800b17e:	4770      	bx	lr
 800b180:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b184:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b188:	bf0c      	ite	eq
 800b18a:	4623      	moveq	r3, r4
 800b18c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	9307      	str	r3, [sp, #28]
 800b194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b198:	9002      	str	r0, [sp, #8]
 800b19a:	9006      	str	r0, [sp, #24]
 800b19c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	ab21      	add	r3, sp, #132	; 0x84
 800b1a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b1a6:	a902      	add	r1, sp, #8
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	f000 fa95 	bl	800b6d8 <_svfiprintf_r>
 800b1ae:	1c43      	adds	r3, r0, #1
 800b1b0:	bfbc      	itt	lt
 800b1b2:	238b      	movlt	r3, #139	; 0x8b
 800b1b4:	602b      	strlt	r3, [r5, #0]
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d0dd      	beq.n	800b176 <sniprintf+0x16>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	9b02      	ldr	r3, [sp, #8]
 800b1be:	701a      	strb	r2, [r3, #0]
 800b1c0:	e7d9      	b.n	800b176 <sniprintf+0x16>
 800b1c2:	bf00      	nop
 800b1c4:	20000068 	.word	0x20000068

0800b1c8 <__sread>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1d0:	f000 f968 	bl	800b4a4 <_read_r>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	bfab      	itete	ge
 800b1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1da:	89a3      	ldrhlt	r3, [r4, #12]
 800b1dc:	181b      	addge	r3, r3, r0
 800b1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1e2:	bfac      	ite	ge
 800b1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1e6:	81a3      	strhlt	r3, [r4, #12]
 800b1e8:	bd10      	pop	{r4, pc}

0800b1ea <__swrite>:
 800b1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ee:	461f      	mov	r7, r3
 800b1f0:	898b      	ldrh	r3, [r1, #12]
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	05db      	lsls	r3, r3, #23
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	4616      	mov	r6, r2
 800b1fa:	d505      	bpl.n	800b208 <__swrite+0x1e>
 800b1fc:	2302      	movs	r3, #2
 800b1fe:	2200      	movs	r2, #0
 800b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b204:	f000 f93c 	bl	800b480 <_lseek_r>
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	4632      	mov	r2, r6
 800b20c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b210:	81a3      	strh	r3, [r4, #12]
 800b212:	4628      	mov	r0, r5
 800b214:	463b      	mov	r3, r7
 800b216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b21e:	f000 b963 	b.w	800b4e8 <_write_r>

0800b222 <__sseek>:
 800b222:	b510      	push	{r4, lr}
 800b224:	460c      	mov	r4, r1
 800b226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b22a:	f000 f929 	bl	800b480 <_lseek_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	89a3      	ldrh	r3, [r4, #12]
 800b232:	bf15      	itete	ne
 800b234:	6560      	strne	r0, [r4, #84]	; 0x54
 800b236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b23e:	81a3      	strheq	r3, [r4, #12]
 800b240:	bf18      	it	ne
 800b242:	81a3      	strhne	r3, [r4, #12]
 800b244:	bd10      	pop	{r4, pc}

0800b246 <__sclose>:
 800b246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b24a:	f000 b8b3 	b.w	800b3b4 <_close_r>

0800b24e <__swbuf_r>:
 800b24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b250:	460e      	mov	r6, r1
 800b252:	4614      	mov	r4, r2
 800b254:	4605      	mov	r5, r0
 800b256:	b118      	cbz	r0, 800b260 <__swbuf_r+0x12>
 800b258:	6a03      	ldr	r3, [r0, #32]
 800b25a:	b90b      	cbnz	r3, 800b260 <__swbuf_r+0x12>
 800b25c:	f7ff fedc 	bl	800b018 <__sinit>
 800b260:	69a3      	ldr	r3, [r4, #24]
 800b262:	60a3      	str	r3, [r4, #8]
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	071a      	lsls	r2, r3, #28
 800b268:	d525      	bpl.n	800b2b6 <__swbuf_r+0x68>
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	b31b      	cbz	r3, 800b2b6 <__swbuf_r+0x68>
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	6922      	ldr	r2, [r4, #16]
 800b272:	b2f6      	uxtb	r6, r6
 800b274:	1a98      	subs	r0, r3, r2
 800b276:	6963      	ldr	r3, [r4, #20]
 800b278:	4637      	mov	r7, r6
 800b27a:	4283      	cmp	r3, r0
 800b27c:	dc04      	bgt.n	800b288 <__swbuf_r+0x3a>
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 fe7f 	bl	800bf84 <_fflush_r>
 800b286:	b9e0      	cbnz	r0, 800b2c2 <__swbuf_r+0x74>
 800b288:	68a3      	ldr	r3, [r4, #8]
 800b28a:	3b01      	subs	r3, #1
 800b28c:	60a3      	str	r3, [r4, #8]
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	6022      	str	r2, [r4, #0]
 800b294:	701e      	strb	r6, [r3, #0]
 800b296:	6962      	ldr	r2, [r4, #20]
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d004      	beq.n	800b2a8 <__swbuf_r+0x5a>
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	07db      	lsls	r3, r3, #31
 800b2a2:	d506      	bpl.n	800b2b2 <__swbuf_r+0x64>
 800b2a4:	2e0a      	cmp	r6, #10
 800b2a6:	d104      	bne.n	800b2b2 <__swbuf_r+0x64>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	f000 fe6a 	bl	800bf84 <_fflush_r>
 800b2b0:	b938      	cbnz	r0, 800b2c2 <__swbuf_r+0x74>
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4628      	mov	r0, r5
 800b2ba:	f000 f805 	bl	800b2c8 <__swsetup_r>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d0d5      	beq.n	800b26e <__swbuf_r+0x20>
 800b2c2:	f04f 37ff 	mov.w	r7, #4294967295
 800b2c6:	e7f4      	b.n	800b2b2 <__swbuf_r+0x64>

0800b2c8 <__swsetup_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4b2a      	ldr	r3, [pc, #168]	; (800b374 <__swsetup_r+0xac>)
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	6818      	ldr	r0, [r3, #0]
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	b118      	cbz	r0, 800b2dc <__swsetup_r+0x14>
 800b2d4:	6a03      	ldr	r3, [r0, #32]
 800b2d6:	b90b      	cbnz	r3, 800b2dc <__swsetup_r+0x14>
 800b2d8:	f7ff fe9e 	bl	800b018 <__sinit>
 800b2dc:	89a3      	ldrh	r3, [r4, #12]
 800b2de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2e2:	0718      	lsls	r0, r3, #28
 800b2e4:	d422      	bmi.n	800b32c <__swsetup_r+0x64>
 800b2e6:	06d9      	lsls	r1, r3, #27
 800b2e8:	d407      	bmi.n	800b2fa <__swsetup_r+0x32>
 800b2ea:	2309      	movs	r3, #9
 800b2ec:	602b      	str	r3, [r5, #0]
 800b2ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	e034      	b.n	800b364 <__swsetup_r+0x9c>
 800b2fa:	0758      	lsls	r0, r3, #29
 800b2fc:	d512      	bpl.n	800b324 <__swsetup_r+0x5c>
 800b2fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b300:	b141      	cbz	r1, 800b314 <__swsetup_r+0x4c>
 800b302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b306:	4299      	cmp	r1, r3
 800b308:	d002      	beq.n	800b310 <__swsetup_r+0x48>
 800b30a:	4628      	mov	r0, r5
 800b30c:	f000 f942 	bl	800b594 <_free_r>
 800b310:	2300      	movs	r3, #0
 800b312:	6363      	str	r3, [r4, #52]	; 0x34
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	2300      	movs	r3, #0
 800b31e:	6063      	str	r3, [r4, #4]
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	6023      	str	r3, [r4, #0]
 800b324:	89a3      	ldrh	r3, [r4, #12]
 800b326:	f043 0308 	orr.w	r3, r3, #8
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	6923      	ldr	r3, [r4, #16]
 800b32e:	b94b      	cbnz	r3, 800b344 <__swsetup_r+0x7c>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b33a:	d003      	beq.n	800b344 <__swsetup_r+0x7c>
 800b33c:	4621      	mov	r1, r4
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 fe6d 	bl	800c01e <__smakebuf_r>
 800b344:	89a0      	ldrh	r0, [r4, #12]
 800b346:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b34a:	f010 0301 	ands.w	r3, r0, #1
 800b34e:	d00a      	beq.n	800b366 <__swsetup_r+0x9e>
 800b350:	2300      	movs	r3, #0
 800b352:	60a3      	str	r3, [r4, #8]
 800b354:	6963      	ldr	r3, [r4, #20]
 800b356:	425b      	negs	r3, r3
 800b358:	61a3      	str	r3, [r4, #24]
 800b35a:	6923      	ldr	r3, [r4, #16]
 800b35c:	b943      	cbnz	r3, 800b370 <__swsetup_r+0xa8>
 800b35e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b362:	d1c4      	bne.n	800b2ee <__swsetup_r+0x26>
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	0781      	lsls	r1, r0, #30
 800b368:	bf58      	it	pl
 800b36a:	6963      	ldrpl	r3, [r4, #20]
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	e7f4      	b.n	800b35a <__swsetup_r+0x92>
 800b370:	2000      	movs	r0, #0
 800b372:	e7f7      	b.n	800b364 <__swsetup_r+0x9c>
 800b374:	20000068 	.word	0x20000068

0800b378 <memset>:
 800b378:	4603      	mov	r3, r0
 800b37a:	4402      	add	r2, r0
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d100      	bne.n	800b382 <memset+0xa>
 800b380:	4770      	bx	lr
 800b382:	f803 1b01 	strb.w	r1, [r3], #1
 800b386:	e7f9      	b.n	800b37c <memset+0x4>

0800b388 <strstr>:
 800b388:	780a      	ldrb	r2, [r1, #0]
 800b38a:	b570      	push	{r4, r5, r6, lr}
 800b38c:	b96a      	cbnz	r2, 800b3aa <strstr+0x22>
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	429a      	cmp	r2, r3
 800b392:	d109      	bne.n	800b3a8 <strstr+0x20>
 800b394:	460c      	mov	r4, r1
 800b396:	4605      	mov	r5, r0
 800b398:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d0f6      	beq.n	800b38e <strstr+0x6>
 800b3a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b3a4:	429e      	cmp	r6, r3
 800b3a6:	d0f7      	beq.n	800b398 <strstr+0x10>
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	7803      	ldrb	r3, [r0, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d1ef      	bne.n	800b390 <strstr+0x8>
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	e7ec      	b.n	800b38e <strstr+0x6>

0800b3b4 <_close_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	4d05      	ldr	r5, [pc, #20]	; (800b3d0 <_close_r+0x1c>)
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f8 fa78 	bl	80038b4 <_close>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_close_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_close_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	20002c48 	.word	0x20002c48

0800b3d4 <_reclaim_reent>:
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <_reclaim_reent+0xa8>)
 800b3d6:	b570      	push	{r4, r5, r6, lr}
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4283      	cmp	r3, r0
 800b3de:	d04b      	beq.n	800b478 <_reclaim_reent+0xa4>
 800b3e0:	69c3      	ldr	r3, [r0, #28]
 800b3e2:	b143      	cbz	r3, 800b3f6 <_reclaim_reent+0x22>
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d144      	bne.n	800b474 <_reclaim_reent+0xa0>
 800b3ea:	69e3      	ldr	r3, [r4, #28]
 800b3ec:	6819      	ldr	r1, [r3, #0]
 800b3ee:	b111      	cbz	r1, 800b3f6 <_reclaim_reent+0x22>
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	f000 f8cf 	bl	800b594 <_free_r>
 800b3f6:	6961      	ldr	r1, [r4, #20]
 800b3f8:	b111      	cbz	r1, 800b400 <_reclaim_reent+0x2c>
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	f000 f8ca 	bl	800b594 <_free_r>
 800b400:	69e1      	ldr	r1, [r4, #28]
 800b402:	b111      	cbz	r1, 800b40a <_reclaim_reent+0x36>
 800b404:	4620      	mov	r0, r4
 800b406:	f000 f8c5 	bl	800b594 <_free_r>
 800b40a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b40c:	b111      	cbz	r1, 800b414 <_reclaim_reent+0x40>
 800b40e:	4620      	mov	r0, r4
 800b410:	f000 f8c0 	bl	800b594 <_free_r>
 800b414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b416:	b111      	cbz	r1, 800b41e <_reclaim_reent+0x4a>
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 f8bb 	bl	800b594 <_free_r>
 800b41e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b420:	b111      	cbz	r1, 800b428 <_reclaim_reent+0x54>
 800b422:	4620      	mov	r0, r4
 800b424:	f000 f8b6 	bl	800b594 <_free_r>
 800b428:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b42a:	b111      	cbz	r1, 800b432 <_reclaim_reent+0x5e>
 800b42c:	4620      	mov	r0, r4
 800b42e:	f000 f8b1 	bl	800b594 <_free_r>
 800b432:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b434:	b111      	cbz	r1, 800b43c <_reclaim_reent+0x68>
 800b436:	4620      	mov	r0, r4
 800b438:	f000 f8ac 	bl	800b594 <_free_r>
 800b43c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b43e:	b111      	cbz	r1, 800b446 <_reclaim_reent+0x72>
 800b440:	4620      	mov	r0, r4
 800b442:	f000 f8a7 	bl	800b594 <_free_r>
 800b446:	6a23      	ldr	r3, [r4, #32]
 800b448:	b1b3      	cbz	r3, 800b478 <_reclaim_reent+0xa4>
 800b44a:	4620      	mov	r0, r4
 800b44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b450:	4718      	bx	r3
 800b452:	5949      	ldr	r1, [r1, r5]
 800b454:	b941      	cbnz	r1, 800b468 <_reclaim_reent+0x94>
 800b456:	3504      	adds	r5, #4
 800b458:	69e3      	ldr	r3, [r4, #28]
 800b45a:	2d80      	cmp	r5, #128	; 0x80
 800b45c:	68d9      	ldr	r1, [r3, #12]
 800b45e:	d1f8      	bne.n	800b452 <_reclaim_reent+0x7e>
 800b460:	4620      	mov	r0, r4
 800b462:	f000 f897 	bl	800b594 <_free_r>
 800b466:	e7c0      	b.n	800b3ea <_reclaim_reent+0x16>
 800b468:	680e      	ldr	r6, [r1, #0]
 800b46a:	4620      	mov	r0, r4
 800b46c:	f000 f892 	bl	800b594 <_free_r>
 800b470:	4631      	mov	r1, r6
 800b472:	e7ef      	b.n	800b454 <_reclaim_reent+0x80>
 800b474:	2500      	movs	r5, #0
 800b476:	e7ef      	b.n	800b458 <_reclaim_reent+0x84>
 800b478:	bd70      	pop	{r4, r5, r6, pc}
 800b47a:	bf00      	nop
 800b47c:	20000068 	.word	0x20000068

0800b480 <_lseek_r>:
 800b480:	b538      	push	{r3, r4, r5, lr}
 800b482:	4604      	mov	r4, r0
 800b484:	4608      	mov	r0, r1
 800b486:	4611      	mov	r1, r2
 800b488:	2200      	movs	r2, #0
 800b48a:	4d05      	ldr	r5, [pc, #20]	; (800b4a0 <_lseek_r+0x20>)
 800b48c:	602a      	str	r2, [r5, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f7f8 fa1a 	bl	80038c8 <_lseek>
 800b494:	1c43      	adds	r3, r0, #1
 800b496:	d102      	bne.n	800b49e <_lseek_r+0x1e>
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	b103      	cbz	r3, 800b49e <_lseek_r+0x1e>
 800b49c:	6023      	str	r3, [r4, #0]
 800b49e:	bd38      	pop	{r3, r4, r5, pc}
 800b4a0:	20002c48 	.word	0x20002c48

0800b4a4 <_read_r>:
 800b4a4:	b538      	push	{r3, r4, r5, lr}
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	4d05      	ldr	r5, [pc, #20]	; (800b4c4 <_read_r+0x20>)
 800b4b0:	602a      	str	r2, [r5, #0]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f7f8 f9ee 	bl	8003894 <_read>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_read_r+0x1e>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_read_r+0x1e>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20002c48 	.word	0x20002c48

0800b4c8 <_sbrk_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	4d05      	ldr	r5, [pc, #20]	; (800b4e4 <_sbrk_r+0x1c>)
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	f7f8 f9fa 	bl	80038cc <_sbrk>
 800b4d8:	1c43      	adds	r3, r0, #1
 800b4da:	d102      	bne.n	800b4e2 <_sbrk_r+0x1a>
 800b4dc:	682b      	ldr	r3, [r5, #0]
 800b4de:	b103      	cbz	r3, 800b4e2 <_sbrk_r+0x1a>
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	20002c48 	.word	0x20002c48

0800b4e8 <_write_r>:
 800b4e8:	b538      	push	{r3, r4, r5, lr}
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4d05      	ldr	r5, [pc, #20]	; (800b508 <_write_r+0x20>)
 800b4f4:	602a      	str	r2, [r5, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f7f7 f82e 	bl	8002558 <_write>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_write_r+0x1e>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_write_r+0x1e>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	20002c48 	.word	0x20002c48

0800b50c <__errno>:
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <__errno+0x8>)
 800b50e:	6818      	ldr	r0, [r3, #0]
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000068 	.word	0x20000068

0800b518 <__libc_init_array>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	2600      	movs	r6, #0
 800b51c:	4d0c      	ldr	r5, [pc, #48]	; (800b550 <__libc_init_array+0x38>)
 800b51e:	4c0d      	ldr	r4, [pc, #52]	; (800b554 <__libc_init_array+0x3c>)
 800b520:	1b64      	subs	r4, r4, r5
 800b522:	10a4      	asrs	r4, r4, #2
 800b524:	42a6      	cmp	r6, r4
 800b526:	d109      	bne.n	800b53c <__libc_init_array+0x24>
 800b528:	f000 fe38 	bl	800c19c <_init>
 800b52c:	2600      	movs	r6, #0
 800b52e:	4d0a      	ldr	r5, [pc, #40]	; (800b558 <__libc_init_array+0x40>)
 800b530:	4c0a      	ldr	r4, [pc, #40]	; (800b55c <__libc_init_array+0x44>)
 800b532:	1b64      	subs	r4, r4, r5
 800b534:	10a4      	asrs	r4, r4, #2
 800b536:	42a6      	cmp	r6, r4
 800b538:	d105      	bne.n	800b546 <__libc_init_array+0x2e>
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b540:	4798      	blx	r3
 800b542:	3601      	adds	r6, #1
 800b544:	e7ee      	b.n	800b524 <__libc_init_array+0xc>
 800b546:	f855 3b04 	ldr.w	r3, [r5], #4
 800b54a:	4798      	blx	r3
 800b54c:	3601      	adds	r6, #1
 800b54e:	e7f2      	b.n	800b536 <__libc_init_array+0x1e>
 800b550:	0800c640 	.word	0x0800c640
 800b554:	0800c640 	.word	0x0800c640
 800b558:	0800c640 	.word	0x0800c640
 800b55c:	0800c644 	.word	0x0800c644

0800b560 <__retarget_lock_init_recursive>:
 800b560:	4770      	bx	lr

0800b562 <__retarget_lock_acquire_recursive>:
 800b562:	4770      	bx	lr

0800b564 <__retarget_lock_release_recursive>:
 800b564:	4770      	bx	lr

0800b566 <strcpy>:
 800b566:	4603      	mov	r3, r0
 800b568:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b56c:	f803 2b01 	strb.w	r2, [r3], #1
 800b570:	2a00      	cmp	r2, #0
 800b572:	d1f9      	bne.n	800b568 <strcpy+0x2>
 800b574:	4770      	bx	lr

0800b576 <memcpy>:
 800b576:	440a      	add	r2, r1
 800b578:	4291      	cmp	r1, r2
 800b57a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b57e:	d100      	bne.n	800b582 <memcpy+0xc>
 800b580:	4770      	bx	lr
 800b582:	b510      	push	{r4, lr}
 800b584:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b588:	4291      	cmp	r1, r2
 800b58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b58e:	d1f9      	bne.n	800b584 <memcpy+0xe>
 800b590:	bd10      	pop	{r4, pc}
	...

0800b594 <_free_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4605      	mov	r5, r0
 800b598:	2900      	cmp	r1, #0
 800b59a:	d040      	beq.n	800b61e <_free_r+0x8a>
 800b59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5a0:	1f0c      	subs	r4, r1, #4
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfb8      	it	lt
 800b5a6:	18e4      	addlt	r4, r4, r3
 800b5a8:	f7ff fc9e 	bl	800aee8 <__malloc_lock>
 800b5ac:	4a1c      	ldr	r2, [pc, #112]	; (800b620 <_free_r+0x8c>)
 800b5ae:	6813      	ldr	r3, [r2, #0]
 800b5b0:	b933      	cbnz	r3, 800b5c0 <_free_r+0x2c>
 800b5b2:	6063      	str	r3, [r4, #4]
 800b5b4:	6014      	str	r4, [r2, #0]
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5bc:	f7ff bc9a 	b.w	800aef4 <__malloc_unlock>
 800b5c0:	42a3      	cmp	r3, r4
 800b5c2:	d908      	bls.n	800b5d6 <_free_r+0x42>
 800b5c4:	6820      	ldr	r0, [r4, #0]
 800b5c6:	1821      	adds	r1, r4, r0
 800b5c8:	428b      	cmp	r3, r1
 800b5ca:	bf01      	itttt	eq
 800b5cc:	6819      	ldreq	r1, [r3, #0]
 800b5ce:	685b      	ldreq	r3, [r3, #4]
 800b5d0:	1809      	addeq	r1, r1, r0
 800b5d2:	6021      	streq	r1, [r4, #0]
 800b5d4:	e7ed      	b.n	800b5b2 <_free_r+0x1e>
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	b10b      	cbz	r3, 800b5e0 <_free_r+0x4c>
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	d9fa      	bls.n	800b5d6 <_free_r+0x42>
 800b5e0:	6811      	ldr	r1, [r2, #0]
 800b5e2:	1850      	adds	r0, r2, r1
 800b5e4:	42a0      	cmp	r0, r4
 800b5e6:	d10b      	bne.n	800b600 <_free_r+0x6c>
 800b5e8:	6820      	ldr	r0, [r4, #0]
 800b5ea:	4401      	add	r1, r0
 800b5ec:	1850      	adds	r0, r2, r1
 800b5ee:	4283      	cmp	r3, r0
 800b5f0:	6011      	str	r1, [r2, #0]
 800b5f2:	d1e0      	bne.n	800b5b6 <_free_r+0x22>
 800b5f4:	6818      	ldr	r0, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	4408      	add	r0, r1
 800b5fa:	6010      	str	r0, [r2, #0]
 800b5fc:	6053      	str	r3, [r2, #4]
 800b5fe:	e7da      	b.n	800b5b6 <_free_r+0x22>
 800b600:	d902      	bls.n	800b608 <_free_r+0x74>
 800b602:	230c      	movs	r3, #12
 800b604:	602b      	str	r3, [r5, #0]
 800b606:	e7d6      	b.n	800b5b6 <_free_r+0x22>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	1821      	adds	r1, r4, r0
 800b60c:	428b      	cmp	r3, r1
 800b60e:	bf01      	itttt	eq
 800b610:	6819      	ldreq	r1, [r3, #0]
 800b612:	685b      	ldreq	r3, [r3, #4]
 800b614:	1809      	addeq	r1, r1, r0
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	6063      	str	r3, [r4, #4]
 800b61a:	6054      	str	r4, [r2, #4]
 800b61c:	e7cb      	b.n	800b5b6 <_free_r+0x22>
 800b61e:	bd38      	pop	{r3, r4, r5, pc}
 800b620:	20002b04 	.word	0x20002b04

0800b624 <__ssputs_r>:
 800b624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	461f      	mov	r7, r3
 800b62a:	688e      	ldr	r6, [r1, #8]
 800b62c:	4682      	mov	sl, r0
 800b62e:	42be      	cmp	r6, r7
 800b630:	460c      	mov	r4, r1
 800b632:	4690      	mov	r8, r2
 800b634:	680b      	ldr	r3, [r1, #0]
 800b636:	d82c      	bhi.n	800b692 <__ssputs_r+0x6e>
 800b638:	898a      	ldrh	r2, [r1, #12]
 800b63a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b63e:	d026      	beq.n	800b68e <__ssputs_r+0x6a>
 800b640:	6965      	ldr	r5, [r4, #20]
 800b642:	6909      	ldr	r1, [r1, #16]
 800b644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b648:	eba3 0901 	sub.w	r9, r3, r1
 800b64c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b650:	1c7b      	adds	r3, r7, #1
 800b652:	444b      	add	r3, r9
 800b654:	106d      	asrs	r5, r5, #1
 800b656:	429d      	cmp	r5, r3
 800b658:	bf38      	it	cc
 800b65a:	461d      	movcc	r5, r3
 800b65c:	0553      	lsls	r3, r2, #21
 800b65e:	d527      	bpl.n	800b6b0 <__ssputs_r+0x8c>
 800b660:	4629      	mov	r1, r5
 800b662:	f7ff fbc1 	bl	800ade8 <_malloc_r>
 800b666:	4606      	mov	r6, r0
 800b668:	b360      	cbz	r0, 800b6c4 <__ssputs_r+0xa0>
 800b66a:	464a      	mov	r2, r9
 800b66c:	6921      	ldr	r1, [r4, #16]
 800b66e:	f7ff ff82 	bl	800b576 <memcpy>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67c:	81a3      	strh	r3, [r4, #12]
 800b67e:	6126      	str	r6, [r4, #16]
 800b680:	444e      	add	r6, r9
 800b682:	6026      	str	r6, [r4, #0]
 800b684:	463e      	mov	r6, r7
 800b686:	6165      	str	r5, [r4, #20]
 800b688:	eba5 0509 	sub.w	r5, r5, r9
 800b68c:	60a5      	str	r5, [r4, #8]
 800b68e:	42be      	cmp	r6, r7
 800b690:	d900      	bls.n	800b694 <__ssputs_r+0x70>
 800b692:	463e      	mov	r6, r7
 800b694:	4632      	mov	r2, r6
 800b696:	4641      	mov	r1, r8
 800b698:	6820      	ldr	r0, [r4, #0]
 800b69a:	f000 fcfc 	bl	800c096 <memmove>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	1b9b      	subs	r3, r3, r6
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	4433      	add	r3, r6
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	f000 fd3b 	bl	800c12c <_realloc_r>
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d1e0      	bne.n	800b67e <__ssputs_r+0x5a>
 800b6bc:	4650      	mov	r0, sl
 800b6be:	6921      	ldr	r1, [r4, #16]
 800b6c0:	f7ff ff68 	bl	800b594 <_free_r>
 800b6c4:	230c      	movs	r3, #12
 800b6c6:	f8ca 3000 	str.w	r3, [sl]
 800b6ca:	89a3      	ldrh	r3, [r4, #12]
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d4:	81a3      	strh	r3, [r4, #12]
 800b6d6:	e7e9      	b.n	800b6ac <__ssputs_r+0x88>

0800b6d8 <_svfiprintf_r>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	4698      	mov	r8, r3
 800b6de:	898b      	ldrh	r3, [r1, #12]
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	061b      	lsls	r3, r3, #24
 800b6e4:	460d      	mov	r5, r1
 800b6e6:	4614      	mov	r4, r2
 800b6e8:	b09d      	sub	sp, #116	; 0x74
 800b6ea:	d50e      	bpl.n	800b70a <_svfiprintf_r+0x32>
 800b6ec:	690b      	ldr	r3, [r1, #16]
 800b6ee:	b963      	cbnz	r3, 800b70a <_svfiprintf_r+0x32>
 800b6f0:	2140      	movs	r1, #64	; 0x40
 800b6f2:	f7ff fb79 	bl	800ade8 <_malloc_r>
 800b6f6:	6028      	str	r0, [r5, #0]
 800b6f8:	6128      	str	r0, [r5, #16]
 800b6fa:	b920      	cbnz	r0, 800b706 <_svfiprintf_r+0x2e>
 800b6fc:	230c      	movs	r3, #12
 800b6fe:	603b      	str	r3, [r7, #0]
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	e0d0      	b.n	800b8a8 <_svfiprintf_r+0x1d0>
 800b706:	2340      	movs	r3, #64	; 0x40
 800b708:	616b      	str	r3, [r5, #20]
 800b70a:	2300      	movs	r3, #0
 800b70c:	9309      	str	r3, [sp, #36]	; 0x24
 800b70e:	2320      	movs	r3, #32
 800b710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b714:	2330      	movs	r3, #48	; 0x30
 800b716:	f04f 0901 	mov.w	r9, #1
 800b71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b71e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b8c0 <_svfiprintf_r+0x1e8>
 800b722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b726:	4623      	mov	r3, r4
 800b728:	469a      	mov	sl, r3
 800b72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b72e:	b10a      	cbz	r2, 800b734 <_svfiprintf_r+0x5c>
 800b730:	2a25      	cmp	r2, #37	; 0x25
 800b732:	d1f9      	bne.n	800b728 <_svfiprintf_r+0x50>
 800b734:	ebba 0b04 	subs.w	fp, sl, r4
 800b738:	d00b      	beq.n	800b752 <_svfiprintf_r+0x7a>
 800b73a:	465b      	mov	r3, fp
 800b73c:	4622      	mov	r2, r4
 800b73e:	4629      	mov	r1, r5
 800b740:	4638      	mov	r0, r7
 800b742:	f7ff ff6f 	bl	800b624 <__ssputs_r>
 800b746:	3001      	adds	r0, #1
 800b748:	f000 80a9 	beq.w	800b89e <_svfiprintf_r+0x1c6>
 800b74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b74e:	445a      	add	r2, fp
 800b750:	9209      	str	r2, [sp, #36]	; 0x24
 800b752:	f89a 3000 	ldrb.w	r3, [sl]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 80a1 	beq.w	800b89e <_svfiprintf_r+0x1c6>
 800b75c:	2300      	movs	r3, #0
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
 800b762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b766:	f10a 0a01 	add.w	sl, sl, #1
 800b76a:	9304      	str	r3, [sp, #16]
 800b76c:	9307      	str	r3, [sp, #28]
 800b76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b772:	931a      	str	r3, [sp, #104]	; 0x68
 800b774:	4654      	mov	r4, sl
 800b776:	2205      	movs	r2, #5
 800b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77c:	4850      	ldr	r0, [pc, #320]	; (800b8c0 <_svfiprintf_r+0x1e8>)
 800b77e:	f000 fcc7 	bl	800c110 <memchr>
 800b782:	9a04      	ldr	r2, [sp, #16]
 800b784:	b9d8      	cbnz	r0, 800b7be <_svfiprintf_r+0xe6>
 800b786:	06d0      	lsls	r0, r2, #27
 800b788:	bf44      	itt	mi
 800b78a:	2320      	movmi	r3, #32
 800b78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b790:	0711      	lsls	r1, r2, #28
 800b792:	bf44      	itt	mi
 800b794:	232b      	movmi	r3, #43	; 0x2b
 800b796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b79a:	f89a 3000 	ldrb.w	r3, [sl]
 800b79e:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a0:	d015      	beq.n	800b7ce <_svfiprintf_r+0xf6>
 800b7a2:	4654      	mov	r4, sl
 800b7a4:	2000      	movs	r0, #0
 800b7a6:	f04f 0c0a 	mov.w	ip, #10
 800b7aa:	9a07      	ldr	r2, [sp, #28]
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7b2:	3b30      	subs	r3, #48	; 0x30
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d94d      	bls.n	800b854 <_svfiprintf_r+0x17c>
 800b7b8:	b1b0      	cbz	r0, 800b7e8 <_svfiprintf_r+0x110>
 800b7ba:	9207      	str	r2, [sp, #28]
 800b7bc:	e014      	b.n	800b7e8 <_svfiprintf_r+0x110>
 800b7be:	eba0 0308 	sub.w	r3, r0, r8
 800b7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	46a2      	mov	sl, r4
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	e7d2      	b.n	800b774 <_svfiprintf_r+0x9c>
 800b7ce:	9b03      	ldr	r3, [sp, #12]
 800b7d0:	1d19      	adds	r1, r3, #4
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	9103      	str	r1, [sp, #12]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bfbb      	ittet	lt
 800b7da:	425b      	neglt	r3, r3
 800b7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b7e0:	9307      	strge	r3, [sp, #28]
 800b7e2:	9307      	strlt	r3, [sp, #28]
 800b7e4:	bfb8      	it	lt
 800b7e6:	9204      	strlt	r2, [sp, #16]
 800b7e8:	7823      	ldrb	r3, [r4, #0]
 800b7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b7ec:	d10c      	bne.n	800b808 <_svfiprintf_r+0x130>
 800b7ee:	7863      	ldrb	r3, [r4, #1]
 800b7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f2:	d134      	bne.n	800b85e <_svfiprintf_r+0x186>
 800b7f4:	9b03      	ldr	r3, [sp, #12]
 800b7f6:	3402      	adds	r4, #2
 800b7f8:	1d1a      	adds	r2, r3, #4
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	9203      	str	r2, [sp, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfb8      	it	lt
 800b802:	f04f 33ff 	movlt.w	r3, #4294967295
 800b806:	9305      	str	r3, [sp, #20]
 800b808:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b8c4 <_svfiprintf_r+0x1ec>
 800b80c:	2203      	movs	r2, #3
 800b80e:	4650      	mov	r0, sl
 800b810:	7821      	ldrb	r1, [r4, #0]
 800b812:	f000 fc7d 	bl	800c110 <memchr>
 800b816:	b138      	cbz	r0, 800b828 <_svfiprintf_r+0x150>
 800b818:	2240      	movs	r2, #64	; 0x40
 800b81a:	9b04      	ldr	r3, [sp, #16]
 800b81c:	eba0 000a 	sub.w	r0, r0, sl
 800b820:	4082      	lsls	r2, r0
 800b822:	4313      	orrs	r3, r2
 800b824:	3401      	adds	r4, #1
 800b826:	9304      	str	r3, [sp, #16]
 800b828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82c:	2206      	movs	r2, #6
 800b82e:	4826      	ldr	r0, [pc, #152]	; (800b8c8 <_svfiprintf_r+0x1f0>)
 800b830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b834:	f000 fc6c 	bl	800c110 <memchr>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d038      	beq.n	800b8ae <_svfiprintf_r+0x1d6>
 800b83c:	4b23      	ldr	r3, [pc, #140]	; (800b8cc <_svfiprintf_r+0x1f4>)
 800b83e:	bb1b      	cbnz	r3, 800b888 <_svfiprintf_r+0x1b0>
 800b840:	9b03      	ldr	r3, [sp, #12]
 800b842:	3307      	adds	r3, #7
 800b844:	f023 0307 	bic.w	r3, r3, #7
 800b848:	3308      	adds	r3, #8
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84e:	4433      	add	r3, r6
 800b850:	9309      	str	r3, [sp, #36]	; 0x24
 800b852:	e768      	b.n	800b726 <_svfiprintf_r+0x4e>
 800b854:	460c      	mov	r4, r1
 800b856:	2001      	movs	r0, #1
 800b858:	fb0c 3202 	mla	r2, ip, r2, r3
 800b85c:	e7a6      	b.n	800b7ac <_svfiprintf_r+0xd4>
 800b85e:	2300      	movs	r3, #0
 800b860:	f04f 0c0a 	mov.w	ip, #10
 800b864:	4619      	mov	r1, r3
 800b866:	3401      	adds	r4, #1
 800b868:	9305      	str	r3, [sp, #20]
 800b86a:	4620      	mov	r0, r4
 800b86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b870:	3a30      	subs	r2, #48	; 0x30
 800b872:	2a09      	cmp	r2, #9
 800b874:	d903      	bls.n	800b87e <_svfiprintf_r+0x1a6>
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0c6      	beq.n	800b808 <_svfiprintf_r+0x130>
 800b87a:	9105      	str	r1, [sp, #20]
 800b87c:	e7c4      	b.n	800b808 <_svfiprintf_r+0x130>
 800b87e:	4604      	mov	r4, r0
 800b880:	2301      	movs	r3, #1
 800b882:	fb0c 2101 	mla	r1, ip, r1, r2
 800b886:	e7f0      	b.n	800b86a <_svfiprintf_r+0x192>
 800b888:	ab03      	add	r3, sp, #12
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	462a      	mov	r2, r5
 800b88e:	4638      	mov	r0, r7
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <_svfiprintf_r+0x1f8>)
 800b892:	a904      	add	r1, sp, #16
 800b894:	f3af 8000 	nop.w
 800b898:	1c42      	adds	r2, r0, #1
 800b89a:	4606      	mov	r6, r0
 800b89c:	d1d6      	bne.n	800b84c <_svfiprintf_r+0x174>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	065b      	lsls	r3, r3, #25
 800b8a2:	f53f af2d 	bmi.w	800b700 <_svfiprintf_r+0x28>
 800b8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8a8:	b01d      	add	sp, #116	; 0x74
 800b8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ae:	ab03      	add	r3, sp, #12
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	4638      	mov	r0, r7
 800b8b6:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <_svfiprintf_r+0x1f8>)
 800b8b8:	a904      	add	r1, sp, #16
 800b8ba:	f000 f9bf 	bl	800bc3c <_printf_i>
 800b8be:	e7eb      	b.n	800b898 <_svfiprintf_r+0x1c0>
 800b8c0:	0800c60c 	.word	0x0800c60c
 800b8c4:	0800c612 	.word	0x0800c612
 800b8c8:	0800c616 	.word	0x0800c616
 800b8cc:	00000000 	.word	0x00000000
 800b8d0:	0800b625 	.word	0x0800b625

0800b8d4 <__sfputc_r>:
 800b8d4:	6893      	ldr	r3, [r2, #8]
 800b8d6:	b410      	push	{r4}
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	6093      	str	r3, [r2, #8]
 800b8de:	da07      	bge.n	800b8f0 <__sfputc_r+0x1c>
 800b8e0:	6994      	ldr	r4, [r2, #24]
 800b8e2:	42a3      	cmp	r3, r4
 800b8e4:	db01      	blt.n	800b8ea <__sfputc_r+0x16>
 800b8e6:	290a      	cmp	r1, #10
 800b8e8:	d102      	bne.n	800b8f0 <__sfputc_r+0x1c>
 800b8ea:	bc10      	pop	{r4}
 800b8ec:	f7ff bcaf 	b.w	800b24e <__swbuf_r>
 800b8f0:	6813      	ldr	r3, [r2, #0]
 800b8f2:	1c58      	adds	r0, r3, #1
 800b8f4:	6010      	str	r0, [r2, #0]
 800b8f6:	7019      	strb	r1, [r3, #0]
 800b8f8:	4608      	mov	r0, r1
 800b8fa:	bc10      	pop	{r4}
 800b8fc:	4770      	bx	lr

0800b8fe <__sfputs_r>:
 800b8fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b900:	4606      	mov	r6, r0
 800b902:	460f      	mov	r7, r1
 800b904:	4614      	mov	r4, r2
 800b906:	18d5      	adds	r5, r2, r3
 800b908:	42ac      	cmp	r4, r5
 800b90a:	d101      	bne.n	800b910 <__sfputs_r+0x12>
 800b90c:	2000      	movs	r0, #0
 800b90e:	e007      	b.n	800b920 <__sfputs_r+0x22>
 800b910:	463a      	mov	r2, r7
 800b912:	4630      	mov	r0, r6
 800b914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b918:	f7ff ffdc 	bl	800b8d4 <__sfputc_r>
 800b91c:	1c43      	adds	r3, r0, #1
 800b91e:	d1f3      	bne.n	800b908 <__sfputs_r+0xa>
 800b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b924 <_vfiprintf_r>:
 800b924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	460d      	mov	r5, r1
 800b92a:	4614      	mov	r4, r2
 800b92c:	4698      	mov	r8, r3
 800b92e:	4606      	mov	r6, r0
 800b930:	b09d      	sub	sp, #116	; 0x74
 800b932:	b118      	cbz	r0, 800b93c <_vfiprintf_r+0x18>
 800b934:	6a03      	ldr	r3, [r0, #32]
 800b936:	b90b      	cbnz	r3, 800b93c <_vfiprintf_r+0x18>
 800b938:	f7ff fb6e 	bl	800b018 <__sinit>
 800b93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b93e:	07d9      	lsls	r1, r3, #31
 800b940:	d405      	bmi.n	800b94e <_vfiprintf_r+0x2a>
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	059a      	lsls	r2, r3, #22
 800b946:	d402      	bmi.n	800b94e <_vfiprintf_r+0x2a>
 800b948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b94a:	f7ff fe0a 	bl	800b562 <__retarget_lock_acquire_recursive>
 800b94e:	89ab      	ldrh	r3, [r5, #12]
 800b950:	071b      	lsls	r3, r3, #28
 800b952:	d501      	bpl.n	800b958 <_vfiprintf_r+0x34>
 800b954:	692b      	ldr	r3, [r5, #16]
 800b956:	b99b      	cbnz	r3, 800b980 <_vfiprintf_r+0x5c>
 800b958:	4629      	mov	r1, r5
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff fcb4 	bl	800b2c8 <__swsetup_r>
 800b960:	b170      	cbz	r0, 800b980 <_vfiprintf_r+0x5c>
 800b962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b964:	07dc      	lsls	r4, r3, #31
 800b966:	d504      	bpl.n	800b972 <_vfiprintf_r+0x4e>
 800b968:	f04f 30ff 	mov.w	r0, #4294967295
 800b96c:	b01d      	add	sp, #116	; 0x74
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	0598      	lsls	r0, r3, #22
 800b976:	d4f7      	bmi.n	800b968 <_vfiprintf_r+0x44>
 800b978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b97a:	f7ff fdf3 	bl	800b564 <__retarget_lock_release_recursive>
 800b97e:	e7f3      	b.n	800b968 <_vfiprintf_r+0x44>
 800b980:	2300      	movs	r3, #0
 800b982:	9309      	str	r3, [sp, #36]	; 0x24
 800b984:	2320      	movs	r3, #32
 800b986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b98a:	2330      	movs	r3, #48	; 0x30
 800b98c:	f04f 0901 	mov.w	r9, #1
 800b990:	f8cd 800c 	str.w	r8, [sp, #12]
 800b994:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800bb44 <_vfiprintf_r+0x220>
 800b998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b99c:	4623      	mov	r3, r4
 800b99e:	469a      	mov	sl, r3
 800b9a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a4:	b10a      	cbz	r2, 800b9aa <_vfiprintf_r+0x86>
 800b9a6:	2a25      	cmp	r2, #37	; 0x25
 800b9a8:	d1f9      	bne.n	800b99e <_vfiprintf_r+0x7a>
 800b9aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ae:	d00b      	beq.n	800b9c8 <_vfiprintf_r+0xa4>
 800b9b0:	465b      	mov	r3, fp
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ffa1 	bl	800b8fe <__sfputs_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	f000 80a9 	beq.w	800bb14 <_vfiprintf_r+0x1f0>
 800b9c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9c4:	445a      	add	r2, fp
 800b9c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80a1 	beq.w	800bb14 <_vfiprintf_r+0x1f0>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9dc:	f10a 0a01 	add.w	sl, sl, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ea:	4654      	mov	r4, sl
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f2:	4854      	ldr	r0, [pc, #336]	; (800bb44 <_vfiprintf_r+0x220>)
 800b9f4:	f000 fb8c 	bl	800c110 <memchr>
 800b9f8:	9a04      	ldr	r2, [sp, #16]
 800b9fa:	b9d8      	cbnz	r0, 800ba34 <_vfiprintf_r+0x110>
 800b9fc:	06d1      	lsls	r1, r2, #27
 800b9fe:	bf44      	itt	mi
 800ba00:	2320      	movmi	r3, #32
 800ba02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba06:	0713      	lsls	r3, r2, #28
 800ba08:	bf44      	itt	mi
 800ba0a:	232b      	movmi	r3, #43	; 0x2b
 800ba0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba10:	f89a 3000 	ldrb.w	r3, [sl]
 800ba14:	2b2a      	cmp	r3, #42	; 0x2a
 800ba16:	d015      	beq.n	800ba44 <_vfiprintf_r+0x120>
 800ba18:	4654      	mov	r4, sl
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	f04f 0c0a 	mov.w	ip, #10
 800ba20:	9a07      	ldr	r2, [sp, #28]
 800ba22:	4621      	mov	r1, r4
 800ba24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba28:	3b30      	subs	r3, #48	; 0x30
 800ba2a:	2b09      	cmp	r3, #9
 800ba2c:	d94d      	bls.n	800baca <_vfiprintf_r+0x1a6>
 800ba2e:	b1b0      	cbz	r0, 800ba5e <_vfiprintf_r+0x13a>
 800ba30:	9207      	str	r2, [sp, #28]
 800ba32:	e014      	b.n	800ba5e <_vfiprintf_r+0x13a>
 800ba34:	eba0 0308 	sub.w	r3, r0, r8
 800ba38:	fa09 f303 	lsl.w	r3, r9, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	46a2      	mov	sl, r4
 800ba40:	9304      	str	r3, [sp, #16]
 800ba42:	e7d2      	b.n	800b9ea <_vfiprintf_r+0xc6>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	1d19      	adds	r1, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	9103      	str	r1, [sp, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfbb      	ittet	lt
 800ba50:	425b      	neglt	r3, r3
 800ba52:	f042 0202 	orrlt.w	r2, r2, #2
 800ba56:	9307      	strge	r3, [sp, #28]
 800ba58:	9307      	strlt	r3, [sp, #28]
 800ba5a:	bfb8      	it	lt
 800ba5c:	9204      	strlt	r2, [sp, #16]
 800ba5e:	7823      	ldrb	r3, [r4, #0]
 800ba60:	2b2e      	cmp	r3, #46	; 0x2e
 800ba62:	d10c      	bne.n	800ba7e <_vfiprintf_r+0x15a>
 800ba64:	7863      	ldrb	r3, [r4, #1]
 800ba66:	2b2a      	cmp	r3, #42	; 0x2a
 800ba68:	d134      	bne.n	800bad4 <_vfiprintf_r+0x1b0>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	3402      	adds	r4, #2
 800ba6e:	1d1a      	adds	r2, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	9203      	str	r2, [sp, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bfb8      	it	lt
 800ba78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba7c:	9305      	str	r3, [sp, #20]
 800ba7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb48 <_vfiprintf_r+0x224>
 800ba82:	2203      	movs	r2, #3
 800ba84:	4650      	mov	r0, sl
 800ba86:	7821      	ldrb	r1, [r4, #0]
 800ba88:	f000 fb42 	bl	800c110 <memchr>
 800ba8c:	b138      	cbz	r0, 800ba9e <_vfiprintf_r+0x17a>
 800ba8e:	2240      	movs	r2, #64	; 0x40
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	eba0 000a 	sub.w	r0, r0, sl
 800ba96:	4082      	lsls	r2, r0
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	3401      	adds	r4, #1
 800ba9c:	9304      	str	r3, [sp, #16]
 800ba9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa2:	2206      	movs	r2, #6
 800baa4:	4829      	ldr	r0, [pc, #164]	; (800bb4c <_vfiprintf_r+0x228>)
 800baa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baaa:	f000 fb31 	bl	800c110 <memchr>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d03f      	beq.n	800bb32 <_vfiprintf_r+0x20e>
 800bab2:	4b27      	ldr	r3, [pc, #156]	; (800bb50 <_vfiprintf_r+0x22c>)
 800bab4:	bb1b      	cbnz	r3, 800bafe <_vfiprintf_r+0x1da>
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	3307      	adds	r3, #7
 800baba:	f023 0307 	bic.w	r3, r3, #7
 800babe:	3308      	adds	r3, #8
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac4:	443b      	add	r3, r7
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	e768      	b.n	800b99c <_vfiprintf_r+0x78>
 800baca:	460c      	mov	r4, r1
 800bacc:	2001      	movs	r0, #1
 800bace:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad2:	e7a6      	b.n	800ba22 <_vfiprintf_r+0xfe>
 800bad4:	2300      	movs	r3, #0
 800bad6:	f04f 0c0a 	mov.w	ip, #10
 800bada:	4619      	mov	r1, r3
 800badc:	3401      	adds	r4, #1
 800bade:	9305      	str	r3, [sp, #20]
 800bae0:	4620      	mov	r0, r4
 800bae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae6:	3a30      	subs	r2, #48	; 0x30
 800bae8:	2a09      	cmp	r2, #9
 800baea:	d903      	bls.n	800baf4 <_vfiprintf_r+0x1d0>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0c6      	beq.n	800ba7e <_vfiprintf_r+0x15a>
 800baf0:	9105      	str	r1, [sp, #20]
 800baf2:	e7c4      	b.n	800ba7e <_vfiprintf_r+0x15a>
 800baf4:	4604      	mov	r4, r0
 800baf6:	2301      	movs	r3, #1
 800baf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bafc:	e7f0      	b.n	800bae0 <_vfiprintf_r+0x1bc>
 800bafe:	ab03      	add	r3, sp, #12
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	462a      	mov	r2, r5
 800bb04:	4630      	mov	r0, r6
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <_vfiprintf_r+0x230>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	f3af 8000 	nop.w
 800bb0e:	4607      	mov	r7, r0
 800bb10:	1c78      	adds	r0, r7, #1
 800bb12:	d1d6      	bne.n	800bac2 <_vfiprintf_r+0x19e>
 800bb14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb16:	07d9      	lsls	r1, r3, #31
 800bb18:	d405      	bmi.n	800bb26 <_vfiprintf_r+0x202>
 800bb1a:	89ab      	ldrh	r3, [r5, #12]
 800bb1c:	059a      	lsls	r2, r3, #22
 800bb1e:	d402      	bmi.n	800bb26 <_vfiprintf_r+0x202>
 800bb20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb22:	f7ff fd1f 	bl	800b564 <__retarget_lock_release_recursive>
 800bb26:	89ab      	ldrh	r3, [r5, #12]
 800bb28:	065b      	lsls	r3, r3, #25
 800bb2a:	f53f af1d 	bmi.w	800b968 <_vfiprintf_r+0x44>
 800bb2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb30:	e71c      	b.n	800b96c <_vfiprintf_r+0x48>
 800bb32:	ab03      	add	r3, sp, #12
 800bb34:	9300      	str	r3, [sp, #0]
 800bb36:	462a      	mov	r2, r5
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4b06      	ldr	r3, [pc, #24]	; (800bb54 <_vfiprintf_r+0x230>)
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	f000 f87d 	bl	800bc3c <_printf_i>
 800bb42:	e7e4      	b.n	800bb0e <_vfiprintf_r+0x1ea>
 800bb44:	0800c60c 	.word	0x0800c60c
 800bb48:	0800c612 	.word	0x0800c612
 800bb4c:	0800c616 	.word	0x0800c616
 800bb50:	00000000 	.word	0x00000000
 800bb54:	0800b8ff 	.word	0x0800b8ff

0800bb58 <_printf_common>:
 800bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb5c:	4616      	mov	r6, r2
 800bb5e:	4699      	mov	r9, r3
 800bb60:	688a      	ldr	r2, [r1, #8]
 800bb62:	690b      	ldr	r3, [r1, #16]
 800bb64:	4607      	mov	r7, r0
 800bb66:	4293      	cmp	r3, r2
 800bb68:	bfb8      	it	lt
 800bb6a:	4613      	movlt	r3, r2
 800bb6c:	6033      	str	r3, [r6, #0]
 800bb6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb72:	460c      	mov	r4, r1
 800bb74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb78:	b10a      	cbz	r2, 800bb7e <_printf_common+0x26>
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	0699      	lsls	r1, r3, #26
 800bb82:	bf42      	ittt	mi
 800bb84:	6833      	ldrmi	r3, [r6, #0]
 800bb86:	3302      	addmi	r3, #2
 800bb88:	6033      	strmi	r3, [r6, #0]
 800bb8a:	6825      	ldr	r5, [r4, #0]
 800bb8c:	f015 0506 	ands.w	r5, r5, #6
 800bb90:	d106      	bne.n	800bba0 <_printf_common+0x48>
 800bb92:	f104 0a19 	add.w	sl, r4, #25
 800bb96:	68e3      	ldr	r3, [r4, #12]
 800bb98:	6832      	ldr	r2, [r6, #0]
 800bb9a:	1a9b      	subs	r3, r3, r2
 800bb9c:	42ab      	cmp	r3, r5
 800bb9e:	dc2b      	bgt.n	800bbf8 <_printf_common+0xa0>
 800bba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bba4:	1e13      	subs	r3, r2, #0
 800bba6:	6822      	ldr	r2, [r4, #0]
 800bba8:	bf18      	it	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	0692      	lsls	r2, r2, #26
 800bbae:	d430      	bmi.n	800bc12 <_printf_common+0xba>
 800bbb0:	4649      	mov	r1, r9
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbb8:	47c0      	blx	r8
 800bbba:	3001      	adds	r0, #1
 800bbbc:	d023      	beq.n	800bc06 <_printf_common+0xae>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	f003 0306 	and.w	r3, r3, #6
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	bf14      	ite	ne
 800bbca:	2500      	movne	r5, #0
 800bbcc:	6833      	ldreq	r3, [r6, #0]
 800bbce:	f04f 0600 	mov.w	r6, #0
 800bbd2:	bf08      	it	eq
 800bbd4:	68e5      	ldreq	r5, [r4, #12]
 800bbd6:	f104 041a 	add.w	r4, r4, #26
 800bbda:	bf08      	it	eq
 800bbdc:	1aed      	subeq	r5, r5, r3
 800bbde:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bbe2:	bf08      	it	eq
 800bbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	bfc4      	itt	gt
 800bbec:	1a9b      	subgt	r3, r3, r2
 800bbee:	18ed      	addgt	r5, r5, r3
 800bbf0:	42b5      	cmp	r5, r6
 800bbf2:	d11a      	bne.n	800bc2a <_printf_common+0xd2>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e008      	b.n	800bc0a <_printf_common+0xb2>
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	4652      	mov	r2, sl
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	4638      	mov	r0, r7
 800bc00:	47c0      	blx	r8
 800bc02:	3001      	adds	r0, #1
 800bc04:	d103      	bne.n	800bc0e <_printf_common+0xb6>
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc0e:	3501      	adds	r5, #1
 800bc10:	e7c1      	b.n	800bb96 <_printf_common+0x3e>
 800bc12:	2030      	movs	r0, #48	; 0x30
 800bc14:	18e1      	adds	r1, r4, r3
 800bc16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc20:	4422      	add	r2, r4
 800bc22:	3302      	adds	r3, #2
 800bc24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc28:	e7c2      	b.n	800bbb0 <_printf_common+0x58>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4649      	mov	r1, r9
 800bc30:	4638      	mov	r0, r7
 800bc32:	47c0      	blx	r8
 800bc34:	3001      	adds	r0, #1
 800bc36:	d0e6      	beq.n	800bc06 <_printf_common+0xae>
 800bc38:	3601      	adds	r6, #1
 800bc3a:	e7d9      	b.n	800bbf0 <_printf_common+0x98>

0800bc3c <_printf_i>:
 800bc3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc40:	7e0f      	ldrb	r7, [r1, #24]
 800bc42:	4691      	mov	r9, r2
 800bc44:	2f78      	cmp	r7, #120	; 0x78
 800bc46:	4680      	mov	r8, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	469a      	mov	sl, r3
 800bc4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc52:	d807      	bhi.n	800bc64 <_printf_i+0x28>
 800bc54:	2f62      	cmp	r7, #98	; 0x62
 800bc56:	d80a      	bhi.n	800bc6e <_printf_i+0x32>
 800bc58:	2f00      	cmp	r7, #0
 800bc5a:	f000 80d5 	beq.w	800be08 <_printf_i+0x1cc>
 800bc5e:	2f58      	cmp	r7, #88	; 0x58
 800bc60:	f000 80c1 	beq.w	800bde6 <_printf_i+0x1aa>
 800bc64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc6c:	e03a      	b.n	800bce4 <_printf_i+0xa8>
 800bc6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc72:	2b15      	cmp	r3, #21
 800bc74:	d8f6      	bhi.n	800bc64 <_printf_i+0x28>
 800bc76:	a101      	add	r1, pc, #4	; (adr r1, 800bc7c <_printf_i+0x40>)
 800bc78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc7c:	0800bcd5 	.word	0x0800bcd5
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bc65 	.word	0x0800bc65
 800bc88:	0800bc65 	.word	0x0800bc65
 800bc8c:	0800bc65 	.word	0x0800bc65
 800bc90:	0800bc65 	.word	0x0800bc65
 800bc94:	0800bce9 	.word	0x0800bce9
 800bc98:	0800bc65 	.word	0x0800bc65
 800bc9c:	0800bc65 	.word	0x0800bc65
 800bca0:	0800bc65 	.word	0x0800bc65
 800bca4:	0800bc65 	.word	0x0800bc65
 800bca8:	0800bdef 	.word	0x0800bdef
 800bcac:	0800bd15 	.word	0x0800bd15
 800bcb0:	0800bda9 	.word	0x0800bda9
 800bcb4:	0800bc65 	.word	0x0800bc65
 800bcb8:	0800bc65 	.word	0x0800bc65
 800bcbc:	0800be11 	.word	0x0800be11
 800bcc0:	0800bc65 	.word	0x0800bc65
 800bcc4:	0800bd15 	.word	0x0800bd15
 800bcc8:	0800bc65 	.word	0x0800bc65
 800bccc:	0800bc65 	.word	0x0800bc65
 800bcd0:	0800bdb1 	.word	0x0800bdb1
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	1d1a      	adds	r2, r3, #4
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	602a      	str	r2, [r5, #0]
 800bcdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bce4:	2301      	movs	r3, #1
 800bce6:	e0a0      	b.n	800be2a <_printf_i+0x1ee>
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	0607      	lsls	r7, r0, #24
 800bcee:	f103 0104 	add.w	r1, r3, #4
 800bcf2:	6029      	str	r1, [r5, #0]
 800bcf4:	d501      	bpl.n	800bcfa <_printf_i+0xbe>
 800bcf6:	681e      	ldr	r6, [r3, #0]
 800bcf8:	e003      	b.n	800bd02 <_printf_i+0xc6>
 800bcfa:	0646      	lsls	r6, r0, #25
 800bcfc:	d5fb      	bpl.n	800bcf6 <_printf_i+0xba>
 800bcfe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bd02:	2e00      	cmp	r6, #0
 800bd04:	da03      	bge.n	800bd0e <_printf_i+0xd2>
 800bd06:	232d      	movs	r3, #45	; 0x2d
 800bd08:	4276      	negs	r6, r6
 800bd0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd0e:	230a      	movs	r3, #10
 800bd10:	4859      	ldr	r0, [pc, #356]	; (800be78 <_printf_i+0x23c>)
 800bd12:	e012      	b.n	800bd3a <_printf_i+0xfe>
 800bd14:	682b      	ldr	r3, [r5, #0]
 800bd16:	6820      	ldr	r0, [r4, #0]
 800bd18:	1d19      	adds	r1, r3, #4
 800bd1a:	6029      	str	r1, [r5, #0]
 800bd1c:	0605      	lsls	r5, r0, #24
 800bd1e:	d501      	bpl.n	800bd24 <_printf_i+0xe8>
 800bd20:	681e      	ldr	r6, [r3, #0]
 800bd22:	e002      	b.n	800bd2a <_printf_i+0xee>
 800bd24:	0641      	lsls	r1, r0, #25
 800bd26:	d5fb      	bpl.n	800bd20 <_printf_i+0xe4>
 800bd28:	881e      	ldrh	r6, [r3, #0]
 800bd2a:	2f6f      	cmp	r7, #111	; 0x6f
 800bd2c:	bf0c      	ite	eq
 800bd2e:	2308      	moveq	r3, #8
 800bd30:	230a      	movne	r3, #10
 800bd32:	4851      	ldr	r0, [pc, #324]	; (800be78 <_printf_i+0x23c>)
 800bd34:	2100      	movs	r1, #0
 800bd36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd3a:	6865      	ldr	r5, [r4, #4]
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	bfa8      	it	ge
 800bd40:	6821      	ldrge	r1, [r4, #0]
 800bd42:	60a5      	str	r5, [r4, #8]
 800bd44:	bfa4      	itt	ge
 800bd46:	f021 0104 	bicge.w	r1, r1, #4
 800bd4a:	6021      	strge	r1, [r4, #0]
 800bd4c:	b90e      	cbnz	r6, 800bd52 <_printf_i+0x116>
 800bd4e:	2d00      	cmp	r5, #0
 800bd50:	d04b      	beq.n	800bdea <_printf_i+0x1ae>
 800bd52:	4615      	mov	r5, r2
 800bd54:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd58:	fb03 6711 	mls	r7, r3, r1, r6
 800bd5c:	5dc7      	ldrb	r7, [r0, r7]
 800bd5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd62:	4637      	mov	r7, r6
 800bd64:	42bb      	cmp	r3, r7
 800bd66:	460e      	mov	r6, r1
 800bd68:	d9f4      	bls.n	800bd54 <_printf_i+0x118>
 800bd6a:	2b08      	cmp	r3, #8
 800bd6c:	d10b      	bne.n	800bd86 <_printf_i+0x14a>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	07de      	lsls	r6, r3, #31
 800bd72:	d508      	bpl.n	800bd86 <_printf_i+0x14a>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	6861      	ldr	r1, [r4, #4]
 800bd78:	4299      	cmp	r1, r3
 800bd7a:	bfde      	ittt	le
 800bd7c:	2330      	movle	r3, #48	; 0x30
 800bd7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd82:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd86:	1b52      	subs	r2, r2, r5
 800bd88:	6122      	str	r2, [r4, #16]
 800bd8a:	464b      	mov	r3, r9
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	4640      	mov	r0, r8
 800bd90:	f8cd a000 	str.w	sl, [sp]
 800bd94:	aa03      	add	r2, sp, #12
 800bd96:	f7ff fedf 	bl	800bb58 <_printf_common>
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	d14a      	bne.n	800be34 <_printf_i+0x1f8>
 800bd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bda2:	b004      	add	sp, #16
 800bda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	f043 0320 	orr.w	r3, r3, #32
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	2778      	movs	r7, #120	; 0x78
 800bdb2:	4832      	ldr	r0, [pc, #200]	; (800be7c <_printf_i+0x240>)
 800bdb4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	6829      	ldr	r1, [r5, #0]
 800bdbc:	061f      	lsls	r7, r3, #24
 800bdbe:	f851 6b04 	ldr.w	r6, [r1], #4
 800bdc2:	d402      	bmi.n	800bdca <_printf_i+0x18e>
 800bdc4:	065f      	lsls	r7, r3, #25
 800bdc6:	bf48      	it	mi
 800bdc8:	b2b6      	uxthmi	r6, r6
 800bdca:	07df      	lsls	r7, r3, #31
 800bdcc:	bf48      	it	mi
 800bdce:	f043 0320 	orrmi.w	r3, r3, #32
 800bdd2:	6029      	str	r1, [r5, #0]
 800bdd4:	bf48      	it	mi
 800bdd6:	6023      	strmi	r3, [r4, #0]
 800bdd8:	b91e      	cbnz	r6, 800bde2 <_printf_i+0x1a6>
 800bdda:	6823      	ldr	r3, [r4, #0]
 800bddc:	f023 0320 	bic.w	r3, r3, #32
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	2310      	movs	r3, #16
 800bde4:	e7a6      	b.n	800bd34 <_printf_i+0xf8>
 800bde6:	4824      	ldr	r0, [pc, #144]	; (800be78 <_printf_i+0x23c>)
 800bde8:	e7e4      	b.n	800bdb4 <_printf_i+0x178>
 800bdea:	4615      	mov	r5, r2
 800bdec:	e7bd      	b.n	800bd6a <_printf_i+0x12e>
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	6826      	ldr	r6, [r4, #0]
 800bdf2:	1d18      	adds	r0, r3, #4
 800bdf4:	6961      	ldr	r1, [r4, #20]
 800bdf6:	6028      	str	r0, [r5, #0]
 800bdf8:	0635      	lsls	r5, r6, #24
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	d501      	bpl.n	800be02 <_printf_i+0x1c6>
 800bdfe:	6019      	str	r1, [r3, #0]
 800be00:	e002      	b.n	800be08 <_printf_i+0x1cc>
 800be02:	0670      	lsls	r0, r6, #25
 800be04:	d5fb      	bpl.n	800bdfe <_printf_i+0x1c2>
 800be06:	8019      	strh	r1, [r3, #0]
 800be08:	2300      	movs	r3, #0
 800be0a:	4615      	mov	r5, r2
 800be0c:	6123      	str	r3, [r4, #16]
 800be0e:	e7bc      	b.n	800bd8a <_printf_i+0x14e>
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	2100      	movs	r1, #0
 800be14:	1d1a      	adds	r2, r3, #4
 800be16:	602a      	str	r2, [r5, #0]
 800be18:	681d      	ldr	r5, [r3, #0]
 800be1a:	6862      	ldr	r2, [r4, #4]
 800be1c:	4628      	mov	r0, r5
 800be1e:	f000 f977 	bl	800c110 <memchr>
 800be22:	b108      	cbz	r0, 800be28 <_printf_i+0x1ec>
 800be24:	1b40      	subs	r0, r0, r5
 800be26:	6060      	str	r0, [r4, #4]
 800be28:	6863      	ldr	r3, [r4, #4]
 800be2a:	6123      	str	r3, [r4, #16]
 800be2c:	2300      	movs	r3, #0
 800be2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be32:	e7aa      	b.n	800bd8a <_printf_i+0x14e>
 800be34:	462a      	mov	r2, r5
 800be36:	4649      	mov	r1, r9
 800be38:	4640      	mov	r0, r8
 800be3a:	6923      	ldr	r3, [r4, #16]
 800be3c:	47d0      	blx	sl
 800be3e:	3001      	adds	r0, #1
 800be40:	d0ad      	beq.n	800bd9e <_printf_i+0x162>
 800be42:	6823      	ldr	r3, [r4, #0]
 800be44:	079b      	lsls	r3, r3, #30
 800be46:	d413      	bmi.n	800be70 <_printf_i+0x234>
 800be48:	68e0      	ldr	r0, [r4, #12]
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	4298      	cmp	r0, r3
 800be4e:	bfb8      	it	lt
 800be50:	4618      	movlt	r0, r3
 800be52:	e7a6      	b.n	800bda2 <_printf_i+0x166>
 800be54:	2301      	movs	r3, #1
 800be56:	4632      	mov	r2, r6
 800be58:	4649      	mov	r1, r9
 800be5a:	4640      	mov	r0, r8
 800be5c:	47d0      	blx	sl
 800be5e:	3001      	adds	r0, #1
 800be60:	d09d      	beq.n	800bd9e <_printf_i+0x162>
 800be62:	3501      	adds	r5, #1
 800be64:	68e3      	ldr	r3, [r4, #12]
 800be66:	9903      	ldr	r1, [sp, #12]
 800be68:	1a5b      	subs	r3, r3, r1
 800be6a:	42ab      	cmp	r3, r5
 800be6c:	dcf2      	bgt.n	800be54 <_printf_i+0x218>
 800be6e:	e7eb      	b.n	800be48 <_printf_i+0x20c>
 800be70:	2500      	movs	r5, #0
 800be72:	f104 0619 	add.w	r6, r4, #25
 800be76:	e7f5      	b.n	800be64 <_printf_i+0x228>
 800be78:	0800c61d 	.word	0x0800c61d
 800be7c:	0800c62e 	.word	0x0800c62e

0800be80 <__sflush_r>:
 800be80:	898a      	ldrh	r2, [r1, #12]
 800be82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be84:	4605      	mov	r5, r0
 800be86:	0710      	lsls	r0, r2, #28
 800be88:	460c      	mov	r4, r1
 800be8a:	d457      	bmi.n	800bf3c <__sflush_r+0xbc>
 800be8c:	684b      	ldr	r3, [r1, #4]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	dc04      	bgt.n	800be9c <__sflush_r+0x1c>
 800be92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	dc01      	bgt.n	800be9c <__sflush_r+0x1c>
 800be98:	2000      	movs	r0, #0
 800be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d0fa      	beq.n	800be98 <__sflush_r+0x18>
 800bea2:	2300      	movs	r3, #0
 800bea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bea8:	682f      	ldr	r7, [r5, #0]
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	602b      	str	r3, [r5, #0]
 800beae:	d032      	beq.n	800bf16 <__sflush_r+0x96>
 800beb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	075a      	lsls	r2, r3, #29
 800beb6:	d505      	bpl.n	800bec4 <__sflush_r+0x44>
 800beb8:	6863      	ldr	r3, [r4, #4]
 800beba:	1ac0      	subs	r0, r0, r3
 800bebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bebe:	b10b      	cbz	r3, 800bec4 <__sflush_r+0x44>
 800bec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bec2:	1ac0      	subs	r0, r0, r3
 800bec4:	2300      	movs	r3, #0
 800bec6:	4602      	mov	r2, r0
 800bec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beca:	4628      	mov	r0, r5
 800becc:	6a21      	ldr	r1, [r4, #32]
 800bece:	47b0      	blx	r6
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	d106      	bne.n	800bee4 <__sflush_r+0x64>
 800bed6:	6829      	ldr	r1, [r5, #0]
 800bed8:	291d      	cmp	r1, #29
 800beda:	d82b      	bhi.n	800bf34 <__sflush_r+0xb4>
 800bedc:	4a28      	ldr	r2, [pc, #160]	; (800bf80 <__sflush_r+0x100>)
 800bede:	410a      	asrs	r2, r1
 800bee0:	07d6      	lsls	r6, r2, #31
 800bee2:	d427      	bmi.n	800bf34 <__sflush_r+0xb4>
 800bee4:	2200      	movs	r2, #0
 800bee6:	6062      	str	r2, [r4, #4]
 800bee8:	6922      	ldr	r2, [r4, #16]
 800beea:	04d9      	lsls	r1, r3, #19
 800beec:	6022      	str	r2, [r4, #0]
 800beee:	d504      	bpl.n	800befa <__sflush_r+0x7a>
 800bef0:	1c42      	adds	r2, r0, #1
 800bef2:	d101      	bne.n	800bef8 <__sflush_r+0x78>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b903      	cbnz	r3, 800befa <__sflush_r+0x7a>
 800bef8:	6560      	str	r0, [r4, #84]	; 0x54
 800befa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befc:	602f      	str	r7, [r5, #0]
 800befe:	2900      	cmp	r1, #0
 800bf00:	d0ca      	beq.n	800be98 <__sflush_r+0x18>
 800bf02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf06:	4299      	cmp	r1, r3
 800bf08:	d002      	beq.n	800bf10 <__sflush_r+0x90>
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7ff fb42 	bl	800b594 <_free_r>
 800bf10:	2000      	movs	r0, #0
 800bf12:	6360      	str	r0, [r4, #52]	; 0x34
 800bf14:	e7c1      	b.n	800be9a <__sflush_r+0x1a>
 800bf16:	2301      	movs	r3, #1
 800bf18:	4628      	mov	r0, r5
 800bf1a:	47b0      	blx	r6
 800bf1c:	1c41      	adds	r1, r0, #1
 800bf1e:	d1c8      	bne.n	800beb2 <__sflush_r+0x32>
 800bf20:	682b      	ldr	r3, [r5, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0c5      	beq.n	800beb2 <__sflush_r+0x32>
 800bf26:	2b1d      	cmp	r3, #29
 800bf28:	d001      	beq.n	800bf2e <__sflush_r+0xae>
 800bf2a:	2b16      	cmp	r3, #22
 800bf2c:	d101      	bne.n	800bf32 <__sflush_r+0xb2>
 800bf2e:	602f      	str	r7, [r5, #0]
 800bf30:	e7b2      	b.n	800be98 <__sflush_r+0x18>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf38:	81a3      	strh	r3, [r4, #12]
 800bf3a:	e7ae      	b.n	800be9a <__sflush_r+0x1a>
 800bf3c:	690f      	ldr	r7, [r1, #16]
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	d0aa      	beq.n	800be98 <__sflush_r+0x18>
 800bf42:	0793      	lsls	r3, r2, #30
 800bf44:	bf18      	it	ne
 800bf46:	2300      	movne	r3, #0
 800bf48:	680e      	ldr	r6, [r1, #0]
 800bf4a:	bf08      	it	eq
 800bf4c:	694b      	ldreq	r3, [r1, #20]
 800bf4e:	1bf6      	subs	r6, r6, r7
 800bf50:	600f      	str	r7, [r1, #0]
 800bf52:	608b      	str	r3, [r1, #8]
 800bf54:	2e00      	cmp	r6, #0
 800bf56:	dd9f      	ble.n	800be98 <__sflush_r+0x18>
 800bf58:	4633      	mov	r3, r6
 800bf5a:	463a      	mov	r2, r7
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	6a21      	ldr	r1, [r4, #32]
 800bf60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bf64:	47e0      	blx	ip
 800bf66:	2800      	cmp	r0, #0
 800bf68:	dc06      	bgt.n	800bf78 <__sflush_r+0xf8>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	e790      	b.n	800be9a <__sflush_r+0x1a>
 800bf78:	4407      	add	r7, r0
 800bf7a:	1a36      	subs	r6, r6, r0
 800bf7c:	e7ea      	b.n	800bf54 <__sflush_r+0xd4>
 800bf7e:	bf00      	nop
 800bf80:	dfbffffe 	.word	0xdfbffffe

0800bf84 <_fflush_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	690b      	ldr	r3, [r1, #16]
 800bf88:	4605      	mov	r5, r0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	b913      	cbnz	r3, 800bf94 <_fflush_r+0x10>
 800bf8e:	2500      	movs	r5, #0
 800bf90:	4628      	mov	r0, r5
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	b118      	cbz	r0, 800bf9e <_fflush_r+0x1a>
 800bf96:	6a03      	ldr	r3, [r0, #32]
 800bf98:	b90b      	cbnz	r3, 800bf9e <_fflush_r+0x1a>
 800bf9a:	f7ff f83d 	bl	800b018 <__sinit>
 800bf9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0f3      	beq.n	800bf8e <_fflush_r+0xa>
 800bfa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfa8:	07d0      	lsls	r0, r2, #31
 800bfaa:	d404      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfac:	0599      	lsls	r1, r3, #22
 800bfae:	d402      	bmi.n	800bfb6 <_fflush_r+0x32>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f7ff fad6 	bl	800b562 <__retarget_lock_acquire_recursive>
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	4621      	mov	r1, r4
 800bfba:	f7ff ff61 	bl	800be80 <__sflush_r>
 800bfbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	07da      	lsls	r2, r3, #31
 800bfc4:	d4e4      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	059b      	lsls	r3, r3, #22
 800bfca:	d4e1      	bmi.n	800bf90 <_fflush_r+0xc>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfce:	f7ff fac9 	bl	800b564 <__retarget_lock_release_recursive>
 800bfd2:	e7dd      	b.n	800bf90 <_fflush_r+0xc>

0800bfd4 <__swhatbuf_r>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfdc:	4615      	mov	r5, r2
 800bfde:	2900      	cmp	r1, #0
 800bfe0:	461e      	mov	r6, r3
 800bfe2:	b096      	sub	sp, #88	; 0x58
 800bfe4:	da0c      	bge.n	800c000 <__swhatbuf_r+0x2c>
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	2100      	movs	r1, #0
 800bfea:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfee:	bf0c      	ite	eq
 800bff0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bff4:	2340      	movne	r3, #64	; 0x40
 800bff6:	2000      	movs	r0, #0
 800bff8:	6031      	str	r1, [r6, #0]
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	b016      	add	sp, #88	; 0x58
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	466a      	mov	r2, sp
 800c002:	f000 f863 	bl	800c0cc <_fstat_r>
 800c006:	2800      	cmp	r0, #0
 800c008:	dbed      	blt.n	800bfe6 <__swhatbuf_r+0x12>
 800c00a:	9901      	ldr	r1, [sp, #4]
 800c00c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c010:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c014:	4259      	negs	r1, r3
 800c016:	4159      	adcs	r1, r3
 800c018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c01c:	e7eb      	b.n	800bff6 <__swhatbuf_r+0x22>

0800c01e <__smakebuf_r>:
 800c01e:	898b      	ldrh	r3, [r1, #12]
 800c020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c022:	079d      	lsls	r5, r3, #30
 800c024:	4606      	mov	r6, r0
 800c026:	460c      	mov	r4, r1
 800c028:	d507      	bpl.n	800c03a <__smakebuf_r+0x1c>
 800c02a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c02e:	6023      	str	r3, [r4, #0]
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	2301      	movs	r3, #1
 800c034:	6163      	str	r3, [r4, #20]
 800c036:	b002      	add	sp, #8
 800c038:	bd70      	pop	{r4, r5, r6, pc}
 800c03a:	466a      	mov	r2, sp
 800c03c:	ab01      	add	r3, sp, #4
 800c03e:	f7ff ffc9 	bl	800bfd4 <__swhatbuf_r>
 800c042:	9900      	ldr	r1, [sp, #0]
 800c044:	4605      	mov	r5, r0
 800c046:	4630      	mov	r0, r6
 800c048:	f7fe fece 	bl	800ade8 <_malloc_r>
 800c04c:	b948      	cbnz	r0, 800c062 <__smakebuf_r+0x44>
 800c04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c052:	059a      	lsls	r2, r3, #22
 800c054:	d4ef      	bmi.n	800c036 <__smakebuf_r+0x18>
 800c056:	f023 0303 	bic.w	r3, r3, #3
 800c05a:	f043 0302 	orr.w	r3, r3, #2
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	e7e3      	b.n	800c02a <__smakebuf_r+0xc>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	6020      	str	r0, [r4, #0]
 800c066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	9b00      	ldr	r3, [sp, #0]
 800c06e:	6120      	str	r0, [r4, #16]
 800c070:	6163      	str	r3, [r4, #20]
 800c072:	9b01      	ldr	r3, [sp, #4]
 800c074:	b15b      	cbz	r3, 800c08e <__smakebuf_r+0x70>
 800c076:	4630      	mov	r0, r6
 800c078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c07c:	f000 f838 	bl	800c0f0 <_isatty_r>
 800c080:	b128      	cbz	r0, 800c08e <__smakebuf_r+0x70>
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	f043 0301 	orr.w	r3, r3, #1
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	431d      	orrs	r5, r3
 800c092:	81a5      	strh	r5, [r4, #12]
 800c094:	e7cf      	b.n	800c036 <__smakebuf_r+0x18>

0800c096 <memmove>:
 800c096:	4288      	cmp	r0, r1
 800c098:	b510      	push	{r4, lr}
 800c09a:	eb01 0402 	add.w	r4, r1, r2
 800c09e:	d902      	bls.n	800c0a6 <memmove+0x10>
 800c0a0:	4284      	cmp	r4, r0
 800c0a2:	4623      	mov	r3, r4
 800c0a4:	d807      	bhi.n	800c0b6 <memmove+0x20>
 800c0a6:	1e43      	subs	r3, r0, #1
 800c0a8:	42a1      	cmp	r1, r4
 800c0aa:	d008      	beq.n	800c0be <memmove+0x28>
 800c0ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0b4:	e7f8      	b.n	800c0a8 <memmove+0x12>
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	4402      	add	r2, r0
 800c0ba:	428a      	cmp	r2, r1
 800c0bc:	d100      	bne.n	800c0c0 <memmove+0x2a>
 800c0be:	bd10      	pop	{r4, pc}
 800c0c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0c8:	e7f7      	b.n	800c0ba <memmove+0x24>
	...

0800c0cc <_fstat_r>:
 800c0cc:	b538      	push	{r3, r4, r5, lr}
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4d06      	ldr	r5, [pc, #24]	; (800c0ec <_fstat_r+0x20>)
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4608      	mov	r0, r1
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	602b      	str	r3, [r5, #0]
 800c0da:	f7f7 fbee 	bl	80038ba <_fstat>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <_fstat_r+0x1c>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	b103      	cbz	r3, 800c0e8 <_fstat_r+0x1c>
 800c0e6:	6023      	str	r3, [r4, #0]
 800c0e8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ea:	bf00      	nop
 800c0ec:	20002c48 	.word	0x20002c48

0800c0f0 <_isatty_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	4d05      	ldr	r5, [pc, #20]	; (800c10c <_isatty_r+0x1c>)
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	4608      	mov	r0, r1
 800c0fa:	602b      	str	r3, [r5, #0]
 800c0fc:	f7f7 fbe2 	bl	80038c4 <_isatty>
 800c100:	1c43      	adds	r3, r0, #1
 800c102:	d102      	bne.n	800c10a <_isatty_r+0x1a>
 800c104:	682b      	ldr	r3, [r5, #0]
 800c106:	b103      	cbz	r3, 800c10a <_isatty_r+0x1a>
 800c108:	6023      	str	r3, [r4, #0]
 800c10a:	bd38      	pop	{r3, r4, r5, pc}
 800c10c:	20002c48 	.word	0x20002c48

0800c110 <memchr>:
 800c110:	4603      	mov	r3, r0
 800c112:	b510      	push	{r4, lr}
 800c114:	b2c9      	uxtb	r1, r1
 800c116:	4402      	add	r2, r0
 800c118:	4293      	cmp	r3, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	d101      	bne.n	800c122 <memchr+0x12>
 800c11e:	2000      	movs	r0, #0
 800c120:	e003      	b.n	800c12a <memchr+0x1a>
 800c122:	7804      	ldrb	r4, [r0, #0]
 800c124:	3301      	adds	r3, #1
 800c126:	428c      	cmp	r4, r1
 800c128:	d1f6      	bne.n	800c118 <memchr+0x8>
 800c12a:	bd10      	pop	{r4, pc}

0800c12c <_realloc_r>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	4680      	mov	r8, r0
 800c132:	4614      	mov	r4, r2
 800c134:	460e      	mov	r6, r1
 800c136:	b921      	cbnz	r1, 800c142 <_realloc_r+0x16>
 800c138:	4611      	mov	r1, r2
 800c13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c13e:	f7fe be53 	b.w	800ade8 <_malloc_r>
 800c142:	b92a      	cbnz	r2, 800c150 <_realloc_r+0x24>
 800c144:	f7ff fa26 	bl	800b594 <_free_r>
 800c148:	4625      	mov	r5, r4
 800c14a:	4628      	mov	r0, r5
 800c14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c150:	f000 f81b 	bl	800c18a <_malloc_usable_size_r>
 800c154:	4284      	cmp	r4, r0
 800c156:	4607      	mov	r7, r0
 800c158:	d802      	bhi.n	800c160 <_realloc_r+0x34>
 800c15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c15e:	d812      	bhi.n	800c186 <_realloc_r+0x5a>
 800c160:	4621      	mov	r1, r4
 800c162:	4640      	mov	r0, r8
 800c164:	f7fe fe40 	bl	800ade8 <_malloc_r>
 800c168:	4605      	mov	r5, r0
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d0ed      	beq.n	800c14a <_realloc_r+0x1e>
 800c16e:	42bc      	cmp	r4, r7
 800c170:	4622      	mov	r2, r4
 800c172:	4631      	mov	r1, r6
 800c174:	bf28      	it	cs
 800c176:	463a      	movcs	r2, r7
 800c178:	f7ff f9fd 	bl	800b576 <memcpy>
 800c17c:	4631      	mov	r1, r6
 800c17e:	4640      	mov	r0, r8
 800c180:	f7ff fa08 	bl	800b594 <_free_r>
 800c184:	e7e1      	b.n	800c14a <_realloc_r+0x1e>
 800c186:	4635      	mov	r5, r6
 800c188:	e7df      	b.n	800c14a <_realloc_r+0x1e>

0800c18a <_malloc_usable_size_r>:
 800c18a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c18e:	1f18      	subs	r0, r3, #4
 800c190:	2b00      	cmp	r3, #0
 800c192:	bfbc      	itt	lt
 800c194:	580b      	ldrlt	r3, [r1, r0]
 800c196:	18c0      	addlt	r0, r0, r3
 800c198:	4770      	bx	lr
	...

0800c19c <_init>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	bf00      	nop
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr

0800c1a8 <_fini>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr
