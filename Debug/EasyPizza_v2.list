
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb4  0800cdb4  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800cdb4  0800cdb4  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cdb4  0800cdb4  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb4  0800cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800cdbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e98  20000260  0800d01c  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200020f8  0800d01c  000220f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e85e  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aa9  00000000  00000000  0003eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  000435d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131f  00000000  00000000  00044e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d22c  00000000  00000000  00046187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021018  00000000  00000000  000633b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009daa7  00000000  00000000  000843cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d48  00000000  00000000  00121e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00128bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c9b8 	.word	0x0800c9b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800c9b8 	.word	0x0800c9b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fmul>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d06f      	beq.n	8000d60 <__aeabi_fmul+0xf8>
 8000c80:	441a      	add	r2, r3
 8000c82:	ea80 0c01 	eor.w	ip, r0, r1
 8000c86:	0240      	lsls	r0, r0, #9
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8e:	d01e      	beq.n	8000cce <__aeabi_fmul+0x66>
 8000c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca8:	bf3e      	ittt	cc
 8000caa:	0049      	lslcc	r1, r1, #1
 8000cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb0:	005b      	lslcc	r3, r3, #1
 8000cb2:	ea40 0001 	orr.w	r0, r0, r1
 8000cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cba:	2afd      	cmp	r2, #253	; 0xfd
 8000cbc:	d81d      	bhi.n	8000cfa <__aeabi_fmul+0x92>
 8000cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd6:	bf08      	it	eq
 8000cd8:	0249      	lsleq	r1, r1, #9
 8000cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ce2:	3a7f      	subs	r2, #127	; 0x7f
 8000ce4:	bfc2      	ittt	gt
 8000ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cee:	4770      	bxgt	lr
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	dc5d      	bgt.n	8000db8 <__aeabi_fmul+0x150>
 8000cfc:	f112 0f19 	cmn.w	r2, #25
 8000d00:	bfdc      	itt	le
 8000d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d06:	4770      	bxle	lr
 8000d08:	f1c2 0200 	rsb	r2, r2, #0
 8000d0c:	0041      	lsls	r1, r0, #1
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	f1c2 0220 	rsb	r2, r2, #32
 8000d16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1e:	f140 0000 	adc.w	r0, r0, #0
 8000d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d26:	bf08      	it	eq
 8000d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2c:	4770      	bx	lr
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0040      	lsleq	r0, r0, #1
 8000d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3e:	3a01      	subeq	r2, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xce>
 8000d42:	ea40 000c 	orr.w	r0, r0, ip
 8000d46:	f093 0f00 	teq	r3, #0
 8000d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0049      	lsleq	r1, r1, #1
 8000d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d56:	3b01      	subeq	r3, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xe6>
 8000d5a:	ea41 010c 	orr.w	r1, r1, ip
 8000d5e:	e78f      	b.n	8000c80 <__aeabi_fmul+0x18>
 8000d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	bf18      	it	ne
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d00a      	beq.n	8000d86 <__aeabi_fmul+0x11e>
 8000d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d74:	bf18      	it	ne
 8000d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	d1d8      	bne.n	8000d2e <__aeabi_fmul+0xc6>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	bf17      	itett	ne
 8000d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d90:	4608      	moveq	r0, r1
 8000d92:	f091 0f00 	teqne	r1, #0
 8000d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d9a:	d014      	beq.n	8000dc6 <__aeabi_fmul+0x15e>
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d101      	bne.n	8000da6 <__aeabi_fmul+0x13e>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d10f      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000da6:	ea93 0f0c 	teq	r3, ip
 8000daa:	d103      	bne.n	8000db4 <__aeabi_fmul+0x14c>
 8000dac:	024b      	lsls	r3, r1, #9
 8000dae:	bf18      	it	ne
 8000db0:	4608      	movne	r0, r1
 8000db2:	d108      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bx	lr
 8000dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fdiv>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d069      	beq.n	8000ebc <__aeabi_fdiv+0xec>
 8000de8:	eba2 0203 	sub.w	r2, r2, r3
 8000dec:	ea80 0c01 	eor.w	ip, r0, r1
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df6:	d037      	beq.n	8000e68 <__aeabi_fdiv+0x98>
 8000df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf38      	it	cc
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e16:	428b      	cmp	r3, r1
 8000e18:	bf24      	itt	cs
 8000e1a:	1a5b      	subcs	r3, r3, r1
 8000e1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e32:	bf24      	itt	cs
 8000e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e52:	d1e0      	bne.n	8000e16 <__aeabi_fdiv+0x46>
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	f63f af50 	bhi.w	8000cfa <__aeabi_fmul+0x92>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e70:	327f      	adds	r2, #127	; 0x7f
 8000e72:	bfc2      	ittt	gt
 8000e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7c:	4770      	bxgt	lr
 8000e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	3a01      	subs	r2, #1
 8000e88:	e737      	b.n	8000cfa <__aeabi_fmul+0x92>
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xc2>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xda>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e795      	b.n	8000de8 <__aeabi_fdiv+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	d108      	bne.n	8000ed8 <__aeabi_fdiv+0x108>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	f47f af7d 	bne.w	8000dc6 <__aeabi_fmul+0x15e>
 8000ecc:	ea93 0f0c 	teq	r3, ip
 8000ed0:	f47f af70 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e776      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ed8:	ea93 0f0c 	teq	r3, ip
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_fdiv+0x118>
 8000ede:	024b      	lsls	r3, r1, #9
 8000ee0:	f43f af4c 	beq.w	8000d7c <__aeabi_fmul+0x114>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e76e      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1ca      	bne.n	8000e8a <__aeabi_fdiv+0xba>
 8000ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef8:	f47f af5c 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f00:	f47f af3c 	bne.w	8000d7c <__aeabi_fmul+0x114>
 8000f04:	e75f      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000f06:	bf00      	nop

08000f08 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;


uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
 8000f14:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <BluetoothInit+0x54>)
 8000f28:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <BluetoothInit+0x58>)
 8000f30:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2278      	movs	r2, #120	; 0x78
 8000f4a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//Return OK
	return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000294 	.word	0x20000294
 8000f60:	20000298 	.word	0x20000298

08000f64 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff f8ec 	bl	8000150 <strlen>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f00a ffed 	bl	800bf5c <malloc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f967 	bl	800c264 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	78fa      	ldrb	r2, [r7, #3]
 8000f9a:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	7e3a      	ldrb	r2, [r7, #24]
 8000fa0:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3222      	adds	r2, #34	; 0x22
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e06b      	b.n	80010b6 <BluetoothPutFila+0xe6>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000fe4:	7bf9      	ldrb	r1, [r7, #15]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3122      	adds	r1, #34	; 0x22
 8000fea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d15d      	bne.n	80010b0 <BluetoothPutFila+0xe0>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001000:	b29b      	uxth	r3, r3
 8001002:	3b02      	subs	r3, #2
 8001004:	b29b      	uxth	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	4610      	mov	r0, r2
 800100a:	f000 fab3 	bl	8001574 <CRC16>
 800100e:	4603      	mov	r3, r0
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001014:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001016:	4b2c      	ldr	r3, [pc, #176]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001020:	3b02      	subs	r3, #2
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	440b      	add	r3, r1
 8001026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800102a:	429a      	cmp	r2, r3
 800102c:	d10b      	bne.n	8001046 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 800102e:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <BluetoothPutFila+0xf8>)
 8001030:	785a      	ldrb	r2, [r3, #1]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001038:	3b01      	subs	r3, #1
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	440b      	add	r3, r1
 800103e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 8001042:	429a      	cmp	r2, r3
 8001044:	d002      	beq.n	800104c <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 8001046:	f000 fcc3 	bl	80019d0 <BluetoothErroCRC>
				return; //ENCERRA
 800104a:	e03a      	b.n	80010c2 <BluetoothPutFila+0xf2>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3222      	adds	r2, #34	; 0x22
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10e      	bne.n	800107a <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3222      	adds	r2, #34	; 0x22
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	f04f 32ff 	mov.w	r2, #4294967295
 8001072:	4619      	mov	r1, r3
 8001074:	f008 f9c2 	bl	80093fc <osMessagePut>
				return;
 8001078:	e023      	b.n	80010c2 <BluetoothPutFila+0xf2>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoCritico ){
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3222      	adds	r2, #34	; 0x22
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d112      	bne.n	80010b0 <BluetoothPutFila+0xe0>
				if(ble->SistemaEmErro){
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00d      	beq.n	80010b0 <BluetoothPutFila+0xe0>
					osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	6818      	ldr	r0, [r3, #0]
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3222      	adds	r2, #34	; 0x22
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295
 80010aa:	4619      	mov	r1, r3
 80010ac:	f008 f9a6 	bl	80093fc <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3301      	adds	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d38d      	bcc.n	8000fde <BluetoothPutFila+0xe>
					//TX_COMANDO_NEGADO
				}
			}
		}
	}
}
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000029c 	.word	0x2000029c

080010cc <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0310 	and.w	r3, r3, #16
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d02a      	beq.n	800113a <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b11      	ldr	r3, [pc, #68]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <BLEUSART_IrqHandler+0x78>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0210 	orr.w	r2, r2, #16
 800111e:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <BLEUSART_IrqHandler+0x7c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0202 	orr.w	r2, r2, #2
 8001132:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 f809 	bl	800114c <BLEDMA_IrqHandler>
	}
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000294 	.word	0x20000294
 8001148:	20000298 	.word	0x20000298

0800114c <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 8001154:	4b9a      	ldr	r3, [pc, #616]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b02      	cmp	r3, #2
 8001162:	f040 8164 	bne.w	800142e <BLEDMA_IrqHandler+0x2e2>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001166:	4b96      	ldr	r3, [pc, #600]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a95      	ldr	r2, [pc, #596]	; (80013c4 <BLEDMA_IrqHandler+0x278>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d02e      	beq.n	80011d0 <BLEDMA_IrqHandler+0x84>
 8001172:	4b93      	ldr	r3, [pc, #588]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a93      	ldr	r2, [pc, #588]	; (80013c8 <BLEDMA_IrqHandler+0x27c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d026      	beq.n	80011cc <BLEDMA_IrqHandler+0x80>
 800117e:	4b90      	ldr	r3, [pc, #576]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a91      	ldr	r2, [pc, #580]	; (80013cc <BLEDMA_IrqHandler+0x280>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01d      	beq.n	80011c6 <BLEDMA_IrqHandler+0x7a>
 800118a:	4b8d      	ldr	r3, [pc, #564]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a8f      	ldr	r2, [pc, #572]	; (80013d0 <BLEDMA_IrqHandler+0x284>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d014      	beq.n	80011c0 <BLEDMA_IrqHandler+0x74>
 8001196:	4b8a      	ldr	r3, [pc, #552]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a8d      	ldr	r2, [pc, #564]	; (80013d4 <BLEDMA_IrqHandler+0x288>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00b      	beq.n	80011ba <BLEDMA_IrqHandler+0x6e>
 80011a2:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a8b      	ldr	r2, [pc, #556]	; (80013d8 <BLEDMA_IrqHandler+0x28c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d102      	bne.n	80011b4 <BLEDMA_IrqHandler+0x68>
 80011ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011b2:	e00e      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011b8:	e00b      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011be:	e008      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c4:	e005      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ca:	e002      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011cc:	2320      	movs	r3, #32
 80011ce:	e000      	b.n	80011d2 <BLEDMA_IrqHandler+0x86>
 80011d0:	2302      	movs	r3, #2
 80011d2:	4a82      	ldr	r2, [pc, #520]	; (80013dc <BLEDMA_IrqHandler+0x290>)
 80011d4:	6053      	str	r3, [r2, #4]

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 80011d6:	4b7a      	ldr	r3, [pc, #488]	; (80013c0 <BLEDMA_IrqHandler+0x274>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3330      	adds	r3, #48	; 0x30
 80011f6:	461a      	mov	r2, r3
 80011f8:	4979      	ldr	r1, [pc, #484]	; (80013e0 <BLEDMA_IrqHandler+0x294>)
 80011fa:	f00a ff63 	bl	800c0c4 <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800120c:	2b00      	cmp	r3, #0
 800120e:	d007      	beq.n	8001220 <BLEDMA_IrqHandler+0xd4>
 8001210:	2b00      	cmp	r3, #0
 8001212:	f2c0 80d2 	blt.w	80013ba <BLEDMA_IrqHandler+0x26e>
 8001216:	3b01      	subs	r3, #1
 8001218:	2b01      	cmp	r3, #1
 800121a:	f200 80ce 	bhi.w	80013ba <BLEDMA_IrqHandler+0x26e>
 800121e:	e0a1      	b.n	8001364 <BLEDMA_IrqHandler+0x218>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			ble->ss = NULL;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	335a      	adds	r3, #90	; 0x5a
 8001234:	496b      	ldr	r1, [pc, #428]	; (80013e4 <BLEDMA_IrqHandler+0x298>)
 8001236:	4618      	mov	r0, r3
 8001238:	f00a ff6c 	bl	800c114 <strstr>
 800123c:	4602      	mov	r2, r0
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <BLEDMA_IrqHandler+0x10c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001254:	2b07      	cmp	r3, #7
 8001256:	d007      	beq.n	8001268 <BLEDMA_IrqHandler+0x11c>
 8001258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800125c:	4862      	ldr	r0, [pc, #392]	; (80013e8 <BLEDMA_IrqHandler+0x29c>)
 800125e:	f004 fa99 	bl	8005794 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <BLEDMA_IrqHandler+0x12c>
				ble->MaquinaConexao = RX_CONECTADO;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	335a      	adds	r3, #90	; 0x5a
 8001284:	4959      	ldr	r1, [pc, #356]	; (80013ec <BLEDMA_IrqHandler+0x2a0>)
 8001286:	4618      	mov	r0, r3
 8001288:	f00a ff44 	bl	800c114 <strstr>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80b0 	beq.w	8001400 <BLEDMA_IrqHandler+0x2b4>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	335a      	adds	r3, #90	; 0x5a
 80012aa:	1ad2      	subs	r2, r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e010      	b.n	80012d8 <BLEDMA_IrqHandler+0x18c>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	3308      	adds	r3, #8
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2b0b      	cmp	r3, #11
 80012dc:	ddeb      	ble.n	80012b6 <BLEDMA_IrqHandler+0x16a>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	061a      	lsls	r2, r3, #24
 80012e4:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012e6:	785b      	ldrb	r3, [r3, #1]
 80012e8:	041b      	lsls	r3, r3, #16
 80012ea:	441a      	add	r2, r3
 80012ec:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012ee:	789b      	ldrb	r3, [r3, #2]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	4413      	add	r3, r2
 80012f4:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 80012f6:	78d2      	ldrb	r2, [r2, #3]
 80012f8:	4413      	add	r3, r2
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 80012fe:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001302:	791b      	ldrb	r3, [r3, #4]
 8001304:	061a      	lsls	r2, r3, #24
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	441a      	add	r2, r3
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	021b      	lsls	r3, r3, #8
 8001314:	4413      	add	r3, r2
 8001316:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001318:	79d2      	ldrb	r2, [r2, #7]
 800131a:	4413      	add	r3, r2
 800131c:	461a      	mov	r2, r3
 800131e:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 8001320:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001324:	7a1b      	ldrb	r3, [r3, #8]
 8001326:	061a      	lsls	r2, r3, #24
 8001328:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 800132a:	7a5b      	ldrb	r3, [r3, #9]
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	441a      	add	r2, r3
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001332:	7a9b      	ldrb	r3, [r3, #10]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	4413      	add	r3, r2
 8001338:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 800133a:	7ad2      	ldrb	r2, [r2, #11]
 800133c:	4413      	add	r3, r2
 800133e:	461a      	mov	r2, r3
 8001340:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <BLEDMA_IrqHandler+0x2a8>)
 8001342:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 8001344:	210c      	movs	r1, #12
 8001346:	482a      	ldr	r0, [pc, #168]	; (80013f0 <BLEDMA_IrqHandler+0x2a4>)
 8001348:	f000 f914 	bl	8001574 <CRC16>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 8001356:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <BLEDMA_IrqHandler+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	21bf      	movs	r1, #191	; 0xbf
 800135c:	4618      	mov	r0, r3
 800135e:	f007 ff67 	bl	8009230 <osSignalSet>
			}
			break;
 8001362:	e04d      	b.n	8001400 <BLEDMA_IrqHandler+0x2b4>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	335a      	adds	r3, #90	; 0x5a
 8001370:	4922      	ldr	r1, [pc, #136]	; (80013fc <BLEDMA_IrqHandler+0x2b0>)
 8001372:	4618      	mov	r0, r3
 8001374:	f00a fece 	bl	800c114 <strstr>
 8001378:	4602      	mov	r2, r0
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001386:	2b00      	cmp	r3, #0
 8001388:	d107      	bne.n	800139a <BLEDMA_IrqHandler+0x24e>
 800138a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138e:	4816      	ldr	r0, [pc, #88]	; (80013e8 <BLEDMA_IrqHandler+0x29c>)
 8001390:	f004 fa00 	bl	8005794 <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10b      	bne.n	80013b2 <BLEDMA_IrqHandler+0x266>
				ble->StatusSenha 		= false;//chave de validacao
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			}


			BluetoothPutFila(ble);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fe0c 	bl	8000fd0 <BluetoothPutFila>

			break;
 80013b8:	e023      	b.n	8001402 <BLEDMA_IrqHandler+0x2b6>

		default:
			break;
 80013ba:	bf00      	nop
 80013bc:	e021      	b.n	8001402 <BLEDMA_IrqHandler+0x2b6>
 80013be:	bf00      	nop
 80013c0:	20000298 	.word	0x20000298
 80013c4:	40020008 	.word	0x40020008
 80013c8:	4002001c 	.word	0x4002001c
 80013cc:	40020030 	.word	0x40020030
 80013d0:	40020044 	.word	0x40020044
 80013d4:	40020058 	.word	0x40020058
 80013d8:	4002006c 	.word	0x4002006c
 80013dc:	40020000 	.word	0x40020000
 80013e0:	0800c9d0 	.word	0x0800c9d0
 80013e4:	0800c9d4 	.word	0x0800c9d4
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	0800c9dc 	.word	0x0800c9dc
 80013f0:	2000027c 	.word	0x2000027c
 80013f4:	20000288 	.word	0x20000288
 80013f8:	200009b0 	.word	0x200009b0
 80013fc:	0800c9e8 	.word	0x0800c9e8
			break;
 8001400:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2240      	movs	r2, #64	; 0x40
 8001418:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <BLEDMA_IrqHandler+0x2ec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
	}
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000298 	.word	0x20000298

0800143c <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 800143c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
 8001448:	466b      	mov	r3, sp
 800144a:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	1cd9      	adds	r1, r3, #3
 8001450:	1e4b      	subs	r3, r1, #1
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	460a      	mov	r2, r1
 8001456:	2300      	movs	r3, #0
 8001458:	4690      	mov	r8, r2
 800145a:	4699      	mov	r9, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001468:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001470:	460a      	mov	r2, r1
 8001472:	2300      	movs	r3, #0
 8001474:	4614      	mov	r4, r2
 8001476:	461d      	mov	r5, r3
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	00eb      	lsls	r3, r5, #3
 8001482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001486:	00e2      	lsls	r2, r4, #3
 8001488:	460b      	mov	r3, r1
 800148a:	3307      	adds	r3, #7
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	ebad 0d03 	sub.w	sp, sp, r3
 8001494:	466b      	mov	r3, sp
 8001496:	3300      	adds	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e00b      	b.n	80014b8 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	7819      	ldrb	r1, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4413      	add	r3, r2
 80014ae:	460a      	mov	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	ddef      	ble.n	80014a0 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f852 	bl	8001574 <CRC16>
 80014d0:	4603      	mov	r3, r0
 80014d2:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 80014d4:	897b      	ldrh	r3, [r7, #10]
 80014d6:	0a1b      	lsrs	r3, r3, #8
 80014d8:	b29a      	uxth	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3302      	adds	r3, #2
 80014de:	b2d1      	uxtb	r1, r2
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	897a      	ldrh	r2, [r7, #10]
 80014ea:	b2d1      	uxtb	r1, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	3303      	adds	r3, #3
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	4619      	mov	r1, r3
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f806 	bl	800150c <Envia_bytes_UART>
 8001500:	46b5      	mov	sp, r6
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800150c <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <Envia_bytes_UART+0x24>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2332      	movs	r3, #50	; 0x32
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	f006 fc82 	bl	8007e2c <HAL_UART_Transmit>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000294 	.word	0x20000294

08001534 <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <Envia_texto_UART+0x3c>)
 8001542:	681c      	ldr	r4, [r3, #0]
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe03 	bl	8000150 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29b      	uxth	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4620      	mov	r0, r4
 8001554:	f006 fced 	bl	8007f32 <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001558:	887b      	ldrh	r3, [r7, #2]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <Envia_texto_UART+0x32>
		HAL_Delay(delay);
 800155e:	887b      	ldrh	r3, [r7, #2]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fee1 	bl	8004328 <HAL_Delay>
	}
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}
 800156e:	bf00      	nop
 8001570:	20000294 	.word	0x20000294

08001574 <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001580:	23ff      	movs	r3, #255	; 0xff
 8001582:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001584:	23ff      	movs	r3, #255	; 0xff
 8001586:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001588:	e013      	b.n	80015b2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	781a      	ldrb	r2, [r3, #0]
 8001592:	7bbb      	ldrb	r3, [r7, #14]
 8001594:	4053      	eors	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <CRC16+0x64>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4413      	add	r3, r2
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4053      	eors	r3, r2
 80015a6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <CRC16+0x68>)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	807a      	strh	r2, [r7, #2]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e6      	bne.n	800158a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	b21b      	sxth	r3, r3
 80015c6:	4313      	orrs	r3, r2
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	b29b      	uxth	r3, r3
}//---END---//
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000100 	.word	0x20000100

080015e0 <iniciaBleHm10>:
	__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
	HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE

}//---END---//

void iniciaBleHm10(Bluetooth* ble){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 80015ec:	e1de      	b.n	80019ac <iniciaBleHm10+0x3cc>
		switch (sequenciaBLE) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	2b05      	cmp	r3, #5
 80015f2:	f200 81da 	bhi.w	80019aa <iniciaBleHm10+0x3ca>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <iniciaBleHm10+0x1c>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001615 	.word	0x08001615
 8001600:	080016a3 	.word	0x080016a3
 8001604:	08001737 	.word	0x08001737
 8001608:	08001951 	.word	0x08001951
 800160c:	0800196d 	.word	0x0800196d
 8001610:	080019a7 	.word	0x080019a7
		case inicio:
			HAL_Delay(50);
 8001614:	2032      	movs	r0, #50	; 0x32
 8001616:	f002 fe87 	bl	8004328 <HAL_Delay>
			SETUP_UART(115200)
 800161a:	4bb8      	ldr	r3, [pc, #736]	; (80018fc <iniciaBleHm10+0x31c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f006 fce2 	bl	8007fe8 <HAL_UART_Abort_IT>
 8001624:	4bb5      	ldr	r3, [pc, #724]	; (80018fc <iniciaBleHm10+0x31c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f006 fbcd 	bl	8007dc8 <HAL_UART_DeInit>
 800162e:	2032      	movs	r0, #50	; 0x32
 8001630:	f002 fe7a 	bl	8004328 <HAL_Delay>
 8001634:	4bb1      	ldr	r3, [pc, #708]	; (80018fc <iniciaBleHm10+0x31c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	4baf      	ldr	r3, [pc, #700]	; (80018fc <iniciaBleHm10+0x31c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f006 fb70 	bl	8007d28 <HAL_UART_Init>
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f002 fe6d 	bl	8004328 <HAL_Delay>
			HAL_Delay(50);
 800164e:	2032      	movs	r0, #50	; 0x32
 8001650:	f002 fe6a 	bl	8004328 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 8001654:	2132      	movs	r1, #50	; 0x32
 8001656:	48aa      	ldr	r0, [pc, #680]	; (8001900 <iniciaBleHm10+0x320>)
 8001658:	f7ff ff6c 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 800165c:	2132      	movs	r1, #50	; 0x32
 800165e:	48a8      	ldr	r0, [pc, #672]	; (8001900 <iniciaBleHm10+0x320>)
 8001660:	f7ff ff68 	bl	8001534 <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 8001664:	4ba5      	ldr	r3, [pc, #660]	; (80018fc <iniciaBleHm10+0x31c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4ba3      	ldr	r3, [pc, #652]	; (80018fc <iniciaBleHm10+0x31c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 0210 	orr.w	r2, r2, #16
 8001676:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001678:	4ba2      	ldr	r3, [pc, #648]	; (8001904 <iniciaBleHm10+0x324>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4ba0      	ldr	r3, [pc, #640]	; (8001904 <iniciaBleHm10+0x324>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0202 	orr.w	r2, r2, #2
 800168a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800168c:	4b9b      	ldr	r3, [pc, #620]	; (80018fc <iniciaBleHm10+0x31c>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3330      	adds	r3, #48	; 0x30
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	4619      	mov	r1, r3
 8001698:	f006 fc80 	bl	8007f9c <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]

			continue;
 80016a0:	e184      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 80016a2:	2305      	movs	r3, #5
 80016a4:	73bb      	strb	r3, [r7, #14]
			const uint32_t delay_between_attempts_ms = 1000;
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	60bb      	str	r3, [r7, #8]

			while (tryingName < max_attempts) {
 80016ac:	bf00      	nop
 80016ae:	4b96      	ldr	r3, [pc, #600]	; (8001908 <iniciaBleHm10+0x328>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7bba      	ldrb	r2, [r7, #14]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d935      	bls.n	8001724 <iniciaBleHm10+0x144>
				Envia_texto_UART("AT+NAME?", 100);
 80016b8:	2164      	movs	r1, #100	; 0x64
 80016ba:	4894      	ldr	r0, [pc, #592]	; (800190c <iniciaBleHm10+0x32c>)
 80016bc:	f7ff ff3a 	bl	8001534 <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f002 fe31 	bl	8004328 <HAL_Delay>
				ble->ss = NULL;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	335a      	adds	r3, #90	; 0x5a
 80016d2:	498f      	ldr	r1, [pc, #572]	; (8001910 <iniciaBleHm10+0x330>)
 80016d4:	4618      	mov	r0, r3
 80016d6:	f00a fd1d 	bl	800c114 <strstr>
 80016da:	4602      	mov	r2, r0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d014      	beq.n	8001716 <iniciaBleHm10+0x136>
					ble->ss = strstr(ble->StringRecebida, "EasyPizza");
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	335a      	adds	r3, #90	; 0x5a
 80016f0:	4988      	ldr	r1, [pc, #544]	; (8001914 <iniciaBleHm10+0x334>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00a fd0e 	bl	800c114 <strstr>
 80016f8:	4602      	mov	r2, r0
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <iniciaBleHm10+0x130>
									sequenciaBLE = capturaAddr;
 800170a:	2303      	movs	r3, #3
 800170c:	73fb      	strb	r3, [r7, #15]
//						sequenciaBLE = final;
						break;
 800170e:	e009      	b.n	8001724 <iniciaBleHm10+0x144>
					} else {
						sequenciaBLE = redefineBle;
 8001710:	2302      	movs	r3, #2
 8001712:	73fb      	strb	r3, [r7, #15]
						break;
 8001714:	e006      	b.n	8001724 <iniciaBleHm10+0x144>
					}
				} else {
					tryingName++;
 8001716:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <iniciaBleHm10+0x328>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <iniciaBleHm10+0x328>)
 8001720:	701a      	strb	r2, [r3, #0]
					break;
 8001722:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 8001724:	4b78      	ldr	r3, [pc, #480]	; (8001908 <iniciaBleHm10+0x328>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	7bba      	ldrb	r2, [r7, #14]
 800172a:	429a      	cmp	r2, r3
 800172c:	f200 813e 	bhi.w	80019ac <iniciaBleHm10+0x3cc>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 8001730:	2302      	movs	r3, #2
 8001732:	73fb      	strb	r3, [r7, #15]
			break;
 8001734:	e13a      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800173c:	4876      	ldr	r0, [pc, #472]	; (8001918 <iniciaBleHm10+0x338>)
 800173e:	f004 f840 	bl	80057c2 <HAL_GPIO_WritePin>
 8001742:	20c8      	movs	r0, #200	; 0xc8
 8001744:	f002 fdf0 	bl	8004328 <HAL_Delay>
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174e:	4872      	ldr	r0, [pc, #456]	; (8001918 <iniciaBleHm10+0x338>)
 8001750:	f004 f837 	bl	80057c2 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	; 0x64
 8001756:	f002 fde7 	bl	8004328 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 800175a:	4b68      	ldr	r3, [pc, #416]	; (80018fc <iniciaBleHm10+0x31c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f006 fc42 	bl	8007fe8 <HAL_UART_Abort_IT>
 8001764:	4b65      	ldr	r3, [pc, #404]	; (80018fc <iniciaBleHm10+0x31c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f006 fb2d 	bl	8007dc8 <HAL_UART_DeInit>
 800176e:	2032      	movs	r0, #50	; 0x32
 8001770:	f002 fdda 	bl	8004328 <HAL_Delay>
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <iniciaBleHm10+0x31c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <iniciaBleHm10+0x31c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fad0 	bl	8007d28 <HAL_UART_Init>
 8001788:	2032      	movs	r0, #50	; 0x32
 800178a:	f002 fdcd 	bl	8004328 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 800178e:	2164      	movs	r1, #100	; 0x64
 8001790:	485b      	ldr	r0, [pc, #364]	; (8001900 <iniciaBleHm10+0x320>)
 8001792:	f7ff fecf 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001796:	2164      	movs	r1, #100	; 0x64
 8001798:	4859      	ldr	r0, [pc, #356]	; (8001900 <iniciaBleHm10+0x320>)
 800179a:	f7ff fecb 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 800179e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017a2:	485e      	ldr	r0, [pc, #376]	; (800191c <iniciaBleHm10+0x33c>)
 80017a4:	f7ff fec6 	bl	8001534 <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 80017a8:	4b54      	ldr	r3, [pc, #336]	; (80018fc <iniciaBleHm10+0x31c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fc1b 	bl	8007fe8 <HAL_UART_Abort_IT>
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <iniciaBleHm10+0x31c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f006 fb06 	bl	8007dc8 <HAL_UART_DeInit>
 80017bc:	2032      	movs	r0, #50	; 0x32
 80017be:	f002 fdb3 	bl	8004328 <HAL_Delay>
 80017c2:	4b4e      	ldr	r3, [pc, #312]	; (80018fc <iniciaBleHm10+0x31c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <iniciaBleHm10+0x31c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 faa9 	bl	8007d28 <HAL_UART_Init>
 80017d6:	2032      	movs	r0, #50	; 0x32
 80017d8:	f002 fda6 	bl	8004328 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 80017dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017e0:	484e      	ldr	r0, [pc, #312]	; (800191c <iniciaBleHm10+0x33c>)
 80017e2:	f7ff fea7 	bl	8001534 <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 80017e6:	2164      	movs	r1, #100	; 0x64
 80017e8:	4845      	ldr	r0, [pc, #276]	; (8001900 <iniciaBleHm10+0x320>)
 80017ea:	f7ff fea3 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 80017ee:	2164      	movs	r1, #100	; 0x64
 80017f0:	4843      	ldr	r0, [pc, #268]	; (8001900 <iniciaBleHm10+0x320>)
 80017f2:	f7ff fe9f 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80017f6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80017fa:	4849      	ldr	r0, [pc, #292]	; (8001920 <iniciaBleHm10+0x340>)
 80017fc:	f7ff fe9a 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 8001800:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001804:	4847      	ldr	r0, [pc, #284]	; (8001924 <iniciaBleHm10+0x344>)
 8001806:	f7ff fe95 	bl	8001534 <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <iniciaBleHm10+0x31c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f006 fbea 	bl	8007fe8 <HAL_UART_Abort_IT>
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <iniciaBleHm10+0x31c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f006 fad5 	bl	8007dc8 <HAL_UART_DeInit>
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f002 fd82 	bl	8004328 <HAL_Delay>
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <iniciaBleHm10+0x31c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	4b33      	ldr	r3, [pc, #204]	; (80018fc <iniciaBleHm10+0x31c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f006 fa78 	bl	8007d28 <HAL_UART_Init>
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f002 fd75 	bl	8004328 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001844:	4834      	ldr	r0, [pc, #208]	; (8001918 <iniciaBleHm10+0x338>)
 8001846:	f003 ffbc 	bl	80057c2 <HAL_GPIO_WritePin>
 800184a:	20c8      	movs	r0, #200	; 0xc8
 800184c:	f002 fd6c 	bl	8004328 <HAL_Delay>
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001856:	4830      	ldr	r0, [pc, #192]	; (8001918 <iniciaBleHm10+0x338>)
 8001858:	f003 ffb3 	bl	80057c2 <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 800185c:	2164      	movs	r1, #100	; 0x64
 800185e:	4828      	ldr	r0, [pc, #160]	; (8001900 <iniciaBleHm10+0x320>)
 8001860:	f7ff fe68 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001864:	2164      	movs	r1, #100	; 0x64
 8001866:	4826      	ldr	r0, [pc, #152]	; (8001900 <iniciaBleHm10+0x320>)
 8001868:	f7ff fe64 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 800186c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001870:	482d      	ldr	r0, [pc, #180]	; (8001928 <iniciaBleHm10+0x348>)
 8001872:	f7ff fe5f 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 8001876:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800187a:	482c      	ldr	r0, [pc, #176]	; (800192c <iniciaBleHm10+0x34c>)
 800187c:	f7ff fe5a 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001880:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001884:	482a      	ldr	r0, [pc, #168]	; (8001930 <iniciaBleHm10+0x350>)
 8001886:	f7ff fe55 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 800188a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800188e:	4829      	ldr	r0, [pc, #164]	; (8001934 <iniciaBleHm10+0x354>)
 8001890:	f7ff fe50 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 8001894:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <iniciaBleHm10+0x358>)
 800189a:	f7ff fe4b 	bl	8001534 <Envia_texto_UART>
			M_BLE_RESET
 800189e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <iniciaBleHm10+0x35c>)
 80018a4:	f7ff fe46 	bl	8001534 <Envia_texto_UART>

			Envia_texto_UART("AT+NAMEEasyPizza",400);		//NOME
 80018a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018ac:	4824      	ldr	r0, [pc, #144]	; (8001940 <iniciaBleHm10+0x360>)
 80018ae:	f7ff fe41 	bl	8001534 <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 80018b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018b6:	4823      	ldr	r0, [pc, #140]	; (8001944 <iniciaBleHm10+0x364>)
 80018b8:	f7ff fe3c 	bl	8001534 <Envia_texto_UART>
			M_BLE_RESET
 80018bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018c0:	481e      	ldr	r0, [pc, #120]	; (800193c <iniciaBleHm10+0x35c>)
 80018c2:	f7ff fe37 	bl	8001534 <Envia_texto_UART>
						sequenciaBLE = capturaAddr;
 80018c6:	2303      	movs	r3, #3
 80018c8:	73fb      	strb	r3, [r7, #15]
//			sequenciaBLE = final;
			break;
 80018ca:	e06f      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 80018cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018d0:	481d      	ldr	r0, [pc, #116]	; (8001948 <iniciaBleHm10+0x368>)
 80018d2:	f7ff fe2f 	bl	8001534 <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f002 fd26 	bl	8004328 <HAL_Delay>

				if (ble->chave != 0){
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <iniciaBleHm10+0x30c>
					sequenciaBLE = final;
 80018e6:	2304      	movs	r3, #4
 80018e8:	73fb      	strb	r3, [r7, #15]
					break;
 80018ea:	e037      	b.n	800195c <iniciaBleHm10+0x37c>
				} else {
					tryingAddr++;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <iniciaBleHm10+0x36c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <iniciaBleHm10+0x36c>)
 80018f6:	701a      	strb	r2, [r3, #0]
					break;
 80018f8:	e030      	b.n	800195c <iniciaBleHm10+0x37c>
 80018fa:	bf00      	nop
 80018fc:	20000294 	.word	0x20000294
 8001900:	0800c9f0 	.word	0x0800c9f0
 8001904:	20000298 	.word	0x20000298
 8001908:	2000029e 	.word	0x2000029e
 800190c:	0800c9f4 	.word	0x0800c9f4
 8001910:	0800ca00 	.word	0x0800ca00
 8001914:	0800caa0 	.word	0x0800caa0
 8001918:	40010c00 	.word	0x40010c00
 800191c:	0800ca14 	.word	0x0800ca14
 8001920:	0800ca20 	.word	0x0800ca20
 8001924:	0800ca2c 	.word	0x0800ca2c
 8001928:	0800ca38 	.word	0x0800ca38
 800192c:	0800ca44 	.word	0x0800ca44
 8001930:	0800ca50 	.word	0x0800ca50
 8001934:	0800ca5c 	.word	0x0800ca5c
 8001938:	0800ca68 	.word	0x0800ca68
 800193c:	0800ca74 	.word	0x0800ca74
 8001940:	0800caac 	.word	0x0800caac
 8001944:	0800ca94 	.word	0x0800ca94
 8001948:	0800cac0 	.word	0x0800cac0
 800194c:	2000029f 	.word	0x2000029f
			while (tryingAddr < max_attempts) {
 8001950:	bf00      	nop
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <iniciaBleHm10+0x3e4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	7bba      	ldrb	r2, [r7, #14]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8b7      	bhi.n	80018cc <iniciaBleHm10+0x2ec>
				}
			}

			if(tryingAddr >= max_attempts)
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <iniciaBleHm10+0x3e4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	7bba      	ldrb	r2, [r7, #14]
 8001962:	429a      	cmp	r2, r3
 8001964:	d822      	bhi.n	80019ac <iniciaBleHm10+0x3cc>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001966:	2305      	movs	r3, #5
 8001968:	73fb      	strb	r3, [r7, #15]

			break;
 800196a:	e01f      	b.n	80019ac <iniciaBleHm10+0x3cc>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <iniciaBleHm10+0x3e8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <iniciaBleHm10+0x3e8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0210 	orr.w	r2, r2, #16
 800197e:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <iniciaBleHm10+0x3ec>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <iniciaBleHm10+0x3ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0202 	orr.w	r2, r2, #2
 8001992:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <iniciaBleHm10+0x3e8>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3330      	adds	r3, #48	; 0x30
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	4619      	mov	r1, r3
 80019a0:	f006 fafc 	bl	8007f9c <HAL_UART_Receive_DMA>
			return;
 80019a4:	e00a      	b.n	80019bc <iniciaBleHm10+0x3dc>
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 80019a6:	bf00      	nop
			break;
 80019a8:	e000      	b.n	80019ac <iniciaBleHm10+0x3cc>
		default:
			break;
 80019aa:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	f47f ae1d 	bne.w	80015ee <iniciaBleHm10+0xe>
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	f47f ae19 	bne.w	80015ee <iniciaBleHm10+0xe>
		}
	}
}
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000029f 	.word	0x2000029f
 80019c8:	20000294 	.word	0x20000294
 80019cc:	20000298 	.word	0x20000298

080019d0 <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 80019d6:	2301      	movs	r3, #1
 80019d8:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 80019da:	23ee      	movs	r3, #238	; 0xee
 80019dc:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 80019de:	23ee      	movs	r3, #238	; 0xee
 80019e0:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2103      	movs	r1, #3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fd90 	bl	800150c <Envia_bytes_UART>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <EepromInit>:

#endif /* SRC_EEPROM_H_ */


uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fb8e 	bl	8000150 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	3301      	adds	r3, #1
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f00a fa8f 	bl	800bf5c <malloc>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00a fc09 	bl	800c264 <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6a:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	7e3a      	ldrb	r2, [r7, #24]
 8001a70:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3202      	adds	r2, #2
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <EepromAddVar+0x7e>
		return 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e016      	b.n	8001acc <EepromAddVar+0xac>
	switch (tamanho) {
 8001a9e:	7e3b      	ldrb	r3, [r7, #24]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00e      	beq.n	8001ac2 <EepromAddVar+0xa2>
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	dc10      	bgt.n	8001aca <EepromAddVar+0xaa>
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <EepromAddVar+0x92>
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d004      	beq.n	8001aba <EepromAddVar+0x9a>
 8001ab0:	e00b      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ab6:	61da      	str	r2, [r3, #28]
		break;
 8001ab8:	e007      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abe:	621a      	str	r2, [r3, #32]
		break;
 8001ac0:	e003      	b.n	8001aca <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001ac8:	bf00      	nop
	}
	return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af04      	add	r7, sp, #16
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	4896      	ldr	r0, [pc, #600]	; (8001d40 <EepromSetVar+0x26c>)
 8001ae6:	f003 fe6c 	bl	80057c2 <HAL_GPIO_WritePin>
 8001aea:	2005      	movs	r0, #5
 8001aec:	f002 fc1c 	bl	8004328 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	221e      	movs	r2, #30
 8001afa:	21a2      	movs	r1, #162	; 0xa2
 8001afc:	f004 f8b8 	bl	8005c70 <HAL_I2C_IsDeviceReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 810d 	bne.w	8001d26 <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d07e      	beq.n	8001c10 <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	7e1b      	ldrb	r3, [r3, #24]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d04f      	beq.n	8001bba <EepromSetVar+0xe6>
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	f300 8103 	bgt.w	8001d26 <EepromSetVar+0x252>
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d002      	beq.n	8001b2a <EepromSetVar+0x56>
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d022      	beq.n	8001b6e <EepromSetVar+0x9a>
 8001b28:	e0fd      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	23c8      	movs	r3, #200	; 0xc8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2310      	movs	r3, #16
 8001b52:	21a2      	movs	r1, #162	; 0xa2
 8001b54:	f003 ff92 	bl	8005a7c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80d7 	beq.w	8001d10 <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]

				break;
 8001b6c:	e0db      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	461a      	mov	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	881a      	ldrh	r2, [r3, #0]
 8001b8e:	23c8      	movs	r3, #200	; 0xc8
 8001b90:	9302      	str	r3, [sp, #8]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	f107 0318 	add.w	r3, r7, #24
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	21a2      	movs	r1, #162	; 0xa2
 8001ba0:	f003 ff6c 	bl	8005a7c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80b3 	beq.w	8001d14 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	801a      	strh	r2, [r3, #0]
				break;
 8001bb8:	e0b5      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0e1b      	lsrs	r3, r3, #24
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	881a      	ldrh	r2, [r3, #0]
 8001be6:	23c8      	movs	r3, #200	; 0xc8
 8001be8:	9302      	str	r3, [sp, #8]
 8001bea:	2304      	movs	r3, #4
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	21a2      	movs	r1, #162	; 0xa2
 8001bf8:	f003 ff40 	bl	8005a7c <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8089 	beq.w	8001d18 <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	601a      	str	r2, [r3, #0]
				break;
 8001c0e:	e08a      	b.n	8001d26 <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d04b      	beq.n	8001cb0 <EepromSetVar+0x1dc>
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	f300 8084 	bgt.w	8001d26 <EepromSetVar+0x252>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d002      	beq.n	8001c28 <EepromSetVar+0x154>
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d01e      	beq.n	8001c64 <EepromSetVar+0x190>
 8001c26:	e07e      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d075      	beq.n	8001d1c <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	881a      	ldrh	r2, [r3, #0]
 8001c4c:	23c8      	movs	r3, #200	; 0xc8
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	2301      	movs	r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	21a2      	movs	r1, #162	; 0xa2
 8001c5e:	f003 ff0d 	bl	8005a7c <HAL_I2C_Mem_Write>

				break;
 8001c62:	e060      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d059      	beq.n	8001d20 <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	23c8      	movs	r3, #200	; 0xc8
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2310      	movs	r3, #16
 8001ca8:	21a2      	movs	r1, #162	; 0xa2
 8001caa:	f003 fee7 	bl	8005a7c <HAL_I2C_Mem_Write>
				break;
 8001cae:	e03a      	b.n	8001d26 <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d035      	beq.n	8001d24 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e1b      	lsrs	r3, r3, #24
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	23c8      	movs	r3, #200	; 0xc8
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2310      	movs	r3, #16
 8001d08:	21a2      	movs	r1, #162	; 0xa2
 8001d0a:	f003 feb7 	bl	8005a7c <HAL_I2C_Mem_Write>
				break;
 8001d0e:	e00a      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d10:	bf00      	nop
 8001d12:	e008      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d14:	bf00      	nop
 8001d16:	e006      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d18:	bf00      	nop
 8001d1a:	e004      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d1c:	bf00      	nop
 8001d1e:	e002      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <EepromSetVar+0x252>
					break;
 8001d24:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8001d26:	2005      	movs	r0, #5
 8001d28:	f002 fafe 	bl	8004328 <HAL_Delay>
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <EepromSetVar+0x26c>)
 8001d32:	f003 fd46 	bl	80057c2 <HAL_GPIO_WritePin>
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40010c00 	.word	0x40010c00

08001d44 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e014      	b.n	8001d7c <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3202      	adds	r2, #2
 8001d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3202      	adds	r2, #2
 8001d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff feb2 	bl	8001ad4 <EepromSetVar>
		HAL_Delay(10);
 8001d70:	200a      	movs	r0, #10
 8001d72:	f002 fad9 	bl	8004328 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001d82:	7bfa      	ldrb	r2, [r7, #15]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3e4      	bcc.n	8001d52 <RestauraPadraoTudo+0xe>
	}
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <vApplicationGetIdleTaskMemory+0x28>)
 8001da4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001daa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	200004a0 	.word	0x200004a0
 8001dc0:	20000540 	.word	0x20000540

08001dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	b0b6      	sub	sp, #216	; 0xd8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dca:	f002 fa7b 	bl	80042c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dce:	f000 f8f3 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd2:	f000 fb53 	bl	800247c <MX_GPIO_Init>
  MX_DMA_Init();
 8001dd6:	f000 fb23 	bl	8002420 <MX_DMA_Init>
  MX_ADC1_Init();
 8001dda:	f000 f943 	bl	8002064 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001dde:	f000 f98f 	bl	8002100 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001de2:	f000 fa31 	bl	8002248 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001de6:	f000 f9b9 	bl	800215c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001dea:	f000 fac5 	bl	8002378 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001dee:	f000 faed 	bl	80023cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 2);// ADC_DMA
 8001df2:	2202      	movs	r2, #2
 8001df4:	495b      	ldr	r1, [pc, #364]	; (8001f64 <main+0x1a0>)
 8001df6:	485c      	ldr	r0, [pc, #368]	; (8001f68 <main+0x1a4>)
 8001df8:	f002 fb92 	bl	8004520 <HAL_ADC_Start_DMA>

  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8001dfc:	2108      	movs	r1, #8
 8001dfe:	485b      	ldr	r0, [pc, #364]	; (8001f6c <main+0x1a8>)
 8001e00:	f005 f8c2 	bl	8006f88 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8001e04:	210c      	movs	r1, #12
 8001e06:	4859      	ldr	r0, [pc, #356]	; (8001f6c <main+0x1a8>)
 8001e08:	f005 f8be 	bl	8006f88 <HAL_TIM_PWM_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8001e18:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f007 fa92 	bl	8009348 <osSemaphoreCreate>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a52      	ldr	r2, [pc, #328]	; (8001f70 <main+0x1ac>)
 8001e28:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <main+0x1b0>)
 8001e2c:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8001e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 8001e36:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fab5 	bl	80093ac <osMessageCreate>
 8001e42:	4603      	mov	r3, r0
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <main+0x1b4>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <main+0x1b8>)
 8001e4a:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8001e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 8001e54:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f007 faa6 	bl	80093ac <osMessageCreate>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a47      	ldr	r2, [pc, #284]	; (8001f80 <main+0x1bc>)
 8001e64:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <main+0x1c0>)
 8001e68:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 8001e72:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f007 fa97 	bl	80093ac <osMessageCreate>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a41      	ldr	r2, [pc, #260]	; (8001f88 <main+0x1c4>)
 8001e82:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 8001e84:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <main+0x1b0>)
 8001e86:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8001e90:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f007 fa88 	bl	80093ac <osMessageCreate>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <main+0x1c8>)
 8001ea0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <main+0x1cc>)
 8001ea4:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001ea8:	461d      	mov	r5, r3
 8001eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8001eb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 f956 	bl	800916e <osThreadCreate>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a33      	ldr	r2, [pc, #204]	; (8001f94 <main+0x1d0>)
 8001ec6:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <main+0x1d4>)
 8001eca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001ece:	461d      	mov	r5, r3
 8001ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ed8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8001edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f007 f943 	bl	800916e <osThreadCreate>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <main+0x1d8>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8001eee:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <main+0x1dc>)
 8001ef0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8001f02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f007 f930 	bl	800916e <osThreadCreate>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <main+0x1e0>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <main+0x1e4>)
 8001f16:	f107 0420 	add.w	r4, r7, #32
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f007 f91d 	bl	800916e <osThreadCreate>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <main+0x1e8>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x1ec>)
 8001f3c:	1d3c      	adds	r4, r7, #4
 8001f3e:	461d      	mov	r5, r3
 8001f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f007 f90c 	bl	800916e <osThreadCreate>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <main+0x1f0>)
 8001f5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f5c:	f007 f900 	bl	8009160 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <main+0x19c>
 8001f62:	bf00      	nop
 8001f64:	20001058 	.word	0x20001058
 8001f68:	20000740 	.word	0x20000740
 8001f6c:	20000850 	.word	0x20000850
 8001f70:	20000f14 	.word	0x20000f14
 8001f74:	0800cacc 	.word	0x0800cacc
 8001f78:	20000f04 	.word	0x20000f04
 8001f7c:	0800cadc 	.word	0x0800cadc
 8001f80:	20000f08 	.word	0x20000f08
 8001f84:	0800caec 	.word	0x0800caec
 8001f88:	20000f0c 	.word	0x20000f0c
 8001f8c:	20000f10 	.word	0x20000f10
 8001f90:	0800cb0c 	.word	0x0800cb0c
 8001f94:	200009b0 	.word	0x200009b0
 8001f98:	0800cb38 	.word	0x0800cb38
 8001f9c:	200009b4 	.word	0x200009b4
 8001fa0:	0800cb60 	.word	0x0800cb60
 8001fa4:	200009b8 	.word	0x200009b8
 8001fa8:	0800cb88 	.word	0x0800cb88
 8001fac:	20000c5c 	.word	0x20000c5c
 8001fb0:	0800cbb0 	.word	0x0800cbb0
 8001fb4:	20000f00 	.word	0x20000f00

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc2:	2228      	movs	r2, #40	; 0x28
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00a f89c 	bl	800c104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fec:	2301      	movs	r3, #1
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ffc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002000:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002006:	4618      	mov	r0, r3
 8002008:	f004 f9ce 	bl	80063a8 <HAL_RCC_OscConfig>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002012:	f000 fb4f 	bl	80026b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002016:	230f      	movs	r3, #15
 8002018:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	2101      	movs	r1, #1
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fc3b 	bl	80068ac <HAL_RCC_ClockConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800203c:	f000 fb3a 	bl	80026b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002040:	2302      	movs	r3, #2
 8002042:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8002044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002048:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f004 fdeb 	bl	8006c28 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002058:	f000 fb2c 	bl	80026b4 <Error_Handler>
  }
}
 800205c:	bf00      	nop
 800205e:	3750      	adds	r7, #80	; 0x50
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <MX_ADC1_Init+0x98>)
 8002078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <MX_ADC1_Init+0x94>)
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002084:	2201      	movs	r2, #1
 8002086:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <MX_ADC1_Init+0x94>)
 800208a:	2200      	movs	r2, #0
 800208c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002090:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002094:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <MX_ADC1_Init+0x94>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800209c:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <MX_ADC1_Init+0x94>)
 800209e:	2202      	movs	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020a2:	4815      	ldr	r0, [pc, #84]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020a4:	f002 f964 	bl	8004370 <HAL_ADC_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80020ae:	f000 fb01 	bl	80026b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80020ba:	2307      	movs	r3, #7
 80020bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	480d      	ldr	r0, [pc, #52]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020c4:	f002 fb1c 	bl	8004700 <HAL_ADC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020ce:	f000 faf1 	bl	80026b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020d2:	2301      	movs	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020d6:	2302      	movs	r3, #2
 80020d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4806      	ldr	r0, [pc, #24]	; (80020f8 <MX_ADC1_Init+0x94>)
 80020e0:	f002 fb0e 	bl	8004700 <HAL_ADC_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80020ea:	f000 fae3 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000740 	.word	0x20000740
 80020fc:	40012400 	.word	0x40012400

08002100 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_I2C1_Init+0x50>)
 8002106:	4a13      	ldr	r2, [pc, #76]	; (8002154 <MX_I2C1_Init+0x54>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_I2C1_Init+0x50>)
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MX_I2C1_Init+0x58>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_I2C1_Init+0x50>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_I2C1_Init+0x50>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_I2C1_Init+0x50>)
 800211e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_I2C1_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_I2C1_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_I2C1_Init+0x50>)
 8002132:	2200      	movs	r2, #0
 8002134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_I2C1_Init+0x50>)
 8002138:	2200      	movs	r2, #0
 800213a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_I2C1_Init+0x50>)
 800213e:	f003 fb59 	bl	80057f4 <HAL_I2C_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002148:	f000 fab4 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	200007b4 	.word	0x200007b4
 8002154:	40005400 	.word	0x40005400
 8002158:	000186a0 	.word	0x000186a0

0800215c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <MX_TIM2_Init+0xe8>)
 800218e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002192:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002196:	f240 7207 	movw	r2, #1799	; 0x707
 800219a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <MX_TIM2_Init+0xe8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80021a2:	4b28      	ldr	r3, [pc, #160]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021a4:	2263      	movs	r2, #99	; 0x63
 80021a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021b4:	4823      	ldr	r0, [pc, #140]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021b6:	f004 fded 	bl	8006d94 <HAL_TIM_Base_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021c0:	f000 fa78 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ce:	4619      	mov	r1, r3
 80021d0:	481c      	ldr	r0, [pc, #112]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021d2:	f005 f9a9 	bl	8007528 <HAL_TIM_ConfigClockSource>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80021dc:	f000 fa6a 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <MX_TIM2_Init+0xe8>)
 80021e2:	f004 fe79 	bl	8006ed8 <HAL_TIM_PWM_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80021ec:	f000 fa62 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	4619      	mov	r1, r3
 80021fe:	4811      	ldr	r0, [pc, #68]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002200:	f005 fd22 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800220a:	f000 fa53 	bl	80026b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8002212:	2332      	movs	r3, #50	; 0x32
 8002214:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	220c      	movs	r2, #12
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002226:	f005 f8bd 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002230:	f000 fa40 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002234:	4803      	ldr	r0, [pc, #12]	; (8002244 <MX_TIM2_Init+0xe8>)
 8002236:	f000 fe83 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 800223a:	bf00      	nop
 800223c:	3738      	adds	r7, #56	; 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000808 	.word	0x20000808

08002248 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08e      	sub	sp, #56	; 0x38
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	f107 0320 	add.w	r3, r7, #32
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
 8002274:	615a      	str	r2, [r3, #20]
 8002276:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <MX_TIM3_Init+0x128>)
 800227a:	4a3e      	ldr	r2, [pc, #248]	; (8002374 <MX_TIM3_Init+0x12c>)
 800227c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <MX_TIM3_Init+0x128>)
 8002280:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002286:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <MX_TIM3_Init+0x128>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <MX_TIM3_Init+0x128>)
 800228e:	2263      	movs	r2, #99	; 0x63
 8002290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002292:	4b37      	ldr	r3, [pc, #220]	; (8002370 <MX_TIM3_Init+0x128>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <MX_TIM3_Init+0x128>)
 800229a:	2200      	movs	r2, #0
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800229e:	4834      	ldr	r0, [pc, #208]	; (8002370 <MX_TIM3_Init+0x128>)
 80022a0:	f004 fd78 	bl	8006d94 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80022aa:	f000 fa03 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022b8:	4619      	mov	r1, r3
 80022ba:	482d      	ldr	r0, [pc, #180]	; (8002370 <MX_TIM3_Init+0x128>)
 80022bc:	f005 f934 	bl	8007528 <HAL_TIM_ConfigClockSource>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80022c6:	f000 f9f5 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022ca:	4829      	ldr	r0, [pc, #164]	; (8002370 <MX_TIM3_Init+0x128>)
 80022cc:	f004 fe04 	bl	8006ed8 <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80022d6:	f000 f9ed 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022e2:	f107 0320 	add.w	r3, r7, #32
 80022e6:	4619      	mov	r1, r3
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_TIM3_Init+0x128>)
 80022ea:	f005 fcad 	bl	8007c48 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80022f4:	f000 f9de 	bl	80026b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002304:	2304      	movs	r3, #4
 8002306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_TIM3_Init+0x128>)
 8002310:	f005 f848 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800231a:	f000 f9cb 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2204      	movs	r2, #4
 8002322:	4619      	mov	r1, r3
 8002324:	4812      	ldr	r0, [pc, #72]	; (8002370 <MX_TIM3_Init+0x128>)
 8002326:	f005 f83d 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002330:	f000 f9c0 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2208      	movs	r2, #8
 8002338:	4619      	mov	r1, r3
 800233a:	480d      	ldr	r0, [pc, #52]	; (8002370 <MX_TIM3_Init+0x128>)
 800233c:	f005 f832 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002346:	f000 f9b5 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	220c      	movs	r2, #12
 800234e:	4619      	mov	r1, r3
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM3_Init+0x128>)
 8002352:	f005 f827 	bl	80073a4 <HAL_TIM_PWM_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800235c:	f000 f9aa 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM3_Init+0x128>)
 8002362:	f000 fded 	bl	8002f40 <HAL_TIM_MspPostInit>

}
 8002366:	bf00      	nop
 8002368:	3738      	adds	r7, #56	; 0x38
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000850 	.word	0x20000850
 8002374:	40000400 	.word	0x40000400

08002378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART1_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002384:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART1_UART_Init+0x4c>)
 80023b0:	f005 fcba 	bl	8007d28 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f000 f97b 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000898 	.word	0x20000898
 80023c8:	40013800 	.word	0x40013800

080023cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <MX_USART3_UART_Init+0x50>)
 80023d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023f2:	220c      	movs	r2, #12
 80023f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002402:	4805      	ldr	r0, [pc, #20]	; (8002418 <MX_USART3_UART_Init+0x4c>)
 8002404:	f005 fc90 	bl	8007d28 <HAL_UART_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800240e:	f000 f951 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200008e0 	.word	0x200008e0
 800241c:	40004800 	.word	0x40004800

08002420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <MX_DMA_Init+0x58>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	4a13      	ldr	r2, [pc, #76]	; (8002478 <MX_DMA_Init+0x58>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6153      	str	r3, [r2, #20]
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <MX_DMA_Init+0x58>)
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2105      	movs	r1, #5
 8002442:	200b      	movs	r0, #11
 8002444:	f002 fc2f 	bl	8004ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002448:	200b      	movs	r0, #11
 800244a:	f002 fc48 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2105      	movs	r1, #5
 8002452:	200d      	movs	r0, #13
 8002454:	f002 fc27 	bl	8004ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002458:	200d      	movs	r0, #13
 800245a:	f002 fc40 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2105      	movs	r1, #5
 8002462:	200f      	movs	r0, #15
 8002464:	f002 fc1f 	bl	8004ca6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002468:	200f      	movs	r0, #15
 800246a:	f002 fc38 	bl	8004cde <HAL_NVIC_EnableIRQ>

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0308 	add.w	r3, r7, #8
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <MX_GPIO_Init+0xfc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <MX_GPIO_Init+0xfc>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <MX_GPIO_Init+0xfc>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024ae:	f043 0308 	orr.w	r3, r3, #8
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <MX_GPIO_Init+0xfc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80024c6:	482d      	ldr	r0, [pc, #180]	; (800257c <MX_GPIO_Init+0x100>)
 80024c8:	f003 f97b 	bl	80057c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80024cc:	2200      	movs	r2, #0
 80024ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024d2:	482b      	ldr	r0, [pc, #172]	; (8002580 <MX_GPIO_Init+0x104>)
 80024d4:	f003 f975 	bl	80057c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 80024d8:	2200      	movs	r2, #0
 80024da:	21f8      	movs	r1, #248	; 0xf8
 80024dc:	4827      	ldr	r0, [pc, #156]	; (800257c <MX_GPIO_Init+0x100>)
 80024de:	f003 f970 	bl	80057c2 <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 80024e2:	f246 0378 	movw	r3, #24696	; 0x6078
 80024e6:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2302      	movs	r3, #2
 80024f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	4820      	ldr	r0, [pc, #128]	; (800257c <MX_GPIO_Init+0x100>)
 80024fc:	f002 ff0a 	bl	8005314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 8002500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_GPIO_Init+0x108>)
 8002508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 0308 	add.w	r3, r7, #8
 8002512:	4619      	mov	r1, r3
 8002514:	4819      	ldr	r0, [pc, #100]	; (800257c <MX_GPIO_Init+0x100>)
 8002516:	f002 fefd 	bl	8005314 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_GPIO_Init+0x108>)
 8002522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002528:	f107 0308 	add.w	r3, r7, #8
 800252c:	4619      	mov	r1, r3
 800252e:	4814      	ldr	r0, [pc, #80]	; (8002580 <MX_GPIO_Init+0x104>)
 8002530:	f002 fef0 	bl	8005314 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 8002534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253a:	2301      	movs	r3, #1
 800253c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2302      	movs	r3, #2
 8002544:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	4619      	mov	r1, r3
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <MX_GPIO_Init+0x104>)
 800254e:	f002 fee1 	bl	8005314 <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2301      	movs	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800255a:	2302      	movs	r3, #2
 800255c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2302      	movs	r3, #2
 8002560:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4619      	mov	r1, r3
 8002568:	4804      	ldr	r0, [pc, #16]	; (800257c <MX_GPIO_Init+0x100>)
 800256a:	f002 fed3 	bl	8005314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40010c00 	.word	0x40010c00
 8002580:	40010800 	.word	0x40010800
 8002584:	10110000 	.word	0x10110000

08002588 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float 	Temp1,Temp2;
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;

	if(i<TAM){
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002598:	d216      	bcs.n	80025c8 <HAL_ADC_ConvCpltCallback+0x40>
		somatorio1+=buffer_ADC[1]; // somatorio
 800259a:	4b37      	ldr	r3, [pc, #220]	; (8002678 <HAL_ADC_ConvCpltCallback+0xf0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a37      	ldr	r2, [pc, #220]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025a8:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_ADC_ConvCpltCallback+0xf0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a34      	ldr	r2, [pc, #208]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025b8:	601a      	str	r2, [r3, #0]
		i++;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3301      	adds	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b2c      	ldr	r3, [pc, #176]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 80025c4:	801a      	strh	r2, [r3, #0]
//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
//	static uint32_t temp = 0;
//	temp = ADC1->DR;
//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 80025c6:	e050      	b.n	800266a <HAL_ADC_ConvCpltCallback+0xe2>
		somatorio1 = somatorio1 / TAM; //calc media
 80025c8:	4b2c      	ldr	r3, [pc, #176]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <HAL_ADC_ConvCpltCallback+0xfc>)
 80025ce:	fb82 1203 	smull	r1, r2, r2, r3
 80025d2:	1152      	asrs	r2, r2, #5
 80025d4:	17db      	asrs	r3, r3, #31
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	4a28      	ldr	r2, [pc, #160]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025da:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_ADC_ConvCpltCallback+0xfc>)
 80025e2:	fb82 1203 	smull	r1, r2, r2, r3
 80025e6:	1152      	asrs	r2, r2, #5
 80025e8:	17db      	asrs	r3, r3, #31
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 80025ee:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 80025f0:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fae2 	bl	8000bc0 <__aeabi_i2f>
 80025fc:	4603      	mov	r3, r0
 80025fe:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002600:	4921      	ldr	r1, [pc, #132]	; (8002688 <HAL_ADC_ConvCpltCallback+0x100>)
 8002602:	69f8      	ldr	r0, [r7, #28]
 8002604:	f7fe fbe4 	bl	8000dd0 <__aeabi_fdiv>
 8002608:	4603      	mov	r3, r0
 800260a:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_ADC_ConvCpltCallback+0xf4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fad1 	bl	8000bc0 <__aeabi_i2f>
 800261e:	4603      	mov	r3, r0
 8002620:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002622:	4919      	ldr	r1, [pc, #100]	; (8002688 <HAL_ADC_ConvCpltCallback+0x100>)
 8002624:	69b8      	ldr	r0, [r7, #24]
 8002626:	f7fe fbd3 	bl	8000dd0 <__aeabi_fdiv>
 800262a:	4603      	mov	r3, r0
 800262c:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002634:	69f8      	ldr	r0, [r7, #28]
 8002636:	f7fd fef7 	bl	8000428 <__aeabi_f2d>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002642:	69b8      	ldr	r0, [r7, #24]
 8002644:	f7fd fef0 	bl	8000428 <__aeabi_f2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_ADC_ConvCpltCallback+0x104>)
 8002652:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002656:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 800265a:	490c      	ldr	r1, [pc, #48]	; (800268c <HAL_ADC_ConvCpltCallback+0x104>)
 800265c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002660:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_ADC_ConvCpltCallback+0xec>)
 8002666:	2200      	movs	r2, #0
 8002668:	801a      	strh	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000109a 	.word	0x2000109a
 8002678:	20001058 	.word	0x20001058
 800267c:	2000109c 	.word	0x2000109c
 8002680:	200010a0 	.word	0x200010a0
 8002684:	10624dd3 	.word	0x10624dd3
 8002688:	42c80000 	.word	0x42c80000
 800268c:	20001068 	.word	0x20001068

08002690 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026a2:	f001 fe25 	bl	80042f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	e7fe      	b.n	80026bc <Error_Handler+0x8>

080026be <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026ee:	f7fe f983 	bl	80009f8 <__aeabi_dcmpgt>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002704:	e011      	b.n	800272a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002712:	f7fe f953 	bl	80009bc <__aeabi_dcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d100      	bne.n	800271e <PID_Init+0x60>
}
 800271c:	e005      	b.n	800272a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	0000      	movs	r0, r0
 8002734:	0000      	movs	r0, r0
	...

08002738 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af06      	add	r7, sp, #24
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800275e:	a318      	add	r3, pc, #96	; (adr r3, 80027c0 <PID+0x88>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	e9cd 2300 	strd	r2, r3, [sp]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f931 	bl	80029d8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2264      	movs	r2, #100	; 0x64
 800277a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800277c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002780:	4619      	mov	r1, r3
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 fa38 	bl	8002bf8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002788:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800278c:	9304      	str	r3, [sp, #16]
 800278e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800279a:	e9cd 2300 	strd	r2, r3, [sp]
 800279e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f984 	bl	8002ab0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80027a8:	f001 fdb4 	bl	8004314 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	1ad2      	subs	r2, r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	605a      	str	r2, [r3, #4]
	
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	00000000 	.word	0x00000000
 80027c4:	406fe000 	.word	0x406fe000

080027c8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b08c      	sub	sp, #48	; 0x30
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	785b      	ldrb	r3, [r3, #1]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <PID_Compute+0x14>
	{
		return _FALSE;
 80027d8:	2300      	movs	r3, #0
 80027da:	e0db      	b.n	8002994 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80027dc:	f001 fd9a 	bl	8004314 <HAL_GetTick>
 80027e0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	f0c0 80cd 	bcc.w	8002992 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	f7fd fcaa 	bl	8000168 <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f7fd fc9f 	bl	8000168 <__aeabi_dsub>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800283e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002842:	f7fd fe49 	bl	80004d8 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4620      	mov	r0, r4
 800284c:	4629      	mov	r1, r5
 800284e:	f7fd fc8d 	bl	800016c <__adddf3>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d114      	bne.n	800288e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002874:	f7fd fe30 	bl	80004d8 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4620      	mov	r0, r4
 800287e:	4629      	mov	r1, r5
 8002880:	f7fd fc72 	bl	8000168 <__aeabi_dsub>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800289a:	f7fe f8ad 	bl	80009f8 <__aeabi_dcmpgt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80028b0:	e010      	b.n	80028d4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80028be:	f7fe f87d 	bl	80009bc <__aeabi_dcmplt>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028e6:	f7fd fdf7 	bl	80004d8 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80028f2:	e005      	b.n	8002900 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800290c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002910:	f7fd fde2 	bl	80004d8 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4620      	mov	r0, r4
 800291a:	4629      	mov	r1, r5
 800291c:	f7fd fc24 	bl	8000168 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002928:	f7fd fc20 	bl	800016c <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800293a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800293e:	f7fe f85b 	bl	80009f8 <__aeabi_dcmpgt>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800294e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002952:	e00e      	b.n	8002972 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800295a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800295e:	f7fe f82d 	bl	80009bc <__aeabi_dcmplt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800296e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002984:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800298c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002992:	2300      	movs	r3, #0
	}
	
}
 8002994:	4618      	mov	r0, r3
 8002996:	3730      	adds	r7, #48	; 0x30
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}

0800299c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d006      	beq.n	80029ca <PID_SetMode+0x2e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe7a 	bl	80026be <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	705a      	strb	r2, [r3, #1]
	
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80029e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ec:	f7fd fffa 	bl	80009e4 <__aeabi_dcmpge>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d158      	bne.n	8002aa8 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80029f6:	68f9      	ldr	r1, [r7, #12]
 80029f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fc:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002a00:	68f9      	ldr	r1, [r7, #12]
 8002a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a06:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04b      	beq.n	8002aaa <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a20:	f7fd ffea 	bl	80009f8 <__aeabi_dcmpgt>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d007      	beq.n	8002a3a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a34:	e9c1 2300 	strd	r2, r3, [r1]
 8002a38:	e012      	b.n	8002a60 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a48:	f7fd ffb8 	bl	80009bc <__aeabi_dcmplt>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a5c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a6c:	f7fd ffc4 	bl	80009f8 <__aeabi_dcmpgt>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002a7c:	68f9      	ldr	r1, [r7, #12]
 8002a7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002a82:	e012      	b.n	8002aaa <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002a90:	f7fd ff94 	bl	80009bc <__aeabi_dcmplt>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002aa0:	68f9      	ldr	r1, [r7, #12]
 8002aa2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002aa6:	e000      	b.n	8002aaa <PID_SetOutputLimits+0xd2>
		return;
 8002aa8:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac8:	f7fd ff78 	bl	80009bc <__aeabi_dcmplt>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 808b 	bne.w	8002bea <PID_SetTunings2+0x13a>
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ae0:	f7fd ff6c 	bl	80009bc <__aeabi_dcmplt>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d17f      	bne.n	8002bea <PID_SetTunings2+0x13a>
 8002aea:	f04f 0200 	mov.w	r2, #0
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002af6:	f7fd ff61 	bl	80009bc <__aeabi_dcmplt>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d174      	bne.n	8002bea <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002b06:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002b08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002b1c:	68f9      	ldr	r1, [r7, #12]
 8002b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b36:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fc50 	bl	80003e4 <__aeabi_ui2d>
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <PID_SetTunings2+0x144>)
 8002b4a:	f7fd fdef 	bl	800072c <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002b60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b68:	f7fd fcb6 	bl	80004d8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002b76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b7e:	f7fd fdd5 	bl	800072c <__aeabi_ddiv>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	78db      	ldrb	r3, [r3, #3]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d12b      	bne.n	8002bec <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	f7fd fae1 	bl	8000168 <__aeabi_dsub>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	68f9      	ldr	r1, [r7, #12]
 8002bac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002bb6:	f04f 0000 	mov.w	r0, #0
 8002bba:	f04f 0100 	mov.w	r1, #0
 8002bbe:	f7fd fad3 	bl	8000168 <__aeabi_dsub>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	68f9      	ldr	r1, [r7, #12]
 8002bc8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f7fd fac5 	bl	8000168 <__aeabi_dsub>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	68f9      	ldr	r1, [r7, #12]
 8002be4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002be8:	e000      	b.n	8002bec <PID_SetTunings2+0x13c>
		return;
 8002bea:	bf00      	nop
		
	}
	
}
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	408f4000 	.word	0x408f4000

08002bf8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d02e      	beq.n	8002c6a <PID_SetControllerDirection+0x72>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d029      	beq.n	8002c6a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c1c:	f04f 0000 	mov.w	r0, #0
 8002c20:	f04f 0100 	mov.w	r1, #0
 8002c24:	f7fd faa0 	bl	8000168 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	f7fd fa92 	bl	8000168 <__aeabi_dsub>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c54:	f04f 0000 	mov.w	r0, #0
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	f7fd fa84 	bl	8000168 <__aeabi_dsub>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	70da      	strb	r2, [r3, #3]
	
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	dd2e      	ble.n	8002ce6 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f7fd fbbb 	bl	8000404 <__aeabi_i2d>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	460d      	mov	r5, r1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fba4 	bl	80003e4 <__aeabi_ui2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	f7fd fd42 	bl	800072c <__aeabi_ddiv>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002cb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cba:	f7fd fc0d 	bl	80004d8 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002cce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd2:	f7fd fd2b 	bl	800072c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf6:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <HAL_MspInit+0x68>)
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_MspInit+0x68>)
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	6193      	str	r3, [r2, #24]
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_MspInit+0x68>)
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_MspInit+0x68>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_MspInit+0x68>)
 8002d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d18:	61d3      	str	r3, [r2, #28]
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <HAL_MspInit+0x68>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	210f      	movs	r1, #15
 8002d2a:	f06f 0001 	mvn.w	r0, #1
 8002d2e:	f001 ffba 	bl	8004ca6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_MspInit+0x6c>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_MspInit+0x6c>)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40010000 	.word	0x40010000

08002d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_ADC_MspInit+0xbc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d149      	bne.n	8002e14 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <HAL_ADC_MspInit+0xc0>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002db0:	2303      	movs	r3, #3
 8002db2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db4:	2303      	movs	r3, #3
 8002db6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db8:	f107 0310 	add.w	r3, r7, #16
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4819      	ldr	r0, [pc, #100]	; (8002e24 <HAL_ADC_MspInit+0xc4>)
 8002dc0:	f002 faa8 	bl	8005314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_ADC_MspInit+0xcc>)
 8002dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd0:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dee:	2220      	movs	r2, #32
 8002df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002dfa:	f001 ff8d 	bl	8004d18 <HAL_DMA_Init>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002e04:	f7ff fc56 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	4a06      	ldr	r2, [pc, #24]	; (8002e28 <HAL_ADC_MspInit+0xc8>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3720      	adds	r7, #32
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40012400 	.word	0x40012400
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40010800 	.word	0x40010800
 8002e28:	20000770 	.word	0x20000770
 8002e2c:	40020008 	.word	0x40020008

08002e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_I2C_MspInit+0x90>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d132      	bne.n	8002eb6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	6193      	str	r3, [r2, #24]
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e6e:	2312      	movs	r3, #18
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	f107 0314 	add.w	r3, r7, #20
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4812      	ldr	r0, [pc, #72]	; (8002ec8 <HAL_I2C_MspInit+0x98>)
 8002e7e:	f002 fa49 	bl	8005314 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_I2C_MspInit+0x9c>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	4a0c      	ldr	r2, [pc, #48]	; (8002ecc <HAL_I2C_MspInit+0x9c>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea8:	61d3      	str	r3, [r2, #28]
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_I2C_MspInit+0x94>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40005400 	.word	0x40005400
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010c00 	.word	0x40010c00
 8002ecc:	40010000 	.word	0x40010000

08002ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002efa:	e018      	b.n	8002f2e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_TIM_Base_MspInit+0x6c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d113      	bne.n	8002f2e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f06:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	61d3      	str	r3, [r2, #28]
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_TIM_Base_MspInit+0x68>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2105      	movs	r1, #5
 8002f22:	201d      	movs	r0, #29
 8002f24:	f001 febf 	bl	8004ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f28:	201d      	movs	r0, #29
 8002f2a:	f001 fed8 	bl	8004cde <HAL_NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40000400 	.word	0x40000400

08002f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0318 	add.w	r3, r7, #24
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d118      	bne.n	8002f92 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a27      	ldr	r2, [pc, #156]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f78:	2308      	movs	r3, #8
 8002f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2302      	movs	r3, #2
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	f107 0318 	add.w	r3, r7, #24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	481f      	ldr	r0, [pc, #124]	; (8003008 <HAL_TIM_MspPostInit+0xc8>)
 8002f8c:	f002 f9c2 	bl	8005314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002f90:	e034      	b.n	8002ffc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_TIM_MspPostInit+0xcc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12f      	bne.n	8002ffc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a18      	ldr	r2, [pc, #96]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fa2:	f043 0304 	orr.w	r3, r3, #4
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a12      	ldr	r2, [pc, #72]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_TIM_MspPostInit+0xc4>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd8:	f107 0318 	add.w	r3, r7, #24
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480a      	ldr	r0, [pc, #40]	; (8003008 <HAL_TIM_MspPostInit+0xc8>)
 8002fe0:	f002 f998 	bl	8005314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	2302      	movs	r3, #2
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_TIM_MspPostInit+0xd0>)
 8002ff8:	f002 f98c 	bl	8005314 <HAL_GPIO_Init>
}
 8002ffc:	bf00      	nop
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	40010800 	.word	0x40010800
 800300c:	40000400 	.word	0x40000400
 8003010:	40010c00 	.word	0x40010c00

08003014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0318 	add.w	r3, r7, #24
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a62      	ldr	r2, [pc, #392]	; (80031b8 <HAL_UART_MspInit+0x1a4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d160      	bne.n	80030f6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003034:	4b61      	ldr	r3, [pc, #388]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a60      	ldr	r2, [pc, #384]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b5e      	ldr	r3, [pc, #376]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800304c:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003052:	f043 0304 	orr.w	r3, r3, #4
 8003056:	6193      	str	r3, [r2, #24]
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003072:	f107 0318 	add.w	r3, r7, #24
 8003076:	4619      	mov	r1, r3
 8003078:	4851      	ldr	r0, [pc, #324]	; (80031c0 <HAL_UART_MspInit+0x1ac>)
 800307a:	f002 f94b 	bl	8005314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800307e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 0318 	add.w	r3, r7, #24
 8003090:	4619      	mov	r1, r3
 8003092:	484b      	ldr	r0, [pc, #300]	; (80031c0 <HAL_UART_MspInit+0x1ac>)
 8003094:	f002 f93e 	bl	8005314 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003098:	4b4a      	ldr	r3, [pc, #296]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 800309a:	4a4b      	ldr	r2, [pc, #300]	; (80031c8 <HAL_UART_MspInit+0x1b4>)
 800309c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309e:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a4:	4b47      	ldr	r3, [pc, #284]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030aa:	4b46      	ldr	r3, [pc, #280]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030b0:	4b44      	ldr	r3, [pc, #272]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b6:	4b43      	ldr	r3, [pc, #268]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80030bc:	4b41      	ldr	r3, [pc, #260]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030c2:	4b40      	ldr	r3, [pc, #256]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80030c8:	483e      	ldr	r0, [pc, #248]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030ca:	f001 fe25 	bl	8004d18 <HAL_DMA_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80030d4:	f7ff faee 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80030de:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <HAL_UART_MspInit+0x1b0>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2105      	movs	r1, #5
 80030e8:	2025      	movs	r0, #37	; 0x25
 80030ea:	f001 fddc 	bl	8004ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ee:	2025      	movs	r0, #37	; 0x25
 80030f0:	f001 fdf5 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030f4:	e05c      	b.n	80031b0 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a34      	ldr	r2, [pc, #208]	; (80031cc <HAL_UART_MspInit+0x1b8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d157      	bne.n	80031b0 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003106:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800310a:	61d3      	str	r3, [r2, #28]
 800310c:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003118:	4b28      	ldr	r3, [pc, #160]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 800311e:	f043 0308 	orr.w	r3, r3, #8
 8003122:	6193      	str	r3, [r2, #24]
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <HAL_UART_MspInit+0x1a8>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800313a:	2303      	movs	r3, #3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800313e:	f107 0318 	add.w	r3, r7, #24
 8003142:	4619      	mov	r1, r3
 8003144:	4822      	ldr	r0, [pc, #136]	; (80031d0 <HAL_UART_MspInit+0x1bc>)
 8003146:	f002 f8e5 	bl	8005314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800314a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4619      	mov	r1, r3
 800315e:	481c      	ldr	r0, [pc, #112]	; (80031d0 <HAL_UART_MspInit+0x1bc>)
 8003160:	f002 f8d8 	bl	8005314 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_UART_MspInit+0x1c4>)
 8003168:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800317c:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800317e:	2200      	movs	r2, #0
 8003180:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 800318a:	2220      	movs	r2, #32
 800318c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003194:	480f      	ldr	r0, [pc, #60]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 8003196:	f001 fdbf 	bl	8004d18 <HAL_DMA_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80031a0:	f7ff fa88 	bl	80026b4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_UART_MspInit+0x1c0>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6253      	str	r3, [r2, #36]	; 0x24
}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	; 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	20000928 	.word	0x20000928
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40004800 	.word	0x40004800
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	2000096c 	.word	0x2000096c
 80031d8:	40020030 	.word	0x40020030

080031dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_UART_MspDeInit+0x6c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <HAL_UART_MspDeInit+0x70>)
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_UART_MspDeInit+0x70>)
 80031f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031f8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80031fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031fe:	4814      	ldr	r0, [pc, #80]	; (8003250 <HAL_UART_MspDeInit+0x74>)
 8003200:	f002 fa0c 	bl	800561c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	4618      	mov	r0, r3
 800320a:	f001 fddf 	bl	8004dcc <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800320e:	2025      	movs	r0, #37	; 0x25
 8003210:	f001 fd73 	bl	8004cfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003214:	e014      	b.n	8003240 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <HAL_UART_MspDeInit+0x78>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10f      	bne.n	8003240 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_UART_MspDeInit+0x70>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_UART_MspDeInit+0x70>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800322c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003230:	4809      	ldr	r0, [pc, #36]	; (8003258 <HAL_UART_MspDeInit+0x7c>)
 8003232:	f002 f9f3 	bl	800561c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	4618      	mov	r0, r3
 800323c:	f001 fdc6 	bl	8004dcc <HAL_DMA_DeInit>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013800 	.word	0x40013800
 800324c:	40021000 	.word	0x40021000
 8003250:	40010800 	.word	0x40010800
 8003254:	40004800 	.word	0x40004800
 8003258:	40010c00 	.word	0x40010c00

0800325c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08c      	sub	sp, #48	; 0x30
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003272:	4b2e      	ldr	r3, [pc, #184]	; (800332c <HAL_InitTick+0xd0>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	4a2d      	ldr	r2, [pc, #180]	; (800332c <HAL_InitTick+0xd0>)
 8003278:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800327c:	6193      	str	r3, [r2, #24]
 800327e:	4b2b      	ldr	r3, [pc, #172]	; (800332c <HAL_InitTick+0xd0>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800328a:	f107 020c 	add.w	r2, r7, #12
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f003 fc79 	bl	8006b8c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800329a:	f003 fc63 	bl	8006b64 <HAL_RCC_GetPCLK2Freq>
 800329e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <HAL_InitTick+0xd4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9b      	lsrs	r3, r3, #18
 80032aa:	3b01      	subs	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_InitTick+0xd8>)
 80032b0:	4a21      	ldr	r2, [pc, #132]	; (8003338 <HAL_InitTick+0xdc>)
 80032b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_InitTick+0xd8>)
 80032b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032ba:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032bc:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_InitTick+0xd8>)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <HAL_InitTick+0xd8>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_InitTick+0xd8>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_InitTick+0xd8>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80032d4:	4817      	ldr	r0, [pc, #92]	; (8003334 <HAL_InitTick+0xd8>)
 80032d6:	f003 fd5d 	bl	8006d94 <HAL_TIM_Base_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80032e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d11b      	bne.n	8003320 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80032e8:	4812      	ldr	r0, [pc, #72]	; (8003334 <HAL_InitTick+0xd8>)
 80032ea:	f003 fda3 	bl	8006e34 <HAL_TIM_Base_Start_IT>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80032f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032fc:	2019      	movs	r0, #25
 80032fe:	f001 fcee 	bl	8004cde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d808      	bhi.n	800331a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8003308:	2200      	movs	r2, #0
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	2019      	movs	r0, #25
 800330e:	f001 fcca 	bl	8004ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <HAL_InitTick+0xe0>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e002      	b.n	8003320 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003324:	4618      	mov	r0, r3
 8003326:	3730      	adds	r7, #48	; 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	431bde83 	.word	0x431bde83
 8003334:	200010a4 	.word	0x200010a4
 8003338:	40012c00 	.word	0x40012c00
 800333c:	20000204 	.word	0x20000204

08003340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <NMI_Handler+0x4>

08003346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800334a:	e7fe      	b.n	800334a <HardFault_Handler+0x4>

0800334c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003350:	e7fe      	b.n	8003350 <MemManage_Handler+0x4>

08003352 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003356:	e7fe      	b.n	8003356 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	e7fe      	b.n	800335c <UsageFault_Handler+0x4>

0800335e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
	...

0800336c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003370:	4802      	ldr	r0, [pc, #8]	; (800337c <DMA1_Channel1_IRQHandler+0x10>)
 8003372:	f001 fe9b 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000770 	.word	0x20000770

08003380 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003384:	4802      	ldr	r0, [pc, #8]	; (8003390 <DMA1_Channel3_IRQHandler+0x10>)
 8003386:	f001 fe91 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000096c 	.word	0x2000096c

08003394 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003398:	4803      	ldr	r0, [pc, #12]	; (80033a8 <DMA1_Channel5_IRQHandler+0x14>)
 800339a:	f001 fe87 	bl	80050ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 800339e:	4803      	ldr	r0, [pc, #12]	; (80033ac <DMA1_Channel5_IRQHandler+0x18>)
 80033a0:	f7fd fed4 	bl	800114c <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000928 	.word	0x20000928
 80033ac:	20000f18 	.word	0x20000f18

080033b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM1_UP_IRQHandler+0x10>)
 80033b6:	f003 feed 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200010a4 	.word	0x200010a4

080033c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM3_IRQHandler+0x10>)
 80033ca:	f003 fee3 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000850 	.word	0x20000850

080033d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033dc:	4803      	ldr	r0, [pc, #12]	; (80033ec <USART1_IRQHandler+0x14>)
 80033de:	f004 ff17 	bl	8008210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80033e2:	4803      	ldr	r0, [pc, #12]	; (80033f0 <USART1_IRQHandler+0x18>)
 80033e4:	f7fd fe72 	bl	80010cc <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80033e8:	bf00      	nop
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	20000898 	.word	0x20000898
 80033f0:	20000f18 	.word	0x20000f18

080033f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033fc:	4a14      	ldr	r2, [pc, #80]	; (8003450 <_sbrk+0x5c>)
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <_sbrk+0x60>)
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <_sbrk+0x64>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <_sbrk+0x64>)
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <_sbrk+0x68>)
 8003414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <_sbrk+0x64>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003424:	f008 fef2 	bl	800c20c <__errno>
 8003428:	4603      	mov	r3, r0
 800342a:	220c      	movs	r2, #12
 800342c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800342e:	f04f 33ff 	mov.w	r3, #4294967295
 8003432:	e009      	b.n	8003448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <_sbrk+0x64>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800343a:	4b07      	ldr	r3, [pc, #28]	; (8003458 <_sbrk+0x64>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <_sbrk+0x64>)
 8003444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20005000 	.word	0x20005000
 8003454:	00000400 	.word	0x00000400
 8003458:	200010ec 	.word	0x200010ec
 800345c:	200020f8 	.word	0x200020f8

08003460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800346c:	f7ff fff8 	bl	8003460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003470:	480b      	ldr	r0, [pc, #44]	; (80034a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003472:	490c      	ldr	r1, [pc, #48]	; (80034a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003478:	e002      	b.n	8003480 <LoopCopyDataInit>

0800347a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800347c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347e:	3304      	adds	r3, #4

08003480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003484:	d3f9      	bcc.n	800347a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003488:	4c09      	ldr	r4, [pc, #36]	; (80034b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800348c:	e001      	b.n	8003492 <LoopFillZerobss>

0800348e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003490:	3204      	adds	r2, #4

08003492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003494:	d3fb      	bcc.n	800348e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003496:	f008 febf 	bl	800c218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800349a:	f7fe fc93 	bl	8001dc4 <main>
  bx lr
 800349e:	4770      	bx	lr
  ldr r0, =_sdata
 80034a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a4:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 80034a8:	0800cdbc 	.word	0x0800cdbc
  ldr r2, =_sbss
 80034ac:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80034b0:	200020f8 	.word	0x200020f8

080034b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034b4:	e7fe      	b.n	80034b4 <ADC1_2_IRQHandler>

080034b6 <StartBluetooth>:
BleComando BLEAtualizaDataHora,BLEAlteraLimiteTemp,BLERestaura,BLESPTeto,BLESPLastro,BLESPtempo,BLEToggleTempo,BLEReceita,BLESPTempo,BLELightOn,BLELightOff;
BleComando BLEPedeSenha,BLERecebeuSenha;


void StartBluetooth(void const * argument)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
	initBluetooth();
 80034be:	f000 f809 	bl	80034d4 <initBluetooth>

	for(;;)
	{
		//----------------bluetooth----RX------------//
		rxBluetooth();
 80034c2:	f000 fa23 	bl	800390c <rxBluetooth>

		//----------------bluetooth----TX------------//
		txBluetooth();
 80034c6:	f000 f8c9 	bl	800365c <txBluetooth>

		/* USER CODE END 5 */
		osDelay(50);
 80034ca:	2032      	movs	r0, #50	; 0x32
 80034cc:	f005 fe9b 	bl	8009206 <osDelay>
		rxBluetooth();
 80034d0:	e7f7      	b.n	80034c2 <StartBluetooth+0xc>
	...

080034d4 <initBluetooth>:
	}
}

void initBluetooth(void){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af02      	add	r7, sp, #8
	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <initBluetooth+0x104>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <initBluetooth+0x108>)
 80034e2:	4a3f      	ldr	r2, [pc, #252]	; (80035e0 <initBluetooth+0x10c>)
 80034e4:	493f      	ldr	r1, [pc, #252]	; (80035e4 <initBluetooth+0x110>)
 80034e6:	4840      	ldr	r0, [pc, #256]	; (80035e8 <initBluetooth+0x114>)
 80034e8:	f7fd fd0e 	bl	8000f08 <BluetoothInit>

	//inicializacao do hardware
	//	Inicia_HM10(&bluetooth);
	iniciaBleHm10(&bluetooth);
 80034ec:	483e      	ldr	r0, [pc, #248]	; (80035e8 <initBluetooth+0x114>)
 80034ee:	f7fe f877 	bl	80015e0 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80034f2:	2301      	movs	r3, #1
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	2315      	movs	r3, #21
 80034f8:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <initBluetooth+0x118>)
 80034fa:	493d      	ldr	r1, [pc, #244]	; (80035f0 <initBluetooth+0x11c>)
 80034fc:	483a      	ldr	r0, [pc, #232]	; (80035e8 <initBluetooth+0x114>)
 80034fe:	f7fd fd31 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003502:	2301      	movs	r3, #1
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2317      	movs	r3, #23
 8003508:	4a3a      	ldr	r2, [pc, #232]	; (80035f4 <initBluetooth+0x120>)
 800350a:	493b      	ldr	r1, [pc, #236]	; (80035f8 <initBluetooth+0x124>)
 800350c:	4836      	ldr	r0, [pc, #216]	; (80035e8 <initBluetooth+0x114>)
 800350e:	f7fd fd29 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	2326      	movs	r3, #38	; 0x26
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <initBluetooth+0x128>)
 800351a:	4939      	ldr	r1, [pc, #228]	; (8003600 <initBluetooth+0x12c>)
 800351c:	4832      	ldr	r0, [pc, #200]	; (80035e8 <initBluetooth+0x114>)
 800351e:	f7fd fd21 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003522:	2301      	movs	r3, #1
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2303      	movs	r3, #3
 8003528:	4a36      	ldr	r2, [pc, #216]	; (8003604 <initBluetooth+0x130>)
 800352a:	4937      	ldr	r1, [pc, #220]	; (8003608 <initBluetooth+0x134>)
 800352c:	482e      	ldr	r0, [pc, #184]	; (80035e8 <initBluetooth+0x114>)
 800352e:	f7fd fd19 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003532:	2301      	movs	r3, #1
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2310      	movs	r3, #16
 8003538:	4a34      	ldr	r2, [pc, #208]	; (800360c <initBluetooth+0x138>)
 800353a:	4935      	ldr	r1, [pc, #212]	; (8003610 <initBluetooth+0x13c>)
 800353c:	482a      	ldr	r0, [pc, #168]	; (80035e8 <initBluetooth+0x114>)
 800353e:	f7fd fd11 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003542:	2301      	movs	r3, #1
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2342      	movs	r3, #66	; 0x42
 8003548:	4a32      	ldr	r2, [pc, #200]	; (8003614 <initBluetooth+0x140>)
 800354a:	4933      	ldr	r1, [pc, #204]	; (8003618 <initBluetooth+0x144>)
 800354c:	4826      	ldr	r0, [pc, #152]	; (80035e8 <initBluetooth+0x114>)
 800354e:	f7fd fd09 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERecebeuSenha,     	"RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003552:	2301      	movs	r3, #1
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	4a30      	ldr	r2, [pc, #192]	; (800361c <initBluetooth+0x148>)
 800355a:	4931      	ldr	r1, [pc, #196]	; (8003620 <initBluetooth+0x14c>)
 800355c:	4822      	ldr	r0, [pc, #136]	; (80035e8 <initBluetooth+0x114>)
 800355e:	f7fd fd01 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003562:	2301      	movs	r3, #1
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2321      	movs	r3, #33	; 0x21
 8003568:	4a2e      	ldr	r2, [pc, #184]	; (8003624 <initBluetooth+0x150>)
 800356a:	492f      	ldr	r1, [pc, #188]	; (8003628 <initBluetooth+0x154>)
 800356c:	481e      	ldr	r0, [pc, #120]	; (80035e8 <initBluetooth+0x114>)
 800356e:	f7fd fcf9 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003572:	2301      	movs	r3, #1
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	2322      	movs	r3, #34	; 0x22
 8003578:	4a2c      	ldr	r2, [pc, #176]	; (800362c <initBluetooth+0x158>)
 800357a:	492d      	ldr	r1, [pc, #180]	; (8003630 <initBluetooth+0x15c>)
 800357c:	481a      	ldr	r0, [pc, #104]	; (80035e8 <initBluetooth+0x114>)
 800357e:	f7fd fcf1 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003582:	2301      	movs	r3, #1
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2323      	movs	r3, #35	; 0x23
 8003588:	4a2a      	ldr	r2, [pc, #168]	; (8003634 <initBluetooth+0x160>)
 800358a:	492b      	ldr	r1, [pc, #172]	; (8003638 <initBluetooth+0x164>)
 800358c:	4816      	ldr	r0, [pc, #88]	; (80035e8 <initBluetooth+0x114>)
 800358e:	f7fd fce9 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);//identifica criticidade do comando no DMA_UART
 8003592:	2301      	movs	r3, #1
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2324      	movs	r3, #36	; 0x24
 8003598:	4a28      	ldr	r2, [pc, #160]	; (800363c <initBluetooth+0x168>)
 800359a:	4929      	ldr	r1, [pc, #164]	; (8003640 <initBluetooth+0x16c>)
 800359c:	4812      	ldr	r0, [pc, #72]	; (80035e8 <initBluetooth+0x114>)
 800359e:	f7fd fce1 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);//identifica criticidade do comando no DMA_UART
 80035a2:	2301      	movs	r3, #1
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2325      	movs	r3, #37	; 0x25
 80035a8:	4a26      	ldr	r2, [pc, #152]	; (8003644 <initBluetooth+0x170>)
 80035aa:	4927      	ldr	r1, [pc, #156]	; (8003648 <initBluetooth+0x174>)
 80035ac:	480e      	ldr	r0, [pc, #56]	; (80035e8 <initBluetooth+0x114>)
 80035ae:	f7fd fcd9 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMPADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80035b2:	2301      	movs	r3, #1
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2327      	movs	r3, #39	; 0x27
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <initBluetooth+0x178>)
 80035ba:	4925      	ldr	r1, [pc, #148]	; (8003650 <initBluetooth+0x17c>)
 80035bc:	480a      	ldr	r0, [pc, #40]	; (80035e8 <initBluetooth+0x114>)
 80035be:	f7fd fcd1 	bl	8000f64 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);//identifica criticidade do comando no DMA_UART
 80035c2:	2301      	movs	r3, #1
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2328      	movs	r3, #40	; 0x28
 80035c8:	4a22      	ldr	r2, [pc, #136]	; (8003654 <initBluetooth+0x180>)
 80035ca:	4923      	ldr	r1, [pc, #140]	; (8003658 <initBluetooth+0x184>)
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <initBluetooth+0x114>)
 80035ce:	f7fd fcc9 	bl	8000f64 <BluetoothAddComp>
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000f08 	.word	0x20000f08
 80035dc:	20000f0c 	.word	0x20000f0c
 80035e0:	20000928 	.word	0x20000928
 80035e4:	20000898 	.word	0x20000898
 80035e8:	20000f18 	.word	0x20000f18
 80035ec:	0800cbcc 	.word	0x0800cbcc
 80035f0:	200010f0 	.word	0x200010f0
 80035f4:	0800cbe4 	.word	0x0800cbe4
 80035f8:	200010f8 	.word	0x200010f8
 80035fc:	0800cbfc 	.word	0x0800cbfc
 8003600:	20001108 	.word	0x20001108
 8003604:	0800cc14 	.word	0x0800cc14
 8003608:	20001100 	.word	0x20001100
 800360c:	0800cc28 	.word	0x0800cc28
 8003610:	20001110 	.word	0x20001110
 8003614:	0800cc34 	.word	0x0800cc34
 8003618:	20001150 	.word	0x20001150
 800361c:	0800cc44 	.word	0x0800cc44
 8003620:	20001158 	.word	0x20001158
 8003624:	0800cc58 	.word	0x0800cc58
 8003628:	20001118 	.word	0x20001118
 800362c:	0800cc68 	.word	0x0800cc68
 8003630:	20001120 	.word	0x20001120
 8003634:	0800cc7c 	.word	0x0800cc7c
 8003638:	20001138 	.word	0x20001138
 800363c:	0800cc88 	.word	0x0800cc88
 8003640:	20001128 	.word	0x20001128
 8003644:	0800cc98 	.word	0x0800cc98
 8003648:	20001130 	.word	0x20001130
 800364c:	0800cca4 	.word	0x0800cca4
 8003650:	20001140 	.word	0x20001140
 8003654:	0800ccb4 	.word	0x0800ccb4
 8003658:	20001148 	.word	0x20001148

0800365c <txBluetooth>:

void txBluetooth(void){
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af00      	add	r7, sp, #0
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];//todo cogitar colocar na classe
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 8003662:	4b9e      	ldr	r3, [pc, #632]	; (80038dc <txBluetooth+0x280>)
 8003664:	6819      	ldr	r1, [r3, #0]
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	2200      	movs	r2, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f005 ff06 	bl	800947c <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b10      	cmp	r3, #16
 8003674:	f040 812e 	bne.w	80038d4 <txBluetooth+0x278>
		switch ((unsigned int)evttx.value.p) {
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b8e      	cmp	r3, #142	; 0x8e
 800367c:	f200 812a 	bhi.w	80038d4 <txBluetooth+0x278>
 8003680:	2b8b      	cmp	r3, #139	; 0x8b
 8003682:	d205      	bcs.n	8003690 <txBluetooth+0x34>
 8003684:	2b16      	cmp	r3, #22
 8003686:	d013      	beq.n	80036b0 <txBluetooth+0x54>
 8003688:	2b18      	cmp	r3, #24
 800368a:	f000 8098 	beq.w	80037be <txBluetooth+0x162>
			HAL_Delay(30);
			Envia_texto_UART("AT",50);//DESCONECTA
			break;
		}
	}
}
 800368e:	e121      	b.n	80038d4 <txBluetooth+0x278>
		switch ((unsigned int)evttx.value.p) {
 8003690:	3b8b      	subs	r3, #139	; 0x8b
 8003692:	2b03      	cmp	r3, #3
 8003694:	f200 811e 	bhi.w	80038d4 <txBluetooth+0x278>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <txBluetooth+0x44>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	08003821 	.word	0x08003821
 80036a4:	08003857 	.word	0x08003857
 80036a8:	0800388b 	.word	0x0800388b
 80036ac:	080038a9 	.word	0x080038a9
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80036b0:	2301      	movs	r3, #1
 80036b2:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 80036b4:	2316      	movs	r3, #22
 80036b6:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= Erro.byte;							// Conjunto de erros
 80036b8:	4b89      	ldr	r3, [pc, #548]	; (80038e0 <txBluetooth+0x284>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.MaquinaMaster;		// State da maquina
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <txBluetooth+0x288>)
 80036c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c4:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 		>>8;
 80036c6:	4b87      	ldr	r3, [pc, #540]	; (80038e4 <txBluetooth+0x288>)
 80036c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fd f99c 	bl	8000a0c <__aeabi_d2uiz>
 80036d4:	4603      	mov	r3, r0
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	b29b      	uxth	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 		& 0x00FF;
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <txBluetooth+0x288>)
 80036e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fd f98f 	bl	8000a0c <__aeabi_d2uiz>
 80036ee:	4603      	mov	r3, r0
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 		>>8;
 80036f6:	4b7b      	ldr	r3, [pc, #492]	; (80038e4 <txBluetooth+0x288>)
 80036f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd f984 	bl	8000a0c <__aeabi_d2uiz>
 8003704:	4603      	mov	r3, r0
 8003706:	b29b      	uxth	r3, r3
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	b29b      	uxth	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 		& 0x00FF;
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <txBluetooth+0x288>)
 8003712:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd f977 	bl	8000a0c <__aeabi_d2uiz>
 800371e:	4603      	mov	r3, r0
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <txBluetooth+0x288>)
 8003728:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd f96c 	bl	8000a0c <__aeabi_d2uiz>
 8003734:	4603      	mov	r3, r0
 8003736:	b29b      	uxth	r3, r3
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	b29b      	uxth	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <txBluetooth+0x288>)
 8003742:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f7fd f95f 	bl	8000a0c <__aeabi_d2uiz>
 800374e:	4603      	mov	r3, r0
 8003750:	b29b      	uxth	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 8003756:	4b63      	ldr	r3, [pc, #396]	; (80038e4 <txBluetooth+0x288>)
 8003758:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd f954 	bl	8000a0c <__aeabi_d2uiz>
 8003764:	4603      	mov	r3, r0
 8003766:	b29b      	uxth	r3, r3
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b29b      	uxth	r3, r3
 800376c:	b2db      	uxtb	r3, r3
 800376e:	76bb      	strb	r3, [r7, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003770:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <txBluetooth+0x288>)
 8003772:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003776:	4610      	mov	r0, r2
 8003778:	4619      	mov	r1, r3
 800377a:	f7fd f947 	bl	8000a0c <__aeabi_d2uiz>
 800377e:	4603      	mov	r3, r0
 8003780:	b29b      	uxth	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	76fb      	strb	r3, [r7, #27]
			Buffer[12] 	= PrimitiveStates.RTTimerMinutos;
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <txBluetooth+0x288>)
 8003788:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800378c:	773b      	strb	r3, [r7, #28]
			Buffer[13] 	= PrimitiveStates.RTTimerSegundos;
 800378e:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <txBluetooth+0x288>)
 8003790:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003794:	777b      	strb	r3, [r7, #29]
			Buffer[14] 	= PrimitiveStates.SPTimerMinutos;
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <txBluetooth+0x288>)
 8003798:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800379c:	77bb      	strb	r3, [r7, #30]
			Buffer[15] 	= PrimitiveStates.SPTimerSegundos;
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <txBluetooth+0x288>)
 80037a0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80037a4:	77fb      	strb	r3, [r7, #31]
			Buffer[16] 	= PrimitiveStates.stateTimer;
 80037a6:	4b4f      	ldr	r3, [pc, #316]	; (80038e4 <txBluetooth+0x288>)
 80037a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80037ac:	f887 3020 	strb.w	r3, [r7, #32]
			BluetoothEnviaComando(Buffer, 16);
 80037b0:	f107 0310 	add.w	r3, r7, #16
 80037b4:	2110      	movs	r1, #16
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fe40 	bl	800143c <BluetoothEnviaComando>
			break;
 80037bc:	e08a      	b.n	80038d4 <txBluetooth+0x278>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80037be:	2301      	movs	r3, #1
 80037c0:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 80037c2:	2318      	movs	r3, #24
 80037c4:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x01;									// Modelo
 80037c6:	2301      	movs	r3, #1
 80037c8:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <txBluetooth+0x28c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor;
 80037d2:	4b46      	ldr	r3, [pc, #280]	; (80038ec <txBluetooth+0x290>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint8_t)instalacaoDia.valor;
 80037da:	4b45      	ldr	r3, [pc, #276]	; (80038f0 <txBluetooth+0x294>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)instalacaoMes.valor;
 80037e2:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <txBluetooth+0x298>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)instalacaoAno.valor;
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <txBluetooth+0x29c>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)horimetroHoras.valor >> 8;
 80037f2:	4b42      	ldr	r3, [pc, #264]	; (80038fc <txBluetooth+0x2a0>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	121b      	asrs	r3, r3, #8
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <txBluetooth+0x2a0>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint8_t)horimetroMinutos.valor;
 8003806:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <txBluetooth+0x2a4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	76bb      	strb	r3, [r7, #26]
			Buffer[11]	= VERSAO;
 800380e:	2301      	movs	r3, #1
 8003810:	76fb      	strb	r3, [r7, #27]
			BluetoothEnviaComando(Buffer, 11);
 8003812:	f107 0310 	add.w	r3, r7, #16
 8003816:	210b      	movs	r1, #11
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fe0f 	bl	800143c <BluetoothEnviaComando>
			break;
 800381e:	e059      	b.n	80038d4 <txBluetooth+0x278>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003820:	2301      	movs	r3, #1
 8003822:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003824:	2351      	movs	r3, #81	; 0x51
 8003826:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003828:	2351      	movs	r3, #81	; 0x51
 800382a:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;
 800382c:	2301      	movs	r3, #1
 800382e:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= bluetooth.chave >> 8 		;
 8003830:	4b34      	ldr	r3, [pc, #208]	; (8003904 <txBluetooth+0x2a8>)
 8003832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	b29b      	uxth	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= bluetooth.chave & 0x00ff	;
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <txBluetooth+0x2a8>)
 8003840:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003844:	b2db      	uxtb	r3, r3
 8003846:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	2105      	movs	r1, #5
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fdf4 	bl	800143c <BluetoothEnviaComando>
			break;
 8003854:	e03e      	b.n	80038d4 <txBluetooth+0x278>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003856:	2301      	movs	r3, #1
 8003858:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 800385a:	2351      	movs	r3, #81	; 0x51
 800385c:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 800385e:	2351      	movs	r3, #81	; 0x51
 8003860:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;
 8003862:	2300      	movs	r3, #0
 8003864:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= 0x00;
 8003866:	2300      	movs	r3, #0
 8003868:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= 0x00;
 800386a:	2300      	movs	r3, #0
 800386c:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	2105      	movs	r1, #5
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd fde1 	bl	800143c <BluetoothEnviaComando>
			HAL_Delay(30);
 800387a:	201e      	movs	r0, #30
 800387c:	f000 fd54 	bl	8004328 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 8003880:	2132      	movs	r1, #50	; 0x32
 8003882:	4821      	ldr	r0, [pc, #132]	; (8003908 <txBluetooth+0x2ac>)
 8003884:	f7fd fe56 	bl	8001534 <Envia_texto_UART>
			break;
 8003888:	e024      	b.n	80038d4 <txBluetooth+0x278>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 800388a:	2301      	movs	r3, #1
 800388c:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 800388e:	2352      	movs	r3, #82	; 0x52
 8003890:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003892:	2352      	movs	r3, #82	; 0x52
 8003894:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;									//resultado ok
 8003896:	2301      	movs	r3, #1
 8003898:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 800389a:	f107 0310 	add.w	r3, r7, #16
 800389e:	2103      	movs	r1, #3
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd fdcb 	bl	800143c <BluetoothEnviaComando>
			break;
 80038a6:	e015      	b.n	80038d4 <txBluetooth+0x278>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 80038a8:	2301      	movs	r3, #1
 80038aa:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 80038ac:	2352      	movs	r3, #82	; 0x52
 80038ae:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 80038b0:	2352      	movs	r3, #82	; 0x52
 80038b2:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;									//resultado ok
 80038b4:	2300      	movs	r3, #0
 80038b6:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	2103      	movs	r1, #3
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fdbc 	bl	800143c <BluetoothEnviaComando>
			HAL_Delay(30);
 80038c4:	201e      	movs	r0, #30
 80038c6:	f000 fd2f 	bl	8004328 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 80038ca:	2132      	movs	r1, #50	; 0x32
 80038cc:	480e      	ldr	r0, [pc, #56]	; (8003908 <txBluetooth+0x2ac>)
 80038ce:	f7fd fe31 	bl	8001534 <Envia_texto_UART>
			break;
 80038d2:	bf00      	nop
}
 80038d4:	bf00      	nop
 80038d6:	3730      	adds	r7, #48	; 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000f08 	.word	0x20000f08
 80038e0:	20001098 	.word	0x20001098
 80038e4:	20001068 	.word	0x20001068
 80038e8:	20000478 	.word	0x20000478
 80038ec:	20000450 	.word	0x20000450
 80038f0:	200003b0 	.word	0x200003b0
 80038f4:	200003d8 	.word	0x200003d8
 80038f8:	20000400 	.word	0x20000400
 80038fc:	20000360 	.word	0x20000360
 8003900:	20000388 	.word	0x20000388
 8003904:	20000f18 	.word	0x20000f18
 8003908:	0800ccc8 	.word	0x0800ccc8

0800390c <rxBluetooth>:

void rxBluetooth(void){
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 8003912:	4bc5      	ldr	r3, [pc, #788]	; (8003c28 <rxBluetooth+0x31c>)
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2200      	movs	r2, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f005 fdae 	bl	800947c <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b10      	cmp	r3, #16
 8003924:	f040 8209 	bne.w	8003d3a <rxBluetooth+0x42e>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003928:	4bc0      	ldr	r3, [pc, #768]	; (8003c2c <rxBluetooth+0x320>)
 800392a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800392e:	3b03      	subs	r3, #3
 8003930:	2b3f      	cmp	r3, #63	; 0x3f
 8003932:	f200 8202 	bhi.w	8003d3a <rxBluetooth+0x42e>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <rxBluetooth+0x30>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003a5d 	.word	0x08003a5d
 8003940:	08003d3b 	.word	0x08003d3b
 8003944:	08003d3b 	.word	0x08003d3b
 8003948:	08003d3b 	.word	0x08003d3b
 800394c:	08003d3b 	.word	0x08003d3b
 8003950:	08003d3b 	.word	0x08003d3b
 8003954:	08003d3b 	.word	0x08003d3b
 8003958:	08003d3b 	.word	0x08003d3b
 800395c:	08003d3b 	.word	0x08003d3b
 8003960:	08003d3b 	.word	0x08003d3b
 8003964:	08003d3b 	.word	0x08003d3b
 8003968:	08003d3b 	.word	0x08003d3b
 800396c:	08003d3b 	.word	0x08003d3b
 8003970:	08003d39 	.word	0x08003d39
 8003974:	08003d3b 	.word	0x08003d3b
 8003978:	08003d3b 	.word	0x08003d3b
 800397c:	08003d3b 	.word	0x08003d3b
 8003980:	08003d3b 	.word	0x08003d3b
 8003984:	08003a3d 	.word	0x08003a3d
 8003988:	08003d3b 	.word	0x08003d3b
 800398c:	08003a4d 	.word	0x08003a4d
 8003990:	08003d3b 	.word	0x08003d3b
 8003994:	08003d3b 	.word	0x08003d3b
 8003998:	08003d3b 	.word	0x08003d3b
 800399c:	08003d3b 	.word	0x08003d3b
 80039a0:	08003d3b 	.word	0x08003d3b
 80039a4:	08003d3b 	.word	0x08003d3b
 80039a8:	08003d3b 	.word	0x08003d3b
 80039ac:	08003d3b 	.word	0x08003d3b
 80039b0:	08003d3b 	.word	0x08003d3b
 80039b4:	08003a8b 	.word	0x08003a8b
 80039b8:	08003ac7 	.word	0x08003ac7
 80039bc:	08003b03 	.word	0x08003b03
 80039c0:	08003b3f 	.word	0x08003b3f
 80039c4:	08003b7d 	.word	0x08003b7d
 80039c8:	08003c49 	.word	0x08003c49
 80039cc:	08003c65 	.word	0x08003c65
 80039d0:	08003c89 	.word	0x08003c89
 80039d4:	08003d3b 	.word	0x08003d3b
 80039d8:	08003d3b 	.word	0x08003d3b
 80039dc:	08003d3b 	.word	0x08003d3b
 80039e0:	08003d3b 	.word	0x08003d3b
 80039e4:	08003d3b 	.word	0x08003d3b
 80039e8:	08003d3b 	.word	0x08003d3b
 80039ec:	08003d3b 	.word	0x08003d3b
 80039f0:	08003d3b 	.word	0x08003d3b
 80039f4:	08003d3b 	.word	0x08003d3b
 80039f8:	08003d3b 	.word	0x08003d3b
 80039fc:	08003d3b 	.word	0x08003d3b
 8003a00:	08003d3b 	.word	0x08003d3b
 8003a04:	08003d3b 	.word	0x08003d3b
 8003a08:	08003d3b 	.word	0x08003d3b
 8003a0c:	08003d3b 	.word	0x08003d3b
 8003a10:	08003d3b 	.word	0x08003d3b
 8003a14:	08003d3b 	.word	0x08003d3b
 8003a18:	08003d3b 	.word	0x08003d3b
 8003a1c:	08003d3b 	.word	0x08003d3b
 8003a20:	08003d3b 	.word	0x08003d3b
 8003a24:	08003d3b 	.word	0x08003d3b
 8003a28:	08003d3b 	.word	0x08003d3b
 8003a2c:	08003d3b 	.word	0x08003d3b
 8003a30:	08003ce7 	.word	0x08003ce7
 8003a34:	08003d3b 	.word	0x08003d3b
 8003a38:	08003cbd 	.word	0x08003cbd
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003a3c:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <rxBluetooth+0x324>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2116      	movs	r1, #22
 8003a44:	4618      	mov	r0, r3
 8003a46:	f005 fcd9 	bl	80093fc <osMessagePut>
			break;
 8003a4a:	e176      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003a4c:	4b78      	ldr	r3, [pc, #480]	; (8003c30 <rxBluetooth+0x324>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2118      	movs	r1, #24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f005 fcd1 	bl	80093fc <osMessagePut>
			break;
 8003a5a:	e16e      	b.n	8003d3a <rxBluetooth+0x42e>
			//				sDate.Month 	= bluetooth._RxDataArr[4]; //mes p/atualizar
			//				sDate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
			//				sTime.Hours 	= bluetooth._RxDataArr[6]; //hora p/atualizar
			//				sTime.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
			//				sTime.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
			osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 8003a5c:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <rxBluetooth+0x328>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2105      	movs	r1, #5
 8003a64:	4618      	mov	r0, r3
 8003a66:	f005 fcc9 	bl	80093fc <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(bluetooth._RxDataArr[1])
 8003a6a:	4b70      	ldr	r3, [pc, #448]	; (8003c2c <rxBluetooth+0x320>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	721a      	strb	r2, [r3, #8]
 8003a70:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <rxBluetooth+0x320>)
 8003a72:	22ff      	movs	r2, #255	; 0xff
 8003a74:	725a      	strb	r2, [r3, #9]
 8003a76:	4b6d      	ldr	r3, [pc, #436]	; (8003c2c <rxBluetooth+0x320>)
 8003a78:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003a7c:	4b6b      	ldr	r3, [pc, #428]	; (8003c2c <rxBluetooth+0x320>)
 8003a7e:	729a      	strb	r2, [r3, #10]
 8003a80:	2103      	movs	r1, #3
 8003a82:	486d      	ldr	r0, [pc, #436]	; (8003c38 <rxBluetooth+0x32c>)
 8003a84:	f7fd fd42 	bl	800150c <Envia_bytes_UART>
			break;
 8003a88:	e157      	b.n	8003d3a <rxBluetooth+0x42e>
			//				Maquina.Maquina_eeprom = EEPROM_HARD_RESET;
			//				MACRO_ENVIA_AKNOLADGE_(RX_RESTAURA)
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003a8a:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <rxBluetooth+0x320>)
 8003a8c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4a66      	ldr	r2, [pc, #408]	; (8003c2c <rxBluetooth+0x320>)
 8003a94:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fcb2 	bl	8000404 <__aeabi_i2d>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4965      	ldr	r1, [pc, #404]	; (8003c3c <rxBluetooth+0x330>)
 8003aa6:	e9c1 2306 	strd	r2, r3, [r1, #24]
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8003aaa:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <rxBluetooth+0x320>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	721a      	strb	r2, [r3, #8]
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <rxBluetooth+0x320>)
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	725a      	strb	r2, [r3, #9]
 8003ab6:	4b5d      	ldr	r3, [pc, #372]	; (8003c2c <rxBluetooth+0x320>)
 8003ab8:	2221      	movs	r2, #33	; 0x21
 8003aba:	729a      	strb	r2, [r3, #10]
 8003abc:	2103      	movs	r1, #3
 8003abe:	485e      	ldr	r0, [pc, #376]	; (8003c38 <rxBluetooth+0x32c>)
 8003ac0:	f7fd fd24 	bl	800150c <Envia_bytes_UART>
			break;
 8003ac4:	e139      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003ac6:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <rxBluetooth+0x320>)
 8003ac8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <rxBluetooth+0x320>)
 8003ad0:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fc fc94 	bl	8000404 <__aeabi_i2d>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4956      	ldr	r1, [pc, #344]	; (8003c3c <rxBluetooth+0x330>)
 8003ae2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <rxBluetooth+0x320>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	721a      	strb	r2, [r3, #8]
 8003aec:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <rxBluetooth+0x320>)
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	725a      	strb	r2, [r3, #9]
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <rxBluetooth+0x320>)
 8003af4:	2222      	movs	r2, #34	; 0x22
 8003af6:	729a      	strb	r2, [r3, #10]
 8003af8:	2103      	movs	r1, #3
 8003afa:	484f      	ldr	r0, [pc, #316]	; (8003c38 <rxBluetooth+0x32c>)
 8003afc:	f7fd fd06 	bl	800150c <Envia_bytes_UART>
			break;
 8003b00:	e11b      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_SP_TEMPO:
			//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003b02:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <rxBluetooth+0x320>)
 8003b04:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8003b08:	4b4c      	ldr	r3, [pc, #304]	; (8003c3c <rxBluetooth+0x330>)
 8003b0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <rxBluetooth+0x320>)
 8003b10:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8003b14:	4b49      	ldr	r3, [pc, #292]	; (8003c3c <rxBluetooth+0x330>)
 8003b16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			//todo possivelmente zerar o tempo atual
			PrimitiveStates.stateTimer = true; //estarta o timer
 8003b1a:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <rxBluetooth+0x330>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <rxBluetooth+0x320>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	721a      	strb	r2, [r3, #8]
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <rxBluetooth+0x320>)
 8003b2a:	22ff      	movs	r2, #255	; 0xff
 8003b2c:	725a      	strb	r2, [r3, #9]
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <rxBluetooth+0x320>)
 8003b30:	2223      	movs	r2, #35	; 0x23
 8003b32:	729a      	strb	r2, [r3, #10]
 8003b34:	2103      	movs	r1, #3
 8003b36:	4840      	ldr	r0, [pc, #256]	; (8003c38 <rxBluetooth+0x32c>)
 8003b38:	f7fd fce8 	bl	800150c <Envia_bytes_UART>
			break;
 8003b3c:	e0fd      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_TOGGLE_TEMPO:
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			PrimitiveStates.stateTimer = !PrimitiveStates.stateTimer;
 8003b3e:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <rxBluetooth+0x330>)
 8003b40:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f083 0301 	eor.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <rxBluetooth+0x330>)
 8003b5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <rxBluetooth+0x320>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	721a      	strb	r2, [r3, #8]
 8003b66:	4b31      	ldr	r3, [pc, #196]	; (8003c2c <rxBluetooth+0x320>)
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	725a      	strb	r2, [r3, #9]
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <rxBluetooth+0x320>)
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	729a      	strb	r2, [r3, #10]
 8003b72:	2103      	movs	r1, #3
 8003b74:	4830      	ldr	r0, [pc, #192]	; (8003c38 <rxBluetooth+0x32c>)
 8003b76:	f7fd fcc9 	bl	800150c <Envia_bytes_UART>
			break;
 8003b7a:	e0de      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_RECEITA:
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8003b7c:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <rxBluetooth+0x320>)
 8003b7e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <rxBluetooth+0x320>)
 8003b86:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fc39 	bl	8000404 <__aeabi_i2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4929      	ldr	r1, [pc, #164]	; (8003c3c <rxBluetooth+0x330>)
 8003b98:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <rxBluetooth+0x320>)
 8003b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <rxBluetooth+0x320>)
 8003ba6:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8003baa:	4313      	orrs	r3, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fc29 	bl	8000404 <__aeabi_i2d>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4921      	ldr	r1, [pc, #132]	; (8003c3c <rxBluetooth+0x330>)
 8003bb8:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <rxBluetooth+0x320>)
 8003bbe:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <rxBluetooth+0x330>)
 8003bc4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <rxBluetooth+0x320>)
 8003bca:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <rxBluetooth+0x330>)
 8003bd0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <rxBluetooth+0x330>)
 8003bd6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <rxBluetooth+0x330>)
 8003bdc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <rxBluetooth+0x330>)
 8003be2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <rxBluetooth+0x330>)
 8003be8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			TempSPTeto = PrimitiveStates.SetPointTeto;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <rxBluetooth+0x330>)
 8003bee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003bf2:	4913      	ldr	r1, [pc, #76]	; (8003c40 <rxBluetooth+0x334>)
 8003bf4:	e9c1 2300 	strd	r2, r3, [r1]
			TempSPLastro = PrimitiveStates.SetPointLastro;
 8003bf8:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <rxBluetooth+0x330>)
 8003bfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bfe:	4911      	ldr	r1, [pc, #68]	; (8003c44 <rxBluetooth+0x338>)
 8003c00:	e9c1 2300 	strd	r2, r3, [r1]

			PrimitiveStates.stateTimer = true; //estarta o timer
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <rxBluetooth+0x330>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8003c0c:	4b07      	ldr	r3, [pc, #28]	; (8003c2c <rxBluetooth+0x320>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	721a      	strb	r2, [r3, #8]
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <rxBluetooth+0x320>)
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	725a      	strb	r2, [r3, #9]
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <rxBluetooth+0x320>)
 8003c1a:	2225      	movs	r2, #37	; 0x25
 8003c1c:	729a      	strb	r2, [r3, #10]
 8003c1e:	2103      	movs	r1, #3
 8003c20:	4805      	ldr	r0, [pc, #20]	; (8003c38 <rxBluetooth+0x32c>)
 8003c22:	f7fd fc73 	bl	800150c <Envia_bytes_UART>
			break;
 8003c26:	e088      	b.n	8003d3a <rxBluetooth+0x42e>
 8003c28:	20000f0c 	.word	0x20000f0c
 8003c2c:	20000f18 	.word	0x20000f18
 8003c30:	20000f08 	.word	0x20000f08
 8003c34:	20000f10 	.word	0x20000f10
 8003c38:	20000f20 	.word	0x20000f20
 8003c3c:	20001068 	.word	0x20001068
 8003c40:	20001170 	.word	0x20001170
 8003c44:	20001178 	.word	0x20001178
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 8003c48:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <rxBluetooth+0x438>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	721a      	strb	r2, [r3, #8]
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <rxBluetooth+0x438>)
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	725a      	strb	r2, [r3, #9]
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <rxBluetooth+0x438>)
 8003c56:	2226      	movs	r2, #38	; 0x26
 8003c58:	729a      	strb	r2, [r3, #10]
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	483a      	ldr	r0, [pc, #232]	; (8003d48 <rxBluetooth+0x43c>)
 8003c5e:	f7fd fc55 	bl	800150c <Envia_bytes_UART>
			break;
 8003c62:	e06a      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			PrimitiveStates.SegundosLampada=10;//todo revisar variaveis de limite
 8003c64:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <rxBluetooth+0x440>)
 8003c66:	220a      	movs	r2, #10
 8003c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 8003c6c:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <rxBluetooth+0x438>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	721a      	strb	r2, [r3, #8]
 8003c72:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <rxBluetooth+0x438>)
 8003c74:	22ff      	movs	r2, #255	; 0xff
 8003c76:	725a      	strb	r2, [r3, #9]
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <rxBluetooth+0x438>)
 8003c7a:	2227      	movs	r2, #39	; 0x27
 8003c7c:	729a      	strb	r2, [r3, #10]
 8003c7e:	2103      	movs	r1, #3
 8003c80:	4831      	ldr	r0, [pc, #196]	; (8003d48 <rxBluetooth+0x43c>)
 8003c82:	f7fd fc43 	bl	800150c <Envia_bytes_UART>
			break;
 8003c86:	e058      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			LAMPADA_OFF
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	4830      	ldr	r0, [pc, #192]	; (8003d50 <rxBluetooth+0x444>)
 8003c8e:	f001 fd98 	bl	80057c2 <HAL_GPIO_WritePin>
 8003c92:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <rxBluetooth+0x440>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <rxBluetooth+0x440>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8003ca0:	4b28      	ldr	r3, [pc, #160]	; (8003d44 <rxBluetooth+0x438>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	721a      	strb	r2, [r3, #8]
 8003ca6:	4b27      	ldr	r3, [pc, #156]	; (8003d44 <rxBluetooth+0x438>)
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	725a      	strb	r2, [r3, #9]
 8003cac:	4b25      	ldr	r3, [pc, #148]	; (8003d44 <rxBluetooth+0x438>)
 8003cae:	2228      	movs	r2, #40	; 0x28
 8003cb0:	729a      	strb	r2, [r3, #10]
 8003cb2:	2103      	movs	r1, #3
 8003cb4:	4824      	ldr	r0, [pc, #144]	; (8003d48 <rxBluetooth+0x43c>)
 8003cb6:	f7fd fc29 	bl	800150c <Envia_bytes_UART>
			break;
 8003cba:	e03e      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_PEDE_SENHA:
			if(bluetooth.JanelaConexao > 0)
 8003cbc:	4b21      	ldr	r3, [pc, #132]	; (8003d44 <rxBluetooth+0x438>)
 8003cbe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <rxBluetooth+0x3ca>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE, 0);
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <rxBluetooth+0x448>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	218b      	movs	r1, #139	; 0x8b
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f005 fb94 	bl	80093fc <osMessagePut>
			else
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
			break;
 8003cd4:	e031      	b.n	8003d3a <rxBluetooth+0x42e>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	; (8003d54 <rxBluetooth+0x448>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	218c      	movs	r1, #140	; 0x8c
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fb8c 	bl	80093fc <osMessagePut>
			break;
 8003ce4:	e029      	b.n	8003d3a <rxBluetooth+0x42e>
		case RX_RECEBEU_SENHA:
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 8003ce6:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <rxBluetooth+0x438>)
 8003ce8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <rxBluetooth+0x438>)
 8003cf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d115      	bne.n	8003d28 <rxBluetooth+0x41c>
					bluetooth._RxDataArr[4] == (bluetooth.chave & 0x00ff) ){
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <rxBluetooth+0x438>)
 8003cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <rxBluetooth+0x438>)
 8003d06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d0a:	b2db      	uxtb	r3, r3
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d10b      	bne.n	8003d28 <rxBluetooth+0x41c>
				//--->	CHAVE CORRETA
				bluetooth.MaquinaConexao	= RX_VALIDADO;
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <rxBluetooth+0x438>)
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_OK, 0);
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <rxBluetooth+0x448>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	218d      	movs	r1, #141	; 0x8d
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fb6b 	bl	80093fc <osMessagePut>
				break;
 8003d26:	e008      	b.n	8003d3a <rxBluetooth+0x42e>
			}else{
				//--->	CHAVE ERRADA
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_ERRO, 0);
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <rxBluetooth+0x448>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	218e      	movs	r1, #142	; 0x8e
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 fb63 	bl	80093fc <osMessagePut>
			}
			break;
 8003d36:	e000      	b.n	8003d3a <rxBluetooth+0x42e>
			break;
 8003d38:	bf00      	nop
		}
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000f18 	.word	0x20000f18
 8003d48:	20000f20 	.word	0x20000f20
 8003d4c:	20001068 	.word	0x20001068
 8003d50:	40010c00 	.word	0x40010c00
 8003d54:	20000f08 	.word	0x20000f08

08003d58 <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskBuzzer */
	//osThreadSuspend(TaskBuzzerHandle);
	/* Infinite loop */
	for(;;)
	{
		sequencia1Buzzer();
 8003d60:	f000 f80c 	bl	8003d7c <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <StartBuzzer+0x20>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f005 fbfb 	bl	8009564 <osThreadSuspend>

		osDelay(100);
 8003d6e:	2064      	movs	r0, #100	; 0x64
 8003d70:	f005 fa49 	bl	8009206 <osDelay>
		sequencia1Buzzer();
 8003d74:	e7f4      	b.n	8003d60 <StartBuzzer+0x8>
 8003d76:	bf00      	nop
 8003d78:	200009b8 	.word	0x200009b8

08003d7c <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 8003d80:	210c      	movs	r1, #12
 8003d82:	480d      	ldr	r0, [pc, #52]	; (8003db8 <sequencia1Buzzer+0x3c>)
 8003d84:	f003 f900 	bl	8006f88 <HAL_TIM_PWM_Start>
	HAL_Delay(300);
 8003d88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003d8c:	f000 facc 	bl	8004328 <HAL_Delay>
	M_BUZZER_OFF
 8003d90:	210c      	movs	r1, #12
 8003d92:	4809      	ldr	r0, [pc, #36]	; (8003db8 <sequencia1Buzzer+0x3c>)
 8003d94:	f003 f99a 	bl	80070cc <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 8003d98:	2032      	movs	r0, #50	; 0x32
 8003d9a:	f000 fac5 	bl	8004328 <HAL_Delay>
	M_BUZZER_ON
 8003d9e:	210c      	movs	r1, #12
 8003da0:	4805      	ldr	r0, [pc, #20]	; (8003db8 <sequencia1Buzzer+0x3c>)
 8003da2:	f003 f8f1 	bl	8006f88 <HAL_TIM_PWM_Start>
	HAL_Delay(250);
 8003da6:	20fa      	movs	r0, #250	; 0xfa
 8003da8:	f000 fabe 	bl	8004328 <HAL_Delay>
	M_BUZZER_OFF
 8003dac:	210c      	movs	r1, #12
 8003dae:	4802      	ldr	r0, [pc, #8]	; (8003db8 <sequencia1Buzzer+0x3c>)
 8003db0:	f003 f98c 	bl	80070cc <HAL_TIM_PWM_Stop>
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000808 	.word	0x20000808

08003dbc <StartEeprom>:
void initEeprom(void);
void processaEeprom(void);


void StartEeprom(void const * argument)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	initEeprom();
 8003dc4:	f000 f808 	bl	8003dd8 <initEeprom>

	for(;;)
	{
		processaEeprom();
 8003dc8:	f000 f8ba 	bl	8003f40 <processaEeprom>

		osDelay(500);
 8003dcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dd0:	f005 fa19 	bl	8009206 <osDelay>
		processaEeprom();
 8003dd4:	e7f8      	b.n	8003dc8 <StartEeprom+0xc>
	...

08003dd8 <initEeprom>:
	}
}

void initEeprom(void){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8003dde:	4a45      	ldr	r2, [pc, #276]	; (8003ef4 <initEeprom+0x11c>)
 8003de0:	4945      	ldr	r1, [pc, #276]	; (8003ef8 <initEeprom+0x120>)
 8003de2:	4846      	ldr	r0, [pc, #280]	; (8003efc <initEeprom+0x124>)
 8003de4:	f7fd fe06 	bl	80019f4 <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	0,		0,		0		,0);
 8003de8:	2300      	movs	r3, #0
 8003dea:	9304      	str	r3, [sp, #16]
 8003dec:	2300      	movs	r3, #0
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	2300      	movs	r3, #0
 8003df2:	9302      	str	r3, [sp, #8]
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2301      	movs	r3, #1
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	4a40      	ldr	r2, [pc, #256]	; (8003f00 <initEeprom+0x128>)
 8003e00:	4940      	ldr	r1, [pc, #256]	; (8003f04 <initEeprom+0x12c>)
 8003e02:	483e      	ldr	r0, [pc, #248]	; (8003efc <initEeprom+0x124>)
 8003e04:	f7fd fe0c 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA8BITS,	0,		0,		0		,0);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9304      	str	r3, [sp, #16]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	9303      	str	r3, [sp, #12]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9302      	str	r3, [sp, #8]
 8003e14:	2300      	movs	r3, #0
 8003e16:	9301      	str	r3, [sp, #4]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	2305      	movs	r3, #5
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <initEeprom+0x130>)
 8003e20:	493a      	ldr	r1, [pc, #232]	; (8003f0c <initEeprom+0x134>)
 8003e22:	4836      	ldr	r0, [pc, #216]	; (8003efc <initEeprom+0x124>)
 8003e24:	f7fd fdfc 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,0);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	9304      	str	r3, [sp, #16]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9303      	str	r3, [sp, #12]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9302      	str	r3, [sp, #8]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	2301      	movs	r3, #1
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2306      	movs	r3, #6
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <initEeprom+0x138>)
 8003e40:	4934      	ldr	r1, [pc, #208]	; (8003f14 <initEeprom+0x13c>)
 8003e42:	482e      	ldr	r0, [pc, #184]	; (8003efc <initEeprom+0x124>)
 8003e44:	f7fd fdec 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,0);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	231f      	movs	r3, #31
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	2300      	movs	r3, #0
 8003e52:	9302      	str	r3, [sp, #8]
 8003e54:	2301      	movs	r3, #1
 8003e56:	9301      	str	r3, [sp, #4]
 8003e58:	2301      	movs	r3, #1
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <initEeprom+0x140>)
 8003e60:	492e      	ldr	r1, [pc, #184]	; (8003f1c <initEeprom+0x144>)
 8003e62:	4826      	ldr	r0, [pc, #152]	; (8003efc <initEeprom+0x124>)
 8003e64:	f7fd fddc 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,0);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	9304      	str	r3, [sp, #16]
 8003e6c:	230c      	movs	r3, #12
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	2301      	movs	r3, #1
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	2301      	movs	r3, #1
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	230d      	movs	r3, #13
 8003e7e:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <initEeprom+0x148>)
 8003e80:	4928      	ldr	r1, [pc, #160]	; (8003f24 <initEeprom+0x14c>)
 8003e82:	481e      	ldr	r0, [pc, #120]	; (8003efc <initEeprom+0x124>)
 8003e84:	f7fd fdcc 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,0);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	2363      	movs	r3, #99	; 0x63
 8003e8e:	9303      	str	r3, [sp, #12]
 8003e90:	2317      	movs	r3, #23
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	2317      	movs	r3, #23
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	2301      	movs	r3, #1
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	230e      	movs	r3, #14
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <initEeprom+0x150>)
 8003ea0:	4922      	ldr	r1, [pc, #136]	; (8003f2c <initEeprom+0x154>)
 8003ea2:	4816      	ldr	r0, [pc, #88]	; (8003efc <initEeprom+0x124>)
 8003ea4:	f7fd fdbc 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,0);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9304      	str	r3, [sp, #16]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	2302      	movs	r3, #2
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	230f      	movs	r3, #15
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <initEeprom+0x158>)
 8003ec0:	491c      	ldr	r1, [pc, #112]	; (8003f34 <initEeprom+0x15c>)
 8003ec2:	480e      	ldr	r0, [pc, #56]	; (8003efc <initEeprom+0x124>)
 8003ec4:	f7fd fdac 	bl	8001a20 <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,0);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9303      	str	r3, [sp, #12]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9302      	str	r3, [sp, #8]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	2302      	movs	r3, #2
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2314      	movs	r3, #20
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <initEeprom+0x160>)
 8003ee0:	4916      	ldr	r1, [pc, #88]	; (8003f3c <initEeprom+0x164>)
 8003ee2:	4806      	ldr	r0, [pc, #24]	; (8003efc <initEeprom+0x124>)
 8003ee4:	f7fd fd9c 	bl	8001a20 <EepromAddVar>

	RestauraPadraoTudo(&eeprom);
 8003ee8:	4804      	ldr	r0, [pc, #16]	; (8003efc <initEeprom+0x124>)
 8003eea:	f7fd ff2b 	bl	8001d44 <RestauraPadraoTudo>
	//	EepromDownloadValores(&eeprom);


	//	osThreadResume(TaskComandoHandle);
	//	osThreadResume(TaskBluetoothHandle);
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000f10 	.word	0x20000f10
 8003ef8:	200007b4 	.word	0x200007b4
 8003efc:	200002a0 	.word	0x200002a0
 8003f00:	0800cccc 	.word	0x0800cccc
 8003f04:	20000478 	.word	0x20000478
 8003f08:	0800ccdc 	.word	0x0800ccdc
 8003f0c:	20000360 	.word	0x20000360
 8003f10:	0800ccec 	.word	0x0800ccec
 8003f14:	20000388 	.word	0x20000388
 8003f18:	0800ccfc 	.word	0x0800ccfc
 8003f1c:	200003b0 	.word	0x200003b0
 8003f20:	0800cd0c 	.word	0x0800cd0c
 8003f24:	200003d8 	.word	0x200003d8
 8003f28:	0800cd1c 	.word	0x0800cd1c
 8003f2c:	20000400 	.word	0x20000400
 8003f30:	0800cd2c 	.word	0x0800cd2c
 8003f34:	20000428 	.word	0x20000428
 8003f38:	0800cd3c 	.word	0x0800cd3c
 8003f3c:	20000450 	.word	0x20000450

08003f40 <processaEeprom>:

void processaEeprom(void){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <processaEeprom+0x50>)
 8003f48:	6819      	ldr	r1, [r3, #0]
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f50:	4618      	mov	r0, r3
 8003f52:	f005 fa93 	bl	800947c <osMessageGet>
	if (evt.status == osEventMessage) {
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b10      	cmp	r3, #16
 8003f5a:	d114      	bne.n	8003f86 <processaEeprom+0x46>

		switch ((unsigned int)evt.value.p) {
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d810      	bhi.n	8003f84 <processaEeprom+0x44>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <processaEeprom+0x28>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f81 	.word	0x08003f81
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f85 	.word	0x08003f85
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f85 	.word	0x08003f85
 8003f7c:	08003f85 	.word	0x08003f85

		case CEepromShifiting:
			__NOP();
 8003f80:	bf00      	nop
			//usar um semaphore para evitar de shiffiting em duplicidade
			break;
 8003f82:	e000      	b.n	8003f86 <processaEeprom+0x46>
			//				if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK){
			//					Error_Handler();
			//				}
			break;
		default:
			break;
 8003f84:	bf00      	nop
		}
	}
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000f10 	.word	0x20000f10

08003f94 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro, TempSPTeto, TempSPLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

	initPID();
 8003f9c:	f000 f808 	bl	8003fb0 <initPID>

	//	osThreadSuspend(TaskTemperaturaHandle);
	for(;;)	{

		computaPID();
 8003fa0:	f000 f896 	bl	80040d0 <computaPID>

		osDelay(TIME_PID_CALC);
 8003fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003fa8:	f005 f92d 	bl	8009206 <osDelay>
		computaPID();
 8003fac:	e7f8      	b.n	8003fa0 <StartTemperatura+0xc>
	...

08003fb0 <initPID>:

	tmp += (*PIDOut / 1000);

	return tmp;
}
void initPID(void){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af08      	add	r7, sp, #32

	TempSPTeto 		= 0;
 8003fb6:	493a      	ldr	r1, [pc, #232]	; (80040a0 <initPID+0xf0>)
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9c1 2300 	strd	r2, r3, [r1]
	TempSPLastro 	= 0;
 8003fc4:	4937      	ldr	r1, [pc, #220]	; (80040a4 <initPID+0xf4>)
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9c1 2300 	strd	r2, r3, [r1]

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9307      	str	r3, [sp, #28]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9306      	str	r3, [sp, #24]
 8003fda:	a32d      	add	r3, pc, #180	; (adr r3, 8004090 <initPID+0xe0>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003fe4:	a32c      	add	r3, pc, #176	; (adr r3, 8004098 <initPID+0xe8>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <initPID+0xf8>)
 8003ff4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <initPID+0xfc>)
 8003ffa:	4a2d      	ldr	r2, [pc, #180]	; (80040b0 <initPID+0x100>)
 8003ffc:	492d      	ldr	r1, [pc, #180]	; (80040b4 <initPID+0x104>)
 8003ffe:	482e      	ldr	r0, [pc, #184]	; (80040b8 <initPID+0x108>)
 8004000:	f7fe fb9a 	bl	8002738 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8004004:	2300      	movs	r3, #0
 8004006:	9307      	str	r3, [sp, #28]
 8004008:	2301      	movs	r3, #1
 800400a:	9306      	str	r3, [sp, #24]
 800400c:	a320      	add	r3, pc, #128	; (adr r3, 8004090 <initPID+0xe0>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004016:	a320      	add	r3, pc, #128	; (adr r3, 8004098 <initPID+0xe8>)
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <initPID+0xf8>)
 8004026:	e9cd 2300 	strd	r2, r3, [sp]
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <initPID+0x10c>)
 800402c:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <initPID+0x110>)
 800402e:	4925      	ldr	r1, [pc, #148]	; (80040c4 <initPID+0x114>)
 8004030:	4825      	ldr	r0, [pc, #148]	; (80040c8 <initPID+0x118>)
 8004032:	f7fe fb81 	bl	8002738 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004036:	2101      	movs	r1, #1
 8004038:	481f      	ldr	r0, [pc, #124]	; (80040b8 <initPID+0x108>)
 800403a:	f7fe fcaf 	bl	800299c <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 800403e:	2101      	movs	r1, #1
 8004040:	4821      	ldr	r0, [pc, #132]	; (80040c8 <initPID+0x118>)
 8004042:	f7fe fcab 	bl	800299c <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004046:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800404a:	481b      	ldr	r0, [pc, #108]	; (80040b8 <initPID+0x108>)
 800404c:	f7fe fe14 	bl	8002c78 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004050:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004054:	481c      	ldr	r0, [pc, #112]	; (80040c8 <initPID+0x118>)
 8004056:	f7fe fe0f 	bl	8002c78 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <initPID+0x11c>)
 8004060:	e9cd 2300 	strd	r2, r3, [sp]
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	4812      	ldr	r0, [pc, #72]	; (80040b8 <initPID+0x108>)
 800406e:	f7fe fcb3 	bl	80029d8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <initPID+0x11c>)
 8004078:	e9cd 2300 	strd	r2, r3, [sp]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	4810      	ldr	r0, [pc, #64]	; (80040c8 <initPID+0x118>)
 8004086:	f7fe fca7 	bl	80029d8 <PID_SetOutputLimits>
}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	33333333 	.word	0x33333333
 8004094:	3fd33333 	.word	0x3fd33333
 8004098:	47ae147b 	.word	0x47ae147b
 800409c:	3f847ae1 	.word	0x3f847ae1
 80040a0:	20001170 	.word	0x20001170
 80040a4:	20001178 	.word	0x20001178
 80040a8:	403e0000 	.word	0x403e0000
 80040ac:	20001080 	.word	0x20001080
 80040b0:	20001160 	.word	0x20001160
 80040b4:	20001070 	.word	0x20001070
 80040b8:	20001180 	.word	0x20001180
 80040bc:	20001088 	.word	0x20001088
 80040c0:	20001168 	.word	0x20001168
 80040c4:	20001078 	.word	0x20001078
 80040c8:	200011f0 	.word	0x200011f0
 80040cc:	40590000 	.word	0x40590000

080040d0 <computaPID>:
void computaPID(void){
 80040d0:	b598      	push	{r3, r4, r7, lr}
 80040d2:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 80040d4:	480e      	ldr	r0, [pc, #56]	; (8004110 <computaPID+0x40>)
 80040d6:	f7fe fb77 	bl	80027c8 <PID_Compute>
	PID_Compute(&TPIDLastro);
 80040da:	480e      	ldr	r0, [pc, #56]	; (8004114 <computaPID+0x44>)
 80040dc:	f7fe fb74 	bl	80027c8 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <computaPID+0x48>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	490d      	ldr	r1, [pc, #52]	; (800411c <computaPID+0x4c>)
 80040e8:	680c      	ldr	r4, [r1, #0]
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7fc fc8d 	bl	8000a0c <__aeabi_d2uiz>
 80040f2:	4603      	mov	r3, r0
 80040f4:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <computaPID+0x50>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	4907      	ldr	r1, [pc, #28]	; (800411c <computaPID+0x4c>)
 80040fe:	680c      	ldr	r4, [r1, #0]
 8004100:	4610      	mov	r0, r2
 8004102:	4619      	mov	r1, r3
 8004104:	f7fc fc82 	bl	8000a0c <__aeabi_d2uiz>
 8004108:	4603      	mov	r3, r0
 800410a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800410c:	bf00      	nop
 800410e:	bd98      	pop	{r3, r4, r7, pc}
 8004110:	20001180 	.word	0x20001180
 8004114:	200011f0 	.word	0x200011f0
 8004118:	20001160 	.word	0x20001160
 800411c:	20000850 	.word	0x20000850
 8004120:	20001168 	.word	0x20001168

08004124 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 800412c:	f006 fd54 	bl	800abd8 <xTaskGetTickCount>
 8004130:	4603      	mov	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 8004134:	f000 f8ac 	bl	8004290 <verificaErro>

		funcionamentoTimer();
 8004138:	f000 f80a 	bl	8004150 <funcionamentoTimer>

		funcionamentoLampada();
 800413c:	f000 f86e 	bl	800421c <funcionamentoLampada>

		osDelayUntil(&xLastWakeTime,1000);
 8004140:	f107 030c 	add.w	r3, r7, #12
 8004144:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004148:	4618      	mov	r0, r3
 800414a:	f005 fa39 	bl	80095c0 <osDelayUntil>
		verificaErro();
 800414e:	e7f1      	b.n	8004134 <StartTimer+0x10>

08004150 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer){
 8004154:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <funcionamentoTimer+0xc4>)
 8004156:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <funcionamentoTimer+0x3c>
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <funcionamentoTimer+0xc4>)
 8004160:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <funcionamentoTimer+0x3c>
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <funcionamentoTimer+0xc4>)
 800416a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <funcionamentoTimer+0xc4>)
 8004174:	223b      	movs	r2, #59	; 0x3b
 8004176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <funcionamentoTimer+0xc4>)
 800417c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004180:	3b01      	subs	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b23      	ldr	r3, [pc, #140]	; (8004214 <funcionamentoTimer+0xc4>)
 8004186:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.SetPointTeto	= 0;
			PrimitiveStates.SetPointLastro	= 0;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 800418a:	e041      	b.n	8004210 <funcionamentoTimer+0xc0>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer){
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <funcionamentoTimer+0xc4>)
 800418e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <funcionamentoTimer+0x50>
 8004196:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <funcionamentoTimer+0xc4>)
 8004198:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d037      	beq.n	8004210 <funcionamentoTimer+0xc0>
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <funcionamentoTimer+0xc4>)
 80041a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d032      	beq.n	8004210 <funcionamentoTimer+0xc0>
		PrimitiveStates.RTTimerSegundos--;
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <funcionamentoTimer+0xc4>)
 80041ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <funcionamentoTimer+0xc4>)
 80041b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <funcionamentoTimer+0xc4>)
 80041bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d125      	bne.n	8004210 <funcionamentoTimer+0xc0>
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <funcionamentoTimer+0xc4>)
 80041c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d120      	bne.n	8004210 <funcionamentoTimer+0xc0>
			PrimitiveStates.SetPointTeto 	= 0;
 80041ce:	4911      	ldr	r1, [pc, #68]	; (8004214 <funcionamentoTimer+0xc4>)
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 80041dc:	490d      	ldr	r1, [pc, #52]	; (8004214 <funcionamentoTimer+0xc4>)
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 80041ea:	490a      	ldr	r1, [pc, #40]	; (8004214 <funcionamentoTimer+0xc4>)
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 80041f8:	4906      	ldr	r1, [pc, #24]	; (8004214 <funcionamentoTimer+0xc4>)
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9c1 2308 	strd	r2, r3, [r1, #32]
			osThreadResume(TaskBuzzerHandle);
 8004206:	4b04      	ldr	r3, [pc, #16]	; (8004218 <funcionamentoTimer+0xc8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f005 f9b6 	bl	800957c <osThreadResume>
}
 8004210:	bf00      	nop
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20001068 	.word	0x20001068
 8004218:	200009b8 	.word	0x200009b8

0800421c <funcionamentoLampada>:

void funcionamentoLampada(void){
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
	osEvent evt;
	//notificacao via piscar de lamapda
	evt = osSignalWait (PISCADA_LAMPADA, 0);
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	2200      	movs	r2, #0
 8004226:	211f      	movs	r1, #31
 8004228:	4618      	mov	r0, r3
 800422a:	f005 f841 	bl	80092b0 <osSignalWait>
	if (evt.status == osEventSignal){
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b08      	cmp	r3, #8
			//TODO LÓGICA DE PISCADA DE LAMPADA
		}
	}

	//decremento e apos desligamento lampada
	if(PrimitiveStates.SegundosLampada>0){
 8004232:	4b15      	ldr	r3, [pc, #84]	; (8004288 <funcionamentoLampada+0x6c>)
 8004234:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004238:	2b00      	cmp	r3, #0
 800423a:	d021      	beq.n	8004280 <funcionamentoLampada+0x64>
		PrimitiveStates.SegundosLampada--;
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <funcionamentoLampada+0x6c>)
 800423e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004242:	3b01      	subs	r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	4b10      	ldr	r3, [pc, #64]	; (8004288 <funcionamentoLampada+0x6c>)
 8004248:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(PrimitiveStates.SegundosLampada==0){
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <funcionamentoLampada+0x6c>)
 800424e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <funcionamentoLampada+0x54>
			LAMPADA_OFF
 8004256:	2200      	movs	r2, #0
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	480c      	ldr	r0, [pc, #48]	; (800428c <funcionamentoLampada+0x70>)
 800425c:	f001 fab1 	bl	80057c2 <HAL_GPIO_WritePin>
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <funcionamentoLampada+0x6c>)
 8004262:	2200      	movs	r2, #0
 8004264:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004268:	4b07      	ldr	r3, [pc, #28]	; (8004288 <funcionamentoLampada+0x6c>)
 800426a:	2200      	movs	r2, #0
 800426c:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 800426e:	e007      	b.n	8004280 <funcionamentoLampada+0x64>
			LAMPADA_ON
 8004270:	2201      	movs	r2, #1
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	4805      	ldr	r0, [pc, #20]	; (800428c <funcionamentoLampada+0x70>)
 8004276:	f001 faa4 	bl	80057c2 <HAL_GPIO_WritePin>
 800427a:	4b03      	ldr	r3, [pc, #12]	; (8004288 <funcionamentoLampada+0x6c>)
 800427c:	2201      	movs	r2, #1
 800427e:	70da      	strb	r2, [r3, #3]
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20001068 	.word	0x20001068
 800428c:	40010c00 	.word	0x40010c00

08004290 <verificaErro>:

void verificaErro(void){
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004296:	1d3b      	adds	r3, r7, #4
 8004298:	2200      	movs	r2, #0
 800429a:	210f      	movs	r1, #15
 800429c:	4618      	mov	r0, r3
 800429e:	f005 f807 	bl	80092b0 <osSignalWait>
	if (evt.status == osEventSignal){
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d107      	bne.n	80042b8 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d104      	bne.n	80042b8 <verificaErro+0x28>
			//TODO REVISAR
			osThreadSuspend(TaskTimerHandle);
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <verificaErro+0x30>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 f956 	bl	8009564 <osThreadSuspend>
		}
	}
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000c5c 	.word	0x20000c5c

080042c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <HAL_Init+0x28>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a07      	ldr	r2, [pc, #28]	; (80042ec <HAL_Init+0x28>)
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042d4:	2003      	movs	r0, #3
 80042d6:	f000 fcdb 	bl	8004c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042da:	200f      	movs	r0, #15
 80042dc:	f7fe ffbe 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042e0:	f7fe fd06 	bl	8002cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40022000 	.word	0x40022000

080042f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_IncTick+0x1c>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_IncTick+0x20>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4413      	add	r3, r2
 8004300:	4a03      	ldr	r2, [pc, #12]	; (8004310 <HAL_IncTick+0x20>)
 8004302:	6013      	str	r3, [r2, #0]
}
 8004304:	bf00      	nop
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr
 800430c:	20000208 	.word	0x20000208
 8004310:	20001260 	.word	0x20001260

08004314 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return uwTick;
 8004318:	4b02      	ldr	r3, [pc, #8]	; (8004324 <HAL_GetTick+0x10>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20001260 	.word	0x20001260

08004328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004330:	f7ff fff0 	bl	8004314 <HAL_GetTick>
 8004334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d005      	beq.n	800434e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_Delay+0x44>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800434e:	bf00      	nop
 8004350:	f7ff ffe0 	bl	8004314 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	429a      	cmp	r2, r3
 800435e:	d8f7      	bhi.n	8004350 <HAL_Delay+0x28>
  {
  }
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000208 	.word	0x20000208

08004370 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0be      	b.n	8004510 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe fcd6 	bl	8002d60 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 faf5 	bl	80049a4 <ADC_ConversionStop_Disable>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f040 8099 	bne.w	80044fe <HAL_ADC_Init+0x18e>
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f040 8095 	bne.w	80044fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043dc:	f023 0302 	bic.w	r3, r3, #2
 80043e0:	f043 0202 	orr.w	r2, r3, #2
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80043f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7b1b      	ldrb	r3, [r3, #12]
 80043f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80043f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004408:	d003      	beq.n	8004412 <HAL_ADC_Init+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_ADC_Init+0xa8>
 8004412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004416:	e000      	b.n	800441a <HAL_ADC_Init+0xaa>
 8004418:	2300      	movs	r3, #0
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7d1b      	ldrb	r3, [r3, #20]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d119      	bne.n	800445c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7b1b      	ldrb	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	3b01      	subs	r3, #1
 8004436:	035a      	lsls	r2, r3, #13
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	e00b      	b.n	800445c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f043 0220 	orr.w	r2, r3, #32
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	4b28      	ldr	r3, [pc, #160]	; (8004518 <HAL_ADC_Init+0x1a8>)
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	430b      	orrs	r3, r1
 8004482:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800448c:	d003      	beq.n	8004496 <HAL_ADC_Init+0x126>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d104      	bne.n	80044a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	3b01      	subs	r3, #1
 800449c:	051b      	lsls	r3, r3, #20
 800449e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_ADC_Init+0x1ac>)
 80044bc:	4013      	ands	r3, r2
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d10b      	bne.n	80044dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	f023 0303 	bic.w	r3, r3, #3
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80044da:	e018      	b.n	800450e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	f023 0312 	bic.w	r3, r3, #18
 80044e4:	f043 0210 	orr.w	r2, r3, #16
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80044fc:	e007      	b.n	800450e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800450e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	ffe1f7fd 	.word	0xffe1f7fd
 800451c:	ff1f0efe 	.word	0xff1f0efe

08004520 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a64      	ldr	r2, [pc, #400]	; (80046c8 <HAL_ADC_Start_DMA+0x1a8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_ADC_Start_DMA+0x24>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a63      	ldr	r2, [pc, #396]	; (80046cc <HAL_ADC_Start_DMA+0x1ac>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d106      	bne.n	8004552 <HAL_ADC_Start_DMA+0x32>
 8004544:	4b60      	ldr	r3, [pc, #384]	; (80046c8 <HAL_ADC_Start_DMA+0x1a8>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 80b3 	bne.w	80046b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_ADC_Start_DMA+0x40>
 800455c:	2302      	movs	r3, #2
 800455e:	e0ae      	b.n	80046be <HAL_ADC_Start_DMA+0x19e>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f9c1 	bl	80048f0 <ADC_Enable>
 800456e:	4603      	mov	r3, r0
 8004570:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f040 809a 	bne.w	80046ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <HAL_ADC_Start_DMA+0x1ac>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d105      	bne.n	80045a4 <HAL_ADC_Start_DMA+0x84>
 8004598:	4b4b      	ldr	r3, [pc, #300]	; (80046c8 <HAL_ADC_Start_DMA+0x1a8>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d115      	bne.n	80045d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d026      	beq.n	800460c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045ce:	e01d      	b.n	800460c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <HAL_ADC_Start_DMA+0x1a8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_ADC_Start_DMA+0xd0>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a38      	ldr	r2, [pc, #224]	; (80046cc <HAL_ADC_Start_DMA+0x1ac>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <HAL_ADC_Start_DMA+0xec>
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_ADC_Start_DMA+0x1a8>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d006      	beq.n	8004626 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f023 0206 	bic.w	r2, r3, #6
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
 8004624:	e002      	b.n	800462c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4a25      	ldr	r2, [pc, #148]	; (80046d0 <HAL_ADC_Start_DMA+0x1b0>)
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <HAL_ADC_Start_DMA+0x1b4>)
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a23      	ldr	r2, [pc, #140]	; (80046d8 <HAL_ADC_Start_DMA+0x1b8>)
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0202 	mvn.w	r2, #2
 8004654:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004664:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a18      	ldr	r0, [r3, #32]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	334c      	adds	r3, #76	; 0x4c
 8004670:	4619      	mov	r1, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f000 fc05 	bl	8004e84 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004684:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004688:	d108      	bne.n	800469c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004698:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800469a:	e00f      	b.n	80046bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80046aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80046ac:	e006      	b.n	80046bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80046b6:	e001      	b.n	80046bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40012400 	.word	0x40012400
 80046cc:	40012800 	.word	0x40012800
 80046d0:	08004a27 	.word	0x08004a27
 80046d4:	08004aa3 	.word	0x08004aa3
 80046d8:	08004abf 	.word	0x08004abf

080046dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr

080046ee <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x20>
 800471c:	2302      	movs	r3, #2
 800471e:	e0dc      	b.n	80048da <HAL_ADC_ConfigChannel+0x1da>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b06      	cmp	r3, #6
 800472e:	d81c      	bhi.n	800476a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	3b05      	subs	r3, #5
 8004742:	221f      	movs	r2, #31
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	4019      	ands	r1, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	3b05      	subs	r3, #5
 800475c:	fa00 f203 	lsl.w	r2, r0, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	635a      	str	r2, [r3, #52]	; 0x34
 8004768:	e03c      	b.n	80047e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d81c      	bhi.n	80047ac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	3b23      	subs	r3, #35	; 0x23
 8004784:	221f      	movs	r2, #31
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	4019      	ands	r1, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	3b23      	subs	r3, #35	; 0x23
 800479e:	fa00 f203 	lsl.w	r2, r0, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	631a      	str	r2, [r3, #48]	; 0x30
 80047aa:	e01b      	b.n	80047e4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	3b41      	subs	r3, #65	; 0x41
 80047be:	221f      	movs	r2, #31
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	4019      	ands	r1, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6818      	ldr	r0, [r3, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	3b41      	subs	r3, #65	; 0x41
 80047d8:	fa00 f203 	lsl.w	r2, r0, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d91c      	bls.n	8004826 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	3b1e      	subs	r3, #30
 80047fe:	2207      	movs	r2, #7
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	4019      	ands	r1, r3
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6898      	ldr	r0, [r3, #8]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	3b1e      	subs	r3, #30
 8004818:	fa00 f203 	lsl.w	r2, r0, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	60da      	str	r2, [r3, #12]
 8004824:	e019      	b.n	800485a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6919      	ldr	r1, [r3, #16]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4413      	add	r3, r2
 8004836:	2207      	movs	r2, #7
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	4019      	ands	r1, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6898      	ldr	r0, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	fa00 f203 	lsl.w	r2, r0, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b10      	cmp	r3, #16
 8004860:	d003      	beq.n	800486a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004866:	2b11      	cmp	r3, #17
 8004868:	d132      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d125      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d126      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004890:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b10      	cmp	r3, #16
 8004898:	d11a      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800489a:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <HAL_ADC_ConfigChannel+0x1e8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x1ec>)
 80048a0:	fba2 2303 	umull	r2, r3, r2, r3
 80048a4:	0c9a      	lsrs	r2, r3, #18
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048b0:	e002      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f9      	bne.n	80048b2 <HAL_ADC_ConfigChannel+0x1b2>
 80048be:	e007      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	40012400 	.word	0x40012400
 80048e8:	20000200 	.word	0x20000200
 80048ec:	431bde83 	.word	0x431bde83

080048f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d040      	beq.n	8004990 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800491e:	4b1f      	ldr	r3, [pc, #124]	; (800499c <ADC_Enable+0xac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <ADC_Enable+0xb0>)
 8004924:	fba2 2303 	umull	r2, r3, r2, r3
 8004928:	0c9b      	lsrs	r3, r3, #18
 800492a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800492c:	e002      	b.n	8004934 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	3b01      	subs	r3, #1
 8004932:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1f9      	bne.n	800492e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800493a:	f7ff fceb 	bl	8004314 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004940:	e01f      	b.n	8004982 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004942:	f7ff fce7 	bl	8004314 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d918      	bls.n	8004982 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d011      	beq.n	8004982 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	f043 0210 	orr.w	r2, r3, #16
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d1d8      	bne.n	8004942 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000200 	.word	0x20000200
 80049a0:	431bde83 	.word	0x431bde83

080049a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d12e      	bne.n	8004a1c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0201 	bic.w	r2, r2, #1
 80049cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80049ce:	f7ff fca1 	bl	8004314 <HAL_GetTick>
 80049d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80049d4:	e01b      	b.n	8004a0e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80049d6:	f7ff fc9d 	bl	8004314 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d914      	bls.n	8004a0e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10d      	bne.n	8004a0e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f043 0210 	orr.w	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e007      	b.n	8004a1e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d0dc      	beq.n	80049d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d127      	bne.n	8004a90 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004a56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004a5a:	d115      	bne.n	8004a88 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7fd fd7d 	bl	8002588 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a8e:	e004      	b.n	8004a9a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	4798      	blx	r3
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fe13 	bl	80046dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f043 0204 	orr.w	r2, r3, #4
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff fe02 	bl	80046ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004aea:	bf00      	nop
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <__NVIC_SetPriorityGrouping+0x44>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b10:	4013      	ands	r3, r2
 8004b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b26:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <__NVIC_SetPriorityGrouping+0x44>)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	60d3      	str	r3, [r2, #12]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b40:	4b04      	ldr	r3, [pc, #16]	; (8004b54 <__NVIC_GetPriorityGrouping+0x18>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	f003 0307 	and.w	r3, r3, #7
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	4603      	mov	r3, r0
 8004b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db0b      	blt.n	8004b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	f003 021f 	and.w	r2, r3, #31
 8004b70:	4906      	ldr	r1, [pc, #24]	; (8004b8c <__NVIC_EnableIRQ+0x34>)
 8004b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2001      	movs	r0, #1
 8004b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	db12      	blt.n	8004bc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	f003 021f 	and.w	r2, r3, #31
 8004ba8:	490a      	ldr	r1, [pc, #40]	; (8004bd4 <__NVIC_DisableIRQ+0x44>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb6:	3320      	adds	r3, #32
 8004bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004bbc:	f3bf 8f4f 	dsb	sy
}
 8004bc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004bc2:	f3bf 8f6f 	isb	sy
}
 8004bc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e000e100 	.word	0xe000e100

08004bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	4603      	mov	r3, r0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	db0a      	blt.n	8004c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	490c      	ldr	r1, [pc, #48]	; (8004c24 <__NVIC_SetPriority+0x4c>)
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	0112      	lsls	r2, r2, #4
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c00:	e00a      	b.n	8004c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4908      	ldr	r1, [pc, #32]	; (8004c28 <__NVIC_SetPriority+0x50>)
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	3b04      	subs	r3, #4
 8004c10:	0112      	lsls	r2, r2, #4
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	440b      	add	r3, r1
 8004c16:	761a      	strb	r2, [r3, #24]
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bc80      	pop	{r7}
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	e000e100 	.word	0xe000e100
 8004c28:	e000ed00 	.word	0xe000ed00

08004c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b089      	sub	sp, #36	; 0x24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f1c3 0307 	rsb	r3, r3, #7
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	bf28      	it	cs
 8004c4a:	2304      	movcs	r3, #4
 8004c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	3304      	adds	r3, #4
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d902      	bls.n	8004c5c <NVIC_EncodePriority+0x30>
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3b03      	subs	r3, #3
 8004c5a:	e000      	b.n	8004c5e <NVIC_EncodePriority+0x32>
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c60:	f04f 32ff 	mov.w	r2, #4294967295
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	401a      	ands	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c74:	f04f 31ff 	mov.w	r1, #4294967295
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	43d9      	mvns	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c84:	4313      	orrs	r3, r2
         );
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3724      	adds	r7, #36	; 0x24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff2b 	bl	8004af4 <__NVIC_SetPriorityGrouping>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb8:	f7ff ff40 	bl	8004b3c <__NVIC_GetPriorityGrouping>
 8004cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f7ff ffb2 	bl	8004c2c <NVIC_EncodePriority>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff81 	bl	8004bd8 <__NVIC_SetPriority>
}
 8004cd6:	bf00      	nop
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff33 	bl	8004b58 <__NVIC_EnableIRQ>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	4603      	mov	r3, r0
 8004d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff41 	bl	8004b90 <__NVIC_DisableIRQ>
}
 8004d0e:	bf00      	nop
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e043      	b.n	8004db6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b22      	ldr	r3, [pc, #136]	; (8004dc0 <HAL_DMA_Init+0xa8>)
 8004d36:	4413      	add	r3, r2
 8004d38:	4a22      	ldr	r2, [pc, #136]	; (8004dc4 <HAL_DMA_Init+0xac>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	009a      	lsls	r2, r3, #2
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1f      	ldr	r2, [pc, #124]	; (8004dc8 <HAL_DMA_Init+0xb0>)
 8004d4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d62:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004d66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3714      	adds	r7, #20
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr
 8004dc0:	bffdfff8 	.word	0xbffdfff8
 8004dc4:	cccccccd 	.word	0xcccccccd
 8004dc8:	40020000 	.word	0x40020000

08004dcc <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e046      	b.n	8004e6c <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_DMA_DeInit+0xac>)
 8004e16:	4413      	add	r3, r2
 8004e18:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <HAL_DMA_DeInit+0xb0>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	009a      	lsls	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <HAL_DMA_DeInit+0xb4>)
 8004e2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f202 	lsl.w	r2, r1, r2
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	bffdfff8 	.word	0xbffdfff8
 8004e7c:	cccccccd 	.word	0xcccccccd
 8004e80:	40020000 	.word	0x40020000

08004e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_Start_IT+0x20>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e04b      	b.n	8004f3c <HAL_DMA_Start_IT+0xb8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d13a      	bne.n	8004f2e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f9eb 	bl	80052b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f042 020e 	orr.w	r2, r2, #14
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e00f      	b.n	8004f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 020a 	orr.w	r2, r2, #10
 8004f1a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e005      	b.n	8004f3a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d008      	beq.n	8004f6e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e020      	b.n	8004fb0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 020e 	bic.w	r2, r2, #14
 8004f7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f022 0201 	bic.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2101      	movs	r1, #1
 8004f98:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d005      	beq.n	8004fe0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
 8004fde:	e051      	b.n	8005084 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 020e 	bic.w	r2, r2, #14
 8004fee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a22      	ldr	r2, [pc, #136]	; (8005090 <HAL_DMA_Abort_IT+0xd4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d029      	beq.n	800505e <HAL_DMA_Abort_IT+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a21      	ldr	r2, [pc, #132]	; (8005094 <HAL_DMA_Abort_IT+0xd8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d022      	beq.n	800505a <HAL_DMA_Abort_IT+0x9e>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1f      	ldr	r2, [pc, #124]	; (8005098 <HAL_DMA_Abort_IT+0xdc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01a      	beq.n	8005054 <HAL_DMA_Abort_IT+0x98>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_DMA_Abort_IT+0xe0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d012      	beq.n	800504e <HAL_DMA_Abort_IT+0x92>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <HAL_DMA_Abort_IT+0xe4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00a      	beq.n	8005048 <HAL_DMA_Abort_IT+0x8c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1b      	ldr	r2, [pc, #108]	; (80050a4 <HAL_DMA_Abort_IT+0xe8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d102      	bne.n	8005042 <HAL_DMA_Abort_IT+0x86>
 800503c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005040:	e00e      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 8005042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005046:	e00b      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 8005048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800504c:	e008      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 800504e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005052:	e005      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 8005054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005058:	e002      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 800505a:	2310      	movs	r3, #16
 800505c:	e000      	b.n	8005060 <HAL_DMA_Abort_IT+0xa4>
 800505e:	2301      	movs	r3, #1
 8005060:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <HAL_DMA_Abort_IT+0xec>)
 8005062:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	4798      	blx	r3
    } 
  }
  return status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40020008 	.word	0x40020008
 8005094:	4002001c 	.word	0x4002001c
 8005098:	40020030 	.word	0x40020030
 800509c:	40020044 	.word	0x40020044
 80050a0:	40020058 	.word	0x40020058
 80050a4:	4002006c 	.word	0x4002006c
 80050a8:	40020000 	.word	0x40020000

080050ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2204      	movs	r2, #4
 80050ca:	409a      	lsls	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d04f      	beq.n	8005174 <HAL_DMA_IRQHandler+0xc8>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d04a      	beq.n	8005174 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d107      	bne.n	80050fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0204 	bic.w	r2, r2, #4
 80050fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a66      	ldr	r2, [pc, #408]	; (800529c <HAL_DMA_IRQHandler+0x1f0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d029      	beq.n	800515a <HAL_DMA_IRQHandler+0xae>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a65      	ldr	r2, [pc, #404]	; (80052a0 <HAL_DMA_IRQHandler+0x1f4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_DMA_IRQHandler+0xaa>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a63      	ldr	r2, [pc, #396]	; (80052a4 <HAL_DMA_IRQHandler+0x1f8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01a      	beq.n	8005150 <HAL_DMA_IRQHandler+0xa4>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a62      	ldr	r2, [pc, #392]	; (80052a8 <HAL_DMA_IRQHandler+0x1fc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d012      	beq.n	800514a <HAL_DMA_IRQHandler+0x9e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a60      	ldr	r2, [pc, #384]	; (80052ac <HAL_DMA_IRQHandler+0x200>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00a      	beq.n	8005144 <HAL_DMA_IRQHandler+0x98>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a5f      	ldr	r2, [pc, #380]	; (80052b0 <HAL_DMA_IRQHandler+0x204>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d102      	bne.n	800513e <HAL_DMA_IRQHandler+0x92>
 8005138:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800513c:	e00e      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 800513e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005142:	e00b      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 8005144:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005148:	e008      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 800514a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800514e:	e005      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 8005150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005154:	e002      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	e000      	b.n	800515c <HAL_DMA_IRQHandler+0xb0>
 800515a:	2304      	movs	r3, #4
 800515c:	4a55      	ldr	r2, [pc, #340]	; (80052b4 <HAL_DMA_IRQHandler+0x208>)
 800515e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8094 	beq.w	8005292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005172:	e08e      	b.n	8005292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	2202      	movs	r2, #2
 800517a:	409a      	lsls	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d056      	beq.n	8005232 <HAL_DMA_IRQHandler+0x186>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d051      	beq.n	8005232 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 020a 	bic.w	r2, r2, #10
 80051aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a38      	ldr	r2, [pc, #224]	; (800529c <HAL_DMA_IRQHandler+0x1f0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d029      	beq.n	8005212 <HAL_DMA_IRQHandler+0x166>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a37      	ldr	r2, [pc, #220]	; (80052a0 <HAL_DMA_IRQHandler+0x1f4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_IRQHandler+0x162>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a35      	ldr	r2, [pc, #212]	; (80052a4 <HAL_DMA_IRQHandler+0x1f8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01a      	beq.n	8005208 <HAL_DMA_IRQHandler+0x15c>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a34      	ldr	r2, [pc, #208]	; (80052a8 <HAL_DMA_IRQHandler+0x1fc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d012      	beq.n	8005202 <HAL_DMA_IRQHandler+0x156>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a32      	ldr	r2, [pc, #200]	; (80052ac <HAL_DMA_IRQHandler+0x200>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00a      	beq.n	80051fc <HAL_DMA_IRQHandler+0x150>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a31      	ldr	r2, [pc, #196]	; (80052b0 <HAL_DMA_IRQHandler+0x204>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d102      	bne.n	80051f6 <HAL_DMA_IRQHandler+0x14a>
 80051f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051f4:	e00e      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 80051f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051fa:	e00b      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 80051fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005200:	e008      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 8005202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005206:	e005      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 8005208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800520c:	e002      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 800520e:	2320      	movs	r3, #32
 8005210:	e000      	b.n	8005214 <HAL_DMA_IRQHandler+0x168>
 8005212:	2302      	movs	r3, #2
 8005214:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <HAL_DMA_IRQHandler+0x208>)
 8005216:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d034      	beq.n	8005292 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005230:	e02f      	b.n	8005292 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2208      	movs	r2, #8
 8005238:	409a      	lsls	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d028      	beq.n	8005294 <HAL_DMA_IRQHandler+0x1e8>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d023      	beq.n	8005294 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 020e 	bic.w	r2, r2, #14
 800525a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	2101      	movs	r1, #1
 8005266:	fa01 f202 	lsl.w	r2, r1, r2
 800526a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
    }
  }
  return;
 8005292:	bf00      	nop
 8005294:	bf00      	nop
}
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40020008 	.word	0x40020008
 80052a0:	4002001c 	.word	0x4002001c
 80052a4:	40020030 	.word	0x40020030
 80052a8:	40020044 	.word	0x40020044
 80052ac:	40020058 	.word	0x40020058
 80052b0:	4002006c 	.word	0x4002006c
 80052b4:	40020000 	.word	0x40020000

080052b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	2101      	movs	r1, #1
 80052d0:	fa01 f202 	lsl.w	r2, r1, r2
 80052d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d108      	bne.n	80052f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052f6:	e007      	b.n	8005308 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
	...

08005314 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005314:	b480      	push	{r7}
 8005316:	b08b      	sub	sp, #44	; 0x2c
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005326:	e169      	b.n	80055fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005328:	2201      	movs	r2, #1
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	4013      	ands	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	f040 8158 	bne.w	80055f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a9a      	ldr	r2, [pc, #616]	; (80055b4 <HAL_GPIO_Init+0x2a0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d05e      	beq.n	800540e <HAL_GPIO_Init+0xfa>
 8005350:	4a98      	ldr	r2, [pc, #608]	; (80055b4 <HAL_GPIO_Init+0x2a0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d875      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 8005356:	4a98      	ldr	r2, [pc, #608]	; (80055b8 <HAL_GPIO_Init+0x2a4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d058      	beq.n	800540e <HAL_GPIO_Init+0xfa>
 800535c:	4a96      	ldr	r2, [pc, #600]	; (80055b8 <HAL_GPIO_Init+0x2a4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d86f      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 8005362:	4a96      	ldr	r2, [pc, #600]	; (80055bc <HAL_GPIO_Init+0x2a8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d052      	beq.n	800540e <HAL_GPIO_Init+0xfa>
 8005368:	4a94      	ldr	r2, [pc, #592]	; (80055bc <HAL_GPIO_Init+0x2a8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d869      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 800536e:	4a94      	ldr	r2, [pc, #592]	; (80055c0 <HAL_GPIO_Init+0x2ac>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04c      	beq.n	800540e <HAL_GPIO_Init+0xfa>
 8005374:	4a92      	ldr	r2, [pc, #584]	; (80055c0 <HAL_GPIO_Init+0x2ac>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d863      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 800537a:	4a92      	ldr	r2, [pc, #584]	; (80055c4 <HAL_GPIO_Init+0x2b0>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d046      	beq.n	800540e <HAL_GPIO_Init+0xfa>
 8005380:	4a90      	ldr	r2, [pc, #576]	; (80055c4 <HAL_GPIO_Init+0x2b0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d85d      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 8005386:	2b12      	cmp	r3, #18
 8005388:	d82a      	bhi.n	80053e0 <HAL_GPIO_Init+0xcc>
 800538a:	2b12      	cmp	r3, #18
 800538c:	d859      	bhi.n	8005442 <HAL_GPIO_Init+0x12e>
 800538e:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <HAL_GPIO_Init+0x80>)
 8005390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005394:	0800540f 	.word	0x0800540f
 8005398:	080053e9 	.word	0x080053e9
 800539c:	080053fb 	.word	0x080053fb
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	08005443 	.word	0x08005443
 80053a8:	08005443 	.word	0x08005443
 80053ac:	08005443 	.word	0x08005443
 80053b0:	08005443 	.word	0x08005443
 80053b4:	08005443 	.word	0x08005443
 80053b8:	08005443 	.word	0x08005443
 80053bc:	08005443 	.word	0x08005443
 80053c0:	08005443 	.word	0x08005443
 80053c4:	08005443 	.word	0x08005443
 80053c8:	08005443 	.word	0x08005443
 80053cc:	08005443 	.word	0x08005443
 80053d0:	08005443 	.word	0x08005443
 80053d4:	08005443 	.word	0x08005443
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	08005405 	.word	0x08005405
 80053e0:	4a79      	ldr	r2, [pc, #484]	; (80055c8 <HAL_GPIO_Init+0x2b4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053e6:	e02c      	b.n	8005442 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	623b      	str	r3, [r7, #32]
          break;
 80053ee:	e029      	b.n	8005444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	3304      	adds	r3, #4
 80053f6:	623b      	str	r3, [r7, #32]
          break;
 80053f8:	e024      	b.n	8005444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	3308      	adds	r3, #8
 8005400:	623b      	str	r3, [r7, #32]
          break;
 8005402:	e01f      	b.n	8005444 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	330c      	adds	r3, #12
 800540a:	623b      	str	r3, [r7, #32]
          break;
 800540c:	e01a      	b.n	8005444 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005416:	2304      	movs	r3, #4
 8005418:	623b      	str	r3, [r7, #32]
          break;
 800541a:	e013      	b.n	8005444 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d105      	bne.n	8005430 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005424:	2308      	movs	r3, #8
 8005426:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	611a      	str	r2, [r3, #16]
          break;
 800542e:	e009      	b.n	8005444 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005430:	2308      	movs	r3, #8
 8005432:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	615a      	str	r2, [r3, #20]
          break;
 800543a:	e003      	b.n	8005444 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800543c:	2300      	movs	r3, #0
 800543e:	623b      	str	r3, [r7, #32]
          break;
 8005440:	e000      	b.n	8005444 <HAL_GPIO_Init+0x130>
          break;
 8005442:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d801      	bhi.n	800544e <HAL_GPIO_Init+0x13a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	e001      	b.n	8005452 <HAL_GPIO_Init+0x13e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3304      	adds	r3, #4
 8005452:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2bff      	cmp	r3, #255	; 0xff
 8005458:	d802      	bhi.n	8005460 <HAL_GPIO_Init+0x14c>
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	e002      	b.n	8005466 <HAL_GPIO_Init+0x152>
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	3b08      	subs	r3, #8
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	210f      	movs	r1, #15
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	6a39      	ldr	r1, [r7, #32]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80b1 	beq.w	80055f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005494:	4b4d      	ldr	r3, [pc, #308]	; (80055cc <HAL_GPIO_Init+0x2b8>)
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	4a4c      	ldr	r2, [pc, #304]	; (80055cc <HAL_GPIO_Init+0x2b8>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6193      	str	r3, [r2, #24]
 80054a0:	4b4a      	ldr	r3, [pc, #296]	; (80055cc <HAL_GPIO_Init+0x2b8>)
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80054ac:	4a48      	ldr	r2, [pc, #288]	; (80055d0 <HAL_GPIO_Init+0x2bc>)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	3302      	adds	r3, #2
 80054b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	f003 0303 	and.w	r3, r3, #3
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	220f      	movs	r2, #15
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4013      	ands	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a40      	ldr	r2, [pc, #256]	; (80055d4 <HAL_GPIO_Init+0x2c0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_GPIO_Init+0x1ec>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3f      	ldr	r2, [pc, #252]	; (80055d8 <HAL_GPIO_Init+0x2c4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00d      	beq.n	80054fc <HAL_GPIO_Init+0x1e8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a3e      	ldr	r2, [pc, #248]	; (80055dc <HAL_GPIO_Init+0x2c8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <HAL_GPIO_Init+0x1e4>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a3d      	ldr	r2, [pc, #244]	; (80055e0 <HAL_GPIO_Init+0x2cc>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_GPIO_Init+0x1e0>
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <HAL_GPIO_Init+0x1ee>
 80054f4:	2304      	movs	r3, #4
 80054f6:	e004      	b.n	8005502 <HAL_GPIO_Init+0x1ee>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e002      	b.n	8005502 <HAL_GPIO_Init+0x1ee>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <HAL_GPIO_Init+0x1ee>
 8005500:	2300      	movs	r3, #0
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	f002 0203 	and.w	r2, r2, #3
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	4093      	lsls	r3, r2
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005512:	492f      	ldr	r1, [pc, #188]	; (80055d0 <HAL_GPIO_Init+0x2bc>)
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	3302      	adds	r3, #2
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800552c:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	492c      	ldr	r1, [pc, #176]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]
 8005538:	e006      	b.n	8005548 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800553a:	4b2a      	ldr	r3, [pc, #168]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	43db      	mvns	r3, r3
 8005542:	4928      	ldr	r1, [pc, #160]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005544:	4013      	ands	r3, r2
 8005546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d006      	beq.n	8005562 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005554:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	4922      	ldr	r1, [pc, #136]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	60cb      	str	r3, [r1, #12]
 8005560:	e006      	b.n	8005570 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005562:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	43db      	mvns	r3, r3
 800556a:	491e      	ldr	r1, [pc, #120]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800556c:	4013      	ands	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d006      	beq.n	800558a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800557c:	4b19      	ldr	r3, [pc, #100]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	4918      	ldr	r1, [pc, #96]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4313      	orrs	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
 8005588:	e006      	b.n	8005598 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800558a:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	43db      	mvns	r3, r3
 8005592:	4914      	ldr	r1, [pc, #80]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 8005594:	4013      	ands	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d021      	beq.n	80055e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80055a4:	4b0f      	ldr	r3, [pc, #60]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	490e      	ldr	r1, [pc, #56]	; (80055e4 <HAL_GPIO_Init+0x2d0>)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
 80055b0:	e021      	b.n	80055f6 <HAL_GPIO_Init+0x2e2>
 80055b2:	bf00      	nop
 80055b4:	10320000 	.word	0x10320000
 80055b8:	10310000 	.word	0x10310000
 80055bc:	10220000 	.word	0x10220000
 80055c0:	10210000 	.word	0x10210000
 80055c4:	10120000 	.word	0x10120000
 80055c8:	10110000 	.word	0x10110000
 80055cc:	40021000 	.word	0x40021000
 80055d0:	40010000 	.word	0x40010000
 80055d4:	40010800 	.word	0x40010800
 80055d8:	40010c00 	.word	0x40010c00
 80055dc:	40011000 	.word	0x40011000
 80055e0:	40011400 	.word	0x40011400
 80055e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_GPIO_Init+0x304>)
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	4909      	ldr	r1, [pc, #36]	; (8005618 <HAL_GPIO_Init+0x304>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	3301      	adds	r3, #1
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	fa22 f303 	lsr.w	r3, r2, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	f47f ae8e 	bne.w	8005328 <HAL_GPIO_Init+0x14>
  }
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	372c      	adds	r7, #44	; 0x2c
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40010400 	.word	0x40010400

0800561c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800562a:	e09a      	b.n	8005762 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800562c:	2201      	movs	r2, #1
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808d 	beq.w	800575c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8005642:	4a4e      	ldr	r2, [pc, #312]	; (800577c <HAL_GPIO_DeInit+0x160>)
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	089b      	lsrs	r3, r3, #2
 8005648:	3302      	adds	r3, #2
 800564a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800564e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	220f      	movs	r2, #15
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4013      	ands	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a46      	ldr	r2, [pc, #280]	; (8005780 <HAL_GPIO_DeInit+0x164>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d013      	beq.n	8005694 <HAL_GPIO_DeInit+0x78>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a45      	ldr	r2, [pc, #276]	; (8005784 <HAL_GPIO_DeInit+0x168>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00d      	beq.n	8005690 <HAL_GPIO_DeInit+0x74>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a44      	ldr	r2, [pc, #272]	; (8005788 <HAL_GPIO_DeInit+0x16c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d007      	beq.n	800568c <HAL_GPIO_DeInit+0x70>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a43      	ldr	r2, [pc, #268]	; (800578c <HAL_GPIO_DeInit+0x170>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <HAL_GPIO_DeInit+0x6c>
 8005684:	2303      	movs	r3, #3
 8005686:	e006      	b.n	8005696 <HAL_GPIO_DeInit+0x7a>
 8005688:	2304      	movs	r3, #4
 800568a:	e004      	b.n	8005696 <HAL_GPIO_DeInit+0x7a>
 800568c:	2302      	movs	r3, #2
 800568e:	e002      	b.n	8005696 <HAL_GPIO_DeInit+0x7a>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_GPIO_DeInit+0x7a>
 8005694:	2300      	movs	r3, #0
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	f002 0203 	and.w	r2, r2, #3
 800569c:	0092      	lsls	r2, r2, #2
 800569e:	4093      	lsls	r3, r2
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d132      	bne.n	800570c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80056a6:	4b3a      	ldr	r3, [pc, #232]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	4938      	ldr	r1, [pc, #224]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	43db      	mvns	r3, r3
 80056bc:	4934      	ldr	r1, [pc, #208]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056be:	4013      	ands	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80056c2:	4b33      	ldr	r3, [pc, #204]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	4931      	ldr	r1, [pc, #196]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80056d0:	4b2f      	ldr	r3, [pc, #188]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	492d      	ldr	r1, [pc, #180]	; (8005790 <HAL_GPIO_DeInit+0x174>)
 80056da:	4013      	ands	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	220f      	movs	r2, #15
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80056ee:	4a23      	ldr	r2, [pc, #140]	; (800577c <HAL_GPIO_DeInit+0x160>)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	089b      	lsrs	r3, r3, #2
 80056f4:	3302      	adds	r3, #2
 80056f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	481f      	ldr	r0, [pc, #124]	; (800577c <HAL_GPIO_DeInit+0x160>)
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	400a      	ands	r2, r1
 8005706:	3302      	adds	r3, #2
 8005708:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	2bff      	cmp	r3, #255	; 0xff
 8005710:	d801      	bhi.n	8005716 <HAL_GPIO_DeInit+0xfa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	e001      	b.n	800571a <HAL_GPIO_DeInit+0xfe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3304      	adds	r3, #4
 800571a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2bff      	cmp	r3, #255	; 0xff
 8005720:	d802      	bhi.n	8005728 <HAL_GPIO_DeInit+0x10c>
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	e002      	b.n	800572e <HAL_GPIO_DeInit+0x112>
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3b08      	subs	r3, #8
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	210f      	movs	r1, #15
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	fa01 f303 	lsl.w	r3, r1, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	2104      	movs	r1, #4
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	fa01 f303 	lsl.w	r3, r1, r3
 8005748:	431a      	orrs	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	3301      	adds	r3, #1
 8005760:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	f47f af5e 	bne.w	800562c <HAL_GPIO_DeInit+0x10>
  }
}
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr
 800577c:	40010000 	.word	0x40010000
 8005780:	40010800 	.word	0x40010800
 8005784:	40010c00 	.word	0x40010c00
 8005788:	40011000 	.word	0x40011000
 800578c:	40011400 	.word	0x40011400
 8005790:	40010400 	.word	0x40010400

08005794 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
 80057b0:	e001      	b.n	80057b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr

080057c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	807b      	strh	r3, [r7, #2]
 80057ce:	4613      	mov	r3, r2
 80057d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057d2:	787b      	ldrb	r3, [r7, #1]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80057de:	e003      	b.n	80057e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80057e0:	887b      	ldrh	r3, [r7, #2]
 80057e2:	041a      	lsls	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	611a      	str	r2, [r3, #16]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr
	...

080057f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e12b      	b.n	8005a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fd fb08 	bl	8002e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2224      	movs	r2, #36	; 0x24
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005858:	f001 f970 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 800585c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4a81      	ldr	r2, [pc, #516]	; (8005a68 <HAL_I2C_Init+0x274>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d807      	bhi.n	8005878 <HAL_I2C_Init+0x84>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a80      	ldr	r2, [pc, #512]	; (8005a6c <HAL_I2C_Init+0x278>)
 800586c:	4293      	cmp	r3, r2
 800586e:	bf94      	ite	ls
 8005870:	2301      	movls	r3, #1
 8005872:	2300      	movhi	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e006      	b.n	8005886 <HAL_I2C_Init+0x92>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a7d      	ldr	r2, [pc, #500]	; (8005a70 <HAL_I2C_Init+0x27c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	bf94      	ite	ls
 8005880:	2301      	movls	r3, #1
 8005882:	2300      	movhi	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0e7      	b.n	8005a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a78      	ldr	r2, [pc, #480]	; (8005a74 <HAL_I2C_Init+0x280>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	0c9b      	lsrs	r3, r3, #18
 8005898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a6a      	ldr	r2, [pc, #424]	; (8005a68 <HAL_I2C_Init+0x274>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d802      	bhi.n	80058c8 <HAL_I2C_Init+0xd4>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	3301      	adds	r3, #1
 80058c6:	e009      	b.n	80058dc <HAL_I2C_Init+0xe8>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	4a69      	ldr	r2, [pc, #420]	; (8005a78 <HAL_I2C_Init+0x284>)
 80058d4:	fba2 2303 	umull	r2, r3, r2, r3
 80058d8:	099b      	lsrs	r3, r3, #6
 80058da:	3301      	adds	r3, #1
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	495c      	ldr	r1, [pc, #368]	; (8005a68 <HAL_I2C_Init+0x274>)
 80058f8:	428b      	cmp	r3, r1
 80058fa:	d819      	bhi.n	8005930 <HAL_I2C_Init+0x13c>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	1e59      	subs	r1, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	fbb1 f3f3 	udiv	r3, r1, r3
 800590a:	1c59      	adds	r1, r3, #1
 800590c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005910:	400b      	ands	r3, r1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <HAL_I2C_Init+0x138>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1e59      	subs	r1, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	fbb1 f3f3 	udiv	r3, r1, r3
 8005924:	3301      	adds	r3, #1
 8005926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592a:	e051      	b.n	80059d0 <HAL_I2C_Init+0x1dc>
 800592c:	2304      	movs	r3, #4
 800592e:	e04f      	b.n	80059d0 <HAL_I2C_Init+0x1dc>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d111      	bne.n	800595c <HAL_I2C_Init+0x168>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	1e58      	subs	r0, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	440b      	add	r3, r1
 8005946:	fbb0 f3f3 	udiv	r3, r0, r3
 800594a:	3301      	adds	r3, #1
 800594c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e012      	b.n	8005982 <HAL_I2C_Init+0x18e>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e58      	subs	r0, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	0099      	lsls	r1, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005972:	3301      	adds	r3, #1
 8005974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Init+0x196>
 8005986:	2301      	movs	r3, #1
 8005988:	e022      	b.n	80059d0 <HAL_I2C_Init+0x1dc>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10e      	bne.n	80059b0 <HAL_I2C_Init+0x1bc>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1e58      	subs	r0, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6859      	ldr	r1, [r3, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	440b      	add	r3, r1
 80059a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ae:	e00f      	b.n	80059d0 <HAL_I2C_Init+0x1dc>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1e58      	subs	r0, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6859      	ldr	r1, [r3, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	0099      	lsls	r1, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c6:	3301      	adds	r3, #1
 80059c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	6809      	ldr	r1, [r1, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	430a      	orrs	r2, r1
 80059f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6911      	ldr	r1, [r2, #16]
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68d2      	ldr	r2, [r2, #12]
 8005a0a:	4311      	orrs	r1, r2
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0201 	orr.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	000186a0 	.word	0x000186a0
 8005a6c:	001e847f 	.word	0x001e847f
 8005a70:	003d08ff 	.word	0x003d08ff
 8005a74:	431bde83 	.word	0x431bde83
 8005a78:	10624dd3 	.word	0x10624dd3

08005a7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b088      	sub	sp, #32
 8005a80:	af02      	add	r7, sp, #8
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	4608      	mov	r0, r1
 8005a86:	4611      	mov	r1, r2
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	817b      	strh	r3, [r7, #10]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	813b      	strh	r3, [r7, #8]
 8005a92:	4613      	mov	r3, r2
 8005a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a96:	f7fe fc3d 	bl	8004314 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	f040 80d9 	bne.w	8005c5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2319      	movs	r3, #25
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	496d      	ldr	r1, [pc, #436]	; (8005c68 <HAL_I2C_Mem_Write+0x1ec>)
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fa9f 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e0cc      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2C_Mem_Write+0x56>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0c5      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d007      	beq.n	8005af8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2221      	movs	r2, #33	; 0x21
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a3a      	ldr	r2, [r7, #32]
 8005b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a4d      	ldr	r2, [pc, #308]	; (8005c6c <HAL_I2C_Mem_Write+0x1f0>)
 8005b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b3a:	88f8      	ldrh	r0, [r7, #6]
 8005b3c:	893a      	ldrh	r2, [r7, #8]
 8005b3e:	8979      	ldrh	r1, [r7, #10]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	9301      	str	r3, [sp, #4]
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	4603      	mov	r3, r0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f9be 	bl	8005ecc <I2C_RequestMemoryWrite>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d052      	beq.n	8005bfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e081      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 fb64 	bl	800622c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d107      	bne.n	8005b82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e06b      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	781a      	ldrb	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d11b      	bne.n	8005bfc <HAL_I2C_Mem_Write+0x180>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d017      	beq.n	8005bfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	781a      	ldrb	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1aa      	bne.n	8005b5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fb57 	bl	80062bc <I2C_WaitOnBTFFlagUntilTimeout>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	2b04      	cmp	r3, #4
 8005c1a:	d107      	bne.n	8005c2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e016      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e000      	b.n	8005c5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c5c:	2302      	movs	r3, #2
  }
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	00100002 	.word	0x00100002
 8005c6c:	ffff0000 	.word	0xffff0000

08005c70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	; 0x28
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005c80:	f7fe fb48 	bl	8004314 <HAL_GetTick>
 8005c84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	f040 8111 	bne.w	8005eba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	2319      	movs	r3, #25
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4988      	ldr	r1, [pc, #544]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f9a8 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e104      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_I2C_IsDeviceReady+0x50>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e0fd      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d007      	beq.n	8005ce6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2224      	movs	r2, #36	; 0x24
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a70      	ldr	r2, [pc, #448]	; (8005ec8 <HAL_I2C_IsDeviceReady+0x258>)
 8005d08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f966 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00d      	beq.n	8005d4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d40:	d103      	bne.n	8005d4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e0b6      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d4e:	897b      	ldrh	r3, [r7, #10]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005d5e:	f7fe fad9 	bl	8004314 <HAL_GetTick>
 8005d62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005d92:	e025      	b.n	8005de0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d94:	f7fe fabe 	bl	8004314 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d302      	bcc.n	8005daa <HAL_I2C_IsDeviceReady+0x13a>
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22a0      	movs	r2, #160	; 0xa0
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2ba0      	cmp	r3, #160	; 0xa0
 8005dea:	d005      	beq.n	8005df8 <HAL_I2C_IsDeviceReady+0x188>
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_I2C_IsDeviceReady+0x188>
 8005df2:	7dbb      	ldrb	r3, [r7, #22]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0cd      	beq.n	8005d94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d129      	bne.n	8005e62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2319      	movs	r3, #25
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	4921      	ldr	r1, [pc, #132]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f000 f8da 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e036      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e02c      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	2319      	movs	r3, #25
 8005e82:	2201      	movs	r2, #1
 8005e84:	490f      	ldr	r1, [pc, #60]	; (8005ec4 <HAL_I2C_IsDeviceReady+0x254>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f8b6 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e012      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f4ff af32 	bcc.w	8005d0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00100002 	.word	0x00100002
 8005ec8:	ffff0000 	.word	0xffff0000

08005ecc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	817b      	strh	r3, [r7, #10]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	813b      	strh	r3, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f878 	bl	8005ff8 <I2C_WaitOnFlagUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00d      	beq.n	8005f2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1c:	d103      	bne.n	8005f26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e05f      	b.n	8005fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f2a:	897b      	ldrh	r3, [r7, #10]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	6a3a      	ldr	r2, [r7, #32]
 8005f3e:	492d      	ldr	r1, [pc, #180]	; (8005ff4 <I2C_RequestMemoryWrite+0x128>)
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 f8d3 	bl	80060ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e04c      	b.n	8005fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	6a39      	ldr	r1, [r7, #32]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f95e 	bl	800622c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d107      	bne.n	8005f8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e02b      	b.n	8005fea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	e021      	b.n	8005fe8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fa4:	893b      	ldrh	r3, [r7, #8]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb4:	6a39      	ldr	r1, [r7, #32]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f938 	bl	800622c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d107      	bne.n	8005fda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e005      	b.n	8005fea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fde:	893b      	ldrh	r3, [r7, #8]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	00010002 	.word	0x00010002

08005ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006008:	e048      	b.n	800609c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d044      	beq.n	800609c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fe f97f 	bl	8004314 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d139      	bne.n	800609c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	0c1b      	lsrs	r3, r3, #16
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b01      	cmp	r3, #1
 8006030:	d10d      	bne.n	800604e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	43da      	mvns	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4013      	ands	r3, r2
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b00      	cmp	r3, #0
 8006042:	bf0c      	ite	eq
 8006044:	2301      	moveq	r3, #1
 8006046:	2300      	movne	r3, #0
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	e00c      	b.n	8006068 <I2C_WaitOnFlagUntilTimeout+0x70>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	43da      	mvns	r2, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	429a      	cmp	r2, r3
 800606c:	d116      	bne.n	800609c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e023      	b.n	80060e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d10d      	bne.n	80060c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	43da      	mvns	r2, r3
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	4013      	ands	r3, r2
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	461a      	mov	r2, r3
 80060c0:	e00c      	b.n	80060dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	43da      	mvns	r2, r3
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4013      	ands	r3, r2
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d093      	beq.n	800600a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060fa:	e071      	b.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800610a:	d123      	bne.n	8006154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006124:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	f043 0204 	orr.w	r2, r3, #4
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e067      	b.n	8006224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d041      	beq.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615c:	f7fe f8da 	bl	8004314 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d302      	bcc.n	8006172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d136      	bne.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b01      	cmp	r3, #1
 800617a:	d10c      	bne.n	8006196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	43da      	mvns	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4013      	ands	r3, r2
 8006188:	b29b      	uxth	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	bf14      	ite	ne
 800618e:	2301      	movne	r3, #1
 8006190:	2300      	moveq	r3, #0
 8006192:	b2db      	uxtb	r3, r3
 8006194:	e00b      	b.n	80061ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	43da      	mvns	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4013      	ands	r3, r2
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf14      	ite	ne
 80061a8:	2301      	movne	r3, #1
 80061aa:	2300      	moveq	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f043 0220 	orr.w	r2, r3, #32
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e021      	b.n	8006224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d10c      	bne.n	8006204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	43da      	mvns	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4013      	ands	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e00b      	b.n	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	43da      	mvns	r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4013      	ands	r3, r2
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f af6d 	bne.w	80060fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006238:	e034      	b.n	80062a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f886 	bl	800634c <I2C_IsAcknowledgeFailed>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e034      	b.n	80062b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006250:	d028      	beq.n	80062a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006252:	f7fe f85f 	bl	8004314 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	d302      	bcc.n	8006268 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11d      	bne.n	80062a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d016      	beq.n	80062a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e007      	b.n	80062b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d1c3      	bne.n	800623a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062c8:	e034      	b.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f83e 	bl	800634c <I2C_IsAcknowledgeFailed>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e034      	b.n	8006344 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e0:	d028      	beq.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e2:	f7fe f817 	bl	8004314 <HAL_GetTick>
 80062e6:	4602      	mov	r2, r0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d302      	bcc.n	80062f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11d      	bne.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b04      	cmp	r3, #4
 8006304:	d016      	beq.n	8006334 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2220      	movs	r2, #32
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006320:	f043 0220 	orr.w	r2, r3, #32
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b04      	cmp	r3, #4
 8006340:	d1c3      	bne.n	80062ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d11b      	bne.n	800639c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800636c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	f043 0204 	orr.w	r2, r3, #4
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr

080063a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e272      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8087 	beq.w	80064d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063c8:	4b92      	ldr	r3, [pc, #584]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d00c      	beq.n	80063ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063d4:	4b8f      	ldr	r3, [pc, #572]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d112      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
 80063e0:	4b8c      	ldr	r3, [pc, #560]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d10b      	bne.n	8006406 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063ee:	4b89      	ldr	r3, [pc, #548]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d06c      	beq.n	80064d4 <HAL_RCC_OscConfig+0x12c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d168      	bne.n	80064d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e24c      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640e:	d106      	bne.n	800641e <HAL_RCC_OscConfig+0x76>
 8006410:	4b80      	ldr	r3, [pc, #512]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a7f      	ldr	r2, [pc, #508]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e02e      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10c      	bne.n	8006440 <HAL_RCC_OscConfig+0x98>
 8006426:	4b7b      	ldr	r3, [pc, #492]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7a      	ldr	r2, [pc, #488]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800642c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	4b78      	ldr	r3, [pc, #480]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a77      	ldr	r2, [pc, #476]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	e01d      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006448:	d10c      	bne.n	8006464 <HAL_RCC_OscConfig+0xbc>
 800644a:	4b72      	ldr	r3, [pc, #456]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a71      	ldr	r2, [pc, #452]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	4b6f      	ldr	r3, [pc, #444]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a6e      	ldr	r2, [pc, #440]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800645c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	e00b      	b.n	800647c <HAL_RCC_OscConfig+0xd4>
 8006464:	4b6b      	ldr	r3, [pc, #428]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a6a      	ldr	r2, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800646a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	4b68      	ldr	r3, [pc, #416]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a67      	ldr	r2, [pc, #412]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800647a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d013      	beq.n	80064ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fd ff46 	bl	8004314 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fd ff42 	bl	8004314 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	; 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e200      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649e:	4b5d      	ldr	r3, [pc, #372]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0xe4>
 80064aa:	e014      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ac:	f7fd ff32 	bl	8004314 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064b4:	f7fd ff2e 	bl	8004314 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b64      	cmp	r3, #100	; 0x64
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e1ec      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c6:	4b53      	ldr	r3, [pc, #332]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x10c>
 80064d2:	e000      	b.n	80064d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d063      	beq.n	80065aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064e2:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f003 030c 	and.w	r3, r3, #12
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064ee:	4b49      	ldr	r3, [pc, #292]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d11c      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
 80064fa:	4b46      	ldr	r3, [pc, #280]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d116      	bne.n	8006534 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	4b43      	ldr	r3, [pc, #268]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d005      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d001      	beq.n	800651e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e1c0      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4939      	ldr	r1, [pc, #228]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800652e:	4313      	orrs	r3, r2
 8006530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006532:	e03a      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d020      	beq.n	800657e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 800653e:	2201      	movs	r2, #1
 8006540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006542:	f7fd fee7 	bl	8004314 <HAL_GetTick>
 8006546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006548:	e008      	b.n	800655c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800654a:	f7fd fee3 	bl	8004314 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e1a1      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655c:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0f0      	beq.n	800654a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b2a      	ldr	r3, [pc, #168]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4927      	ldr	r1, [pc, #156]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]
 800657c:	e015      	b.n	80065aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800657e:	4b26      	ldr	r3, [pc, #152]	; (8006618 <HAL_RCC_OscConfig+0x270>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7fd fec6 	bl	8004314 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800658c:	f7fd fec2 	bl	8004314 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e180      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659e:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d03a      	beq.n	800662c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065be:	4b17      	ldr	r3, [pc, #92]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7fd fea6 	bl	8004314 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065cc:	f7fd fea2 	bl	8004314 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e160      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065ea:	2001      	movs	r0, #1
 80065ec:	f000 fafe 	bl	8006bec <RCC_Delay>
 80065f0:	e01c      	b.n	800662c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_RCC_OscConfig+0x274>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f8:	f7fd fe8c 	bl	8004314 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065fe:	e00f      	b.n	8006620 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006600:	f7fd fe88 	bl	8004314 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d908      	bls.n	8006620 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e146      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000
 8006618:	42420000 	.word	0x42420000
 800661c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006620:	4b92      	ldr	r3, [pc, #584]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1e9      	bne.n	8006600 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80a6 	beq.w	8006786 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800663e:	4b8b      	ldr	r3, [pc, #556]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800664a:	4b88      	ldr	r3, [pc, #544]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4a87      	ldr	r2, [pc, #540]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006654:	61d3      	str	r3, [r2, #28]
 8006656:	4b85      	ldr	r3, [pc, #532]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800665e:	60bb      	str	r3, [r7, #8]
 8006660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006662:	2301      	movs	r3, #1
 8006664:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	4b82      	ldr	r3, [pc, #520]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666e:	2b00      	cmp	r3, #0
 8006670:	d118      	bne.n	80066a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006672:	4b7f      	ldr	r3, [pc, #508]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a7e      	ldr	r2, [pc, #504]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 8006678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800667e:	f7fd fe49 	bl	8004314 <HAL_GetTick>
 8006682:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006686:	f7fd fe45 	bl	8004314 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b64      	cmp	r3, #100	; 0x64
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e103      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	4b75      	ldr	r3, [pc, #468]	; (8006870 <HAL_RCC_OscConfig+0x4c8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <HAL_RCC_OscConfig+0x312>
 80066ac:	4b6f      	ldr	r3, [pc, #444]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	4a6e      	ldr	r2, [pc, #440]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066b2:	f043 0301 	orr.w	r3, r3, #1
 80066b6:	6213      	str	r3, [r2, #32]
 80066b8:	e02d      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10c      	bne.n	80066dc <HAL_RCC_OscConfig+0x334>
 80066c2:	4b6a      	ldr	r3, [pc, #424]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	4a69      	ldr	r2, [pc, #420]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	6213      	str	r3, [r2, #32]
 80066ce:	4b67      	ldr	r3, [pc, #412]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	4a66      	ldr	r2, [pc, #408]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066d4:	f023 0304 	bic.w	r3, r3, #4
 80066d8:	6213      	str	r3, [r2, #32]
 80066da:	e01c      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b05      	cmp	r3, #5
 80066e2:	d10c      	bne.n	80066fe <HAL_RCC_OscConfig+0x356>
 80066e4:	4b61      	ldr	r3, [pc, #388]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	4a60      	ldr	r2, [pc, #384]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066ea:	f043 0304 	orr.w	r3, r3, #4
 80066ee:	6213      	str	r3, [r2, #32]
 80066f0:	4b5e      	ldr	r3, [pc, #376]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	4a5d      	ldr	r2, [pc, #372]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80066f6:	f043 0301 	orr.w	r3, r3, #1
 80066fa:	6213      	str	r3, [r2, #32]
 80066fc:	e00b      	b.n	8006716 <HAL_RCC_OscConfig+0x36e>
 80066fe:	4b5b      	ldr	r3, [pc, #364]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	4a5a      	ldr	r2, [pc, #360]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	6213      	str	r3, [r2, #32]
 800670a:	4b58      	ldr	r3, [pc, #352]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4a57      	ldr	r2, [pc, #348]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006710:	f023 0304 	bic.w	r3, r3, #4
 8006714:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d015      	beq.n	800674a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7fd fdf9 	bl	8004314 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7fd fdf5 	bl	8004314 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e0b1      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673c:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ee      	beq.n	8006726 <HAL_RCC_OscConfig+0x37e>
 8006748:	e014      	b.n	8006774 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800674a:	f7fd fde3 	bl	8004314 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006750:	e00a      	b.n	8006768 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006752:	f7fd fddf 	bl	8004314 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006760:	4293      	cmp	r3, r2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e09b      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006768:	4b40      	ldr	r3, [pc, #256]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1ee      	bne.n	8006752 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006774:	7dfb      	ldrb	r3, [r7, #23]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d105      	bne.n	8006786 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800677a:	4b3c      	ldr	r3, [pc, #240]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	4a3b      	ldr	r2, [pc, #236]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006784:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8087 	beq.w	800689e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006790:	4b36      	ldr	r3, [pc, #216]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 030c 	and.w	r3, r3, #12
 8006798:	2b08      	cmp	r3, #8
 800679a:	d061      	beq.n	8006860 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d146      	bne.n	8006832 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a4:	4b33      	ldr	r3, [pc, #204]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fd fdb3 	bl	8004314 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b2:	f7fd fdaf 	bl	8004314 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e06d      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c4:	4b29      	ldr	r3, [pc, #164]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d8:	d108      	bne.n	80067ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067da:	4b24      	ldr	r3, [pc, #144]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	4921      	ldr	r1, [pc, #132]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ec:	4b1f      	ldr	r3, [pc, #124]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a19      	ldr	r1, [r3, #32]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	430b      	orrs	r3, r1
 80067fe:	491b      	ldr	r1, [pc, #108]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006800:	4313      	orrs	r3, r2
 8006802:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006804:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7fd fd83 	bl	8004314 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006812:	f7fd fd7f 	bl	8004314 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e03d      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006824:	4b11      	ldr	r3, [pc, #68]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x46a>
 8006830:	e035      	b.n	800689e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	4b10      	ldr	r3, [pc, #64]	; (8006874 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fd fd6c 	bl	8004314 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006840:	f7fd fd68 	bl	8004314 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e026      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_OscConfig+0x4c4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1f0      	bne.n	8006840 <HAL_RCC_OscConfig+0x498>
 800685e:	e01e      	b.n	800689e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e019      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
 800686c:	40021000 	.word	0x40021000
 8006870:	40007000 	.word	0x40007000
 8006874:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006878:	4b0b      	ldr	r3, [pc, #44]	; (80068a8 <HAL_RCC_OscConfig+0x500>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	429a      	cmp	r2, r3
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d001      	beq.n	800689e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000

080068ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0d0      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068c0:	4b6a      	ldr	r3, [pc, #424]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0307 	and.w	r3, r3, #7
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d910      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ce:	4b67      	ldr	r3, [pc, #412]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f023 0207 	bic.w	r2, r3, #7
 80068d6:	4965      	ldr	r1, [pc, #404]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068de:	4b63      	ldr	r3, [pc, #396]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d001      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0b8      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d020      	beq.n	800693e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006908:	4b59      	ldr	r3, [pc, #356]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a58      	ldr	r2, [pc, #352]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800690e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a52      	ldr	r2, [pc, #328]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800692a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800692c:	4b50      	ldr	r3, [pc, #320]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	494d      	ldr	r1, [pc, #308]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d040      	beq.n	80069cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d115      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e07f      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696a:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d109      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e073      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697a:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e06b      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f023 0203 	bic.w	r2, r3, #3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4936      	ldr	r1, [pc, #216]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006998:	4313      	orrs	r3, r2
 800699a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800699c:	f7fd fcba 	bl	8004314 <HAL_GetTick>
 80069a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	e00a      	b.n	80069ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069a4:	f7fd fcb6 	bl	8004314 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e053      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ba:	4b2d      	ldr	r3, [pc, #180]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f003 020c 	and.w	r2, r3, #12
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d1eb      	bne.n	80069a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069cc:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d210      	bcs.n	80069fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f023 0207 	bic.w	r2, r3, #7
 80069e2:	4922      	ldr	r1, [pc, #136]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ea:	4b20      	ldr	r3, [pc, #128]	; (8006a6c <HAL_RCC_ClockConfig+0x1c0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d001      	beq.n	80069fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e032      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a08:	4b19      	ldr	r3, [pc, #100]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4916      	ldr	r1, [pc, #88]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0308 	and.w	r3, r3, #8
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	490e      	ldr	r1, [pc, #56]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a3a:	f000 f821 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4b0b      	ldr	r3, [pc, #44]	; (8006a70 <HAL_RCC_ClockConfig+0x1c4>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	091b      	lsrs	r3, r3, #4
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	490a      	ldr	r1, [pc, #40]	; (8006a74 <HAL_RCC_ClockConfig+0x1c8>)
 8006a4c:	5ccb      	ldrb	r3, [r1, r3]
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1cc>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCC_ClockConfig+0x1d0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fc fbfe 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40022000 	.word	0x40022000
 8006a70:	40021000 	.word	0x40021000
 8006a74:	0800cd54 	.word	0x0800cd54
 8006a78:	20000200 	.word	0x20000200
 8006a7c:	20000204 	.word	0x20000204

08006a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a9a:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d002      	beq.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8006aae:	e027      	b.n	8006b00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ab0:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ab2:	613b      	str	r3, [r7, #16]
      break;
 8006ab4:	e027      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	0c9b      	lsrs	r3, r3, #18
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	4a17      	ldr	r2, [pc, #92]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ac0:	5cd3      	ldrb	r3, [r2, r3]
 8006ac2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d010      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	0c5b      	lsrs	r3, r3, #17
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	4a11      	ldr	r2, [pc, #68]	; (8006b20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006ada:	5cd3      	ldrb	r3, [r2, r3]
 8006adc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ae2:	fb03 f202 	mul.w	r2, r3, r2
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e004      	b.n	8006afa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	613b      	str	r3, [r7, #16]
      break;
 8006afe:	e002      	b.n	8006b06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b00:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006b02:	613b      	str	r3, [r7, #16]
      break;
 8006b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b06:	693b      	ldr	r3, [r7, #16]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40021000 	.word	0x40021000
 8006b18:	007a1200 	.word	0x007a1200
 8006b1c:	0800cd6c 	.word	0x0800cd6c
 8006b20:	0800cd7c 	.word	0x0800cd7c
 8006b24:	003d0900 	.word	0x003d0900

08006b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr
 8006b38:	20000200 	.word	0x20000200

08006b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b40:	f7ff fff2 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 8006b44:	4602      	mov	r2, r0
 8006b46:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	0a1b      	lsrs	r3, r3, #8
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	4903      	ldr	r1, [pc, #12]	; (8006b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b52:	5ccb      	ldrb	r3, [r1, r3]
 8006b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	0800cd64 	.word	0x0800cd64

08006b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b68:	f7ff ffde 	bl	8006b28 <HAL_RCC_GetHCLKFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	0adb      	lsrs	r3, r3, #11
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	4903      	ldr	r1, [pc, #12]	; (8006b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	40021000 	.word	0x40021000
 8006b88:	0800cd64 	.word	0x0800cd64

08006b8c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	220f      	movs	r2, #15
 8006b9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b9c:	4b11      	ldr	r3, [pc, #68]	; (8006be4 <HAL_RCC_GetClockConfig+0x58>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f003 0203 	and.w	r2, r3, #3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ba8:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <HAL_RCC_GetClockConfig+0x58>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <HAL_RCC_GetClockConfig+0x58>)
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <HAL_RCC_GetClockConfig+0x58>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetClockConfig+0x5c>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0207 	and.w	r2, r3, #7
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr
 8006be4:	40021000 	.word	0x40021000
 8006be8:	40022000 	.word	0x40022000

08006bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006bf4:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <RCC_Delay+0x34>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <RCC_Delay+0x38>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	0a5b      	lsrs	r3, r3, #9
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	fb02 f303 	mul.w	r3, r2, r3
 8006c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c08:	bf00      	nop
  }
  while (Delay --);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1e5a      	subs	r2, r3, #1
 8006c0e:	60fa      	str	r2, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f9      	bne.n	8006c08 <RCC_Delay+0x1c>
}
 8006c14:	bf00      	nop
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	20000200 	.word	0x20000200
 8006c24:	10624dd3 	.word	0x10624dd3

08006c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d07d      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c48:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10d      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c54:	4b4c      	ldr	r3, [pc, #304]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	4a4b      	ldr	r2, [pc, #300]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c5e:	61d3      	str	r3, [r2, #28]
 8006c60:	4b49      	ldr	r3, [pc, #292]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c68:	60bb      	str	r3, [r7, #8]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c70:	4b46      	ldr	r3, [pc, #280]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d118      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c7c:	4b43      	ldr	r3, [pc, #268]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a42      	ldr	r2, [pc, #264]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c88:	f7fd fb44 	bl	8004314 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c90:	f7fd fb40 	bl	8004314 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b64      	cmp	r3, #100	; 0x64
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e06d      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca2:	4b3a      	ldr	r3, [pc, #232]	; (8006d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cae:	4b36      	ldr	r3, [pc, #216]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d02e      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d027      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cd6:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cdc:	4b2c      	ldr	r3, [pc, #176]	; (8006d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ce2:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d014      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7fd fb0f 	bl	8004314 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf8:	e00a      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cfa:	f7fd fb0b 	bl	8004314 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e036      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d10:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0ee      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4917      	ldr	r1, [pc, #92]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d105      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d34:	4b14      	ldr	r3, [pc, #80]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	490b      	ldr	r1, [pc, #44]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0310 	and.w	r3, r3, #16
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4904      	ldr	r1, [pc, #16]	; (8006d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40007000 	.word	0x40007000
 8006d90:	42420440 	.word	0x42420440

08006d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e041      	b.n	8006e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d106      	bne.n	8006dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fc f888 	bl	8002ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	f000 fc94 	bl	8007700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b085      	sub	sp, #20
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d001      	beq.n	8006e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e03a      	b.n	8006ec2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a18      	ldr	r2, [pc, #96]	; (8006ecc <HAL_TIM_Base_Start_IT+0x98>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00e      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x58>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d009      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x58>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIM_Base_Start_IT+0x58>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d111      	bne.n	8006eb0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b06      	cmp	r3, #6
 8006e9c:	d010      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0201 	orr.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eae:	e007      	b.n	8006ec0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bc80      	pop	{r7}
 8006eca:	4770      	bx	lr
 8006ecc:	40012c00 	.word	0x40012c00
 8006ed0:	40000400 	.word	0x40000400
 8006ed4:	40000800 	.word	0x40000800

08006ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e041      	b.n	8006f6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f839 	bl	8006f76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f000 fbf2 	bl	8007700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_TIM_PWM_Start+0x24>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e022      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d109      	bne.n	8006fc6 <HAL_TIM_PWM_Start+0x3e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e015      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d109      	bne.n	8006fe0 <HAL_TIM_PWM_Start+0x58>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e008      	b.n	8006ff2 <HAL_TIM_PWM_Start+0x6a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e05e      	b.n	80070b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0x82>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007008:	e013      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0x92>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007018:	e00b      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007028:	e003      	b.n	8007032 <HAL_TIM_PWM_Start+0xaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fde0 	bl	8007c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1e      	ldr	r2, [pc, #120]	; (80070c0 <HAL_TIM_PWM_Start+0x138>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d107      	bne.n	800705a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <HAL_TIM_PWM_Start+0x138>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00e      	beq.n	8007082 <HAL_TIM_PWM_Start+0xfa>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d009      	beq.n	8007082 <HAL_TIM_PWM_Start+0xfa>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <HAL_TIM_PWM_Start+0x13c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d004      	beq.n	8007082 <HAL_TIM_PWM_Start+0xfa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <HAL_TIM_PWM_Start+0x140>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d111      	bne.n	80070a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b06      	cmp	r3, #6
 8007092:	d010      	beq.n	80070b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	e007      	b.n	80070b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40012c00 	.word	0x40012c00
 80070c4:	40000400 	.word	0x40000400
 80070c8:	40000800 	.word	0x40000800

080070cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2200      	movs	r2, #0
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fd8e 	bl	8007c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a29      	ldr	r2, [pc, #164]	; (8007190 <HAL_TIM_PWM_Stop+0xc4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d117      	bne.n	800711e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10f      	bne.n	800711e <HAL_TIM_PWM_Stop+0x52>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	f240 4344 	movw	r3, #1092	; 0x444
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <HAL_TIM_PWM_Stop+0x52>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800711c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a1a      	ldr	r2, [r3, #32]
 8007124:	f241 1311 	movw	r3, #4369	; 0x1111
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10f      	bne.n	800714e <HAL_TIM_PWM_Stop+0x82>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	f240 4344 	movw	r3, #1092	; 0x444
 8007138:	4013      	ands	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d107      	bne.n	800714e <HAL_TIM_PWM_Stop+0x82>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_TIM_PWM_Stop+0x92>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800715c:	e013      	b.n	8007186 <HAL_TIM_PWM_Stop+0xba>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d104      	bne.n	800716e <HAL_TIM_PWM_Stop+0xa2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800716c:	e00b      	b.n	8007186 <HAL_TIM_PWM_Stop+0xba>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d104      	bne.n	800717e <HAL_TIM_PWM_Stop+0xb2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800717c:	e003      	b.n	8007186 <HAL_TIM_PWM_Stop+0xba>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40012c00 	.word	0x40012c00

08007194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d122      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d11b      	bne.n	80071f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f06f 0202 	mvn.w	r2, #2
 80071c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa76 	bl	80076c8 <HAL_TIM_IC_CaptureCallback>
 80071dc:	e005      	b.n	80071ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa69 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa78 	bl	80076da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d122      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b04      	cmp	r3, #4
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0204 	mvn.w	r2, #4
 8007214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fa4c 	bl	80076c8 <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fa3f 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fa4e 	bl	80076da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b08      	cmp	r3, #8
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0208 	mvn.w	r2, #8
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2204      	movs	r2, #4
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fa22 	bl	80076c8 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fa15 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa24 	bl	80076da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0310 	and.w	r3, r3, #16
 80072b0:	2b10      	cmp	r3, #16
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0210 	mvn.w	r2, #16
 80072bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9f8 	bl	80076c8 <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9eb 	bl	80076b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f9fa 	bl	80076da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d10e      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0201 	mvn.w	r2, #1
 8007310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb f9bc 	bl	8002690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007322:	2b80      	cmp	r3, #128	; 0x80
 8007324:	d10e      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007330:	2b80      	cmp	r3, #128	; 0x80
 8007332:	d107      	bne.n	8007344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fce9 	bl	8007d16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d10e      	bne.n	8007370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735c:	2b40      	cmp	r3, #64	; 0x40
 800735e:	d107      	bne.n	8007370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9be 	bl	80076ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b20      	cmp	r3, #32
 800737c:	d10e      	bne.n	800739c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b20      	cmp	r3, #32
 800738a:	d107      	bne.n	800739c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f06f 0220 	mvn.w	r2, #32
 8007394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fcb4 	bl	8007d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073be:	2302      	movs	r3, #2
 80073c0:	e0ae      	b.n	8007520 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	f200 809f 	bhi.w	8007510 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073d2:	a201      	add	r2, pc, #4	; (adr r2, 80073d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d8:	0800740d 	.word	0x0800740d
 80073dc:	08007511 	.word	0x08007511
 80073e0:	08007511 	.word	0x08007511
 80073e4:	08007511 	.word	0x08007511
 80073e8:	0800744d 	.word	0x0800744d
 80073ec:	08007511 	.word	0x08007511
 80073f0:	08007511 	.word	0x08007511
 80073f4:	08007511 	.word	0x08007511
 80073f8:	0800748f 	.word	0x0800748f
 80073fc:	08007511 	.word	0x08007511
 8007400:	08007511 	.word	0x08007511
 8007404:	08007511 	.word	0x08007511
 8007408:	080074cf 	.word	0x080074cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68b9      	ldr	r1, [r7, #8]
 8007412:	4618      	mov	r0, r3
 8007414:	f000 f9d6 	bl	80077c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0204 	bic.w	r2, r2, #4
 8007436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6999      	ldr	r1, [r3, #24]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	691a      	ldr	r2, [r3, #16]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	619a      	str	r2, [r3, #24]
      break;
 800744a:	e064      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fa1c 	bl	8007890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6999      	ldr	r1, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	021a      	lsls	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	619a      	str	r2, [r3, #24]
      break;
 800748c:	e043      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fa65 	bl	8007964 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	69da      	ldr	r2, [r3, #28]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0208 	orr.w	r2, r2, #8
 80074a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69da      	ldr	r2, [r3, #28]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0204 	bic.w	r2, r2, #4
 80074b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69d9      	ldr	r1, [r3, #28]
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	61da      	str	r2, [r3, #28]
      break;
 80074cc:	e023      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 faaf 	bl	8007a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69da      	ldr	r2, [r3, #28]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	69d9      	ldr	r1, [r3, #28]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	021a      	lsls	r2, r3, #8
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	61da      	str	r2, [r3, #28]
      break;
 800750e:	e002      	b.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]
      break;
 8007514:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_TIM_ConfigClockSource+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0b4      	b.n	80076ae <HAL_TIM_ConfigClockSource+0x186>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800756a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757c:	d03e      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xd4>
 800757e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007582:	f200 8087 	bhi.w	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800758a:	f000 8086 	beq.w	800769a <HAL_TIM_ConfigClockSource+0x172>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007592:	d87f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 8007594:	2b70      	cmp	r3, #112	; 0x70
 8007596:	d01a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0xa6>
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d87b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b60      	cmp	r3, #96	; 0x60
 800759e:	d050      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x11a>
 80075a0:	2b60      	cmp	r3, #96	; 0x60
 80075a2:	d877      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b50      	cmp	r3, #80	; 0x50
 80075a6:	d03c      	beq.n	8007622 <HAL_TIM_ConfigClockSource+0xfa>
 80075a8:	2b50      	cmp	r3, #80	; 0x50
 80075aa:	d873      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b40      	cmp	r3, #64	; 0x40
 80075ae:	d058      	beq.n	8007662 <HAL_TIM_ConfigClockSource+0x13a>
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d86f      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b30      	cmp	r3, #48	; 0x30
 80075b6:	d064      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075b8:	2b30      	cmp	r3, #48	; 0x30
 80075ba:	d86b      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b20      	cmp	r3, #32
 80075be:	d060      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	d867      	bhi.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d05c      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d05a      	beq.n	8007682 <HAL_TIM_ConfigClockSource+0x15a>
 80075cc:	e062      	b.n	8007694 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075de:	f000 faf0 	bl	8007bc2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e04f      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800760c:	f000 fad9 	bl	8007bc2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689a      	ldr	r2, [r3, #8]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800761e:	609a      	str	r2, [r3, #8]
      break;
 8007620:	e03c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800762e:	461a      	mov	r2, r3
 8007630:	f000 fa50 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2150      	movs	r1, #80	; 0x50
 800763a:	4618      	mov	r0, r3
 800763c:	f000 faa7 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007640:	e02c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800764e:	461a      	mov	r2, r3
 8007650:	f000 fa6e 	bl	8007b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2160      	movs	r1, #96	; 0x60
 800765a:	4618      	mov	r0, r3
 800765c:	f000 fa97 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007660:	e01c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800766e:	461a      	mov	r2, r3
 8007670:	f000 fa30 	bl	8007ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2140      	movs	r1, #64	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fa87 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007680:	e00c      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	4610      	mov	r0, r2
 800768e:	f000 fa7e 	bl	8007b8e <TIM_ITRx_SetConfig>
      break;
 8007692:	e003      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e000      	b.n	800769c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800769a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr

080076da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
	...

08007700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a29      	ldr	r2, [pc, #164]	; (80077b8 <TIM_Base_SetConfig+0xb8>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x30>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x30>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a26      	ldr	r2, [pc, #152]	; (80077bc <TIM_Base_SetConfig+0xbc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x30>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a25      	ldr	r2, [pc, #148]	; (80077c0 <TIM_Base_SetConfig+0xc0>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a1c      	ldr	r2, [pc, #112]	; (80077b8 <TIM_Base_SetConfig+0xb8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00b      	beq.n	8007762 <TIM_Base_SetConfig+0x62>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007750:	d007      	beq.n	8007762 <TIM_Base_SetConfig+0x62>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a19      	ldr	r2, [pc, #100]	; (80077bc <TIM_Base_SetConfig+0xbc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_Base_SetConfig+0x62>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <TIM_Base_SetConfig+0xc0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d108      	bne.n	8007774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	4313      	orrs	r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a07      	ldr	r2, [pc, #28]	; (80077b8 <TIM_Base_SetConfig+0xb8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d103      	bne.n	80077a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	615a      	str	r2, [r3, #20]
}
 80077ae:	bf00      	nop
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40000400 	.word	0x40000400
 80077c0:	40000800 	.word	0x40000800

080077c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	f023 0201 	bic.w	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 0302 	bic.w	r3, r3, #2
 800780c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <TIM_OC1_SetConfig+0xc8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10c      	bne.n	800783a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0308 	bic.w	r3, r3, #8
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	4313      	orrs	r3, r2
 8007830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 0304 	bic.w	r3, r3, #4
 8007838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a13      	ldr	r2, [pc, #76]	; (800788c <TIM_OC1_SetConfig+0xc8>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d111      	bne.n	8007866 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	371c      	adds	r7, #28
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40012c00 	.word	0x40012c00

08007890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	f023 0210 	bic.w	r2, r3, #16
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0320 	bic.w	r3, r3, #32
 80078da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a1d      	ldr	r2, [pc, #116]	; (8007960 <TIM_OC2_SetConfig+0xd0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10d      	bne.n	800790c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800790a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a14      	ldr	r2, [pc, #80]	; (8007960 <TIM_OC2_SetConfig+0xd0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d113      	bne.n	800793c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800791a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4313      	orrs	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	621a      	str	r2, [r3, #32]
}
 8007956:	bf00      	nop
 8007958:	371c      	adds	r7, #28
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	40012c00 	.word	0x40012c00

08007964 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <TIM_OC3_SetConfig+0xd0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d10d      	bne.n	80079de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a14      	ldr	r2, [pc, #80]	; (8007a34 <TIM_OC3_SetConfig+0xd0>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d113      	bne.n	8007a0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	621a      	str	r2, [r3, #32]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00

08007a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	021b      	lsls	r3, r3, #8
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	031b      	lsls	r3, r3, #12
 8007a8a:	693a      	ldr	r2, [r7, #16]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <TIM_OC4_SetConfig+0x98>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d109      	bne.n	8007aac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	019b      	lsls	r3, r3, #6
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr
 8007ad0:	40012c00 	.word	0x40012c00

08007ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
 8007ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f023 0201 	bic.w	r2, r3, #1
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f023 030a 	bic.w	r3, r3, #10
 8007b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f023 0210 	bic.w	r2, r3, #16
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	031b      	lsls	r3, r3, #12
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bc80      	pop	{r7}
 8007b8c:	4770      	bx	lr

08007b8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f043 0307 	orr.w	r3, r3, #7
 8007bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b087      	sub	sp, #28
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	60b9      	str	r1, [r7, #8]
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	021a      	lsls	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	431a      	orrs	r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	609a      	str	r2, [r3, #8]
}
 8007bf6:	bf00      	nop
 8007bf8:	371c      	adds	r7, #28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr

08007c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 031f 	and.w	r3, r3, #31
 8007c12:	2201      	movs	r2, #1
 8007c14:	fa02 f303 	lsl.w	r3, r2, r3
 8007c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1a      	ldr	r2, [r3, #32]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	43db      	mvns	r3, r3
 8007c22:	401a      	ands	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	fa01 f303 	lsl.w	r3, r1, r3
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	621a      	str	r2, [r3, #32]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bc80      	pop	{r7}
 8007c46:	4770      	bx	lr

08007c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e046      	b.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a16      	ldr	r2, [pc, #88]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00e      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a12      	ldr	r2, [pc, #72]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10c      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40000400 	.word	0x40000400
 8007d00:	40000800 	.word	0x40000800

08007d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bc80      	pop	{r7}
 8007d26:	4770      	bx	lr

08007d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e042      	b.n	8007dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d106      	bne.n	8007d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7fb f960 	bl	8003014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2224      	movs	r2, #36	; 0x24
 8007d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f001 f941 	bl	8008ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	695a      	ldr	r2, [r3, #20]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e024      	b.n	8007e24 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2224      	movs	r2, #36	; 0x24
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007df0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fb f9f2 	bl	80031dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b20      	cmp	r3, #32
 8007e4a:	d16d      	bne.n	8007f28 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <HAL_UART_Transmit+0x2c>
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e066      	b.n	8007f2a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2221      	movs	r2, #33	; 0x21
 8007e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e6a:	f7fc fa53 	bl	8004314 <HAL_GetTick>
 8007e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	88fa      	ldrh	r2, [r7, #6]
 8007e7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e84:	d108      	bne.n	8007e98 <HAL_UART_Transmit+0x6c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d104      	bne.n	8007e98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
 8007e96:	e003      	b.n	8007ea0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ea0:	e02a      	b.n	8007ef8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2180      	movs	r1, #128	; 0x80
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f000 fd77 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e036      	b.n	8007f2a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10b      	bne.n	8007eda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ed0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	e007      	b.n	8007eea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	781a      	ldrb	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1cf      	bne.n	8007ea2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2140      	movs	r1, #64	; 0x40
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fd47 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	e006      	b.n	8007f2a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2220      	movs	r2, #32
 8007f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e000      	b.n	8007f2a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
  }
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3720      	adds	r7, #32
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b085      	sub	sp, #20
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b20      	cmp	r3, #32
 8007f4a:	d121      	bne.n	8007f90 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <HAL_UART_Transmit_IT+0x26>
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e01a      	b.n	8007f92 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	88fa      	ldrh	r2, [r7, #6]
 8007f6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2221      	movs	r2, #33	; 0x21
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d112      	bne.n	8007fdc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <HAL_UART_Receive_DMA+0x26>
 8007fbc:	88fb      	ldrh	r3, [r7, #6]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e00b      	b.n	8007fde <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fd52 	bl	8008a7c <UART_Start_Receive_DMA>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	e000      	b.n	8007fde <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
  }
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b0a2      	sub	sp, #136	; 0x88
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	330c      	adds	r3, #12
 8007ffc:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008008:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800800c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800801a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800801c:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e3      	bne.n	8007ff6 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008038:	e853 3f00 	ldrex	r3, [r3]
 800803c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800803e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3314      	adds	r3, #20
 800804c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800804e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008050:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008054:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800805c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e5      	bne.n	800802e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	2b01      	cmp	r3, #1
 8008068:	d119      	bne.n	800809e <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807c:	f023 0310 	bic.w	r3, r3, #16
 8008080:	67bb      	str	r3, [r7, #120]	; 0x78
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800808a:	647a      	str	r2, [r7, #68]	; 0x44
 800808c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e5      	bne.n	800806a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d004      	beq.n	80080be <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	4a53      	ldr	r2, [pc, #332]	; (8008208 <HAL_UART_Abort_IT+0x220>)
 80080ba:	635a      	str	r2, [r3, #52]	; 0x34
 80080bc:	e003      	b.n	80080c6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	2200      	movs	r2, #0
 80080c4:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00f      	beq.n	80080ee <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d004      	beq.n	80080e6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	4a4a      	ldr	r2, [pc, #296]	; (800820c <HAL_UART_Abort_IT+0x224>)
 80080e2:	635a      	str	r2, [r3, #52]	; 0x34
 80080e4:	e003      	b.n	80080ee <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ea:	2200      	movs	r2, #0
 80080ec:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d02d      	beq.n	8008158 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	623b      	str	r3, [r7, #32]
   return(result);
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008112:	677b      	str	r3, [r7, #116]	; 0x74
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3314      	adds	r3, #20
 800811a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800811c:	633a      	str	r2, [r7, #48]	; 0x30
 800811e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008122:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00f      	beq.n	8008158 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813c:	4618      	mov	r0, r3
 800813e:	f7fc ff3d 	bl	8004fbc <HAL_DMA_Abort_IT>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	2200      	movs	r2, #0
 800814e:	635a      	str	r2, [r3, #52]	; 0x34
 8008150:	e002      	b.n	8008158 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8008152:	2300      	movs	r3, #0
 8008154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d030      	beq.n	80081c8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3314      	adds	r3, #20
 800816c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60fb      	str	r3, [r7, #12]
   return(result);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817c:	673b      	str	r3, [r7, #112]	; 0x70
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008186:	61fa      	str	r2, [r7, #28]
 8008188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	617b      	str	r3, [r7, #20]
   return(result);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d012      	beq.n	80081c8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fc ff08 	bl	8004fbc <HAL_DMA_Abort_IT>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b6:	2200      	movs	r2, #0
 80081b8:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80081c0:	e002      	b.n	80081c8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80081c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d116      	bne.n	80081fe <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fabf 	bl	800877c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3788      	adds	r7, #136	; 0x88
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	08008ceb 	.word	0x08008ceb
 800820c:	08008d4b 	.word	0x08008d4b

08008210 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b0ba      	sub	sp, #232	; 0xe8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008236:	2300      	movs	r3, #0
 8008238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800823c:	2300      	movs	r3, #0
 800823e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008246:	f003 030f 	and.w	r3, r3, #15
 800824a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800824e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10f      	bne.n	8008276 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_UART_IRQHandler+0x66>
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fe02 	bl	8008e78 <UART_Receive_IT>
      return;
 8008274:	e25b      	b.n	800872e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008276:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80de 	beq.w	800843c <HAL_UART_IRQHandler+0x22c>
 8008280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800828c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008290:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 80d1 	beq.w	800843c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800829a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829e:	f003 0301 	and.w	r3, r3, #1
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00b      	beq.n	80082be <HAL_UART_IRQHandler+0xae>
 80082a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b6:	f043 0201 	orr.w	r2, r3, #1
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <HAL_UART_IRQHandler+0xd2>
 80082ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d005      	beq.n	80082e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082da:	f043 0202 	orr.w	r2, r3, #2
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <HAL_UART_IRQHandler+0xf6>
 80082ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d005      	beq.n	8008306 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	f043 0204 	orr.w	r2, r3, #4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b00      	cmp	r3, #0
 8008310:	d011      	beq.n	8008336 <HAL_UART_IRQHandler+0x126>
 8008312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800831e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	f043 0208 	orr.w	r2, r3, #8
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833a:	2b00      	cmp	r3, #0
 800833c:	f000 81f2 	beq.w	8008724 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d008      	beq.n	800835e <HAL_UART_IRQHandler+0x14e>
 800834c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fd8d 	bl	8008e78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008368:	2b00      	cmp	r3, #0
 800836a:	bf14      	ite	ne
 800836c:	2301      	movne	r3, #1
 800836e:	2300      	moveq	r3, #0
 8008370:	b2db      	uxtb	r3, r3
 8008372:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d103      	bne.n	800838a <HAL_UART_IRQHandler+0x17a>
 8008382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008386:	2b00      	cmp	r3, #0
 8008388:	d04f      	beq.n	800842a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fc37 	bl	8008bfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d041      	beq.n	8008422 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80083b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80083b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3314      	adds	r3, #20
 80083c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1d9      	bne.n	800839e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d013      	beq.n	800841a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f6:	4a7e      	ldr	r2, [pc, #504]	; (80085f0 <HAL_UART_IRQHandler+0x3e0>)
 80083f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fc fddc 	bl	8004fbc <HAL_DMA_Abort_IT>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d016      	beq.n	8008438 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008418:	e00e      	b.n	8008438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 f9a5 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008420:	e00a      	b.n	8008438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9a1 	bl	800876a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008428:	e006      	b.n	8008438 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f99d 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8008436:	e175      	b.n	8008724 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008438:	bf00      	nop
    return;
 800843a:	e173      	b.n	8008724 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008440:	2b01      	cmp	r3, #1
 8008442:	f040 814f 	bne.w	80086e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 8148 	beq.w	80086e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8141 	beq.w	80086e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008462:	2300      	movs	r3, #0
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	60bb      	str	r3, [r7, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	60bb      	str	r3, [r7, #8]
 8008476:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 80b6 	beq.w	80085f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008494:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8145 	beq.w	8008728 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084a6:	429a      	cmp	r2, r3
 80084a8:	f080 813e 	bcs.w	8008728 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	f000 8088 	beq.w	80085d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	330c      	adds	r3, #12
 80084e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80084ec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80084f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1d9      	bne.n	80084c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3314      	adds	r3, #20
 8008512:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800851c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3314      	adds	r3, #20
 800852c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008530:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008534:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008538:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e1      	bne.n	800850c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3314      	adds	r3, #20
 800854e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008552:	e853 3f00 	ldrex	r3, [r3]
 8008556:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800855a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3314      	adds	r3, #20
 8008568:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800856c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800856e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008572:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800857a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e3      	bne.n	8008548 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2220      	movs	r2, #32
 8008584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	330c      	adds	r3, #12
 8008594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800859e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085a0:	f023 0310 	bic.w	r3, r3, #16
 80085a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	330c      	adds	r3, #12
 80085ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80085b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e3      	bne.n	800858e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fcba 	bl	8004f44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085de:	b29b      	uxth	r3, r3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 f8d1 	bl	800878e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085ec:	e09c      	b.n	8008728 <HAL_UART_IRQHandler+0x518>
 80085ee:	bf00      	nop
 80085f0:	08008cc3 	.word	0x08008cc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 808e 	beq.w	800872c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8089 	beq.w	800872c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	330c      	adds	r3, #12
 8008620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008630:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	330c      	adds	r3, #12
 800863a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800863e:	647a      	str	r2, [r7, #68]	; 0x44
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008644:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800864c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e3      	bne.n	800861a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3314      	adds	r3, #20
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	623b      	str	r3, [r7, #32]
   return(result);
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3314      	adds	r3, #20
 8008672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008676:	633a      	str	r2, [r7, #48]	; 0x30
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800867c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e3      	bne.n	8008652 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	330c      	adds	r3, #12
 800869e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0310 	bic.w	r3, r3, #16
 80086ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	330c      	adds	r3, #12
 80086b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80086bc:	61fa      	str	r2, [r7, #28]
 80086be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	69b9      	ldr	r1, [r7, #24]
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	617b      	str	r3, [r7, #20]
   return(result);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e3      	bne.n	8008698 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f856 	bl	800878e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80086e2:	e023      	b.n	800872c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80086e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d009      	beq.n	8008704 <HAL_UART_IRQHandler+0x4f4>
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fb54 	bl	8008daa <UART_Transmit_IT>
    return;
 8008702:	e014      	b.n	800872e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00e      	beq.n	800872e <HAL_UART_IRQHandler+0x51e>
 8008710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fb93 	bl	8008e48 <UART_EndTransmit_IT>
    return;
 8008722:	e004      	b.n	800872e <HAL_UART_IRQHandler+0x51e>
    return;
 8008724:	bf00      	nop
 8008726:	e002      	b.n	800872e <HAL_UART_IRQHandler+0x51e>
      return;
 8008728:	bf00      	nop
 800872a:	e000      	b.n	800872e <HAL_UART_IRQHandler+0x51e>
      return;
 800872c:	bf00      	nop
  }
}
 800872e:	37e8      	adds	r7, #232	; 0xe8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr

08008746 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	bc80      	pop	{r7}
 8008768:	4770      	bx	lr

0800876a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	bc80      	pop	{r7}
 800877a:	4770      	bx	lr

0800877c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	460b      	mov	r3, r1
 8008798:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	bc80      	pop	{r7}
 80087a2:	4770      	bx	lr

080087a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b09c      	sub	sp, #112	; 0x70
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d172      	bne.n	80088a6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80087c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c2:	2200      	movs	r2, #0
 80087c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	330c      	adds	r3, #12
 80087cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80087de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	330c      	adds	r3, #12
 80087e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087e6:	65ba      	str	r2, [r7, #88]	; 0x58
 80087e8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e5      	bne.n	80087c6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3314      	adds	r3, #20
 8008800:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	667b      	str	r3, [r7, #100]	; 0x64
 8008812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3314      	adds	r3, #20
 8008818:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800881a:	647a      	str	r2, [r7, #68]	; 0x44
 800881c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e5      	bne.n	80087fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3314      	adds	r3, #20
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	623b      	str	r3, [r7, #32]
   return(result);
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008844:	663b      	str	r3, [r7, #96]	; 0x60
 8008846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	3314      	adds	r3, #20
 800884c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800884e:	633a      	str	r2, [r7, #48]	; 0x30
 8008850:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e5      	bne.n	800882e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008864:	2220      	movs	r2, #32
 8008866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	2b01      	cmp	r3, #1
 8008870:	d119      	bne.n	80088a6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	330c      	adds	r3, #12
 8008878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	60fb      	str	r3, [r7, #12]
   return(result);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f023 0310 	bic.w	r3, r3, #16
 8008888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800888a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	330c      	adds	r3, #12
 8008890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008892:	61fa      	str	r2, [r7, #28]
 8008894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	69b9      	ldr	r1, [r7, #24]
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	617b      	str	r3, [r7, #20]
   return(result);
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e5      	bne.n	8008872 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088a8:	2200      	movs	r2, #0
 80088aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d106      	bne.n	80088c2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088b8:	4619      	mov	r1, r3
 80088ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088bc:	f7ff ff67 	bl	800878e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088c0:	e002      	b.n	80088c8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80088c2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80088c4:	f7ff ff3f 	bl	8008746 <HAL_UART_RxCpltCallback>
}
 80088c8:	bf00      	nop
 80088ca:	3770      	adds	r7, #112	; 0x70
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2201      	movs	r2, #1
 80088e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d108      	bne.n	80088fe <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088f0:	085b      	lsrs	r3, r3, #1
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	4619      	mov	r1, r3
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff ff49 	bl	800878e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088fc:	e002      	b.n	8008904 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff ff2a 	bl	8008758 <HAL_UART_RxHalfCpltCallback>
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf14      	ite	ne
 800892c:	2301      	movne	r3, #1
 800892e:	2300      	moveq	r3, #0
 8008930:	b2db      	uxtb	r3, r3
 8008932:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b21      	cmp	r3, #33	; 0x21
 800893e:	d108      	bne.n	8008952 <UART_DMAError+0x46>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	f000 f92f 	bl	8008bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	bf14      	ite	ne
 8008960:	2301      	movne	r3, #1
 8008962:	2300      	moveq	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b22      	cmp	r3, #34	; 0x22
 8008972:	d108      	bne.n	8008986 <UART_DMAError+0x7a>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d005      	beq.n	8008986 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	2200      	movs	r2, #0
 800897e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f000 f93c 	bl	8008bfe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898a:	f043 0210 	orr.w	r2, r3, #16
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008992:	68b8      	ldr	r0, [r7, #8]
 8008994:	f7ff fee9 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b090      	sub	sp, #64	; 0x40
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e050      	b.n	8008a54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d04c      	beq.n	8008a54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089c0:	f7fb fca8 	bl	8004314 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d241      	bcs.n	8008a54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	330c      	adds	r3, #12
 80089d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089f0:	637a      	str	r2, [r7, #52]	; 0x34
 80089f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e5      	bne.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3314      	adds	r3, #20
 8008a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	613b      	str	r3, [r7, #16]
   return(result);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f023 0301 	bic.w	r3, r3, #1
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3314      	adds	r3, #20
 8008a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a24:	623a      	str	r2, [r7, #32]
 8008a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	69f9      	ldr	r1, [r7, #28]
 8008a2a:	6a3a      	ldr	r2, [r7, #32]
 8008a2c:	e841 2300 	strex	r3, r2, [r1]
 8008a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e5      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2220      	movs	r2, #32
 8008a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e00f      	b.n	8008a74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bf0c      	ite	eq
 8008a64:	2301      	moveq	r3, #1
 8008a66:	2300      	movne	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d09f      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a72:	2300      	movs	r3, #0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3740      	adds	r7, #64	; 0x40
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b098      	sub	sp, #96	; 0x60
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	4613      	mov	r3, r2
 8008a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	88fa      	ldrh	r2, [r7, #6]
 8008a94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2222      	movs	r2, #34	; 0x22
 8008aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa8:	4a3e      	ldr	r2, [pc, #248]	; (8008ba4 <UART_Start_Receive_DMA+0x128>)
 8008aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	4a3d      	ldr	r2, [pc, #244]	; (8008ba8 <UART_Start_Receive_DMA+0x12c>)
 8008ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab8:	4a3c      	ldr	r2, [pc, #240]	; (8008bac <UART_Start_Receive_DMA+0x130>)
 8008aba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ac4:	f107 0308 	add.w	r3, r7, #8
 8008ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	88fb      	ldrh	r3, [r7, #6]
 8008adc:	f7fc f9d2 	bl	8004e84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	613b      	str	r3, [r7, #16]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d019      	beq.n	8008b32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	330c      	adds	r3, #12
 8008b04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b08:	e853 3f00 	ldrex	r3, [r3]
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b20:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b22:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b26:	e841 2300 	strex	r3, r2, [r1]
 8008b2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1e5      	bne.n	8008afe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	3314      	adds	r3, #20
 8008b38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	e853 3f00 	ldrex	r3, [r3]
 8008b40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	f043 0301 	orr.w	r3, r3, #1
 8008b48:	657b      	str	r3, [r7, #84]	; 0x54
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3314      	adds	r3, #20
 8008b50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b52:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e5      	bne.n	8008b32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	617b      	str	r3, [r7, #20]
   return(result);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b7c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3314      	adds	r3, #20
 8008b84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b86:	627a      	str	r2, [r7, #36]	; 0x24
 8008b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6a39      	ldr	r1, [r7, #32]
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e5      	bne.n	8008b66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3760      	adds	r7, #96	; 0x60
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	080087a5 	.word	0x080087a5
 8008ba8:	080088d1 	.word	0x080088d1
 8008bac:	0800890d 	.word	0x0800890d

08008bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	330c      	adds	r3, #12
 8008bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	61ba      	str	r2, [r7, #24]
 8008bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6979      	ldr	r1, [r7, #20]
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	613b      	str	r3, [r7, #16]
   return(result);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e5      	bne.n	8008bb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2220      	movs	r2, #32
 8008bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008bf4:	bf00      	nop
 8008bf6:	3724      	adds	r7, #36	; 0x24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b095      	sub	sp, #84	; 0x54
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	330c      	adds	r3, #12
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	330c      	adds	r3, #12
 8008c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c26:	643a      	str	r2, [r7, #64]	; 0x40
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e5      	bne.n	8008c06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3314      	adds	r3, #20
 8008c40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3314      	adds	r3, #20
 8008c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e5      	bne.n	8008c3a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d119      	bne.n	8008caa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f023 0310 	bic.w	r3, r3, #16
 8008c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	330c      	adds	r3, #12
 8008c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c96:	61ba      	str	r2, [r7, #24]
 8008c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6979      	ldr	r1, [r7, #20]
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e5      	bne.n	8008c76 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cb8:	bf00      	nop
 8008cba:	3754      	adds	r7, #84	; 0x54
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bc80      	pop	{r7}
 8008cc0:	4770      	bx	lr

08008cc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff fd44 	bl	800876a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d117      	bne.n	8008d42 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7ff fd1e 	bl	800877c <HAL_UART_AbortCpltCallback>
 8008d40:	e000      	b.n	8008d44 <UART_DMATxAbortCallback+0x5a>
      return;
 8008d42:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b084      	sub	sp, #16
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d117      	bne.n	8008da2 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fcee 	bl	800877c <HAL_UART_AbortCpltCallback>
 8008da0:	e000      	b.n	8008da4 <UART_DMARxAbortCallback+0x5a>
      return;
 8008da2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008daa:	b480      	push	{r7}
 8008dac:	b085      	sub	sp, #20
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b21      	cmp	r3, #33	; 0x21
 8008dbc:	d13e      	bne.n	8008e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc6:	d114      	bne.n	8008df2 <UART_Transmit_IT+0x48>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d110      	bne.n	8008df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	1c9a      	adds	r2, r3, #2
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	621a      	str	r2, [r3, #32]
 8008df0:	e008      	b.n	8008e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	1c59      	adds	r1, r3, #1
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6211      	str	r1, [r2, #32]
 8008dfc:	781a      	ldrb	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4619      	mov	r1, r3
 8008e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10f      	bne.n	8008e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68da      	ldr	r2, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e000      	b.n	8008e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e3c:	2302      	movs	r3, #2
  }
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc80      	pop	{r7}
 8008e46:	4770      	bx	lr

08008e48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2220      	movs	r2, #32
 8008e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fc63 	bl	8008734 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	; 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b22      	cmp	r3, #34	; 0x22
 8008e8a:	f040 80ae 	bne.w	8008fea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e96:	d117      	bne.n	8008ec8 <UART_Receive_IT+0x50>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d113      	bne.n	8008ec8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	1c9a      	adds	r2, r3, #2
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8008ec6:	e026      	b.n	8008f16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eda:	d007      	beq.n	8008eec <UART_Receive_IT+0x74>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <UART_Receive_IT+0x82>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d106      	bne.n	8008efa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	701a      	strb	r2, [r3, #0]
 8008ef8:	e008      	b.n	8008f0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	b2da      	uxtb	r2, r3
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4619      	mov	r1, r3
 8008f24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d15d      	bne.n	8008fe6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f022 0220 	bic.w	r2, r2, #32
 8008f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0201 	bic.w	r2, r2, #1
 8008f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d135      	bne.n	8008fdc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	330c      	adds	r3, #12
 8008f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	613b      	str	r3, [r7, #16]
   return(result);
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	f023 0310 	bic.w	r3, r3, #16
 8008f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	330c      	adds	r3, #12
 8008f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f96:	623a      	str	r2, [r7, #32]
 8008f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	69f9      	ldr	r1, [r7, #28]
 8008f9c:	6a3a      	ldr	r2, [r7, #32]
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0310 	and.w	r3, r3, #16
 8008fb4:	2b10      	cmp	r3, #16
 8008fb6:	d10a      	bne.n	8008fce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fbda 	bl	800878e <HAL_UARTEx_RxEventCallback>
 8008fda:	e002      	b.n	8008fe2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fbb2 	bl	8008746 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e002      	b.n	8008fec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	e000      	b.n	8008fec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008fea:	2302      	movs	r3, #2
  }
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3730      	adds	r7, #48	; 0x30
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68da      	ldr	r2, [r3, #12]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	431a      	orrs	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	695b      	ldr	r3, [r3, #20]
 8009020:	4313      	orrs	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800902e:	f023 030c 	bic.w	r3, r3, #12
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	68b9      	ldr	r1, [r7, #8]
 8009038:	430b      	orrs	r3, r1
 800903a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a2c      	ldr	r2, [pc, #176]	; (8009108 <UART_SetConfig+0x114>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d103      	bne.n	8009064 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800905c:	f7fd fd82 	bl	8006b64 <HAL_RCC_GetPCLK2Freq>
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	e002      	b.n	800906a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009064:	f7fd fd6a 	bl	8006b3c <HAL_RCC_GetPCLK1Freq>
 8009068:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009a      	lsls	r2, r3, #2
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009080:	4a22      	ldr	r2, [pc, #136]	; (800910c <UART_SetConfig+0x118>)
 8009082:	fba2 2303 	umull	r2, r3, r2, r3
 8009086:	095b      	lsrs	r3, r3, #5
 8009088:	0119      	lsls	r1, r3, #4
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	4613      	mov	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4413      	add	r3, r2
 8009092:	009a      	lsls	r2, r3, #2
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	fbb2 f2f3 	udiv	r2, r2, r3
 80090a0:	4b1a      	ldr	r3, [pc, #104]	; (800910c <UART_SetConfig+0x118>)
 80090a2:	fba3 0302 	umull	r0, r3, r3, r2
 80090a6:	095b      	lsrs	r3, r3, #5
 80090a8:	2064      	movs	r0, #100	; 0x64
 80090aa:	fb00 f303 	mul.w	r3, r0, r3
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	011b      	lsls	r3, r3, #4
 80090b2:	3332      	adds	r3, #50	; 0x32
 80090b4:	4a15      	ldr	r2, [pc, #84]	; (800910c <UART_SetConfig+0x118>)
 80090b6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090c0:	4419      	add	r1, r3
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009a      	lsls	r2, r3, #2
 80090cc:	441a      	add	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <UART_SetConfig+0x118>)
 80090da:	fba3 0302 	umull	r0, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	2064      	movs	r0, #100	; 0x64
 80090e2:	fb00 f303 	mul.w	r3, r0, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	011b      	lsls	r3, r3, #4
 80090ea:	3332      	adds	r3, #50	; 0x32
 80090ec:	4a07      	ldr	r2, [pc, #28]	; (800910c <UART_SetConfig+0x118>)
 80090ee:	fba2 2303 	umull	r2, r3, r2, r3
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f003 020f 	and.w	r2, r3, #15
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	440a      	add	r2, r1
 80090fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	40013800 	.word	0x40013800
 800910c:	51eb851f 	.word	0x51eb851f

08009110 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800911e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009122:	2b84      	cmp	r3, #132	; 0x84
 8009124:	d005      	beq.n	8009132 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009126:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4413      	add	r3, r2
 800912e:	3303      	adds	r3, #3
 8009130:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009132:	68fb      	ldr	r3, [r7, #12]
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr

0800913e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009144:	f3ef 8305 	mrs	r3, IPSR
 8009148:	607b      	str	r3, [r7, #4]
  return(result);
 800914a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800914c:	2b00      	cmp	r3, #0
 800914e:	bf14      	ite	ne
 8009150:	2301      	movne	r3, #1
 8009152:	2300      	moveq	r3, #0
 8009154:	b2db      	uxtb	r3, r3
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009164:	f001 fc24 	bl	800a9b0 <vTaskStartScheduler>
  
  return osOK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	bd80      	pop	{r7, pc}

0800916e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800916e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009170:	b089      	sub	sp, #36	; 0x24
 8009172:	af04      	add	r7, sp, #16
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d020      	beq.n	80091c2 <osThreadCreate+0x54>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01c      	beq.n	80091c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685c      	ldr	r4, [r3, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	691e      	ldr	r6, [r3, #16]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff ffb8 	bl	8009110 <makeFreeRtosPriority>
 80091a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091aa:	9202      	str	r2, [sp, #8]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	9100      	str	r1, [sp, #0]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	4632      	mov	r2, r6
 80091b4:	4629      	mov	r1, r5
 80091b6:	4620      	mov	r0, r4
 80091b8:	f001 f80a 	bl	800a1d0 <xTaskCreateStatic>
 80091bc:	4603      	mov	r3, r0
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	e01c      	b.n	80091fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685c      	ldr	r4, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7ff ff9a 	bl	8009110 <makeFreeRtosPriority>
 80091dc:	4602      	mov	r2, r0
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	9200      	str	r2, [sp, #0]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	4632      	mov	r2, r6
 80091ea:	4629      	mov	r1, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	f001 f84b 	bl	800a288 <xTaskCreate>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d001      	beq.n	80091fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091fc:	68fb      	ldr	r3, [r7, #12]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009206 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <osDelay+0x16>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	e000      	b.n	800921e <osDelay+0x18>
 800921c:	2301      	movs	r3, #1
 800921e:	4618      	mov	r0, r3
 8009220:	f001 f9f6 	bl	800a610 <vTaskDelay>
  
  return osOK;
 8009224:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
	...

08009230 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af02      	add	r7, sp, #8
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800923a:	2300      	movs	r3, #0
 800923c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009242:	f7ff ff7c 	bl	800913e <inHandlerMode>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d01c      	beq.n	8009286 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	f107 0208 	add.w	r2, r7, #8
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	2201      	movs	r2, #1
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f002 f97f 	bl	800b560 <xTaskGenericNotifyFromISR>
 8009262:	4603      	mov	r3, r0
 8009264:	2b01      	cmp	r3, #1
 8009266:	d002      	beq.n	800926e <osSignalSet+0x3e>
      return 0x80000000;
 8009268:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800926c:	e019      	b.n	80092a2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d015      	beq.n	80092a0 <osSignalSet+0x70>
 8009274:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <osSignalSet+0x7c>)
 8009276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	e00c      	b.n	80092a0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	f107 0308 	add.w	r3, r7, #8
 800928c:	2201      	movs	r2, #1
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f002 f8bc 	bl	800b40c <xTaskGenericNotify>
 8009294:	4603      	mov	r3, r0
 8009296:	2b01      	cmp	r3, #1
 8009298:	d002      	beq.n	80092a0 <osSignalSet+0x70>
    return 0x80000000;
 800929a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800929e:	e000      	b.n	80092a2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 80092a0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b089      	sub	sp, #36	; 0x24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ca:	d103      	bne.n	80092d4 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e009      	b.n	80092e8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <osSignalWait+0x38>
      ticks = 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80092e8:	f7ff ff29 	bl	800913e <inHandlerMode>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80092f2:	2382      	movs	r3, #130	; 0x82
 80092f4:	613b      	str	r3, [r7, #16]
 80092f6:	e01b      	b.n	8009330 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	f107 0310 	add.w	r3, r7, #16
 80092fe:	1d1a      	adds	r2, r3, #4
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	2000      	movs	r0, #0
 8009304:	f002 f822 	bl	800b34c <xTaskNotifyWait>
 8009308:	4603      	mov	r3, r0
 800930a:	2b01      	cmp	r3, #1
 800930c:	d008      	beq.n	8009320 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <osSignalWait+0x6a>
 8009314:	2300      	movs	r3, #0
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e00a      	b.n	8009330 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800931a:	2340      	movs	r3, #64	; 0x40
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	e007      	b.n	8009330 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	da02      	bge.n	800932c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009326:	2386      	movs	r3, #134	; 0x86
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e001      	b.n	8009330 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800932c:	2308      	movs	r3, #8
 800932e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	461c      	mov	r4, r3
 8009334:	f107 0310 	add.w	r3, r7, #16
 8009338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800933c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	3724      	adds	r7, #36	; 0x24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd90      	pop	{r4, r7, pc}

08009348 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af02      	add	r7, sp, #8
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00f      	beq.n	800937a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b01      	cmp	r3, #1
 800935e:	d10a      	bne.n	8009376 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	2203      	movs	r2, #3
 8009366:	9200      	str	r2, [sp, #0]
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	2001      	movs	r0, #1
 800936e:	f000 fa55 	bl	800981c <xQueueGenericCreateStatic>
 8009372:	4603      	mov	r3, r0
 8009374:	e016      	b.n	80093a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009376:	2300      	movs	r3, #0
 8009378:	e014      	b.n	80093a4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d110      	bne.n	80093a2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009380:	2203      	movs	r2, #3
 8009382:	2100      	movs	r1, #0
 8009384:	2001      	movs	r0, #1
 8009386:	f000 fac0 	bl	800990a <xQueueGenericCreate>
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <osSemaphoreCreate+0x56>
 8009392:	2300      	movs	r3, #0
 8009394:	2200      	movs	r2, #0
 8009396:	2100      	movs	r1, #0
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 fb13 	bl	80099c4 <xQueueGenericSend>
      return sema;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	e000      	b.n	80093a4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80093a2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d011      	beq.n	80093e2 <osMessageCreate+0x36>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6859      	ldr	r1, [r3, #4]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	2400      	movs	r4, #0
 80093d8:	9400      	str	r4, [sp, #0]
 80093da:	f000 fa1f 	bl	800981c <xQueueGenericCreateStatic>
 80093de:	4603      	mov	r3, r0
 80093e0:	e008      	b.n	80093f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	4619      	mov	r1, r3
 80093ee:	f000 fa8c 	bl	800990a <xQueueGenericCreate>
 80093f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd90      	pop	{r4, r7, pc}

080093fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <osMessagePut+0x1e>
    ticks = 1;
 8009416:	2301      	movs	r3, #1
 8009418:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800941a:	f7ff fe90 	bl	800913e <inHandlerMode>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d018      	beq.n	8009456 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009424:	f107 0210 	add.w	r2, r7, #16
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	2300      	movs	r3, #0
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fbc6 	bl	8009bc0 <xQueueGenericSendFromISR>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d001      	beq.n	800943e <osMessagePut+0x42>
      return osErrorOS;
 800943a:	23ff      	movs	r3, #255	; 0xff
 800943c:	e018      	b.n	8009470 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d014      	beq.n	800946e <osMessagePut+0x72>
 8009444:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <osMessagePut+0x7c>)
 8009446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	e00b      	b.n	800946e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009456:	f107 0108 	add.w	r1, r7, #8
 800945a:	2300      	movs	r3, #0
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 fab0 	bl	80099c4 <xQueueGenericSend>
 8009464:	4603      	mov	r3, r0
 8009466:	2b01      	cmp	r3, #1
 8009468:	d001      	beq.n	800946e <osMessagePut+0x72>
      return osErrorOS;
 800946a:	23ff      	movs	r3, #255	; 0xff
 800946c:	e000      	b.n	8009470 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800947c:	b590      	push	{r4, r7, lr}
 800947e:	b08b      	sub	sp, #44	; 0x2c
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10a      	bne.n	80094ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009496:	2380      	movs	r3, #128	; 0x80
 8009498:	617b      	str	r3, [r7, #20]
    return event;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	461c      	mov	r4, r3
 800949e:	f107 0314 	add.w	r3, r7, #20
 80094a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094aa:	e054      	b.n	8009556 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d103      	bne.n	80094c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80094bc:	f04f 33ff 	mov.w	r3, #4294967295
 80094c0:	627b      	str	r3, [r7, #36]	; 0x24
 80094c2:	e009      	b.n	80094d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d006      	beq.n	80094d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <osMessageGet+0x5c>
      ticks = 1;
 80094d4:	2301      	movs	r3, #1
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80094d8:	f7ff fe31 	bl	800913e <inHandlerMode>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d01c      	beq.n	800951c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80094e2:	f107 0220 	add.w	r2, r7, #32
 80094e6:	f107 0314 	add.w	r3, r7, #20
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	68b8      	ldr	r0, [r7, #8]
 80094f0:	f000 fcde 	bl	8009eb0 <xQueueReceiveFromISR>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d102      	bne.n	8009500 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80094fa:	2310      	movs	r3, #16
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	e001      	b.n	8009504 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01d      	beq.n	8009546 <osMessageGet+0xca>
 800950a:	4b15      	ldr	r3, [pc, #84]	; (8009560 <osMessageGet+0xe4>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	e014      	b.n	8009546 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800951c:	f107 0314 	add.w	r3, r7, #20
 8009520:	3304      	adds	r3, #4
 8009522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009524:	4619      	mov	r1, r3
 8009526:	68b8      	ldr	r0, [r7, #8]
 8009528:	f000 fbe2 	bl	8009cf0 <xQueueReceive>
 800952c:	4603      	mov	r3, r0
 800952e:	2b01      	cmp	r3, #1
 8009530:	d102      	bne.n	8009538 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009532:	2310      	movs	r3, #16
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	e006      	b.n	8009546 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <osMessageGet+0xc6>
 800953e:	2300      	movs	r3, #0
 8009540:	e000      	b.n	8009544 <osMessageGet+0xc8>
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	461c      	mov	r4, r3
 800954a:	f107 0314 	add.w	r3, r7, #20
 800954e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	372c      	adds	r7, #44	; 0x2c
 800955a:	46bd      	mov	sp, r7
 800955c:	bd90      	pop	{r4, r7, pc}
 800955e:	bf00      	nop
 8009560:	e000ed04 	.word	0xe000ed04

08009564 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 f883 	bl	800a678 <vTaskSuspend>
  
  return osOK;
 8009572:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8009584:	f7ff fddb 	bl	800913e <inHandlerMode>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00e      	beq.n	80095ac <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f99c 	bl	800a8cc <xTaskResumeFromISR>
 8009594:	4603      	mov	r3, r0
 8009596:	2b01      	cmp	r3, #1
 8009598:	d10b      	bne.n	80095b2 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800959a:	4b08      	ldr	r3, [pc, #32]	; (80095bc <osThreadResume+0x40>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	e002      	b.n	80095b2 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 f92f 	bl	800a810 <vTaskResume>
  }
  return osOK;
 80095b2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	e000ed04 	.word	0xe000ed04

080095c0 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <osDelayUntil+0x18>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	e000      	b.n	80095da <osDelayUntil+0x1a>
 80095d8:	2301      	movs	r3, #1
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 ff99 	bl	800a514 <vTaskDelayUntil>
  
  return osOK;
 80095e2:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f103 0208 	add.w	r2, r3, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f04f 32ff 	mov.w	r2, #4294967295
 8009604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f103 0208 	add.w	r2, r3, #8
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f103 0208 	add.w	r2, r3, #8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	bc80      	pop	{r7}
 8009628:	4770      	bx	lr

0800962a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2200      	movs	r2, #0
 8009636:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	bc80      	pop	{r7}
 8009640:	4770      	bx	lr

08009642 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009642:	b480      	push	{r7}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
}
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969e:	d103      	bne.n	80096a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e00c      	b.n	80096c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3308      	adds	r3, #8
 80096ac:	60fb      	str	r3, [r7, #12]
 80096ae:	e002      	b.n	80096b6 <vListInsert+0x2e>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d2f6      	bcs.n	80096b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
}
 80096ee:	bf00      	nop
 80096f0:	3714      	adds	r7, #20
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6892      	ldr	r2, [r2, #8]
 800970e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6852      	ldr	r2, [r2, #4]
 8009718:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d103      	bne.n	800972c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	1e5a      	subs	r2, r3, #1
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	bc80      	pop	{r7}
 8009748:	4770      	bx	lr
	...

0800974c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009772:	bf00      	nop
 8009774:	e7fe      	b.n	8009774 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009776:	f002 f919 	bl	800b9ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009786:	fb01 f303 	mul.w	r3, r1, r3
 800978a:	441a      	add	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	3b01      	subs	r3, #1
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	22ff      	movs	r2, #255	; 0xff
 80097ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	22ff      	movs	r2, #255	; 0xff
 80097c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d114      	bne.n	80097f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01a      	beq.n	800980a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3310      	adds	r3, #16
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fb4f 	bl	800ae7c <xTaskRemoveFromEventList>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d012      	beq.n	800980a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <xQueueGenericReset+0xcc>)
 80097e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ea:	601a      	str	r2, [r3, #0]
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	f3bf 8f6f 	isb	sy
 80097f4:	e009      	b.n	800980a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3310      	adds	r3, #16
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7ff fef6 	bl	80095ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	3324      	adds	r3, #36	; 0x24
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fef1 	bl	80095ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800980a:	f002 f8ff 	bl	800ba0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800980e:	2301      	movs	r3, #1
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d002      	beq.n	800986e <xQueueGenericCreateStatic+0x52>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <xQueueGenericCreateStatic+0x56>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueGenericCreateStatic+0x58>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	623b      	str	r3, [r7, #32]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d102      	bne.n	800989a <xQueueGenericCreateStatic+0x7e>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <xQueueGenericCreateStatic+0x82>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <xQueueGenericCreateStatic+0x84>
 800989e:	2300      	movs	r3, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10a      	bne.n	80098ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	61fb      	str	r3, [r7, #28]
}
 80098b6:	bf00      	nop
 80098b8:	e7fe      	b.n	80098b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098ba:	2348      	movs	r3, #72	; 0x48
 80098bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b48      	cmp	r3, #72	; 0x48
 80098c2:	d00a      	beq.n	80098da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80098c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c8:	f383 8811 	msr	BASEPRI, r3
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	f3bf 8f4f 	dsb	sy
 80098d4:	61bb      	str	r3, [r7, #24]
}
 80098d6:	bf00      	nop
 80098d8:	e7fe      	b.n	80098d8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00d      	beq.n	8009900 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80098e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	4613      	mov	r3, r2
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	68b9      	ldr	r1, [r7, #8]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f843 	bl	8009986 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3730      	adds	r7, #48	; 0x30
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}

0800990a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800990a:	b580      	push	{r7, lr}
 800990c:	b08a      	sub	sp, #40	; 0x28
 800990e:	af02      	add	r7, sp, #8
 8009910:	60f8      	str	r0, [r7, #12]
 8009912:	60b9      	str	r1, [r7, #8]
 8009914:	4613      	mov	r3, r2
 8009916:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <xQueueGenericCreate+0x2a>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	613b      	str	r3, [r7, #16]
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800993a:	2300      	movs	r3, #0
 800993c:	61fb      	str	r3, [r7, #28]
 800993e:	e004      	b.n	800994a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	fb02 f303 	mul.w	r3, r2, r3
 8009948:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	3348      	adds	r3, #72	; 0x48
 800994e:	4618      	mov	r0, r3
 8009950:	f002 f92c 	bl	800bbac <pvPortMalloc>
 8009954:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00f      	beq.n	800997c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	3348      	adds	r3, #72	; 0x48
 8009960:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800996a:	79fa      	ldrb	r2, [r7, #7]
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	4613      	mov	r3, r2
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	68b9      	ldr	r1, [r7, #8]
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f805 	bl	8009986 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800997c:	69bb      	ldr	r3, [r7, #24]
	}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b084      	sub	sp, #16
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	e002      	b.n	80099a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80099b4:	2101      	movs	r1, #1
 80099b6:	69b8      	ldr	r0, [r7, #24]
 80099b8:	f7ff fec8 	bl	800974c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08e      	sub	sp, #56	; 0x38
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099d2:	2300      	movs	r3, #0
 80099d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10a      	bne.n	80099f6 <xQueueGenericSend+0x32>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <xQueueGenericSend+0x40>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <xQueueGenericSend+0x44>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <xQueueGenericSend+0x46>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10a      	bne.n	8009a24 <xQueueGenericSend+0x60>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a20:	bf00      	nop
 8009a22:	e7fe      	b.n	8009a22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d103      	bne.n	8009a32 <xQueueGenericSend+0x6e>
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d101      	bne.n	8009a36 <xQueueGenericSend+0x72>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xQueueGenericSend+0x74>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xQueueGenericSend+0x8e>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	623b      	str	r3, [r7, #32]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a52:	f001 fbd7 	bl	800b204 <xTaskGetSchedulerState>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xQueueGenericSend+0x9e>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <xQueueGenericSend+0xa2>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <xQueueGenericSend+0xa4>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xQueueGenericSend+0xbe>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61fb      	str	r3, [r7, #28]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a82:	f001 ff93 	bl	800b9ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d302      	bcc.n	8009a98 <xQueueGenericSend+0xd4>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d129      	bne.n	8009aec <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f000 fa87 	bl	8009fb0 <prvCopyDataToQueue>
 8009aa2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f001 f9e3 	bl	800ae7c <xTaskRemoveFromEventList>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d013      	beq.n	8009ae4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009abc:	4b3f      	ldr	r3, [pc, #252]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	f3bf 8f6f 	isb	sy
 8009acc:	e00a      	b.n	8009ae4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ad4:	4b39      	ldr	r3, [pc, #228]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ada:	601a      	str	r2, [r3, #0]
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ae4:	f001 ff92 	bl	800ba0c <vPortExitCritical>
				return pdPASS;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e063      	b.n	8009bb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009af2:	f001 ff8b 	bl	800ba0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	e05c      	b.n	8009bb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d106      	bne.n	8009b0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b00:	f107 0314 	add.w	r3, r7, #20
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 fa1b 	bl	800af40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b0e:	f001 ff7d 	bl	800ba0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b12:	f000 ffb7 	bl	800aa84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b16:	f001 ff49 	bl	800b9ac <vPortEnterCritical>
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b20:	b25b      	sxtb	r3, r3
 8009b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b26:	d103      	bne.n	8009b30 <xQueueGenericSend+0x16c>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b36:	b25b      	sxtb	r3, r3
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d103      	bne.n	8009b46 <xQueueGenericSend+0x182>
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b46:	f001 ff61 	bl	800ba0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b4a:	1d3a      	adds	r2, r7, #4
 8009b4c:	f107 0314 	add.w	r3, r7, #20
 8009b50:	4611      	mov	r1, r2
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 fa0a 	bl	800af6c <xTaskCheckForTimeOut>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d124      	bne.n	8009ba8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b60:	f000 fb1e 	bl	800a1a0 <prvIsQueueFull>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d018      	beq.n	8009b9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	3310      	adds	r3, #16
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 f95e 	bl	800ae34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b7a:	f000 faa9 	bl	800a0d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b7e:	f000 ff8f 	bl	800aaa0 <xTaskResumeAll>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f af7c 	bne.w	8009a82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009b8a:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <xQueueGenericSend+0x1f8>)
 8009b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	e772      	b.n	8009a82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b9e:	f000 fa97 	bl	800a0d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ba2:	f000 ff7d 	bl	800aaa0 <xTaskResumeAll>
 8009ba6:	e76c      	b.n	8009a82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009baa:	f000 fa91 	bl	800a0d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009bae:	f000 ff77 	bl	800aaa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009bb2:	2300      	movs	r3, #0
		}
	}
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3738      	adds	r7, #56	; 0x38
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <xQueueGenericSendFromISR+0x3c>
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <xQueueGenericSendFromISR+0x40>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <xQueueGenericSendFromISR+0x42>
 8009c00:	2300      	movs	r3, #0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10a      	bne.n	8009c1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	623b      	str	r3, [r7, #32]
}
 8009c18:	bf00      	nop
 8009c1a:	e7fe      	b.n	8009c1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <xQueueGenericSendFromISR+0x6a>
 8009c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <xQueueGenericSendFromISR+0x6e>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueGenericSendFromISR+0x70>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10a      	bne.n	8009c4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	61fb      	str	r3, [r7, #28]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c4a:	f001 ff71 	bl	800bb30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8009c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	61ba      	str	r2, [r7, #24]
 8009c64:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c66:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d302      	bcc.n	8009c7c <xQueueGenericSendFromISR+0xbc>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d12c      	bne.n	8009cd6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c8c:	f000 f990 	bl	8009fb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c90:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d112      	bne.n	8009cc0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d016      	beq.n	8009cd0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	3324      	adds	r3, #36	; 0x24
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f001 f8e8 	bl	800ae7c <xTaskRemoveFromEventList>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00e      	beq.n	8009cd0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	e007      	b.n	8009cd0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009cc0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	b25a      	sxtb	r2, r3
 8009cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009cd4:	e001      	b.n	8009cda <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cdc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ce4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3738      	adds	r7, #56	; 0x38
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b08c      	sub	sp, #48	; 0x30
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <xQueueReceive+0x30>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	623b      	str	r3, [r7, #32]
}
 8009d1c:	bf00      	nop
 8009d1e:	e7fe      	b.n	8009d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d103      	bne.n	8009d2e <xQueueReceive+0x3e>
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <xQueueReceive+0x42>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e000      	b.n	8009d34 <xQueueReceive+0x44>
 8009d32:	2300      	movs	r3, #0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10a      	bne.n	8009d4e <xQueueReceive+0x5e>
	__asm volatile
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	61fb      	str	r3, [r7, #28]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d4e:	f001 fa59 	bl	800b204 <xTaskGetSchedulerState>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d102      	bne.n	8009d5e <xQueueReceive+0x6e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <xQueueReceive+0x72>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e000      	b.n	8009d64 <xQueueReceive+0x74>
 8009d62:	2300      	movs	r3, #0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d10a      	bne.n	8009d7e <xQueueReceive+0x8e>
	__asm volatile
 8009d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6c:	f383 8811 	msr	BASEPRI, r3
 8009d70:	f3bf 8f6f 	isb	sy
 8009d74:	f3bf 8f4f 	dsb	sy
 8009d78:	61bb      	str	r3, [r7, #24]
}
 8009d7a:	bf00      	nop
 8009d7c:	e7fe      	b.n	8009d7c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d7e:	f001 fe15 	bl	800b9ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d01f      	beq.n	8009dce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d8e:	68b9      	ldr	r1, [r7, #8]
 8009d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d92:	f000 f977 	bl	800a084 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	1e5a      	subs	r2, r3, #1
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00f      	beq.n	8009dc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	3310      	adds	r3, #16
 8009daa:	4618      	mov	r0, r3
 8009dac:	f001 f866 	bl	800ae7c <xTaskRemoveFromEventList>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009db6:	4b3d      	ldr	r3, [pc, #244]	; (8009eac <xQueueReceive+0x1bc>)
 8009db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dc6:	f001 fe21 	bl	800ba0c <vPortExitCritical>
				return pdPASS;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e069      	b.n	8009ea2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d103      	bne.n	8009ddc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dd4:	f001 fe1a 	bl	800ba0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e062      	b.n	8009ea2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009de2:	f107 0310 	add.w	r3, r7, #16
 8009de6:	4618      	mov	r0, r3
 8009de8:	f001 f8aa 	bl	800af40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dec:	2301      	movs	r3, #1
 8009dee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009df0:	f001 fe0c 	bl	800ba0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009df4:	f000 fe46 	bl	800aa84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009df8:	f001 fdd8 	bl	800b9ac <vPortEnterCritical>
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e02:	b25b      	sxtb	r3, r3
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d103      	bne.n	8009e12 <xQueueReceive+0x122>
 8009e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e18:	b25b      	sxtb	r3, r3
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1e:	d103      	bne.n	8009e28 <xQueueReceive+0x138>
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e28:	f001 fdf0 	bl	800ba0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e2c:	1d3a      	adds	r2, r7, #4
 8009e2e:	f107 0310 	add.w	r3, r7, #16
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 f899 	bl	800af6c <xTaskCheckForTimeOut>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d123      	bne.n	8009e88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e42:	f000 f997 	bl	800a174 <prvIsQueueEmpty>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d017      	beq.n	8009e7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4e:	3324      	adds	r3, #36	; 0x24
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 ffed 	bl	800ae34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e5c:	f000 f938 	bl	800a0d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e60:	f000 fe1e 	bl	800aaa0 <xTaskResumeAll>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d189      	bne.n	8009d7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e6a:	4b10      	ldr	r3, [pc, #64]	; (8009eac <xQueueReceive+0x1bc>)
 8009e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e70:	601a      	str	r2, [r3, #0]
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	e780      	b.n	8009d7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7e:	f000 f927 	bl	800a0d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e82:	f000 fe0d 	bl	800aaa0 <xTaskResumeAll>
 8009e86:	e77a      	b.n	8009d7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e8a:	f000 f921 	bl	800a0d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e8e:	f000 fe07 	bl	800aaa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e94:	f000 f96e 	bl	800a174 <prvIsQueueEmpty>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f43f af6f 	beq.w	8009d7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3730      	adds	r7, #48	; 0x30
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	; 0x38
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d10a      	bne.n	8009edc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	623b      	str	r3, [r7, #32]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d103      	bne.n	8009eea <xQueueReceiveFromISR+0x3a>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <xQueueReceiveFromISR+0x3e>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <xQueueReceiveFromISR+0x40>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	61fb      	str	r3, [r7, #28]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f0a:	f001 fe11 	bl	800bb30 <vPortValidateInterruptPriority>
	__asm volatile
 8009f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	61ba      	str	r2, [r7, #24]
 8009f24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d02f      	beq.n	8009f96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f40:	68b9      	ldr	r1, [r7, #8]
 8009f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f44:	f000 f89e 	bl	800a084 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	1e5a      	subs	r2, r3, #1
 8009f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f58:	d112      	bne.n	8009f80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d016      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	3310      	adds	r3, #16
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 ff88 	bl	800ae7c <xTaskRemoveFromEventList>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
 8009f7e:	e007      	b.n	8009f90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f84:	3301      	adds	r3, #1
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	b25a      	sxtb	r2, r3
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f90:	2301      	movs	r3, #1
 8009f92:	637b      	str	r3, [r7, #52]	; 0x34
 8009f94:	e001      	b.n	8009f9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009f96:	2300      	movs	r3, #0
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
 8009f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f383 8811 	msr	BASEPRI, r3
}
 8009fa4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3738      	adds	r7, #56	; 0x38
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10d      	bne.n	8009fea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d14d      	bne.n	800a072 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f930 	bl	800b240 <xTaskPriorityDisinherit>
 8009fe0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	e043      	b.n	800a072 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d119      	bne.n	800a024 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6898      	ldr	r0, [r3, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	f002 f93a 	bl	800c274 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689a      	ldr	r2, [r3, #8]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d32b      	bcc.n	800a072 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	609a      	str	r2, [r3, #8]
 800a022:	e026      	b.n	800a072 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68d8      	ldr	r0, [r3, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	461a      	mov	r2, r3
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	f002 f920 	bl	800c274 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	425b      	negs	r3, r3
 800a03e:	441a      	add	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d207      	bcs.n	800a060 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	425b      	negs	r3, r3
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d105      	bne.n	800a072 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	3b01      	subs	r3, #1
 800a070:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d018      	beq.n	800a0c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	441a      	add	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d303      	bcc.n	800a0b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68d9      	ldr	r1, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6838      	ldr	r0, [r7, #0]
 800a0c4:	f002 f8d6 	bl	800c274 <memcpy>
	}
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0d8:	f001 fc68 	bl	800b9ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0e4:	e011      	b.n	800a10a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d012      	beq.n	800a114 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3324      	adds	r3, #36	; 0x24
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fec2 	bl	800ae7c <xTaskRemoveFromEventList>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0fe:	f000 ff97 	bl	800b030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	3b01      	subs	r3, #1
 800a106:	b2db      	uxtb	r3, r3
 800a108:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dce9      	bgt.n	800a0e6 <prvUnlockQueue+0x16>
 800a112:	e000      	b.n	800a116 <prvUnlockQueue+0x46>
					break;
 800a114:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	22ff      	movs	r2, #255	; 0xff
 800a11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a11e:	f001 fc75 	bl	800ba0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a122:	f001 fc43 	bl	800b9ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a12c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a12e:	e011      	b.n	800a154 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3310      	adds	r3, #16
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fe9d 	bl	800ae7c <xTaskRemoveFromEventList>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a148:	f000 ff72 	bl	800b030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	3b01      	subs	r3, #1
 800a150:	b2db      	uxtb	r3, r3
 800a152:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dce9      	bgt.n	800a130 <prvUnlockQueue+0x60>
 800a15c:	e000      	b.n	800a160 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a15e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	22ff      	movs	r2, #255	; 0xff
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a168:	f001 fc50 	bl	800ba0c <vPortExitCritical>
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a17c:	f001 fc16 	bl	800b9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	e001      	b.n	800a192 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a192:	f001 fc3b 	bl	800ba0c <vPortExitCritical>

	return xReturn;
 800a196:	68fb      	ldr	r3, [r7, #12]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1a8:	f001 fc00 	bl	800b9ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d102      	bne.n	800a1be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e001      	b.n	800a1c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1c2:	f001 fc23 	bl	800ba0c <vPortExitCritical>

	return xReturn;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	; 0x38
 800a1d4:	af04      	add	r7, sp, #16
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10a      	bne.n	800a1fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	623b      	str	r3, [r7, #32]
}
 800a1f6:	bf00      	nop
 800a1f8:	e7fe      	b.n	800a1f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xTaskCreateStatic+0x46>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	61fb      	str	r3, [r7, #28]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a216:	23a0      	movs	r3, #160	; 0xa0
 800a218:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	2ba0      	cmp	r3, #160	; 0xa0
 800a21e:	d00a      	beq.n	800a236 <xTaskCreateStatic+0x66>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	61bb      	str	r3, [r7, #24]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01e      	beq.n	800a27a <xTaskCreateStatic+0xaa>
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d01b      	beq.n	800a27a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a24a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a254:	2300      	movs	r3, #0
 800a256:	9303      	str	r3, [sp, #12]
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	9302      	str	r3, [sp, #8]
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	68b9      	ldr	r1, [r7, #8]
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 f851 	bl	800a314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a272:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a274:	f000 f8e4 	bl	800a440 <prvAddNewTaskToReadyList>
 800a278:	e001      	b.n	800a27e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a27a:	2300      	movs	r3, #0
 800a27c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a27e:	697b      	ldr	r3, [r7, #20]
	}
 800a280:	4618      	mov	r0, r3
 800a282:	3728      	adds	r7, #40	; 0x28
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b08c      	sub	sp, #48	; 0x30
 800a28c:	af04      	add	r7, sp, #16
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	603b      	str	r3, [r7, #0]
 800a294:	4613      	mov	r3, r2
 800a296:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a298:	88fb      	ldrh	r3, [r7, #6]
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	4618      	mov	r0, r3
 800a29e:	f001 fc85 	bl	800bbac <pvPortMalloc>
 800a2a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d00e      	beq.n	800a2c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a2aa:	20a0      	movs	r0, #160	; 0xa0
 800a2ac:	f001 fc7e 	bl	800bbac <pvPortMalloc>
 800a2b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	631a      	str	r2, [r3, #48]	; 0x30
 800a2be:	e005      	b.n	800a2cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a2c0:	6978      	ldr	r0, [r7, #20]
 800a2c2:	f001 fd37 	bl	800bd34 <vPortFree>
 800a2c6:	e001      	b.n	800a2cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d017      	beq.n	800a302 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2da:	88fa      	ldrh	r2, [r7, #6]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9303      	str	r3, [sp, #12]
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	9302      	str	r3, [sp, #8]
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f80f 	bl	800a314 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2f6:	69f8      	ldr	r0, [r7, #28]
 800a2f8:	f000 f8a2 	bl	800a440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	61bb      	str	r3, [r7, #24]
 800a300:	e002      	b.n	800a308 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a302:	f04f 33ff 	mov.w	r3, #4294967295
 800a306:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a308:	69bb      	ldr	r3, [r7, #24]
	}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3720      	adds	r7, #32
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a32c:	3b01      	subs	r3, #1
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f023 0307 	bic.w	r3, r3, #7
 800a33a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00a      	beq.n	800a35c <prvInitialiseNewTask+0x48>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	617b      	str	r3, [r7, #20]
}
 800a358:	bf00      	nop
 800a35a:	e7fe      	b.n	800a35a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a35c:	2300      	movs	r3, #0
 800a35e:	61fb      	str	r3, [r7, #28]
 800a360:	e012      	b.n	800a388 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	4413      	add	r3, r2
 800a368:	7819      	ldrb	r1, [r3, #0]
 800a36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	4413      	add	r3, r2
 800a370:	3334      	adds	r3, #52	; 0x34
 800a372:	460a      	mov	r2, r1
 800a374:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	4413      	add	r3, r2
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d006      	beq.n	800a390 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	3301      	adds	r3, #1
 800a386:	61fb      	str	r3, [r7, #28]
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	2b0f      	cmp	r3, #15
 800a38c:	d9e9      	bls.n	800a362 <prvInitialiseNewTask+0x4e>
 800a38e:	e000      	b.n	800a392 <prvInitialiseNewTask+0x7e>
		{
			break;
 800a390:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	2b06      	cmp	r3, #6
 800a39e:	d901      	bls.n	800a3a4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff f935 	bl	800962a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c2:	3318      	adds	r3, #24
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff f930 	bl	800962a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	f1c3 0207 	rsb	r2, r3, #7
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f2:	334c      	adds	r3, #76	; 0x4c
 800a3f4:	224c      	movs	r2, #76	; 0x4c
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f001 fe83 	bl	800c104 <memset>
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <prvInitialiseNewTask+0x120>)
 800a402:	651a      	str	r2, [r3, #80]	; 0x50
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	4a0c      	ldr	r2, [pc, #48]	; (800a438 <prvInitialiseNewTask+0x124>)
 800a408:	655a      	str	r2, [r3, #84]	; 0x54
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	4a0b      	ldr	r2, [pc, #44]	; (800a43c <prvInitialiseNewTask+0x128>)
 800a40e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	68f9      	ldr	r1, [r7, #12]
 800a414:	69b8      	ldr	r0, [r7, #24]
 800a416:	f001 f9d9 	bl	800b7cc <pxPortInitialiseStack>
 800a41a:	4602      	mov	r2, r0
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a42a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a42c:	bf00      	nop
 800a42e:	3720      	adds	r7, #32
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20001fb8 	.word	0x20001fb8
 800a438:	20002020 	.word	0x20002020
 800a43c:	20002088 	.word	0x20002088

0800a440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a448:	f001 fab0 	bl	800b9ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a44c:	4b2a      	ldr	r3, [pc, #168]	; (800a4f8 <prvAddNewTaskToReadyList+0xb8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	4a29      	ldr	r2, [pc, #164]	; (800a4f8 <prvAddNewTaskToReadyList+0xb8>)
 800a454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a456:	4b29      	ldr	r3, [pc, #164]	; (800a4fc <prvAddNewTaskToReadyList+0xbc>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d109      	bne.n	800a472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a45e:	4a27      	ldr	r2, [pc, #156]	; (800a4fc <prvAddNewTaskToReadyList+0xbc>)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a464:	4b24      	ldr	r3, [pc, #144]	; (800a4f8 <prvAddNewTaskToReadyList+0xb8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d110      	bne.n	800a48e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a46c:	f000 fe04 	bl	800b078 <prvInitialiseTaskLists>
 800a470:	e00d      	b.n	800a48e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a472:	4b23      	ldr	r3, [pc, #140]	; (800a500 <prvAddNewTaskToReadyList+0xc0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d109      	bne.n	800a48e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a47a:	4b20      	ldr	r3, [pc, #128]	; (800a4fc <prvAddNewTaskToReadyList+0xbc>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	429a      	cmp	r2, r3
 800a486:	d802      	bhi.n	800a48e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a488:	4a1c      	ldr	r2, [pc, #112]	; (800a4fc <prvAddNewTaskToReadyList+0xbc>)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a48e:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <prvAddNewTaskToReadyList+0xc4>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3301      	adds	r3, #1
 800a494:	4a1b      	ldr	r2, [pc, #108]	; (800a504 <prvAddNewTaskToReadyList+0xc4>)
 800a496:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49c:	2201      	movs	r2, #1
 800a49e:	409a      	lsls	r2, r3
 800a4a0:	4b19      	ldr	r3, [pc, #100]	; (800a508 <prvAddNewTaskToReadyList+0xc8>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	4a18      	ldr	r2, [pc, #96]	; (800a508 <prvAddNewTaskToReadyList+0xc8>)
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4a15      	ldr	r2, [pc, #84]	; (800a50c <prvAddNewTaskToReadyList+0xcc>)
 800a4b8:	441a      	add	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4619      	mov	r1, r3
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	f7ff f8be 	bl	8009642 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a4c6:	f001 faa1 	bl	800ba0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <prvAddNewTaskToReadyList+0xc0>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00e      	beq.n	800a4f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	; (800a4fc <prvAddNewTaskToReadyList+0xbc>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d207      	bcs.n	800a4f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4e0:	4b0b      	ldr	r3, [pc, #44]	; (800a510 <prvAddNewTaskToReadyList+0xd0>)
 800a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20001364 	.word	0x20001364
 800a4fc:	20001264 	.word	0x20001264
 800a500:	20001370 	.word	0x20001370
 800a504:	20001380 	.word	0x20001380
 800a508:	2000136c 	.word	0x2000136c
 800a50c:	20001268 	.word	0x20001268
 800a510:	e000ed04 	.word	0xe000ed04

0800a514 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	; 0x28
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a51e:	2300      	movs	r3, #0
 800a520:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <vTaskDelayUntil+0x2a>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	617b      	str	r3, [r7, #20]
}
 800a53a:	bf00      	nop
 800a53c:	e7fe      	b.n	800a53c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <vTaskDelayUntil+0x46>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	613b      	str	r3, [r7, #16]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a55a:	4b2a      	ldr	r3, [pc, #168]	; (800a604 <vTaskDelayUntil+0xf0>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <vTaskDelayUntil+0x64>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60fb      	str	r3, [r7, #12]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a578:	f000 fa84 	bl	800aa84 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a57c:	4b22      	ldr	r3, [pc, #136]	; (800a608 <vTaskDelayUntil+0xf4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	4413      	add	r3, r2
 800a58a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	6a3a      	ldr	r2, [r7, #32]
 800a592:	429a      	cmp	r2, r3
 800a594:	d20b      	bcs.n	800a5ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69fa      	ldr	r2, [r7, #28]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d211      	bcs.n	800a5c4 <vTaskDelayUntil+0xb0>
 800a5a0:	69fa      	ldr	r2, [r7, #28]
 800a5a2:	6a3b      	ldr	r3, [r7, #32]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d90d      	bls.n	800a5c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ac:	e00a      	b.n	800a5c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d303      	bcc.n	800a5c0 <vTaskDelayUntil+0xac>
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d901      	bls.n	800a5c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d006      	beq.n	800a5de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a5d0:	69fa      	ldr	r2, [r7, #28]
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f001 f891 	bl	800b700 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a5de:	f000 fa5f 	bl	800aaa0 <xTaskResumeAll>
 800a5e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d107      	bne.n	800a5fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a5ea:	4b08      	ldr	r3, [pc, #32]	; (800a60c <vTaskDelayUntil+0xf8>)
 800a5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f0:	601a      	str	r2, [r3, #0]
 800a5f2:	f3bf 8f4f 	dsb	sy
 800a5f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a5fa:	bf00      	nop
 800a5fc:	3728      	adds	r7, #40	; 0x28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	2000138c 	.word	0x2000138c
 800a608:	20001368 	.word	0x20001368
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a618:	2300      	movs	r3, #0
 800a61a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d017      	beq.n	800a652 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a622:	4b13      	ldr	r3, [pc, #76]	; (800a670 <vTaskDelay+0x60>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <vTaskDelay+0x30>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	60bb      	str	r3, [r7, #8]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a640:	f000 fa20 	bl	800aa84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a644:	2100      	movs	r1, #0
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 f85a 	bl	800b700 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a64c:	f000 fa28 	bl	800aaa0 <xTaskResumeAll>
 800a650:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d107      	bne.n	800a668 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a658:	4b06      	ldr	r3, [pc, #24]	; (800a674 <vTaskDelay+0x64>)
 800a65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a668:	bf00      	nop
 800a66a:	3710      	adds	r7, #16
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	2000138c 	.word	0x2000138c
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a680:	f001 f994 	bl	800b9ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <vTaskSuspend+0x18>
 800a68a:	4b3c      	ldr	r3, [pc, #240]	; (800a77c <vTaskSuspend+0x104>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	e000      	b.n	800a692 <vTaskSuspend+0x1a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff f82d 	bl	80096f8 <uxListRemove>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d115      	bne.n	800a6d0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a8:	4935      	ldr	r1, [pc, #212]	; (800a780 <vTaskSuspend+0x108>)
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	440b      	add	r3, r1
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <vTaskSuspend+0x58>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	2201      	movs	r2, #1
 800a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c4:	43da      	mvns	r2, r3
 800a6c6:	4b2f      	ldr	r3, [pc, #188]	; (800a784 <vTaskSuspend+0x10c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	4a2d      	ldr	r2, [pc, #180]	; (800a784 <vTaskSuspend+0x10c>)
 800a6ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d004      	beq.n	800a6e2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	3318      	adds	r3, #24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff f80b 	bl	80096f8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4827      	ldr	r0, [pc, #156]	; (800a788 <vTaskSuspend+0x110>)
 800a6ea:	f7fe ffaa 	bl	8009642 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d103      	bne.n	800a702 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a702:	f001 f983 	bl	800ba0c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a706:	4b21      	ldr	r3, [pc, #132]	; (800a78c <vTaskSuspend+0x114>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a70e:	f001 f94d 	bl	800b9ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a712:	f000 fd53 	bl	800b1bc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a716:	f001 f979 	bl	800ba0c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a71a:	4b18      	ldr	r3, [pc, #96]	; (800a77c <vTaskSuspend+0x104>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	429a      	cmp	r2, r3
 800a722:	d127      	bne.n	800a774 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a724:	4b19      	ldr	r3, [pc, #100]	; (800a78c <vTaskSuspend+0x114>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d017      	beq.n	800a75c <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a72c:	4b18      	ldr	r3, [pc, #96]	; (800a790 <vTaskSuspend+0x118>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00a      	beq.n	800a74a <vTaskSuspend+0xd2>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60bb      	str	r3, [r7, #8]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a74a:	4b12      	ldr	r3, [pc, #72]	; (800a794 <vTaskSuspend+0x11c>)
 800a74c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	f3bf 8f4f 	dsb	sy
 800a756:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a75a:	e00b      	b.n	800a774 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <vTaskSuspend+0x110>)
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	4b0d      	ldr	r3, [pc, #52]	; (800a798 <vTaskSuspend+0x120>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	429a      	cmp	r2, r3
 800a766:	d103      	bne.n	800a770 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a768:	4b04      	ldr	r3, [pc, #16]	; (800a77c <vTaskSuspend+0x104>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	601a      	str	r2, [r3, #0]
	}
 800a76e:	e001      	b.n	800a774 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a770:	f000 fafe 	bl	800ad70 <vTaskSwitchContext>
	}
 800a774:	bf00      	nop
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20001264 	.word	0x20001264
 800a780:	20001268 	.word	0x20001268
 800a784:	2000136c 	.word	0x2000136c
 800a788:	20001350 	.word	0x20001350
 800a78c:	20001370 	.word	0x20001370
 800a790:	2000138c 	.word	0x2000138c
 800a794:	e000ed04 	.word	0xe000ed04
 800a798:	20001364 	.word	0x20001364

0800a79c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	4a0e      	ldr	r2, [pc, #56]	; (800a808 <prvTaskIsTaskSuspended+0x6c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d101      	bne.n	800a7d6 <prvTaskIsTaskSuspended+0x3a>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <prvTaskIsTaskSuspended+0x3c>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00f      	beq.n	800a7fc <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	; (800a80c <prvTaskIsTaskSuspended+0x70>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00a      	beq.n	800a7fc <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <prvTaskIsTaskSuspended+0x56>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <prvTaskIsTaskSuspended+0x58>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d001      	beq.n	800a7fc <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a7fc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a7fe:	4618      	mov	r0, r3
 800a800:	371c      	adds	r7, #28
 800a802:	46bd      	mov	sp, r7
 800a804:	bc80      	pop	{r7}
 800a806:	4770      	bx	lr
 800a808:	20001350 	.word	0x20001350
 800a80c:	20001324 	.word	0x20001324

0800a810 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10a      	bne.n	800a838 <vTaskResume+0x28>
	__asm volatile
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	60bb      	str	r3, [r7, #8]
}
 800a834:	bf00      	nop
 800a836:	e7fe      	b.n	800a836 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d039      	beq.n	800a8b2 <vTaskResume+0xa2>
 800a83e:	4b1f      	ldr	r3, [pc, #124]	; (800a8bc <vTaskResume+0xac>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	429a      	cmp	r2, r3
 800a846:	d034      	beq.n	800a8b2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800a848:	f001 f8b0 	bl	800b9ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7ff ffa5 	bl	800a79c <prvTaskIsTaskSuspended>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d02a      	beq.n	800a8ae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe ff4b 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a866:	2201      	movs	r2, #1
 800a868:	409a      	lsls	r2, r3
 800a86a:	4b15      	ldr	r3, [pc, #84]	; (800a8c0 <vTaskResume+0xb0>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4313      	orrs	r3, r2
 800a870:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <vTaskResume+0xb0>)
 800a872:	6013      	str	r3, [r2, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a878:	4613      	mov	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	4413      	add	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <vTaskResume+0xb4>)
 800a882:	441a      	add	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3304      	adds	r3, #4
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7fe fed9 	bl	8009642 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a894:	4b09      	ldr	r3, [pc, #36]	; (800a8bc <vTaskResume+0xac>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d307      	bcc.n	800a8ae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a89e:	4b0a      	ldr	r3, [pc, #40]	; (800a8c8 <vTaskResume+0xb8>)
 800a8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a4:	601a      	str	r2, [r3, #0]
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a8ae:	f001 f8ad 	bl	800ba0c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a8b2:	bf00      	nop
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	20001264 	.word	0x20001264
 800a8c0:	2000136c 	.word	0x2000136c
 800a8c4:	20001268 	.word	0x20001268
 800a8c8:	e000ed04 	.word	0xe000ed04

0800a8cc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	61bb      	str	r3, [r7, #24]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8f8:	f001 f91a 	bl	800bb30 <vPortValidateInterruptPriority>
	__asm volatile
 800a8fc:	f3ef 8211 	mrs	r2, BASEPRI
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	617a      	str	r2, [r7, #20]
 800a912:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a914:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a916:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a918:	6a38      	ldr	r0, [r7, #32]
 800a91a:	f7ff ff3f 	bl	800a79c <prvTaskIsTaskSuspended>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d02f      	beq.n	800a984 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a924:	4b1d      	ldr	r3, [pc, #116]	; (800a99c <xTaskResumeFromISR+0xd0>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d125      	bne.n	800a978 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <xTaskResumeFromISR+0xd4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	429a      	cmp	r2, r3
 800a938:	d301      	bcc.n	800a93e <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	3304      	adds	r3, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe fed8 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	2201      	movs	r2, #1
 800a94e:	409a      	lsls	r2, r3
 800a950:	4b14      	ldr	r3, [pc, #80]	; (800a9a4 <xTaskResumeFromISR+0xd8>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4313      	orrs	r3, r2
 800a956:	4a13      	ldr	r2, [pc, #76]	; (800a9a4 <xTaskResumeFromISR+0xd8>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a10      	ldr	r2, [pc, #64]	; (800a9a8 <xTaskResumeFromISR+0xdc>)
 800a968:	441a      	add	r2, r3
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f7fe fe66 	bl	8009642 <vListInsertEnd>
 800a976:	e005      	b.n	800a984 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	3318      	adds	r3, #24
 800a97c:	4619      	mov	r1, r3
 800a97e:	480b      	ldr	r0, [pc, #44]	; (800a9ac <xTaskResumeFromISR+0xe0>)
 800a980:	f7fe fe5f 	bl	8009642 <vListInsertEnd>
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f383 8811 	msr	BASEPRI, r3
}
 800a98e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a992:	4618      	mov	r0, r3
 800a994:	3728      	adds	r7, #40	; 0x28
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	2000138c 	.word	0x2000138c
 800a9a0:	20001264 	.word	0x20001264
 800a9a4:	2000136c 	.word	0x2000136c
 800a9a8:	20001268 	.word	0x20001268
 800a9ac:	20001324 	.word	0x20001324

0800a9b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b08a      	sub	sp, #40	; 0x28
 800a9b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9be:	463a      	mov	r2, r7
 800a9c0:	1d39      	adds	r1, r7, #4
 800a9c2:	f107 0308 	add.w	r3, r7, #8
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7f7 f9e4 	bl	8001d94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9cc:	6839      	ldr	r1, [r7, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	9202      	str	r2, [sp, #8]
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	2300      	movs	r3, #0
 800a9dc:	460a      	mov	r2, r1
 800a9de:	4921      	ldr	r1, [pc, #132]	; (800aa64 <vTaskStartScheduler+0xb4>)
 800a9e0:	4821      	ldr	r0, [pc, #132]	; (800aa68 <vTaskStartScheduler+0xb8>)
 800a9e2:	f7ff fbf5 	bl	800a1d0 <xTaskCreateStatic>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	4a20      	ldr	r2, [pc, #128]	; (800aa6c <vTaskStartScheduler+0xbc>)
 800a9ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9ec:	4b1f      	ldr	r3, [pc, #124]	; (800aa6c <vTaskStartScheduler+0xbc>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e001      	b.n	800a9fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d11b      	bne.n	800aa3c <vTaskStartScheduler+0x8c>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	613b      	str	r3, [r7, #16]
}
 800aa16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa18:	4b15      	ldr	r3, [pc, #84]	; (800aa70 <vTaskStartScheduler+0xc0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	334c      	adds	r3, #76	; 0x4c
 800aa1e:	4a15      	ldr	r2, [pc, #84]	; (800aa74 <vTaskStartScheduler+0xc4>)
 800aa20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa22:	4b15      	ldr	r3, [pc, #84]	; (800aa78 <vTaskStartScheduler+0xc8>)
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295
 800aa28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa2a:	4b14      	ldr	r3, [pc, #80]	; (800aa7c <vTaskStartScheduler+0xcc>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa30:	4b13      	ldr	r3, [pc, #76]	; (800aa80 <vTaskStartScheduler+0xd0>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa36:	f000 ff47 	bl	800b8c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa3a:	e00e      	b.n	800aa5a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d10a      	bne.n	800aa5a <vTaskStartScheduler+0xaa>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	60fb      	str	r3, [r7, #12]
}
 800aa56:	bf00      	nop
 800aa58:	e7fe      	b.n	800aa58 <vTaskStartScheduler+0xa8>
}
 800aa5a:	bf00      	nop
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	0800cd4c 	.word	0x0800cd4c
 800aa68:	0800b049 	.word	0x0800b049
 800aa6c:	20001388 	.word	0x20001388
 800aa70:	20001264 	.word	0x20001264
 800aa74:	2000025c 	.word	0x2000025c
 800aa78:	20001384 	.word	0x20001384
 800aa7c:	20001370 	.word	0x20001370
 800aa80:	20001368 	.word	0x20001368

0800aa84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <vTaskSuspendAll+0x18>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	4a03      	ldr	r2, [pc, #12]	; (800aa9c <vTaskSuspendAll+0x18>)
 800aa90:	6013      	str	r3, [r2, #0]
}
 800aa92:	bf00      	nop
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bc80      	pop	{r7}
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	2000138c 	.word	0x2000138c

0800aaa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aaae:	4b41      	ldr	r3, [pc, #260]	; (800abb4 <xTaskResumeAll+0x114>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d10a      	bne.n	800aacc <xTaskResumeAll+0x2c>
	__asm volatile
 800aab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	603b      	str	r3, [r7, #0]
}
 800aac8:	bf00      	nop
 800aaca:	e7fe      	b.n	800aaca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aacc:	f000 ff6e 	bl	800b9ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aad0:	4b38      	ldr	r3, [pc, #224]	; (800abb4 <xTaskResumeAll+0x114>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	4a37      	ldr	r2, [pc, #220]	; (800abb4 <xTaskResumeAll+0x114>)
 800aad8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aada:	4b36      	ldr	r3, [pc, #216]	; (800abb4 <xTaskResumeAll+0x114>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d161      	bne.n	800aba6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aae2:	4b35      	ldr	r3, [pc, #212]	; (800abb8 <xTaskResumeAll+0x118>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d05d      	beq.n	800aba6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaea:	e02e      	b.n	800ab4a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aaec:	4b33      	ldr	r3, [pc, #204]	; (800abbc <xTaskResumeAll+0x11c>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3318      	adds	r3, #24
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe fdfd 	bl	80096f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe fdf8 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	409a      	lsls	r2, r3
 800ab10:	4b2b      	ldr	r3, [pc, #172]	; (800abc0 <xTaskResumeAll+0x120>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	4a2a      	ldr	r2, [pc, #168]	; (800abc0 <xTaskResumeAll+0x120>)
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4a27      	ldr	r2, [pc, #156]	; (800abc4 <xTaskResumeAll+0x124>)
 800ab28:	441a      	add	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4610      	mov	r0, r2
 800ab32:	f7fe fd86 	bl	8009642 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4b23      	ldr	r3, [pc, #140]	; (800abc8 <xTaskResumeAll+0x128>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ab44:	4b21      	ldr	r3, [pc, #132]	; (800abcc <xTaskResumeAll+0x12c>)
 800ab46:	2201      	movs	r2, #1
 800ab48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab4a:	4b1c      	ldr	r3, [pc, #112]	; (800abbc <xTaskResumeAll+0x11c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1cc      	bne.n	800aaec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab58:	f000 fb30 	bl	800b1bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	; (800abd0 <xTaskResumeAll+0x130>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab68:	f000 f844 	bl	800abf4 <xTaskIncrementTick>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ab72:	4b16      	ldr	r3, [pc, #88]	; (800abcc <xTaskResumeAll+0x12c>)
 800ab74:	2201      	movs	r2, #1
 800ab76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1f1      	bne.n	800ab68 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800ab84:	4b12      	ldr	r3, [pc, #72]	; (800abd0 <xTaskResumeAll+0x130>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab8a:	4b10      	ldr	r3, [pc, #64]	; (800abcc <xTaskResumeAll+0x12c>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab92:	2301      	movs	r3, #1
 800ab94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab96:	4b0f      	ldr	r3, [pc, #60]	; (800abd4 <xTaskResumeAll+0x134>)
 800ab98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aba6:	f000 ff31 	bl	800ba0c <vPortExitCritical>

	return xAlreadyYielded;
 800abaa:	68bb      	ldr	r3, [r7, #8]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	2000138c 	.word	0x2000138c
 800abb8:	20001364 	.word	0x20001364
 800abbc:	20001324 	.word	0x20001324
 800abc0:	2000136c 	.word	0x2000136c
 800abc4:	20001268 	.word	0x20001268
 800abc8:	20001264 	.word	0x20001264
 800abcc:	20001378 	.word	0x20001378
 800abd0:	20001374 	.word	0x20001374
 800abd4:	e000ed04 	.word	0xe000ed04

0800abd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abde:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <xTaskGetTickCount+0x18>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abe4:	687b      	ldr	r3, [r7, #4]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	bc80      	pop	{r7}
 800abee:	4770      	bx	lr
 800abf0:	20001368 	.word	0x20001368

0800abf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abfe:	4b51      	ldr	r3, [pc, #324]	; (800ad44 <xTaskIncrementTick+0x150>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f040 808d 	bne.w	800ad22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac08:	4b4f      	ldr	r3, [pc, #316]	; (800ad48 <xTaskIncrementTick+0x154>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac10:	4a4d      	ldr	r2, [pc, #308]	; (800ad48 <xTaskIncrementTick+0x154>)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d120      	bne.n	800ac5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac1c:	4b4b      	ldr	r3, [pc, #300]	; (800ad4c <xTaskIncrementTick+0x158>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00a      	beq.n	800ac3c <xTaskIncrementTick+0x48>
	__asm volatile
 800ac26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2a:	f383 8811 	msr	BASEPRI, r3
 800ac2e:	f3bf 8f6f 	isb	sy
 800ac32:	f3bf 8f4f 	dsb	sy
 800ac36:	603b      	str	r3, [r7, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	e7fe      	b.n	800ac3a <xTaskIncrementTick+0x46>
 800ac3c:	4b43      	ldr	r3, [pc, #268]	; (800ad4c <xTaskIncrementTick+0x158>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60fb      	str	r3, [r7, #12]
 800ac42:	4b43      	ldr	r3, [pc, #268]	; (800ad50 <xTaskIncrementTick+0x15c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a41      	ldr	r2, [pc, #260]	; (800ad4c <xTaskIncrementTick+0x158>)
 800ac48:	6013      	str	r3, [r2, #0]
 800ac4a:	4a41      	ldr	r2, [pc, #260]	; (800ad50 <xTaskIncrementTick+0x15c>)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	4b40      	ldr	r3, [pc, #256]	; (800ad54 <xTaskIncrementTick+0x160>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3301      	adds	r3, #1
 800ac56:	4a3f      	ldr	r2, [pc, #252]	; (800ad54 <xTaskIncrementTick+0x160>)
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	f000 faaf 	bl	800b1bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac5e:	4b3e      	ldr	r3, [pc, #248]	; (800ad58 <xTaskIncrementTick+0x164>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d34d      	bcc.n	800ad04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac68:	4b38      	ldr	r3, [pc, #224]	; (800ad4c <xTaskIncrementTick+0x158>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d101      	bne.n	800ac76 <xTaskIncrementTick+0x82>
 800ac72:	2301      	movs	r3, #1
 800ac74:	e000      	b.n	800ac78 <xTaskIncrementTick+0x84>
 800ac76:	2300      	movs	r3, #0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d004      	beq.n	800ac86 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7c:	4b36      	ldr	r3, [pc, #216]	; (800ad58 <xTaskIncrementTick+0x164>)
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac82:	601a      	str	r2, [r3, #0]
					break;
 800ac84:	e03e      	b.n	800ad04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac86:	4b31      	ldr	r3, [pc, #196]	; (800ad4c <xTaskIncrementTick+0x158>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d203      	bcs.n	800aca6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac9e:	4a2e      	ldr	r2, [pc, #184]	; (800ad58 <xTaskIncrementTick+0x164>)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6013      	str	r3, [r2, #0]
						break;
 800aca4:	e02e      	b.n	800ad04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	3304      	adds	r3, #4
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fd24 	bl	80096f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	3318      	adds	r3, #24
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe fd1b 	bl	80096f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	2201      	movs	r2, #1
 800acc8:	409a      	lsls	r2, r3
 800acca:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <xTaskIncrementTick+0x168>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4313      	orrs	r3, r2
 800acd0:	4a22      	ldr	r2, [pc, #136]	; (800ad5c <xTaskIncrementTick+0x168>)
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4a1f      	ldr	r2, [pc, #124]	; (800ad60 <xTaskIncrementTick+0x16c>)
 800ace2:	441a      	add	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7fe fca9 	bl	8009642 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	4b1b      	ldr	r3, [pc, #108]	; (800ad64 <xTaskIncrementTick+0x170>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d3b4      	bcc.n	800ac68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad02:	e7b1      	b.n	800ac68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad04:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <xTaskIncrementTick+0x170>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0a:	4915      	ldr	r1, [pc, #84]	; (800ad60 <xTaskIncrementTick+0x16c>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d907      	bls.n	800ad2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	e004      	b.n	800ad2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad22:	4b11      	ldr	r3, [pc, #68]	; (800ad68 <xTaskIncrementTick+0x174>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3301      	adds	r3, #1
 800ad28:	4a0f      	ldr	r2, [pc, #60]	; (800ad68 <xTaskIncrementTick+0x174>)
 800ad2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <xTaskIncrementTick+0x178>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad38:	697b      	ldr	r3, [r7, #20]
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3718      	adds	r7, #24
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	2000138c 	.word	0x2000138c
 800ad48:	20001368 	.word	0x20001368
 800ad4c:	2000131c 	.word	0x2000131c
 800ad50:	20001320 	.word	0x20001320
 800ad54:	2000137c 	.word	0x2000137c
 800ad58:	20001384 	.word	0x20001384
 800ad5c:	2000136c 	.word	0x2000136c
 800ad60:	20001268 	.word	0x20001268
 800ad64:	20001264 	.word	0x20001264
 800ad68:	20001374 	.word	0x20001374
 800ad6c:	20001378 	.word	0x20001378

0800ad70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad76:	4b29      	ldr	r3, [pc, #164]	; (800ae1c <vTaskSwitchContext+0xac>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad7e:	4b28      	ldr	r3, [pc, #160]	; (800ae20 <vTaskSwitchContext+0xb0>)
 800ad80:	2201      	movs	r2, #1
 800ad82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad84:	e044      	b.n	800ae10 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ad86:	4b26      	ldr	r3, [pc, #152]	; (800ae20 <vTaskSwitchContext+0xb0>)
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad8c:	4b25      	ldr	r3, [pc, #148]	; (800ae24 <vTaskSwitchContext+0xb4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	fab3 f383 	clz	r3, r3
 800ad98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	f1c3 031f 	rsb	r3, r3, #31
 800ada0:	617b      	str	r3, [r7, #20]
 800ada2:	4921      	ldr	r1, [pc, #132]	; (800ae28 <vTaskSwitchContext+0xb8>)
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	440b      	add	r3, r1
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10a      	bne.n	800adcc <vTaskSwitchContext+0x5c>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	607b      	str	r3, [r7, #4]
}
 800adc8:	bf00      	nop
 800adca:	e7fe      	b.n	800adca <vTaskSwitchContext+0x5a>
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4a14      	ldr	r2, [pc, #80]	; (800ae28 <vTaskSwitchContext+0xb8>)
 800add8:	4413      	add	r3, r2
 800adda:	613b      	str	r3, [r7, #16]
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	685a      	ldr	r2, [r3, #4]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	605a      	str	r2, [r3, #4]
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	3308      	adds	r3, #8
 800adee:	429a      	cmp	r2, r3
 800adf0:	d104      	bne.n	800adfc <vTaskSwitchContext+0x8c>
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	605a      	str	r2, [r3, #4]
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	4a0a      	ldr	r2, [pc, #40]	; (800ae2c <vTaskSwitchContext+0xbc>)
 800ae04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae06:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <vTaskSwitchContext+0xbc>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	334c      	adds	r3, #76	; 0x4c
 800ae0c:	4a08      	ldr	r2, [pc, #32]	; (800ae30 <vTaskSwitchContext+0xc0>)
 800ae0e:	6013      	str	r3, [r2, #0]
}
 800ae10:	bf00      	nop
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bc80      	pop	{r7}
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	2000138c 	.word	0x2000138c
 800ae20:	20001378 	.word	0x20001378
 800ae24:	2000136c 	.word	0x2000136c
 800ae28:	20001268 	.word	0x20001268
 800ae2c:	20001264 	.word	0x20001264
 800ae30:	2000025c 	.word	0x2000025c

0800ae34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60fb      	str	r3, [r7, #12]
}
 800ae56:	bf00      	nop
 800ae58:	e7fe      	b.n	800ae58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <vTaskPlaceOnEventList+0x44>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3318      	adds	r3, #24
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7fe fc10 	bl	8009688 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae68:	2101      	movs	r1, #1
 800ae6a:	6838      	ldr	r0, [r7, #0]
 800ae6c:	f000 fc48 	bl	800b700 <prvAddCurrentTaskToDelayedList>
}
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20001264 	.word	0x20001264

0800ae7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ae92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	60fb      	str	r3, [r7, #12]
}
 800aea4:	bf00      	nop
 800aea6:	e7fe      	b.n	800aea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3318      	adds	r3, #24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe fc23 	bl	80096f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeb2:	4b1d      	ldr	r3, [pc, #116]	; (800af28 <xTaskRemoveFromEventList+0xac>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d11c      	bne.n	800aef4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fc1a 	bl	80096f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	2201      	movs	r2, #1
 800aeca:	409a      	lsls	r2, r3
 800aecc:	4b17      	ldr	r3, [pc, #92]	; (800af2c <xTaskRemoveFromEventList+0xb0>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4313      	orrs	r3, r2
 800aed2:	4a16      	ldr	r2, [pc, #88]	; (800af2c <xTaskRemoveFromEventList+0xb0>)
 800aed4:	6013      	str	r3, [r2, #0]
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeda:	4613      	mov	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4a13      	ldr	r2, [pc, #76]	; (800af30 <xTaskRemoveFromEventList+0xb4>)
 800aee4:	441a      	add	r2, r3
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	3304      	adds	r3, #4
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f7fe fba8 	bl	8009642 <vListInsertEnd>
 800aef2:	e005      	b.n	800af00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	3318      	adds	r3, #24
 800aef8:	4619      	mov	r1, r3
 800aefa:	480e      	ldr	r0, [pc, #56]	; (800af34 <xTaskRemoveFromEventList+0xb8>)
 800aefc:	f7fe fba1 	bl	8009642 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <xTaskRemoveFromEventList+0xbc>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d905      	bls.n	800af1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af12:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <xTaskRemoveFromEventList+0xc0>)
 800af14:	2201      	movs	r2, #1
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	e001      	b.n	800af1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800af1e:	697b      	ldr	r3, [r7, #20]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3718      	adds	r7, #24
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	2000138c 	.word	0x2000138c
 800af2c:	2000136c 	.word	0x2000136c
 800af30:	20001268 	.word	0x20001268
 800af34:	20001324 	.word	0x20001324
 800af38:	20001264 	.word	0x20001264
 800af3c:	20001378 	.word	0x20001378

0800af40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <vTaskInternalSetTimeOutState+0x24>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af50:	4b05      	ldr	r3, [pc, #20]	; (800af68 <vTaskInternalSetTimeOutState+0x28>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	605a      	str	r2, [r3, #4]
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000137c 	.word	0x2000137c
 800af68:	20001368 	.word	0x20001368

0800af6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10a      	bne.n	800af92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	613b      	str	r3, [r7, #16]
}
 800af8e:	bf00      	nop
 800af90:	e7fe      	b.n	800af90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800af98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	60fb      	str	r3, [r7, #12]
}
 800afaa:	bf00      	nop
 800afac:	e7fe      	b.n	800afac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800afae:	f000 fcfd 	bl	800b9ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afb2:	4b1d      	ldr	r3, [pc, #116]	; (800b028 <xTaskCheckForTimeOut+0xbc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afca:	d102      	bne.n	800afd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afcc:	2300      	movs	r3, #0
 800afce:	61fb      	str	r3, [r7, #28]
 800afd0:	e023      	b.n	800b01a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <xTaskCheckForTimeOut+0xc0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d007      	beq.n	800afee <xTaskCheckForTimeOut+0x82>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d302      	bcc.n	800afee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afe8:	2301      	movs	r3, #1
 800afea:	61fb      	str	r3, [r7, #28]
 800afec:	e015      	b.n	800b01a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d20b      	bcs.n	800b010 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	1ad2      	subs	r2, r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff9b 	bl	800af40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b00a:	2300      	movs	r3, #0
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	e004      	b.n	800b01a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b016:	2301      	movs	r3, #1
 800b018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b01a:	f000 fcf7 	bl	800ba0c <vPortExitCritical>

	return xReturn;
 800b01e:	69fb      	ldr	r3, [r7, #28]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3720      	adds	r7, #32
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	20001368 	.word	0x20001368
 800b02c:	2000137c 	.word	0x2000137c

0800b030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b034:	4b03      	ldr	r3, [pc, #12]	; (800b044 <vTaskMissedYield+0x14>)
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]
}
 800b03a:	bf00      	nop
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bc80      	pop	{r7}
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20001378 	.word	0x20001378

0800b048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b050:	f000 f852 	bl	800b0f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b054:	4b06      	ldr	r3, [pc, #24]	; (800b070 <prvIdleTask+0x28>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d9f9      	bls.n	800b050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b05c:	4b05      	ldr	r3, [pc, #20]	; (800b074 <prvIdleTask+0x2c>)
 800b05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b062:	601a      	str	r2, [r3, #0]
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b06c:	e7f0      	b.n	800b050 <prvIdleTask+0x8>
 800b06e:	bf00      	nop
 800b070:	20001268 	.word	0x20001268
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]
 800b082:	e00c      	b.n	800b09e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4a12      	ldr	r2, [pc, #72]	; (800b0d8 <prvInitialiseTaskLists+0x60>)
 800b090:	4413      	add	r3, r2
 800b092:	4618      	mov	r0, r3
 800b094:	f7fe faaa 	bl	80095ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3301      	adds	r3, #1
 800b09c:	607b      	str	r3, [r7, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b06      	cmp	r3, #6
 800b0a2:	d9ef      	bls.n	800b084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b0a4:	480d      	ldr	r0, [pc, #52]	; (800b0dc <prvInitialiseTaskLists+0x64>)
 800b0a6:	f7fe faa1 	bl	80095ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0aa:	480d      	ldr	r0, [pc, #52]	; (800b0e0 <prvInitialiseTaskLists+0x68>)
 800b0ac:	f7fe fa9e 	bl	80095ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0b0:	480c      	ldr	r0, [pc, #48]	; (800b0e4 <prvInitialiseTaskLists+0x6c>)
 800b0b2:	f7fe fa9b 	bl	80095ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0b6:	480c      	ldr	r0, [pc, #48]	; (800b0e8 <prvInitialiseTaskLists+0x70>)
 800b0b8:	f7fe fa98 	bl	80095ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0bc:	480b      	ldr	r0, [pc, #44]	; (800b0ec <prvInitialiseTaskLists+0x74>)
 800b0be:	f7fe fa95 	bl	80095ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <prvInitialiseTaskLists+0x78>)
 800b0c4:	4a05      	ldr	r2, [pc, #20]	; (800b0dc <prvInitialiseTaskLists+0x64>)
 800b0c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0c8:	4b0a      	ldr	r3, [pc, #40]	; (800b0f4 <prvInitialiseTaskLists+0x7c>)
 800b0ca:	4a05      	ldr	r2, [pc, #20]	; (800b0e0 <prvInitialiseTaskLists+0x68>)
 800b0cc:	601a      	str	r2, [r3, #0]
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	20001268 	.word	0x20001268
 800b0dc:	200012f4 	.word	0x200012f4
 800b0e0:	20001308 	.word	0x20001308
 800b0e4:	20001324 	.word	0x20001324
 800b0e8:	20001338 	.word	0x20001338
 800b0ec:	20001350 	.word	0x20001350
 800b0f0:	2000131c 	.word	0x2000131c
 800b0f4:	20001320 	.word	0x20001320

0800b0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0fe:	e019      	b.n	800b134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b100:	f000 fc54 	bl	800b9ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b104:	4b10      	ldr	r3, [pc, #64]	; (800b148 <prvCheckTasksWaitingTermination+0x50>)
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3304      	adds	r3, #4
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe faf1 	bl	80096f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b116:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <prvCheckTasksWaitingTermination+0x54>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3b01      	subs	r3, #1
 800b11c:	4a0b      	ldr	r2, [pc, #44]	; (800b14c <prvCheckTasksWaitingTermination+0x54>)
 800b11e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b120:	4b0b      	ldr	r3, [pc, #44]	; (800b150 <prvCheckTasksWaitingTermination+0x58>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	3b01      	subs	r3, #1
 800b126:	4a0a      	ldr	r2, [pc, #40]	; (800b150 <prvCheckTasksWaitingTermination+0x58>)
 800b128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b12a:	f000 fc6f 	bl	800ba0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f810 	bl	800b154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b134:	4b06      	ldr	r3, [pc, #24]	; (800b150 <prvCheckTasksWaitingTermination+0x58>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e1      	bne.n	800b100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20001338 	.word	0x20001338
 800b14c:	20001364 	.word	0x20001364
 800b150:	2000134c 	.word	0x2000134c

0800b154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	334c      	adds	r3, #76	; 0x4c
 800b160:	4618      	mov	r0, r3
 800b162:	f000 ffed 	bl	800c140 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d108      	bne.n	800b182 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fddd 	bl	800bd34 <vPortFree>
				vPortFree( pxTCB );
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fdda 	bl	800bd34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b180:	e018      	b.n	800b1b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d103      	bne.n	800b194 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fdd1 	bl	800bd34 <vPortFree>
	}
 800b192:	e00f      	b.n	800b1b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d00a      	beq.n	800b1b4 <prvDeleteTCB+0x60>
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	60fb      	str	r3, [r7, #12]
}
 800b1b0:	bf00      	nop
 800b1b2:	e7fe      	b.n	800b1b2 <prvDeleteTCB+0x5e>
	}
 800b1b4:	bf00      	nop
 800b1b6:	3710      	adds	r7, #16
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1c2:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <prvResetNextTaskUnblockTime+0x40>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <prvResetNextTaskUnblockTime+0x14>
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e000      	b.n	800b1d2 <prvResetNextTaskUnblockTime+0x16>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d6:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <prvResetNextTaskUnblockTime+0x44>)
 800b1d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1de:	e008      	b.n	800b1f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1e0:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <prvResetNextTaskUnblockTime+0x40>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	4a04      	ldr	r2, [pc, #16]	; (800b200 <prvResetNextTaskUnblockTime+0x44>)
 800b1f0:	6013      	str	r3, [r2, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	370c      	adds	r7, #12
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bc80      	pop	{r7}
 800b1fa:	4770      	bx	lr
 800b1fc:	2000131c 	.word	0x2000131c
 800b200:	20001384 	.word	0x20001384

0800b204 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b20a:	4b0b      	ldr	r3, [pc, #44]	; (800b238 <xTaskGetSchedulerState+0x34>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d102      	bne.n	800b218 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b212:	2301      	movs	r3, #1
 800b214:	607b      	str	r3, [r7, #4]
 800b216:	e008      	b.n	800b22a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b218:	4b08      	ldr	r3, [pc, #32]	; (800b23c <xTaskGetSchedulerState+0x38>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b220:	2302      	movs	r3, #2
 800b222:	607b      	str	r3, [r7, #4]
 800b224:	e001      	b.n	800b22a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b226:	2300      	movs	r3, #0
 800b228:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b22a:	687b      	ldr	r3, [r7, #4]
	}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	bc80      	pop	{r7}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	20001370 	.word	0x20001370
 800b23c:	2000138c 	.word	0x2000138c

0800b240 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b24c:	2300      	movs	r3, #0
 800b24e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d06e      	beq.n	800b334 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b256:	4b3a      	ldr	r3, [pc, #232]	; (800b340 <xTaskPriorityDisinherit+0x100>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d00a      	beq.n	800b276 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	60fb      	str	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d10a      	bne.n	800b294 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	60bb      	str	r3, [r7, #8]
}
 800b290:	bf00      	nop
 800b292:	e7fe      	b.n	800b292 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b298:	1e5a      	subs	r2, r3, #1
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d044      	beq.n	800b334 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d140      	bne.n	800b334 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	3304      	adds	r3, #4
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fe fa1e 	bl	80096f8 <uxListRemove>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d115      	bne.n	800b2ee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	491f      	ldr	r1, [pc, #124]	; (800b344 <xTaskPriorityDisinherit+0x104>)
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	440b      	add	r3, r1
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10a      	bne.n	800b2ee <xTaskPriorityDisinherit+0xae>
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2dc:	2201      	movs	r2, #1
 800b2de:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e2:	43da      	mvns	r2, r3
 800b2e4:	4b18      	ldr	r3, [pc, #96]	; (800b348 <xTaskPriorityDisinherit+0x108>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	4a17      	ldr	r2, [pc, #92]	; (800b348 <xTaskPriorityDisinherit+0x108>)
 800b2ec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fa:	f1c3 0207 	rsb	r2, r3, #7
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	2201      	movs	r2, #1
 800b308:	409a      	lsls	r2, r3
 800b30a:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <xTaskPriorityDisinherit+0x108>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4313      	orrs	r3, r2
 800b310:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <xTaskPriorityDisinherit+0x108>)
 800b312:	6013      	str	r3, [r2, #0]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b318:	4613      	mov	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4a08      	ldr	r2, [pc, #32]	; (800b344 <xTaskPriorityDisinherit+0x104>)
 800b322:	441a      	add	r2, r3
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	3304      	adds	r3, #4
 800b328:	4619      	mov	r1, r3
 800b32a:	4610      	mov	r0, r2
 800b32c:	f7fe f989 	bl	8009642 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b334:	697b      	ldr	r3, [r7, #20]
	}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20001264 	.word	0x20001264
 800b344:	20001268 	.word	0x20001268
 800b348:	2000136c 	.word	0x2000136c

0800b34c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800b35a:	f000 fb27 	bl	800b9ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b35e:	4b29      	ldr	r3, [pc, #164]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d01c      	beq.n	800b3a6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800b36c:	4b25      	ldr	r3, [pc, #148]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b374:	68fa      	ldr	r2, [r7, #12]
 800b376:	43d2      	mvns	r2, r2
 800b378:	400a      	ands	r2, r1
 800b37a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b37e:	4b21      	ldr	r3, [pc, #132]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00b      	beq.n	800b3a6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b38e:	2101      	movs	r1, #1
 800b390:	6838      	ldr	r0, [r7, #0]
 800b392:	f000 f9b5 	bl	800b700 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b396:	4b1c      	ldr	r3, [pc, #112]	; (800b408 <xTaskNotifyWait+0xbc>)
 800b398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b3a6:	f000 fb31 	bl	800ba0c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b3aa:	f000 faff 	bl	800b9ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800b3b4:	4b13      	ldr	r3, [pc, #76]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d002      	beq.n	800b3d4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	617b      	str	r3, [r7, #20]
 800b3d2:	e00a      	b.n	800b3ea <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800b3d4:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	43d2      	mvns	r2, r2
 800b3e0:	400a      	ands	r2, r1
 800b3e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ea:	4b06      	ldr	r3, [pc, #24]	; (800b404 <xTaskNotifyWait+0xb8>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800b3f4:	f000 fb0a 	bl	800ba0c <vPortExitCritical>

		return xReturn;
 800b3f8:	697b      	ldr	r3, [r7, #20]
	}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20001264 	.word	0x20001264
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b08a      	sub	sp, #40	; 0x28
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	603b      	str	r3, [r7, #0]
 800b418:	4613      	mov	r3, r2
 800b41a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b41c:	2301      	movs	r3, #1
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <xTaskGenericNotify+0x30>
	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	61bb      	str	r3, [r7, #24]
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b440:	f000 fab4 	bl	800b9ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d004      	beq.n	800b454 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b45a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b464:	79fb      	ldrb	r3, [r7, #7]
 800b466:	2b04      	cmp	r3, #4
 800b468:	d82d      	bhi.n	800b4c6 <xTaskGenericNotify+0xba>
 800b46a:	a201      	add	r2, pc, #4	; (adr r2, 800b470 <xTaskGenericNotify+0x64>)
 800b46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b470:	0800b4c7 	.word	0x0800b4c7
 800b474:	0800b485 	.word	0x0800b485
 800b478:	0800b497 	.word	0x0800b497
 800b47c:	0800b4a7 	.word	0x0800b4a7
 800b480:	0800b4b1 	.word	0x0800b4b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	431a      	orrs	r2, r3
 800b48e:	6a3b      	ldr	r3, [r7, #32]
 800b490:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b494:	e017      	b.n	800b4c6 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b4a4:	e00f      	b.n	800b4c6 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b4ae:	e00a      	b.n	800b4c6 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b4b0:	7ffb      	ldrb	r3, [r7, #31]
 800b4b2:	2b02      	cmp	r3, #2
 800b4b4:	d004      	beq.n	800b4c0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b4be:	e001      	b.n	800b4c4 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b4c4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b4c6:	7ffb      	ldrb	r3, [r7, #31]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d139      	bne.n	800b540 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe f911 	bl	80096f8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4da:	2201      	movs	r2, #1
 800b4dc:	409a      	lsls	r2, r3
 800b4de:	4b1c      	ldr	r3, [pc, #112]	; (800b550 <xTaskGenericNotify+0x144>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <xTaskGenericNotify+0x144>)
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4a17      	ldr	r2, [pc, #92]	; (800b554 <xTaskGenericNotify+0x148>)
 800b4f6:	441a      	add	r2, r3
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe f89f 	bl	8009642 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b504:	6a3b      	ldr	r3, [r7, #32]
 800b506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <xTaskGenericNotify+0x116>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	617b      	str	r3, [r7, #20]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b526:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <xTaskGenericNotify+0x14c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d907      	bls.n	800b540 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b530:	4b0a      	ldr	r3, [pc, #40]	; (800b55c <xTaskGenericNotify+0x150>)
 800b532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b540:	f000 fa64 	bl	800ba0c <vPortExitCritical>

		return xReturn;
 800b544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b546:	4618      	mov	r0, r3
 800b548:	3728      	adds	r7, #40	; 0x28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	2000136c 	.word	0x2000136c
 800b554:	20001268 	.word	0x20001268
 800b558:	20001264 	.word	0x20001264
 800b55c:	e000ed04 	.word	0xe000ed04

0800b560 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	; 0x38
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	603b      	str	r3, [r7, #0]
 800b56c:	4613      	mov	r3, r2
 800b56e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b570:	2301      	movs	r3, #1
 800b572:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b58c:	bf00      	nop
 800b58e:	e7fe      	b.n	800b58e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b590:	f000 face 	bl	800bb30 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b598:	f3ef 8211 	mrs	r2, BASEPRI
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	623a      	str	r2, [r7, #32]
 800b5ae:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b5b0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800b5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d82f      	bhi.n	800b63c <xTaskGenericNotifyFromISR+0xdc>
 800b5dc:	a201      	add	r2, pc, #4	; (adr r2, 800b5e4 <xTaskGenericNotifyFromISR+0x84>)
 800b5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e2:	bf00      	nop
 800b5e4:	0800b63d 	.word	0x0800b63d
 800b5e8:	0800b5f9 	.word	0x0800b5f9
 800b5ec:	0800b60b 	.word	0x0800b60b
 800b5f0:	0800b61b 	.word	0x0800b61b
 800b5f4:	0800b625 	.word	0x0800b625
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	431a      	orrs	r2, r3
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b608:	e018      	b.n	800b63c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b618:	e010      	b.n	800b63c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800b622:	e00b      	b.n	800b63c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d004      	beq.n	800b636 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b634:	e001      	b.n	800b63a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800b636:	2300      	movs	r3, #0
 800b638:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b63a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b63c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b640:	2b01      	cmp	r3, #1
 800b642:	d146      	bne.n	800b6d2 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d00a      	beq.n	800b662 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	61bb      	str	r3, [r7, #24]
}
 800b65e:	bf00      	nop
 800b660:	e7fe      	b.n	800b660 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b662:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <xTaskGenericNotifyFromISR+0x188>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d11c      	bne.n	800b6a4 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	3304      	adds	r3, #4
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe f842 	bl	80096f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	2201      	movs	r2, #1
 800b67a:	409a      	lsls	r2, r3
 800b67c:	4b1b      	ldr	r3, [pc, #108]	; (800b6ec <xTaskGenericNotifyFromISR+0x18c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4313      	orrs	r3, r2
 800b682:	4a1a      	ldr	r2, [pc, #104]	; (800b6ec <xTaskGenericNotifyFromISR+0x18c>)
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4a17      	ldr	r2, [pc, #92]	; (800b6f0 <xTaskGenericNotifyFromISR+0x190>)
 800b694:	441a      	add	r2, r3
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fd ffd0 	bl	8009642 <vListInsertEnd>
 800b6a2:	e005      	b.n	800b6b0 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	4812      	ldr	r0, [pc, #72]	; (800b6f4 <xTaskGenericNotifyFromISR+0x194>)
 800b6ac:	f7fd ffc9 	bl	8009642 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <xTaskGenericNotifyFromISR+0x198>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d909      	bls.n	800b6d2 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b6be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	601a      	str	r2, [r3, #0]
 800b6ca:	e002      	b.n	800b6d2 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800b6cc:	4b0b      	ldr	r3, [pc, #44]	; (800b6fc <xTaskGenericNotifyFromISR+0x19c>)
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d4:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	f383 8811 	msr	BASEPRI, r3
}
 800b6dc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3738      	adds	r7, #56	; 0x38
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	2000138c 	.word	0x2000138c
 800b6ec:	2000136c 	.word	0x2000136c
 800b6f0:	20001268 	.word	0x20001268
 800b6f4:	20001324 	.word	0x20001324
 800b6f8:	20001264 	.word	0x20001264
 800b6fc:	20001378 	.word	0x20001378

0800b700 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b70a:	4b29      	ldr	r3, [pc, #164]	; (800b7b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b710:	4b28      	ldr	r3, [pc, #160]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3304      	adds	r3, #4
 800b716:	4618      	mov	r0, r3
 800b718:	f7fd ffee 	bl	80096f8 <uxListRemove>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10b      	bne.n	800b73a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b722:	4b24      	ldr	r3, [pc, #144]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b728:	2201      	movs	r2, #1
 800b72a:	fa02 f303 	lsl.w	r3, r2, r3
 800b72e:	43da      	mvns	r2, r3
 800b730:	4b21      	ldr	r3, [pc, #132]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4013      	ands	r3, r2
 800b736:	4a20      	ldr	r2, [pc, #128]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b738:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b740:	d10a      	bne.n	800b758 <prvAddCurrentTaskToDelayedList+0x58>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b748:	4b1a      	ldr	r3, [pc, #104]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	481a      	ldr	r0, [pc, #104]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xbc>)
 800b752:	f7fd ff76 	bl	8009642 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b756:	e026      	b.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4413      	add	r3, r2
 800b75e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b760:	4b14      	ldr	r3, [pc, #80]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d209      	bcs.n	800b784 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b770:	4b13      	ldr	r3, [pc, #76]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f7fd ff83 	bl	8009688 <vListInsert>
}
 800b782:	e010      	b.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3304      	adds	r3, #4
 800b78e:	4619      	mov	r1, r3
 800b790:	4610      	mov	r0, r2
 800b792:	f7fd ff79 	bl	8009688 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d202      	bcs.n	800b7a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b7a0:	4a09      	ldr	r2, [pc, #36]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6013      	str	r3, [r2, #0]
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20001368 	.word	0x20001368
 800b7b4:	20001264 	.word	0x20001264
 800b7b8:	2000136c 	.word	0x2000136c
 800b7bc:	20001350 	.word	0x20001350
 800b7c0:	20001320 	.word	0x20001320
 800b7c4:	2000131c 	.word	0x2000131c
 800b7c8:	20001384 	.word	0x20001384

0800b7cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b7e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	3b04      	subs	r3, #4
 800b7ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f023 0201 	bic.w	r2, r3, #1
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b04      	subs	r3, #4
 800b7fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b7fc:	4a08      	ldr	r2, [pc, #32]	; (800b820 <pxPortInitialiseStack+0x54>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b14      	subs	r3, #20
 800b806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3b20      	subs	r3, #32
 800b812:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b814:	68fb      	ldr	r3, [r7, #12]
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bc80      	pop	{r7}
 800b81e:	4770      	bx	lr
 800b820:	0800b825 	.word	0x0800b825

0800b824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b82e:	4b12      	ldr	r3, [pc, #72]	; (800b878 <prvTaskExitError+0x54>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b836:	d00a      	beq.n	800b84e <prvTaskExitError+0x2a>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	f383 8811 	msr	BASEPRI, r3
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	f3bf 8f4f 	dsb	sy
 800b848:	60fb      	str	r3, [r7, #12]
}
 800b84a:	bf00      	nop
 800b84c:	e7fe      	b.n	800b84c <prvTaskExitError+0x28>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60bb      	str	r3, [r7, #8]
}
 800b860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b862:	bf00      	nop
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0fc      	beq.n	800b864 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b86a:	bf00      	nop
 800b86c:	bf00      	nop
 800b86e:	3714      	adds	r7, #20
 800b870:	46bd      	mov	sp, r7
 800b872:	bc80      	pop	{r7}
 800b874:	4770      	bx	lr
 800b876:	bf00      	nop
 800b878:	2000020c 	.word	0x2000020c
 800b87c:	00000000 	.word	0x00000000

0800b880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <pxCurrentTCBConst2>)
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6808      	ldr	r0, [r1, #0]
 800b886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b88a:	f380 8809 	msr	PSP, r0
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f04f 0000 	mov.w	r0, #0
 800b896:	f380 8811 	msr	BASEPRI, r0
 800b89a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b89e:	4770      	bx	lr

0800b8a0 <pxCurrentTCBConst2>:
 800b8a0:	20001264 	.word	0x20001264
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop

0800b8a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b8a8:	4806      	ldr	r0, [pc, #24]	; (800b8c4 <prvPortStartFirstTask+0x1c>)
 800b8aa:	6800      	ldr	r0, [r0, #0]
 800b8ac:	6800      	ldr	r0, [r0, #0]
 800b8ae:	f380 8808 	msr	MSP, r0
 800b8b2:	b662      	cpsie	i
 800b8b4:	b661      	cpsie	f
 800b8b6:	f3bf 8f4f 	dsb	sy
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	df00      	svc	0
 800b8c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b8c2:	bf00      	nop
 800b8c4:	e000ed08 	.word	0xe000ed08

0800b8c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b8ce:	4b32      	ldr	r3, [pc, #200]	; (800b998 <xPortStartScheduler+0xd0>)
 800b8d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	22ff      	movs	r2, #255	; 0xff
 800b8de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b8e8:	78fb      	ldrb	r3, [r7, #3]
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	4b2a      	ldr	r3, [pc, #168]	; (800b99c <xPortStartScheduler+0xd4>)
 800b8f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b8f6:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b8f8:	2207      	movs	r2, #7
 800b8fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b8fc:	e009      	b.n	800b912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b8fe:	4b28      	ldr	r3, [pc, #160]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3b01      	subs	r3, #1
 800b904:	4a26      	ldr	r2, [pc, #152]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b908:	78fb      	ldrb	r3, [r7, #3]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b912:	78fb      	ldrb	r3, [r7, #3]
 800b914:	b2db      	uxtb	r3, r3
 800b916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b91a:	2b80      	cmp	r3, #128	; 0x80
 800b91c:	d0ef      	beq.n	800b8fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b91e:	4b20      	ldr	r3, [pc, #128]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f1c3 0307 	rsb	r3, r3, #7
 800b926:	2b04      	cmp	r3, #4
 800b928:	d00a      	beq.n	800b940 <xPortStartScheduler+0x78>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	60bb      	str	r3, [r7, #8]
}
 800b93c:	bf00      	nop
 800b93e:	e7fe      	b.n	800b93e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b940:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	021b      	lsls	r3, r3, #8
 800b946:	4a16      	ldr	r2, [pc, #88]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b948:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b94a:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b952:	4a13      	ldr	r2, [pc, #76]	; (800b9a0 <xPortStartScheduler+0xd8>)
 800b954:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b95e:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <xPortStartScheduler+0xdc>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a10      	ldr	r2, [pc, #64]	; (800b9a4 <xPortStartScheduler+0xdc>)
 800b964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <xPortStartScheduler+0xdc>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a0d      	ldr	r2, [pc, #52]	; (800b9a4 <xPortStartScheduler+0xdc>)
 800b970:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b974:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b976:	f000 f8b9 	bl	800baec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b97a:	4b0b      	ldr	r3, [pc, #44]	; (800b9a8 <xPortStartScheduler+0xe0>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b980:	f7ff ff92 	bl	800b8a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b984:	f7ff f9f4 	bl	800ad70 <vTaskSwitchContext>
	prvTaskExitError();
 800b988:	f7ff ff4c 	bl	800b824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	e000e400 	.word	0xe000e400
 800b99c:	20001390 	.word	0x20001390
 800b9a0:	20001394 	.word	0x20001394
 800b9a4:	e000ed20 	.word	0xe000ed20
 800b9a8:	2000020c 	.word	0x2000020c

0800b9ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	607b      	str	r3, [r7, #4]
}
 800b9c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b9c6:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <vPortEnterCritical+0x58>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	4a0d      	ldr	r2, [pc, #52]	; (800ba04 <vPortEnterCritical+0x58>)
 800b9ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <vPortEnterCritical+0x58>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d10f      	bne.n	800b9f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ba08 <vPortEnterCritical+0x5c>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00a      	beq.n	800b9f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e6:	f383 8811 	msr	BASEPRI, r3
 800b9ea:	f3bf 8f6f 	isb	sy
 800b9ee:	f3bf 8f4f 	dsb	sy
 800b9f2:	603b      	str	r3, [r7, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	e7fe      	b.n	800b9f6 <vPortEnterCritical+0x4a>
	}
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bc80      	pop	{r7}
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	2000020c 	.word	0x2000020c
 800ba08:	e000ed04 	.word	0xe000ed04

0800ba0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ba12:	4b11      	ldr	r3, [pc, #68]	; (800ba58 <vPortExitCritical+0x4c>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10a      	bne.n	800ba30 <vPortExitCritical+0x24>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
}
 800ba2c:	bf00      	nop
 800ba2e:	e7fe      	b.n	800ba2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ba30:	4b09      	ldr	r3, [pc, #36]	; (800ba58 <vPortExitCritical+0x4c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	3b01      	subs	r3, #1
 800ba36:	4a08      	ldr	r2, [pc, #32]	; (800ba58 <vPortExitCritical+0x4c>)
 800ba38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ba3a:	4b07      	ldr	r3, [pc, #28]	; (800ba58 <vPortExitCritical+0x4c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d105      	bne.n	800ba4e <vPortExitCritical+0x42>
 800ba42:	2300      	movs	r3, #0
 800ba44:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f383 8811 	msr	BASEPRI, r3
}
 800ba4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bc80      	pop	{r7}
 800ba56:	4770      	bx	lr
 800ba58:	2000020c 	.word	0x2000020c
 800ba5c:	00000000 	.word	0x00000000

0800ba60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ba60:	f3ef 8009 	mrs	r0, PSP
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	4b0d      	ldr	r3, [pc, #52]	; (800baa0 <pxCurrentTCBConst>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba70:	6010      	str	r0, [r2, #0]
 800ba72:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ba76:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ba7a:	f380 8811 	msr	BASEPRI, r0
 800ba7e:	f7ff f977 	bl	800ad70 <vTaskSwitchContext>
 800ba82:	f04f 0000 	mov.w	r0, #0
 800ba86:	f380 8811 	msr	BASEPRI, r0
 800ba8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba8e:	6819      	ldr	r1, [r3, #0]
 800ba90:	6808      	ldr	r0, [r1, #0]
 800ba92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ba96:	f380 8809 	msr	PSP, r0
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	4770      	bx	lr

0800baa0 <pxCurrentTCBConst>:
 800baa0:	20001264 	.word	0x20001264
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800baa4:	bf00      	nop
 800baa6:	bf00      	nop

0800baa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	607b      	str	r3, [r7, #4]
}
 800bac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bac2:	f7ff f897 	bl	800abf4 <xTaskIncrementTick>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bacc:	4b06      	ldr	r3, [pc, #24]	; (800bae8 <SysTick_Handler+0x40>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	f383 8811 	msr	BASEPRI, r3
}
 800bade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bae0:	bf00      	nop
 800bae2:	3708      	adds	r7, #8
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	e000ed04 	.word	0xe000ed04

0800baec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800baec:	b480      	push	{r7}
 800baee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800baf0:	4b0a      	ldr	r3, [pc, #40]	; (800bb1c <vPortSetupTimerInterrupt+0x30>)
 800baf2:	2200      	movs	r2, #0
 800baf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800baf6:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <vPortSetupTimerInterrupt+0x34>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bafc:	4b09      	ldr	r3, [pc, #36]	; (800bb24 <vPortSetupTimerInterrupt+0x38>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a09      	ldr	r2, [pc, #36]	; (800bb28 <vPortSetupTimerInterrupt+0x3c>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	099b      	lsrs	r3, r3, #6
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <vPortSetupTimerInterrupt+0x40>)
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bb0e:	4b03      	ldr	r3, [pc, #12]	; (800bb1c <vPortSetupTimerInterrupt+0x30>)
 800bb10:	2207      	movs	r2, #7
 800bb12:	601a      	str	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr
 800bb1c:	e000e010 	.word	0xe000e010
 800bb20:	e000e018 	.word	0xe000e018
 800bb24:	20000200 	.word	0x20000200
 800bb28:	10624dd3 	.word	0x10624dd3
 800bb2c:	e000e014 	.word	0xe000e014

0800bb30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bb36:	f3ef 8305 	mrs	r3, IPSR
 800bb3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b0f      	cmp	r3, #15
 800bb40:	d914      	bls.n	800bb6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bb42:	4a16      	ldr	r2, [pc, #88]	; (800bb9c <vPortValidateInterruptPriority+0x6c>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bb4c:	4b14      	ldr	r3, [pc, #80]	; (800bba0 <vPortValidateInterruptPriority+0x70>)
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	7afa      	ldrb	r2, [r7, #11]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d20a      	bcs.n	800bb6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	607b      	str	r3, [r7, #4]
}
 800bb68:	bf00      	nop
 800bb6a:	e7fe      	b.n	800bb6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bb6c:	4b0d      	ldr	r3, [pc, #52]	; (800bba4 <vPortValidateInterruptPriority+0x74>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <vPortValidateInterruptPriority+0x78>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d90a      	bls.n	800bb92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	f383 8811 	msr	BASEPRI, r3
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	f3bf 8f4f 	dsb	sy
 800bb8c:	603b      	str	r3, [r7, #0]
}
 800bb8e:	bf00      	nop
 800bb90:	e7fe      	b.n	800bb90 <vPortValidateInterruptPriority+0x60>
	}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bc80      	pop	{r7}
 800bb9a:	4770      	bx	lr
 800bb9c:	e000e3f0 	.word	0xe000e3f0
 800bba0:	20001390 	.word	0x20001390
 800bba4:	e000ed0c 	.word	0xe000ed0c
 800bba8:	20001394 	.word	0x20001394

0800bbac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b08a      	sub	sp, #40	; 0x28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bbb8:	f7fe ff64 	bl	800aa84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bbbc:	4b58      	ldr	r3, [pc, #352]	; (800bd20 <pvPortMalloc+0x174>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d101      	bne.n	800bbc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bbc4:	f000 f910 	bl	800bde8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bbc8:	4b56      	ldr	r3, [pc, #344]	; (800bd24 <pvPortMalloc+0x178>)
 800bbca:	681a      	ldr	r2, [r3, #0]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 808e 	bne.w	800bcf2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01d      	beq.n	800bc18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bbdc:	2208      	movs	r2, #8
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d014      	beq.n	800bc18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f023 0307 	bic.w	r3, r3, #7
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f003 0307 	and.w	r3, r3, #7
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00a      	beq.n	800bc18 <pvPortMalloc+0x6c>
	__asm volatile
 800bc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc06:	f383 8811 	msr	BASEPRI, r3
 800bc0a:	f3bf 8f6f 	isb	sy
 800bc0e:	f3bf 8f4f 	dsb	sy
 800bc12:	617b      	str	r3, [r7, #20]
}
 800bc14:	bf00      	nop
 800bc16:	e7fe      	b.n	800bc16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d069      	beq.n	800bcf2 <pvPortMalloc+0x146>
 800bc1e:	4b42      	ldr	r3, [pc, #264]	; (800bd28 <pvPortMalloc+0x17c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d864      	bhi.n	800bcf2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bc28:	4b40      	ldr	r3, [pc, #256]	; (800bd2c <pvPortMalloc+0x180>)
 800bc2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bc2c:	4b3f      	ldr	r3, [pc, #252]	; (800bd2c <pvPortMalloc+0x180>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc32:	e004      	b.n	800bc3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d903      	bls.n	800bc50 <pvPortMalloc+0xa4>
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1f1      	bne.n	800bc34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bc50:	4b33      	ldr	r3, [pc, #204]	; (800bd20 <pvPortMalloc+0x174>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d04b      	beq.n	800bcf2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bc5a:	6a3b      	ldr	r3, [r7, #32]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2208      	movs	r2, #8
 800bc60:	4413      	add	r3, r2
 800bc62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	685a      	ldr	r2, [r3, #4]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	2308      	movs	r3, #8
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d91f      	bls.n	800bcbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4413      	add	r3, r2
 800bc82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00a      	beq.n	800bca4 <pvPortMalloc+0xf8>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	613b      	str	r3, [r7, #16]
}
 800bca0:	bf00      	nop
 800bca2:	e7fe      	b.n	800bca2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	1ad2      	subs	r2, r2, r3
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bcb6:	69b8      	ldr	r0, [r7, #24]
 800bcb8:	f000 f8f8 	bl	800beac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bcbc:	4b1a      	ldr	r3, [pc, #104]	; (800bd28 <pvPortMalloc+0x17c>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	4a18      	ldr	r2, [pc, #96]	; (800bd28 <pvPortMalloc+0x17c>)
 800bcc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bcca:	4b17      	ldr	r3, [pc, #92]	; (800bd28 <pvPortMalloc+0x17c>)
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	4b18      	ldr	r3, [pc, #96]	; (800bd30 <pvPortMalloc+0x184>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d203      	bcs.n	800bcde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bcd6:	4b14      	ldr	r3, [pc, #80]	; (800bd28 <pvPortMalloc+0x17c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a15      	ldr	r2, [pc, #84]	; (800bd30 <pvPortMalloc+0x184>)
 800bcdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <pvPortMalloc+0x178>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	431a      	orrs	r2, r3
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bcf2:	f7fe fed5 	bl	800aaa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	f003 0307 	and.w	r3, r3, #7
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00a      	beq.n	800bd16 <pvPortMalloc+0x16a>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	60fb      	str	r3, [r7, #12]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <pvPortMalloc+0x168>
	return pvReturn;
 800bd16:	69fb      	ldr	r3, [r7, #28]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3728      	adds	r7, #40	; 0x28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20001fa0 	.word	0x20001fa0
 800bd24:	20001fac 	.word	0x20001fac
 800bd28:	20001fa4 	.word	0x20001fa4
 800bd2c:	20001f98 	.word	0x20001f98
 800bd30:	20001fa8 	.word	0x20001fa8

0800bd34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d048      	beq.n	800bdd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bd46:	2308      	movs	r3, #8
 800bd48:	425b      	negs	r3, r3
 800bd4a:	697a      	ldr	r2, [r7, #20]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	4b21      	ldr	r3, [pc, #132]	; (800bde0 <vPortFree+0xac>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10a      	bne.n	800bd78 <vPortFree+0x44>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	60fb      	str	r3, [r7, #12]
}
 800bd74:	bf00      	nop
 800bd76:	e7fe      	b.n	800bd76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00a      	beq.n	800bd96 <vPortFree+0x62>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	60bb      	str	r3, [r7, #8]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	4b11      	ldr	r3, [pc, #68]	; (800bde0 <vPortFree+0xac>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	4013      	ands	r3, r2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d019      	beq.n	800bdd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d115      	bne.n	800bdd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <vPortFree+0xac>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	43db      	mvns	r3, r3
 800bdb6:	401a      	ands	r2, r3
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bdbc:	f7fe fe62 	bl	800aa84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	685a      	ldr	r2, [r3, #4]
 800bdc4:	4b07      	ldr	r3, [pc, #28]	; (800bde4 <vPortFree+0xb0>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4413      	add	r3, r2
 800bdca:	4a06      	ldr	r2, [pc, #24]	; (800bde4 <vPortFree+0xb0>)
 800bdcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bdce:	6938      	ldr	r0, [r7, #16]
 800bdd0:	f000 f86c 	bl	800beac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bdd4:	f7fe fe64 	bl	800aaa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bdd8:	bf00      	nop
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20001fac 	.word	0x20001fac
 800bde4:	20001fa4 	.word	0x20001fa4

0800bde8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bdee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bdf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bdf4:	4b27      	ldr	r3, [pc, #156]	; (800be94 <prvHeapInit+0xac>)
 800bdf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00c      	beq.n	800be1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3307      	adds	r3, #7
 800be06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f023 0307 	bic.w	r3, r3, #7
 800be0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <prvHeapInit+0xac>)
 800be18:	4413      	add	r3, r2
 800be1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800be20:	4a1d      	ldr	r2, [pc, #116]	; (800be98 <prvHeapInit+0xb0>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800be26:	4b1c      	ldr	r3, [pc, #112]	; (800be98 <prvHeapInit+0xb0>)
 800be28:	2200      	movs	r2, #0
 800be2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	4413      	add	r3, r2
 800be32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800be34:	2208      	movs	r2, #8
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	1a9b      	subs	r3, r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0307 	bic.w	r3, r3, #7
 800be42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	4a15      	ldr	r2, [pc, #84]	; (800be9c <prvHeapInit+0xb4>)
 800be48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800be4a:	4b14      	ldr	r3, [pc, #80]	; (800be9c <prvHeapInit+0xb4>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2200      	movs	r2, #0
 800be50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800be52:	4b12      	ldr	r3, [pc, #72]	; (800be9c <prvHeapInit+0xb4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2200      	movs	r2, #0
 800be58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	1ad2      	subs	r2, r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800be68:	4b0c      	ldr	r3, [pc, #48]	; (800be9c <prvHeapInit+0xb4>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	4a0a      	ldr	r2, [pc, #40]	; (800bea0 <prvHeapInit+0xb8>)
 800be76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	4a09      	ldr	r2, [pc, #36]	; (800bea4 <prvHeapInit+0xbc>)
 800be7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800be80:	4b09      	ldr	r3, [pc, #36]	; (800bea8 <prvHeapInit+0xc0>)
 800be82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800be86:	601a      	str	r2, [r3, #0]
}
 800be88:	bf00      	nop
 800be8a:	3714      	adds	r7, #20
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bc80      	pop	{r7}
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	20001398 	.word	0x20001398
 800be98:	20001f98 	.word	0x20001f98
 800be9c:	20001fa0 	.word	0x20001fa0
 800bea0:	20001fa8 	.word	0x20001fa8
 800bea4:	20001fa4 	.word	0x20001fa4
 800bea8:	20001fac 	.word	0x20001fac

0800beac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800beb4:	4b27      	ldr	r3, [pc, #156]	; (800bf54 <prvInsertBlockIntoFreeList+0xa8>)
 800beb6:	60fb      	str	r3, [r7, #12]
 800beb8:	e002      	b.n	800bec0 <prvInsertBlockIntoFreeList+0x14>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	60fb      	str	r3, [r7, #12]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d8f7      	bhi.n	800beba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d108      	bne.n	800beee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	441a      	add	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	68ba      	ldr	r2, [r7, #8]
 800bef8:	441a      	add	r2, r3
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d118      	bne.n	800bf34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	4b14      	ldr	r3, [pc, #80]	; (800bf58 <prvInsertBlockIntoFreeList+0xac>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d00d      	beq.n	800bf2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	441a      	add	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	e008      	b.n	800bf3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <prvInsertBlockIntoFreeList+0xac>)
 800bf2c:	681a      	ldr	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e003      	b.n	800bf3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d002      	beq.n	800bf4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bc80      	pop	{r7}
 800bf52:	4770      	bx	lr
 800bf54:	20001f98 	.word	0x20001f98
 800bf58:	20001fa0 	.word	0x20001fa0

0800bf5c <malloc>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	; (800bf68 <malloc+0xc>)
 800bf5e:	4601      	mov	r1, r0
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	f000 b823 	b.w	800bfac <_malloc_r>
 800bf66:	bf00      	nop
 800bf68:	2000025c 	.word	0x2000025c

0800bf6c <sbrk_aligned>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	4e0e      	ldr	r6, [pc, #56]	; (800bfa8 <sbrk_aligned+0x3c>)
 800bf70:	460c      	mov	r4, r1
 800bf72:	6831      	ldr	r1, [r6, #0]
 800bf74:	4605      	mov	r5, r0
 800bf76:	b911      	cbnz	r1, 800bf7e <sbrk_aligned+0x12>
 800bf78:	f000 f938 	bl	800c1ec <_sbrk_r>
 800bf7c:	6030      	str	r0, [r6, #0]
 800bf7e:	4621      	mov	r1, r4
 800bf80:	4628      	mov	r0, r5
 800bf82:	f000 f933 	bl	800c1ec <_sbrk_r>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	d00a      	beq.n	800bfa0 <sbrk_aligned+0x34>
 800bf8a:	1cc4      	adds	r4, r0, #3
 800bf8c:	f024 0403 	bic.w	r4, r4, #3
 800bf90:	42a0      	cmp	r0, r4
 800bf92:	d007      	beq.n	800bfa4 <sbrk_aligned+0x38>
 800bf94:	1a21      	subs	r1, r4, r0
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 f928 	bl	800c1ec <_sbrk_r>
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	d101      	bne.n	800bfa4 <sbrk_aligned+0x38>
 800bfa0:	f04f 34ff 	mov.w	r4, #4294967295
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	20001fb4 	.word	0x20001fb4

0800bfac <_malloc_r>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	1ccd      	adds	r5, r1, #3
 800bfb2:	f025 0503 	bic.w	r5, r5, #3
 800bfb6:	3508      	adds	r5, #8
 800bfb8:	2d0c      	cmp	r5, #12
 800bfba:	bf38      	it	cc
 800bfbc:	250c      	movcc	r5, #12
 800bfbe:	2d00      	cmp	r5, #0
 800bfc0:	4607      	mov	r7, r0
 800bfc2:	db01      	blt.n	800bfc8 <_malloc_r+0x1c>
 800bfc4:	42a9      	cmp	r1, r5
 800bfc6:	d905      	bls.n	800bfd4 <_malloc_r+0x28>
 800bfc8:	230c      	movs	r3, #12
 800bfca:	2600      	movs	r6, #0
 800bfcc:	603b      	str	r3, [r7, #0]
 800bfce:	4630      	mov	r0, r6
 800bfd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0a8 <_malloc_r+0xfc>
 800bfd8:	f000 f868 	bl	800c0ac <__malloc_lock>
 800bfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe0:	461c      	mov	r4, r3
 800bfe2:	bb5c      	cbnz	r4, 800c03c <_malloc_r+0x90>
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	f7ff ffc0 	bl	800bf6c <sbrk_aligned>
 800bfec:	1c43      	adds	r3, r0, #1
 800bfee:	4604      	mov	r4, r0
 800bff0:	d155      	bne.n	800c09e <_malloc_r+0xf2>
 800bff2:	f8d8 4000 	ldr.w	r4, [r8]
 800bff6:	4626      	mov	r6, r4
 800bff8:	2e00      	cmp	r6, #0
 800bffa:	d145      	bne.n	800c088 <_malloc_r+0xdc>
 800bffc:	2c00      	cmp	r4, #0
 800bffe:	d048      	beq.n	800c092 <_malloc_r+0xe6>
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	4631      	mov	r1, r6
 800c004:	4638      	mov	r0, r7
 800c006:	eb04 0903 	add.w	r9, r4, r3
 800c00a:	f000 f8ef 	bl	800c1ec <_sbrk_r>
 800c00e:	4581      	cmp	r9, r0
 800c010:	d13f      	bne.n	800c092 <_malloc_r+0xe6>
 800c012:	6821      	ldr	r1, [r4, #0]
 800c014:	4638      	mov	r0, r7
 800c016:	1a6d      	subs	r5, r5, r1
 800c018:	4629      	mov	r1, r5
 800c01a:	f7ff ffa7 	bl	800bf6c <sbrk_aligned>
 800c01e:	3001      	adds	r0, #1
 800c020:	d037      	beq.n	800c092 <_malloc_r+0xe6>
 800c022:	6823      	ldr	r3, [r4, #0]
 800c024:	442b      	add	r3, r5
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	f8d8 3000 	ldr.w	r3, [r8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d038      	beq.n	800c0a2 <_malloc_r+0xf6>
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	42a2      	cmp	r2, r4
 800c034:	d12b      	bne.n	800c08e <_malloc_r+0xe2>
 800c036:	2200      	movs	r2, #0
 800c038:	605a      	str	r2, [r3, #4]
 800c03a:	e00f      	b.n	800c05c <_malloc_r+0xb0>
 800c03c:	6822      	ldr	r2, [r4, #0]
 800c03e:	1b52      	subs	r2, r2, r5
 800c040:	d41f      	bmi.n	800c082 <_malloc_r+0xd6>
 800c042:	2a0b      	cmp	r2, #11
 800c044:	d917      	bls.n	800c076 <_malloc_r+0xca>
 800c046:	1961      	adds	r1, r4, r5
 800c048:	42a3      	cmp	r3, r4
 800c04a:	6025      	str	r5, [r4, #0]
 800c04c:	bf18      	it	ne
 800c04e:	6059      	strne	r1, [r3, #4]
 800c050:	6863      	ldr	r3, [r4, #4]
 800c052:	bf08      	it	eq
 800c054:	f8c8 1000 	streq.w	r1, [r8]
 800c058:	5162      	str	r2, [r4, r5]
 800c05a:	604b      	str	r3, [r1, #4]
 800c05c:	4638      	mov	r0, r7
 800c05e:	f104 060b 	add.w	r6, r4, #11
 800c062:	f000 f829 	bl	800c0b8 <__malloc_unlock>
 800c066:	f026 0607 	bic.w	r6, r6, #7
 800c06a:	1d23      	adds	r3, r4, #4
 800c06c:	1af2      	subs	r2, r6, r3
 800c06e:	d0ae      	beq.n	800bfce <_malloc_r+0x22>
 800c070:	1b9b      	subs	r3, r3, r6
 800c072:	50a3      	str	r3, [r4, r2]
 800c074:	e7ab      	b.n	800bfce <_malloc_r+0x22>
 800c076:	42a3      	cmp	r3, r4
 800c078:	6862      	ldr	r2, [r4, #4]
 800c07a:	d1dd      	bne.n	800c038 <_malloc_r+0x8c>
 800c07c:	f8c8 2000 	str.w	r2, [r8]
 800c080:	e7ec      	b.n	800c05c <_malloc_r+0xb0>
 800c082:	4623      	mov	r3, r4
 800c084:	6864      	ldr	r4, [r4, #4]
 800c086:	e7ac      	b.n	800bfe2 <_malloc_r+0x36>
 800c088:	4634      	mov	r4, r6
 800c08a:	6876      	ldr	r6, [r6, #4]
 800c08c:	e7b4      	b.n	800bff8 <_malloc_r+0x4c>
 800c08e:	4613      	mov	r3, r2
 800c090:	e7cc      	b.n	800c02c <_malloc_r+0x80>
 800c092:	230c      	movs	r3, #12
 800c094:	4638      	mov	r0, r7
 800c096:	603b      	str	r3, [r7, #0]
 800c098:	f000 f80e 	bl	800c0b8 <__malloc_unlock>
 800c09c:	e797      	b.n	800bfce <_malloc_r+0x22>
 800c09e:	6025      	str	r5, [r4, #0]
 800c0a0:	e7dc      	b.n	800c05c <_malloc_r+0xb0>
 800c0a2:	605b      	str	r3, [r3, #4]
 800c0a4:	deff      	udf	#255	; 0xff
 800c0a6:	bf00      	nop
 800c0a8:	20001fb0 	.word	0x20001fb0

0800c0ac <__malloc_lock>:
 800c0ac:	4801      	ldr	r0, [pc, #4]	; (800c0b4 <__malloc_lock+0x8>)
 800c0ae:	f000 b8d7 	b.w	800c260 <__retarget_lock_acquire_recursive>
 800c0b2:	bf00      	nop
 800c0b4:	200020f4 	.word	0x200020f4

0800c0b8 <__malloc_unlock>:
 800c0b8:	4801      	ldr	r0, [pc, #4]	; (800c0c0 <__malloc_unlock+0x8>)
 800c0ba:	f000 b8d2 	b.w	800c262 <__retarget_lock_release_recursive>
 800c0be:	bf00      	nop
 800c0c0:	200020f4 	.word	0x200020f4

0800c0c4 <siprintf>:
 800c0c4:	b40e      	push	{r1, r2, r3}
 800c0c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0ca:	b500      	push	{lr}
 800c0cc:	b09c      	sub	sp, #112	; 0x70
 800c0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c0d0:	9002      	str	r0, [sp, #8]
 800c0d2:	9006      	str	r0, [sp, #24]
 800c0d4:	9107      	str	r1, [sp, #28]
 800c0d6:	9104      	str	r1, [sp, #16]
 800c0d8:	4808      	ldr	r0, [pc, #32]	; (800c0fc <siprintf+0x38>)
 800c0da:	4909      	ldr	r1, [pc, #36]	; (800c100 <siprintf+0x3c>)
 800c0dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e0:	9105      	str	r1, [sp, #20]
 800c0e2:	6800      	ldr	r0, [r0, #0]
 800c0e4:	a902      	add	r1, sp, #8
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	f000 f974 	bl	800c3d4 <_svfiprintf_r>
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	9b02      	ldr	r3, [sp, #8]
 800c0f0:	701a      	strb	r2, [r3, #0]
 800c0f2:	b01c      	add	sp, #112	; 0x70
 800c0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f8:	b003      	add	sp, #12
 800c0fa:	4770      	bx	lr
 800c0fc:	2000025c 	.word	0x2000025c
 800c100:	ffff0208 	.word	0xffff0208

0800c104 <memset>:
 800c104:	4603      	mov	r3, r0
 800c106:	4402      	add	r2, r0
 800c108:	4293      	cmp	r3, r2
 800c10a:	d100      	bne.n	800c10e <memset+0xa>
 800c10c:	4770      	bx	lr
 800c10e:	f803 1b01 	strb.w	r1, [r3], #1
 800c112:	e7f9      	b.n	800c108 <memset+0x4>

0800c114 <strstr>:
 800c114:	780a      	ldrb	r2, [r1, #0]
 800c116:	b570      	push	{r4, r5, r6, lr}
 800c118:	b96a      	cbnz	r2, 800c136 <strstr+0x22>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d109      	bne.n	800c134 <strstr+0x20>
 800c120:	460c      	mov	r4, r1
 800c122:	4605      	mov	r5, r0
 800c124:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0f6      	beq.n	800c11a <strstr+0x6>
 800c12c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c130:	429e      	cmp	r6, r3
 800c132:	d0f7      	beq.n	800c124 <strstr+0x10>
 800c134:	3001      	adds	r0, #1
 800c136:	7803      	ldrb	r3, [r0, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1ef      	bne.n	800c11c <strstr+0x8>
 800c13c:	4618      	mov	r0, r3
 800c13e:	e7ec      	b.n	800c11a <strstr+0x6>

0800c140 <_reclaim_reent>:
 800c140:	4b29      	ldr	r3, [pc, #164]	; (800c1e8 <_reclaim_reent+0xa8>)
 800c142:	b570      	push	{r4, r5, r6, lr}
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4604      	mov	r4, r0
 800c148:	4283      	cmp	r3, r0
 800c14a:	d04b      	beq.n	800c1e4 <_reclaim_reent+0xa4>
 800c14c:	69c3      	ldr	r3, [r0, #28]
 800c14e:	b143      	cbz	r3, 800c162 <_reclaim_reent+0x22>
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d144      	bne.n	800c1e0 <_reclaim_reent+0xa0>
 800c156:	69e3      	ldr	r3, [r4, #28]
 800c158:	6819      	ldr	r1, [r3, #0]
 800c15a:	b111      	cbz	r1, 800c162 <_reclaim_reent+0x22>
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 f897 	bl	800c290 <_free_r>
 800c162:	6961      	ldr	r1, [r4, #20]
 800c164:	b111      	cbz	r1, 800c16c <_reclaim_reent+0x2c>
 800c166:	4620      	mov	r0, r4
 800c168:	f000 f892 	bl	800c290 <_free_r>
 800c16c:	69e1      	ldr	r1, [r4, #28]
 800c16e:	b111      	cbz	r1, 800c176 <_reclaim_reent+0x36>
 800c170:	4620      	mov	r0, r4
 800c172:	f000 f88d 	bl	800c290 <_free_r>
 800c176:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c178:	b111      	cbz	r1, 800c180 <_reclaim_reent+0x40>
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 f888 	bl	800c290 <_free_r>
 800c180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c182:	b111      	cbz	r1, 800c18a <_reclaim_reent+0x4a>
 800c184:	4620      	mov	r0, r4
 800c186:	f000 f883 	bl	800c290 <_free_r>
 800c18a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c18c:	b111      	cbz	r1, 800c194 <_reclaim_reent+0x54>
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 f87e 	bl	800c290 <_free_r>
 800c194:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c196:	b111      	cbz	r1, 800c19e <_reclaim_reent+0x5e>
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 f879 	bl	800c290 <_free_r>
 800c19e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c1a0:	b111      	cbz	r1, 800c1a8 <_reclaim_reent+0x68>
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 f874 	bl	800c290 <_free_r>
 800c1a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c1aa:	b111      	cbz	r1, 800c1b2 <_reclaim_reent+0x72>
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f000 f86f 	bl	800c290 <_free_r>
 800c1b2:	6a23      	ldr	r3, [r4, #32]
 800c1b4:	b1b3      	cbz	r3, 800c1e4 <_reclaim_reent+0xa4>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c1bc:	4718      	bx	r3
 800c1be:	5949      	ldr	r1, [r1, r5]
 800c1c0:	b941      	cbnz	r1, 800c1d4 <_reclaim_reent+0x94>
 800c1c2:	3504      	adds	r5, #4
 800c1c4:	69e3      	ldr	r3, [r4, #28]
 800c1c6:	2d80      	cmp	r5, #128	; 0x80
 800c1c8:	68d9      	ldr	r1, [r3, #12]
 800c1ca:	d1f8      	bne.n	800c1be <_reclaim_reent+0x7e>
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 f85f 	bl	800c290 <_free_r>
 800c1d2:	e7c0      	b.n	800c156 <_reclaim_reent+0x16>
 800c1d4:	680e      	ldr	r6, [r1, #0]
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f000 f85a 	bl	800c290 <_free_r>
 800c1dc:	4631      	mov	r1, r6
 800c1de:	e7ef      	b.n	800c1c0 <_reclaim_reent+0x80>
 800c1e0:	2500      	movs	r5, #0
 800c1e2:	e7ef      	b.n	800c1c4 <_reclaim_reent+0x84>
 800c1e4:	bd70      	pop	{r4, r5, r6, pc}
 800c1e6:	bf00      	nop
 800c1e8:	2000025c 	.word	0x2000025c

0800c1ec <_sbrk_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	4d05      	ldr	r5, [pc, #20]	; (800c208 <_sbrk_r+0x1c>)
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	602b      	str	r3, [r5, #0]
 800c1f8:	f7f7 f8fc 	bl	80033f4 <_sbrk>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_sbrk_r+0x1a>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_sbrk_r+0x1a>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	200020f0 	.word	0x200020f0

0800c20c <__errno>:
 800c20c:	4b01      	ldr	r3, [pc, #4]	; (800c214 <__errno+0x8>)
 800c20e:	6818      	ldr	r0, [r3, #0]
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	2000025c 	.word	0x2000025c

0800c218 <__libc_init_array>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	2600      	movs	r6, #0
 800c21c:	4d0c      	ldr	r5, [pc, #48]	; (800c250 <__libc_init_array+0x38>)
 800c21e:	4c0d      	ldr	r4, [pc, #52]	; (800c254 <__libc_init_array+0x3c>)
 800c220:	1b64      	subs	r4, r4, r5
 800c222:	10a4      	asrs	r4, r4, #2
 800c224:	42a6      	cmp	r6, r4
 800c226:	d109      	bne.n	800c23c <__libc_init_array+0x24>
 800c228:	f000 fbc6 	bl	800c9b8 <_init>
 800c22c:	2600      	movs	r6, #0
 800c22e:	4d0a      	ldr	r5, [pc, #40]	; (800c258 <__libc_init_array+0x40>)
 800c230:	4c0a      	ldr	r4, [pc, #40]	; (800c25c <__libc_init_array+0x44>)
 800c232:	1b64      	subs	r4, r4, r5
 800c234:	10a4      	asrs	r4, r4, #2
 800c236:	42a6      	cmp	r6, r4
 800c238:	d105      	bne.n	800c246 <__libc_init_array+0x2e>
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c240:	4798      	blx	r3
 800c242:	3601      	adds	r6, #1
 800c244:	e7ee      	b.n	800c224 <__libc_init_array+0xc>
 800c246:	f855 3b04 	ldr.w	r3, [r5], #4
 800c24a:	4798      	blx	r3
 800c24c:	3601      	adds	r6, #1
 800c24e:	e7f2      	b.n	800c236 <__libc_init_array+0x1e>
 800c250:	0800cdb4 	.word	0x0800cdb4
 800c254:	0800cdb4 	.word	0x0800cdb4
 800c258:	0800cdb4 	.word	0x0800cdb4
 800c25c:	0800cdb8 	.word	0x0800cdb8

0800c260 <__retarget_lock_acquire_recursive>:
 800c260:	4770      	bx	lr

0800c262 <__retarget_lock_release_recursive>:
 800c262:	4770      	bx	lr

0800c264 <strcpy>:
 800c264:	4603      	mov	r3, r0
 800c266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26a:	f803 2b01 	strb.w	r2, [r3], #1
 800c26e:	2a00      	cmp	r2, #0
 800c270:	d1f9      	bne.n	800c266 <strcpy+0x2>
 800c272:	4770      	bx	lr

0800c274 <memcpy>:
 800c274:	440a      	add	r2, r1
 800c276:	4291      	cmp	r1, r2
 800c278:	f100 33ff 	add.w	r3, r0, #4294967295
 800c27c:	d100      	bne.n	800c280 <memcpy+0xc>
 800c27e:	4770      	bx	lr
 800c280:	b510      	push	{r4, lr}
 800c282:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c286:	4291      	cmp	r1, r2
 800c288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c28c:	d1f9      	bne.n	800c282 <memcpy+0xe>
 800c28e:	bd10      	pop	{r4, pc}

0800c290 <_free_r>:
 800c290:	b538      	push	{r3, r4, r5, lr}
 800c292:	4605      	mov	r5, r0
 800c294:	2900      	cmp	r1, #0
 800c296:	d040      	beq.n	800c31a <_free_r+0x8a>
 800c298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c29c:	1f0c      	subs	r4, r1, #4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	bfb8      	it	lt
 800c2a2:	18e4      	addlt	r4, r4, r3
 800c2a4:	f7ff ff02 	bl	800c0ac <__malloc_lock>
 800c2a8:	4a1c      	ldr	r2, [pc, #112]	; (800c31c <_free_r+0x8c>)
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	b933      	cbnz	r3, 800c2bc <_free_r+0x2c>
 800c2ae:	6063      	str	r3, [r4, #4]
 800c2b0:	6014      	str	r4, [r2, #0]
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2b8:	f7ff befe 	b.w	800c0b8 <__malloc_unlock>
 800c2bc:	42a3      	cmp	r3, r4
 800c2be:	d908      	bls.n	800c2d2 <_free_r+0x42>
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	1821      	adds	r1, r4, r0
 800c2c4:	428b      	cmp	r3, r1
 800c2c6:	bf01      	itttt	eq
 800c2c8:	6819      	ldreq	r1, [r3, #0]
 800c2ca:	685b      	ldreq	r3, [r3, #4]
 800c2cc:	1809      	addeq	r1, r1, r0
 800c2ce:	6021      	streq	r1, [r4, #0]
 800c2d0:	e7ed      	b.n	800c2ae <_free_r+0x1e>
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	b10b      	cbz	r3, 800c2dc <_free_r+0x4c>
 800c2d8:	42a3      	cmp	r3, r4
 800c2da:	d9fa      	bls.n	800c2d2 <_free_r+0x42>
 800c2dc:	6811      	ldr	r1, [r2, #0]
 800c2de:	1850      	adds	r0, r2, r1
 800c2e0:	42a0      	cmp	r0, r4
 800c2e2:	d10b      	bne.n	800c2fc <_free_r+0x6c>
 800c2e4:	6820      	ldr	r0, [r4, #0]
 800c2e6:	4401      	add	r1, r0
 800c2e8:	1850      	adds	r0, r2, r1
 800c2ea:	4283      	cmp	r3, r0
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	d1e0      	bne.n	800c2b2 <_free_r+0x22>
 800c2f0:	6818      	ldr	r0, [r3, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	4408      	add	r0, r1
 800c2f6:	6010      	str	r0, [r2, #0]
 800c2f8:	6053      	str	r3, [r2, #4]
 800c2fa:	e7da      	b.n	800c2b2 <_free_r+0x22>
 800c2fc:	d902      	bls.n	800c304 <_free_r+0x74>
 800c2fe:	230c      	movs	r3, #12
 800c300:	602b      	str	r3, [r5, #0]
 800c302:	e7d6      	b.n	800c2b2 <_free_r+0x22>
 800c304:	6820      	ldr	r0, [r4, #0]
 800c306:	1821      	adds	r1, r4, r0
 800c308:	428b      	cmp	r3, r1
 800c30a:	bf01      	itttt	eq
 800c30c:	6819      	ldreq	r1, [r3, #0]
 800c30e:	685b      	ldreq	r3, [r3, #4]
 800c310:	1809      	addeq	r1, r1, r0
 800c312:	6021      	streq	r1, [r4, #0]
 800c314:	6063      	str	r3, [r4, #4]
 800c316:	6054      	str	r4, [r2, #4]
 800c318:	e7cb      	b.n	800c2b2 <_free_r+0x22>
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20001fb0 	.word	0x20001fb0

0800c320 <__ssputs_r>:
 800c320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c324:	461f      	mov	r7, r3
 800c326:	688e      	ldr	r6, [r1, #8]
 800c328:	4682      	mov	sl, r0
 800c32a:	42be      	cmp	r6, r7
 800c32c:	460c      	mov	r4, r1
 800c32e:	4690      	mov	r8, r2
 800c330:	680b      	ldr	r3, [r1, #0]
 800c332:	d82c      	bhi.n	800c38e <__ssputs_r+0x6e>
 800c334:	898a      	ldrh	r2, [r1, #12]
 800c336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c33a:	d026      	beq.n	800c38a <__ssputs_r+0x6a>
 800c33c:	6965      	ldr	r5, [r4, #20]
 800c33e:	6909      	ldr	r1, [r1, #16]
 800c340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c344:	eba3 0901 	sub.w	r9, r3, r1
 800c348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c34c:	1c7b      	adds	r3, r7, #1
 800c34e:	444b      	add	r3, r9
 800c350:	106d      	asrs	r5, r5, #1
 800c352:	429d      	cmp	r5, r3
 800c354:	bf38      	it	cc
 800c356:	461d      	movcc	r5, r3
 800c358:	0553      	lsls	r3, r2, #21
 800c35a:	d527      	bpl.n	800c3ac <__ssputs_r+0x8c>
 800c35c:	4629      	mov	r1, r5
 800c35e:	f7ff fe25 	bl	800bfac <_malloc_r>
 800c362:	4606      	mov	r6, r0
 800c364:	b360      	cbz	r0, 800c3c0 <__ssputs_r+0xa0>
 800c366:	464a      	mov	r2, r9
 800c368:	6921      	ldr	r1, [r4, #16]
 800c36a:	f7ff ff83 	bl	800c274 <memcpy>
 800c36e:	89a3      	ldrh	r3, [r4, #12]
 800c370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c378:	81a3      	strh	r3, [r4, #12]
 800c37a:	6126      	str	r6, [r4, #16]
 800c37c:	444e      	add	r6, r9
 800c37e:	6026      	str	r6, [r4, #0]
 800c380:	463e      	mov	r6, r7
 800c382:	6165      	str	r5, [r4, #20]
 800c384:	eba5 0509 	sub.w	r5, r5, r9
 800c388:	60a5      	str	r5, [r4, #8]
 800c38a:	42be      	cmp	r6, r7
 800c38c:	d900      	bls.n	800c390 <__ssputs_r+0x70>
 800c38e:	463e      	mov	r6, r7
 800c390:	4632      	mov	r2, r6
 800c392:	4641      	mov	r1, r8
 800c394:	6820      	ldr	r0, [r4, #0]
 800c396:	f000 faaf 	bl	800c8f8 <memmove>
 800c39a:	2000      	movs	r0, #0
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	1b9b      	subs	r3, r3, r6
 800c3a0:	60a3      	str	r3, [r4, #8]
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	4433      	add	r3, r6
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ac:	462a      	mov	r2, r5
 800c3ae:	f000 facb 	bl	800c948 <_realloc_r>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	d1e0      	bne.n	800c37a <__ssputs_r+0x5a>
 800c3b8:	4650      	mov	r0, sl
 800c3ba:	6921      	ldr	r1, [r4, #16]
 800c3bc:	f7ff ff68 	bl	800c290 <_free_r>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	f8ca 3000 	str.w	r3, [sl]
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	e7e9      	b.n	800c3a8 <__ssputs_r+0x88>

0800c3d4 <_svfiprintf_r>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	4698      	mov	r8, r3
 800c3da:	898b      	ldrh	r3, [r1, #12]
 800c3dc:	4607      	mov	r7, r0
 800c3de:	061b      	lsls	r3, r3, #24
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	b09d      	sub	sp, #116	; 0x74
 800c3e6:	d50e      	bpl.n	800c406 <_svfiprintf_r+0x32>
 800c3e8:	690b      	ldr	r3, [r1, #16]
 800c3ea:	b963      	cbnz	r3, 800c406 <_svfiprintf_r+0x32>
 800c3ec:	2140      	movs	r1, #64	; 0x40
 800c3ee:	f7ff fddd 	bl	800bfac <_malloc_r>
 800c3f2:	6028      	str	r0, [r5, #0]
 800c3f4:	6128      	str	r0, [r5, #16]
 800c3f6:	b920      	cbnz	r0, 800c402 <_svfiprintf_r+0x2e>
 800c3f8:	230c      	movs	r3, #12
 800c3fa:	603b      	str	r3, [r7, #0]
 800c3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c400:	e0d0      	b.n	800c5a4 <_svfiprintf_r+0x1d0>
 800c402:	2340      	movs	r3, #64	; 0x40
 800c404:	616b      	str	r3, [r5, #20]
 800c406:	2300      	movs	r3, #0
 800c408:	9309      	str	r3, [sp, #36]	; 0x24
 800c40a:	2320      	movs	r3, #32
 800c40c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c410:	2330      	movs	r3, #48	; 0x30
 800c412:	f04f 0901 	mov.w	r9, #1
 800c416:	f8cd 800c 	str.w	r8, [sp, #12]
 800c41a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c5bc <_svfiprintf_r+0x1e8>
 800c41e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c422:	4623      	mov	r3, r4
 800c424:	469a      	mov	sl, r3
 800c426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c42a:	b10a      	cbz	r2, 800c430 <_svfiprintf_r+0x5c>
 800c42c:	2a25      	cmp	r2, #37	; 0x25
 800c42e:	d1f9      	bne.n	800c424 <_svfiprintf_r+0x50>
 800c430:	ebba 0b04 	subs.w	fp, sl, r4
 800c434:	d00b      	beq.n	800c44e <_svfiprintf_r+0x7a>
 800c436:	465b      	mov	r3, fp
 800c438:	4622      	mov	r2, r4
 800c43a:	4629      	mov	r1, r5
 800c43c:	4638      	mov	r0, r7
 800c43e:	f7ff ff6f 	bl	800c320 <__ssputs_r>
 800c442:	3001      	adds	r0, #1
 800c444:	f000 80a9 	beq.w	800c59a <_svfiprintf_r+0x1c6>
 800c448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c44a:	445a      	add	r2, fp
 800c44c:	9209      	str	r2, [sp, #36]	; 0x24
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 80a1 	beq.w	800c59a <_svfiprintf_r+0x1c6>
 800c458:	2300      	movs	r3, #0
 800c45a:	f04f 32ff 	mov.w	r2, #4294967295
 800c45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c462:	f10a 0a01 	add.w	sl, sl, #1
 800c466:	9304      	str	r3, [sp, #16]
 800c468:	9307      	str	r3, [sp, #28]
 800c46a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c46e:	931a      	str	r3, [sp, #104]	; 0x68
 800c470:	4654      	mov	r4, sl
 800c472:	2205      	movs	r2, #5
 800c474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c478:	4850      	ldr	r0, [pc, #320]	; (800c5bc <_svfiprintf_r+0x1e8>)
 800c47a:	f000 fa57 	bl	800c92c <memchr>
 800c47e:	9a04      	ldr	r2, [sp, #16]
 800c480:	b9d8      	cbnz	r0, 800c4ba <_svfiprintf_r+0xe6>
 800c482:	06d0      	lsls	r0, r2, #27
 800c484:	bf44      	itt	mi
 800c486:	2320      	movmi	r3, #32
 800c488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c48c:	0711      	lsls	r1, r2, #28
 800c48e:	bf44      	itt	mi
 800c490:	232b      	movmi	r3, #43	; 0x2b
 800c492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c496:	f89a 3000 	ldrb.w	r3, [sl]
 800c49a:	2b2a      	cmp	r3, #42	; 0x2a
 800c49c:	d015      	beq.n	800c4ca <_svfiprintf_r+0xf6>
 800c49e:	4654      	mov	r4, sl
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	f04f 0c0a 	mov.w	ip, #10
 800c4a6:	9a07      	ldr	r2, [sp, #28]
 800c4a8:	4621      	mov	r1, r4
 800c4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ae:	3b30      	subs	r3, #48	; 0x30
 800c4b0:	2b09      	cmp	r3, #9
 800c4b2:	d94d      	bls.n	800c550 <_svfiprintf_r+0x17c>
 800c4b4:	b1b0      	cbz	r0, 800c4e4 <_svfiprintf_r+0x110>
 800c4b6:	9207      	str	r2, [sp, #28]
 800c4b8:	e014      	b.n	800c4e4 <_svfiprintf_r+0x110>
 800c4ba:	eba0 0308 	sub.w	r3, r0, r8
 800c4be:	fa09 f303 	lsl.w	r3, r9, r3
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	46a2      	mov	sl, r4
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	e7d2      	b.n	800c470 <_svfiprintf_r+0x9c>
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	1d19      	adds	r1, r3, #4
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	9103      	str	r1, [sp, #12]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	bfbb      	ittet	lt
 800c4d6:	425b      	neglt	r3, r3
 800c4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c4dc:	9307      	strge	r3, [sp, #28]
 800c4de:	9307      	strlt	r3, [sp, #28]
 800c4e0:	bfb8      	it	lt
 800c4e2:	9204      	strlt	r2, [sp, #16]
 800c4e4:	7823      	ldrb	r3, [r4, #0]
 800c4e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c4e8:	d10c      	bne.n	800c504 <_svfiprintf_r+0x130>
 800c4ea:	7863      	ldrb	r3, [r4, #1]
 800c4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ee:	d134      	bne.n	800c55a <_svfiprintf_r+0x186>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	3402      	adds	r4, #2
 800c4f4:	1d1a      	adds	r2, r3, #4
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	9203      	str	r2, [sp, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bfb8      	it	lt
 800c4fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c5c0 <_svfiprintf_r+0x1ec>
 800c508:	2203      	movs	r2, #3
 800c50a:	4650      	mov	r0, sl
 800c50c:	7821      	ldrb	r1, [r4, #0]
 800c50e:	f000 fa0d 	bl	800c92c <memchr>
 800c512:	b138      	cbz	r0, 800c524 <_svfiprintf_r+0x150>
 800c514:	2240      	movs	r2, #64	; 0x40
 800c516:	9b04      	ldr	r3, [sp, #16]
 800c518:	eba0 000a 	sub.w	r0, r0, sl
 800c51c:	4082      	lsls	r2, r0
 800c51e:	4313      	orrs	r3, r2
 800c520:	3401      	adds	r4, #1
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c528:	2206      	movs	r2, #6
 800c52a:	4826      	ldr	r0, [pc, #152]	; (800c5c4 <_svfiprintf_r+0x1f0>)
 800c52c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c530:	f000 f9fc 	bl	800c92c <memchr>
 800c534:	2800      	cmp	r0, #0
 800c536:	d038      	beq.n	800c5aa <_svfiprintf_r+0x1d6>
 800c538:	4b23      	ldr	r3, [pc, #140]	; (800c5c8 <_svfiprintf_r+0x1f4>)
 800c53a:	bb1b      	cbnz	r3, 800c584 <_svfiprintf_r+0x1b0>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	3307      	adds	r3, #7
 800c540:	f023 0307 	bic.w	r3, r3, #7
 800c544:	3308      	adds	r3, #8
 800c546:	9303      	str	r3, [sp, #12]
 800c548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54a:	4433      	add	r3, r6
 800c54c:	9309      	str	r3, [sp, #36]	; 0x24
 800c54e:	e768      	b.n	800c422 <_svfiprintf_r+0x4e>
 800c550:	460c      	mov	r4, r1
 800c552:	2001      	movs	r0, #1
 800c554:	fb0c 3202 	mla	r2, ip, r2, r3
 800c558:	e7a6      	b.n	800c4a8 <_svfiprintf_r+0xd4>
 800c55a:	2300      	movs	r3, #0
 800c55c:	f04f 0c0a 	mov.w	ip, #10
 800c560:	4619      	mov	r1, r3
 800c562:	3401      	adds	r4, #1
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	4620      	mov	r0, r4
 800c568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c56c:	3a30      	subs	r2, #48	; 0x30
 800c56e:	2a09      	cmp	r2, #9
 800c570:	d903      	bls.n	800c57a <_svfiprintf_r+0x1a6>
 800c572:	2b00      	cmp	r3, #0
 800c574:	d0c6      	beq.n	800c504 <_svfiprintf_r+0x130>
 800c576:	9105      	str	r1, [sp, #20]
 800c578:	e7c4      	b.n	800c504 <_svfiprintf_r+0x130>
 800c57a:	4604      	mov	r4, r0
 800c57c:	2301      	movs	r3, #1
 800c57e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c582:	e7f0      	b.n	800c566 <_svfiprintf_r+0x192>
 800c584:	ab03      	add	r3, sp, #12
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	462a      	mov	r2, r5
 800c58a:	4638      	mov	r0, r7
 800c58c:	4b0f      	ldr	r3, [pc, #60]	; (800c5cc <_svfiprintf_r+0x1f8>)
 800c58e:	a904      	add	r1, sp, #16
 800c590:	f3af 8000 	nop.w
 800c594:	1c42      	adds	r2, r0, #1
 800c596:	4606      	mov	r6, r0
 800c598:	d1d6      	bne.n	800c548 <_svfiprintf_r+0x174>
 800c59a:	89ab      	ldrh	r3, [r5, #12]
 800c59c:	065b      	lsls	r3, r3, #25
 800c59e:	f53f af2d 	bmi.w	800c3fc <_svfiprintf_r+0x28>
 800c5a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5a4:	b01d      	add	sp, #116	; 0x74
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5aa:	ab03      	add	r3, sp, #12
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	462a      	mov	r2, r5
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	4b06      	ldr	r3, [pc, #24]	; (800c5cc <_svfiprintf_r+0x1f8>)
 800c5b4:	a904      	add	r1, sp, #16
 800c5b6:	f000 f87d 	bl	800c6b4 <_printf_i>
 800c5ba:	e7eb      	b.n	800c594 <_svfiprintf_r+0x1c0>
 800c5bc:	0800cd7e 	.word	0x0800cd7e
 800c5c0:	0800cd84 	.word	0x0800cd84
 800c5c4:	0800cd88 	.word	0x0800cd88
 800c5c8:	00000000 	.word	0x00000000
 800c5cc:	0800c321 	.word	0x0800c321

0800c5d0 <_printf_common>:
 800c5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d4:	4616      	mov	r6, r2
 800c5d6:	4699      	mov	r9, r3
 800c5d8:	688a      	ldr	r2, [r1, #8]
 800c5da:	690b      	ldr	r3, [r1, #16]
 800c5dc:	4607      	mov	r7, r0
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	bfb8      	it	lt
 800c5e2:	4613      	movlt	r3, r2
 800c5e4:	6033      	str	r3, [r6, #0]
 800c5e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5ea:	460c      	mov	r4, r1
 800c5ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5f0:	b10a      	cbz	r2, 800c5f6 <_printf_common+0x26>
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	6033      	str	r3, [r6, #0]
 800c5f6:	6823      	ldr	r3, [r4, #0]
 800c5f8:	0699      	lsls	r1, r3, #26
 800c5fa:	bf42      	ittt	mi
 800c5fc:	6833      	ldrmi	r3, [r6, #0]
 800c5fe:	3302      	addmi	r3, #2
 800c600:	6033      	strmi	r3, [r6, #0]
 800c602:	6825      	ldr	r5, [r4, #0]
 800c604:	f015 0506 	ands.w	r5, r5, #6
 800c608:	d106      	bne.n	800c618 <_printf_common+0x48>
 800c60a:	f104 0a19 	add.w	sl, r4, #25
 800c60e:	68e3      	ldr	r3, [r4, #12]
 800c610:	6832      	ldr	r2, [r6, #0]
 800c612:	1a9b      	subs	r3, r3, r2
 800c614:	42ab      	cmp	r3, r5
 800c616:	dc2b      	bgt.n	800c670 <_printf_common+0xa0>
 800c618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c61c:	1e13      	subs	r3, r2, #0
 800c61e:	6822      	ldr	r2, [r4, #0]
 800c620:	bf18      	it	ne
 800c622:	2301      	movne	r3, #1
 800c624:	0692      	lsls	r2, r2, #26
 800c626:	d430      	bmi.n	800c68a <_printf_common+0xba>
 800c628:	4649      	mov	r1, r9
 800c62a:	4638      	mov	r0, r7
 800c62c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c630:	47c0      	blx	r8
 800c632:	3001      	adds	r0, #1
 800c634:	d023      	beq.n	800c67e <_printf_common+0xae>
 800c636:	6823      	ldr	r3, [r4, #0]
 800c638:	6922      	ldr	r2, [r4, #16]
 800c63a:	f003 0306 	and.w	r3, r3, #6
 800c63e:	2b04      	cmp	r3, #4
 800c640:	bf14      	ite	ne
 800c642:	2500      	movne	r5, #0
 800c644:	6833      	ldreq	r3, [r6, #0]
 800c646:	f04f 0600 	mov.w	r6, #0
 800c64a:	bf08      	it	eq
 800c64c:	68e5      	ldreq	r5, [r4, #12]
 800c64e:	f104 041a 	add.w	r4, r4, #26
 800c652:	bf08      	it	eq
 800c654:	1aed      	subeq	r5, r5, r3
 800c656:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c65a:	bf08      	it	eq
 800c65c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c660:	4293      	cmp	r3, r2
 800c662:	bfc4      	itt	gt
 800c664:	1a9b      	subgt	r3, r3, r2
 800c666:	18ed      	addgt	r5, r5, r3
 800c668:	42b5      	cmp	r5, r6
 800c66a:	d11a      	bne.n	800c6a2 <_printf_common+0xd2>
 800c66c:	2000      	movs	r0, #0
 800c66e:	e008      	b.n	800c682 <_printf_common+0xb2>
 800c670:	2301      	movs	r3, #1
 800c672:	4652      	mov	r2, sl
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d103      	bne.n	800c686 <_printf_common+0xb6>
 800c67e:	f04f 30ff 	mov.w	r0, #4294967295
 800c682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c686:	3501      	adds	r5, #1
 800c688:	e7c1      	b.n	800c60e <_printf_common+0x3e>
 800c68a:	2030      	movs	r0, #48	; 0x30
 800c68c:	18e1      	adds	r1, r4, r3
 800c68e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c692:	1c5a      	adds	r2, r3, #1
 800c694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c698:	4422      	add	r2, r4
 800c69a:	3302      	adds	r3, #2
 800c69c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6a0:	e7c2      	b.n	800c628 <_printf_common+0x58>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	47c0      	blx	r8
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d0e6      	beq.n	800c67e <_printf_common+0xae>
 800c6b0:	3601      	adds	r6, #1
 800c6b2:	e7d9      	b.n	800c668 <_printf_common+0x98>

0800c6b4 <_printf_i>:
 800c6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b8:	7e0f      	ldrb	r7, [r1, #24]
 800c6ba:	4691      	mov	r9, r2
 800c6bc:	2f78      	cmp	r7, #120	; 0x78
 800c6be:	4680      	mov	r8, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	469a      	mov	sl, r3
 800c6c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6ca:	d807      	bhi.n	800c6dc <_printf_i+0x28>
 800c6cc:	2f62      	cmp	r7, #98	; 0x62
 800c6ce:	d80a      	bhi.n	800c6e6 <_printf_i+0x32>
 800c6d0:	2f00      	cmp	r7, #0
 800c6d2:	f000 80d5 	beq.w	800c880 <_printf_i+0x1cc>
 800c6d6:	2f58      	cmp	r7, #88	; 0x58
 800c6d8:	f000 80c1 	beq.w	800c85e <_printf_i+0x1aa>
 800c6dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6e4:	e03a      	b.n	800c75c <_printf_i+0xa8>
 800c6e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6ea:	2b15      	cmp	r3, #21
 800c6ec:	d8f6      	bhi.n	800c6dc <_printf_i+0x28>
 800c6ee:	a101      	add	r1, pc, #4	; (adr r1, 800c6f4 <_printf_i+0x40>)
 800c6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6f4:	0800c74d 	.word	0x0800c74d
 800c6f8:	0800c761 	.word	0x0800c761
 800c6fc:	0800c6dd 	.word	0x0800c6dd
 800c700:	0800c6dd 	.word	0x0800c6dd
 800c704:	0800c6dd 	.word	0x0800c6dd
 800c708:	0800c6dd 	.word	0x0800c6dd
 800c70c:	0800c761 	.word	0x0800c761
 800c710:	0800c6dd 	.word	0x0800c6dd
 800c714:	0800c6dd 	.word	0x0800c6dd
 800c718:	0800c6dd 	.word	0x0800c6dd
 800c71c:	0800c6dd 	.word	0x0800c6dd
 800c720:	0800c867 	.word	0x0800c867
 800c724:	0800c78d 	.word	0x0800c78d
 800c728:	0800c821 	.word	0x0800c821
 800c72c:	0800c6dd 	.word	0x0800c6dd
 800c730:	0800c6dd 	.word	0x0800c6dd
 800c734:	0800c889 	.word	0x0800c889
 800c738:	0800c6dd 	.word	0x0800c6dd
 800c73c:	0800c78d 	.word	0x0800c78d
 800c740:	0800c6dd 	.word	0x0800c6dd
 800c744:	0800c6dd 	.word	0x0800c6dd
 800c748:	0800c829 	.word	0x0800c829
 800c74c:	682b      	ldr	r3, [r5, #0]
 800c74e:	1d1a      	adds	r2, r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	602a      	str	r2, [r5, #0]
 800c754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c75c:	2301      	movs	r3, #1
 800c75e:	e0a0      	b.n	800c8a2 <_printf_i+0x1ee>
 800c760:	6820      	ldr	r0, [r4, #0]
 800c762:	682b      	ldr	r3, [r5, #0]
 800c764:	0607      	lsls	r7, r0, #24
 800c766:	f103 0104 	add.w	r1, r3, #4
 800c76a:	6029      	str	r1, [r5, #0]
 800c76c:	d501      	bpl.n	800c772 <_printf_i+0xbe>
 800c76e:	681e      	ldr	r6, [r3, #0]
 800c770:	e003      	b.n	800c77a <_printf_i+0xc6>
 800c772:	0646      	lsls	r6, r0, #25
 800c774:	d5fb      	bpl.n	800c76e <_printf_i+0xba>
 800c776:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	da03      	bge.n	800c786 <_printf_i+0xd2>
 800c77e:	232d      	movs	r3, #45	; 0x2d
 800c780:	4276      	negs	r6, r6
 800c782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c786:	230a      	movs	r3, #10
 800c788:	4859      	ldr	r0, [pc, #356]	; (800c8f0 <_printf_i+0x23c>)
 800c78a:	e012      	b.n	800c7b2 <_printf_i+0xfe>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	6820      	ldr	r0, [r4, #0]
 800c790:	1d19      	adds	r1, r3, #4
 800c792:	6029      	str	r1, [r5, #0]
 800c794:	0605      	lsls	r5, r0, #24
 800c796:	d501      	bpl.n	800c79c <_printf_i+0xe8>
 800c798:	681e      	ldr	r6, [r3, #0]
 800c79a:	e002      	b.n	800c7a2 <_printf_i+0xee>
 800c79c:	0641      	lsls	r1, r0, #25
 800c79e:	d5fb      	bpl.n	800c798 <_printf_i+0xe4>
 800c7a0:	881e      	ldrh	r6, [r3, #0]
 800c7a2:	2f6f      	cmp	r7, #111	; 0x6f
 800c7a4:	bf0c      	ite	eq
 800c7a6:	2308      	moveq	r3, #8
 800c7a8:	230a      	movne	r3, #10
 800c7aa:	4851      	ldr	r0, [pc, #324]	; (800c8f0 <_printf_i+0x23c>)
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7b2:	6865      	ldr	r5, [r4, #4]
 800c7b4:	2d00      	cmp	r5, #0
 800c7b6:	bfa8      	it	ge
 800c7b8:	6821      	ldrge	r1, [r4, #0]
 800c7ba:	60a5      	str	r5, [r4, #8]
 800c7bc:	bfa4      	itt	ge
 800c7be:	f021 0104 	bicge.w	r1, r1, #4
 800c7c2:	6021      	strge	r1, [r4, #0]
 800c7c4:	b90e      	cbnz	r6, 800c7ca <_printf_i+0x116>
 800c7c6:	2d00      	cmp	r5, #0
 800c7c8:	d04b      	beq.n	800c862 <_printf_i+0x1ae>
 800c7ca:	4615      	mov	r5, r2
 800c7cc:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7d0:	fb03 6711 	mls	r7, r3, r1, r6
 800c7d4:	5dc7      	ldrb	r7, [r0, r7]
 800c7d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7da:	4637      	mov	r7, r6
 800c7dc:	42bb      	cmp	r3, r7
 800c7de:	460e      	mov	r6, r1
 800c7e0:	d9f4      	bls.n	800c7cc <_printf_i+0x118>
 800c7e2:	2b08      	cmp	r3, #8
 800c7e4:	d10b      	bne.n	800c7fe <_printf_i+0x14a>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	07de      	lsls	r6, r3, #31
 800c7ea:	d508      	bpl.n	800c7fe <_printf_i+0x14a>
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	6861      	ldr	r1, [r4, #4]
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	bfde      	ittt	le
 800c7f4:	2330      	movle	r3, #48	; 0x30
 800c7f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7fe:	1b52      	subs	r2, r2, r5
 800c800:	6122      	str	r2, [r4, #16]
 800c802:	464b      	mov	r3, r9
 800c804:	4621      	mov	r1, r4
 800c806:	4640      	mov	r0, r8
 800c808:	f8cd a000 	str.w	sl, [sp]
 800c80c:	aa03      	add	r2, sp, #12
 800c80e:	f7ff fedf 	bl	800c5d0 <_printf_common>
 800c812:	3001      	adds	r0, #1
 800c814:	d14a      	bne.n	800c8ac <_printf_i+0x1f8>
 800c816:	f04f 30ff 	mov.w	r0, #4294967295
 800c81a:	b004      	add	sp, #16
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	f043 0320 	orr.w	r3, r3, #32
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	2778      	movs	r7, #120	; 0x78
 800c82a:	4832      	ldr	r0, [pc, #200]	; (800c8f4 <_printf_i+0x240>)
 800c82c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	6829      	ldr	r1, [r5, #0]
 800c834:	061f      	lsls	r7, r3, #24
 800c836:	f851 6b04 	ldr.w	r6, [r1], #4
 800c83a:	d402      	bmi.n	800c842 <_printf_i+0x18e>
 800c83c:	065f      	lsls	r7, r3, #25
 800c83e:	bf48      	it	mi
 800c840:	b2b6      	uxthmi	r6, r6
 800c842:	07df      	lsls	r7, r3, #31
 800c844:	bf48      	it	mi
 800c846:	f043 0320 	orrmi.w	r3, r3, #32
 800c84a:	6029      	str	r1, [r5, #0]
 800c84c:	bf48      	it	mi
 800c84e:	6023      	strmi	r3, [r4, #0]
 800c850:	b91e      	cbnz	r6, 800c85a <_printf_i+0x1a6>
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	f023 0320 	bic.w	r3, r3, #32
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	2310      	movs	r3, #16
 800c85c:	e7a6      	b.n	800c7ac <_printf_i+0xf8>
 800c85e:	4824      	ldr	r0, [pc, #144]	; (800c8f0 <_printf_i+0x23c>)
 800c860:	e7e4      	b.n	800c82c <_printf_i+0x178>
 800c862:	4615      	mov	r5, r2
 800c864:	e7bd      	b.n	800c7e2 <_printf_i+0x12e>
 800c866:	682b      	ldr	r3, [r5, #0]
 800c868:	6826      	ldr	r6, [r4, #0]
 800c86a:	1d18      	adds	r0, r3, #4
 800c86c:	6961      	ldr	r1, [r4, #20]
 800c86e:	6028      	str	r0, [r5, #0]
 800c870:	0635      	lsls	r5, r6, #24
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	d501      	bpl.n	800c87a <_printf_i+0x1c6>
 800c876:	6019      	str	r1, [r3, #0]
 800c878:	e002      	b.n	800c880 <_printf_i+0x1cc>
 800c87a:	0670      	lsls	r0, r6, #25
 800c87c:	d5fb      	bpl.n	800c876 <_printf_i+0x1c2>
 800c87e:	8019      	strh	r1, [r3, #0]
 800c880:	2300      	movs	r3, #0
 800c882:	4615      	mov	r5, r2
 800c884:	6123      	str	r3, [r4, #16]
 800c886:	e7bc      	b.n	800c802 <_printf_i+0x14e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	2100      	movs	r1, #0
 800c88c:	1d1a      	adds	r2, r3, #4
 800c88e:	602a      	str	r2, [r5, #0]
 800c890:	681d      	ldr	r5, [r3, #0]
 800c892:	6862      	ldr	r2, [r4, #4]
 800c894:	4628      	mov	r0, r5
 800c896:	f000 f849 	bl	800c92c <memchr>
 800c89a:	b108      	cbz	r0, 800c8a0 <_printf_i+0x1ec>
 800c89c:	1b40      	subs	r0, r0, r5
 800c89e:	6060      	str	r0, [r4, #4]
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8aa:	e7aa      	b.n	800c802 <_printf_i+0x14e>
 800c8ac:	462a      	mov	r2, r5
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	6923      	ldr	r3, [r4, #16]
 800c8b4:	47d0      	blx	sl
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d0ad      	beq.n	800c816 <_printf_i+0x162>
 800c8ba:	6823      	ldr	r3, [r4, #0]
 800c8bc:	079b      	lsls	r3, r3, #30
 800c8be:	d413      	bmi.n	800c8e8 <_printf_i+0x234>
 800c8c0:	68e0      	ldr	r0, [r4, #12]
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	4298      	cmp	r0, r3
 800c8c6:	bfb8      	it	lt
 800c8c8:	4618      	movlt	r0, r3
 800c8ca:	e7a6      	b.n	800c81a <_printf_i+0x166>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4632      	mov	r2, r6
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	47d0      	blx	sl
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d09d      	beq.n	800c816 <_printf_i+0x162>
 800c8da:	3501      	adds	r5, #1
 800c8dc:	68e3      	ldr	r3, [r4, #12]
 800c8de:	9903      	ldr	r1, [sp, #12]
 800c8e0:	1a5b      	subs	r3, r3, r1
 800c8e2:	42ab      	cmp	r3, r5
 800c8e4:	dcf2      	bgt.n	800c8cc <_printf_i+0x218>
 800c8e6:	e7eb      	b.n	800c8c0 <_printf_i+0x20c>
 800c8e8:	2500      	movs	r5, #0
 800c8ea:	f104 0619 	add.w	r6, r4, #25
 800c8ee:	e7f5      	b.n	800c8dc <_printf_i+0x228>
 800c8f0:	0800cd8f 	.word	0x0800cd8f
 800c8f4:	0800cda0 	.word	0x0800cda0

0800c8f8 <memmove>:
 800c8f8:	4288      	cmp	r0, r1
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	eb01 0402 	add.w	r4, r1, r2
 800c900:	d902      	bls.n	800c908 <memmove+0x10>
 800c902:	4284      	cmp	r4, r0
 800c904:	4623      	mov	r3, r4
 800c906:	d807      	bhi.n	800c918 <memmove+0x20>
 800c908:	1e43      	subs	r3, r0, #1
 800c90a:	42a1      	cmp	r1, r4
 800c90c:	d008      	beq.n	800c920 <memmove+0x28>
 800c90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c916:	e7f8      	b.n	800c90a <memmove+0x12>
 800c918:	4601      	mov	r1, r0
 800c91a:	4402      	add	r2, r0
 800c91c:	428a      	cmp	r2, r1
 800c91e:	d100      	bne.n	800c922 <memmove+0x2a>
 800c920:	bd10      	pop	{r4, pc}
 800c922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c92a:	e7f7      	b.n	800c91c <memmove+0x24>

0800c92c <memchr>:
 800c92c:	4603      	mov	r3, r0
 800c92e:	b510      	push	{r4, lr}
 800c930:	b2c9      	uxtb	r1, r1
 800c932:	4402      	add	r2, r0
 800c934:	4293      	cmp	r3, r2
 800c936:	4618      	mov	r0, r3
 800c938:	d101      	bne.n	800c93e <memchr+0x12>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e003      	b.n	800c946 <memchr+0x1a>
 800c93e:	7804      	ldrb	r4, [r0, #0]
 800c940:	3301      	adds	r3, #1
 800c942:	428c      	cmp	r4, r1
 800c944:	d1f6      	bne.n	800c934 <memchr+0x8>
 800c946:	bd10      	pop	{r4, pc}

0800c948 <_realloc_r>:
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94c:	4680      	mov	r8, r0
 800c94e:	4614      	mov	r4, r2
 800c950:	460e      	mov	r6, r1
 800c952:	b921      	cbnz	r1, 800c95e <_realloc_r+0x16>
 800c954:	4611      	mov	r1, r2
 800c956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c95a:	f7ff bb27 	b.w	800bfac <_malloc_r>
 800c95e:	b92a      	cbnz	r2, 800c96c <_realloc_r+0x24>
 800c960:	f7ff fc96 	bl	800c290 <_free_r>
 800c964:	4625      	mov	r5, r4
 800c966:	4628      	mov	r0, r5
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	f000 f81b 	bl	800c9a6 <_malloc_usable_size_r>
 800c970:	4284      	cmp	r4, r0
 800c972:	4607      	mov	r7, r0
 800c974:	d802      	bhi.n	800c97c <_realloc_r+0x34>
 800c976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c97a:	d812      	bhi.n	800c9a2 <_realloc_r+0x5a>
 800c97c:	4621      	mov	r1, r4
 800c97e:	4640      	mov	r0, r8
 800c980:	f7ff fb14 	bl	800bfac <_malloc_r>
 800c984:	4605      	mov	r5, r0
 800c986:	2800      	cmp	r0, #0
 800c988:	d0ed      	beq.n	800c966 <_realloc_r+0x1e>
 800c98a:	42bc      	cmp	r4, r7
 800c98c:	4622      	mov	r2, r4
 800c98e:	4631      	mov	r1, r6
 800c990:	bf28      	it	cs
 800c992:	463a      	movcs	r2, r7
 800c994:	f7ff fc6e 	bl	800c274 <memcpy>
 800c998:	4631      	mov	r1, r6
 800c99a:	4640      	mov	r0, r8
 800c99c:	f7ff fc78 	bl	800c290 <_free_r>
 800c9a0:	e7e1      	b.n	800c966 <_realloc_r+0x1e>
 800c9a2:	4635      	mov	r5, r6
 800c9a4:	e7df      	b.n	800c966 <_realloc_r+0x1e>

0800c9a6 <_malloc_usable_size_r>:
 800c9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9aa:	1f18      	subs	r0, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bfbc      	itt	lt
 800c9b0:	580b      	ldrlt	r3, [r1, r0]
 800c9b2:	18c0      	addlt	r0, r0, r3
 800c9b4:	4770      	bx	lr
	...

0800c9b8 <_init>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	bf00      	nop
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr

0800c9c4 <_fini>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	bf00      	nop
 800c9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ca:	bc08      	pop	{r3}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4770      	bx	lr
