
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800e5e0  0800e5e0  0001e5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea14  0800ea14  00020260  2**0
                  CONTENTS
  4 .ARM          00000000  0800ea14  0800ea14  00020260  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ea14  0800ea14  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800ea1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002cb8  20000260  0800ec7c  00020260  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002f18  0800ec7c  00022f18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020289  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022909  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005451  00000000  00000000  00042bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  00048028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001556  00000000  00000000  00049b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd76  00000000  00000000  0004b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024211  00000000  00000000  00068e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a072a  00000000  00000000  0008d075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007940  00000000  00000000  0012d7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001350e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000260 	.word	0x20000260
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e5c8 	.word	0x0800e5c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000264 	.word	0x20000264
 800014c:	0800e5c8 	.word	0x0800e5c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <BluetoothInit>:
CRC_short 			CRCReceive;

extern osThreadId TaskBluetoothHandle;


uint8_t BluetoothInit(Bluetooth *ble, UART_HandleTypeDef *bluetoothUARTHandle, DMA_HandleTypeDef *bluetoothUARTDMAHandle, osMessageQId *filaRX, osMessageQId *filaTX){
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
	//Pass the used UART handle to the struct
	ble->UARTHandle 	= bluetoothUARTHandle;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	601a      	str	r2, [r3, #0]
	ble->UARTDMAHandle 	= bluetoothUARTDMAHandle;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	605a      	str	r2, [r3, #4]

	UARTHandle 			= ble->UARTHandle;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <BluetoothInit+0x54>)
 8000fc8:	6013      	str	r3, [r2, #0]
	UARTDMAHandle 		= ble->UARTDMAHandle;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <BluetoothInit+0x58>)
 8000fd0:	6013      	str	r3, [r2, #0]

	//Pass the used queue to the struct
	ble->filaComandosRX = filaRX;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
	ble->filaComandosTX = filaTX;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c

	//Start the component count variable from zero
	ble->_BleCommCount  = 0;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	ble->JanelaConexao = 120;//120 segundos
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2278      	movs	r2, #120	; 0x78
 8000fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//Return OK
	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000294 	.word	0x20000294
 8001000:	20000298 	.word	0x20000298

08001004 <BluetoothAddComp>:

uint8_t BluetoothAddComp(Bluetooth* ble, BleComando* _blecomm, char* objectname, uint8_t __comando, TypeComandoBle __tipo){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_blecomm->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff f89c 	bl	8000150 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	3301      	adds	r3, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f00c fda5 	bl	800db6c <malloc>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	605a      	str	r2, [r3, #4]
	//Pass the object name to the struct
	strcpy(_blecomm->objname, objectname);
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4618      	mov	r0, r3
 8001032:	f00c ff1f 	bl	800de74 <strcpy>

	//Pass the corresponding data from component to component struct
	_blecomm->_comando = __comando;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	701a      	strb	r2, [r3, #0]
	_blecomm->_tipo = __tipo;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	7e3a      	ldrb	r2, [r7, #24]
 8001040:	705a      	strb	r2, [r3, #1]

	//Add the component struct to the list on the Nextion Struct
	ble->_BleCommArr[ble->_BleCommCount] = _blecomm;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8001048:	461a      	mov	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3222      	adds	r2, #34	; 0x22
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	ble->_BleCommCount++;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800105a:	3301      	adds	r3, #1
 800105c:	b2da      	uxtb	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

	//Return OK
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <BluetoothPutFila>:

void BluetoothPutFila(Bluetooth* ble){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	//Varregura pelos comandos -----------------------------
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e06b      	b.n	8001156 <BluetoothPutFila+0xe6>

		//Detecta por comando--------------------------------
		if( ble->_RxDataArr[1] == (ble->_BleCommArr[i]->_comando)){
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8001084:	7bf9      	ldrb	r1, [r7, #15]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3122      	adds	r1, #34	; 0x22
 800108a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d15d      	bne.n	8001150 <BluetoothPutFila+0xe0>

			//Validacao de CRC-----------------------------------
			CRCReceive.hilo = CRC16(ble->_RxDataArr,ble->RxSize-2);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b02      	subs	r3, #2
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f000 fab7 	bl	800161c <CRC16>
 80010ae:	4603      	mov	r3, r0
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b4:	801a      	strh	r2, [r3, #0]
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <BluetoothPutFila+0xf8>)
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010c0:	3b02      	subs	r3, #2
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	440b      	add	r3, r1
 80010c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d10b      	bne.n	80010e6 <BluetoothPutFila+0x76>
					(CRCReceive.byte.lo != ble->_RxDataArr[ble->RxSize-1]))	{
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <BluetoothPutFila+0xf8>)
 80010d0:	785a      	ldrb	r2, [r3, #1]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010d8:	3b01      	subs	r3, #1
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	440b      	add	r3, r1
 80010de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
			if( 	(CRCReceive.byte.hi	!= ble->_RxDataArr[ble->RxSize-2])||//COMPARACAO CRC_LOCAL - CRC_RECEBIDO
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d002      	beq.n	80010ec <BluetoothPutFila+0x7c>
				BluetoothErroCRC();//erro de CRC
 80010e6:	f000 fcc7 	bl	8001a78 <BluetoothErroCRC>
				return; //ENCERRA
 80010ea:	e03a      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			if(ble->_BleCommArr[i]->_tipo == ComandoBasico ){
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3222      	adds	r2, #34	; 0x22
 80010f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d10e      	bne.n	800111a <BluetoothPutFila+0xaa>

				osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3222      	adds	r2, #34	; 0x22
 8001108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f04f 32ff 	mov.w	r2, #4294967295
 8001112:	4619      	mov	r1, r3
 8001114:	f009 fb66 	bl	800a7e4 <osMessagePut>
				return;
 8001118:	e023      	b.n	8001162 <BluetoothPutFila+0xf2>
			}

			else if(ble->_BleCommArr[i]->_tipo == ComandoCritico ){
 800111a:	7bfa      	ldrb	r2, [r7, #15]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3222      	adds	r2, #34	; 0x22
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d112      	bne.n	8001150 <BluetoothPutFila+0xe0>
				if(ble->SistemaEmErro){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00d      	beq.n	8001150 <BluetoothPutFila+0xe0>
					osMessagePut(*ble->filaComandosRX, ble->_BleCommArr[i]->_comando, osWaitForever);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3222      	adds	r2, #34	; 0x22
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	f04f 32ff 	mov.w	r2, #4294967295
 800114a:	4619      	mov	r1, r3
 800114c:	f009 fb4a 	bl	800a7e4 <osMessagePut>
	for(uint8_t i = 0; i < ble->_BleCommCount; i++)	{
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	3301      	adds	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	429a      	cmp	r2, r3
 8001160:	d38d      	bcc.n	800107e <BluetoothPutFila+0xe>
					//TX_COMANDO_NEGADO
				}
			}
		}
	}
}
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000029c 	.word	0x2000029c

0800116c <BLEUSART_IrqHandler>:

void BLEUSART_IrqHandler(Bluetooth *ble)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	if (UARTHandle->Instance->SR & UART_FLAG_IDLE) {    /* if Idle flag is set */
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d02a      	beq.n	80011da <BLEUSART_IrqHandler+0x6e>
		__IO uint32_t __attribute__((unused))tmp;      	/* Must be volatile to prevent optimizations */

		tmp = UARTHandle->Instance->SR;                 /* Read status register */
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
		tmp = UARTHandle->Instance->DR;                 /* Read data register */
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	60fb      	str	r3, [r7, #12]
		__HAL_DMA_DISABLE (UARTDMAHandle);       		/* Disabling DMA will force transfer complete interrupt if enabled */
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

		__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <BLEUSART_IrqHandler+0x78>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	60da      	str	r2, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <BLEUSART_IrqHandler+0x7c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0202 	orr.w	r2, r2, #2
 80011d2:	601a      	str	r2, [r3, #0]

		BLEDMA_IrqHandler (ble);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f809 	bl	80011ec <BLEDMA_IrqHandler>
	}
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000294 	.word	0x20000294
 80011e8:	20000298 	.word	0x20000298

080011ec <BLEDMA_IrqHandler>:

void BLEDMA_IrqHandler (Bluetooth *ble)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if(__HAL_DMA_GET_IT_SOURCE(UARTDMAHandle, DMA_IT_TC) != RESET){   // if the source is TC
 80011f4:	4b9c      	ldr	r3, [pc, #624]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 8168 	bne.w	80014d6 <BLEDMA_IrqHandler+0x2ea>

		/* Clear the transfer complete flag */
		__HAL_DMA_CLEAR_FLAG(UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(UARTDMAHandle));
 8001206:	4b98      	ldr	r3, [pc, #608]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a97      	ldr	r2, [pc, #604]	; (800146c <BLEDMA_IrqHandler+0x280>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02e      	beq.n	8001270 <BLEDMA_IrqHandler+0x84>
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a95      	ldr	r2, [pc, #596]	; (8001470 <BLEDMA_IrqHandler+0x284>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d026      	beq.n	800126c <BLEDMA_IrqHandler+0x80>
 800121e:	4b92      	ldr	r3, [pc, #584]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a93      	ldr	r2, [pc, #588]	; (8001474 <BLEDMA_IrqHandler+0x288>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01d      	beq.n	8001266 <BLEDMA_IrqHandler+0x7a>
 800122a:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a91      	ldr	r2, [pc, #580]	; (8001478 <BLEDMA_IrqHandler+0x28c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d014      	beq.n	8001260 <BLEDMA_IrqHandler+0x74>
 8001236:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a8f      	ldr	r2, [pc, #572]	; (800147c <BLEDMA_IrqHandler+0x290>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00b      	beq.n	800125a <BLEDMA_IrqHandler+0x6e>
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8d      	ldr	r2, [pc, #564]	; (8001480 <BLEDMA_IrqHandler+0x294>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d102      	bne.n	8001254 <BLEDMA_IrqHandler+0x68>
 800124e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001252:	e00e      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001258:	e00b      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800125a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800125e:	e008      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	e005      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
 800126a:	e002      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 800126c:	2320      	movs	r3, #32
 800126e:	e000      	b.n	8001272 <BLEDMA_IrqHandler+0x86>
 8001270:	2302      	movs	r3, #2
 8001272:	4a84      	ldr	r2, [pc, #528]	; (8001484 <BLEDMA_IrqHandler+0x298>)
 8001274:	6053      	str	r3, [r2, #4]

		//zera contador de inatividade
		ble->msIdle=0;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

		//calculo do tamanho da string recebida
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - UARTDMAHandle->Instance->CNDTR;
 800127e:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <BLEDMA_IrqHandler+0x27c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800128c:	b2da      	uxtb	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

		//verifica se nao caiu conexao
		sprintf(ble->StringRecebida,"%s",ble->_RxDataArr);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3330      	adds	r3, #48	; 0x30
 800129e:	461a      	mov	r2, r3
 80012a0:	4979      	ldr	r1, [pc, #484]	; (8001488 <BLEDMA_IrqHandler+0x29c>)
 80012a2:	f00c fd17 	bl	800dcd4 <siprintf>

		//zera contador de mensagem, pois recebeu mensagem
		ble->msDesconectado = 0;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54


		//-------------------------MAQUINA CONEXAO--------------------------
		switch(ble->MaquinaConexao){
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <BLEDMA_IrqHandler+0xdc>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f2c0 80d2 	blt.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012be:	3b01      	subs	r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f200 80ce 	bhi.w	8001462 <BLEDMA_IrqHandler+0x276>
 80012c6:	e0a1      	b.n	800140c <BLEDMA_IrqHandler+0x220>
		case RX_DESCONECTADO:

			/*---   C O N E C T O U  ---*/
			ble->StatusSenha = false;//chave de validacao
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
			ble->ss = NULL;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+CONN");
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	335c      	adds	r3, #92	; 0x5c
 80012dc:	496b      	ldr	r1, [pc, #428]	; (800148c <BLEDMA_IrqHandler+0x2a0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f00c fd20 	bl	800dd24 <strstr>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if ((ble->ss != NULL  && ble->RxSize == 7) || MACRO_LE_BT_STATUS){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <BLEDMA_IrqHandler+0x114>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012fc:	2b07      	cmp	r3, #7
 80012fe:	d007      	beq.n	8001310 <BLEDMA_IrqHandler+0x124>
 8001300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001304:	4862      	ldr	r0, [pc, #392]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001306:	f004 ff69 	bl	80061dc <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <BLEDMA_IrqHandler+0x134>
				ble->MaquinaConexao = RX_CONECTADO;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2201      	movs	r2, #1
 8001314:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 	= true;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}

			/*---   A D D R  ---*/
			ble->ss = NULL;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "OK+ADDR:");
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	335c      	adds	r3, #92	; 0x5c
 800132c:	4959      	ldr	r1, [pc, #356]	; (8001494 <BLEDMA_IrqHandler+0x2a8>)
 800132e:	4618      	mov	r0, r3
 8001330:	f00c fcf8 	bl	800dd24 <strstr>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL){
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80b0 	beq.w	80014a8 <BLEDMA_IrqHandler+0x2bc>
				ble->PontoExato = ble->ss - ble->StringRecebida;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	335c      	adds	r3, #92	; 0x5c
 8001352:	1ad2      	subs	r2, r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	67da      	str	r2, [r3, #124]	; 0x7c
				for (int i = 0; i < 12; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e010      	b.n	8001380 <BLEDMA_IrqHandler+0x194>
					addr8Bits[i] = ble->_RxDataArr[i+ble->PontoExato+8];
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	3308      	adds	r3, #8
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	460a      	mov	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 12; i++) {
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b0b      	cmp	r3, #11
 8001384:	ddeb      	ble.n	800135e <BLEDMA_IrqHandler+0x172>
				}

				addr32Bits[0] = (addr8Bits[0]<<24)+(addr8Bits[1]<<16)+(addr8Bits[2]<<8)+(addr8Bits[3]);
 8001386:	4b44      	ldr	r3, [pc, #272]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	061a      	lsls	r2, r3, #24
 800138c:	4b42      	ldr	r3, [pc, #264]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800138e:	785b      	ldrb	r3, [r3, #1]
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	441a      	add	r2, r3
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 8001396:	789b      	ldrb	r3, [r3, #2]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4413      	add	r3, r2
 800139c:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 800139e:	78d2      	ldrb	r2, [r2, #3]
 80013a0:	4413      	add	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013a6:	601a      	str	r2, [r3, #0]
				addr32Bits[1] = (addr8Bits[4]<<24)+(addr8Bits[5]<<16)+(addr8Bits[6]<<8)+(addr8Bits[7]);
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013aa:	791b      	ldrb	r3, [r3, #4]
 80013ac:	061a      	lsls	r2, r3, #24
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	041b      	lsls	r3, r3, #16
 80013b4:	441a      	add	r2, r3
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013b8:	799b      	ldrb	r3, [r3, #6]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4413      	add	r3, r2
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013c0:	79d2      	ldrb	r2, [r2, #7]
 80013c2:	4413      	add	r3, r2
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013c8:	605a      	str	r2, [r3, #4]
				addr32Bits[2] = (addr8Bits[8]<<24)+(addr8Bits[9]<<16)+(addr8Bits[10]<<8)+(addr8Bits[11]);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013cc:	7a1b      	ldrb	r3, [r3, #8]
 80013ce:	061a      	lsls	r2, r3, #24
 80013d0:	4b31      	ldr	r3, [pc, #196]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013d2:	7a5b      	ldrb	r3, [r3, #9]
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	441a      	add	r2, r3
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013da:	7a9b      	ldrb	r3, [r3, #10]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4413      	add	r3, r2
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013e2:	7ad2      	ldrb	r2, [r2, #11]
 80013e4:	4413      	add	r3, r2
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <BLEDMA_IrqHandler+0x2b0>)
 80013ea:	609a      	str	r2, [r3, #8]

				ble->chave = CRC16(addr8Bits,12);
 80013ec:	210c      	movs	r1, #12
 80013ee:	482a      	ldr	r0, [pc, #168]	; (8001498 <BLEDMA_IrqHandler+0x2ac>)
 80013f0:	f000 f914 	bl	800161c <CRC16>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				osSignalSet(TaskBluetoothHandle, CHEGOU_ADDR_BLE);
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <BLEDMA_IrqHandler+0x2b4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	21bf      	movs	r1, #191	; 0xbf
 8001404:	4618      	mov	r0, r3
 8001406:	f009 f907 	bl	800a618 <osSignalSet>
			}
			break;
 800140a:	e04d      	b.n	80014a8 <BLEDMA_IrqHandler+0x2bc>
		case RX_VALIDADO:
		case RX_CONECTADO:
			/*---   D E S C O N E C T O U  ---*/
			ble->ss = NULL;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			ble->ss = strstr(ble->StringRecebida, "LOST");
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	335c      	adds	r3, #92	; 0x5c
 8001418:	4922      	ldr	r1, [pc, #136]	; (80014a4 <BLEDMA_IrqHandler+0x2b8>)
 800141a:	4618      	mov	r0, r3
 800141c:	f00c fc82 	bl	800dd24 <strstr>
 8001420:	4602      	mov	r2, r0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if (ble->ss != NULL || !MACRO_LE_BT_STATUS){
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142e:	2b00      	cmp	r3, #0
 8001430:	d107      	bne.n	8001442 <BLEDMA_IrqHandler+0x256>
 8001432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001436:	4816      	ldr	r0, [pc, #88]	; (8001490 <BLEDMA_IrqHandler+0x2a4>)
 8001438:	f004 fed0 	bl	80061dc <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <BLEDMA_IrqHandler+0x26e>
				ble->StatusSenha 		= false;//chave de validacao
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				ble->StatusConexao 		= false;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
			}


			BluetoothPutFila(ble);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fe08 	bl	8001070 <BluetoothPutFila>

			break;
 8001460:	e023      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>

		default:
			break;
 8001462:	bf00      	nop
 8001464:	e021      	b.n	80014aa <BLEDMA_IrqHandler+0x2be>
 8001466:	bf00      	nop
 8001468:	20000298 	.word	0x20000298
 800146c:	40020008 	.word	0x40020008
 8001470:	4002001c 	.word	0x4002001c
 8001474:	40020030 	.word	0x40020030
 8001478:	40020044 	.word	0x40020044
 800147c:	40020058 	.word	0x40020058
 8001480:	4002006c 	.word	0x4002006c
 8001484:	40020000 	.word	0x40020000
 8001488:	0800e5e0 	.word	0x0800e5e0
 800148c:	0800e5e4 	.word	0x0800e5e4
 8001490:	40010c00 	.word	0x40010c00
 8001494:	0800e5ec 	.word	0x0800e5ec
 8001498:	2000027c 	.word	0x2000027c
 800149c:	20000288 	.word	0x20000288
 80014a0:	20000c64 	.word	0x20000c64
 80014a4:	0800e5f8 	.word	0x0800e5f8
			break;
 80014a8:	bf00      	nop
		}
		/* Prepare DMA for next transfer */
		/* Important! DMA stream won't start if all flags are not cleared first */
		UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60da      	str	r2, [r3, #12]
		UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 80014b8:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	605a      	str	r2, [r3, #4]
		UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <BLEDMA_IrqHandler+0x2f4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
	}
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000298 	.word	0x20000298

080014e4 <BluetoothEnviaComando>:

void BluetoothEnviaComando(unsigned char _out[], int size)
{
 80014e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
 80014f0:	466b      	mov	r3, sp
 80014f2:	461e      	mov	r6, r3
	uint8_t	TX_Buffer		[size+3];
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	1cd9      	adds	r1, r3, #3
 80014f8:	1e4b      	subs	r3, r1, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	460a      	mov	r2, r1
 80014fe:	2300      	movs	r3, #0
 8001500:	4690      	mov	r8, r2
 8001502:	4699      	mov	r9, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001510:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001514:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001518:	460a      	mov	r2, r1
 800151a:	2300      	movs	r3, #0
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	00eb      	lsls	r3, r5, #3
 800152a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800152e:	00e2      	lsls	r2, r4, #3
 8001530:	460b      	mov	r3, r1
 8001532:	3307      	adds	r3, #7
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	ebad 0d03 	sub.w	sp, sp, r3
 800153c:	466b      	mov	r3, sp
 800153e:	3300      	adds	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
	unsigned short CRCVar;

	//varredura para local
	for (int i = 0; i <= size; ++i) {
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e00b      	b.n	8001560 <BluetoothEnviaComando+0x7c>
		TX_Buffer[i]=_out[i];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	7819      	ldrb	r1, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	4413      	add	r3, r2
 8001556:	460a      	mov	r2, r1
 8001558:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= size; ++i) {
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	ddef      	ble.n	8001548 <BluetoothEnviaComando+0x64>
	}

	//calculo e atribuicao do crc
	CRCVar = CRC16(_out,size+1);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3301      	adds	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	4619      	mov	r1, r3
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f852 	bl	800161c <CRC16>
 8001578:	4603      	mov	r3, r0
 800157a:	817b      	strh	r3, [r7, #10]
	TX_Buffer[size+2] = (unsigned char) (CRCVar >> 8);
 800157c:	897b      	ldrh	r3, [r7, #10]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29a      	uxth	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	54d1      	strb	r1, [r2, r3]
	TX_Buffer[size+1] = (unsigned char) (CRCVar & 0x00FF);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	897a      	ldrh	r2, [r7, #10]
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	54d1      	strb	r1, [r2, r3]

	Envia_bytes_UART((uint8_t *)TX_Buffer,size+3);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3303      	adds	r3, #3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f806 	bl	80015b4 <Envia_bytes_UART>
 80015a8:	46b5      	mov	sp, r6
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015b4 <Envia_bytes_UART>:

void Envia_bytes_UART(unsigned char _out[], uint8_t size){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(UARTHandle, (uint8_t *)_out, size,50);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <Envia_bytes_UART+0x24>)
 80015c2:	6818      	ldr	r0, [r3, #0]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	2332      	movs	r3, #50	; 0x32
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f007 fd98 	bl	8009100 <HAL_UART_Transmit>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000294 	.word	0x20000294

080015dc <Envia_texto_UART>:

void Envia_texto_UART(char _out[], uint16_t delay){
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit_IT(UARTHandle, (uint8_t *) _out, strlen(_out));
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <Envia_texto_UART+0x3c>)
 80015ea:	681c      	ldr	r4, [r3, #0]
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe fdaf 	bl	8000150 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	4620      	mov	r0, r4
 80015fc:	f007 fe03 	bl	8009206 <HAL_UART_Transmit_IT>
	if(delay != 0){
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <Envia_texto_UART+0x32>
		osDelay(delay);
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	4618      	mov	r0, r3
 800160a:	f008 ff79 	bl	800a500 <osDelay>
	}
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	bf00      	nop
 8001618:	20000294 	.word	0x20000294

0800161c <CRC16>:

unsigned short CRC16 (unsigned char *puchMsg, unsigned short usDataLen)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	807b      	strh	r3, [r7, #2]
			0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001628:	23ff      	movs	r3, #255	; 0xff
 800162a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800162c:	23ff      	movs	r3, #255	; 0xff
 800162e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001630:	e013      	b.n	800165a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	781a      	ldrb	r2, [r3, #0]
 800163a:	7bbb      	ldrb	r3, [r7, #14]
 800163c:	4053      	eors	r3, r2
 800163e:	b2db      	uxtb	r3, r3
 8001640:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <CRC16+0x64>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	4053      	eors	r3, r2
 800164e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <CRC16+0x68>)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4413      	add	r3, r2
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	807a      	strh	r2, [r7, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e6      	bne.n	8001632 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29b      	uxth	r3, r3
}//---END---//
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000000 	.word	0x20000000
 8001684:	20000100 	.word	0x20000100

08001688 <iniciaBleHm10>:
	__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
	HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE

}//---END---//

void iniciaBleHm10(Bluetooth* ble){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
		redefineBle=2,
		capturaAddr=3,
		final=4,
		erro=5,
	} sequenciaBle;
	sequenciaBle sequenciaBLE = inicio;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]


	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001694:	e1de      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		switch (sequenciaBLE) {
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	2b05      	cmp	r3, #5
 800169a:	f200 81da 	bhi.w	8001a52 <iniciaBleHm10+0x3ca>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <iniciaBleHm10+0x1c>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016bd 	.word	0x080016bd
 80016a8:	0800174b 	.word	0x0800174b
 80016ac:	080017df 	.word	0x080017df
 80016b0:	080019f9 	.word	0x080019f9
 80016b4:	08001a15 	.word	0x08001a15
 80016b8:	08001a4f 	.word	0x08001a4f
		case inicio:
			HAL_Delay(50);
 80016bc:	2032      	movs	r0, #50	; 0x32
 80016be:	f003 fb57 	bl	8004d70 <HAL_Delay>
			SETUP_UART(115200)
 80016c2:	4bb8      	ldr	r3, [pc, #736]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f007 fdf8 	bl	80092bc <HAL_UART_Abort_IT>
 80016cc:	4bb5      	ldr	r3, [pc, #724]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f007 fce3 	bl	800909c <HAL_UART_DeInit>
 80016d6:	2032      	movs	r0, #50	; 0x32
 80016d8:	f003 fb4a 	bl	8004d70 <HAL_Delay>
 80016dc:	4bb1      	ldr	r3, [pc, #708]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <iniciaBleHm10+0x31c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fc86 	bl	8008ffc <HAL_UART_Init>
 80016f0:	2032      	movs	r0, #50	; 0x32
 80016f2:	f003 fb3d 	bl	8004d70 <HAL_Delay>
			HAL_Delay(50);
 80016f6:	2032      	movs	r0, #50	; 0x32
 80016f8:	f003 fb3a 	bl	8004d70 <HAL_Delay>
			Envia_texto_UART("AT",50);	//
 80016fc:	2132      	movs	r1, #50	; 0x32
 80016fe:	48aa      	ldr	r0, [pc, #680]	; (80019a8 <iniciaBleHm10+0x320>)
 8001700:	f7ff ff6c 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",50);	//
 8001704:	2132      	movs	r1, #50	; 0x32
 8001706:	48a8      	ldr	r0, [pc, #672]	; (80019a8 <iniciaBleHm10+0x320>)
 8001708:	f7ff ff68 	bl	80015dc <Envia_texto_UART>

			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);							// HABILITA idle line INTERRUPT
 800170c:	4ba5      	ldr	r3, [pc, #660]	; (80019a4 <iniciaBleHm10+0x31c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4ba3      	ldr	r3, [pc, #652]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);							// HABILITA O DMA Tx cplt INTERRUPT
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <iniciaBleHm10+0x324>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <iniciaBleHm10+0x324>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0202 	orr.w	r2, r2, #2
 8001732:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001734:	4b9b      	ldr	r3, [pc, #620]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3330      	adds	r3, #48	; 0x30
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	4619      	mov	r1, r3
 8001740:	f007 fd96 	bl	8009270 <HAL_UART_Receive_DMA>
			sequenciaBLE = verificaNome;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]

			continue;
 8001748:	e184      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case verificaNome:
			static uint8_t tryingName=0;
			const uint8_t max_attempts = 5;
 800174a:	2305      	movs	r3, #5
 800174c:	73bb      	strb	r3, [r7, #14]
			const uint32_t delay_between_attempts_ms = 1000;
 800174e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001752:	60bb      	str	r3, [r7, #8]

			while (tryingName < max_attempts) {
 8001754:	bf00      	nop
 8001756:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <iniciaBleHm10+0x328>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	7bba      	ldrb	r2, [r7, #14]
 800175c:	429a      	cmp	r2, r3
 800175e:	d935      	bls.n	80017cc <iniciaBleHm10+0x144>
				Envia_texto_UART("AT+NAME?", 100);
 8001760:	2164      	movs	r1, #100	; 0x64
 8001762:	4894      	ldr	r0, [pc, #592]	; (80019b4 <iniciaBleHm10+0x32c>)
 8001764:	f7ff ff3a 	bl	80015dc <Envia_texto_UART>

				HAL_Delay(delay_between_attempts_ms);
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f003 fb01 	bl	8004d70 <HAL_Delay>
				ble->ss = NULL;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ble->ss = strstr(ble->StringRecebida, "NAME");
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	335c      	adds	r3, #92	; 0x5c
 800177a:	498f      	ldr	r1, [pc, #572]	; (80019b8 <iniciaBleHm10+0x330>)
 800177c:	4618      	mov	r0, r3
 800177e:	f00c fad1 	bl	800dd24 <strstr>
 8001782:	4602      	mov	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				if (ble->ss != NULL){
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d014      	beq.n	80017be <iniciaBleHm10+0x136>
					ble->ss = strstr(ble->StringRecebida, "EasyPizza");
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	335c      	adds	r3, #92	; 0x5c
 8001798:	4988      	ldr	r1, [pc, #544]	; (80019bc <iniciaBleHm10+0x334>)
 800179a:	4618      	mov	r0, r3
 800179c:	f00c fac2 	bl	800dd24 <strstr>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					if (ble->ss != NULL){
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <iniciaBleHm10+0x130>
									sequenciaBLE = capturaAddr;
 80017b2:	2303      	movs	r3, #3
 80017b4:	73fb      	strb	r3, [r7, #15]
//						sequenciaBLE = final;
						break;
 80017b6:	e009      	b.n	80017cc <iniciaBleHm10+0x144>
					} else {
						sequenciaBLE = redefineBle;
 80017b8:	2302      	movs	r3, #2
 80017ba:	73fb      	strb	r3, [r7, #15]
						break;
 80017bc:	e006      	b.n	80017cc <iniciaBleHm10+0x144>
					}
				} else {
					tryingName++;
 80017be:	4b7c      	ldr	r3, [pc, #496]	; (80019b0 <iniciaBleHm10+0x328>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <iniciaBleHm10+0x328>)
 80017c8:	701a      	strb	r2, [r3, #0]
					break;
 80017ca:	bf00      	nop
				}
			}

			if(tryingName >= max_attempts)
 80017cc:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <iniciaBleHm10+0x328>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	7bba      	ldrb	r2, [r7, #14]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	f200 813e 	bhi.w	8001a54 <iniciaBleHm10+0x3cc>
				sequenciaBLE = redefineBle;//extrapolou as tentativas
 80017d8:	2302      	movs	r3, #2
 80017da:	73fb      	strb	r3, [r7, #15]
			break;
 80017dc:	e13a      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case redefineBle:
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e4:	4876      	ldr	r0, [pc, #472]	; (80019c0 <iniciaBleHm10+0x338>)
 80017e6:	f004 fd10 	bl	800620a <HAL_GPIO_WritePin>
 80017ea:	20c8      	movs	r0, #200	; 0xc8
 80017ec:	f003 fac0 	bl	8004d70 <HAL_Delay>
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f6:	4872      	ldr	r0, [pc, #456]	; (80019c0 <iniciaBleHm10+0x338>)
 80017f8:	f004 fd07 	bl	800620a <HAL_GPIO_WritePin>
			HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f003 fab7 	bl	8004d70 <HAL_Delay>

			//seta em 115200
			SETUP_UART(115200)
 8001802:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f007 fd58 	bl	80092bc <HAL_UART_Abort_IT>
 800180c:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <iniciaBleHm10+0x31c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f007 fc43 	bl	800909c <HAL_UART_DeInit>
 8001816:	2032      	movs	r0, #50	; 0x32
 8001818:	f003 faaa 	bl	8004d70 <HAL_Delay>
 800181c:	4b61      	ldr	r3, [pc, #388]	; (80019a4 <iniciaBleHm10+0x31c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fbe6 	bl	8008ffc <HAL_UART_Init>
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f003 fa9d 	bl	8004d70 <HAL_Delay>
			Envia_texto_UART("AT",100);	//
 8001836:	2164      	movs	r1, #100	; 0x64
 8001838:	485b      	ldr	r0, [pc, #364]	; (80019a8 <iniciaBleHm10+0x320>)
 800183a:	f7ff fecf 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800183e:	2164      	movs	r1, #100	; 0x64
 8001840:	4859      	ldr	r0, [pc, #356]	; (80019a8 <iniciaBleHm10+0x320>)
 8001842:	f7ff fecb 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001846:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800184a:	485e      	ldr	r0, [pc, #376]	; (80019c4 <iniciaBleHm10+0x33c>)
 800184c:	f7ff fec6 	bl	80015dc <Envia_texto_UART>
			//seta em 9600
			SETUP_UART(9600)
 8001850:	4b54      	ldr	r3, [pc, #336]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f007 fd31 	bl	80092bc <HAL_UART_Abort_IT>
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <iniciaBleHm10+0x31c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f007 fc1c 	bl	800909c <HAL_UART_DeInit>
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f003 fa83 	bl	8004d70 <HAL_Delay>
 800186a:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <iniciaBleHm10+0x31c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <iniciaBleHm10+0x31c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f007 fbbf 	bl	8008ffc <HAL_UART_Init>
 800187e:	2032      	movs	r0, #50	; 0x32
 8001880:	f003 fa76 	bl	8004d70 <HAL_Delay>
			Envia_texto_UART("AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001888:	484e      	ldr	r0, [pc, #312]	; (80019c4 <iniciaBleHm10+0x33c>)
 800188a:	f7ff fea7 	bl	80015dc <Envia_texto_UART>

			Envia_texto_UART("AT",100);	//
 800188e:	2164      	movs	r1, #100	; 0x64
 8001890:	4845      	ldr	r0, [pc, #276]	; (80019a8 <iniciaBleHm10+0x320>)
 8001892:	f7ff fea3 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	4843      	ldr	r0, [pc, #268]	; (80019a8 <iniciaBleHm10+0x320>)
 800189a:	f7ff fe9f 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY3",300);	//BLOQUEIA CONEXAO
 800189e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018a2:	4849      	ldr	r0, [pc, #292]	; (80019c8 <iniciaBleHm10+0x340>)
 80018a4:	f7ff fe9a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+BAUD4",300);	//COLOCA BAUD EM 115200
 80018a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80018ac:	4847      	ldr	r0, [pc, #284]	; (80019cc <iniciaBleHm10+0x344>)
 80018ae:	f7ff fe95 	bl	80015dc <Envia_texto_UART>

			//seta em 115200
			SETUP_UART(115200)
 80018b2:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f007 fd00 	bl	80092bc <HAL_UART_Abort_IT>
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f007 fbeb 	bl	800909c <HAL_UART_DeInit>
 80018c6:	2032      	movs	r0, #50	; 0x32
 80018c8:	f003 fa52 	bl	8004d70 <HAL_Delay>
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <iniciaBleHm10+0x31c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f007 fb8e 	bl	8008ffc <HAL_UART_Init>
 80018e0:	2032      	movs	r0, #50	; 0x32
 80018e2:	f003 fa45 	bl	8004d70 <HAL_Delay>
			//	M_BLE_RESET
			MACRO_RESET_BLE
 80018e6:	2200      	movs	r2, #0
 80018e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ec:	4834      	ldr	r0, [pc, #208]	; (80019c0 <iniciaBleHm10+0x338>)
 80018ee:	f004 fc8c 	bl	800620a <HAL_GPIO_WritePin>
 80018f2:	20c8      	movs	r0, #200	; 0xc8
 80018f4:	f003 fa3c 	bl	8004d70 <HAL_Delay>
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018fe:	4830      	ldr	r0, [pc, #192]	; (80019c0 <iniciaBleHm10+0x338>)
 8001900:	f004 fc83 	bl	800620a <HAL_GPIO_WritePin>

			//CONFIGURA CENTRAL
			Envia_texto_UART("AT",100);	//
 8001904:	2164      	movs	r1, #100	; 0x64
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <iniciaBleHm10+0x320>)
 8001908:	f7ff fe68 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT",100);	//
 800190c:	2164      	movs	r1, #100	; 0x64
 800190e:	4826      	ldr	r0, [pc, #152]	; (80019a8 <iniciaBleHm10+0x320>)
 8001910:	f7ff fe64 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+POWE3",300);	//POTENCIA MAXIMA
 8001914:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001918:	482d      	ldr	r0, [pc, #180]	; (80019d0 <iniciaBleHm10+0x348>)
 800191a:	f7ff fe5f 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+SHOW3",300);	//MOSTRA O NOME e rssi
 800191e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001922:	482c      	ldr	r0, [pc, #176]	; (80019d4 <iniciaBleHm10+0x34c>)
 8001924:	f7ff fe5a 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+GAIN1",300);	//INSERE GANHO
 8001928:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800192c:	482a      	ldr	r0, [pc, #168]	; (80019d8 <iniciaBleHm10+0x350>)
 800192e:	f7ff fe55 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001932:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001936:	4829      	ldr	r0, [pc, #164]	; (80019dc <iniciaBleHm10+0x354>)
 8001938:	f7ff fe50 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 800193c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001940:	4827      	ldr	r0, [pc, #156]	; (80019e0 <iniciaBleHm10+0x358>)
 8001942:	f7ff fe4b 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001946:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800194a:	4826      	ldr	r0, [pc, #152]	; (80019e4 <iniciaBleHm10+0x35c>)
 800194c:	f7ff fe46 	bl	80015dc <Envia_texto_UART>

			Envia_texto_UART("AT+NAMEEasyPizza",400);		//NOME
 8001950:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001954:	4824      	ldr	r0, [pc, #144]	; (80019e8 <iniciaBleHm10+0x360>)
 8001956:	f7ff fe41 	bl	80015dc <Envia_texto_UART>
			Envia_texto_UART("AT+ADTY0",300);				//DESBLOQUEIA CONEXA
 800195a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800195e:	4823      	ldr	r0, [pc, #140]	; (80019ec <iniciaBleHm10+0x364>)
 8001960:	f7ff fe3c 	bl	80015dc <Envia_texto_UART>
			M_BLE_RESET
 8001964:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001968:	481e      	ldr	r0, [pc, #120]	; (80019e4 <iniciaBleHm10+0x35c>)
 800196a:	f7ff fe37 	bl	80015dc <Envia_texto_UART>
						sequenciaBLE = capturaAddr;
 800196e:	2303      	movs	r3, #3
 8001970:	73fb      	strb	r3, [r7, #15]
//			sequenciaBLE = final;
			break;
 8001972:	e06f      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case capturaAddr:
			static uint8_t tryingAddr=0;

			while (tryingAddr < max_attempts) {

				Envia_texto_UART("AT+ADDR?",300);//pede addr
 8001974:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001978:	481d      	ldr	r0, [pc, #116]	; (80019f0 <iniciaBleHm10+0x368>)
 800197a:	f7ff fe2f 	bl	80015dc <Envia_texto_UART>
				HAL_Delay(delay_between_attempts_ms);
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f003 f9f6 	bl	8004d70 <HAL_Delay>

				if (ble->chave != 0){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <iniciaBleHm10+0x30c>
					sequenciaBLE = final;
 800198e:	2304      	movs	r3, #4
 8001990:	73fb      	strb	r3, [r7, #15]
					break;
 8001992:	e037      	b.n	8001a04 <iniciaBleHm10+0x37c>
				} else {
					tryingAddr++;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <iniciaBleHm10+0x36c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3301      	adds	r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <iniciaBleHm10+0x36c>)
 800199e:	701a      	strb	r2, [r3, #0]
					break;
 80019a0:	e030      	b.n	8001a04 <iniciaBleHm10+0x37c>
 80019a2:	bf00      	nop
 80019a4:	20000294 	.word	0x20000294
 80019a8:	0800e600 	.word	0x0800e600
 80019ac:	20000298 	.word	0x20000298
 80019b0:	2000029e 	.word	0x2000029e
 80019b4:	0800e604 	.word	0x0800e604
 80019b8:	0800e610 	.word	0x0800e610
 80019bc:	0800e6b0 	.word	0x0800e6b0
 80019c0:	40010c00 	.word	0x40010c00
 80019c4:	0800e624 	.word	0x0800e624
 80019c8:	0800e630 	.word	0x0800e630
 80019cc:	0800e63c 	.word	0x0800e63c
 80019d0:	0800e648 	.word	0x0800e648
 80019d4:	0800e654 	.word	0x0800e654
 80019d8:	0800e660 	.word	0x0800e660
 80019dc:	0800e66c 	.word	0x0800e66c
 80019e0:	0800e678 	.word	0x0800e678
 80019e4:	0800e684 	.word	0x0800e684
 80019e8:	0800e6bc 	.word	0x0800e6bc
 80019ec:	0800e6a4 	.word	0x0800e6a4
 80019f0:	0800e6d0 	.word	0x0800e6d0
 80019f4:	2000029f 	.word	0x2000029f
			while (tryingAddr < max_attempts) {
 80019f8:	bf00      	nop
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <iniciaBleHm10+0x3e4>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8b7      	bhi.n	8001974 <iniciaBleHm10+0x2ec>
				}
			}

			if(tryingAddr >= max_attempts)
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <iniciaBleHm10+0x3e4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	7bba      	ldrb	r2, [r7, #14]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d822      	bhi.n	8001a54 <iniciaBleHm10+0x3cc>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001a0e:	2305      	movs	r3, #5
 8001a10:	73fb      	strb	r3, [r7, #15]

			break;
 8001a12:	e01f      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		case final:
			/*---HABILITA INTERRUPÇÃO---*/
			__HAL_UART_ENABLE_IT 	(UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0210 	orr.w	r2, r2, #16
 8001a26:	60da      	str	r2, [r3, #12]
			__HAL_DMA_ENABLE_IT 	(UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <iniciaBleHm10+0x3ec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <iniciaBleHm10+0x3ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0202 	orr.w	r2, r2, #2
 8001a3a:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA 	(UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <iniciaBleHm10+0x3e8>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3330      	adds	r3, #48	; 0x30
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	4619      	mov	r1, r3
 8001a48:	f007 fc12 	bl	8009270 <HAL_UART_Receive_DMA>
			return;
 8001a4c:	e00a      	b.n	8001a64 <iniciaBleHm10+0x3dc>
			break;
		case erro:
			//			sequenciaBLE = final;
			__NOP();
 8001a4e:	bf00      	nop
			break;
 8001a50:	e000      	b.n	8001a54 <iniciaBleHm10+0x3cc>
		default:
			break;
 8001a52:	bf00      	nop
	while(sequenciaBLE!=final || sequenciaBLE!=erro){
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	f47f ae1d 	bne.w	8001696 <iniciaBleHm10+0xe>
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	f47f ae19 	bne.w	8001696 <iniciaBleHm10+0xe>
		}
	}
}
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2000029f 	.word	0x2000029f
 8001a70:	20000294 	.word	0x20000294
 8001a74:	20000298 	.word	0x20000298

08001a78 <BluetoothErroCRC>:

void BluetoothErroCRC(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
	unsigned char	TXCRC[3];
	TXCRC[0] = 0x01;\
 8001a7e:	2301      	movs	r3, #1
 8001a80:	713b      	strb	r3, [r7, #4]
	TXCRC[1] = 0xEE;\
 8001a82:	23ee      	movs	r3, #238	; 0xee
 8001a84:	717b      	strb	r3, [r7, #5]
	TXCRC[2] = 0xEE;\
 8001a86:	23ee      	movs	r3, #238	; 0xee
 8001a88:	71bb      	strb	r3, [r7, #6]
	Envia_bytes_UART(TXCRC,3);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fd90 	bl	80015b4 <Envia_bytes_UART>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <BluetoothDescon>:

void BluetoothDescon(Bluetooth* ble){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	osDelay(30);
 8001aa4:	201e      	movs	r0, #30
 8001aa6:	f008 fd2b 	bl	800a500 <osDelay>
	Envia_texto_UART("AT",50);//DESCONECTA
 8001aaa:	2132      	movs	r1, #50	; 0x32
 8001aac:	480e      	ldr	r0, [pc, #56]	; (8001ae8 <BluetoothDescon+0x4c>)
 8001aae:	f7ff fd95 	bl	80015dc <Envia_texto_UART>

	/* Prepare DMA for next transfer */
	/* Important! DMA stream won't start if all flags are not cleared first */
	UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr;   /* Set memory address for DMA again */
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <BluetoothDescon+0x50>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	60da      	str	r2, [r3, #12]
	UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    /* Set number of bytes to receive */
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <BluetoothDescon+0x50>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	605a      	str	r2, [r3, #4]
	UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            /* Start DMA transfer */
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <BluetoothDescon+0x50>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <BluetoothDescon+0x50>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800e600 	.word	0x0800e600
 8001aec:	20000298 	.word	0x20000298

08001af0 <bluetooth10ms>:

void bluetooth10ms(Bluetooth* ble){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

	/*INCREMENTO DE INATIVIDADE-------------------*/
	(ble->msIdle<240)?ble->msIdle++:0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001afe:	2bef      	cmp	r3, #239	; 0xef
 8001b00:	d807      	bhi.n	8001b12 <bluetooth10ms+0x22>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b08:	3301      	adds	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

	/*MONITOR INATIVIDADE-------------------------*/
	if(ble->JanelaConexao>0){
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <bluetooth10ms+0x3e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b22:	2bc8      	cmp	r3, #200	; 0xc8
 8001b24:	d90b      	bls.n	8001b3e <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffb8 	bl	8001a9c <BluetoothDescon>
	else{
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
			BluetoothDescon(ble);
		}
	}
}
 8001b2c:	e007      	b.n	8001b3e <bluetooth10ms+0x4e>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001b34:	2bc8      	cmp	r3, #200	; 0xc8
 8001b36:	d902      	bls.n	8001b3e <bluetooth10ms+0x4e>
			BluetoothDescon(ble);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffaf 	bl	8001a9c <BluetoothDescon>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <bluetooth1000ms>:

void bluetooth1000ms(Bluetooth* ble){
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
	if(ble->JanelaConexao>0)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <bluetooth1000ms+0x22>
		ble->JanelaConexao--;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <EepromInit>:
//variaveis globais da EEprom
#ifndef INC_EEPROM_C_
#define INC_EEPROM_C_

uint8_t EepromInit(Eeprom *eeprom, I2C_HandleTypeDef *i2c, osMessageQId *fila)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	60f8      	str	r0, [r7, #12]
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
	//Pass the used I2C handle to the struct
	eeprom->i2cHandle = i2c;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	601a      	str	r2, [r3, #0]

	//Pass the used queue to the struct
	eeprom->filaComandos = fila;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	605a      	str	r2, [r3, #4]

	//Start the component count variable from zero
	eeprom->_EepromVarCount  = 0;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

	//Return OK
	return 0;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <EepromAddVar>:
	}
}

//variaveis de eeprom que serao manipuladas
uint8_t EepromAddVar(Eeprom *eeprom, EepromVariaveis* _eepromvar, char* objectname,uint8_t __addreeprom,TypeTamData tamanho,uint32_t minimo,uint32_t padrao,uint32_t maximo, uint32_t *addrVar)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b084      	sub	sp, #16
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	70fb      	strb	r3, [r7, #3]
	//Make space before passing the object name to the nexcomp struct
	_eepromvar->objname = (char *) malloc((strlen(objectname)*sizeof(char)) + 1);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe facf 	bl	8000150 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00b ffd8 	bl	800db6c <malloc>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	615a      	str	r2, [r3, #20]

	//Pass the object name to the struct
	strcpy(_eepromvar->objname, objectname);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00c f952 	bl	800de74 <strcpy>

	//Pass the corresponding data from component to component struct
	_eepromvar->_addrEprom = __addreeprom;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	801a      	strh	r2, [r3, #0]

	//definindo minimos maximos e default
	_eepromvar->minValue 		= minimo;
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	60da      	str	r2, [r3, #12]
	_eepromvar->defaultValue 	= padrao;
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	609a      	str	r2, [r3, #8]
	_eepromvar->maxValue 		= maximo;
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be8:	611a      	str	r2, [r3, #16]

	//passando o tamnho da variavel
	_eepromvar->_sizeType = tamanho;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	7e3a      	ldrb	r2, [r7, #24]
 8001bee:	761a      	strb	r2, [r3, #24]

	//Add the component struct to the list on the Nextion Struct
	eeprom->_EepromVarArr[eeprom->_EepromVarCount] = _eepromvar;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3202      	adds	r2, #2
 8001bfc:	68b9      	ldr	r1, [r7, #8]
 8001bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	eeprom->_EepromVarCount++;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc


	if(!addrVar)
 8001c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <EepromAddVar+0x7e>
		return 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e016      	b.n	8001c4a <EepromAddVar+0xac>
	switch (tamanho) {
 8001c1c:	7e3b      	ldrb	r3, [r7, #24]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d00e      	beq.n	8001c40 <EepromAddVar+0xa2>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	dc10      	bgt.n	8001c48 <EepromAddVar+0xaa>
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d002      	beq.n	8001c30 <EepromAddVar+0x92>
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d004      	beq.n	8001c38 <EepromAddVar+0x9a>
 8001c2e:	e00b      	b.n	8001c48 <EepromAddVar+0xaa>
	case DATA8BITS:
		_eepromvar->ptr8=(uint8_t *)addrVar;
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c34:	61da      	str	r2, [r3, #28]
		break;
 8001c36:	e007      	b.n	8001c48 <EepromAddVar+0xaa>
	case DATA16BITS:
		_eepromvar->ptr16=(uint16_t *)addrVar;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3c:	621a      	str	r2, [r3, #32]
		break;
 8001c3e:	e003      	b.n	8001c48 <EepromAddVar+0xaa>
	case DATA32BITS:
		_eepromvar->ptr32=(uint32_t *)addrVar;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8001c46:	bf00      	nop
	}
	return 0;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <EepromSetVar>:

bool EepromSetVar(Eeprom *eeprom, EepromVariaveis *eepromvar, uint32_t valor)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	; 0x30
 8001c58:	af04      	add	r7, sp, #16
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result;
	uint8_t buffer0[1];
	uint8_t buffer1[2];
	uint8_t buffer2[4];
	//envio para memoria pagina 1
	LIBERA_EEPROM
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	4896      	ldr	r0, [pc, #600]	; (8001ec0 <EepromSetVar+0x26c>)
 8001c66:	f004 fad0 	bl	800620a <HAL_GPIO_WritePin>
 8001c6a:	2005      	movs	r0, #5
 8001c6c:	f003 f880 	bl	8004d70 <HAL_Delay>
	result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR,30,HAL_MAX_DELAY);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
 8001c78:	221e      	movs	r2, #30
 8001c7a:	21a2      	movs	r1, #162	; 0xa2
 8001c7c:	f004 fd1c 	bl	80066b8 <HAL_I2C_IsDeviceReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	77fb      	strb	r3, [r7, #31]
	if (result==HAL_OK)
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 810d 	bne.w	8001ea6 <EepromSetVar+0x252>
	{
		if(valor!=0){ //valor recebido
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d07e      	beq.n	8001d90 <EepromSetVar+0x13c>
			switch (eepromvar->_sizeType) {
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	7e1b      	ldrb	r3, [r3, #24]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d04f      	beq.n	8001d3a <EepromSetVar+0xe6>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	f300 8103 	bgt.w	8001ea6 <EepromSetVar+0x252>
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d002      	beq.n	8001caa <EepromSetVar+0x56>
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d022      	beq.n	8001cee <EepromSetVar+0x9a>
 8001ca8:	e0fd      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA8BITS:
				eepromvar->valor = (uint8_t)valor;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	605a      	str	r2, [r3, #4]
				buffer0[0] = (uint8_t)valor;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	773b      	strb	r3, [r7, #28]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	881a      	ldrh	r2, [r3, #0]
 8001cc2:	23c8      	movs	r3, #200	; 0xc8
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	21a2      	movs	r1, #162	; 0xa2
 8001cd4:	f004 fbf6 	bl	80064c4 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr8)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80d7 	beq.w	8001e90 <EepromSetVar+0x23c>
					break;
				*eepromvar->ptr8 = (uint8_t)valor;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]

				break;
 8001cec:	e0db      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA16BITS:
				eepromvar->valor = (uint16_t)valor;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(valor >> 8);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(valor & 0xFF);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	767b      	strb	r3, [r7, #25]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	23c8      	movs	r3, #200	; 0xc8
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	2302      	movs	r3, #2
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f107 0318 	add.w	r3, r7, #24
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	21a2      	movs	r1, #162	; 0xa2
 8001d20:	f004 fbd0 	bl	80064c4 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr16)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80b3 	beq.w	8001e94 <EepromSetVar+0x240>
					break;
				*eepromvar->ptr16 = (uint16_t)valor;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	b292      	uxth	r2, r2
 8001d36:	801a      	strh	r2, [r3, #0]
				break;
 8001d38:	e0b5      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA32BITS:
				eepromvar->valor = (uint32_t)valor;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(valor >> 24);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0e1b      	lsrs	r3, r3, #24
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(valor >> 16);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	0c1b      	lsrs	r3, r3, #16
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(valor >> 8);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	0a1b      	lsrs	r3, r3, #8
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(valor & 0xFF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	75fb      	strb	r3, [r7, #23]
				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	881a      	ldrh	r2, [r3, #0]
 8001d66:	23c8      	movs	r3, #200	; 0xc8
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2310      	movs	r3, #16
 8001d76:	21a2      	movs	r1, #162	; 0xa2
 8001d78:	f004 fba4 	bl	80064c4 <HAL_I2C_Mem_Write>

				if(!eepromvar->ptr32)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8089 	beq.w	8001e98 <EepromSetVar+0x244>
					break;
				*eepromvar->ptr32 = (uint32_t)valor;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
				break;
 8001d8e:	e08a      	b.n	8001ea6 <EepromSetVar+0x252>
			}
		}else{ //usar valor da var local
			switch (eepromvar->_sizeType) {
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d04b      	beq.n	8001e30 <EepromSetVar+0x1dc>
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	f300 8084 	bgt.w	8001ea6 <EepromSetVar+0x252>
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d002      	beq.n	8001da8 <EepromSetVar+0x154>
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d01e      	beq.n	8001de4 <EepromSetVar+0x190>
 8001da6:	e07e      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA8BITS:
				if(!eepromvar->ptr8)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d075      	beq.n	8001e9c <EepromSetVar+0x248>
					break;
				eepromvar->valor = *eepromvar->ptr8;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	605a      	str	r2, [r3, #4]
				buffer0[0] = *eepromvar->ptr8;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	773b      	strb	r3, [r7, #28]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR,eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer0, 1, 200);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	23c8      	movs	r3, #200	; 0xc8
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	f107 031c 	add.w	r3, r7, #28
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2310      	movs	r3, #16
 8001ddc:	21a2      	movs	r1, #162	; 0xa2
 8001dde:	f004 fb71 	bl	80064c4 <HAL_I2C_Mem_Write>

				break;
 8001de2:	e060      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA16BITS:
				if(!eepromvar->ptr16)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d059      	beq.n	8001ea0 <EepromSetVar+0x24c>
					break;
				eepromvar->valor = *eepromvar->ptr16;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	605a      	str	r2, [r3, #4]
				buffer1[0] = (uint8_t)(*eepromvar->ptr16 >> 8);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	763b      	strb	r3, [r7, #24]
				buffer1[1] = (uint8_t)(*eepromvar->ptr16 & 0xFF);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	767b      	strb	r3, [r7, #25]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT, (uint8_t *)buffer1, 2, 200);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	23c8      	movs	r3, #200	; 0xc8
 8001e1a:	9302      	str	r3, [sp, #8]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2310      	movs	r3, #16
 8001e28:	21a2      	movs	r1, #162	; 0xa2
 8001e2a:	f004 fb4b 	bl	80064c4 <HAL_I2C_Mem_Write>
				break;
 8001e2e:	e03a      	b.n	8001ea6 <EepromSetVar+0x252>
			case DATA32BITS:
				if(!eepromvar->ptr32)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d035      	beq.n	8001ea4 <EepromSetVar+0x250>
					break;
				eepromvar->valor = *eepromvar->ptr32;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	605a      	str	r2, [r3, #4]
				buffer2[0] = (uint8_t)(*eepromvar->ptr32 >> 24);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	0e1b      	lsrs	r3, r3, #24
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	753b      	strb	r3, [r7, #20]
				buffer2[1] = (uint8_t)(*eepromvar->ptr32 >> 16);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	757b      	strb	r3, [r7, #21]
				buffer2[2] = (uint8_t)(*eepromvar->ptr32 >> 8);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	75bb      	strb	r3, [r7, #22]
				buffer2[3] = (uint8_t)(*eepromvar->ptr32 & 0xFF);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	75fb      	strb	r3, [r7, #23]

				HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, eepromvar->_addrEprom, I2C_MEMADD_SIZE_16BIT,(uint8_t *)buffer2, 4, 200);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	881a      	ldrh	r2, [r3, #0]
 8001e78:	23c8      	movs	r3, #200	; 0xc8
 8001e7a:	9302      	str	r3, [sp, #8]
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2310      	movs	r3, #16
 8001e88:	21a2      	movs	r1, #162	; 0xa2
 8001e8a:	f004 fb1b 	bl	80064c4 <HAL_I2C_Mem_Write>
				break;
 8001e8e:	e00a      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001e90:	bf00      	nop
 8001e92:	e008      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001e94:	bf00      	nop
 8001e96:	e006      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001e98:	bf00      	nop
 8001e9a:	e004      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001e9c:	bf00      	nop
 8001e9e:	e002      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001ea0:	bf00      	nop
 8001ea2:	e000      	b.n	8001ea6 <EepromSetVar+0x252>
					break;
 8001ea4:	bf00      	nop
	//			break;
	//		}
	//	}
	//
	//	return result;
	TRAVA_EEPROM
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f002 ff62 	bl	8004d70 <HAL_Delay>
 8001eac:	2201      	movs	r2, #1
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <EepromSetVar+0x26c>)
 8001eb2:	f004 f9aa 	bl	800620a <HAL_GPIO_WritePin>
	return 1;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40010c00 	.word	0x40010c00

08001ec4 <RestauraPadraoTudo>:
		HAL_Delay(10);
	}
}

void RestauraPadraoTudo(Eeprom *eeprom)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	//redefine para default
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
 8001ed0:	e014      	b.n	8001efc <RestauraPadraoTudo+0x38>
		EepromSetVar(eeprom, eeprom->_EepromVarArr[i], eeprom->_EepromVarArr[i]->defaultValue);
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3202      	adds	r2, #2
 8001ed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3202      	adds	r2, #2
 8001ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff feb2 	bl	8001c54 <EepromSetVar>
		HAL_Delay(10);
 8001ef0:	200a      	movs	r0, #10
 8001ef2:	f002 ff3d 	bl	8004d70 <HAL_Delay>
	for(uint8_t i = 0; i < eeprom->_EepromVarCount; i++){
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3e4      	bcc.n	8001ed2 <RestauraPadraoTudo+0xe>
	}
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <vApplicationGetIdleTaskMemory+0x28>)
 8001f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8001f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	200002a0 	.word	0x200002a0
 8001f40:	20000340 	.word	0x20000340

08001f44 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <vApplicationGetTimerTaskMemory+0x30>)
 8001f5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000540 	.word	0x20000540
 8001f74:	200005e0 	.word	0x200005e0

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b5b0      	push	{r4, r5, r7, lr}
 8001f7a:	b0ba      	sub	sp, #232	; 0xe8
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f002 fec5 	bl	8004d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f82:	f000 f929 	bl	80021d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f86:	f000 fbe7 	bl	8002758 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f8a:	f000 fbb7 	bl	80026fc <MX_DMA_Init>
  MX_ADC1_Init();
 8001f8e:	f000 f97f 	bl	8002290 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f92:	f000 f9d9 	bl	8002348 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001f96:	f000 fac5 	bl	8002524 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001f9a:	f000 fa4d 	bl	8002438 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f9e:	f000 fb59 	bl	8002654 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fa2:	f000 fb81 	bl	80026a8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001fa6:	f000 f9fd 	bl	80023a4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8001faa:	2203      	movs	r2, #3
 8001fac:	4971      	ldr	r1, [pc, #452]	; (8002174 <main+0x1fc>)
 8001fae:	4872      	ldr	r0, [pc, #456]	; (8002178 <main+0x200>)
 8001fb0:	f002 ffda 	bl	8004f68 <HAL_ADC_Start_DMA>

	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	4871      	ldr	r0, [pc, #452]	; (800217c <main+0x204>)
 8001fb8:	f006 f950 	bl	800825c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8001fbc:	210c      	movs	r1, #12
 8001fbe:	486f      	ldr	r0, [pc, #444]	; (800217c <main+0x204>)
 8001fc0:	f006 f94c 	bl	800825c <HAL_TIM_PWM_Start>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSemUartTx */
  osSemaphoreDef(BinSemUartTx);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8001fd0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f008 fbaa 	bl	800a730 <osSemaphoreCreate>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a68      	ldr	r2, [pc, #416]	; (8002180 <main+0x208>)
 8001fe0:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of timer10ms */
  osTimerDef(timer10ms, CBTimer10ms);
 8001fe2:	4b68      	ldr	r3, [pc, #416]	; (8002184 <main+0x20c>)
 8001fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8001fee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f008 fa96 	bl	800a528 <osTimerCreate>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4a62      	ldr	r2, [pc, #392]	; (8002188 <main+0x210>)
 8002000:	6013      	str	r3, [r2, #0]

  /* definition and creation of timer1000ms */
  osTimerDef(timer1000ms, CBTimer1000ms);
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <main+0x214>)
 8002004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 800200e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f008 fa86 	bl	800a528 <osTimerCreate>
 800201c:	4603      	mov	r3, r0
 800201e:	4a5c      	ldr	r2, [pc, #368]	; (8002190 <main+0x218>)
 8002020:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of FilaComando */
  osMessageQDef(FilaComando, 10, uint16_t);
 8002022:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <main+0x21c>)
 8002024:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8002028:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800202a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaComandoHandle = osMessageCreate(osMessageQ(FilaComando), NULL);
 800202e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f008 fbad 	bl	800a794 <osMessageCreate>
 800203a:	4603      	mov	r3, r0
 800203c:	4a56      	ldr	r2, [pc, #344]	; (8002198 <main+0x220>)
 800203e:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaTXBluetooth */
  osMessageQDef(FilaTXBluetooth, 16, uint32_t);
 8002040:	4b56      	ldr	r3, [pc, #344]	; (800219c <main+0x224>)
 8002042:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 8002046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaTXBluetoothHandle = osMessageCreate(osMessageQ(FilaTXBluetooth), NULL);
 800204c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f008 fb9e 	bl	800a794 <osMessageCreate>
 8002058:	4603      	mov	r3, r0
 800205a:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <main+0x228>)
 800205c:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaRXBluetooth */
  osMessageQDef(FilaRXBluetooth, 10, uint8_t);
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <main+0x22c>)
 8002060:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaRXBluetoothHandle = osMessageCreate(osMessageQ(FilaRXBluetooth), NULL);
 800206a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800206e:	2100      	movs	r1, #0
 8002070:	4618      	mov	r0, r3
 8002072:	f008 fb8f 	bl	800a794 <osMessageCreate>
 8002076:	4603      	mov	r3, r0
 8002078:	4a4b      	ldr	r2, [pc, #300]	; (80021a8 <main+0x230>)
 800207a:	6013      	str	r3, [r2, #0]

  /* definition and creation of FilaEeprom */
  osMessageQDef(FilaEeprom, 10, uint16_t);
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <main+0x21c>)
 800207e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002088:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f008 fb80 	bl	800a794 <osMessageCreate>
 8002094:	4603      	mov	r3, r0
 8002096:	4a45      	ldr	r2, [pc, #276]	; (80021ac <main+0x234>)
 8002098:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskBluetooth */
  osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 128);
 800209a:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <main+0x238>)
 800209c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80020a0:	461d      	mov	r5, r3
 80020a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 80020ae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f008 f9c4 	bl	800a442 <osThreadCreate>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <main+0x23c>)
 80020be:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 80020c0:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <main+0x240>)
 80020c2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80020c6:	461d      	mov	r5, r3
 80020c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 80020d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f008 f9b1 	bl	800a442 <osThreadCreate>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a36      	ldr	r2, [pc, #216]	; (80021bc <main+0x244>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <main+0x248>)
 80020e8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80020ec:	461d      	mov	r5, r3
 80020ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 80020fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f008 f99e 	bl	800a442 <osThreadCreate>
 8002106:	4603      	mov	r3, r0
 8002108:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <main+0x24c>)
 800210a:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <main+0x250>)
 800210e:	f107 0420 	add.w	r4, r7, #32
 8002112:	461d      	mov	r5, r3
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800211c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002120:	f107 0320 	add.w	r3, r7, #32
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f008 f98b 	bl	800a442 <osThreadCreate>
 800212c:	4603      	mov	r3, r0
 800212e:	4a27      	ldr	r2, [pc, #156]	; (80021cc <main+0x254>)
 8002130:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskEeprom */
  osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <main+0x258>)
 8002134:	1d3c      	adds	r4, r7, #4
 8002136:	461d      	mov	r5, r3
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f008 f97a 	bl	800a442 <osThreadCreate>
 800214e:	4603      	mov	r3, r0
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <main+0x25c>)
 8002152:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

  osTimerStart(timer10msHandle,10);
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <main+0x210>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	210a      	movs	r1, #10
 800215a:	4618      	mov	r0, r3
 800215c:	f008 fa18 	bl	800a590 <osTimerStart>
  osTimerStart(timer1000msHandle,1000);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <main+0x218>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002168:	4618      	mov	r0, r3
 800216a:	f008 fa11 	bl	800a590 <osTimerStart>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800216e:	f008 f961 	bl	800a434 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002172:	e7fe      	b.n	8002172 <main+0x1fa>
 8002174:	20001318 	.word	0x20001318
 8002178:	200009e0 	.word	0x200009e0
 800217c:	20000b04 	.word	0x20000b04
 8002180:	200011d0 	.word	0x200011d0
 8002184:	08002ad9 	.word	0x08002ad9
 8002188:	200011c8 	.word	0x200011c8
 800218c:	08002af5 	.word	0x08002af5
 8002190:	200011cc 	.word	0x200011cc
 8002194:	0800e6dc 	.word	0x0800e6dc
 8002198:	200011b8 	.word	0x200011b8
 800219c:	0800e6ec 	.word	0x0800e6ec
 80021a0:	200011bc 	.word	0x200011bc
 80021a4:	0800e6fc 	.word	0x0800e6fc
 80021a8:	200011c0 	.word	0x200011c0
 80021ac:	200011c4 	.word	0x200011c4
 80021b0:	0800e71c 	.word	0x0800e71c
 80021b4:	20000c64 	.word	0x20000c64
 80021b8:	0800e748 	.word	0x0800e748
 80021bc:	20000c68 	.word	0x20000c68
 80021c0:	0800e770 	.word	0x0800e770
 80021c4:	20000c6c 	.word	0x20000c6c
 80021c8:	0800e798 	.word	0x0800e798
 80021cc:	20000f10 	.word	0x20000f10
 80021d0:	0800e7c0 	.word	0x0800e7c0
 80021d4:	200011b4 	.word	0x200011b4

080021d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b094      	sub	sp, #80	; 0x50
 80021dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	2228      	movs	r2, #40	; 0x28
 80021e4:	2100      	movs	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00b fd94 	bl	800dd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002208:	230a      	movs	r3, #10
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800220c:	2301      	movs	r3, #1
 800220e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002210:	2310      	movs	r3, #16
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002214:	2301      	movs	r3, #1
 8002216:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002218:	2302      	movs	r3, #2
 800221a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800221c:	2300      	movs	r3, #0
 800221e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002224:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fdec 	bl	8006e08 <HAL_RCC_OscConfig>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002236:	f000 fc8b 	bl	8002b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223a:	230f      	movs	r3, #15
 800223c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2101      	movs	r1, #1
 8002256:	4618      	mov	r0, r3
 8002258:	f005 f858 	bl	800730c <HAL_RCC_ClockConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002262:	f000 fc75 	bl	8002b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002266:	2303      	movs	r3, #3
 8002268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800226a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002270:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002274:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	4618      	mov	r0, r3
 800227a:	f005 fa05 	bl	8007688 <HAL_RCCEx_PeriphCLKConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002284:	f000 fc64 	bl	8002b50 <Error_Handler>
  }
}
 8002288:	bf00      	nop
 800228a:	3750      	adds	r7, #80	; 0x50
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <MX_ADC1_Init+0xb4>)
 80022a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022b4:	4b22      	ldr	r3, [pc, #136]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ba:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022bc:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ce:	481c      	ldr	r0, [pc, #112]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022d0:	f002 fd72 	bl	8004db8 <HAL_ADC_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80022da:	f000 fc39 	bl	8002b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80022e2:	2301      	movs	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80022e6:	2306      	movs	r3, #6
 80022e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <MX_ADC1_Init+0xb0>)
 80022f0:	f002 ff2a 	bl	8005148 <HAL_ADC_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80022fa:	f000 fc29 	bl	8002b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80022fe:	2301      	movs	r3, #1
 8002300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002302:	2302      	movs	r3, #2
 8002304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	4619      	mov	r1, r3
 800230a:	480d      	ldr	r0, [pc, #52]	; (8002340 <MX_ADC1_Init+0xb0>)
 800230c:	f002 ff1c 	bl	8005148 <HAL_ADC_ConfigChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002316:	f000 fc1b 	bl	8002b50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800231a:	2310      	movs	r3, #16
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800231e:	2303      	movs	r3, #3
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_ADC1_Init+0xb0>)
 8002328:	f002 ff0e 	bl	8005148 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8002332:	f000 fc0d 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200009e0 	.word	0x200009e0
 8002344:	40012400 	.word	0x40012400

08002348 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <MX_I2C1_Init+0x50>)
 800234e:	4a13      	ldr	r2, [pc, #76]	; (800239c <MX_I2C1_Init+0x54>)
 8002350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_I2C1_Init+0x50>)
 8002354:	4a12      	ldr	r2, [pc, #72]	; (80023a0 <MX_I2C1_Init+0x58>)
 8002356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002358:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_I2C1_Init+0x50>)
 8002366:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <MX_I2C1_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_I2C1_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <MX_I2C1_Init+0x50>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_I2C1_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <MX_I2C1_Init+0x50>)
 8002386:	f003 ff59 	bl	800623c <HAL_I2C_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002390:	f000 fbde 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000a54 	.word	0x20000a54
 800239c:	40005400 	.word	0x40005400
 80023a0:	000186a0 	.word	0x000186a0

080023a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	2100      	movs	r1, #0
 80023ae:	460a      	mov	r2, r1
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	460a      	mov	r2, r1
 80023b4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_RTC_Init+0x8c>)
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <MX_RTC_Init+0x90>)
 80023be:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MX_RTC_Init+0x8c>)
 80023c2:	f04f 32ff 	mov.w	r2, #4294967295
 80023c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_RTC_Init+0x8c>)
 80023ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ce:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023d0:	4817      	ldr	r0, [pc, #92]	; (8002430 <MX_RTC_Init+0x8c>)
 80023d2:	f005 fac5 	bl	8007960 <HAL_RTC_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80023dc:	f000 fbb8 	bl	8002b50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	2201      	movs	r2, #1
 80023f0:	4619      	mov	r1, r3
 80023f2:	480f      	ldr	r0, [pc, #60]	; (8002430 <MX_RTC_Init+0x8c>)
 80023f4:	f005 fb40 	bl	8007a78 <HAL_RTC_SetTime>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80023fe:	f000 fba7 	bl	8002b50 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002402:	2301      	movs	r3, #1
 8002404:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002406:	2301      	movs	r3, #1
 8002408:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800240a:	2301      	movs	r3, #1
 800240c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800240e:	2300      	movs	r3, #0
 8002410:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002412:	463b      	mov	r3, r7
 8002414:	2201      	movs	r2, #1
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_RTC_Init+0x8c>)
 800241a:	f005 fbc5 	bl	8007ba8 <HAL_RTC_SetDate>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002424:	f000 fb94 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000aa8 	.word	0x20000aa8
 8002434:	40002800 	.word	0x40002800

08002438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08e      	sub	sp, #56	; 0x38
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	615a      	str	r2, [r3, #20]
 8002466:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <MX_TIM2_Init+0xe8>)
 800246a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1200-1;
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002472:	f240 42af 	movw	r2, #1199	; 0x4af
 8002476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <MX_TIM2_Init+0xe8>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002480:	2263      	movs	r2, #99	; 0x63
 8002482:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002486:	2200      	movs	r2, #0
 8002488:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248a:	4b25      	ldr	r3, [pc, #148]	; (8002520 <MX_TIM2_Init+0xe8>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002490:	4823      	ldr	r0, [pc, #140]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002492:	f005 fde9 	bl	8008068 <HAL_TIM_Base_Init>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800249c:	f000 fb58 	bl	8002b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024aa:	4619      	mov	r1, r3
 80024ac:	481c      	ldr	r0, [pc, #112]	; (8002520 <MX_TIM2_Init+0xe8>)
 80024ae:	f006 f9a5 	bl	80087fc <HAL_TIM_ConfigClockSource>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024b8:	f000 fb4a 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024bc:	4818      	ldr	r0, [pc, #96]	; (8002520 <MX_TIM2_Init+0xe8>)
 80024be:	f005 fe75 	bl	80081ac <HAL_TIM_PWM_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024c8:	f000 fb42 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	4619      	mov	r1, r3
 80024da:	4811      	ldr	r0, [pc, #68]	; (8002520 <MX_TIM2_Init+0xe8>)
 80024dc:	f006 fd1e 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024e6:	f000 fb33 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ea:	2360      	movs	r3, #96	; 0x60
 80024ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80024ee:	2332      	movs	r3, #50	; 0x32
 80024f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	220c      	movs	r2, #12
 80024fe:	4619      	mov	r1, r3
 8002500:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002502:	f006 f8b9 	bl	8008678 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800250c:	f000 fb20 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <MX_TIM2_Init+0xe8>)
 8002512:	f000 ff85 	bl	8003420 <HAL_TIM_MspPostInit>

}
 8002516:	bf00      	nop
 8002518:	3738      	adds	r7, #56	; 0x38
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000abc 	.word	0x20000abc

08002524 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <MX_TIM3_Init+0x128>)
 8002556:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <MX_TIM3_Init+0x12c>)
 8002558:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4000-1;
 800255a:	4b3c      	ldr	r3, [pc, #240]	; (800264c <MX_TIM3_Init+0x128>)
 800255c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002560:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b3a      	ldr	r3, [pc, #232]	; (800264c <MX_TIM3_Init+0x128>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <MX_TIM3_Init+0x128>)
 800256a:	2263      	movs	r2, #99	; 0x63
 800256c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <MX_TIM3_Init+0x128>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <MX_TIM3_Init+0x128>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800257a:	4834      	ldr	r0, [pc, #208]	; (800264c <MX_TIM3_Init+0x128>)
 800257c:	f005 fd74 	bl	8008068 <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002586:	f000 fae3 	bl	8002b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002594:	4619      	mov	r1, r3
 8002596:	482d      	ldr	r0, [pc, #180]	; (800264c <MX_TIM3_Init+0x128>)
 8002598:	f006 f930 	bl	80087fc <HAL_TIM_ConfigClockSource>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80025a2:	f000 fad5 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025a6:	4829      	ldr	r0, [pc, #164]	; (800264c <MX_TIM3_Init+0x128>)
 80025a8:	f005 fe00 	bl	80081ac <HAL_TIM_PWM_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025b2:	f000 facd 	bl	8002b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	4619      	mov	r1, r3
 80025c4:	4821      	ldr	r0, [pc, #132]	; (800264c <MX_TIM3_Init+0x128>)
 80025c6:	f006 fca9 	bl	8008f1c <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025d0:	f000 fabe 	bl	8002b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d4:	2360      	movs	r3, #96	; 0x60
 80025d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025e0:	2304      	movs	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4818      	ldr	r0, [pc, #96]	; (800264c <MX_TIM3_Init+0x128>)
 80025ec:	f006 f844 	bl	8008678 <HAL_TIM_PWM_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025f6:	f000 faab 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2204      	movs	r2, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	4812      	ldr	r0, [pc, #72]	; (800264c <MX_TIM3_Init+0x128>)
 8002602:	f006 f839 	bl	8008678 <HAL_TIM_PWM_ConfigChannel>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800260c:	f000 faa0 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2208      	movs	r2, #8
 8002614:	4619      	mov	r1, r3
 8002616:	480d      	ldr	r0, [pc, #52]	; (800264c <MX_TIM3_Init+0x128>)
 8002618:	f006 f82e 	bl	8008678 <HAL_TIM_PWM_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002622:	f000 fa95 	bl	8002b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	220c      	movs	r2, #12
 800262a:	4619      	mov	r1, r3
 800262c:	4807      	ldr	r0, [pc, #28]	; (800264c <MX_TIM3_Init+0x128>)
 800262e:	f006 f823 	bl	8008678 <HAL_TIM_PWM_ConfigChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002638:	f000 fa8a 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <MX_TIM3_Init+0x128>)
 800263e:	f000 feef 	bl	8003420 <HAL_TIM_MspPostInit>

}
 8002642:	bf00      	nop
 8002644:	3738      	adds	r7, #56	; 0x38
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000b04 	.word	0x20000b04
 8002650:	40000400 	.word	0x40000400

08002654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_USART1_UART_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 8002660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_USART1_UART_Init+0x4c>)
 800268c:	f006 fcb6 	bl	8008ffc <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002696:	f000 fa5b 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000b4c 	.word	0x20000b4c
 80026a4:	40013800 	.word	0x40013800

080026a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_USART3_UART_Init+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_USART3_UART_Init+0x4c>)
 80026e0:	f006 fc8c 	bl	8008ffc <HAL_UART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026ea:	f000 fa31 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000b94 	.word	0x20000b94
 80026f8:	40004800 	.word	0x40004800

080026fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_DMA_Init+0x58>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	4a13      	ldr	r2, [pc, #76]	; (8002754 <MX_DMA_Init+0x58>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6153      	str	r3, [r2, #20]
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_DMA_Init+0x58>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2105      	movs	r1, #5
 800271e:	200b      	movs	r0, #11
 8002720:	f002 ffe5 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002724:	200b      	movs	r0, #11
 8002726:	f002 fffe 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2105      	movs	r1, #5
 800272e:	200d      	movs	r0, #13
 8002730:	f002 ffdd 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002734:	200d      	movs	r0, #13
 8002736:	f002 fff6 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2105      	movs	r1, #5
 800273e:	200f      	movs	r0, #15
 8002740:	f002 ffd5 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002744:	200f      	movs	r0, #15
 8002746:	f002 ffee 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b39      	ldr	r3, [pc, #228]	; (8002854 <MX_GPIO_Init+0xfc>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a38      	ldr	r2, [pc, #224]	; (8002854 <MX_GPIO_Init+0xfc>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <MX_GPIO_Init+0xfc>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <MX_GPIO_Init+0xfc>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a32      	ldr	r2, [pc, #200]	; (8002854 <MX_GPIO_Init+0xfc>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <MX_GPIO_Init+0xfc>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80027a2:	482d      	ldr	r0, [pc, #180]	; (8002858 <MX_GPIO_Init+0x100>)
 80027a4:	f003 fd31 	bl	800620a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ae:	482b      	ldr	r0, [pc, #172]	; (800285c <MX_GPIO_Init+0x104>)
 80027b0:	f003 fd2b 	bl	800620a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 80027b4:	2200      	movs	r2, #0
 80027b6:	21f8      	movs	r1, #248	; 0xf8
 80027b8:	4827      	ldr	r0, [pc, #156]	; (8002858 <MX_GPIO_Init+0x100>)
 80027ba:	f003 fd26 	bl	800620a <HAL_GPIO_WritePin>
                          |EEPROM_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BLE_EN_Pin BLE_RESET_Pin RELE_2_Pin RELE_3_Pin
                           RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = BLE_EN_Pin|BLE_RESET_Pin|RELE_2_Pin|RELE_3_Pin
 80027be:	f246 0378 	movw	r3, #24696	; 0x6078
 80027c2:	60bb      	str	r3, [r7, #8]
                          |RELE_4_Pin|RELE_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c4:	2301      	movs	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2302      	movs	r3, #2
 80027ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0308 	add.w	r3, r7, #8
 80027d4:	4619      	mov	r1, r3
 80027d6:	4820      	ldr	r0, [pc, #128]	; (8002858 <MX_GPIO_Init+0x100>)
 80027d8:	f003 fac0 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_STATUS_Pin */
  GPIO_InitStruct.Pin = BLE_STATUS_Pin;
 80027dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027e2:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_GPIO_Init+0x108>)
 80027e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	4619      	mov	r1, r3
 80027f0:	4819      	ldr	r0, [pc, #100]	; (8002858 <MX_GPIO_Init+0x100>)
 80027f2:	f003 fab3 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_BLE_Pin */
  GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 80027f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_GPIO_Init+0x108>)
 80027fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	4619      	mov	r1, r3
 800280a:	4814      	ldr	r0, [pc, #80]	; (800285c <MX_GPIO_Init+0x104>)
 800280c:	f003 faa6 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 8002810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2302      	movs	r3, #2
 8002820:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	4619      	mov	r1, r3
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <MX_GPIO_Init+0x104>)
 800282a:	f003 fa97 	bl	8005d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : EEPROM_EN_Pin */
  GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002836:	2302      	movs	r3, #2
 8002838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2302      	movs	r3, #2
 800283c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 800283e:	f107 0308 	add.w	r3, r7, #8
 8002842:	4619      	mov	r1, r3
 8002844:	4804      	ldr	r0, [pc, #16]	; (8002858 <MX_GPIO_Init+0x100>)
 8002846:	f003 fa89 	bl	8005d5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	40010c00 	.word	0x40010c00
 800285c:	40010800 	.word	0x40010800
 8002860:	10110000 	.word	0x10110000

08002864 <desligaForno>:

/* USER CODE BEGIN 4 */

void desligaForno(void){
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
	PrimitiveStates.RTTimerMinutos 	= 0;
 8002868:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <desligaForno+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	PrimitiveStates.RTTimerSegundos = 0;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <desligaForno+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	PrimitiveStates.SetPointLastro 	= 0;
 8002878:	490a      	ldr	r1, [pc, #40]	; (80028a4 <desligaForno+0x40>)
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PrimitiveStates.SetPointTeto 	= 0;
 8002886:	4907      	ldr	r1, [pc, #28]	; (80028a4 <desligaForno+0x40>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PrimitiveStates.stateMaquina 	= inicial;
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <desligaForno+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	20001328 	.word	0x20001328

080028a8 <leTempInterna>:

void leTempInterna(void){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
#define Avg_slope .0043
#define V25_	1.43
#define VSENSE 3.3/4096 //12bit

	tempInterna = ((V25_ - VSENSE*buffer_ADC[2])/Avg_slope)+25;
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <leTempInterna+0x78>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fd97 	bl	80003e4 <__aeabi_ui2d>
 80028b6:	a314      	add	r3, pc, #80	; (adr r3, 8002908 <leTempInterna+0x60>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd fe0c 	bl	80004d8 <__aeabi_dmul>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	a112      	add	r1, pc, #72	; (adr r1, 8002910 <leTempInterna+0x68>)
 80028c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ca:	f7fd fc4d 	bl	8000168 <__aeabi_dsub>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	a310      	add	r3, pc, #64	; (adr r3, 8002918 <leTempInterna+0x70>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd ff26 	bl	800072c <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <leTempInterna+0x7c>)
 80028ee:	f7fd fc3d 	bl	800016c <__adddf3>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f8a7 	bl	8000a4c <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <leTempInterna+0x80>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}
 8002908:	66666666 	.word	0x66666666
 800290c:	3f4a6666 	.word	0x3f4a6666
 8002910:	ae147ae1 	.word	0xae147ae1
 8002914:	3ff6e147 	.word	0x3ff6e147
 8002918:	75f6fd22 	.word	0x75f6fd22
 800291c:	3f719ce0 	.word	0x3f719ce0
 8002920:	20001318 	.word	0x20001318
 8002924:	40390000 	.word	0x40390000
 8002928:	200011d4 	.word	0x200011d4
 800292c:	00000000 	.word	0x00000000

08002930 <controleCooler>:

void controleCooler(void){
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	if(PrimitiveStates.RealtimeLastro>200 || PrimitiveStates.RealtimeTeto>200){
 8002934:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <controleCooler+0x90>)
 8002936:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <controleCooler+0x94>)
 8002940:	f7fe f85a 	bl	80009f8 <__aeabi_dcmpgt>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <controleCooler+0x30>
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <controleCooler+0x90>)
 800294c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <controleCooler+0x94>)
 8002956:	f7fe f84f 	bl	80009f8 <__aeabi_dcmpgt>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <controleCooler+0x42>
		COOLER_ON
 8002960:	2201      	movs	r2, #1
 8002962:	2120      	movs	r1, #32
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <controleCooler+0x98>)
 8002966:	f003 fc50 	bl	800620a <HAL_GPIO_WritePin>
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <controleCooler+0x90>)
 800296c:	2201      	movs	r2, #1
 800296e:	711a      	strb	r2, [r3, #4]
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
		COOLER_OFF
	}
}
 8002970:	e01f      	b.n	80029b2 <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <controleCooler+0x90>)
 8002974:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002978:	a30f      	add	r3, pc, #60	; (adr r3, 80029b8 <controleCooler+0x88>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fe f81d 	bl	80009bc <__aeabi_dcmplt>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d100      	bne.n	800298a <controleCooler+0x5a>
}
 8002988:	e013      	b.n	80029b2 <controleCooler+0x82>
	}else 	if(PrimitiveStates.RealtimeLastro<195 && PrimitiveStates.RealtimeTeto<195){
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <controleCooler+0x90>)
 800298c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002990:	a309      	add	r3, pc, #36	; (adr r3, 80029b8 <controleCooler+0x88>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fe f811 	bl	80009bc <__aeabi_dcmplt>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d100      	bne.n	80029a2 <controleCooler+0x72>
}
 80029a0:	e007      	b.n	80029b2 <controleCooler+0x82>
		COOLER_OFF
 80029a2:	2200      	movs	r2, #0
 80029a4:	2120      	movs	r1, #32
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <controleCooler+0x98>)
 80029a8:	f003 fc2f 	bl	800620a <HAL_GPIO_WritePin>
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <controleCooler+0x90>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	711a      	strb	r2, [r3, #4]
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40686000 	.word	0x40686000
 80029c0:	20001328 	.word	0x20001328
 80029c4:	40690000 	.word	0x40690000
 80029c8:	40010c00 	.word	0x40010c00

080029cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;


	leTempInterna();
 80029d4:	f7ff ff68 	bl	80028a8 <leTempInterna>

	if(i<TAM){
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_ADC_ConvCpltCallback+0xf0>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029e0:	d216      	bcs.n	8002a10 <HAL_ADC_ConvCpltCallback+0x44>
		somatorio1+=buffer_ADC[1]; // somatorio
 80029e2:	4b37      	ldr	r3, [pc, #220]	; (8002ac0 <HAL_ADC_ConvCpltCallback+0xf4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a37      	ldr	r2, [pc, #220]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 80029f0:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_ADC_ConvCpltCallback+0xf4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	4413      	add	r3, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a00:	601a      	str	r2, [r3, #0]
		i++;
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_ADC_ConvCpltCallback+0xf0>)
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_ADC_ConvCpltCallback+0xf0>)
 8002a0c:	801a      	strh	r2, [r3, #0]
	//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
	//	static uint32_t temp = 0;
	//	temp = ADC1->DR;
	//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 8002a0e:	e050      	b.n	8002ab2 <HAL_ADC_ConvCpltCallback+0xe6>
		somatorio1 = somatorio1 / TAM; //calc media
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_ADC_ConvCpltCallback+0x100>)
 8002a16:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1a:	1152      	asrs	r2, r2, #5
 8002a1c:	17db      	asrs	r3, r3, #31
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	4a28      	ldr	r2, [pc, #160]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a22:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a28      	ldr	r2, [pc, #160]	; (8002acc <HAL_ADC_ConvCpltCallback+0x100>)
 8002a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a2e:	1152      	asrs	r2, r2, #5
 8002a30:	17db      	asrs	r3, r3, #31
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a36:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f90e 	bl	8000c60 <__aeabi_i2f>
 8002a44:	4603      	mov	r3, r0
 8002a46:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8002a48:	4921      	ldr	r1, [pc, #132]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x104>)
 8002a4a:	69f8      	ldr	r0, [r7, #28]
 8002a4c:	f7fe fa10 	bl	8000e70 <__aeabi_fdiv>
 8002a50:	4603      	mov	r3, r0
 8002a52:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe f8fd 	bl	8000c60 <__aeabi_i2f>
 8002a66:	4603      	mov	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8002a6a:	4919      	ldr	r1, [pc, #100]	; (8002ad0 <HAL_ADC_ConvCpltCallback+0x104>)
 8002a6c:	69b8      	ldr	r0, [r7, #24]
 8002a6e:	f7fe f9ff 	bl	8000e70 <__aeabi_fdiv>
 8002a72:	4603      	mov	r3, r0
 8002a74:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 8002a76:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_ADC_ConvCpltCallback+0xfc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8002a7c:	69f8      	ldr	r0, [r7, #28]
 8002a7e:	f7fd fcd3 	bl	8000428 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8002a8a:	69b8      	ldr	r0, [r7, #24]
 8002a8c:	f7fd fccc 	bl	8000428 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x108>)
 8002a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 8002aa2:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <HAL_ADC_ConvCpltCallback+0x108>)
 8002aa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002aa8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_ADC_ConvCpltCallback+0xf0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	801a      	strh	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	3720      	adds	r7, #32
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	2000136a 	.word	0x2000136a
 8002ac0:	20001318 	.word	0x20001318
 8002ac4:	2000136c 	.word	0x2000136c
 8002ac8:	20001370 	.word	0x20001370
 8002acc:	10624dd3 	.word	0x10624dd3
 8002ad0:	42c80000 	.word	0x42c80000
 8002ad4:	20001328 	.word	0x20001328

08002ad8 <CBTimer10ms>:
  /* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer10ms */

	bluetooth10ms(&bluetooth);
 8002ae0:	4803      	ldr	r0, [pc, #12]	; (8002af0 <CBTimer10ms+0x18>)
 8002ae2:	f7ff f805 	bl	8001af0 <bluetooth10ms>

  /* USER CODE END CBTimer10ms */
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200011d8 	.word	0x200011d8

08002af4 <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CBTimer1000ms */

	bluetooth1000ms(&bluetooth);
 8002afc:	4809      	ldr	r0, [pc, #36]	; (8002b24 <CBTimer1000ms+0x30>)
 8002afe:	f7ff f822 	bl	8001b46 <bluetooth1000ms>

	taskTemperatura1sec();
 8002b02:	f001 ffdb 	bl	8004abc <taskTemperatura1sec>

	taskBluetooth1sec();
 8002b06:	f000 ff57 	bl	80039b8 <taskBluetooth1sec>

	controleCooler();
 8002b0a:	f7ff ff11 	bl	8002930 <controleCooler>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <CBTimer1000ms+0x34>)
 8002b10:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <CBTimer1000ms+0x28>
		desligaForno();
 8002b18:	f7ff fea4 	bl	8002864 <desligaForno>
	}
  /* USER CODE END CBTimer1000ms */
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	200011d8 	.word	0x200011d8
 8002b28:	20001328 	.word	0x20001328

08002b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b3e:	f002 f8fb 	bl	8004d38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00

08002b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b54:	b672      	cpsid	i
}
 8002b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b58:	e7fe      	b.n	8002b58 <Error_Handler+0x8>

08002b5a <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b8a:	f7fd ff35 	bl	80009f8 <__aeabi_dcmpgt>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8002ba0:	e011      	b.n	8002bc6 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002bae:	f7fd ff05 	bl	80009bc <__aeabi_dcmplt>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d100      	bne.n	8002bba <PID_Init+0x60>
}
 8002bb8:	e005      	b.n	8002bc6 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af06      	add	r7, sp, #24
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002bf6:	a318      	add	r3, pc, #96	; (adr r3, 8002c58 <PID+0x88>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	e9cd 2300 	strd	r2, r3, [sp]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f931 	bl	8002e70 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2264      	movs	r2, #100	; 0x64
 8002c12:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8002c14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002c18:	4619      	mov	r1, r3
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fa38 	bl	8003090 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002c20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002c24:	9304      	str	r3, [sp, #16]
 8002c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c32:	e9cd 2300 	strd	r2, r3, [sp]
 8002c36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f984 	bl	8002f48 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002c40:	f002 f88c 	bl	8004d5c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	1ad2      	subs	r2, r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
	
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	406fe000 	.word	0x406fe000

08002c60 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002c60:	b5b0      	push	{r4, r5, r7, lr}
 8002c62:	b08c      	sub	sp, #48	; 0x30
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <PID_Compute+0x14>
	{
		return _FALSE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e0db      	b.n	8002e2c <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002c74:	f002 f872 	bl	8004d5c <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	f0c0 80cd 	bcc.w	8002e2a <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	f7fd fa5e 	bl	8000168 <__aeabi_dsub>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002cba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cbe:	f7fd fa53 	bl	8000168 <__aeabi_dsub>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002cd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cda:	f7fd fbfd 	bl	80004d8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fa41 	bl	800016c <__adddf3>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d114      	bne.n	8002d26 <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	f7fd fbe4 	bl	80004d8 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4620      	mov	r0, r4
 8002d16:	4629      	mov	r1, r5
 8002d18:	f7fd fa26 	bl	8000168 <__aeabi_dsub>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d32:	f7fd fe61 	bl	80009f8 <__aeabi_dcmpgt>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d48:	e010      	b.n	8002d6c <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d56:	f7fd fe31 	bl	80009bc <__aeabi_dcmplt>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d7e:	f7fd fbab 	bl	80004d8 <__aeabi_dmul>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002d8a:	e005      	b.n	8002d98 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da8:	f7fd fb96 	bl	80004d8 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4620      	mov	r0, r4
 8002db2:	4629      	mov	r1, r5
 8002db4:	f7fd f9d8 	bl	8000168 <__aeabi_dsub>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc0:	f7fd f9d4 	bl	800016c <__adddf3>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dd6:	f7fd fe0f 	bl	80009f8 <__aeabi_dcmpgt>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002de6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002dea:	e00e      	b.n	8002e0a <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002df6:	f7fd fde1 	bl	80009bc <__aeabi_dcmplt>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002e06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e12:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8002e2a:	2300      	movs	r3, #0
	}
	
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3730      	adds	r7, #48	; 0x30
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bdb0      	pop	{r4, r5, r7, pc}

08002e34 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <PID_SetMode+0x2e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	785b      	ldrb	r3, [r3, #1]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe7c 	bl	8002b5a <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	705a      	strb	r2, [r3, #1]
	
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e84:	f7fd fdae 	bl	80009e4 <__aeabi_dcmpge>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d158      	bne.n	8002f40 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e94:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e9e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04b      	beq.n	8002f42 <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002eb8:	f7fd fd9e 	bl	80009f8 <__aeabi_dcmpgt>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002ecc:	e9c1 2300 	strd	r2, r3, [r1]
 8002ed0:	e012      	b.n	8002ef8 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ee0:	f7fd fd6c 	bl	80009bc <__aeabi_dcmplt>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d006      	beq.n	8002ef8 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002ef4:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f04:	f7fd fd78 	bl	80009f8 <__aeabi_dcmpgt>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f14:	68f9      	ldr	r1, [r7, #12]
 8002f16:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002f1a:	e012      	b.n	8002f42 <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f28:	f7fd fd48 	bl	80009bc <__aeabi_dcmplt>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002f3e:	e000      	b.n	8002f42 <PID_SetOutputLimits+0xd2>
		return;
 8002f40:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f60:	f7fd fd2c 	bl	80009bc <__aeabi_dcmplt>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 808b 	bne.w	8003082 <PID_SetTunings2+0x13a>
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f78:	f7fd fd20 	bl	80009bc <__aeabi_dcmplt>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d17f      	bne.n	8003082 <PID_SetTunings2+0x13a>
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f8e:	f7fd fd15 	bl	80009bc <__aeabi_dcmplt>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d174      	bne.n	8003082 <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002f9e:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002fa0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fc4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fce:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fa04 	bl	80003e4 <__aeabi_ui2d>
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	4b2a      	ldr	r3, [pc, #168]	; (800308c <PID_SetTunings2+0x144>)
 8002fe2:	f7fd fba3 	bl	800072c <__aeabi_ddiv>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ffc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003000:	f7fd fa6a 	bl	80004d8 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	68f9      	ldr	r1, [r7, #12]
 800300a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800300e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003012:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003016:	f7fd fb89 	bl	800072c <__aeabi_ddiv>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d12b      	bne.n	8003084 <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	f7fd f895 	bl	8000168 <__aeabi_dsub>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	f7fd f887 	bl	8000168 <__aeabi_dsub>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800306a:	f04f 0000 	mov.w	r0, #0
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	f7fd f879 	bl	8000168 <__aeabi_dsub>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003080:	e000      	b.n	8003084 <PID_SetTunings2+0x13c>
		return;
 8003082:	bf00      	nop
		
	}
	
}
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	408f4000 	.word	0x408f4000

08003090 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02e      	beq.n	8003102 <PID_SetControllerDirection+0x72>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	78db      	ldrb	r3, [r3, #3]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d029      	beq.n	8003102 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	f7fd f854 	bl	8000168 <__aeabi_dsub>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	f7fd f846 	bl	8000168 <__aeabi_dsub>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030ec:	f04f 0000 	mov.w	r0, #0
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f7fd f838 	bl	8000168 <__aeabi_dsub>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	70da      	strb	r2, [r3, #3]
	
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8003110:	b5b0      	push	{r4, r5, r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	dd2e      	ble.n	800317e <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	f7fd f96f 	bl	8000404 <__aeabi_i2d>
 8003126:	4604      	mov	r4, r0
 8003128:	460d      	mov	r5, r1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f958 	bl	80003e4 <__aeabi_ui2d>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4620      	mov	r0, r4
 800313a:	4629      	mov	r1, r5
 800313c:	f7fd faf6 	bl	800072c <__aeabi_ddiv>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800314e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003152:	f7fd f9c1 	bl	80004d8 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316a:	f7fd fadf 	bl	800072c <__aeabi_ddiv>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	609a      	str	r2, [r3, #8]
		
	}
	
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800318e:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <HAL_MspInit+0x68>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4a17      	ldr	r2, [pc, #92]	; (80031f0 <HAL_MspInit+0x68>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6193      	str	r3, [r2, #24]
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_MspInit+0x68>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_MspInit+0x68>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <HAL_MspInit+0x68>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_MspInit+0x68>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	607b      	str	r3, [r7, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	210f      	movs	r1, #15
 80031c2:	f06f 0001 	mvn.w	r0, #1
 80031c6:	f002 fa92 	bl	80056ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <HAL_MspInit+0x6c>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_MspInit+0x6c>)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40010000 	.word	0x40010000

080031f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003200:	f107 0310 	add.w	r3, r7, #16
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HAL_ADC_MspInit+0xbc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d149      	bne.n	80032ac <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 800321e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003222:	6193      	str	r3, [r2, #24]
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003230:	4b21      	ldr	r3, [pc, #132]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	4b1e      	ldr	r3, [pc, #120]	; (80032b8 <HAL_ADC_MspInit+0xc0>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	60bb      	str	r3, [r7, #8]
 8003246:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003248:	2303      	movs	r3, #3
 800324a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800324c:	2303      	movs	r3, #3
 800324e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	4619      	mov	r1, r3
 8003256:	4819      	ldr	r0, [pc, #100]	; (80032bc <HAL_ADC_MspInit+0xc4>)
 8003258:	f002 fd80 	bl	8005d5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800325c:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 800325e:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_ADC_MspInit+0xcc>)
 8003260:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 8003264:	2200      	movs	r2, #0
 8003266:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 8003276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 800327e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003282:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 8003286:	2220      	movs	r2, #32
 8003288:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 8003292:	f002 fa65 	bl	8005760 <HAL_DMA_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800329c:	f7ff fc58 	bl	8002b50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 80032a4:	621a      	str	r2, [r3, #32]
 80032a6:	4a06      	ldr	r2, [pc, #24]	; (80032c0 <HAL_ADC_MspInit+0xc8>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032ac:	bf00      	nop
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40012400 	.word	0x40012400
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40010800 	.word	0x40010800
 80032c0:	20000a10 	.word	0x20000a10
 80032c4:	40020008 	.word	0x40020008

080032c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <HAL_I2C_MspInit+0x90>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d132      	bne.n	800334e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <HAL_I2C_MspInit+0x94>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_I2C_MspInit+0x94>)
 80032ee:	f043 0308 	orr.w	r3, r3, #8
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <HAL_I2C_MspInit+0x94>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003300:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003306:	2312      	movs	r3, #18
 8003308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330a:	2303      	movs	r3, #3
 800330c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4812      	ldr	r0, [pc, #72]	; (8003360 <HAL_I2C_MspInit+0x98>)
 8003316:	f002 fd21 	bl	8005d5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_I2C_MspInit+0x9c>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
 8003330:	4a0c      	ldr	r2, [pc, #48]	; (8003364 <HAL_I2C_MspInit+0x9c>)
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_I2C_MspInit+0x94>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_I2C_MspInit+0x94>)
 800333c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003340:	61d3      	str	r3, [r2, #28]
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_I2C_MspInit+0x94>)
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800334e:	bf00      	nop
 8003350:	3728      	adds	r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40005400 	.word	0x40005400
 800335c:	40021000 	.word	0x40021000
 8003360:	40010c00 	.word	0x40010c00
 8003364:	40010000 	.word	0x40010000

08003368 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0b      	ldr	r2, [pc, #44]	; (80033a4 <HAL_RTC_MspInit+0x3c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d110      	bne.n	800339c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800337a:	f003 fd39 	bl	8006df0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RTC_MspInit+0x40>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RTC_MspInit+0x40>)
 8003384:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003388:	61d3      	str	r3, [r2, #28]
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_RTC_MspInit+0x40>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_RTC_MspInit+0x44>)
 8003398:	2201      	movs	r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40002800 	.word	0x40002800
 80033a8:	40021000 	.word	0x40021000
 80033ac:	4242043c 	.word	0x4242043c

080033b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d10c      	bne.n	80033dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	61d3      	str	r3, [r2, #28]
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033da:	e018      	b.n	800340e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_TIM_Base_MspInit+0x6c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d113      	bne.n	800340e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033e6:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	61d3      	str	r3, [r2, #28]
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_TIM_Base_MspInit+0x68>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2105      	movs	r1, #5
 8003402:	201d      	movs	r0, #29
 8003404:	f002 f973 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003408:	201d      	movs	r0, #29
 800340a:	f002 f98c 	bl	8005726 <HAL_NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	40000400 	.word	0x40000400

08003420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	f107 0318 	add.w	r3, r7, #24
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d118      	bne.n	8003472 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003458:	2308      	movs	r3, #8
 800345a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2302      	movs	r3, #2
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 0318 	add.w	r3, r7, #24
 8003468:	4619      	mov	r1, r3
 800346a:	481f      	ldr	r0, [pc, #124]	; (80034e8 <HAL_TIM_MspPostInit+0xc8>)
 800346c:	f002 fc76 	bl	8005d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003470:	e034      	b.n	80034dc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_TIM_MspPostInit+0xcc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d12f      	bne.n	80034dc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a12      	ldr	r2, [pc, #72]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_TIM_MspPostInit+0xc4>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2302      	movs	r3, #2
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0318 	add.w	r3, r7, #24
 80034bc:	4619      	mov	r1, r3
 80034be:	480a      	ldr	r0, [pc, #40]	; (80034e8 <HAL_TIM_MspPostInit+0xc8>)
 80034c0:	f002 fc4c 	bl	8005d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034c4:	2303      	movs	r3, #3
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2302      	movs	r3, #2
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	f107 0318 	add.w	r3, r7, #24
 80034d4:	4619      	mov	r1, r3
 80034d6:	4806      	ldr	r0, [pc, #24]	; (80034f0 <HAL_TIM_MspPostInit+0xd0>)
 80034d8:	f002 fc40 	bl	8005d5c <HAL_GPIO_Init>
}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010800 	.word	0x40010800
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40010c00 	.word	0x40010c00

080034f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 0318 	add.w	r3, r7, #24
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a62      	ldr	r2, [pc, #392]	; (8003698 <HAL_UART_MspInit+0x1a4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d160      	bne.n	80035d6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <HAL_UART_MspInit+0x1a8>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4a60      	ldr	r2, [pc, #384]	; (800369c <HAL_UART_MspInit+0x1a8>)
 800351a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351e:	6193      	str	r3, [r2, #24]
 8003520:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_UART_MspInit+0x1a8>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <HAL_UART_MspInit+0x1a8>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a5a      	ldr	r2, [pc, #360]	; (800369c <HAL_UART_MspInit+0x1a8>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6193      	str	r3, [r2, #24]
 8003538:	4b58      	ldr	r3, [pc, #352]	; (800369c <HAL_UART_MspInit+0x1a8>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003552:	f107 0318 	add.w	r3, r7, #24
 8003556:	4619      	mov	r1, r3
 8003558:	4851      	ldr	r0, [pc, #324]	; (80036a0 <HAL_UART_MspInit+0x1ac>)
 800355a:	f002 fbff 	bl	8005d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	4619      	mov	r1, r3
 8003572:	484b      	ldr	r0, [pc, #300]	; (80036a0 <HAL_UART_MspInit+0x1ac>)
 8003574:	f002 fbf2 	bl	8005d5c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003578:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 800357a:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_UART_MspInit+0x1b4>)
 800357c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800357e:	4b49      	ldr	r3, [pc, #292]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003584:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800358a:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003590:	4b44      	ldr	r3, [pc, #272]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003596:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 8003598:	2200      	movs	r2, #0
 800359a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035a2:	4b40      	ldr	r3, [pc, #256]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035a8:	483e      	ldr	r0, [pc, #248]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 80035aa:	f002 f8d9 	bl	8005760 <HAL_DMA_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80035b4:	f7ff facc 	bl	8002b50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80035be:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_UART_MspInit+0x1b0>)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2105      	movs	r1, #5
 80035c8:	2025      	movs	r0, #37	; 0x25
 80035ca:	f002 f890 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035ce:	2025      	movs	r0, #37	; 0x25
 80035d0:	f002 f8a9 	bl	8005726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80035d4:	e05c      	b.n	8003690 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a34      	ldr	r2, [pc, #208]	; (80036ac <HAL_UART_MspInit+0x1b8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d157      	bne.n	8003690 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_UART_MspInit+0x1a8>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_UART_MspInit+0x1a8>)
 80035e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035ea:	61d3      	str	r3, [r2, #28]
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_UART_MspInit+0x1a8>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_UART_MspInit+0x1a8>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <HAL_UART_MspInit+0x1a8>)
 80035fe:	f043 0308 	orr.w	r3, r3, #8
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_UART_MspInit+0x1a8>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	f107 0318 	add.w	r3, r7, #24
 8003622:	4619      	mov	r1, r3
 8003624:	4822      	ldr	r0, [pc, #136]	; (80036b0 <HAL_UART_MspInit+0x1bc>)
 8003626:	f002 fb99 	bl	8005d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800362a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800362e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003638:	f107 0318 	add.w	r3, r7, #24
 800363c:	4619      	mov	r1, r3
 800363e:	481c      	ldr	r0, [pc, #112]	; (80036b0 <HAL_UART_MspInit+0x1bc>)
 8003640:	f002 fb8c 	bl	8005d5c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_UART_MspInit+0x1c4>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 800364c:	2200      	movs	r2, #0
 800364e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003650:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 800366a:	2220      	movs	r2, #32
 800366c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003670:	2200      	movs	r2, #0
 8003672:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003674:	480f      	ldr	r0, [pc, #60]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003676:	f002 f873 	bl	8005760 <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8003680:	f7ff fa66 	bl	8002b50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_UART_MspInit+0x1c0>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003690:	bf00      	nop
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010800 	.word	0x40010800
 80036a4:	20000bdc 	.word	0x20000bdc
 80036a8:	40020058 	.word	0x40020058
 80036ac:	40004800 	.word	0x40004800
 80036b0:	40010c00 	.word	0x40010c00
 80036b4:	20000c20 	.word	0x20000c20
 80036b8:	40020030 	.word	0x40020030

080036bc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a17      	ldr	r2, [pc, #92]	; (8003728 <HAL_UART_MspDeInit+0x6c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d113      	bne.n	80036f6 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_UART_MspDeInit+0x70>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_UART_MspDeInit+0x70>)
 80036d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d8:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80036da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036de:	4814      	ldr	r0, [pc, #80]	; (8003730 <HAL_UART_MspDeInit+0x74>)
 80036e0:	f002 fcc0 	bl	8006064 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 f893 	bl	8005814 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80036ee:	2025      	movs	r0, #37	; 0x25
 80036f0:	f002 f827 	bl	8005742 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 80036f4:	e014      	b.n	8003720 <HAL_UART_MspDeInit+0x64>
  else if(huart->Instance==USART3)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <HAL_UART_MspDeInit+0x78>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10f      	bne.n	8003720 <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003700:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_UART_MspDeInit+0x70>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_UART_MspDeInit+0x70>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800370c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003710:	4809      	ldr	r0, [pc, #36]	; (8003738 <HAL_UART_MspDeInit+0x7c>)
 8003712:	f002 fca7 	bl	8006064 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	4618      	mov	r0, r3
 800371c:	f002 f87a 	bl	8005814 <HAL_DMA_DeInit>
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40013800 	.word	0x40013800
 800372c:	40021000 	.word	0x40021000
 8003730:	40010800 	.word	0x40010800
 8003734:	40004800 	.word	0x40004800
 8003738:	40010c00 	.word	0x40010c00

0800373c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	; 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003752:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_InitTick+0xd0>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	4a2d      	ldr	r2, [pc, #180]	; (800380c <HAL_InitTick+0xd0>)
 8003758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800375c:	6193      	str	r3, [r2, #24]
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_InitTick+0xd0>)
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800376a:	f107 020c 	add.w	r2, r7, #12
 800376e:	f107 0310 	add.w	r3, r7, #16
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f003 ff39 	bl	80075ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800377a:	f003 ff23 	bl	80075c4 <HAL_RCC_GetPCLK2Freq>
 800377e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	4a23      	ldr	r2, [pc, #140]	; (8003810 <HAL_InitTick+0xd4>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	0c9b      	lsrs	r3, r3, #18
 800378a:	3b01      	subs	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_InitTick+0xd8>)
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_InitTick+0xdc>)
 8003792:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_InitTick+0xd8>)
 8003796:	f240 32e7 	movw	r2, #999	; 0x3e7
 800379a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <HAL_InitTick+0xd8>)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_InitTick+0xd8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a8:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_InitTick+0xd8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_InitTick+0xd8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80037b4:	4817      	ldr	r0, [pc, #92]	; (8003814 <HAL_InitTick+0xd8>)
 80037b6:	f004 fc57 	bl	8008068 <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d11b      	bne.n	8003800 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80037c8:	4812      	ldr	r0, [pc, #72]	; (8003814 <HAL_InitTick+0xd8>)
 80037ca:	f004 fc9d 	bl	8008108 <HAL_TIM_Base_Start_IT>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80037d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d111      	bne.n	8003800 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80037dc:	2019      	movs	r0, #25
 80037de:	f001 ffa2 	bl	8005726 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d808      	bhi.n	80037fa <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80037e8:	2200      	movs	r2, #0
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	2019      	movs	r0, #25
 80037ee:	f001 ff7e 	bl	80056ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_InitTick+0xe0>)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e002      	b.n	8003800 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003804:	4618      	mov	r0, r3
 8003806:	3730      	adds	r7, #48	; 0x30
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	431bde83 	.word	0x431bde83
 8003814:	20001374 	.word	0x20001374
 8003818:	40012c00 	.word	0x40012c00
 800381c:	20000204 	.word	0x20000204

08003820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003824:	e7fe      	b.n	8003824 <NMI_Handler+0x4>

08003826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003826:	b480      	push	{r7}
 8003828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382a:	e7fe      	b.n	800382a <HardFault_Handler+0x4>

0800382c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003830:	e7fe      	b.n	8003830 <MemManage_Handler+0x4>

08003832 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003832:	b480      	push	{r7}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003836:	e7fe      	b.n	8003836 <BusFault_Handler+0x4>

08003838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800383c:	e7fe      	b.n	800383c <UsageFault_Handler+0x4>

0800383e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
	...

0800384c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003850:	4802      	ldr	r0, [pc, #8]	; (800385c <DMA1_Channel1_IRQHandler+0x10>)
 8003852:	f002 f94f 	bl	8005af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000a10 	.word	0x20000a10

08003860 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <DMA1_Channel3_IRQHandler+0x10>)
 8003866:	f002 f945 	bl	8005af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000c20 	.word	0x20000c20

08003874 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003878:	4803      	ldr	r0, [pc, #12]	; (8003888 <DMA1_Channel5_IRQHandler+0x14>)
 800387a:	f002 f93b 	bl	8005af4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
 800387e:	4803      	ldr	r0, [pc, #12]	; (800388c <DMA1_Channel5_IRQHandler+0x18>)
 8003880:	f7fd fcb4 	bl	80011ec <BLEDMA_IrqHandler>
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000bdc 	.word	0x20000bdc
 800388c:	200011d8 	.word	0x200011d8

08003890 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <TIM1_UP_IRQHandler+0x10>)
 8003896:	f004 fde7 	bl	8008468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20001374 	.word	0x20001374

080038a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <TIM3_IRQHandler+0x10>)
 80038aa:	f004 fddd 	bl	8008468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000b04 	.word	0x20000b04

080038b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <USART1_IRQHandler+0x14>)
 80038be:	f005 fe11 	bl	80094e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
 80038c2:	4803      	ldr	r0, [pc, #12]	; (80038d0 <USART1_IRQHandler+0x18>)
 80038c4:	f7fd fc52 	bl	800116c <BLEUSART_IrqHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000b4c 	.word	0x20000b4c
 80038d0:	200011d8 	.word	0x200011d8

080038d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <_sbrk+0x5c>)
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <_sbrk+0x60>)
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <_sbrk+0x64>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <_sbrk+0x68>)
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	429a      	cmp	r2, r3
 8003902:	d207      	bcs.n	8003914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003904:	f00a fa8a 	bl	800de1c <__errno>
 8003908:	4603      	mov	r3, r0
 800390a:	220c      	movs	r2, #12
 800390c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e009      	b.n	8003928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <_sbrk+0x64>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	4a05      	ldr	r2, [pc, #20]	; (8003938 <_sbrk+0x64>)
 8003924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003926:	68fb      	ldr	r3, [r7, #12]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20005000 	.word	0x20005000
 8003934:	00000400 	.word	0x00000400
 8003938:	200013bc 	.word	0x200013bc
 800393c:	20002f18 	.word	0x20002f18

08003940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800394c:	f7ff fff8 	bl	8003940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003950:	480b      	ldr	r0, [pc, #44]	; (8003980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003954:	4a0c      	ldr	r2, [pc, #48]	; (8003988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800395a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800395c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003968:	4c09      	ldr	r4, [pc, #36]	; (8003990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003976:	f00a fa57 	bl	800de28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800397a:	f7fe fafd 	bl	8001f78 <main>
  bx lr
 800397e:	4770      	bx	lr
  ldr r0, =_sdata
 8003980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003984:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003988:	0800ea1c 	.word	0x0800ea1c
  ldr r2, =_sbss
 800398c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003990:	20002f18 	.word	0x20002f18

08003994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003994:	e7fe      	b.n	8003994 <ADC1_2_IRQHandler>

08003996 <StartBluetooth>:
BleComando BLEAtualizaDataHora,BLEAlteraLimiteTemp,BLERestaura,BLESPTeto,BLESPLastro,BLESPtempo,BLEToggleTempo,BLEReceita,BLESPTempo,BLELightOn,BLELightOff;
BleComando BLEPedeSenha,BLERecebeuSenha,BLESetaLampada,BLECancelaProcesso;


void StartBluetooth(void const * argument)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
	initBluetooth();
 800399e:	f000 f81f 	bl	80039e0 <initBluetooth>

	for(;;)
	{
		rxBluetooth();
 80039a2:	f000 fa6b 	bl	8003e7c <rxBluetooth>

		txBluetooth();
 80039a6:	f000 f8f7 	bl	8003b98 <txBluetooth>

		osThreadYield();
 80039aa:	f006 fd97 	bl	800a4dc <osThreadYield>
		osDelay(50);
 80039ae:	2032      	movs	r0, #50	; 0x32
 80039b0:	f006 fda6 	bl	800a500 <osDelay>
		rxBluetooth();
 80039b4:	e7f5      	b.n	80039a2 <StartBluetooth+0xc>
	...

080039b8 <taskBluetooth1sec>:
	}
}

static uint16_t tempoSemAtividade;
#define MACRO_ANULA_INATIVIDADE tempoSemAtividade = 0;
void taskBluetooth1sec(void){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <taskBluetooth1sec+0x24>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80039c4:	d302      	bcc.n	80039cc <taskBluetooth1sec+0x14>
		desligaForno();
 80039c6:	f7fe ff4d 	bl	8002864 <desligaForno>
	}else
		tempoSemAtividade++;
}
 80039ca:	e005      	b.n	80039d8 <taskBluetooth1sec+0x20>
		tempoSemAtividade++;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <taskBluetooth1sec+0x24>)
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <taskBluetooth1sec+0x24>)
 80039d6:	801a      	strh	r2, [r3, #0]
}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20001440 	.word	0x20001440

080039e0 <initBluetooth>:

void initBluetooth(void){
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af02      	add	r7, sp, #8
	//inicializacao do bluetooth
	BluetoothInit(&bluetooth, &huart1, &hdma_usart1_rx, &FilaRXBluetoothHandle,FilaTXBluetoothHandle);
 80039e6:	4b47      	ldr	r3, [pc, #284]	; (8003b04 <initBluetooth+0x124>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4b46      	ldr	r3, [pc, #280]	; (8003b08 <initBluetooth+0x128>)
 80039ee:	4a47      	ldr	r2, [pc, #284]	; (8003b0c <initBluetooth+0x12c>)
 80039f0:	4947      	ldr	r1, [pc, #284]	; (8003b10 <initBluetooth+0x130>)
 80039f2:	4848      	ldr	r0, [pc, #288]	; (8003b14 <initBluetooth+0x134>)
 80039f4:	f7fd fad8 	bl	8000fa8 <BluetoothInit>

	//inicializacao do hardware
	iniciaBleHm10(&bluetooth);
 80039f8:	4846      	ldr	r0, [pc, #280]	; (8003b14 <initBluetooth+0x134>)
 80039fa:	f7fd fe45 	bl	8001688 <iniciaBleHm10>

	//possiveis comandos a serem recebidos pelo bluetooth
	BluetoothAddComp(&bluetooth, &BLEAtualizaRealtime, 	"RX_SOLICITA_REALTIME", 	RX_SOLICITA_REALTIME, 		ComandoBasico);
 80039fe:	2301      	movs	r3, #1
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	2315      	movs	r3, #21
 8003a04:	4a44      	ldr	r2, [pc, #272]	; (8003b18 <initBluetooth+0x138>)
 8003a06:	4945      	ldr	r1, [pc, #276]	; (8003b1c <initBluetooth+0x13c>)
 8003a08:	4842      	ldr	r0, [pc, #264]	; (8003b14 <initBluetooth+0x134>)
 8003a0a:	f7fd fafb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESolicitaSincronia,	"RX_SOLICITA_SINCRONIA", 	RX_SOLICITA_SINCRONIA, 		ComandoBasico);
 8003a0e:	2301      	movs	r3, #1
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2317      	movs	r3, #23
 8003a14:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <initBluetooth+0x140>)
 8003a16:	4943      	ldr	r1, [pc, #268]	; (8003b24 <initBluetooth+0x144>)
 8003a18:	483e      	ldr	r0, [pc, #248]	; (8003b14 <initBluetooth+0x134>)
 8003a1a:	f7fd faf3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAlteraLimiteTemp, 	"RX_ALTERA_VALOR_LIMITE", 	RX_LIMITE_TEMPERATURA,		ComandoBasico);
 8003a1e:	2301      	movs	r3, #1
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2326      	movs	r3, #38	; 0x26
 8003a24:	4a40      	ldr	r2, [pc, #256]	; (8003b28 <initBluetooth+0x148>)
 8003a26:	4941      	ldr	r1, [pc, #260]	; (8003b2c <initBluetooth+0x14c>)
 8003a28:	483a      	ldr	r0, [pc, #232]	; (8003b14 <initBluetooth+0x134>)
 8003a2a:	f7fd faeb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEAtualizaDataHora, 	"RX_ATUALIZA_HORA", 		RX_ATUALIZA_HORA,			ComandoBasico);
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2303      	movs	r3, #3
 8003a34:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <initBluetooth+0x150>)
 8003a36:	493f      	ldr	r1, [pc, #252]	; (8003b34 <initBluetooth+0x154>)
 8003a38:	4836      	ldr	r0, [pc, #216]	; (8003b14 <initBluetooth+0x134>)
 8003a3a:	f7fd fae3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERestaura, 			"RX_RESTAURA", 				RX_RESTAURA,				ComandoBasico);
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2310      	movs	r3, #16
 8003a44:	4a3c      	ldr	r2, [pc, #240]	; (8003b38 <initBluetooth+0x158>)
 8003a46:	493d      	ldr	r1, [pc, #244]	; (8003b3c <initBluetooth+0x15c>)
 8003a48:	4832      	ldr	r0, [pc, #200]	; (8003b14 <initBluetooth+0x134>)
 8003a4a:	f7fd fadb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEPedeSenha,   		"RX_PEDE_SENHA",  			RX_PEDE_SENHA,   			ComandoBasico);
 8003a4e:	2301      	movs	r3, #1
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2342      	movs	r3, #66	; 0x42
 8003a54:	4a3a      	ldr	r2, [pc, #232]	; (8003b40 <initBluetooth+0x160>)
 8003a56:	493b      	ldr	r1, [pc, #236]	; (8003b44 <initBluetooth+0x164>)
 8003a58:	482e      	ldr	r0, [pc, #184]	; (8003b14 <initBluetooth+0x134>)
 8003a5a:	f7fd fad3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLERecebeuSenha,     	"RX_RECEBEU_SENHA",        	RX_RECEBEU_SENHA,          	ComandoBasico);
 8003a5e:	2301      	movs	r3, #1
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <initBluetooth+0x168>)
 8003a66:	4939      	ldr	r1, [pc, #228]	; (8003b4c <initBluetooth+0x16c>)
 8003a68:	482a      	ldr	r0, [pc, #168]	; (8003b14 <initBluetooth+0x134>)
 8003a6a:	f7fd facb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTeto,     		"RX_SP_TEMP_TETO",        	RX_SP_TEMP_TETO,          	ComandoBasico);
 8003a6e:	2301      	movs	r3, #1
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2321      	movs	r3, #33	; 0x21
 8003a74:	4a36      	ldr	r2, [pc, #216]	; (8003b50 <initBluetooth+0x170>)
 8003a76:	4937      	ldr	r1, [pc, #220]	; (8003b54 <initBluetooth+0x174>)
 8003a78:	4826      	ldr	r0, [pc, #152]	; (8003b14 <initBluetooth+0x134>)
 8003a7a:	f7fd fac3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPLastro,     		"RX_SP_TEMP_LASTRO",       	RX_SP_TEMP_LASTRO,          ComandoBasico);
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	2322      	movs	r3, #34	; 0x22
 8003a84:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <initBluetooth+0x178>)
 8003a86:	4935      	ldr	r1, [pc, #212]	; (8003b5c <initBluetooth+0x17c>)
 8003a88:	4822      	ldr	r0, [pc, #136]	; (8003b14 <initBluetooth+0x134>)
 8003a8a:	f7fd fabb 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESPTempo,     		"RX_SP_TEMPO",       		RX_SP_TEMPO,        		ComandoBasico);
 8003a8e:	2301      	movs	r3, #1
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2323      	movs	r3, #35	; 0x23
 8003a94:	4a32      	ldr	r2, [pc, #200]	; (8003b60 <initBluetooth+0x180>)
 8003a96:	4933      	ldr	r1, [pc, #204]	; (8003b64 <initBluetooth+0x184>)
 8003a98:	481e      	ldr	r0, [pc, #120]	; (8003b14 <initBluetooth+0x134>)
 8003a9a:	f7fd fab3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEToggleTempo,     	"RX_TOGGLE_TEMPO",       	RX_TOGGLE_TEMPO,        	ComandoBasico);
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2324      	movs	r3, #36	; 0x24
 8003aa4:	4a30      	ldr	r2, [pc, #192]	; (8003b68 <initBluetooth+0x188>)
 8003aa6:	4931      	ldr	r1, [pc, #196]	; (8003b6c <initBluetooth+0x18c>)
 8003aa8:	481a      	ldr	r0, [pc, #104]	; (8003b14 <initBluetooth+0x134>)
 8003aaa:	f7fd faab 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLEReceita,     		"RX_RECEITA",     		  	RX_RECEITA,        			ComandoBasico);
 8003aae:	2301      	movs	r3, #1
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	2325      	movs	r3, #37	; 0x25
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	; (8003b70 <initBluetooth+0x190>)
 8003ab6:	492f      	ldr	r1, [pc, #188]	; (8003b74 <initBluetooth+0x194>)
 8003ab8:	4816      	ldr	r0, [pc, #88]	; (8003b14 <initBluetooth+0x134>)
 8003aba:	f7fd faa3 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOn,     		"RX_LIGA_LAMADA",     	  	RX_LIGA_LAMPADA,     		ComandoBasico);
 8003abe:	2301      	movs	r3, #1
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2327      	movs	r3, #39	; 0x27
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <initBluetooth+0x198>)
 8003ac6:	492d      	ldr	r1, [pc, #180]	; (8003b7c <initBluetooth+0x19c>)
 8003ac8:	4812      	ldr	r0, [pc, #72]	; (8003b14 <initBluetooth+0x134>)
 8003aca:	f7fd fa9b 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLELightOff,     		"RX_DESLIGA_LAMPADA",    	RX_DESLIGA_LAMPADA,  		ComandoBasico);
 8003ace:	2301      	movs	r3, #1
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2328      	movs	r3, #40	; 0x28
 8003ad4:	4a2a      	ldr	r2, [pc, #168]	; (8003b80 <initBluetooth+0x1a0>)
 8003ad6:	492b      	ldr	r1, [pc, #172]	; (8003b84 <initBluetooth+0x1a4>)
 8003ad8:	480e      	ldr	r0, [pc, #56]	; (8003b14 <initBluetooth+0x134>)
 8003ada:	f7fd fa93 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLESetaLampada,     	"RX_LIMITE_LAMPADA",    	RX_LIMITE_LAMPADA,  		ComandoBasico);
 8003ade:	2301      	movs	r3, #1
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2330      	movs	r3, #48	; 0x30
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <initBluetooth+0x1a8>)
 8003ae6:	4929      	ldr	r1, [pc, #164]	; (8003b8c <initBluetooth+0x1ac>)
 8003ae8:	480a      	ldr	r0, [pc, #40]	; (8003b14 <initBluetooth+0x134>)
 8003aea:	f7fd fa8b 	bl	8001004 <BluetoothAddComp>
	BluetoothAddComp(&bluetooth, &BLECancelaProcesso,  	"RX_CANCELA_PROCESSO",    	RX_CANCELA_PROCESSO,  		ComandoBasico);
 8003aee:	2301      	movs	r3, #1
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	2329      	movs	r3, #41	; 0x29
 8003af4:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <initBluetooth+0x1b0>)
 8003af6:	4927      	ldr	r1, [pc, #156]	; (8003b94 <initBluetooth+0x1b4>)
 8003af8:	4806      	ldr	r0, [pc, #24]	; (8003b14 <initBluetooth+0x134>)
 8003afa:	f7fd fa83 	bl	8001004 <BluetoothAddComp>
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	200011bc 	.word	0x200011bc
 8003b08:	200011c0 	.word	0x200011c0
 8003b0c:	20000bdc 	.word	0x20000bdc
 8003b10:	20000b4c 	.word	0x20000b4c
 8003b14:	200011d8 	.word	0x200011d8
 8003b18:	0800e7dc 	.word	0x0800e7dc
 8003b1c:	200013c0 	.word	0x200013c0
 8003b20:	0800e7f4 	.word	0x0800e7f4
 8003b24:	200013c8 	.word	0x200013c8
 8003b28:	0800e80c 	.word	0x0800e80c
 8003b2c:	200013d8 	.word	0x200013d8
 8003b30:	0800e824 	.word	0x0800e824
 8003b34:	200013d0 	.word	0x200013d0
 8003b38:	0800e838 	.word	0x0800e838
 8003b3c:	200013e0 	.word	0x200013e0
 8003b40:	0800e844 	.word	0x0800e844
 8003b44:	20001420 	.word	0x20001420
 8003b48:	0800e854 	.word	0x0800e854
 8003b4c:	20001428 	.word	0x20001428
 8003b50:	0800e868 	.word	0x0800e868
 8003b54:	200013e8 	.word	0x200013e8
 8003b58:	0800e878 	.word	0x0800e878
 8003b5c:	200013f0 	.word	0x200013f0
 8003b60:	0800e88c 	.word	0x0800e88c
 8003b64:	20001408 	.word	0x20001408
 8003b68:	0800e898 	.word	0x0800e898
 8003b6c:	200013f8 	.word	0x200013f8
 8003b70:	0800e8a8 	.word	0x0800e8a8
 8003b74:	20001400 	.word	0x20001400
 8003b78:	0800e8b4 	.word	0x0800e8b4
 8003b7c:	20001410 	.word	0x20001410
 8003b80:	0800e8c4 	.word	0x0800e8c4
 8003b84:	20001418 	.word	0x20001418
 8003b88:	0800e8d8 	.word	0x0800e8d8
 8003b8c:	20001430 	.word	0x20001430
 8003b90:	0800e8ec 	.word	0x0800e8ec
 8003b94:	20001438 	.word	0x20001438

08003b98 <txBluetooth>:

void txBluetooth(void){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af00      	add	r7, sp, #0
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	osEvent  evttx;
	evttx = osMessageGet(FilaTXBluetoothHandle, 0);
 8003b9e:	4bac      	ldr	r3, [pc, #688]	; (8003e50 <txBluetooth+0x2b8>)
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f006 fe5c 	bl	800a864 <osMessageGet>
	if (evttx.status == osEventMessage) {
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	f040 814a 	bne.w	8003e48 <txBluetooth+0x2b0>
		switch ((unsigned int)evttx.value.p) {
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b8e      	cmp	r3, #142	; 0x8e
 8003bb8:	f200 8146 	bhi.w	8003e48 <txBluetooth+0x2b0>
 8003bbc:	2b8b      	cmp	r3, #139	; 0x8b
 8003bbe:	d20b      	bcs.n	8003bd8 <txBluetooth+0x40>
 8003bc0:	2b18      	cmp	r3, #24
 8003bc2:	f000 80c2 	beq.w	8003d4a <txBluetooth+0x1b2>
 8003bc6:	2b18      	cmp	r3, #24
 8003bc8:	f200 813e 	bhi.w	8003e48 <txBluetooth+0x2b0>
 8003bcc:	2b16      	cmp	r3, #22
 8003bce:	d013      	beq.n	8003bf8 <txBluetooth+0x60>
 8003bd0:	2b17      	cmp	r3, #23
 8003bd2:	f000 808e 	beq.w	8003cf2 <txBluetooth+0x15a>
			HAL_Delay(30);
			Envia_texto_UART("AT",50);//DESCONECTA
			break;
		}
	}
}
 8003bd6:	e137      	b.n	8003e48 <txBluetooth+0x2b0>
		switch ((unsigned int)evttx.value.p) {
 8003bd8:	3b8b      	subs	r3, #139	; 0x8b
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	f200 8134 	bhi.w	8003e48 <txBluetooth+0x2b0>
 8003be0:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <txBluetooth+0x50>)
 8003be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be6:	bf00      	nop
 8003be8:	08003d9d 	.word	0x08003d9d
 8003bec:	08003dd3 	.word	0x08003dd3
 8003bf0:	08003dff 	.word	0x08003dff
 8003bf4:	08003e1d 	.word	0x08003e1d
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x16;									// FUNÇÃO -
 8003bfc:	2316      	movs	r3, #22
 8003bfe:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.Erro.byte;							// Conjunto de erros
 8003c00:	4b94      	ldr	r3, [pc, #592]	; (8003e54 <txBluetooth+0x2bc>)
 8003c02:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003c06:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.stateMaquina;			// State da maquina
 8003c08:	4b92      	ldr	r3, [pc, #584]	; (8003e54 <txBluetooth+0x2bc>)
 8003c0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003c0e:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	>>8;
 8003c10:	4b90      	ldr	r3, [pc, #576]	; (8003e54 <txBluetooth+0x2bc>)
 8003c12:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c16:	4610      	mov	r0, r2
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f7fc fef7 	bl	8000a0c <__aeabi_d2uiz>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint16_t)PrimitiveStates.RealtimeTeto 	& 0x00FF;
 8003c2a:	4b8a      	ldr	r3, [pc, #552]	; (8003e54 <txBluetooth+0x2bc>)
 8003c2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c30:	4610      	mov	r0, r2
 8003c32:	4619      	mov	r1, r3
 8003c34:	f7fc feea 	bl	8000a0c <__aeabi_d2uiz>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint16_t)PrimitiveStates.SetPointTeto 	>>8;
 8003c40:	4b84      	ldr	r3, [pc, #528]	; (8003e54 <txBluetooth+0x2bc>)
 8003c42:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	f7fc fedf 	bl	8000a0c <__aeabi_d2uiz>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint16_t)PrimitiveStates.SetPointTeto 	& 0x00FF;
 8003c5a:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <txBluetooth+0x2bc>)
 8003c5c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003c60:	4610      	mov	r0, r2
 8003c62:	4619      	mov	r1, r3
 8003c64:	f7fc fed2 	bl	8000a0c <__aeabi_d2uiz>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	>>8;
 8003c70:	4b78      	ldr	r3, [pc, #480]	; (8003e54 <txBluetooth+0x2bc>)
 8003c72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c76:	4610      	mov	r0, r2
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fc fec7 	bl	8000a0c <__aeabi_d2uiz>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	763b      	strb	r3, [r7, #24]
			Buffer[9] 	= (uint16_t)PrimitiveStates.RealtimeLastro 	& 0x00FF;
 8003c8a:	4b72      	ldr	r3, [pc, #456]	; (8003e54 <txBluetooth+0x2bc>)
 8003c8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c90:	4610      	mov	r0, r2
 8003c92:	4619      	mov	r1, r3
 8003c94:	f7fc feba 	bl	8000a0c <__aeabi_d2uiz>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	767b      	strb	r3, [r7, #25]
			Buffer[10] 	= (uint16_t)PrimitiveStates.SetPointLastro 	>>8;
 8003ca0:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <txBluetooth+0x2bc>)
 8003ca2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f7fc feaf 	bl	8000a0c <__aeabi_d2uiz>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	76bb      	strb	r3, [r7, #26]
			Buffer[11] 	= (uint16_t)PrimitiveStates.SetPointLastro 	& 0x00FF;
 8003cba:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <txBluetooth+0x2bc>)
 8003cbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc fea2 	bl	8000a0c <__aeabi_d2uiz>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	76fb      	strb	r3, [r7, #27]
			BluetoothEnviaComando(Buffer, 11);
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	210b      	movs	r1, #11
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd fc04 	bl	80014e4 <BluetoothEnviaComando>
			osDelay(10);
 8003cdc:	200a      	movs	r0, #10
 8003cde:	f006 fc0f 	bl	800a500 <osDelay>
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA2, 0);
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	; (8003e50 <txBluetooth+0x2b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2117      	movs	r1, #23
 8003cea:	4618      	mov	r0, r3
 8003cec:	f006 fd7a 	bl	800a7e4 <osMessagePut>
			break;
 8003cf0:	e0aa      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x17;									// FUNÇÃO -
 8003cf6:	2317      	movs	r3, #23
 8003cf8:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= PrimitiveStates.RTTimerMinutos;
 8003cfa:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <txBluetooth+0x2bc>)
 8003cfc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003d00:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= PrimitiveStates.RTTimerSegundos;
 8003d02:	4b54      	ldr	r3, [pc, #336]	; (8003e54 <txBluetooth+0x2bc>)
 8003d04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003d08:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= PrimitiveStates.SPTimerMinutos;
 8003d0a:	4b52      	ldr	r3, [pc, #328]	; (8003e54 <txBluetooth+0x2bc>)
 8003d0c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003d10:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= PrimitiveStates.SPTimerSegundos;
 8003d12:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <txBluetooth+0x2bc>)
 8003d14:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003d18:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)horimetroHoras.valor >> 8;
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	; (8003e58 <txBluetooth+0x2c0>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	121b      	asrs	r3, r3, #8
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)horimetroHoras.valor & 0x00FF;
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <txBluetooth+0x2c0>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)horimetroMinutos.valor;
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <txBluetooth+0x2c4>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= PrimitiveStates.Lampada;
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <txBluetooth+0x2bc>)
 8003d38:	78db      	ldrb	r3, [r3, #3]
 8003d3a:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003d3c:	f107 0310 	add.w	r3, r7, #16
 8003d40:	2109      	movs	r1, #9
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fbce 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003d48:	e07e      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x18;									// FUNÇÃO -
 8003d4e:	2318      	movs	r3, #24
 8003d50:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x01;									// Modelo
 8003d52:	2301      	movs	r3, #1
 8003d54:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= (uint8_t)tempoDelayLuz.valor;
 8003d56:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <txBluetooth+0x2c8>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= (uint8_t)LimiteTemperatura.valor	>> 8 ;
 8003d5e:	4b41      	ldr	r3, [pc, #260]	; (8003e64 <txBluetooth+0x2cc>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	121b      	asrs	r3, r3, #8
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= (uint8_t)LimiteTemperatura.valor	& 0x00ff ;
 8003d6a:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <txBluetooth+0x2cc>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	757b      	strb	r3, [r7, #21]
			Buffer[6] 	= (uint8_t)instalacaoDia.valor;
 8003d72:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <txBluetooth+0x2d0>)
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	75bb      	strb	r3, [r7, #22]
			Buffer[7] 	= (uint8_t)instalacaoMes.valor;
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <txBluetooth+0x2d4>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	75fb      	strb	r3, [r7, #23]
			Buffer[8] 	= (uint8_t)instalacaoAno.valor;
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <txBluetooth+0x2d8>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	763b      	strb	r3, [r7, #24]
			Buffer[9]	= VERSAO;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	767b      	strb	r3, [r7, #25]
			BluetoothEnviaComando(Buffer, 9);
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	2109      	movs	r1, #9
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fd fba5 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003d9a:	e055      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003da0:	2351      	movs	r3, #81	; 0x51
 8003da2:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003da4:	2351      	movs	r3, #81	; 0x51
 8003da6:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;
 8003da8:	2301      	movs	r3, #1
 8003daa:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= bluetooth.chave >> 8 		;
 8003dac:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <txBluetooth+0x2dc>)
 8003dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= bluetooth.chave & 0x00ff	;
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <txBluetooth+0x2dc>)
 8003dbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	2105      	movs	r1, #5
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd fb8a 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003dd0:	e03a      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x51;									// FUNÇÃO -
 8003dd6:	2351      	movs	r3, #81	; 0x51
 8003dd8:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x51;									// FUNÇÃO -
 8003dda:	2351      	movs	r3, #81	; 0x51
 8003ddc:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;
 8003dde:	2300      	movs	r3, #0
 8003de0:	74fb      	strb	r3, [r7, #19]
			Buffer[4] 	= 0x00;
 8003de2:	2300      	movs	r3, #0
 8003de4:	753b      	strb	r3, [r7, #20]
			Buffer[5] 	= 0x00;
 8003de6:	2300      	movs	r3, #0
 8003de8:	757b      	strb	r3, [r7, #21]
			BluetoothEnviaComando(Buffer, 5);
 8003dea:	f107 0310 	add.w	r3, r7, #16
 8003dee:	2105      	movs	r1, #5
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd fb77 	bl	80014e4 <BluetoothEnviaComando>
			BluetoothDescon(&bluetooth);
 8003df6:	481f      	ldr	r0, [pc, #124]	; (8003e74 <txBluetooth+0x2dc>)
 8003df8:	f7fd fe50 	bl	8001a9c <BluetoothDescon>
			break;
 8003dfc:	e024      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003dfe:	2301      	movs	r3, #1
 8003e00:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003e02:	2352      	movs	r3, #82	; 0x52
 8003e04:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003e06:	2352      	movs	r3, #82	; 0x52
 8003e08:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x01;									//resultado ok
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003e0e:	f107 0310 	add.w	r3, r7, #16
 8003e12:	2103      	movs	r1, #3
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fd fb65 	bl	80014e4 <BluetoothEnviaComando>
			break;
 8003e1a:	e015      	b.n	8003e48 <txBluetooth+0x2b0>
			Buffer[0] 	= 0x01;									// ENDEREÇO
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	743b      	strb	r3, [r7, #16]
			Buffer[1] 	= 0x52;									// FUNÇÃO -
 8003e20:	2352      	movs	r3, #82	; 0x52
 8003e22:	747b      	strb	r3, [r7, #17]
			Buffer[2] 	= 0x52;									// FUNÇÃO -
 8003e24:	2352      	movs	r3, #82	; 0x52
 8003e26:	74bb      	strb	r3, [r7, #18]
			Buffer[3] 	= 0x00;									//resultado ok
 8003e28:	2300      	movs	r3, #0
 8003e2a:	74fb      	strb	r3, [r7, #19]
			BluetoothEnviaComando(Buffer, 3);
 8003e2c:	f107 0310 	add.w	r3, r7, #16
 8003e30:	2103      	movs	r1, #3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fb56 	bl	80014e4 <BluetoothEnviaComando>
			HAL_Delay(30);
 8003e38:	201e      	movs	r0, #30
 8003e3a:	f000 ff99 	bl	8004d70 <HAL_Delay>
			Envia_texto_UART("AT",50);//DESCONECTA
 8003e3e:	2132      	movs	r1, #50	; 0x32
 8003e40:	480d      	ldr	r0, [pc, #52]	; (8003e78 <txBluetooth+0x2e0>)
 8003e42:	f7fd fbcb 	bl	80015dc <Envia_texto_UART>
			break;
 8003e46:	bf00      	nop
}
 8003e48:	bf00      	nop
 8003e4a:	3730      	adds	r7, #48	; 0x30
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200011bc 	.word	0x200011bc
 8003e54:	20001328 	.word	0x20001328
 8003e58:	20001504 	.word	0x20001504
 8003e5c:	2000152c 	.word	0x2000152c
 8003e60:	2000161c 	.word	0x2000161c
 8003e64:	200015f4 	.word	0x200015f4
 8003e68:	20001554 	.word	0x20001554
 8003e6c:	2000157c 	.word	0x2000157c
 8003e70:	200015a4 	.word	0x200015a4
 8003e74:	200011d8 	.word	0x200011d8
 8003e78:	0800e900 	.word	0x0800e900

08003e7c <rxBluetooth>:

void rxBluetooth(void){
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
	osEvent  evtrx;
	evtrx = osMessageGet(FilaRXBluetoothHandle, 0);
 8003e82:	4bc4      	ldr	r3, [pc, #784]	; (8004194 <rxBluetooth+0x318>)
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f006 fce9 	bl	800a864 <osMessageGet>
	if (evtrx.status == osEventMessage) {
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	f040 82ce 	bne.w	8004436 <rxBluetooth+0x5ba>
		//			switch ((unsigned int)evtrx.value.p) {
		switch (bluetooth._RxDataArr[1]) {
 8003e9a:	4bbf      	ldr	r3, [pc, #764]	; (8004198 <rxBluetooth+0x31c>)
 8003e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	2b3f      	cmp	r3, #63	; 0x3f
 8003ea4:	f200 82c7 	bhi.w	8004436 <rxBluetooth+0x5ba>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <rxBluetooth+0x34>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003fd1 	.word	0x08003fd1
 8003eb4:	08004437 	.word	0x08004437
 8003eb8:	08004437 	.word	0x08004437
 8003ebc:	08004437 	.word	0x08004437
 8003ec0:	08004437 	.word	0x08004437
 8003ec4:	08004437 	.word	0x08004437
 8003ec8:	08004437 	.word	0x08004437
 8003ecc:	08004437 	.word	0x08004437
 8003ed0:	08004437 	.word	0x08004437
 8003ed4:	08004437 	.word	0x08004437
 8003ed8:	08004437 	.word	0x08004437
 8003edc:	08004437 	.word	0x08004437
 8003ee0:	08004437 	.word	0x08004437
 8003ee4:	08004435 	.word	0x08004435
 8003ee8:	08004437 	.word	0x08004437
 8003eec:	08004437 	.word	0x08004437
 8003ef0:	08004437 	.word	0x08004437
 8003ef4:	08004437 	.word	0x08004437
 8003ef8:	08003fb1 	.word	0x08003fb1
 8003efc:	08004437 	.word	0x08004437
 8003f00:	08003fc1 	.word	0x08003fc1
 8003f04:	08004437 	.word	0x08004437
 8003f08:	08004437 	.word	0x08004437
 8003f0c:	08004437 	.word	0x08004437
 8003f10:	08004437 	.word	0x08004437
 8003f14:	08004437 	.word	0x08004437
 8003f18:	08004437 	.word	0x08004437
 8003f1c:	08004437 	.word	0x08004437
 8003f20:	08004437 	.word	0x08004437
 8003f24:	08004437 	.word	0x08004437
 8003f28:	0800402d 	.word	0x0800402d
 8003f2c:	0800406f 	.word	0x0800406f
 8003f30:	080040b1 	.word	0x080040b1
 8003f34:	0800413d 	.word	0x0800413d
 8003f38:	080041d3 	.word	0x080041d3
 8003f3c:	0800429f 	.word	0x0800429f
 8003f40:	080042eb 	.word	0x080042eb
 8003f44:	08004329 	.word	0x08004329
 8003f48:	08004399 	.word	0x08004399
 8003f4c:	08004437 	.word	0x08004437
 8003f50:	08004437 	.word	0x08004437
 8003f54:	08004437 	.word	0x08004437
 8003f58:	08004437 	.word	0x08004437
 8003f5c:	08004437 	.word	0x08004437
 8003f60:	08004437 	.word	0x08004437
 8003f64:	08004363 	.word	0x08004363
 8003f68:	08004437 	.word	0x08004437
 8003f6c:	08004437 	.word	0x08004437
 8003f70:	08004437 	.word	0x08004437
 8003f74:	08004437 	.word	0x08004437
 8003f78:	08004437 	.word	0x08004437
 8003f7c:	08004437 	.word	0x08004437
 8003f80:	08004437 	.word	0x08004437
 8003f84:	08004437 	.word	0x08004437
 8003f88:	08004437 	.word	0x08004437
 8003f8c:	08004437 	.word	0x08004437
 8003f90:	08004437 	.word	0x08004437
 8003f94:	08004437 	.word	0x08004437
 8003f98:	08004437 	.word	0x08004437
 8003f9c:	08004437 	.word	0x08004437
 8003fa0:	08004437 	.word	0x08004437
 8003fa4:	080043e3 	.word	0x080043e3
 8003fa8:	08004437 	.word	0x08004437
 8003fac:	080043b9 	.word	0x080043b9
		case RX_SOLICITA_REALTIME:
			osMessagePut(FilaTXBluetoothHandle, TX_REALTIME_DATA, 0);
 8003fb0:	4b7a      	ldr	r3, [pc, #488]	; (800419c <rxBluetooth+0x320>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2116      	movs	r1, #22
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f006 fc13 	bl	800a7e4 <osMessagePut>
			break;
 8003fbe:	e23a      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_SOLICITA_SINCRONIA:
			osMessagePut(FilaTXBluetoothHandle, TX_SINCRONIA, 0);
 8003fc0:	4b76      	ldr	r3, [pc, #472]	; (800419c <rxBluetooth+0x320>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2118      	movs	r1, #24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f006 fc0b 	bl	800a7e4 <osMessagePut>
			break;
 8003fce:	e232      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_ATUALIZA_HORA:

			RTC_DateTypeDef datetoUpdate;
			RTC_TimeTypeDef timeToUpdate;

			datetoUpdate.WeekDay 	= bluetooth._RxDataArr[2]; //Dia da semana p/atualizar
 8003fd0:	4b71      	ldr	r3, [pc, #452]	; (8004198 <rxBluetooth+0x31c>)
 8003fd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003fd6:	723b      	strb	r3, [r7, #8]
			datetoUpdate.Date 		= bluetooth._RxDataArr[3]; //Dia do mes p/atualizar
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <rxBluetooth+0x31c>)
 8003fda:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003fde:	72bb      	strb	r3, [r7, #10]
			datetoUpdate.Month 		= bluetooth._RxDataArr[4]; //mes p/atualizar
 8003fe0:	4b6d      	ldr	r3, [pc, #436]	; (8004198 <rxBluetooth+0x31c>)
 8003fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fe6:	727b      	strb	r3, [r7, #9]
			datetoUpdate.Year 		= bluetooth._RxDataArr[5]; //ano p/atualizar
 8003fe8:	4b6b      	ldr	r3, [pc, #428]	; (8004198 <rxBluetooth+0x31c>)
 8003fea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fee:	72fb      	strb	r3, [r7, #11]
			timeToUpdate.Hours 		= bluetooth._RxDataArr[6]; //hora p/atualizar
 8003ff0:	4b69      	ldr	r3, [pc, #420]	; (8004198 <rxBluetooth+0x31c>)
 8003ff2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ff6:	713b      	strb	r3, [r7, #4]
			timeToUpdate.Minutes 	= bluetooth._RxDataArr[7]; //minuto p/atualizar
 8003ff8:	4b67      	ldr	r3, [pc, #412]	; (8004198 <rxBluetooth+0x31c>)
 8003ffa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003ffe:	717b      	strb	r3, [r7, #5]
			timeToUpdate.Seconds 	= bluetooth._RxDataArr[8]; //segundos p/atualizar
 8004000:	4b65      	ldr	r3, [pc, #404]	; (8004198 <rxBluetooth+0x31c>)
 8004002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004006:	71bb      	strb	r3, [r7, #6]

			atualizaDataEeprom(datetoUpdate, timeToUpdate);
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	f000 fc06 	bl	800481c <atualizaDataEeprom>

			MACRO_ENVIA_AKNOLADGE_(RX_ATUALIZA_HORA)
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <rxBluetooth+0x31c>)
 8004012:	2201      	movs	r2, #1
 8004014:	721a      	strb	r2, [r3, #8]
 8004016:	4b60      	ldr	r3, [pc, #384]	; (8004198 <rxBluetooth+0x31c>)
 8004018:	22ff      	movs	r2, #255	; 0xff
 800401a:	725a      	strb	r2, [r3, #9]
 800401c:	4b5e      	ldr	r3, [pc, #376]	; (8004198 <rxBluetooth+0x31c>)
 800401e:	2203      	movs	r2, #3
 8004020:	729a      	strb	r2, [r3, #10]
 8004022:	2103      	movs	r1, #3
 8004024:	485e      	ldr	r0, [pc, #376]	; (80041a0 <rxBluetooth+0x324>)
 8004026:	f7fd fac5 	bl	80015b4 <Envia_bytes_UART>
			break;
 800402a:	e204      	b.n	8004436 <rxBluetooth+0x5ba>
			//				Maquina.Maquina_eeprom = EEPROM_HARD_RESET;
			//				MACRO_ENVIA_AKNOLADGE_(RX_RESTAURA)
			break;
		case RX_SP_TEMP_TETO:
			//---------ENDEREÇO | 0x21 | SP_Teto.high | SP_Teto.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 800402c:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <rxBluetooth+0x328>)
 800402e:	2200      	movs	r2, #0
 8004030:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <rxBluetooth+0x31c>)
 8004034:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	4a57      	ldr	r2, [pc, #348]	; (8004198 <rxBluetooth+0x31c>)
 800403c:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8004040:	4313      	orrs	r3, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f7fc f9de 	bl	8000404 <__aeabi_i2d>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4956      	ldr	r1, [pc, #344]	; (80041a8 <rxBluetooth+0x32c>)
 800404e:	e9c1 2306 	strd	r2, r3, [r1, #24]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_TETO)
 8004052:	4b51      	ldr	r3, [pc, #324]	; (8004198 <rxBluetooth+0x31c>)
 8004054:	2201      	movs	r2, #1
 8004056:	721a      	strb	r2, [r3, #8]
 8004058:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <rxBluetooth+0x31c>)
 800405a:	22ff      	movs	r2, #255	; 0xff
 800405c:	725a      	strb	r2, [r3, #9]
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <rxBluetooth+0x31c>)
 8004060:	2221      	movs	r2, #33	; 0x21
 8004062:	729a      	strb	r2, [r3, #10]
 8004064:	2103      	movs	r1, #3
 8004066:	484e      	ldr	r0, [pc, #312]	; (80041a0 <rxBluetooth+0x324>)
 8004068:	f7fd faa4 	bl	80015b4 <Envia_bytes_UART>
			break;
 800406c:	e1e3      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_SP_TEMP_LASTRO:
			//---------ENDEREÇO | 0x22 | SP_Lastro.high | SP_Lastro.low | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <rxBluetooth+0x328>)
 8004070:	2200      	movs	r2, #0
 8004072:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 8004074:	4b48      	ldr	r3, [pc, #288]	; (8004198 <rxBluetooth+0x31c>)
 8004076:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	4a46      	ldr	r2, [pc, #280]	; (8004198 <rxBluetooth+0x31c>)
 800407e:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8004082:	4313      	orrs	r3, r2
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc f9bd 	bl	8000404 <__aeabi_i2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4946      	ldr	r1, [pc, #280]	; (80041a8 <rxBluetooth+0x32c>)
 8004090:	e9c1 2308 	strd	r2, r3, [r1, #32]

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMP_LASTRO)
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <rxBluetooth+0x31c>)
 8004096:	2201      	movs	r2, #1
 8004098:	721a      	strb	r2, [r3, #8]
 800409a:	4b3f      	ldr	r3, [pc, #252]	; (8004198 <rxBluetooth+0x31c>)
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	725a      	strb	r2, [r3, #9]
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <rxBluetooth+0x31c>)
 80040a2:	2222      	movs	r2, #34	; 0x22
 80040a4:	729a      	strb	r2, [r3, #10]
 80040a6:	2103      	movs	r1, #3
 80040a8:	483d      	ldr	r0, [pc, #244]	; (80041a0 <rxBluetooth+0x324>)
 80040aa:	f7fd fa83 	bl	80015b4 <Envia_bytes_UART>
			break;
 80040ae:	e1c2      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_SP_TEMPO:
		{	//---------ENDEREÇO | 0x23 | TimerMinutos | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <rxBluetooth+0x328>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <rxBluetooth+0x31c>)
 80040b8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <rxBluetooth+0x32c>)
 80040be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 80040c2:	4b35      	ldr	r3, [pc, #212]	; (8004198 <rxBluetooth+0x31c>)
 80040c4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80040c8:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <rxBluetooth+0x32c>)
 80040ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <rxBluetooth+0x32c>)
 80040d0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80040d4:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <rxBluetooth+0x32c>)
 80040d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 80040da:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <rxBluetooth+0x32c>)
 80040dc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <rxBluetooth+0x32c>)
 80040e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

			switch (PrimitiveStates.stateMaquina) {
 80040e6:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <rxBluetooth+0x32c>)
 80040e8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	dc02      	bgt.n	80040f6 <rxBluetooth+0x27a>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	da04      	bge.n	80040fe <rxBluetooth+0x282>
 80040f4:	e014      	b.n	8004120 <rxBluetooth+0x2a4>
 80040f6:	3b02      	subs	r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d811      	bhi.n	8004120 <rxBluetooth+0x2a4>
 80040fc:	e001      	b.n	8004102 <rxBluetooth+0x286>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 80040fe:	bf00      	nop
				break;
 8004100:	e00e      	b.n	8004120 <rxBluetooth+0x2a4>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <rxBluetooth+0x32c>)
 8004104:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004108:	2b01      	cmp	r3, #1
 800410a:	d104      	bne.n	8004116 <rxBluetooth+0x29a>
					PrimitiveStates.stateMaquina 	= decrementando;
 800410c:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <rxBluetooth+0x32c>)
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 8004114:	e003      	b.n	800411e <rxBluetooth+0x2a2>
					PrimitiveStates.stateMaquina = aquecendo;
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <rxBluetooth+0x32c>)
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 800411e:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_SP_TEMPO)
 8004120:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <rxBluetooth+0x31c>)
 8004122:	2201      	movs	r2, #1
 8004124:	721a      	strb	r2, [r3, #8]
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <rxBluetooth+0x31c>)
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	725a      	strb	r2, [r3, #9]
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <rxBluetooth+0x31c>)
 800412e:	2223      	movs	r2, #35	; 0x23
 8004130:	729a      	strb	r2, [r3, #10]
 8004132:	2103      	movs	r1, #3
 8004134:	481a      	ldr	r0, [pc, #104]	; (80041a0 <rxBluetooth+0x324>)
 8004136:	f7fd fa3d 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 800413a:	e17c      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_TOGGLE_TEMPO:
		{
			//---------ENDEREÇO | 0x24 | 0x24 | TimerSegundos |CRC | CRC
			MACRO_ANULA_INATIVIDADE
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <rxBluetooth+0x328>)
 800413e:	2200      	movs	r2, #0
 8004140:	801a      	strh	r2, [r3, #0]

			switch (PrimitiveStates.stateMaquina) {
 8004142:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <rxBluetooth+0x32c>)
 8004144:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004148:	2b04      	cmp	r3, #4
 800414a:	d834      	bhi.n	80041b6 <rxBluetooth+0x33a>
 800414c:	a201      	add	r2, pc, #4	; (adr r2, 8004154 <rxBluetooth+0x2d8>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004169 	.word	0x08004169
 8004158:	08004169 	.word	0x08004169
 800415c:	0800416d 	.word	0x0800416d
 8004160:	08004177 	.word	0x08004177
 8004164:	08004181 	.word	0x08004181
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004168:	bf00      	nop
				break;
 800416a:	e024      	b.n	80041b6 <rxBluetooth+0x33a>
			case aquecido:
				PrimitiveStates.stateMaquina = decrementando;
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <rxBluetooth+0x32c>)
 800416e:	2203      	movs	r2, #3
 8004170:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 8004174:	e01f      	b.n	80041b6 <rxBluetooth+0x33a>
			case decrementando:
				PrimitiveStates.stateMaquina = pausado;
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <rxBluetooth+0x32c>)
 8004178:	2204      	movs	r2, #4
 800417a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 800417e:	e01a      	b.n	80041b6 <rxBluetooth+0x33a>
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004180:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <rxBluetooth+0x32c>)
 8004182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004186:	2b01      	cmp	r3, #1
 8004188:	d110      	bne.n	80041ac <rxBluetooth+0x330>
					PrimitiveStates.stateMaquina = decrementando;
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <rxBluetooth+0x32c>)
 800418c:	2203      	movs	r2, #3
 800418e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 8004192:	e00f      	b.n	80041b4 <rxBluetooth+0x338>
 8004194:	200011c0 	.word	0x200011c0
 8004198:	200011d8 	.word	0x200011d8
 800419c:	200011bc 	.word	0x200011bc
 80041a0:	200011e0 	.word	0x200011e0
 80041a4:	20001440 	.word	0x20001440
 80041a8:	20001328 	.word	0x20001328
					PrimitiveStates.stateMaquina = aquecendo;
 80041ac:	4ba4      	ldr	r3, [pc, #656]	; (8004440 <rxBluetooth+0x5c4>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 80041b4:	bf00      	nop
			}

			MACRO_ENVIA_AKNOLADGE_(RX_TOGGLE_TEMPO)
 80041b6:	4ba3      	ldr	r3, [pc, #652]	; (8004444 <rxBluetooth+0x5c8>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	721a      	strb	r2, [r3, #8]
 80041bc:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <rxBluetooth+0x5c8>)
 80041be:	22ff      	movs	r2, #255	; 0xff
 80041c0:	725a      	strb	r2, [r3, #9]
 80041c2:	4ba0      	ldr	r3, [pc, #640]	; (8004444 <rxBluetooth+0x5c8>)
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	729a      	strb	r2, [r3, #10]
 80041c8:	2103      	movs	r1, #3
 80041ca:	489f      	ldr	r0, [pc, #636]	; (8004448 <rxBluetooth+0x5cc>)
 80041cc:	f7fd f9f2 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 80041d0:	e131      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_RECEITA:
		{
			MACRO_ANULA_INATIVIDADE
 80041d2:	4b9e      	ldr	r3, [pc, #632]	; (800444c <rxBluetooth+0x5d0>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]
			//---------ENDEREÇO | 0x25 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | Minutos | Segundos | CRC | CRC
			PrimitiveStates.SetPointTeto = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80041d8:	4b9a      	ldr	r3, [pc, #616]	; (8004444 <rxBluetooth+0x5c8>)
 80041da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	4a98      	ldr	r2, [pc, #608]	; (8004444 <rxBluetooth+0x5c8>)
 80041e2:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 80041e6:	4313      	orrs	r3, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fc f90b 	bl	8000404 <__aeabi_i2d>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4993      	ldr	r1, [pc, #588]	; (8004440 <rxBluetooth+0x5c4>)
 80041f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro = (bluetooth._RxDataArr[4]<< 8) | bluetooth._RxDataArr[5];
 80041f8:	4b92      	ldr	r3, [pc, #584]	; (8004444 <rxBluetooth+0x5c8>)
 80041fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	4a90      	ldr	r2, [pc, #576]	; (8004444 <rxBluetooth+0x5c8>)
 8004202:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8004206:	4313      	orrs	r3, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7fc f8fb 	bl	8000404 <__aeabi_i2d>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	498b      	ldr	r1, [pc, #556]	; (8004440 <rxBluetooth+0x5c4>)
 8004214:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004218:	4b8a      	ldr	r3, [pc, #552]	; (8004444 <rxBluetooth+0x5c8>)
 800421a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800421e:	4b88      	ldr	r3, [pc, #544]	; (8004440 <rxBluetooth+0x5c4>)
 8004220:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8004224:	4b87      	ldr	r3, [pc, #540]	; (8004444 <rxBluetooth+0x5c8>)
 8004226:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <rxBluetooth+0x5c4>)
 800422c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

			//atribuicao para disparar decremento
			PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8004230:	4b83      	ldr	r3, [pc, #524]	; (8004440 <rxBluetooth+0x5c4>)
 8004232:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004236:	4b82      	ldr	r3, [pc, #520]	; (8004440 <rxBluetooth+0x5c4>)
 8004238:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 800423c:	4b80      	ldr	r3, [pc, #512]	; (8004440 <rxBluetooth+0x5c4>)
 800423e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004242:	4b7f      	ldr	r3, [pc, #508]	; (8004440 <rxBluetooth+0x5c4>)
 8004244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


			switch (PrimitiveStates.stateMaquina) {
 8004248:	4b7d      	ldr	r3, [pc, #500]	; (8004440 <rxBluetooth+0x5c4>)
 800424a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800424e:	2b01      	cmp	r3, #1
 8004250:	dc02      	bgt.n	8004258 <rxBluetooth+0x3dc>
 8004252:	2b00      	cmp	r3, #0
 8004254:	da04      	bge.n	8004260 <rxBluetooth+0x3e4>
 8004256:	e014      	b.n	8004282 <rxBluetooth+0x406>
 8004258:	3b02      	subs	r3, #2
 800425a:	2b02      	cmp	r3, #2
 800425c:	d811      	bhi.n	8004282 <rxBluetooth+0x406>
 800425e:	e001      	b.n	8004264 <rxBluetooth+0x3e8>
			case inicial:
			case aquecendo:
				//nao executa nada
				__NOP();
 8004260:	bf00      	nop
				break;
 8004262:	e00e      	b.n	8004282 <rxBluetooth+0x406>
			case aquecido:
			case decrementando:
			case pausado:
				if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004264:	4b76      	ldr	r3, [pc, #472]	; (8004440 <rxBluetooth+0x5c4>)
 8004266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800426a:	2b01      	cmp	r3, #1
 800426c:	d104      	bne.n	8004278 <rxBluetooth+0x3fc>
					PrimitiveStates.stateMaquina 	= decrementando;
 800426e:	4b74      	ldr	r3, [pc, #464]	; (8004440 <rxBluetooth+0x5c4>)
 8004270:	2203      	movs	r2, #3
 8004272:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				}else{
					PrimitiveStates.stateMaquina = aquecendo;
				}
				break;
 8004276:	e003      	b.n	8004280 <rxBluetooth+0x404>
					PrimitiveStates.stateMaquina = aquecendo;
 8004278:	4b71      	ldr	r3, [pc, #452]	; (8004440 <rxBluetooth+0x5c4>)
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				break;
 8004280:	bf00      	nop
			}
			MACRO_ENVIA_AKNOLADGE_(RX_RECEITA)
 8004282:	4b70      	ldr	r3, [pc, #448]	; (8004444 <rxBluetooth+0x5c8>)
 8004284:	2201      	movs	r2, #1
 8004286:	721a      	strb	r2, [r3, #8]
 8004288:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <rxBluetooth+0x5c8>)
 800428a:	22ff      	movs	r2, #255	; 0xff
 800428c:	725a      	strb	r2, [r3, #9]
 800428e:	4b6d      	ldr	r3, [pc, #436]	; (8004444 <rxBluetooth+0x5c8>)
 8004290:	2225      	movs	r2, #37	; 0x25
 8004292:	729a      	strb	r2, [r3, #10]
 8004294:	2103      	movs	r1, #3
 8004296:	486c      	ldr	r0, [pc, #432]	; (8004448 <rxBluetooth+0x5cc>)
 8004298:	f7fd f98c 	bl	80015b4 <Envia_bytes_UART>
		}
		break;
 800429c:	e0cb      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_LIMITE_TEMPERATURA:
			//---------ENDEREÇO | 0x26 | TemperaturaTeto.hi~.lo | TemperaturaLastro.hi~.lo | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 800429e:	4b6b      	ldr	r3, [pc, #428]	; (800444c <rxBluetooth+0x5d0>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	801a      	strh	r2, [r3, #0]

			PrimitiveStates.LimiteTemp = (bluetooth._RxDataArr[2]<< 8) | bluetooth._RxDataArr[3];
 80042a4:	4b67      	ldr	r3, [pc, #412]	; (8004444 <rxBluetooth+0x5c8>)
 80042a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	4b65      	ldr	r3, [pc, #404]	; (8004444 <rxBluetooth+0x5c8>)
 80042b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	4b60      	ldr	r3, [pc, #384]	; (8004440 <rxBluetooth+0x5c4>)
 80042be:	861a      	strh	r2, [r3, #48]	; 0x30
			osMessagePut(FilaEepromHandle, CEepromLimiteTemp, 0);
 80042c0:	4b63      	ldr	r3, [pc, #396]	; (8004450 <rxBluetooth+0x5d4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2105      	movs	r1, #5
 80042c8:	4618      	mov	r0, r3
 80042ca:	f006 fa8b 	bl	800a7e4 <osMessagePut>

			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_TEMPERATURA)
 80042ce:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <rxBluetooth+0x5c8>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	721a      	strb	r2, [r3, #8]
 80042d4:	4b5b      	ldr	r3, [pc, #364]	; (8004444 <rxBluetooth+0x5c8>)
 80042d6:	22ff      	movs	r2, #255	; 0xff
 80042d8:	725a      	strb	r2, [r3, #9]
 80042da:	4b5a      	ldr	r3, [pc, #360]	; (8004444 <rxBluetooth+0x5c8>)
 80042dc:	2226      	movs	r2, #38	; 0x26
 80042de:	729a      	strb	r2, [r3, #10]
 80042e0:	2103      	movs	r1, #3
 80042e2:	4859      	ldr	r0, [pc, #356]	; (8004448 <rxBluetooth+0x5cc>)
 80042e4:	f7fd f966 	bl	80015b4 <Envia_bytes_UART>
			break;
 80042e8:	e0a5      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_LIGA_LAMPADA:
			//---------ENDEREÇO | 0x27 | 0x27 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 80042ea:	4b58      	ldr	r3, [pc, #352]	; (800444c <rxBluetooth+0x5d0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	801a      	strh	r2, [r3, #0]
			PrimitiveStates.RTLampada=PrimitiveStates.SPLampada;
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <rxBluetooth+0x5c4>)
 80042f2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80042f6:	4b52      	ldr	r3, [pc, #328]	; (8004440 <rxBluetooth+0x5c4>)
 80042f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			LAMPADA_ON
 80042fc:	2201      	movs	r2, #1
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	4854      	ldr	r0, [pc, #336]	; (8004454 <rxBluetooth+0x5d8>)
 8004302:	f001 ff82 	bl	800620a <HAL_GPIO_WritePin>
 8004306:	4b4e      	ldr	r3, [pc, #312]	; (8004440 <rxBluetooth+0x5c4>)
 8004308:	2201      	movs	r2, #1
 800430a:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_LIGA_LAMPADA)
 800430c:	4b4d      	ldr	r3, [pc, #308]	; (8004444 <rxBluetooth+0x5c8>)
 800430e:	2201      	movs	r2, #1
 8004310:	721a      	strb	r2, [r3, #8]
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <rxBluetooth+0x5c8>)
 8004314:	22ff      	movs	r2, #255	; 0xff
 8004316:	725a      	strb	r2, [r3, #9]
 8004318:	4b4a      	ldr	r3, [pc, #296]	; (8004444 <rxBluetooth+0x5c8>)
 800431a:	2227      	movs	r2, #39	; 0x27
 800431c:	729a      	strb	r2, [r3, #10]
 800431e:	2103      	movs	r1, #3
 8004320:	4849      	ldr	r0, [pc, #292]	; (8004448 <rxBluetooth+0x5cc>)
 8004322:	f7fd f947 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004326:	e086      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_DESLIGA_LAMPADA:
			//---------ENDEREÇO | 0x28 | 0x28 | CRC | CRC
			MACRO_ANULA_INATIVIDADE
 8004328:	4b48      	ldr	r3, [pc, #288]	; (800444c <rxBluetooth+0x5d0>)
 800432a:	2200      	movs	r2, #0
 800432c:	801a      	strh	r2, [r3, #0]
			LAMPADA_OFF
 800432e:	2200      	movs	r2, #0
 8004330:	2140      	movs	r1, #64	; 0x40
 8004332:	4848      	ldr	r0, [pc, #288]	; (8004454 <rxBluetooth+0x5d8>)
 8004334:	f001 ff69 	bl	800620a <HAL_GPIO_WritePin>
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <rxBluetooth+0x5c4>)
 800433a:	2200      	movs	r2, #0
 800433c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004340:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <rxBluetooth+0x5c4>)
 8004342:	2200      	movs	r2, #0
 8004344:	70da      	strb	r2, [r3, #3]
			MACRO_ENVIA_AKNOLADGE_(RX_DESLIGA_LAMPADA)
 8004346:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <rxBluetooth+0x5c8>)
 8004348:	2201      	movs	r2, #1
 800434a:	721a      	strb	r2, [r3, #8]
 800434c:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <rxBluetooth+0x5c8>)
 800434e:	22ff      	movs	r2, #255	; 0xff
 8004350:	725a      	strb	r2, [r3, #9]
 8004352:	4b3c      	ldr	r3, [pc, #240]	; (8004444 <rxBluetooth+0x5c8>)
 8004354:	2228      	movs	r2, #40	; 0x28
 8004356:	729a      	strb	r2, [r3, #10]
 8004358:	2103      	movs	r1, #3
 800435a:	483b      	ldr	r0, [pc, #236]	; (8004448 <rxBluetooth+0x5cc>)
 800435c:	f7fd f92a 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004360:	e069      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_LIMITE_LAMPADA:
			//---------ENDEREÇO | 0x30 | 0x30 | SPLampada | CRC | CRC
			PrimitiveStates.SPLampada = bluetooth._RxDataArr[2];
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <rxBluetooth+0x5c8>)
 8004364:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8004368:	4b35      	ldr	r3, [pc, #212]	; (8004440 <rxBluetooth+0x5c4>)
 800436a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 800436e:	4b38      	ldr	r3, [pc, #224]	; (8004450 <rxBluetooth+0x5d4>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2200      	movs	r2, #0
 8004374:	2106      	movs	r1, #6
 8004376:	4618      	mov	r0, r3
 8004378:	f006 fa34 	bl	800a7e4 <osMessagePut>
			MACRO_ENVIA_AKNOLADGE_(RX_LIMITE_LAMPADA)
 800437c:	4b31      	ldr	r3, [pc, #196]	; (8004444 <rxBluetooth+0x5c8>)
 800437e:	2201      	movs	r2, #1
 8004380:	721a      	strb	r2, [r3, #8]
 8004382:	4b30      	ldr	r3, [pc, #192]	; (8004444 <rxBluetooth+0x5c8>)
 8004384:	22ff      	movs	r2, #255	; 0xff
 8004386:	725a      	strb	r2, [r3, #9]
 8004388:	4b2e      	ldr	r3, [pc, #184]	; (8004444 <rxBluetooth+0x5c8>)
 800438a:	2230      	movs	r2, #48	; 0x30
 800438c:	729a      	strb	r2, [r3, #10]
 800438e:	2103      	movs	r1, #3
 8004390:	482d      	ldr	r0, [pc, #180]	; (8004448 <rxBluetooth+0x5cc>)
 8004392:	f7fd f90f 	bl	80015b4 <Envia_bytes_UART>
			break;
 8004396:	e04e      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_CANCELA_PROCESSO:
			//---------ENDEREÇO | 0x29 | 0x29 | CRC | CRC
			desligaForno();
 8004398:	f7fe fa64 	bl	8002864 <desligaForno>
			MACRO_ENVIA_AKNOLADGE_(RX_CANCELA_PROCESSO)
 800439c:	4b29      	ldr	r3, [pc, #164]	; (8004444 <rxBluetooth+0x5c8>)
 800439e:	2201      	movs	r2, #1
 80043a0:	721a      	strb	r2, [r3, #8]
 80043a2:	4b28      	ldr	r3, [pc, #160]	; (8004444 <rxBluetooth+0x5c8>)
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	725a      	strb	r2, [r3, #9]
 80043a8:	4b26      	ldr	r3, [pc, #152]	; (8004444 <rxBluetooth+0x5c8>)
 80043aa:	2229      	movs	r2, #41	; 0x29
 80043ac:	729a      	strb	r2, [r3, #10]
 80043ae:	2103      	movs	r1, #3
 80043b0:	4825      	ldr	r0, [pc, #148]	; (8004448 <rxBluetooth+0x5cc>)
 80043b2:	f7fd f8ff 	bl	80015b4 <Envia_bytes_UART>
			break;
 80043b6:	e03e      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_PEDE_SENHA:
			if(bluetooth.JanelaConexao > 0)
 80043b8:	4b22      	ldr	r3, [pc, #136]	; (8004444 <rxBluetooth+0x5c8>)
 80043ba:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <rxBluetooth+0x556>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE, 0);
 80043c2:	4b25      	ldr	r3, [pc, #148]	; (8004458 <rxBluetooth+0x5dc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	218b      	movs	r1, #139	; 0x8b
 80043ca:	4618      	mov	r0, r3
 80043cc:	f006 fa0a 	bl	800a7e4 <osMessagePut>
			else{
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
			}
			break;
 80043d0:	e031      	b.n	8004436 <rxBluetooth+0x5ba>
				osMessagePut(FilaTXBluetoothHandle, TX_CHAVE_ERRO, 0);
 80043d2:	4b21      	ldr	r3, [pc, #132]	; (8004458 <rxBluetooth+0x5dc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2200      	movs	r2, #0
 80043d8:	218c      	movs	r1, #140	; 0x8c
 80043da:	4618      	mov	r0, r3
 80043dc:	f006 fa02 	bl	800a7e4 <osMessagePut>
			break;
 80043e0:	e029      	b.n	8004436 <rxBluetooth+0x5ba>
		case RX_RECEBEU_SENHA:
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <rxBluetooth+0x5c8>)
 80043e4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <rxBluetooth+0x5c8>)
 80043ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d115      	bne.n	8004424 <rxBluetooth+0x5a8>
					bluetooth._RxDataArr[4] == (bluetooth.chave & 0x00ff) ){
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <rxBluetooth+0x5c8>)
 80043fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043fe:	461a      	mov	r2, r3
 8004400:	4b10      	ldr	r3, [pc, #64]	; (8004444 <rxBluetooth+0x5c8>)
 8004402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004406:	b2db      	uxtb	r3, r3
			if(		bluetooth._RxDataArr[3] == (bluetooth.chave >> 8) &&
 8004408:	429a      	cmp	r2, r3
 800440a:	d10b      	bne.n	8004424 <rxBluetooth+0x5a8>
				//--->	CHAVE CORRETA
				bluetooth.MaquinaConexao	= RX_VALIDADO;
 800440c:	4b0d      	ldr	r3, [pc, #52]	; (8004444 <rxBluetooth+0x5c8>)
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_OK, 0);
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <rxBluetooth+0x5dc>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2200      	movs	r2, #0
 800441a:	218d      	movs	r1, #141	; 0x8d
 800441c:	4618      	mov	r0, r3
 800441e:	f006 f9e1 	bl	800a7e4 <osMessagePut>
				break;
 8004422:	e008      	b.n	8004436 <rxBluetooth+0x5ba>
			}else{
				//--->	CHAVE ERRADA
				osMessagePut(FilaTXBluetoothHandle, TX_RESULTADO_CHAVE_ERRO, 0);
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <rxBluetooth+0x5dc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2200      	movs	r2, #0
 800442a:	218e      	movs	r1, #142	; 0x8e
 800442c:	4618      	mov	r0, r3
 800442e:	f006 f9d9 	bl	800a7e4 <osMessagePut>
			}
			break;
 8004432:	e000      	b.n	8004436 <rxBluetooth+0x5ba>
			break;
 8004434:	bf00      	nop
		}
	}
}
 8004436:	bf00      	nop
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20001328 	.word	0x20001328
 8004444:	200011d8 	.word	0x200011d8
 8004448:	200011e0 	.word	0x200011e0
 800444c:	20001440 	.word	0x20001440
 8004450:	200011c4 	.word	0x200011c4
 8004454:	40010c00 	.word	0x40010c00
 8004458:	200011bc 	.word	0x200011bc

0800445c <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for(;;)
	{
		//todo sequencia de piscar até receber o comando de iniciar ou de parar completamente
		sequencia1Buzzer();
 8004464:	f000 f80e 	bl	8004484 <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <StartBuzzer+0x24>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f006 fa6d 	bl	800a94c <osThreadSuspend>
		osThreadYield();
 8004472:	f006 f833 	bl	800a4dc <osThreadYield>
		osDelay(100);
 8004476:	2064      	movs	r0, #100	; 0x64
 8004478:	f006 f842 	bl	800a500 <osDelay>
		sequencia1Buzzer();
 800447c:	e7f2      	b.n	8004464 <StartBuzzer+0x8>
 800447e:	bf00      	nop
 8004480:	20000c6c 	.word	0x20000c6c

08004484 <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 8004488:	210c      	movs	r1, #12
 800448a:	4821      	ldr	r0, [pc, #132]	; (8004510 <sequencia1Buzzer+0x8c>)
 800448c:	f003 fee6 	bl	800825c <HAL_TIM_PWM_Start>
	LAMPADA_ON
 8004490:	2201      	movs	r2, #1
 8004492:	2140      	movs	r1, #64	; 0x40
 8004494:	481f      	ldr	r0, [pc, #124]	; (8004514 <sequencia1Buzzer+0x90>)
 8004496:	f001 feb8 	bl	800620a <HAL_GPIO_WritePin>
 800449a:	4b1f      	ldr	r3, [pc, #124]	; (8004518 <sequencia1Buzzer+0x94>)
 800449c:	2201      	movs	r2, #1
 800449e:	70da      	strb	r2, [r3, #3]
	osDelay(300);
 80044a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044a4:	f006 f82c 	bl	800a500 <osDelay>
	M_BUZZER_OFF
 80044a8:	210c      	movs	r1, #12
 80044aa:	4819      	ldr	r0, [pc, #100]	; (8004510 <sequencia1Buzzer+0x8c>)
 80044ac:	f003 ff78 	bl	80083a0 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 80044b0:	2200      	movs	r2, #0
 80044b2:	2140      	movs	r1, #64	; 0x40
 80044b4:	4817      	ldr	r0, [pc, #92]	; (8004514 <sequencia1Buzzer+0x90>)
 80044b6:	f001 fea8 	bl	800620a <HAL_GPIO_WritePin>
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <sequencia1Buzzer+0x94>)
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80044c2:	4b15      	ldr	r3, [pc, #84]	; (8004518 <sequencia1Buzzer+0x94>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	70da      	strb	r2, [r3, #3]
	osDelay(50);
 80044c8:	2032      	movs	r0, #50	; 0x32
 80044ca:	f006 f819 	bl	800a500 <osDelay>
	M_BUZZER_ON
 80044ce:	210c      	movs	r1, #12
 80044d0:	480f      	ldr	r0, [pc, #60]	; (8004510 <sequencia1Buzzer+0x8c>)
 80044d2:	f003 fec3 	bl	800825c <HAL_TIM_PWM_Start>
	LAMPADA_ON
 80044d6:	2201      	movs	r2, #1
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	480e      	ldr	r0, [pc, #56]	; (8004514 <sequencia1Buzzer+0x90>)
 80044dc:	f001 fe95 	bl	800620a <HAL_GPIO_WritePin>
 80044e0:	4b0d      	ldr	r3, [pc, #52]	; (8004518 <sequencia1Buzzer+0x94>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	70da      	strb	r2, [r3, #3]
	osDelay(250);
 80044e6:	20fa      	movs	r0, #250	; 0xfa
 80044e8:	f006 f80a 	bl	800a500 <osDelay>
	M_BUZZER_OFF
 80044ec:	210c      	movs	r1, #12
 80044ee:	4808      	ldr	r0, [pc, #32]	; (8004510 <sequencia1Buzzer+0x8c>)
 80044f0:	f003 ff56 	bl	80083a0 <HAL_TIM_PWM_Stop>
	LAMPADA_OFF
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	4806      	ldr	r0, [pc, #24]	; (8004514 <sequencia1Buzzer+0x90>)
 80044fa:	f001 fe86 	bl	800620a <HAL_GPIO_WritePin>
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <sequencia1Buzzer+0x94>)
 8004500:	2200      	movs	r2, #0
 8004502:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <sequencia1Buzzer+0x94>)
 8004508:	2200      	movs	r2, #0
 800450a:	70da      	strb	r2, [r3, #3]
}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000abc 	.word	0x20000abc
 8004514:	40010c00 	.word	0x40010c00
 8004518:	20001328 	.word	0x20001328

0800451c <StartEeprom>:

RTC_DateTypeDef datetoUpdate;
RTC_TimeTypeDef timeToUpdate;

void StartEeprom(void const * argument)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	initEeprom();
 8004524:	f000 f80a 	bl	800453c <initEeprom>

	for(;;)
	{
		processaEeprom();
 8004528:	f000 f8cc 	bl	80046c4 <processaEeprom>
		osThreadYield();
 800452c:	f005 ffd6 	bl	800a4dc <osThreadYield>
		osDelay(500);
 8004530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004534:	f005 ffe4 	bl	800a500 <osDelay>
		processaEeprom();
 8004538:	e7f6      	b.n	8004528 <StartEeprom+0xc>
	...

0800453c <initEeprom>:
	}
}

void initEeprom(void){
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af06      	add	r7, sp, #24
	//inicializacao ad eeprom
	EepromInit(&eeprom, &hi2c1 ,&FilaEepromHandle);
 8004542:	4a45      	ldr	r2, [pc, #276]	; (8004658 <initEeprom+0x11c>)
 8004544:	4945      	ldr	r1, [pc, #276]	; (800465c <initEeprom+0x120>)
 8004546:	4846      	ldr	r0, [pc, #280]	; (8004660 <initEeprom+0x124>)
 8004548:	f7fd fb13 	bl	8001b72 <EepromInit>
	//	zeraTodosMeses(&eeprom);

	//criacao dos objetos variaveis
	EepromAddVar(&eeprom, &tempoDelayLuz, 			"addrTEMPO_LUZ", 		addrTEMPO_LUZ,		DATA8BITS,	5,		35,		250		,(uint32_t *)&PrimitiveStates.SPLampada);
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <initEeprom+0x128>)
 800454e:	9304      	str	r3, [sp, #16]
 8004550:	23fa      	movs	r3, #250	; 0xfa
 8004552:	9303      	str	r3, [sp, #12]
 8004554:	2323      	movs	r3, #35	; 0x23
 8004556:	9302      	str	r3, [sp, #8]
 8004558:	2305      	movs	r3, #5
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	2301      	movs	r3, #1
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	2304      	movs	r3, #4
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <initEeprom+0x12c>)
 8004564:	4941      	ldr	r1, [pc, #260]	; (800466c <initEeprom+0x130>)
 8004566:	483e      	ldr	r0, [pc, #248]	; (8004660 <initEeprom+0x124>)
 8004568:	f7fd fb19 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroHoras, 			"addrHORIMETRO", 		addrHORIMETRO,		DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_horas);
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <initEeprom+0x134>)
 800456e:	9304      	str	r3, [sp, #16]
 8004570:	2300      	movs	r3, #0
 8004572:	9303      	str	r3, [sp, #12]
 8004574:	2300      	movs	r3, #0
 8004576:	9302      	str	r3, [sp, #8]
 8004578:	2300      	movs	r3, #0
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	2302      	movs	r3, #2
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	2305      	movs	r3, #5
 8004582:	4a3c      	ldr	r2, [pc, #240]	; (8004674 <initEeprom+0x138>)
 8004584:	493c      	ldr	r1, [pc, #240]	; (8004678 <initEeprom+0x13c>)
 8004586:	4836      	ldr	r0, [pc, #216]	; (8004660 <initEeprom+0x124>)
 8004588:	f7fd fb09 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &horimetroMinutos, 		"addrMINUTIMETRO", 		addrMINUTIMETRO,	DATA8BITS,	0,		0,		0		,(uint32_t *)&Calendario.Horimetro_parcial_min);
 800458c:	4b3b      	ldr	r3, [pc, #236]	; (800467c <initEeprom+0x140>)
 800458e:	9304      	str	r3, [sp, #16]
 8004590:	2300      	movs	r3, #0
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	2300      	movs	r3, #0
 8004596:	9302      	str	r3, [sp, #8]
 8004598:	2300      	movs	r3, #0
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	2301      	movs	r3, #1
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2306      	movs	r3, #6
 80045a2:	4a37      	ldr	r2, [pc, #220]	; (8004680 <initEeprom+0x144>)
 80045a4:	4937      	ldr	r1, [pc, #220]	; (8004684 <initEeprom+0x148>)
 80045a6:	482e      	ldr	r0, [pc, #184]	; (8004660 <initEeprom+0x124>)
 80045a8:	f7fd faf9 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoDia, 			"addrINST_DIA", 		addrINST_DIA,		DATA8BITS,	1,		0,		31		,(uint32_t *)&Calendario.Data_instalacao.Date);
 80045ac:	4b36      	ldr	r3, [pc, #216]	; (8004688 <initEeprom+0x14c>)
 80045ae:	9304      	str	r3, [sp, #16]
 80045b0:	231f      	movs	r3, #31
 80045b2:	9303      	str	r3, [sp, #12]
 80045b4:	2300      	movs	r3, #0
 80045b6:	9302      	str	r3, [sp, #8]
 80045b8:	2301      	movs	r3, #1
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	2301      	movs	r3, #1
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	230c      	movs	r3, #12
 80045c2:	4a32      	ldr	r2, [pc, #200]	; (800468c <initEeprom+0x150>)
 80045c4:	4932      	ldr	r1, [pc, #200]	; (8004690 <initEeprom+0x154>)
 80045c6:	4826      	ldr	r0, [pc, #152]	; (8004660 <initEeprom+0x124>)
 80045c8:	f7fd fae9 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoMes, 			"addrINST_MES", 		addrINST_MES,		DATA8BITS,	1,		1,		12		,(uint32_t *)&Calendario.Data_instalacao.Month);
 80045cc:	4b31      	ldr	r3, [pc, #196]	; (8004694 <initEeprom+0x158>)
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	230c      	movs	r3, #12
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	2301      	movs	r3, #1
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	2301      	movs	r3, #1
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2301      	movs	r3, #1
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	230d      	movs	r3, #13
 80045e2:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <initEeprom+0x15c>)
 80045e4:	492d      	ldr	r1, [pc, #180]	; (800469c <initEeprom+0x160>)
 80045e6:	481e      	ldr	r0, [pc, #120]	; (8004660 <initEeprom+0x124>)
 80045e8:	f7fd fad9 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &instalacaoAno, 			"addrINST_ANO", 		addrINST_ANO,		DATA8BITS,	23,		23,		99		,(uint32_t *)&Calendario.Data_instalacao.Year);
 80045ec:	4b2c      	ldr	r3, [pc, #176]	; (80046a0 <initEeprom+0x164>)
 80045ee:	9304      	str	r3, [sp, #16]
 80045f0:	2363      	movs	r3, #99	; 0x63
 80045f2:	9303      	str	r3, [sp, #12]
 80045f4:	2317      	movs	r3, #23
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	2317      	movs	r3, #23
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2301      	movs	r3, #1
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	230e      	movs	r3, #14
 8004602:	4a28      	ldr	r2, [pc, #160]	; (80046a4 <initEeprom+0x168>)
 8004604:	4928      	ldr	r1, [pc, #160]	; (80046a8 <initEeprom+0x16c>)
 8004606:	4816      	ldr	r0, [pc, #88]	; (8004660 <initEeprom+0x124>)
 8004608:	f7fd fac9 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &totalCiclos, 			"addrTOTAL_GERAL", 		addrTOTAL_GERAL,	DATA16BITS,	0,		0,		0		,(uint32_t *)&Calendario.TotalCiclos);
 800460c:	4b27      	ldr	r3, [pc, #156]	; (80046ac <initEeprom+0x170>)
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	2300      	movs	r3, #0
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	2300      	movs	r3, #0
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	2300      	movs	r3, #0
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	2302      	movs	r3, #2
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	230f      	movs	r3, #15
 8004622:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <initEeprom+0x174>)
 8004624:	4923      	ldr	r1, [pc, #140]	; (80046b4 <initEeprom+0x178>)
 8004626:	480e      	ldr	r0, [pc, #56]	; (8004660 <initEeprom+0x124>)
 8004628:	f7fd fab9 	bl	8001b9e <EepromAddVar>
	EepromAddVar(&eeprom, &LimiteTemperatura, 		"addrLIMITE_TEMP", 		addrLIMITE_TEMP,	DATA16BITS,	0,		0,		0		,(uint32_t *)&PrimitiveStates.LimiteTemp);
 800462c:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <initEeprom+0x17c>)
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	2300      	movs	r3, #0
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	2300      	movs	r3, #0
 8004636:	9302      	str	r3, [sp, #8]
 8004638:	2300      	movs	r3, #0
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	2302      	movs	r3, #2
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2314      	movs	r3, #20
 8004642:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <initEeprom+0x180>)
 8004644:	491e      	ldr	r1, [pc, #120]	; (80046c0 <initEeprom+0x184>)
 8004646:	4806      	ldr	r0, [pc, #24]	; (8004660 <initEeprom+0x124>)
 8004648:	f7fd faa9 	bl	8001b9e <EepromAddVar>

	RestauraPadraoTudo(&eeprom);
 800464c:	4804      	ldr	r0, [pc, #16]	; (8004660 <initEeprom+0x124>)
 800464e:	f7fd fc39 	bl	8001ec4 <RestauraPadraoTudo>
	//faz o download dos objetos
	//	EepromDownloadValores(&eeprom);
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	200011c4 	.word	0x200011c4
 800465c:	20000a54 	.word	0x20000a54
 8004660:	20001444 	.word	0x20001444
 8004664:	20001355 	.word	0x20001355
 8004668:	0800e904 	.word	0x0800e904
 800466c:	2000161c 	.word	0x2000161c
 8004670:	20001364 	.word	0x20001364
 8004674:	0800e914 	.word	0x0800e914
 8004678:	20001504 	.word	0x20001504
 800467c:	20001366 	.word	0x20001366
 8004680:	0800e924 	.word	0x0800e924
 8004684:	2000152c 	.word	0x2000152c
 8004688:	20001362 	.word	0x20001362
 800468c:	0800e934 	.word	0x0800e934
 8004690:	20001554 	.word	0x20001554
 8004694:	20001361 	.word	0x20001361
 8004698:	0800e944 	.word	0x0800e944
 800469c:	2000157c 	.word	0x2000157c
 80046a0:	20001363 	.word	0x20001363
 80046a4:	0800e954 	.word	0x0800e954
 80046a8:	200015a4 	.word	0x200015a4
 80046ac:	20001368 	.word	0x20001368
 80046b0:	0800e964 	.word	0x0800e964
 80046b4:	200015cc 	.word	0x200015cc
 80046b8:	20001358 	.word	0x20001358
 80046bc:	0800e974 	.word	0x0800e974
 80046c0:	200015f4 	.word	0x200015f4

080046c4 <processaEeprom>:

void processaEeprom(void){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <processaEeprom+0x120>)
 80046cc:	6819      	ldr	r1, [r3, #0]
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	4618      	mov	r0, r3
 80046d6:	f006 f8c5 	bl	800a864 <osMessageGet>
	if (evt.status == osEventMessage) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d17c      	bne.n	80047da <processaEeprom+0x116>

		switch ((unsigned int)evt.value.p) {
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	d874      	bhi.n	80047d0 <processaEeprom+0x10c>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <processaEeprom+0x28>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004725 	.word	0x08004725
 80046f0:	0800473b 	.word	0x0800473b
 80046f4:	080047d1 	.word	0x080047d1
 80046f8:	080047d1 	.word	0x080047d1
 80046fc:	0800478f 	.word	0x0800478f
 8004700:	080047b9 	.word	0x080047b9
 8004704:	080047c5 	.word	0x080047c5
 8004708:	0800470d 	.word	0x0800470d

		case CEepromNewCile:
			Calendario.TotalCiclos+=1;
 800470c:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <processaEeprom+0x124>)
 800470e:	891b      	ldrh	r3, [r3, #8]
 8004710:	3301      	adds	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <processaEeprom+0x124>)
 8004716:	811a      	strh	r2, [r3, #8]
			EepromSetVar(&eeprom, &totalCiclos, 	0);
 8004718:	2200      	movs	r2, #0
 800471a:	4934      	ldr	r1, [pc, #208]	; (80047ec <processaEeprom+0x128>)
 800471c:	4834      	ldr	r0, [pc, #208]	; (80047f0 <processaEeprom+0x12c>)
 800471e:	f7fd fa99 	bl	8001c54 <EepromSetVar>
			break;
 8004722:	e05a      	b.n	80047da <processaEeprom+0x116>
		case CEepromHorimetro:
			EepromSetVar(&eeprom, &horimetroHoras, 	0);
 8004724:	2200      	movs	r2, #0
 8004726:	4933      	ldr	r1, [pc, #204]	; (80047f4 <processaEeprom+0x130>)
 8004728:	4831      	ldr	r0, [pc, #196]	; (80047f0 <processaEeprom+0x12c>)
 800472a:	f7fd fa93 	bl	8001c54 <EepromSetVar>
			EepromSetVar(&eeprom, &horimetroMinutos, 	0);
 800472e:	2200      	movs	r2, #0
 8004730:	4931      	ldr	r1, [pc, #196]	; (80047f8 <processaEeprom+0x134>)
 8004732:	482f      	ldr	r0, [pc, #188]	; (80047f0 <processaEeprom+0x12c>)
 8004734:	f7fd fa8e 	bl	8001c54 <EepromSetVar>
			break;
 8004738:	e04f      	b.n	80047da <processaEeprom+0x116>
		case CEepromDataInstalacao:
			EepromSetVar(&eeprom, &instalacaoDia, 	datetoUpdate.Date);
 800473a:	4b30      	ldr	r3, [pc, #192]	; (80047fc <processaEeprom+0x138>)
 800473c:	789b      	ldrb	r3, [r3, #2]
 800473e:	461a      	mov	r2, r3
 8004740:	492f      	ldr	r1, [pc, #188]	; (8004800 <processaEeprom+0x13c>)
 8004742:	482b      	ldr	r0, [pc, #172]	; (80047f0 <processaEeprom+0x12c>)
 8004744:	f7fd fa86 	bl	8001c54 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoMes, 	datetoUpdate.Month);
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <processaEeprom+0x138>)
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	461a      	mov	r2, r3
 800474e:	492d      	ldr	r1, [pc, #180]	; (8004804 <processaEeprom+0x140>)
 8004750:	4827      	ldr	r0, [pc, #156]	; (80047f0 <processaEeprom+0x12c>)
 8004752:	f7fd fa7f 	bl	8001c54 <EepromSetVar>
			EepromSetVar(&eeprom, &instalacaoAno, 	datetoUpdate.Year);
 8004756:	4b29      	ldr	r3, [pc, #164]	; (80047fc <processaEeprom+0x138>)
 8004758:	78db      	ldrb	r3, [r3, #3]
 800475a:	461a      	mov	r2, r3
 800475c:	492a      	ldr	r1, [pc, #168]	; (8004808 <processaEeprom+0x144>)
 800475e:	4824      	ldr	r0, [pc, #144]	; (80047f0 <processaEeprom+0x12c>)
 8004760:	f7fd fa78 	bl	8001c54 <EepromSetVar>
			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004764:	2200      	movs	r2, #0
 8004766:	4929      	ldr	r1, [pc, #164]	; (800480c <processaEeprom+0x148>)
 8004768:	4829      	ldr	r0, [pc, #164]	; (8004810 <processaEeprom+0x14c>)
 800476a:	f003 f985 	bl	8007a78 <HAL_RTC_SetTime>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <processaEeprom+0xb4>
				Error_Handler();
 8004774:	f7fe f9ec 	bl	8002b50 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 8004778:	2200      	movs	r2, #0
 800477a:	4920      	ldr	r1, [pc, #128]	; (80047fc <processaEeprom+0x138>)
 800477c:	4824      	ldr	r0, [pc, #144]	; (8004810 <processaEeprom+0x14c>)
 800477e:	f003 fa13 	bl	8007ba8 <HAL_RTC_SetDate>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d025      	beq.n	80047d4 <processaEeprom+0x110>
				Error_Handler();
 8004788:	f7fe f9e2 	bl	8002b50 <Error_Handler>
			}
			break;
 800478c:	e022      	b.n	80047d4 <processaEeprom+0x110>
			break;
		case CEepromSoftReset:
			break;
		case CEepromAtualizaHora:

			if (HAL_RTC_SetTime(&hrtc, &timeToUpdate, RTC_FORMAT_BIN) != HAL_OK){
 800478e:	2200      	movs	r2, #0
 8004790:	491e      	ldr	r1, [pc, #120]	; (800480c <processaEeprom+0x148>)
 8004792:	481f      	ldr	r0, [pc, #124]	; (8004810 <processaEeprom+0x14c>)
 8004794:	f003 f970 	bl	8007a78 <HAL_RTC_SetTime>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <processaEeprom+0xde>
				Error_Handler();
 800479e:	f7fe f9d7 	bl	8002b50 <Error_Handler>
			}
			if (HAL_RTC_SetDate(&hrtc, &datetoUpdate, RTC_FORMAT_BIN) != HAL_OK){
 80047a2:	2200      	movs	r2, #0
 80047a4:	4915      	ldr	r1, [pc, #84]	; (80047fc <processaEeprom+0x138>)
 80047a6:	481a      	ldr	r0, [pc, #104]	; (8004810 <processaEeprom+0x14c>)
 80047a8:	f003 f9fe 	bl	8007ba8 <HAL_RTC_SetDate>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d012      	beq.n	80047d8 <processaEeprom+0x114>
				Error_Handler();
 80047b2:	f7fe f9cd 	bl	8002b50 <Error_Handler>
			}
			break;
 80047b6:	e00f      	b.n	80047d8 <processaEeprom+0x114>
		case CEepromLimiteTemp:
			EepromSetVar(&eeprom, &LimiteTemperatura, 	0);
 80047b8:	2200      	movs	r2, #0
 80047ba:	4916      	ldr	r1, [pc, #88]	; (8004814 <processaEeprom+0x150>)
 80047bc:	480c      	ldr	r0, [pc, #48]	; (80047f0 <processaEeprom+0x12c>)
 80047be:	f7fd fa49 	bl	8001c54 <EepromSetVar>
			break;
 80047c2:	e00a      	b.n	80047da <processaEeprom+0x116>
		case CEepromLimiteLuz:
			EepromSetVar(&eeprom, &tempoDelayLuz, 	0);
 80047c4:	2200      	movs	r2, #0
 80047c6:	4914      	ldr	r1, [pc, #80]	; (8004818 <processaEeprom+0x154>)
 80047c8:	4809      	ldr	r0, [pc, #36]	; (80047f0 <processaEeprom+0x12c>)
 80047ca:	f7fd fa43 	bl	8001c54 <EepromSetVar>
			break;
 80047ce:	e004      	b.n	80047da <processaEeprom+0x116>
		default:
			break;
 80047d0:	bf00      	nop
 80047d2:	e002      	b.n	80047da <processaEeprom+0x116>
			break;
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <processaEeprom+0x116>
			break;
 80047d8:	bf00      	nop
		}
	}
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200011c4 	.word	0x200011c4
 80047e8:	20001360 	.word	0x20001360
 80047ec:	200015cc 	.word	0x200015cc
 80047f0:	20001444 	.word	0x20001444
 80047f4:	20001504 	.word	0x20001504
 80047f8:	2000152c 	.word	0x2000152c
 80047fc:	20001644 	.word	0x20001644
 8004800:	20001554 	.word	0x20001554
 8004804:	2000157c 	.word	0x2000157c
 8004808:	200015a4 	.word	0x200015a4
 800480c:	20001648 	.word	0x20001648
 8004810:	20000aa8 	.word	0x20000aa8
 8004814:	200015f4 	.word	0x200015f4
 8004818:	2000161c 	.word	0x2000161c

0800481c <atualizaDataEeprom>:

void atualizaDataEeprom(RTC_DateTypeDef data, RTC_TimeTypeDef hora){
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
	datetoUpdate = data;
 8004826:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <atualizaDataEeprom+0x78>)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6013      	str	r3, [r2, #0]
	timeToUpdate = hora;
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <atualizaDataEeprom+0x7c>)
 800482e:	463a      	mov	r2, r7
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	4611      	mov	r1, r2
 8004834:	8019      	strh	r1, [r3, #0]
 8004836:	3302      	adds	r3, #2
 8004838:	0c12      	lsrs	r2, r2, #16
 800483a:	701a      	strb	r2, [r3, #0]

	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <atualizaDataEeprom+0x80>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <atualizaDataEeprom+0x30>
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <atualizaDataEeprom+0x80>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b1f      	cmp	r3, #31
 800484a:	d917      	bls.n	800487c <atualizaDataEeprom+0x60>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <atualizaDataEeprom+0x84>)
 800484e:	685b      	ldr	r3, [r3, #4]
	if(		(instalacaoDia.valor == 0 || instalacaoDia.valor > 31) &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <atualizaDataEeprom+0x40>
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <atualizaDataEeprom+0x84>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d90f      	bls.n	800487c <atualizaDataEeprom+0x60>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <atualizaDataEeprom+0x88>)
 800485e:	685b      	ldr	r3, [r3, #4]
			(instalacaoMes.valor == 0 || instalacaoMes.valor > 12 ) &&
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <atualizaDataEeprom+0x50>
			(instalacaoAno.valor == 0 || instalacaoAno.valor > 200)){
 8004864:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <atualizaDataEeprom+0x88>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2bc8      	cmp	r3, #200	; 0xc8
 800486a:	d907      	bls.n	800487c <atualizaDataEeprom+0x60>
		//primeiro recebimento de data
		osMessagePut(FilaEepromHandle, CEepromDataInstalacao, 0);
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <atualizaDataEeprom+0x8c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	2101      	movs	r1, #1
 8004874:	4618      	mov	r0, r3
 8004876:	f005 ffb5 	bl	800a7e4 <osMessagePut>
 800487a:	e007      	b.n	800488c <atualizaDataEeprom+0x70>
	}else{
		//gravacao padrao de data e hora
		osMessagePut(FilaEepromHandle, CEepromAtualizaHora, 0);
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <atualizaDataEeprom+0x8c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2200      	movs	r2, #0
 8004882:	2104      	movs	r1, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f005 ffad 	bl	800a7e4 <osMessagePut>
	}
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20001644 	.word	0x20001644
 8004898:	20001648 	.word	0x20001648
 800489c:	20001554 	.word	0x20001554
 80048a0:	2000157c 	.word	0x2000157c
 80048a4:	200015a4 	.word	0x200015a4
 80048a8:	200011c4 	.word	0x200011c4

080048ac <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

	initPID();
 80048b4:	f000 f858 	bl	8004968 <initPID>

	for(;;)	{

		computaPID();
 80048b8:	f000 f8d6 	bl	8004a68 <computaPID>
		osThreadYield();
 80048bc:	f005 fe0e 	bl	800a4dc <osThreadYield>

		/*	-Em aquecimento
		 * 		podendo:
		 * 			->resetar timers realtime
		 * 			->no else, vindo do aquecimento gera notificacao de temperatura alcancada	*/
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <StartTemperatura+0xb4>)
 80048c2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80048c6:	4b26      	ldr	r3, [pc, #152]	; (8004960 <StartTemperatura+0xb4>)
 80048c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	4b24      	ldr	r3, [pc, #144]	; (8004964 <StartTemperatura+0xb8>)
 80048d2:	f7fb fc49 	bl	8000168 <__aeabi_dsub>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	f7fc f86d 	bl	80009bc <__aeabi_dcmplt>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <StartTemperatura+0x64>
				PrimitiveStates.RealtimeLastro<(PrimitiveStates.SetPointLastro)-5){
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <StartTemperatura+0xb4>)
 80048ea:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <StartTemperatura+0xb4>)
 80048f0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80048f4:	f04f 0200 	mov.w	r2, #0
 80048f8:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <StartTemperatura+0xb8>)
 80048fa:	f7fb fc35 	bl	8000168 <__aeabi_dsub>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
		if(PrimitiveStates.RealtimeTeto<(PrimitiveStates.SetPointTeto)-5 ||
 8004902:	4620      	mov	r0, r4
 8004904:	4629      	mov	r1, r5
 8004906:	f7fc f859 	bl	80009bc <__aeabi_dcmplt>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d008      	beq.n	8004922 <StartTemperatura+0x76>

			PrimitiveStates.MaquinaAquecimento 	= buscandoTemp;
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <StartTemperatura+0xb4>)
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			PrimitiveStates.stateMaquina 		= aquecendo;
 8004918:	4b11      	ldr	r3, [pc, #68]	; (8004960 <StartTemperatura+0xb4>)
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8004920:	e019      	b.n	8004956 <StartTemperatura+0xaa>

		}else 	if(PrimitiveStates.RealtimeTeto>=PrimitiveStates.SetPointTeto ||
 8004922:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <StartTemperatura+0xb4>)
 8004924:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <StartTemperatura+0xb4>)
 800492a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800492e:	f7fc f859 	bl	80009e4 <__aeabi_dcmpge>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <StartTemperatura+0xa2>
				PrimitiveStates.RealtimeLastro>=PrimitiveStates.SetPointLastro){
 8004938:	4b09      	ldr	r3, [pc, #36]	; (8004960 <StartTemperatura+0xb4>)
 800493a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800493e:	4b08      	ldr	r3, [pc, #32]	; (8004960 <StartTemperatura+0xb4>)
 8004940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
		}else 	if(PrimitiveStates.RealtimeTeto>=PrimitiveStates.SetPointTeto ||
 8004944:	f7fc f84e 	bl	80009e4 <__aeabi_dcmpge>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <StartTemperatura+0xaa>

			PrimitiveStates.MaquinaAquecimento = mantendoTemp;
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <StartTemperatura+0xb4>)
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		}

		osDelay(TIME_PID_CALC);
 8004956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800495a:	f005 fdd1 	bl	800a500 <osDelay>
		computaPID();
 800495e:	e7ab      	b.n	80048b8 <StartTemperatura+0xc>
 8004960:	20001328 	.word	0x20001328
 8004964:	40140000 	.word	0x40140000

08004968 <initPID>:
	}
}


void initPID(void){
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af08      	add	r7, sp, #32

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 800496e:	2300      	movs	r3, #0
 8004970:	9307      	str	r3, [sp, #28]
 8004972:	2301      	movs	r3, #1
 8004974:	9306      	str	r3, [sp, #24]
 8004976:	a32e      	add	r3, pc, #184	; (adr r3, 8004a30 <initPID+0xc8>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004980:	a32d      	add	r3, pc, #180	; (adr r3, 8004a38 <initPID+0xd0>)
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <initPID+0xd8>)
 8004990:	e9cd 2300 	strd	r2, r3, [sp]
 8004994:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <initPID+0xdc>)
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <initPID+0xe0>)
 8004998:	492c      	ldr	r1, [pc, #176]	; (8004a4c <initPID+0xe4>)
 800499a:	482d      	ldr	r0, [pc, #180]	; (8004a50 <initPID+0xe8>)
 800499c:	f7fe f918 	bl	8002bd0 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80049a0:	2300      	movs	r3, #0
 80049a2:	9307      	str	r3, [sp, #28]
 80049a4:	2301      	movs	r3, #1
 80049a6:	9306      	str	r3, [sp, #24]
 80049a8:	a321      	add	r3, pc, #132	; (adr r3, 8004a30 <initPID+0xc8>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80049b2:	a321      	add	r3, pc, #132	; (adr r3, 8004a38 <initPID+0xd0>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <initPID+0xd8>)
 80049c2:	e9cd 2300 	strd	r2, r3, [sp]
 80049c6:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <initPID+0xec>)
 80049c8:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <initPID+0xf0>)
 80049ca:	4924      	ldr	r1, [pc, #144]	; (8004a5c <initPID+0xf4>)
 80049cc:	4824      	ldr	r0, [pc, #144]	; (8004a60 <initPID+0xf8>)
 80049ce:	f7fe f8ff 	bl	8002bd0 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80049d2:	2101      	movs	r1, #1
 80049d4:	481e      	ldr	r0, [pc, #120]	; (8004a50 <initPID+0xe8>)
 80049d6:	f7fe fa2d 	bl	8002e34 <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 80049da:	2101      	movs	r1, #1
 80049dc:	4820      	ldr	r0, [pc, #128]	; (8004a60 <initPID+0xf8>)
 80049de:	f7fe fa29 	bl	8002e34 <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 80049e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80049e6:	481a      	ldr	r0, [pc, #104]	; (8004a50 <initPID+0xe8>)
 80049e8:	f7fe fb92 	bl	8003110 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 80049ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80049f0:	481b      	ldr	r0, [pc, #108]	; (8004a60 <initPID+0xf8>)
 80049f2:	f7fe fb8d 	bl	8003110 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <initPID+0xfc>)
 80049fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	4811      	ldr	r0, [pc, #68]	; (8004a50 <initPID+0xe8>)
 8004a0a:	f7fe fa31 	bl	8002e70 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <initPID+0xfc>)
 8004a14:	e9cd 2300 	strd	r2, r3, [sp]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	480f      	ldr	r0, [pc, #60]	; (8004a60 <initPID+0xf8>)
 8004a22:	f7fe fa25 	bl	8002e70 <PID_SetOutputLimits>
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	f3af 8000 	nop.w
 8004a30:	33333333 	.word	0x33333333
 8004a34:	3fd33333 	.word	0x3fd33333
 8004a38:	47ae147b 	.word	0x47ae147b
 8004a3c:	3f847ae1 	.word	0x3f847ae1
 8004a40:	403e0000 	.word	0x403e0000
 8004a44:	20001340 	.word	0x20001340
 8004a48:	20001650 	.word	0x20001650
 8004a4c:	20001330 	.word	0x20001330
 8004a50:	20001660 	.word	0x20001660
 8004a54:	20001348 	.word	0x20001348
 8004a58:	20001658 	.word	0x20001658
 8004a5c:	20001338 	.word	0x20001338
 8004a60:	200016d0 	.word	0x200016d0
 8004a64:	40590000 	.word	0x40590000

08004a68 <computaPID>:
void computaPID(void){
 8004a68:	b598      	push	{r3, r4, r7, lr}
 8004a6a:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 8004a6c:	480e      	ldr	r0, [pc, #56]	; (8004aa8 <computaPID+0x40>)
 8004a6e:	f7fe f8f7 	bl	8002c60 <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004a72:	480e      	ldr	r0, [pc, #56]	; (8004aac <computaPID+0x44>)
 8004a74:	f7fe f8f4 	bl	8002c60 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <computaPID+0x48>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <computaPID+0x4c>)
 8004a80:	680c      	ldr	r4, [r1, #0]
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	f7fb ffc1 	bl	8000a0c <__aeabi_d2uiz>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 8004a8e:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <computaPID+0x50>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	4907      	ldr	r1, [pc, #28]	; (8004ab4 <computaPID+0x4c>)
 8004a96:	680c      	ldr	r4, [r1, #0]
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	f7fb ffb6 	bl	8000a0c <__aeabi_d2uiz>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004aa4:	bf00      	nop
 8004aa6:	bd98      	pop	{r3, r4, r7, pc}
 8004aa8:	20001660 	.word	0x20001660
 8004aac:	200016d0 	.word	0x200016d0
 8004ab0:	20001650 	.word	0x20001650
 8004ab4:	20000b04 	.word	0x20000b04
 8004ab8:	20001658 	.word	0x20001658

08004abc <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	af00      	add	r7, sp, #0

	//MONITOR DE ERRO DE AQUECIMENTO
	static uint16_t contadorAquecimento;
	if(PrimitiveStates.stateMaquina == aquecendo){
 8004ac0:	4b26      	ldr	r3, [pc, #152]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004ac2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d143      	bne.n	8004b52 <taskTemperatura1sec+0x96>

		if(contadorAquecimento>=TIME_MAX_AQUECIMENTO){
 8004aca:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <taskTemperatura1sec+0xa4>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004ad2:	d337      	bcc.n	8004b44 <taskTemperatura1sec+0x88>
			//verifica erro temperatura lastro
			if(PrimitiveStates.RealtimeLastro < PrimitiveStates.SetPointLastro-5)
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004ad6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004adc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <taskTemperatura1sec+0xa8>)
 8004ae6:	f7fb fb3f 	bl	8000168 <__aeabi_dsub>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fb ff63 	bl	80009bc <__aeabi_dcmplt>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d006      	beq.n	8004b0a <taskTemperatura1sec+0x4e>
				PrimitiveStates.Erro.bit.IdleLastro=1;
 8004afc:	4a17      	ldr	r2, [pc, #92]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004afe:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004b02:	f043 0308 	orr.w	r3, r3, #8
 8004b06:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33

			//verifica erro temperatura teto
			if(PrimitiveStates.RealtimeTeto < PrimitiveStates.SetPointTeto-5)
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004b0c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004b10:	4b12      	ldr	r3, [pc, #72]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004b12:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <taskTemperatura1sec+0xa8>)
 8004b1c:	f7fb fb24 	bl	8000168 <__aeabi_dsub>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb ff48 	bl	80009bc <__aeabi_dcmplt>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d100      	bne.n	8004b34 <taskTemperatura1sec+0x78>
		}else{
			contadorAquecimento++;
		}
	}else
		contadorAquecimento=0;
}
 8004b32:	e011      	b.n	8004b58 <taskTemperatura1sec+0x9c>
				PrimitiveStates.Erro.bit.IdleTeto=1;
 8004b34:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <taskTemperatura1sec+0xa0>)
 8004b36:	f892 3033 	ldrb.w	r3, [r2, #51]	; 0x33
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
}
 8004b42:	e009      	b.n	8004b58 <taskTemperatura1sec+0x9c>
			contadorAquecimento++;
 8004b44:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <taskTemperatura1sec+0xa4>)
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <taskTemperatura1sec+0xa4>)
 8004b4e:	801a      	strh	r2, [r3, #0]
}
 8004b50:	e002      	b.n	8004b58 <taskTemperatura1sec+0x9c>
		contadorAquecimento=0;
 8004b52:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <taskTemperatura1sec+0xa4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	801a      	strh	r2, [r3, #0]
}
 8004b58:	bf00      	nop
 8004b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b5c:	20001328 	.word	0x20001328
 8004b60:	20001740 	.word	0x20001740
 8004b64:	40140000 	.word	0x40140000

08004b68 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 8004b70:	f007 fa88 	bl	800c084 <xTaskGetTickCount>
 8004b74:	4603      	mov	r3, r0
 8004b76:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 8004b78:	f000 f8ae 	bl	8004cd8 <verificaErro>

		funcionamentoTimer();
 8004b7c:	f000 f80c 	bl	8004b98 <funcionamentoTimer>

		funcionamentoLampada();
 8004b80:	f000 f87a 	bl	8004c78 <funcionamentoLampada>

		osThreadYield();
 8004b84:	f005 fcaa 	bl	800a4dc <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b90:	4618      	mov	r0, r3
 8004b92:	f005 ff09 	bl	800a9a8 <osDelayUntil>
		verificaErro();
 8004b96:	e7ef      	b.n	8004b78 <StartTimer+0x10>

08004b98 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateMaquina == decrementando){
 8004b9c:	4b34      	ldr	r3, [pc, #208]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004b9e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d016      	beq.n	8004bd4 <funcionamentoTimer+0x3c>
 8004ba6:	4b32      	ldr	r3, [pc, #200]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004ba8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d111      	bne.n	8004bd4 <funcionamentoTimer+0x3c>
 8004bb0:	4b2f      	ldr	r3, [pc, #188]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bb2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d10c      	bne.n	8004bd4 <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bbc:	223b      	movs	r2, #59	; 0x3b
 8004bbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 8004bc2:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				PrimitiveStates.stateMaquina = aquecido;
			}
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004bd2:	e04a      	b.n	8004c6a <funcionamentoTimer+0xd2>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateMaquina == decrementando){
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <funcionamentoTimer+0x50>
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004be0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d040      	beq.n	8004c6a <funcionamentoTimer+0xd2>
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d13b      	bne.n	8004c6a <funcionamentoTimer+0xd2>
		PrimitiveStates.RTTimerSegundos--;
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bf4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 8004c02:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d12e      	bne.n	8004c6a <funcionamentoTimer+0xd2>
 8004c0c:	4b18      	ldr	r3, [pc, #96]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c0e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d129      	bne.n	8004c6a <funcionamentoTimer+0xd2>
			PrimitiveStates.SetPointTeto 	= 0;
 8004c16:	4916      	ldr	r1, [pc, #88]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c18:	f04f 0200 	mov.w	r2, #0
 8004c1c:	f04f 0300 	mov.w	r3, #0
 8004c20:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 8004c24:	4912      	ldr	r1, [pc, #72]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 8004c32:	490f      	ldr	r1, [pc, #60]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 8004c40:	490b      	ldr	r1, [pc, #44]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			if(PrimitiveStates.MaquinaAquecimento == mantendoTemp){
 8004c4e:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d103      	bne.n	8004c60 <funcionamentoTimer+0xc8>
				PrimitiveStates.stateMaquina = aquecido;
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <funcionamentoTimer+0xd8>)
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			osThreadResume(TaskBuzzerHandle);
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <funcionamentoTimer+0xdc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f005 fe7d 	bl	800a964 <osThreadResume>
}
 8004c6a:	bf00      	nop
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20001328 	.word	0x20001328
 8004c74:	20000c6c 	.word	0x20000c6c

08004c78 <funcionamentoLampada>:

void funcionamentoLampada(void){
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0

	//decremento e apos desligamento lampada
	if(PrimitiveStates.RTLampada>0){
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004c7e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d021      	beq.n	8004cca <funcionamentoLampada+0x52>
		PrimitiveStates.RTLampada--;
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004c88:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004c92:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		if(PrimitiveStates.RTLampada==0){
 8004c96:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004c98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10c      	bne.n	8004cba <funcionamentoLampada+0x42>
			LAMPADA_OFF
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2140      	movs	r1, #64	; 0x40
 8004ca4:	480b      	ldr	r0, [pc, #44]	; (8004cd4 <funcionamentoLampada+0x5c>)
 8004ca6:	f001 fab0 	bl	800620a <HAL_GPIO_WritePin>
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 8004cb8:	e007      	b.n	8004cca <funcionamentoLampada+0x52>
			LAMPADA_ON
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2140      	movs	r1, #64	; 0x40
 8004cbe:	4805      	ldr	r0, [pc, #20]	; (8004cd4 <funcionamentoLampada+0x5c>)
 8004cc0:	f001 faa3 	bl	800620a <HAL_GPIO_WritePin>
 8004cc4:	4b02      	ldr	r3, [pc, #8]	; (8004cd0 <funcionamentoLampada+0x58>)
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	70da      	strb	r2, [r3, #3]
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20001328 	.word	0x20001328
 8004cd4:	40010c00 	.word	0x40010c00

08004cd8 <verificaErro>:

void verificaErro(void){
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	210f      	movs	r1, #15
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f005 fcd7 	bl	800a698 <osSignalWait>
	if (evt.status == osEventSignal){
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d107      	bne.n	8004d00 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d104      	bne.n	8004d00 <verificaErro+0x28>
			osThreadSuspend(TaskTimerHandle);
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <verificaErro+0x30>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f005 fe26 	bl	800a94c <osThreadSuspend>
		}
	}
}
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000f10 	.word	0x20000f10

08004d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d10:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <HAL_Init+0x28>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a07      	ldr	r2, [pc, #28]	; (8004d34 <HAL_Init+0x28>)
 8004d16:	f043 0310 	orr.w	r3, r3, #16
 8004d1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d1c:	2003      	movs	r0, #3
 8004d1e:	f000 fcdb 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d22:	200f      	movs	r0, #15
 8004d24:	f7fe fd0a 	bl	800373c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d28:	f7fe fa2e 	bl	8003188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40022000 	.word	0x40022000

08004d38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_IncTick+0x1c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_IncTick+0x20>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4413      	add	r3, r2
 8004d48:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <HAL_IncTick+0x20>)
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000208 	.word	0x20000208
 8004d58:	20001744 	.word	0x20001744

08004d5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <HAL_GetTick+0x10>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	20001744 	.word	0x20001744

08004d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_GetTick>
 8004d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d005      	beq.n	8004d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_Delay+0x44>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d96:	bf00      	nop
 8004d98:	f7ff ffe0 	bl	8004d5c <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d8f7      	bhi.n	8004d98 <HAL_Delay+0x28>
  {
  }
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000208 	.word	0x20000208

08004db8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0be      	b.n	8004f58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fe f9fe 	bl	80031f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 faf5 	bl	80053ec <ADC_ConversionStop_Disable>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	f003 0310 	and.w	r3, r3, #16
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 8099 	bne.w	8004f46 <HAL_ADC_Init+0x18e>
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 8095 	bne.w	8004f46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e24:	f023 0302 	bic.w	r3, r3, #2
 8004e28:	f043 0202 	orr.w	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	7b1b      	ldrb	r3, [r3, #12]
 8004e3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004e40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e50:	d003      	beq.n	8004e5a <HAL_ADC_Init+0xa2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d102      	bne.n	8004e60 <HAL_ADC_Init+0xa8>
 8004e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5e:	e000      	b.n	8004e62 <HAL_ADC_Init+0xaa>
 8004e60:	2300      	movs	r3, #0
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7d1b      	ldrb	r3, [r3, #20]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d119      	bne.n	8004ea4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	7b1b      	ldrb	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	035a      	lsls	r2, r3, #13
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f043 0220 	orr.w	r2, r3, #32
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_ADC_Init+0x1a8>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed4:	d003      	beq.n	8004ede <HAL_ADC_Init+0x126>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d104      	bne.n	8004ee8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	051b      	lsls	r3, r3, #20
 8004ee6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <HAL_ADC_Init+0x1ac>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d10b      	bne.n	8004f24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	f043 0201 	orr.w	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f22:	e018      	b.n	8004f56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f023 0312 	bic.w	r3, r3, #18
 8004f2c:	f043 0210 	orr.w	r2, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004f44:	e007      	b.n	8004f56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f043 0210 	orr.w	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ffe1f7fd 	.word	0xffe1f7fd
 8004f64:	ff1f0efe 	.word	0xff1f0efe

08004f68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a64      	ldr	r2, [pc, #400]	; (8005110 <HAL_ADC_Start_DMA+0x1a8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d004      	beq.n	8004f8c <HAL_ADC_Start_DMA+0x24>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a63      	ldr	r2, [pc, #396]	; (8005114 <HAL_ADC_Start_DMA+0x1ac>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d106      	bne.n	8004f9a <HAL_ADC_Start_DMA+0x32>
 8004f8c:	4b60      	ldr	r3, [pc, #384]	; (8005110 <HAL_ADC_Start_DMA+0x1a8>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 80b3 	bne.w	8005100 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_Start_DMA+0x40>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0ae      	b.n	8005106 <HAL_ADC_Start_DMA+0x19e>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 f9c1 	bl	8005338 <ADC_Enable>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 809a 	bne.w	80050f6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a4e      	ldr	r2, [pc, #312]	; (8005114 <HAL_ADC_Start_DMA+0x1ac>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d105      	bne.n	8004fec <HAL_ADC_Start_DMA+0x84>
 8004fe0:	4b4b      	ldr	r3, [pc, #300]	; (8005110 <HAL_ADC_Start_DMA+0x1a8>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d115      	bne.n	8005018 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005002:	2b00      	cmp	r3, #0
 8005004:	d026      	beq.n	8005054 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800500e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005016:	e01d      	b.n	8005054 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a39      	ldr	r2, [pc, #228]	; (8005110 <HAL_ADC_Start_DMA+0x1a8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_ADC_Start_DMA+0xd0>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a38      	ldr	r2, [pc, #224]	; (8005114 <HAL_ADC_Start_DMA+0x1ac>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10d      	bne.n	8005054 <HAL_ADC_Start_DMA+0xec>
 8005038:	4b35      	ldr	r3, [pc, #212]	; (8005110 <HAL_ADC_Start_DMA+0x1a8>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800504c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f023 0206 	bic.w	r2, r3, #6
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c
 800506c:	e002      	b.n	8005074 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <HAL_ADC_Start_DMA+0x1b0>)
 8005082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4a24      	ldr	r2, [pc, #144]	; (800511c <HAL_ADC_Start_DMA+0x1b4>)
 800508a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_ADC_Start_DMA+0x1b8>)
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0202 	mvn.w	r2, #2
 800509c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a18      	ldr	r0, [r3, #32]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	334c      	adds	r3, #76	; 0x4c
 80050b8:	4619      	mov	r1, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f000 fc05 	bl	80058cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80050cc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80050d0:	d108      	bne.n	80050e4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80050e0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80050e2:	e00f      	b.n	8005104 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80050f2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80050f4:	e006      	b.n	8005104 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80050fe:	e001      	b.n	8005104 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40012400 	.word	0x40012400
 8005114:	40012800 	.word	0x40012800
 8005118:	0800546f 	.word	0x0800546f
 800511c:	080054eb 	.word	0x080054eb
 8005120:	08005507 	.word	0x08005507

08005124 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x20>
 8005164:	2302      	movs	r3, #2
 8005166:	e0dc      	b.n	8005322 <HAL_ADC_ConfigChannel+0x1da>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b06      	cmp	r3, #6
 8005176:	d81c      	bhi.n	80051b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	3b05      	subs	r3, #5
 800518a:	221f      	movs	r2, #31
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	4019      	ands	r1, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	3b05      	subs	r3, #5
 80051a4:	fa00 f203 	lsl.w	r2, r0, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	635a      	str	r2, [r3, #52]	; 0x34
 80051b0:	e03c      	b.n	800522c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d81c      	bhi.n	80051f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	3b23      	subs	r3, #35	; 0x23
 80051cc:	221f      	movs	r2, #31
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43db      	mvns	r3, r3
 80051d4:	4019      	ands	r1, r3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	3b23      	subs	r3, #35	; 0x23
 80051e6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	631a      	str	r2, [r3, #48]	; 0x30
 80051f2:	e01b      	b.n	800522c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	3b41      	subs	r3, #65	; 0x41
 8005206:	221f      	movs	r2, #31
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	4019      	ands	r1, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	3b41      	subs	r3, #65	; 0x41
 8005220:	fa00 f203 	lsl.w	r2, r0, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b09      	cmp	r3, #9
 8005232:	d91c      	bls.n	800526e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68d9      	ldr	r1, [r3, #12]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	3b1e      	subs	r3, #30
 8005246:	2207      	movs	r2, #7
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	43db      	mvns	r3, r3
 800524e:	4019      	ands	r1, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	6898      	ldr	r0, [r3, #8]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	4413      	add	r3, r2
 800525e:	3b1e      	subs	r3, #30
 8005260:	fa00 f203 	lsl.w	r2, r0, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	60da      	str	r2, [r3, #12]
 800526c:	e019      	b.n	80052a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6919      	ldr	r1, [r3, #16]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	4413      	add	r3, r2
 800527e:	2207      	movs	r2, #7
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	43db      	mvns	r3, r3
 8005286:	4019      	ands	r1, r3
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	6898      	ldr	r0, [r3, #8]
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	fa00 f203 	lsl.w	r2, r0, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b10      	cmp	r3, #16
 80052a8:	d003      	beq.n	80052b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80052ae:	2b11      	cmp	r3, #17
 80052b0:	d132      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	; (800532c <HAL_ADC_ConfigChannel+0x1e4>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d125      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d126      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80052d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d11a      	bne.n	8005318 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_ADC_ConfigChannel+0x1e8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a13      	ldr	r2, [pc, #76]	; (8005334 <HAL_ADC_ConfigChannel+0x1ec>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	0c9a      	lsrs	r2, r3, #18
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80052f8:	e002      	b.n	8005300 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f9      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x1b2>
 8005306:	e007      	b.n	8005318 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005320:	7bfb      	ldrb	r3, [r7, #15]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012400 	.word	0x40012400
 8005330:	20000200 	.word	0x20000200
 8005334:	431bde83 	.word	0x431bde83

08005338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d040      	beq.n	80053d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005366:	4b1f      	ldr	r3, [pc, #124]	; (80053e4 <ADC_Enable+0xac>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <ADC_Enable+0xb0>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	0c9b      	lsrs	r3, r3, #18
 8005372:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005374:	e002      	b.n	800537c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3b01      	subs	r3, #1
 800537a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f9      	bne.n	8005376 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005382:	f7ff fceb 	bl	8004d5c <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005388:	e01f      	b.n	80053ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800538a:	f7ff fce7 	bl	8004d5c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d918      	bls.n	80053ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d011      	beq.n	80053ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f043 0210 	orr.w	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e007      	b.n	80053da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d1d8      	bne.n	800538a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000200 	.word	0x20000200
 80053e8:	431bde83 	.word	0x431bde83

080053ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	d12e      	bne.n	8005464 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005416:	f7ff fca1 	bl	8004d5c <HAL_GetTick>
 800541a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800541c:	e01b      	b.n	8005456 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800541e:	f7ff fc9d 	bl	8004d5c <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d914      	bls.n	8005456 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d10d      	bne.n	8005456 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f043 0210 	orr.w	r2, r3, #16
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f043 0201 	orr.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e007      	b.n	8005466 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0301 	and.w	r3, r3, #1
 8005460:	2b01      	cmp	r3, #1
 8005462:	d0dc      	beq.n	800541e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005484:	2b00      	cmp	r3, #0
 8005486:	d127      	bne.n	80054d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800549e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054a2:	d115      	bne.n	80054d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d111      	bne.n	80054d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fd fa7b 	bl	80029cc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80054d6:	e004      	b.n	80054e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff fe13 	bl	8005124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	f043 0204 	orr.w	r2, r3, #4
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f7ff fe02 	bl	8005136 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800554c:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005558:	4013      	ands	r3, r2
 800555a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556e:	4a04      	ldr	r2, [pc, #16]	; (8005580 <__NVIC_SetPriorityGrouping+0x44>)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	60d3      	str	r3, [r2, #12]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <__NVIC_GetPriorityGrouping+0x18>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 0307 	and.w	r3, r3, #7
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	4603      	mov	r3, r0
 80055a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	db0b      	blt.n	80055ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	f003 021f 	and.w	r2, r3, #31
 80055b8:	4906      	ldr	r1, [pc, #24]	; (80055d4 <__NVIC_EnableIRQ+0x34>)
 80055ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2001      	movs	r0, #1
 80055c2:	fa00 f202 	lsl.w	r2, r0, r2
 80055c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	e000e100 	.word	0xe000e100

080055d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	db12      	blt.n	8005610 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	f003 021f 	and.w	r2, r3, #31
 80055f0:	490a      	ldr	r1, [pc, #40]	; (800561c <__NVIC_DisableIRQ+0x44>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	2001      	movs	r0, #1
 80055fa:	fa00 f202 	lsl.w	r2, r0, r2
 80055fe:	3320      	adds	r3, #32
 8005600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005604:	f3bf 8f4f 	dsb	sy
}
 8005608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800560a:	f3bf 8f6f 	isb	sy
}
 800560e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e100 	.word	0xe000e100

08005620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db0a      	blt.n	800564a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	490c      	ldr	r1, [pc, #48]	; (800566c <__NVIC_SetPriority+0x4c>)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	440b      	add	r3, r1
 8005644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005648:	e00a      	b.n	8005660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <__NVIC_SetPriority+0x50>)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	3b04      	subs	r3, #4
 8005658:	0112      	lsls	r2, r2, #4
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	440b      	add	r3, r1
 800565e:	761a      	strb	r2, [r3, #24]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	e000e100 	.word	0xe000e100
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	; 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	bf28      	it	cs
 8005692:	2304      	movcs	r3, #4
 8005694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3304      	adds	r3, #4
 800569a:	2b06      	cmp	r3, #6
 800569c:	d902      	bls.n	80056a4 <NVIC_EncodePriority+0x30>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3b03      	subs	r3, #3
 80056a2:	e000      	b.n	80056a6 <NVIC_EncodePriority+0x32>
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	401a      	ands	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056bc:	f04f 31ff 	mov.w	r1, #4294967295
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	43d9      	mvns	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	4313      	orrs	r3, r2
         );
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bc80      	pop	{r7}
 80056d6:	4770      	bx	lr

080056d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff2b 	bl	800553c <__NVIC_SetPriorityGrouping>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005700:	f7ff ff40 	bl	8005584 <__NVIC_GetPriorityGrouping>
 8005704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff ffb2 	bl	8005674 <NVIC_EncodePriority>
 8005710:	4602      	mov	r2, r0
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff81 	bl	8005620 <__NVIC_SetPriority>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff33 	bl	80055a0 <__NVIC_EnableIRQ>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	4603      	mov	r3, r0
 800574a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800574c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff41 	bl	80055d8 <__NVIC_DisableIRQ>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005768:	2300      	movs	r3, #0
 800576a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e043      	b.n	80057fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_DMA_Init+0xa8>)
 800577e:	4413      	add	r3, r2
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <HAL_DMA_Init+0xac>)
 8005782:	fba2 2303 	umull	r2, r3, r2, r3
 8005786:	091b      	lsrs	r3, r3, #4
 8005788:	009a      	lsls	r2, r3, #2
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <HAL_DMA_Init+0xb0>)
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	bffdfff8 	.word	0xbffdfff8
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	40020000 	.word	0x40020000

08005814 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e046      	b.n	80058b4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	4b18      	ldr	r3, [pc, #96]	; (80058c0 <HAL_DMA_DeInit+0xac>)
 800585e:	4413      	add	r3, r2
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_DMA_DeInit+0xb0>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	009a      	lsls	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a15      	ldr	r2, [pc, #84]	; (80058c8 <HAL_DMA_DeInit+0xb4>)
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f202 	lsl.w	r2, r1, r2
 8005882:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	bffdfff8 	.word	0xbffdfff8
 80058c4:	cccccccd 	.word	0xcccccccd
 80058c8:	40020000 	.word	0x40020000

080058cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_DMA_Start_IT+0x20>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e04b      	b.n	8005984 <HAL_DMA_Start_IT+0xb8>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d13a      	bne.n	8005976 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	68b9      	ldr	r1, [r7, #8]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f9eb 	bl	8005d00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 020e 	orr.w	r2, r2, #14
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e00f      	b.n	8005964 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0204 	bic.w	r2, r2, #4
 8005952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 020a 	orr.w	r2, r2, #10
 8005962:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e005      	b.n	8005982 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800597e:	2302      	movs	r3, #2
 8005980:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005982:	7dfb      	ldrb	r3, [r7, #23]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d008      	beq.n	80059b6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2204      	movs	r2, #4
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e020      	b.n	80059f8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 020e 	bic.w	r2, r2, #14
 80059c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	2101      	movs	r1, #1
 80059e0:	fa01 f202 	lsl.w	r2, r1, r2
 80059e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d005      	beq.n	8005a28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73fb      	strb	r3, [r7, #15]
 8005a26:	e051      	b.n	8005acc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 020e 	bic.w	r2, r2, #14
 8005a36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0201 	bic.w	r2, r2, #1
 8005a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <HAL_DMA_Abort_IT+0xd4>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d029      	beq.n	8005aa6 <HAL_DMA_Abort_IT+0xa2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a21      	ldr	r2, [pc, #132]	; (8005adc <HAL_DMA_Abort_IT+0xd8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_Abort_IT+0x9e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <HAL_DMA_Abort_IT+0xdc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01a      	beq.n	8005a9c <HAL_DMA_Abort_IT+0x98>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_DMA_Abort_IT+0xe0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d012      	beq.n	8005a96 <HAL_DMA_Abort_IT+0x92>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_DMA_Abort_IT+0xe4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00a      	beq.n	8005a90 <HAL_DMA_Abort_IT+0x8c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_DMA_Abort_IT+0xe8>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d102      	bne.n	8005a8a <HAL_DMA_Abort_IT+0x86>
 8005a84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a88:	e00e      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005a8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a8e:	e00b      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a94:	e008      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a9a:	e005      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa0:	e002      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005aa2:	2310      	movs	r3, #16
 8005aa4:	e000      	b.n	8005aa8 <HAL_DMA_Abort_IT+0xa4>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <HAL_DMA_Abort_IT+0xec>)
 8005aaa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3
    } 
  }
  return status;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40020008 	.word	0x40020008
 8005adc:	4002001c 	.word	0x4002001c
 8005ae0:	40020030 	.word	0x40020030
 8005ae4:	40020044 	.word	0x40020044
 8005ae8:	40020058 	.word	0x40020058
 8005aec:	4002006c 	.word	0x4002006c
 8005af0:	40020000 	.word	0x40020000

08005af4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	2204      	movs	r2, #4
 8005b12:	409a      	lsls	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d04f      	beq.n	8005bbc <HAL_DMA_IRQHandler+0xc8>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04a      	beq.n	8005bbc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0204 	bic.w	r2, r2, #4
 8005b42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a66      	ldr	r2, [pc, #408]	; (8005ce4 <HAL_DMA_IRQHandler+0x1f0>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d029      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0xae>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a65      	ldr	r2, [pc, #404]	; (8005ce8 <HAL_DMA_IRQHandler+0x1f4>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0xaa>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a63      	ldr	r2, [pc, #396]	; (8005cec <HAL_DMA_IRQHandler+0x1f8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01a      	beq.n	8005b98 <HAL_DMA_IRQHandler+0xa4>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a62      	ldr	r2, [pc, #392]	; (8005cf0 <HAL_DMA_IRQHandler+0x1fc>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d012      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x9e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a60      	ldr	r2, [pc, #384]	; (8005cf4 <HAL_DMA_IRQHandler+0x200>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00a      	beq.n	8005b8c <HAL_DMA_IRQHandler+0x98>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5f      	ldr	r2, [pc, #380]	; (8005cf8 <HAL_DMA_IRQHandler+0x204>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d102      	bne.n	8005b86 <HAL_DMA_IRQHandler+0x92>
 8005b80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b84:	e00e      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005b86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b8a:	e00b      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b90:	e008      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005b92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b96:	e005      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005b98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b9c:	e002      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005b9e:	2340      	movs	r3, #64	; 0x40
 8005ba0:	e000      	b.n	8005ba4 <HAL_DMA_IRQHandler+0xb0>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	4a55      	ldr	r2, [pc, #340]	; (8005cfc <HAL_DMA_IRQHandler+0x208>)
 8005ba6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 8094 	beq.w	8005cda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005bba:	e08e      	b.n	8005cda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	409a      	lsls	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d056      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x186>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d051      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 020a 	bic.w	r2, r2, #10
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_DMA_IRQHandler+0x1f0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d029      	beq.n	8005c5a <HAL_DMA_IRQHandler+0x166>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a37      	ldr	r2, [pc, #220]	; (8005ce8 <HAL_DMA_IRQHandler+0x1f4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <HAL_DMA_IRQHandler+0x162>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a35      	ldr	r2, [pc, #212]	; (8005cec <HAL_DMA_IRQHandler+0x1f8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01a      	beq.n	8005c50 <HAL_DMA_IRQHandler+0x15c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a34      	ldr	r2, [pc, #208]	; (8005cf0 <HAL_DMA_IRQHandler+0x1fc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d012      	beq.n	8005c4a <HAL_DMA_IRQHandler+0x156>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a32      	ldr	r2, [pc, #200]	; (8005cf4 <HAL_DMA_IRQHandler+0x200>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00a      	beq.n	8005c44 <HAL_DMA_IRQHandler+0x150>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a31      	ldr	r2, [pc, #196]	; (8005cf8 <HAL_DMA_IRQHandler+0x204>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d102      	bne.n	8005c3e <HAL_DMA_IRQHandler+0x14a>
 8005c38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005c3c:	e00e      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c42:	e00b      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c48:	e008      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c4e:	e005      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c54:	e002      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c56:	2320      	movs	r3, #32
 8005c58:	e000      	b.n	8005c5c <HAL_DMA_IRQHandler+0x168>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <HAL_DMA_IRQHandler+0x208>)
 8005c5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d034      	beq.n	8005cda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005c78:	e02f      	b.n	8005cda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2208      	movs	r2, #8
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d028      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x1e8>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0308 	and.w	r3, r3, #8
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d023      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 020e 	bic.w	r2, r2, #14
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cac:	2101      	movs	r1, #1
 8005cae:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
    }
  }
  return;
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
}
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40020008 	.word	0x40020008
 8005ce8:	4002001c 	.word	0x4002001c
 8005cec:	40020030 	.word	0x40020030
 8005cf0:	40020044 	.word	0x40020044
 8005cf4:	40020058 	.word	0x40020058
 8005cf8:	4002006c 	.word	0x4002006c
 8005cfc:	40020000 	.word	0x40020000

08005d00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f202 	lsl.w	r2, r1, r2
 8005d1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b10      	cmp	r3, #16
 8005d2c:	d108      	bne.n	8005d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005d3e:	e007      	b.n	8005d50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	60da      	str	r2, [r3, #12]
}
 8005d50:	bf00      	nop
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b08b      	sub	sp, #44	; 0x2c
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d6e:	e169      	b.n	8006044 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005d70:	2201      	movs	r2, #1
 8005d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d74:	fa02 f303 	lsl.w	r3, r2, r3
 8005d78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	f040 8158 	bne.w	800603e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	4a9a      	ldr	r2, [pc, #616]	; (8005ffc <HAL_GPIO_Init+0x2a0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d05e      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
 8005d98:	4a98      	ldr	r2, [pc, #608]	; (8005ffc <HAL_GPIO_Init+0x2a0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d875      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005d9e:	4a98      	ldr	r2, [pc, #608]	; (8006000 <HAL_GPIO_Init+0x2a4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d058      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
 8005da4:	4a96      	ldr	r2, [pc, #600]	; (8006000 <HAL_GPIO_Init+0x2a4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d86f      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005daa:	4a96      	ldr	r2, [pc, #600]	; (8006004 <HAL_GPIO_Init+0x2a8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d052      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
 8005db0:	4a94      	ldr	r2, [pc, #592]	; (8006004 <HAL_GPIO_Init+0x2a8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d869      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005db6:	4a94      	ldr	r2, [pc, #592]	; (8006008 <HAL_GPIO_Init+0x2ac>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d04c      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
 8005dbc:	4a92      	ldr	r2, [pc, #584]	; (8006008 <HAL_GPIO_Init+0x2ac>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d863      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005dc2:	4a92      	ldr	r2, [pc, #584]	; (800600c <HAL_GPIO_Init+0x2b0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d046      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
 8005dc8:	4a90      	ldr	r2, [pc, #576]	; (800600c <HAL_GPIO_Init+0x2b0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d85d      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005dce:	2b12      	cmp	r3, #18
 8005dd0:	d82a      	bhi.n	8005e28 <HAL_GPIO_Init+0xcc>
 8005dd2:	2b12      	cmp	r3, #18
 8005dd4:	d859      	bhi.n	8005e8a <HAL_GPIO_Init+0x12e>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_GPIO_Init+0x80>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e57 	.word	0x08005e57
 8005de0:	08005e31 	.word	0x08005e31
 8005de4:	08005e43 	.word	0x08005e43
 8005de8:	08005e85 	.word	0x08005e85
 8005dec:	08005e8b 	.word	0x08005e8b
 8005df0:	08005e8b 	.word	0x08005e8b
 8005df4:	08005e8b 	.word	0x08005e8b
 8005df8:	08005e8b 	.word	0x08005e8b
 8005dfc:	08005e8b 	.word	0x08005e8b
 8005e00:	08005e8b 	.word	0x08005e8b
 8005e04:	08005e8b 	.word	0x08005e8b
 8005e08:	08005e8b 	.word	0x08005e8b
 8005e0c:	08005e8b 	.word	0x08005e8b
 8005e10:	08005e8b 	.word	0x08005e8b
 8005e14:	08005e8b 	.word	0x08005e8b
 8005e18:	08005e8b 	.word	0x08005e8b
 8005e1c:	08005e8b 	.word	0x08005e8b
 8005e20:	08005e39 	.word	0x08005e39
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	4a79      	ldr	r2, [pc, #484]	; (8006010 <HAL_GPIO_Init+0x2b4>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005e2e:	e02c      	b.n	8005e8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	623b      	str	r3, [r7, #32]
          break;
 8005e36:	e029      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	623b      	str	r3, [r7, #32]
          break;
 8005e40:	e024      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	3308      	adds	r3, #8
 8005e48:	623b      	str	r3, [r7, #32]
          break;
 8005e4a:	e01f      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	330c      	adds	r3, #12
 8005e52:	623b      	str	r3, [r7, #32]
          break;
 8005e54:	e01a      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005e5e:	2304      	movs	r3, #4
 8005e60:	623b      	str	r3, [r7, #32]
          break;
 8005e62:	e013      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d105      	bne.n	8005e78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e6c:	2308      	movs	r3, #8
 8005e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	611a      	str	r2, [r3, #16]
          break;
 8005e76:	e009      	b.n	8005e8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005e78:	2308      	movs	r3, #8
 8005e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	615a      	str	r2, [r3, #20]
          break;
 8005e82:	e003      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005e84:	2300      	movs	r3, #0
 8005e86:	623b      	str	r3, [r7, #32]
          break;
 8005e88:	e000      	b.n	8005e8c <HAL_GPIO_Init+0x130>
          break;
 8005e8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2bff      	cmp	r3, #255	; 0xff
 8005e90:	d801      	bhi.n	8005e96 <HAL_GPIO_Init+0x13a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	e001      	b.n	8005e9a <HAL_GPIO_Init+0x13e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	2bff      	cmp	r3, #255	; 0xff
 8005ea0:	d802      	bhi.n	8005ea8 <HAL_GPIO_Init+0x14c>
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	e002      	b.n	8005eae <HAL_GPIO_Init+0x152>
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3b08      	subs	r3, #8
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	210f      	movs	r1, #15
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	401a      	ands	r2, r3
 8005ec0:	6a39      	ldr	r1, [r7, #32]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80b1 	beq.w	800603e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005edc:	4b4d      	ldr	r3, [pc, #308]	; (8006014 <HAL_GPIO_Init+0x2b8>)
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	4a4c      	ldr	r2, [pc, #304]	; (8006014 <HAL_GPIO_Init+0x2b8>)
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	6193      	str	r3, [r2, #24]
 8005ee8:	4b4a      	ldr	r3, [pc, #296]	; (8006014 <HAL_GPIO_Init+0x2b8>)
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	60bb      	str	r3, [r7, #8]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005ef4:	4a48      	ldr	r2, [pc, #288]	; (8006018 <HAL_GPIO_Init+0x2bc>)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	089b      	lsrs	r3, r3, #2
 8005efa:	3302      	adds	r3, #2
 8005efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	220f      	movs	r2, #15
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	43db      	mvns	r3, r3
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4013      	ands	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a40      	ldr	r2, [pc, #256]	; (800601c <HAL_GPIO_Init+0x2c0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d013      	beq.n	8005f48 <HAL_GPIO_Init+0x1ec>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a3f      	ldr	r2, [pc, #252]	; (8006020 <HAL_GPIO_Init+0x2c4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00d      	beq.n	8005f44 <HAL_GPIO_Init+0x1e8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a3e      	ldr	r2, [pc, #248]	; (8006024 <HAL_GPIO_Init+0x2c8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d007      	beq.n	8005f40 <HAL_GPIO_Init+0x1e4>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <HAL_GPIO_Init+0x2cc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d101      	bne.n	8005f3c <HAL_GPIO_Init+0x1e0>
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e006      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	e004      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e002      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f44:	2301      	movs	r3, #1
 8005f46:	e000      	b.n	8005f4a <HAL_GPIO_Init+0x1ee>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	f002 0203 	and.w	r2, r2, #3
 8005f50:	0092      	lsls	r2, r2, #2
 8005f52:	4093      	lsls	r3, r2
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005f5a:	492f      	ldr	r1, [pc, #188]	; (8006018 <HAL_GPIO_Init+0x2bc>)
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	089b      	lsrs	r3, r3, #2
 8005f60:	3302      	adds	r3, #2
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	492c      	ldr	r1, [pc, #176]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]
 8005f80:	e006      	b.n	8005f90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	43db      	mvns	r3, r3
 8005f8a:	4928      	ldr	r1, [pc, #160]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d006      	beq.n	8005faa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005f9c:	4b23      	ldr	r3, [pc, #140]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	4922      	ldr	r1, [pc, #136]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60cb      	str	r3, [r1, #12]
 8005fa8:	e006      	b.n	8005fb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005faa:	4b20      	ldr	r3, [pc, #128]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	491e      	ldr	r1, [pc, #120]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	4918      	ldr	r1, [pc, #96]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	604b      	str	r3, [r1, #4]
 8005fd0:	e006      	b.n	8005fe0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005fd2:	4b16      	ldr	r3, [pc, #88]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	4914      	ldr	r1, [pc, #80]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d021      	beq.n	8006030 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005fec:	4b0f      	ldr	r3, [pc, #60]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	490e      	ldr	r1, [pc, #56]	; (800602c <HAL_GPIO_Init+0x2d0>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	e021      	b.n	800603e <HAL_GPIO_Init+0x2e2>
 8005ffa:	bf00      	nop
 8005ffc:	10320000 	.word	0x10320000
 8006000:	10310000 	.word	0x10310000
 8006004:	10220000 	.word	0x10220000
 8006008:	10210000 	.word	0x10210000
 800600c:	10120000 	.word	0x10120000
 8006010:	10110000 	.word	0x10110000
 8006014:	40021000 	.word	0x40021000
 8006018:	40010000 	.word	0x40010000
 800601c:	40010800 	.word	0x40010800
 8006020:	40010c00 	.word	0x40010c00
 8006024:	40011000 	.word	0x40011000
 8006028:	40011400 	.word	0x40011400
 800602c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <HAL_GPIO_Init+0x304>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	43db      	mvns	r3, r3
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <HAL_GPIO_Init+0x304>)
 800603a:	4013      	ands	r3, r2
 800603c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	3301      	adds	r3, #1
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	f47f ae8e 	bne.w	8005d70 <HAL_GPIO_Init+0x14>
  }
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	372c      	adds	r7, #44	; 0x2c
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	40010400 	.word	0x40010400

08006064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006064:	b480      	push	{r7}
 8006066:	b089      	sub	sp, #36	; 0x24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006072:	e09a      	b.n	80061aa <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006074:	2201      	movs	r2, #1
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 808d 	beq.w	80061a4 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800608a:	4a4e      	ldr	r2, [pc, #312]	; (80061c4 <HAL_GPIO_DeInit+0x160>)
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	3302      	adds	r3, #2
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006096:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	220f      	movs	r2, #15
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4013      	ands	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a46      	ldr	r2, [pc, #280]	; (80061c8 <HAL_GPIO_DeInit+0x164>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <HAL_GPIO_DeInit+0x78>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a45      	ldr	r2, [pc, #276]	; (80061cc <HAL_GPIO_DeInit+0x168>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00d      	beq.n	80060d8 <HAL_GPIO_DeInit+0x74>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a44      	ldr	r2, [pc, #272]	; (80061d0 <HAL_GPIO_DeInit+0x16c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <HAL_GPIO_DeInit+0x70>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a43      	ldr	r2, [pc, #268]	; (80061d4 <HAL_GPIO_DeInit+0x170>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d101      	bne.n	80060d0 <HAL_GPIO_DeInit+0x6c>
 80060cc:	2303      	movs	r3, #3
 80060ce:	e006      	b.n	80060de <HAL_GPIO_DeInit+0x7a>
 80060d0:	2304      	movs	r3, #4
 80060d2:	e004      	b.n	80060de <HAL_GPIO_DeInit+0x7a>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_DeInit+0x7a>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_GPIO_DeInit+0x7a>
 80060dc:	2300      	movs	r3, #0
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	f002 0203 	and.w	r2, r2, #3
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	4093      	lsls	r3, r2
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d132      	bne.n	8006154 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80060ee:	4b3a      	ldr	r3, [pc, #232]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	43db      	mvns	r3, r3
 80060f6:	4938      	ldr	r1, [pc, #224]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80060fc:	4b36      	ldr	r3, [pc, #216]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	43db      	mvns	r3, r3
 8006104:	4934      	ldr	r1, [pc, #208]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 8006106:	4013      	ands	r3, r2
 8006108:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800610a:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	43db      	mvns	r3, r3
 8006112:	4931      	ldr	r1, [pc, #196]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 8006114:	4013      	ands	r3, r2
 8006116:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006118:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	43db      	mvns	r3, r3
 8006120:	492d      	ldr	r1, [pc, #180]	; (80061d8 <HAL_GPIO_DeInit+0x174>)
 8006122:	4013      	ands	r3, r2
 8006124:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	220f      	movs	r2, #15
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_GPIO_DeInit+0x160>)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	43da      	mvns	r2, r3
 8006146:	481f      	ldr	r0, [pc, #124]	; (80061c4 <HAL_GPIO_DeInit+0x160>)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	089b      	lsrs	r3, r3, #2
 800614c:	400a      	ands	r2, r1
 800614e:	3302      	adds	r3, #2
 8006150:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2bff      	cmp	r3, #255	; 0xff
 8006158:	d801      	bhi.n	800615e <HAL_GPIO_DeInit+0xfa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	e001      	b.n	8006162 <HAL_GPIO_DeInit+0xfe>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3304      	adds	r3, #4
 8006162:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	2bff      	cmp	r3, #255	; 0xff
 8006168:	d802      	bhi.n	8006170 <HAL_GPIO_DeInit+0x10c>
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	e002      	b.n	8006176 <HAL_GPIO_DeInit+0x112>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	3b08      	subs	r3, #8
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	210f      	movs	r1, #15
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	fa01 f303 	lsl.w	r3, r1, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	401a      	ands	r2, r3
 8006188:	2104      	movs	r1, #4
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	fa22 f303 	lsr.w	r3, r2, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f47f af5e 	bne.w	8006074 <HAL_GPIO_DeInit+0x10>
  }
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	3724      	adds	r7, #36	; 0x24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40010800 	.word	0x40010800
 80061cc:	40010c00 	.word	0x40010c00
 80061d0:	40011000 	.word	0x40011000
 80061d4:	40011400 	.word	0x40011400
 80061d8:	40010400 	.word	0x40010400

080061dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	887b      	ldrh	r3, [r7, #2]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e001      	b.n	80061fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	bc80      	pop	{r7}
 8006208:	4770      	bx	lr

0800620a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	807b      	strh	r3, [r7, #2]
 8006216:	4613      	mov	r3, r2
 8006218:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800621a:	787b      	ldrb	r3, [r7, #1]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006220:	887a      	ldrh	r2, [r7, #2]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006226:	e003      	b.n	8006230 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006228:	887b      	ldrh	r3, [r7, #2]
 800622a:	041a      	lsls	r2, r3, #16
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	611a      	str	r2, [r3, #16]
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
	...

0800623c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e12b      	b.n	80064a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fd f830 	bl	80032c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2224      	movs	r2, #36	; 0x24
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0201 	bic.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800628e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800629e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062a0:	f001 f97c 	bl	800759c <HAL_RCC_GetPCLK1Freq>
 80062a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4a81      	ldr	r2, [pc, #516]	; (80064b0 <HAL_I2C_Init+0x274>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d807      	bhi.n	80062c0 <HAL_I2C_Init+0x84>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a80      	ldr	r2, [pc, #512]	; (80064b4 <HAL_I2C_Init+0x278>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	bf94      	ite	ls
 80062b8:	2301      	movls	r3, #1
 80062ba:	2300      	movhi	r3, #0
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	e006      	b.n	80062ce <HAL_I2C_Init+0x92>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4a7d      	ldr	r2, [pc, #500]	; (80064b8 <HAL_I2C_Init+0x27c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	bf94      	ite	ls
 80062c8:	2301      	movls	r3, #1
 80062ca:	2300      	movhi	r3, #0
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e0e7      	b.n	80064a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a78      	ldr	r2, [pc, #480]	; (80064bc <HAL_I2C_Init+0x280>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	0c9b      	lsrs	r3, r3, #18
 80062e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	4a6a      	ldr	r2, [pc, #424]	; (80064b0 <HAL_I2C_Init+0x274>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d802      	bhi.n	8006310 <HAL_I2C_Init+0xd4>
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	3301      	adds	r3, #1
 800630e:	e009      	b.n	8006324 <HAL_I2C_Init+0xe8>
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	4a69      	ldr	r2, [pc, #420]	; (80064c0 <HAL_I2C_Init+0x284>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	099b      	lsrs	r3, r3, #6
 8006322:	3301      	adds	r3, #1
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	430b      	orrs	r3, r1
 800632a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	495c      	ldr	r1, [pc, #368]	; (80064b0 <HAL_I2C_Init+0x274>)
 8006340:	428b      	cmp	r3, r1
 8006342:	d819      	bhi.n	8006378 <HAL_I2C_Init+0x13c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	1e59      	subs	r1, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006352:	1c59      	adds	r1, r3, #1
 8006354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006358:	400b      	ands	r3, r1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <HAL_I2C_Init+0x138>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1e59      	subs	r1, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	fbb1 f3f3 	udiv	r3, r1, r3
 800636c:	3301      	adds	r3, #1
 800636e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006372:	e051      	b.n	8006418 <HAL_I2C_Init+0x1dc>
 8006374:	2304      	movs	r3, #4
 8006376:	e04f      	b.n	8006418 <HAL_I2C_Init+0x1dc>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d111      	bne.n	80063a4 <HAL_I2C_Init+0x168>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	1e58      	subs	r0, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6859      	ldr	r1, [r3, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	440b      	add	r3, r1
 800638e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006392:	3301      	adds	r3, #1
 8006394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	e012      	b.n	80063ca <HAL_I2C_Init+0x18e>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	1e58      	subs	r0, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	440b      	add	r3, r1
 80063b2:	0099      	lsls	r1, r3, #2
 80063b4:	440b      	add	r3, r1
 80063b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ba:	3301      	adds	r3, #1
 80063bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf0c      	ite	eq
 80063c4:	2301      	moveq	r3, #1
 80063c6:	2300      	movne	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <HAL_I2C_Init+0x196>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e022      	b.n	8006418 <HAL_I2C_Init+0x1dc>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10e      	bne.n	80063f8 <HAL_I2C_Init+0x1bc>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	1e58      	subs	r0, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6859      	ldr	r1, [r3, #4]
 80063e2:	460b      	mov	r3, r1
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	440b      	add	r3, r1
 80063e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ec:	3301      	adds	r3, #1
 80063ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	e00f      	b.n	8006418 <HAL_I2C_Init+0x1dc>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	1e58      	subs	r0, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6859      	ldr	r1, [r3, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	0099      	lsls	r1, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	fbb0 f3f3 	udiv	r3, r0, r3
 800640e:	3301      	adds	r3, #1
 8006410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	6809      	ldr	r1, [r1, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6911      	ldr	r1, [r2, #16]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	68d2      	ldr	r2, [r2, #12]
 8006452:	4311      	orrs	r1, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	430b      	orrs	r3, r1
 800645a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	430a      	orrs	r2, r1
 8006476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	000186a0 	.word	0x000186a0
 80064b4:	001e847f 	.word	0x001e847f
 80064b8:	003d08ff 	.word	0x003d08ff
 80064bc:	431bde83 	.word	0x431bde83
 80064c0:	10624dd3 	.word	0x10624dd3

080064c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	817b      	strh	r3, [r7, #10]
 80064d6:	460b      	mov	r3, r1
 80064d8:	813b      	strh	r3, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064de:	f7fe fc3d 	bl	8004d5c <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	f040 80d9 	bne.w	80066a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	9300      	str	r3, [sp, #0]
 80064f6:	2319      	movs	r3, #25
 80064f8:	2201      	movs	r2, #1
 80064fa:	496d      	ldr	r1, [pc, #436]	; (80066b0 <HAL_I2C_Mem_Write+0x1ec>)
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f000 fa9f 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d001      	beq.n	800650c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
 800650a:	e0cc      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_I2C_Mem_Write+0x56>
 8006516:	2302      	movs	r3, #2
 8006518:	e0c5      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b01      	cmp	r3, #1
 800652e:	d007      	beq.n	8006540 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f042 0201 	orr.w	r2, r2, #1
 800653e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800654e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2221      	movs	r2, #33	; 0x21
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2240      	movs	r2, #64	; 0x40
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a3a      	ldr	r2, [r7, #32]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a4d      	ldr	r2, [pc, #308]	; (80066b4 <HAL_I2C_Mem_Write+0x1f0>)
 8006580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006582:	88f8      	ldrh	r0, [r7, #6]
 8006584:	893a      	ldrh	r2, [r7, #8]
 8006586:	8979      	ldrh	r1, [r7, #10]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	4603      	mov	r3, r0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f9be 	bl	8006914 <I2C_RequestMemoryWrite>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d052      	beq.n	8006644 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e081      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fb64 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00d      	beq.n	80065ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d107      	bne.n	80065ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e06b      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11b      	bne.n	8006644 <HAL_I2C_Mem_Write+0x180>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1aa      	bne.n	80065a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fb57 	bl	8006d04 <I2C_WaitOnBTFFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	2b04      	cmp	r3, #4
 8006662:	d107      	bne.n	8006674 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006672:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e016      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	00100002 	.word	0x00100002
 80066b4:	ffff0000 	.word	0xffff0000

080066b8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08a      	sub	sp, #40	; 0x28
 80066bc:	af02      	add	r7, sp, #8
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	460b      	mov	r3, r1
 80066c6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80066c8:	f7fe fb48 	bl	8004d5c <HAL_GetTick>
 80066cc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b20      	cmp	r3, #32
 80066dc:	f040 8111 	bne.w	8006902 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2319      	movs	r3, #25
 80066e6:	2201      	movs	r2, #1
 80066e8:	4988      	ldr	r1, [pc, #544]	; (800690c <HAL_I2C_IsDeviceReady+0x254>)
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f9a8 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80066f6:	2302      	movs	r3, #2
 80066f8:	e104      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_I2C_IsDeviceReady+0x50>
 8006704:	2302      	movs	r3, #2
 8006706:	e0fd      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b01      	cmp	r3, #1
 800671c:	d007      	beq.n	800672e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800673c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2224      	movs	r2, #36	; 0x24
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a70      	ldr	r2, [pc, #448]	; (8006910 <HAL_I2C_IsDeviceReady+0x258>)
 8006750:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006760:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2200      	movs	r2, #0
 800676a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f966 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006788:	d103      	bne.n	8006792 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006790:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e0b6      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006796:	897b      	ldrh	r3, [r7, #10]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067a4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80067a6:	f7fe fad9 	bl	8004d5c <HAL_GetTick>
 80067aa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	bf0c      	ite	eq
 80067ba:	2301      	moveq	r3, #1
 80067bc:	2300      	movne	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d0:	bf0c      	ite	eq
 80067d2:	2301      	moveq	r3, #1
 80067d4:	2300      	movne	r3, #0
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067da:	e025      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067dc:	f7fe fabe 	bl	8004d5c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d302      	bcc.n	80067f2 <HAL_I2C_IsDeviceReady+0x13a>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	22a0      	movs	r2, #160	; 0xa0
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	bf0c      	ite	eq
 8006808:	2301      	moveq	r3, #1
 800680a:	2300      	movne	r3, #0
 800680c:	b2db      	uxtb	r3, r3
 800680e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2ba0      	cmp	r3, #160	; 0xa0
 8006832:	d005      	beq.n	8006840 <HAL_I2C_IsDeviceReady+0x188>
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_I2C_IsDeviceReady+0x188>
 800683a:	7dbb      	ldrb	r3, [r7, #22]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0cd      	beq.n	80067dc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d129      	bne.n	80068aa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006864:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006866:	2300      	movs	r3, #0
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	613b      	str	r3, [r7, #16]
 800687a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2319      	movs	r3, #25
 8006882:	2201      	movs	r2, #1
 8006884:	4921      	ldr	r1, [pc, #132]	; (800690c <HAL_I2C_IsDeviceReady+0x254>)
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f8da 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e036      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e02c      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068c2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	2319      	movs	r3, #25
 80068ca:	2201      	movs	r2, #1
 80068cc:	490f      	ldr	r1, [pc, #60]	; (800690c <HAL_I2C_IsDeviceReady+0x254>)
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f8b6 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e012      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	3301      	adds	r3, #1
 80068e2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	f4ff af32 	bcc.w	8006752 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006902:	2302      	movs	r3, #2
  }
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	00100002 	.word	0x00100002
 8006910:	ffff0000 	.word	0xffff0000

08006914 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	461a      	mov	r2, r3
 8006922:	4603      	mov	r3, r0
 8006924:	817b      	strh	r3, [r7, #10]
 8006926:	460b      	mov	r3, r1
 8006928:	813b      	strh	r3, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800693c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	2200      	movs	r2, #0
 8006946:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f878 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006964:	d103      	bne.n	800696e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e05f      	b.n	8006a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006972:	897b      	ldrh	r3, [r7, #10]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	6a3a      	ldr	r2, [r7, #32]
 8006986:	492d      	ldr	r1, [pc, #180]	; (8006a3c <I2C_RequestMemoryWrite+0x128>)
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 f8d3 	bl	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e04c      	b.n	8006a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b0:	6a39      	ldr	r1, [r7, #32]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f95e 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d107      	bne.n	80069d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e02b      	b.n	8006a32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d105      	bne.n	80069ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069e0:	893b      	ldrh	r3, [r7, #8]
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	611a      	str	r2, [r3, #16]
 80069ea:	e021      	b.n	8006a30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80069ec:	893b      	ldrh	r3, [r7, #8]
 80069ee:	0a1b      	lsrs	r3, r3, #8
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fc:	6a39      	ldr	r1, [r7, #32]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f938 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d107      	bne.n	8006a22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e005      	b.n	8006a32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a26:	893b      	ldrh	r3, [r7, #8]
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	00010002 	.word	0x00010002

08006a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a50:	e048      	b.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d044      	beq.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5a:	f7fe f97f 	bl	8004d5c <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d302      	bcc.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d139      	bne.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10d      	bne.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	e00c      	b.n	8006ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	43da      	mvns	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d116      	bne.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad0:	f043 0220 	orr.w	r2, r3, #32
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e023      	b.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10d      	bne.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	43da      	mvns	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	e00c      	b.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	43da      	mvns	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d093      	beq.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b42:	e071      	b.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d123      	bne.n	8006b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b88:	f043 0204 	orr.w	r2, r3, #4
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e067      	b.n	8006c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d041      	beq.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba4:	f7fe f8da 	bl	8004d5c <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d136      	bne.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d10c      	bne.n	8006bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e00b      	b.n	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	43da      	mvns	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	f043 0220 	orr.w	r2, r3, #32
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e021      	b.n	8006c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10c      	bne.n	8006c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	e00b      	b.n	8006c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	43da      	mvns	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bf14      	ite	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	2300      	moveq	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f af6d 	bne.w	8006b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c80:	e034      	b.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f886 	bl	8006d94 <I2C_IsAcknowledgeFailed>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e034      	b.n	8006cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d028      	beq.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7fe f85f 	bl	8004d5c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11d      	bne.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	2b80      	cmp	r3, #128	; 0x80
 8006cbc:	d016      	beq.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e007      	b.n	8006cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	2b80      	cmp	r3, #128	; 0x80
 8006cf8:	d1c3      	bne.n	8006c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d10:	e034      	b.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f83e 	bl	8006d94 <I2C_IsAcknowledgeFailed>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e034      	b.n	8006d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d028      	beq.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2a:	f7fe f817 	bl	8004d5c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11d      	bne.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d016      	beq.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e007      	b.n	8006d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d1c3      	bne.n	8006d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006daa:	d11b      	bne.n	8006de4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006db4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e000      	b.n	8006de6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006df4:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006df6:	2201      	movs	r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	420e0020 	.word	0x420e0020

08006e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e272      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8087 	beq.w	8006f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e28:	4b92      	ldr	r3, [pc, #584]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f003 030c 	and.w	r3, r3, #12
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d00c      	beq.n	8006e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e34:	4b8f      	ldr	r3, [pc, #572]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 030c 	and.w	r3, r3, #12
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d112      	bne.n	8006e66 <HAL_RCC_OscConfig+0x5e>
 8006e40:	4b8c      	ldr	r3, [pc, #560]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e4c:	d10b      	bne.n	8006e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e4e:	4b89      	ldr	r3, [pc, #548]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d06c      	beq.n	8006f34 <HAL_RCC_OscConfig+0x12c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d168      	bne.n	8006f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e24c      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6e:	d106      	bne.n	8006e7e <HAL_RCC_OscConfig+0x76>
 8006e70:	4b80      	ldr	r3, [pc, #512]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a7f      	ldr	r2, [pc, #508]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e02e      	b.n	8006edc <HAL_RCC_OscConfig+0xd4>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x98>
 8006e86:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a7a      	ldr	r2, [pc, #488]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	4b78      	ldr	r3, [pc, #480]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a77      	ldr	r2, [pc, #476]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e01d      	b.n	8006edc <HAL_RCC_OscConfig+0xd4>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0xbc>
 8006eaa:	4b72      	ldr	r3, [pc, #456]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a71      	ldr	r2, [pc, #452]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b6f      	ldr	r3, [pc, #444]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6e      	ldr	r2, [pc, #440]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0xd4>
 8006ec4:	4b6b      	ldr	r3, [pc, #428]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a6a      	ldr	r2, [pc, #424]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b68      	ldr	r3, [pc, #416]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a67      	ldr	r2, [pc, #412]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd ff3a 	bl	8004d5c <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fd ff36 	bl	8004d5c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	; 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e200      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b5d      	ldr	r3, [pc, #372]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0xe4>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fd ff26 	bl	8004d5c <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fd ff22 	bl	8004d5c <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	; 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1ec      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f26:	4b53      	ldr	r3, [pc, #332]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x10c>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d063      	beq.n	800700a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f42:	4b4c      	ldr	r3, [pc, #304]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f4e:	4b49      	ldr	r3, [pc, #292]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f003 030c 	and.w	r3, r3, #12
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d11c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x18c>
 8006f5a:	4b46      	ldr	r3, [pc, #280]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d116      	bne.n	8006f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	4b43      	ldr	r3, [pc, #268]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCC_OscConfig+0x176>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d001      	beq.n	8006f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e1c0      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7e:	4b3d      	ldr	r3, [pc, #244]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4939      	ldr	r1, [pc, #228]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f92:	e03a      	b.n	800700a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f9c:	4b36      	ldr	r3, [pc, #216]	; (8007078 <HAL_RCC_OscConfig+0x270>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa2:	f7fd fedb 	bl	8004d5c <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006faa:	f7fd fed7 	bl	8004d5c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1a1      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbc:	4b2d      	ldr	r3, [pc, #180]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4927      	ldr	r1, [pc, #156]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
 8006fdc:	e015      	b.n	800700a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <HAL_RCC_OscConfig+0x270>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fd feba 	bl	8004d5c <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fec:	f7fd feb6 	bl	8004d5c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e180      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d03a      	beq.n	800708c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d019      	beq.n	8007052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800701e:	4b17      	ldr	r3, [pc, #92]	; (800707c <HAL_RCC_OscConfig+0x274>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007024:	f7fd fe9a 	bl	8004d5c <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800702c:	f7fd fe96 	bl	8004d5c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e160      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <HAL_RCC_OscConfig+0x26c>)
 8007040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800704a:	2001      	movs	r0, #1
 800704c:	f000 fafe 	bl	800764c <RCC_Delay>
 8007050:	e01c      	b.n	800708c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007052:	4b0a      	ldr	r3, [pc, #40]	; (800707c <HAL_RCC_OscConfig+0x274>)
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007058:	f7fd fe80 	bl	8004d5c <HAL_GetTick>
 800705c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800705e:	e00f      	b.n	8007080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007060:	f7fd fe7c 	bl	8004d5c <HAL_GetTick>
 8007064:	4602      	mov	r2, r0
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	1ad3      	subs	r3, r2, r3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d908      	bls.n	8007080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e146      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
 8007072:	bf00      	nop
 8007074:	40021000 	.word	0x40021000
 8007078:	42420000 	.word	0x42420000
 800707c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007080:	4b92      	ldr	r3, [pc, #584]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e9      	bne.n	8007060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 80a6 	beq.w	80071e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800709a:	2300      	movs	r3, #0
 800709c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800709e:	4b8b      	ldr	r3, [pc, #556]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10d      	bne.n	80070c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070aa:	4b88      	ldr	r3, [pc, #544]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4a87      	ldr	r2, [pc, #540]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80070b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b4:	61d3      	str	r3, [r2, #28]
 80070b6:	4b85      	ldr	r3, [pc, #532]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c2:	2301      	movs	r3, #1
 80070c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c6:	4b82      	ldr	r3, [pc, #520]	; (80072d0 <HAL_RCC_OscConfig+0x4c8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d118      	bne.n	8007104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070d2:	4b7f      	ldr	r3, [pc, #508]	; (80072d0 <HAL_RCC_OscConfig+0x4c8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a7e      	ldr	r2, [pc, #504]	; (80072d0 <HAL_RCC_OscConfig+0x4c8>)
 80070d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070de:	f7fd fe3d 	bl	8004d5c <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e4:	e008      	b.n	80070f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e6:	f7fd fe39 	bl	8004d5c <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b64      	cmp	r3, #100	; 0x64
 80070f2:	d901      	bls.n	80070f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e103      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f8:	4b75      	ldr	r3, [pc, #468]	; (80072d0 <HAL_RCC_OscConfig+0x4c8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0f0      	beq.n	80070e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d106      	bne.n	800711a <HAL_RCC_OscConfig+0x312>
 800710c:	4b6f      	ldr	r3, [pc, #444]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	4a6e      	ldr	r2, [pc, #440]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007112:	f043 0301 	orr.w	r3, r3, #1
 8007116:	6213      	str	r3, [r2, #32]
 8007118:	e02d      	b.n	8007176 <HAL_RCC_OscConfig+0x36e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <HAL_RCC_OscConfig+0x334>
 8007122:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	4a69      	ldr	r2, [pc, #420]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	6213      	str	r3, [r2, #32]
 800712e:	4b67      	ldr	r3, [pc, #412]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	4a66      	ldr	r2, [pc, #408]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007134:	f023 0304 	bic.w	r3, r3, #4
 8007138:	6213      	str	r3, [r2, #32]
 800713a:	e01c      	b.n	8007176 <HAL_RCC_OscConfig+0x36e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b05      	cmp	r3, #5
 8007142:	d10c      	bne.n	800715e <HAL_RCC_OscConfig+0x356>
 8007144:	4b61      	ldr	r3, [pc, #388]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	4a60      	ldr	r2, [pc, #384]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800714a:	f043 0304 	orr.w	r3, r3, #4
 800714e:	6213      	str	r3, [r2, #32]
 8007150:	4b5e      	ldr	r3, [pc, #376]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	4a5d      	ldr	r2, [pc, #372]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	6213      	str	r3, [r2, #32]
 800715c:	e00b      	b.n	8007176 <HAL_RCC_OscConfig+0x36e>
 800715e:	4b5b      	ldr	r3, [pc, #364]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	4a5a      	ldr	r2, [pc, #360]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6213      	str	r3, [r2, #32]
 800716a:	4b58      	ldr	r3, [pc, #352]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	4a57      	ldr	r2, [pc, #348]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d015      	beq.n	80071aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800717e:	f7fd fded 	bl	8004d5c <HAL_GetTick>
 8007182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007184:	e00a      	b.n	800719c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007186:	f7fd fde9 	bl	8004d5c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f241 3288 	movw	r2, #5000	; 0x1388
 8007194:	4293      	cmp	r3, r2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e0b1      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800719c:	4b4b      	ldr	r3, [pc, #300]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0ee      	beq.n	8007186 <HAL_RCC_OscConfig+0x37e>
 80071a8:	e014      	b.n	80071d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071aa:	f7fd fdd7 	bl	8004d5c <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b0:	e00a      	b.n	80071c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b2:	f7fd fdd3 	bl	8004d5c <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e09b      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c8:	4b40      	ldr	r3, [pc, #256]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ee      	bne.n	80071b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d105      	bne.n	80071e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071da:	4b3c      	ldr	r3, [pc, #240]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	4a3b      	ldr	r2, [pc, #236]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80071e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8087 	beq.w	80072fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071f0:	4b36      	ldr	r3, [pc, #216]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f003 030c 	and.w	r3, r3, #12
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d061      	beq.n	80072c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d146      	bne.n	8007292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007204:	4b33      	ldr	r3, [pc, #204]	; (80072d4 <HAL_RCC_OscConfig+0x4cc>)
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800720a:	f7fd fda7 	bl	8004d5c <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007210:	e008      	b.n	8007224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007212:	f7fd fda3 	bl	8004d5c <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e06d      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007224:	4b29      	ldr	r3, [pc, #164]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f0      	bne.n	8007212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007238:	d108      	bne.n	800724c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800723a:	4b24      	ldr	r3, [pc, #144]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	4921      	ldr	r1, [pc, #132]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007248:	4313      	orrs	r3, r2
 800724a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800724c:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a19      	ldr	r1, [r3, #32]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	430b      	orrs	r3, r1
 800725e:	491b      	ldr	r1, [pc, #108]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007260:	4313      	orrs	r3, r2
 8007262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007264:	4b1b      	ldr	r3, [pc, #108]	; (80072d4 <HAL_RCC_OscConfig+0x4cc>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800726a:	f7fd fd77 	bl	8004d5c <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007270:	e008      	b.n	8007284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007272:	f7fd fd73 	bl	8004d5c <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d901      	bls.n	8007284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e03d      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d0f0      	beq.n	8007272 <HAL_RCC_OscConfig+0x46a>
 8007290:	e035      	b.n	80072fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <HAL_RCC_OscConfig+0x4cc>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007298:	f7fd fd60 	bl	8004d5c <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a0:	f7fd fd5c 	bl	8004d5c <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e026      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072b2:	4b06      	ldr	r3, [pc, #24]	; (80072cc <HAL_RCC_OscConfig+0x4c4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0x498>
 80072be:	e01e      	b.n	80072fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d107      	bne.n	80072d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e019      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
 80072cc:	40021000 	.word	0x40021000
 80072d0:	40007000 	.word	0x40007000
 80072d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <HAL_RCC_OscConfig+0x500>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d106      	bne.n	80072fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d001      	beq.n	80072fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40021000 	.word	0x40021000

0800730c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e0d0      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007320:	4b6a      	ldr	r3, [pc, #424]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d910      	bls.n	8007350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732e:	4b67      	ldr	r3, [pc, #412]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f023 0207 	bic.w	r2, r3, #7
 8007336:	4965      	ldr	r1, [pc, #404]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	4b63      	ldr	r3, [pc, #396]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0b8      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007368:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4a58      	ldr	r2, [pc, #352]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800736e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d005      	beq.n	800738c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007380:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	4a52      	ldr	r2, [pc, #328]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800738a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800738c:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	494d      	ldr	r1, [pc, #308]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800739a:	4313      	orrs	r3, r2
 800739c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d040      	beq.n	800742c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d107      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	4b47      	ldr	r3, [pc, #284]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d115      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e07f      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d107      	bne.n	80073da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ca:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d109      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e073      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073da:	4b3d      	ldr	r3, [pc, #244]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e06b      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073ea:	4b39      	ldr	r3, [pc, #228]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f023 0203 	bic.w	r2, r3, #3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	4936      	ldr	r1, [pc, #216]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073fc:	f7fd fcae 	bl	8004d5c <HAL_GetTick>
 8007400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007402:	e00a      	b.n	800741a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007404:	f7fd fcaa 	bl	8004d5c <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e053      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800741a:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f003 020c 	and.w	r2, r3, #12
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	429a      	cmp	r2, r3
 800742a:	d1eb      	bne.n	8007404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800742c:	4b27      	ldr	r3, [pc, #156]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d210      	bcs.n	800745c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800743a:	4b24      	ldr	r3, [pc, #144]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f023 0207 	bic.w	r2, r3, #7
 8007442:	4922      	ldr	r1, [pc, #136]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b20      	ldr	r3, [pc, #128]	; (80074cc <HAL_RCC_ClockConfig+0x1c0>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d001      	beq.n	800745c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e032      	b.n	80074c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d008      	beq.n	800747a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007468:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	4916      	ldr	r1, [pc, #88]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007476:	4313      	orrs	r3, r2
 8007478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007486:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	490e      	ldr	r1, [pc, #56]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 8007496:	4313      	orrs	r3, r2
 8007498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800749a:	f000 f821 	bl	80074e0 <HAL_RCC_GetSysClockFreq>
 800749e:	4602      	mov	r2, r0
 80074a0:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <HAL_RCC_ClockConfig+0x1c4>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	f003 030f 	and.w	r3, r3, #15
 80074aa:	490a      	ldr	r1, [pc, #40]	; (80074d4 <HAL_RCC_ClockConfig+0x1c8>)
 80074ac:	5ccb      	ldrb	r3, [r1, r3]
 80074ae:	fa22 f303 	lsr.w	r3, r2, r3
 80074b2:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <HAL_RCC_ClockConfig+0x1cc>)
 80074b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <HAL_RCC_ClockConfig+0x1d0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fc f93e 	bl	800373c <HAL_InitTick>

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40022000 	.word	0x40022000
 80074d0:	40021000 	.word	0x40021000
 80074d4:	0800e9a0 	.word	0x0800e9a0
 80074d8:	20000200 	.word	0x20000200
 80074dc:	20000204 	.word	0x20000204

080074e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	2300      	movs	r3, #0
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80074fa:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <HAL_RCC_GetSysClockFreq+0x94>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 030c 	and.w	r3, r3, #12
 8007506:	2b04      	cmp	r3, #4
 8007508:	d002      	beq.n	8007510 <HAL_RCC_GetSysClockFreq+0x30>
 800750a:	2b08      	cmp	r3, #8
 800750c:	d003      	beq.n	8007516 <HAL_RCC_GetSysClockFreq+0x36>
 800750e:	e027      	b.n	8007560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007510:	4b19      	ldr	r3, [pc, #100]	; (8007578 <HAL_RCC_GetSysClockFreq+0x98>)
 8007512:	613b      	str	r3, [r7, #16]
      break;
 8007514:	e027      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	0c9b      	lsrs	r3, r3, #18
 800751a:	f003 030f 	and.w	r3, r3, #15
 800751e:	4a17      	ldr	r2, [pc, #92]	; (800757c <HAL_RCC_GetSysClockFreq+0x9c>)
 8007520:	5cd3      	ldrb	r3, [r2, r3]
 8007522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d010      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <HAL_RCC_GetSysClockFreq+0x94>)
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	0c5b      	lsrs	r3, r3, #17
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	4a11      	ldr	r2, [pc, #68]	; (8007580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800753a:	5cd3      	ldrb	r3, [r2, r3]
 800753c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <HAL_RCC_GetSysClockFreq+0x98>)
 8007542:	fb03 f202 	mul.w	r2, r3, r2
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	fbb2 f3f3 	udiv	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	e004      	b.n	800755a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a0c      	ldr	r2, [pc, #48]	; (8007584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	613b      	str	r3, [r7, #16]
      break;
 800755e:	e002      	b.n	8007566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <HAL_RCC_GetSysClockFreq+0x98>)
 8007562:	613b      	str	r3, [r7, #16]
      break;
 8007564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007566:	693b      	ldr	r3, [r7, #16]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40021000 	.word	0x40021000
 8007578:	007a1200 	.word	0x007a1200
 800757c:	0800e9b8 	.word	0x0800e9b8
 8007580:	0800e9c8 	.word	0x0800e9c8
 8007584:	003d0900 	.word	0x003d0900

08007588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <HAL_RCC_GetHCLKFreq+0x10>)
 800758e:	681b      	ldr	r3, [r3, #0]
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr
 8007598:	20000200 	.word	0x20000200

0800759c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075a0:	f7ff fff2 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075a4:	4602      	mov	r2, r0
 80075a6:	4b05      	ldr	r3, [pc, #20]	; (80075bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b2:	5ccb      	ldrb	r3, [r1, r3]
 80075b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	40021000 	.word	0x40021000
 80075c0:	0800e9b0 	.word	0x0800e9b0

080075c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80075c8:	f7ff ffde 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075cc:	4602      	mov	r2, r0
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	0adb      	lsrs	r3, r3, #11
 80075d4:	f003 0307 	and.w	r3, r3, #7
 80075d8:	4903      	ldr	r1, [pc, #12]	; (80075e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075da:	5ccb      	ldrb	r3, [r1, r3]
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	40021000 	.word	0x40021000
 80075e8:	0800e9b0 	.word	0x0800e9b0

080075ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	220f      	movs	r2, #15
 80075fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <HAL_RCC_GetClockConfig+0x58>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007608:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <HAL_RCC_GetClockConfig+0x58>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_GetClockConfig+0x58>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007620:	4b08      	ldr	r3, [pc, #32]	; (8007644 <HAL_RCC_GetClockConfig+0x58>)
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	08db      	lsrs	r3, r3, #3
 8007626:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800762e:	4b06      	ldr	r3, [pc, #24]	; (8007648 <HAL_RCC_GetClockConfig+0x5c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0207 	and.w	r2, r3, #7
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr
 8007644:	40021000 	.word	0x40021000
 8007648:	40022000 	.word	0x40022000

0800764c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <RCC_Delay+0x34>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <RCC_Delay+0x38>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	0a5b      	lsrs	r3, r3, #9
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	fb02 f303 	mul.w	r3, r2, r3
 8007666:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007668:	bf00      	nop
  }
  while (Delay --);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	60fa      	str	r2, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1f9      	bne.n	8007668 <RCC_Delay+0x1c>
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr
 8007680:	20000200 	.word	0x20000200
 8007684:	10624dd3 	.word	0x10624dd3

08007688 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0301 	and.w	r3, r3, #1
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d07d      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076a8:	4b4f      	ldr	r3, [pc, #316]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b4:	4b4c      	ldr	r3, [pc, #304]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	4a4b      	ldr	r2, [pc, #300]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076be:	61d3      	str	r3, [r2, #28]
 80076c0:	4b49      	ldr	r3, [pc, #292]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c8:	60bb      	str	r3, [r7, #8]
 80076ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076d0:	4b46      	ldr	r3, [pc, #280]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d118      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076dc:	4b43      	ldr	r3, [pc, #268]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a42      	ldr	r2, [pc, #264]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076e8:	f7fd fb38 	bl	8004d5c <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ee:	e008      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076f0:	f7fd fb34 	bl	8004d5c <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b64      	cmp	r3, #100	; 0x64
 80076fc:	d901      	bls.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e06d      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007702:	4b3a      	ldr	r3, [pc, #232]	; (80077ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800770e:	4b36      	ldr	r3, [pc, #216]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007716:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d02e      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	429a      	cmp	r2, r3
 800772a:	d027      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800772c:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007734:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007736:	4b2e      	ldr	r3, [pc, #184]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800773c:	4b2c      	ldr	r3, [pc, #176]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007742:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d014      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007752:	f7fd fb03 	bl	8004d5c <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007758:	e00a      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775a:	f7fd faff 	bl	8004d5c <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	f241 3288 	movw	r2, #5000	; 0x1388
 8007768:	4293      	cmp	r3, r2
 800776a:	d901      	bls.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e036      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007770:	4b1d      	ldr	r3, [pc, #116]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ee      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800777c:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4917      	ldr	r1, [pc, #92]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800778a:	4313      	orrs	r3, r2
 800778c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d105      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007794:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	4a13      	ldr	r2, [pc, #76]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800779a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800779e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	490b      	ldr	r1, [pc, #44]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0310 	and.w	r3, r3, #16
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077ca:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	4904      	ldr	r1, [pc, #16]	; (80077e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	40021000 	.word	0x40021000
 80077ec:	40007000 	.word	0x40007000
 80077f0:	42420440 	.word	0x42420440

080077f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]
 8007804:	2300      	movs	r3, #0
 8007806:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	2300      	movs	r3, #0
 800780e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b10      	cmp	r3, #16
 8007814:	d00a      	beq.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b10      	cmp	r3, #16
 800781a:	f200 808a 	bhi.w	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d045      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d075      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800782a:	e082      	b.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800782c:	4b46      	ldr	r3, [pc, #280]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007832:	4b45      	ldr	r3, [pc, #276]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d07b      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	0c9b      	lsrs	r3, r3, #18
 8007842:	f003 030f 	and.w	r3, r3, #15
 8007846:	4a41      	ldr	r2, [pc, #260]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007848:	5cd3      	ldrb	r3, [r2, r3]
 800784a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d015      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007856:	4b3c      	ldr	r3, [pc, #240]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	0c5b      	lsrs	r3, r3, #17
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	4a3b      	ldr	r2, [pc, #236]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007862:	5cd3      	ldrb	r3, [r2, r3]
 8007864:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00d      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007870:	4a38      	ldr	r2, [pc, #224]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	fbb2 f2f3 	udiv	r2, r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	fb02 f303 	mul.w	r3, r2, r3
 800787e:	61fb      	str	r3, [r7, #28]
 8007880:	e004      	b.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4a34      	ldr	r2, [pc, #208]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007886:	fb02 f303 	mul.w	r3, r2, r3
 800788a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800788c:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007898:	d102      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	61bb      	str	r3, [r7, #24]
      break;
 800789e:	e04a      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4a2d      	ldr	r2, [pc, #180]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80078a6:	fba2 2303 	umull	r2, r3, r2, r3
 80078aa:	085b      	lsrs	r3, r3, #1
 80078ac:	61bb      	str	r3, [r7, #24]
      break;
 80078ae:	e042      	b.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80078b0:	4b25      	ldr	r3, [pc, #148]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078c0:	d108      	bne.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80078cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078d0:	61bb      	str	r3, [r7, #24]
 80078d2:	e01f      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078de:	d109      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80078e0:	4b19      	ldr	r3, [pc, #100]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80078ec:	f649 4340 	movw	r3, #40000	; 0x9c40
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e00f      	b.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078fe:	d11c      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007900:	4b11      	ldr	r3, [pc, #68]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d016      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800790c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007910:	61bb      	str	r3, [r7, #24]
      break;
 8007912:	e012      	b.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007914:	e011      	b.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007916:	f7ff fe55 	bl	80075c4 <HAL_RCC_GetPCLK2Freq>
 800791a:	4602      	mov	r2, r0
 800791c:	4b0a      	ldr	r3, [pc, #40]	; (8007948 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	0b9b      	lsrs	r3, r3, #14
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	3301      	adds	r3, #1
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	fbb2 f3f3 	udiv	r3, r2, r3
 800792e:	61bb      	str	r3, [r7, #24]
      break;
 8007930:	e004      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800793a:	bf00      	nop
    }
  }
  return (frequency);
 800793c:	69bb      	ldr	r3, [r7, #24]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000
 800794c:	0800e9cc 	.word	0x0800e9cc
 8007950:	0800e9dc 	.word	0x0800e9dc
 8007954:	007a1200 	.word	0x007a1200
 8007958:	003d0900 	.word	0x003d0900
 800795c:	aaaaaaab 	.word	0xaaaaaaab

08007960 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e07a      	b.n	8007a6c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7c5b      	ldrb	r3, [r3, #17]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	d105      	bne.n	800798c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fb fcee 	bl	8003368 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9be 	bl	8007d14 <HAL_RTC_WaitForSynchro>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d004      	beq.n	80079a8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2204      	movs	r2, #4
 80079a2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e061      	b.n	8007a6c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa77 	bl	8007e9c <RTC_EnterInitMode>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d004      	beq.n	80079be <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2204      	movs	r2, #4
 80079b8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e056      	b.n	8007a6c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0207 	bic.w	r2, r2, #7
 80079cc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80079d6:	4b27      	ldr	r3, [pc, #156]	; (8007a74 <HAL_RTC_Init+0x114>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	4a26      	ldr	r2, [pc, #152]	; (8007a74 <HAL_RTC_Init+0x114>)
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <HAL_RTC_Init+0x114>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	4921      	ldr	r1, [pc, #132]	; (8007a74 <HAL_RTC_Init+0x114>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fc:	d003      	beq.n	8007a06 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	e00e      	b.n	8007a24 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007a06:	2001      	movs	r0, #1
 8007a08:	f7ff fef4 	bl	80077f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a0c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2204      	movs	r2, #4
 8007a18:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e026      	b.n	8007a6c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0c1a      	lsrs	r2, r3, #16
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f002 020f 	and.w	r2, r2, #15
 8007a30:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	b292      	uxth	r2, r2
 8007a3a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa55 	bl	8007eec <RTC_ExitInitMode>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2204      	movs	r2, #4
 8007a4c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e00c      	b.n	8007a6c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
  }
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	40006c00 	.word	0x40006c00

08007a78 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a78:	b590      	push	{r4, r7, lr}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	2300      	movs	r3, #0
 8007a8a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <HAL_RTC_SetTime+0x20>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e080      	b.n	8007b9e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	7c1b      	ldrb	r3, [r3, #16]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RTC_SetTime+0x30>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e07a      	b.n	8007b9e <HAL_RTC_SetTime+0x126>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d113      	bne.n	8007ae2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007ac4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	4619      	mov	r1, r3
 8007ace:	460b      	mov	r3, r1
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007ad6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007adc:	4413      	add	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e01e      	b.n	8007b20 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fa28 	bl	8007f3c <RTC_Bcd2ToByte>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007af4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 fa1d 	bl	8007f3c <RTC_Bcd2ToByte>
 8007b02:	4603      	mov	r3, r0
 8007b04:	461a      	mov	r2, r3
 8007b06:	4613      	mov	r3, r2
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b0e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 fa11 	bl	8007f3c <RTC_Bcd2ToByte>
 8007b1a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007b1c:	4423      	add	r3, r4
 8007b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007b20:	6979      	ldr	r1, [r7, #20]
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f953 	bl	8007dce <RTC_WriteTimeCounter>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2204      	movs	r2, #4
 8007b32:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e02f      	b.n	8007b9e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0205 	bic.w	r2, r2, #5
 8007b4c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f000 f964 	bl	8007e1c <RTC_ReadAlarmCounter>
 8007b54:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5c:	d018      	beq.n	8007b90 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d214      	bcs.n	8007b90 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007b6c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007b70:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007b72:	6939      	ldr	r1, [r7, #16]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f96a 	bl	8007e4e <RTC_WriteAlarmCounter>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2204      	movs	r2, #4
 8007b84:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e006      	b.n	8007b9e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd90      	pop	{r4, r7, pc}
	...

08007ba8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_RTC_SetDate+0x24>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e097      	b.n	8007d00 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	7c1b      	ldrb	r3, [r3, #16]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_RTC_SetDate+0x34>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e091      	b.n	8007d00 <HAL_RTC_SetDate+0x158>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2202      	movs	r2, #2
 8007be6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10c      	bne.n	8007c08 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	78da      	ldrb	r2, [r3, #3]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	785a      	ldrb	r2, [r3, #1]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	789a      	ldrb	r2, [r3, #2]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	739a      	strb	r2, [r3, #14]
 8007c06:	e01a      	b.n	8007c3e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	78db      	ldrb	r3, [r3, #3]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f000 f995 	bl	8007f3c <RTC_Bcd2ToByte>
 8007c12:	4603      	mov	r3, r0
 8007c14:	461a      	mov	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f98c 	bl	8007f3c <RTC_Bcd2ToByte>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	789b      	ldrb	r3, [r3, #2]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 f983 	bl	8007f3c <RTC_Bcd2ToByte>
 8007c36:	4603      	mov	r3, r0
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	7bdb      	ldrb	r3, [r3, #15]
 8007c42:	4618      	mov	r0, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	7b59      	ldrb	r1, [r3, #13]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	7b9b      	ldrb	r3, [r3, #14]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f000 f993 	bl	8007f78 <RTC_WeekDayNum>
 8007c52:	4603      	mov	r3, r0
 8007c54:	461a      	mov	r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	7b1a      	ldrb	r2, [r3, #12]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 f883 	bl	8007d6e <RTC_ReadTimeCounter>
 8007c68:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
 8007c6c:	4a26      	ldr	r2, [pc, #152]	; (8007d08 <HAL_RTC_SetDate+0x160>)
 8007c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c72:	0adb      	lsrs	r3, r3, #11
 8007c74:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b18      	cmp	r3, #24
 8007c7a:	d93a      	bls.n	8007cf2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	4a23      	ldr	r2, [pc, #140]	; (8007d0c <HAL_RTC_SetDate+0x164>)
 8007c80:	fba2 2303 	umull	r2, r3, r2, r3
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	4a22      	ldr	r2, [pc, #136]	; (8007d10 <HAL_RTC_SetDate+0x168>)
 8007c88:	fb02 f303 	mul.w	r3, r2, r3
 8007c8c:	69fa      	ldr	r2, [r7, #28]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 f89a 	bl	8007dce <RTC_WriteTimeCounter>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e027      	b.n	8007d00 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f8b3 	bl	8007e1c <RTC_ReadAlarmCounter>
 8007cb6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d018      	beq.n	8007cf2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d214      	bcs.n	8007cf2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007cce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007cd2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f8b9 	bl	8007e4e <RTC_WriteAlarmCounter>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e006      	b.n	8007d00 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	91a2b3c5 	.word	0x91a2b3c5
 8007d0c:	aaaaaaab 	.word	0xaaaaaaab
 8007d10:	00015180 	.word	0x00015180

08007d14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e01d      	b.n	8007d66 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0208 	bic.w	r2, r2, #8
 8007d38:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007d3a:	f7fd f80f 	bl	8004d5c <HAL_GetTick>
 8007d3e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007d40:	e009      	b.n	8007d56 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007d42:	f7fd f80b 	bl	8004d5c <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d50:	d901      	bls.n	8007d56 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e007      	b.n	8007d66 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0ee      	beq.n	8007d42 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b087      	sub	sp, #28
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	827b      	strh	r3, [r7, #18]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	823b      	strh	r3, [r7, #16]
 8007d7e:	2300      	movs	r3, #0
 8007d80:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007d9e:	8a7a      	ldrh	r2, [r7, #18]
 8007da0:	8a3b      	ldrh	r3, [r7, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d008      	beq.n	8007db8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007da6:	8a3b      	ldrh	r3, [r7, #16]
 8007da8:	041a      	lsls	r2, r3, #16
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4313      	orrs	r3, r2
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e004      	b.n	8007dc2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007db8:	8a7b      	ldrh	r3, [r7, #18]
 8007dba:	041a      	lsls	r2, r3, #16
 8007dbc:	89fb      	ldrh	r3, [r7, #14]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007dc2:	697b      	ldr	r3, [r7, #20]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f85d 	bl	8007e9c <RTC_EnterInitMode>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
 8007dec:	e011      	b.n	8007e12 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	0c12      	lsrs	r2, r2, #16
 8007df6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f872 	bl	8007eec <RTC_ExitInitMode>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007e24:	2300      	movs	r3, #0
 8007e26:	81fb      	strh	r3, [r7, #14]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007e3c:	89fb      	ldrh	r3, [r7, #14]
 8007e3e:	041a      	lsls	r2, r3, #16
 8007e40:	89bb      	ldrh	r3, [r7, #12]
 8007e42:	4313      	orrs	r3, r2
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f81d 	bl	8007e9c <RTC_EnterInitMode>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	e011      	b.n	8007e92 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	0c12      	lsrs	r2, r2, #16
 8007e76:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	b292      	uxth	r2, r2
 8007e80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f832 	bl	8007eec <RTC_ExitInitMode>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007ea8:	f7fc ff58 	bl	8004d5c <HAL_GetTick>
 8007eac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007eae:	e009      	b.n	8007ec4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007eb0:	f7fc ff54 	bl	8004d5c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ebe:	d901      	bls.n	8007ec4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e00f      	b.n	8007ee4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0ee      	beq.n	8007eb0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0210 	orr.w	r2, r2, #16
 8007ee0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0210 	bic.w	r2, r2, #16
 8007f06:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007f08:	f7fc ff28 	bl	8004d5c <HAL_GetTick>
 8007f0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007f0e:	e009      	b.n	8007f24 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007f10:	f7fc ff24 	bl	8004d5c <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1e:	d901      	bls.n	8007f24 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e007      	b.n	8007f34 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f003 0320 	and.w	r3, r3, #32
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0ee      	beq.n	8007f10 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	091b      	lsrs	r3, r3, #4
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	461a      	mov	r2, r3
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	f003 030f 	and.w	r3, r3, #15
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	b2db      	uxtb	r3, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
	...

08007f78 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
 8007f84:	4613      	mov	r3, r2
 8007f86:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60bb      	str	r3, [r7, #8]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007f96:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d82d      	bhi.n	8007ffa <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	4a2c      	ldr	r2, [pc, #176]	; (800805c <RTC_WeekDayNum+0xe4>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	085a      	lsrs	r2, r3, #1
 8007fb2:	78bb      	ldrb	r3, [r7, #2]
 8007fb4:	441a      	add	r2, r3
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	441a      	add	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4926      	ldr	r1, [pc, #152]	; (8008060 <RTC_WeekDayNum+0xe8>)
 8007fc8:	fba1 1303 	umull	r1, r3, r1, r3
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	4922      	ldr	r1, [pc, #136]	; (8008060 <RTC_WeekDayNum+0xe8>)
 8007fd6:	fba1 1303 	umull	r1, r3, r1, r3
 8007fda:	09db      	lsrs	r3, r3, #7
 8007fdc:	4413      	add	r3, r2
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	4b20      	ldr	r3, [pc, #128]	; (8008064 <RTC_WeekDayNum+0xec>)
 8007fe2:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe6:	1ad1      	subs	r1, r2, r3
 8007fe8:	0849      	lsrs	r1, r1, #1
 8007fea:	440b      	add	r3, r1
 8007fec:	0899      	lsrs	r1, r3, #2
 8007fee:	460b      	mov	r3, r1
 8007ff0:	00db      	lsls	r3, r3, #3
 8007ff2:	1a5b      	subs	r3, r3, r1
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e029      	b.n	800804e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4413      	add	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <RTC_WeekDayNum+0xe4>)
 8008008:	fba2 2303 	umull	r2, r3, r2, r3
 800800c:	085a      	lsrs	r2, r3, #1
 800800e:	78bb      	ldrb	r3, [r7, #2]
 8008010:	441a      	add	r2, r3
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	441a      	add	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	089b      	lsrs	r3, r3, #2
 800801a:	441a      	add	r2, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4910      	ldr	r1, [pc, #64]	; (8008060 <RTC_WeekDayNum+0xe8>)
 8008020:	fba1 1303 	umull	r1, r3, r1, r3
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	490d      	ldr	r1, [pc, #52]	; (8008060 <RTC_WeekDayNum+0xe8>)
 800802c:	fba1 1303 	umull	r1, r3, r1, r3
 8008030:	09db      	lsrs	r3, r3, #7
 8008032:	4413      	add	r3, r2
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <RTC_WeekDayNum+0xec>)
 8008038:	fba3 1302 	umull	r1, r3, r3, r2
 800803c:	1ad1      	subs	r1, r2, r3
 800803e:	0849      	lsrs	r1, r1, #1
 8008040:	440b      	add	r3, r1
 8008042:	0899      	lsrs	r1, r3, #2
 8008044:	460b      	mov	r3, r1
 8008046:	00db      	lsls	r3, r3, #3
 8008048:	1a5b      	subs	r3, r3, r1
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	b2db      	uxtb	r3, r3
}
 8008052:	4618      	mov	r0, r3
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	bc80      	pop	{r7}
 800805a:	4770      	bx	lr
 800805c:	38e38e39 	.word	0x38e38e39
 8008060:	51eb851f 	.word	0x51eb851f
 8008064:	24924925 	.word	0x24924925

08008068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e041      	b.n	80080fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fb f98e 	bl	80033b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3304      	adds	r3, #4
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f000 fc94 	bl	80089d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
	...

08008108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	d001      	beq.n	8008120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e03a      	b.n	8008196 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2202      	movs	r2, #2
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_TIM_Base_Start_IT+0x98>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00e      	beq.n	8008160 <HAL_TIM_Base_Start_IT+0x58>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814a:	d009      	beq.n	8008160 <HAL_TIM_Base_Start_IT+0x58>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a14      	ldr	r2, [pc, #80]	; (80081a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d004      	beq.n	8008160 <HAL_TIM_Base_Start_IT+0x58>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d111      	bne.n	8008184 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b06      	cmp	r3, #6
 8008170:	d010      	beq.n	8008194 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0201 	orr.w	r2, r2, #1
 8008180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008182:	e007      	b.n	8008194 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800

080081ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e041      	b.n	8008242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f839 	bl	800824a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3304      	adds	r3, #4
 80081e8:	4619      	mov	r1, r3
 80081ea:	4610      	mov	r0, r2
 80081ec:	f000 fbf2 	bl	80089d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008252:	bf00      	nop
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bc80      	pop	{r7}
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d109      	bne.n	8008280 <HAL_TIM_PWM_Start+0x24>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b01      	cmp	r3, #1
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	e022      	b.n	80082c6 <HAL_TIM_PWM_Start+0x6a>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b04      	cmp	r3, #4
 8008284:	d109      	bne.n	800829a <HAL_TIM_PWM_Start+0x3e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	bf14      	ite	ne
 8008292:	2301      	movne	r3, #1
 8008294:	2300      	moveq	r3, #0
 8008296:	b2db      	uxtb	r3, r3
 8008298:	e015      	b.n	80082c6 <HAL_TIM_PWM_Start+0x6a>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b08      	cmp	r3, #8
 800829e:	d109      	bne.n	80082b4 <HAL_TIM_PWM_Start+0x58>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	bf14      	ite	ne
 80082ac:	2301      	movne	r3, #1
 80082ae:	2300      	moveq	r3, #0
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	e008      	b.n	80082c6 <HAL_TIM_PWM_Start+0x6a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b01      	cmp	r3, #1
 80082be:	bf14      	ite	ne
 80082c0:	2301      	movne	r3, #1
 80082c2:	2300      	moveq	r3, #0
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e05e      	b.n	800838c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <HAL_TIM_PWM_Start+0x82>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082dc:	e013      	b.n	8008306 <HAL_TIM_PWM_Start+0xaa>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d104      	bne.n	80082ee <HAL_TIM_PWM_Start+0x92>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082ec:	e00b      	b.n	8008306 <HAL_TIM_PWM_Start+0xaa>
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d104      	bne.n	80082fe <HAL_TIM_PWM_Start+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082fc:	e003      	b.n	8008306 <HAL_TIM_PWM_Start+0xaa>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2201      	movs	r2, #1
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fde0 	bl	8008ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1e      	ldr	r2, [pc, #120]	; (8008394 <HAL_TIM_PWM_Start+0x138>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d107      	bne.n	800832e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800832c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_TIM_PWM_Start+0x138>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00e      	beq.n	8008356 <HAL_TIM_PWM_Start+0xfa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d009      	beq.n	8008356 <HAL_TIM_PWM_Start+0xfa>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a14      	ldr	r2, [pc, #80]	; (8008398 <HAL_TIM_PWM_Start+0x13c>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d004      	beq.n	8008356 <HAL_TIM_PWM_Start+0xfa>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a12      	ldr	r2, [pc, #72]	; (800839c <HAL_TIM_PWM_Start+0x140>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d111      	bne.n	800837a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b06      	cmp	r3, #6
 8008366:	d010      	beq.n	800838a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0201 	orr.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008378:	e007      	b.n	800838a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f042 0201 	orr.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40000400 	.word	0x40000400
 800839c:	40000800 	.word	0x40000800

080083a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2200      	movs	r2, #0
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 fd8e 	bl	8008ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a29      	ldr	r2, [pc, #164]	; (8008464 <HAL_TIM_PWM_Stop+0xc4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d117      	bne.n	80083f2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10f      	bne.n	80083f2 <HAL_TIM_PWM_Stop+0x52>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6a1a      	ldr	r2, [r3, #32]
 80083d8:	f240 4344 	movw	r3, #1092	; 0x444
 80083dc:	4013      	ands	r3, r2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <HAL_TIM_PWM_Stop+0x52>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80083fc:	4013      	ands	r3, r2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10f      	bne.n	8008422 <HAL_TIM_PWM_Stop+0x82>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6a1a      	ldr	r2, [r3, #32]
 8008408:	f240 4344 	movw	r3, #1092	; 0x444
 800840c:	4013      	ands	r3, r2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d107      	bne.n	8008422 <HAL_TIM_PWM_Stop+0x82>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Stop+0x92>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008430:	e013      	b.n	800845a <HAL_TIM_PWM_Stop+0xba>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Stop+0xa2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008440:	e00b      	b.n	800845a <HAL_TIM_PWM_Stop+0xba>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b08      	cmp	r3, #8
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Stop+0xb2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008450:	e003      	b.n	800845a <HAL_TIM_PWM_Stop+0xba>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40012c00 	.word	0x40012c00

08008468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b02      	cmp	r3, #2
 800847c:	d122      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b02      	cmp	r3, #2
 800848a:	d11b      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0202 	mvn.w	r2, #2
 8008494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa76 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 80084b0:	e005      	b.n	80084be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fa69 	bl	800898a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fa78 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d122      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d11b      	bne.n	8008518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0204 	mvn.w	r2, #4
 80084e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2202      	movs	r2, #2
 80084ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 fa4c 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 8008504:	e005      	b.n	8008512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa3f 	bl	800898a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa4e 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b08      	cmp	r3, #8
 8008524:	d122      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b08      	cmp	r3, #8
 8008532:	d11b      	bne.n	800856c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0208 	mvn.w	r2, #8
 800853c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2204      	movs	r2, #4
 8008542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	f003 0303 	and.w	r3, r3, #3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa22 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 8008558:	e005      	b.n	8008566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa15 	bl	800898a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa24 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b10      	cmp	r3, #16
 8008578:	d122      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b10      	cmp	r3, #16
 8008586:	d11b      	bne.n	80085c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f06f 0210 	mvn.w	r2, #16
 8008590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2208      	movs	r2, #8
 8008596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f9f8 	bl	800899c <HAL_TIM_IC_CaptureCallback>
 80085ac:	e005      	b.n	80085ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9eb 	bl	800898a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f9fa 	bl	80089ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10e      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d107      	bne.n	80085ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0201 	mvn.w	r2, #1
 80085e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f7fa faa0 	bl	8002b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b80      	cmp	r3, #128	; 0x80
 80085f8:	d10e      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d107      	bne.n	8008618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fce9 	bl	8008fea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d10e      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d107      	bne.n	8008644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800863c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f9be 	bl	80089c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0320 	and.w	r3, r3, #32
 800864e:	2b20      	cmp	r3, #32
 8008650:	d10e      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b20      	cmp	r3, #32
 800865e:	d107      	bne.n	8008670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0220 	mvn.w	r2, #32
 8008668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fcb4 	bl	8008fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008670:	bf00      	nop
 8008672:	3708      	adds	r7, #8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008692:	2302      	movs	r3, #2
 8008694:	e0ae      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b0c      	cmp	r3, #12
 80086a2:	f200 809f 	bhi.w	80087e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086e1 	.word	0x080086e1
 80086b0:	080087e5 	.word	0x080087e5
 80086b4:	080087e5 	.word	0x080087e5
 80086b8:	080087e5 	.word	0x080087e5
 80086bc:	08008721 	.word	0x08008721
 80086c0:	080087e5 	.word	0x080087e5
 80086c4:	080087e5 	.word	0x080087e5
 80086c8:	080087e5 	.word	0x080087e5
 80086cc:	08008763 	.word	0x08008763
 80086d0:	080087e5 	.word	0x080087e5
 80086d4:	080087e5 	.word	0x080087e5
 80086d8:	080087e5 	.word	0x080087e5
 80086dc:	080087a3 	.word	0x080087a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 f9d6 	bl	8008a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	699a      	ldr	r2, [r3, #24]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0208 	orr.w	r2, r2, #8
 80086fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f022 0204 	bic.w	r2, r2, #4
 800870a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6999      	ldr	r1, [r3, #24]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	691a      	ldr	r2, [r3, #16]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	619a      	str	r2, [r3, #24]
      break;
 800871e:	e064      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fa1c 	bl	8008b64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	699a      	ldr	r2, [r3, #24]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800873a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800874a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6999      	ldr	r1, [r3, #24]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	021a      	lsls	r2, r3, #8
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	619a      	str	r2, [r3, #24]
      break;
 8008760:	e043      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 fa65 	bl	8008c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69da      	ldr	r2, [r3, #28]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0208 	orr.w	r2, r2, #8
 800877c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69da      	ldr	r2, [r3, #28]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0204 	bic.w	r2, r2, #4
 800878c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	69d9      	ldr	r1, [r3, #28]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	691a      	ldr	r2, [r3, #16]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	430a      	orrs	r2, r1
 800879e:	61da      	str	r2, [r3, #28]
      break;
 80087a0:	e023      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 faaf 	bl	8008d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	69da      	ldr	r2, [r3, #28]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69da      	ldr	r2, [r3, #28]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	69d9      	ldr	r1, [r3, #28]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	021a      	lsls	r2, r3, #8
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	61da      	str	r2, [r3, #28]
      break;
 80087e2:	e002      	b.n	80087ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]
      break;
 80087e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <HAL_TIM_ConfigClockSource+0x1c>
 8008814:	2302      	movs	r3, #2
 8008816:	e0b4      	b.n	8008982 <HAL_TIM_ConfigClockSource+0x186>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800883e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008850:	d03e      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0xd4>
 8008852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008856:	f200 8087 	bhi.w	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885e:	f000 8086 	beq.w	800896e <HAL_TIM_ConfigClockSource+0x172>
 8008862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008866:	d87f      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008868:	2b70      	cmp	r3, #112	; 0x70
 800886a:	d01a      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0xa6>
 800886c:	2b70      	cmp	r3, #112	; 0x70
 800886e:	d87b      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008870:	2b60      	cmp	r3, #96	; 0x60
 8008872:	d050      	beq.n	8008916 <HAL_TIM_ConfigClockSource+0x11a>
 8008874:	2b60      	cmp	r3, #96	; 0x60
 8008876:	d877      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008878:	2b50      	cmp	r3, #80	; 0x50
 800887a:	d03c      	beq.n	80088f6 <HAL_TIM_ConfigClockSource+0xfa>
 800887c:	2b50      	cmp	r3, #80	; 0x50
 800887e:	d873      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008880:	2b40      	cmp	r3, #64	; 0x40
 8008882:	d058      	beq.n	8008936 <HAL_TIM_ConfigClockSource+0x13a>
 8008884:	2b40      	cmp	r3, #64	; 0x40
 8008886:	d86f      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008888:	2b30      	cmp	r3, #48	; 0x30
 800888a:	d064      	beq.n	8008956 <HAL_TIM_ConfigClockSource+0x15a>
 800888c:	2b30      	cmp	r3, #48	; 0x30
 800888e:	d86b      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008890:	2b20      	cmp	r3, #32
 8008892:	d060      	beq.n	8008956 <HAL_TIM_ConfigClockSource+0x15a>
 8008894:	2b20      	cmp	r3, #32
 8008896:	d867      	bhi.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
 8008898:	2b00      	cmp	r3, #0
 800889a:	d05c      	beq.n	8008956 <HAL_TIM_ConfigClockSource+0x15a>
 800889c:	2b10      	cmp	r3, #16
 800889e:	d05a      	beq.n	8008956 <HAL_TIM_ConfigClockSource+0x15a>
 80088a0:	e062      	b.n	8008968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088b2:	f000 faf0 	bl	8008e96 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80088c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	609a      	str	r2, [r3, #8]
      break;
 80088ce:	e04f      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80088e0:	f000 fad9 	bl	8008e96 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088f2:	609a      	str	r2, [r3, #8]
      break;
 80088f4:	e03c      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008902:	461a      	mov	r2, r3
 8008904:	f000 fa50 	bl	8008da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2150      	movs	r1, #80	; 0x50
 800890e:	4618      	mov	r0, r3
 8008910:	f000 faa7 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008914:	e02c      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008922:	461a      	mov	r2, r3
 8008924:	f000 fa6e 	bl	8008e04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2160      	movs	r1, #96	; 0x60
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fa97 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008934:	e01c      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008942:	461a      	mov	r2, r3
 8008944:	f000 fa30 	bl	8008da8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2140      	movs	r1, #64	; 0x40
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fa87 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008954:	e00c      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	4610      	mov	r0, r2
 8008962:	f000 fa7e 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008966:	e003      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
      break;
 800896c:	e000      	b.n	8008970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800896e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008980:	7bfb      	ldrb	r3, [r7, #15]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	bc80      	pop	{r7}
 800899a:	4770      	bx	lr

0800899c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bc80      	pop	{r7}
 80089ac:	4770      	bx	lr

080089ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bc80      	pop	{r7}
 80089be:	4770      	bx	lr

080089c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bc80      	pop	{r7}
 80089d0:	4770      	bx	lr
	...

080089d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a29      	ldr	r2, [pc, #164]	; (8008a8c <TIM_Base_SetConfig+0xb8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00b      	beq.n	8008a04 <TIM_Base_SetConfig+0x30>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089f2:	d007      	beq.n	8008a04 <TIM_Base_SetConfig+0x30>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a26      	ldr	r2, [pc, #152]	; (8008a90 <TIM_Base_SetConfig+0xbc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_Base_SetConfig+0x30>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a25      	ldr	r2, [pc, #148]	; (8008a94 <TIM_Base_SetConfig+0xc0>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d108      	bne.n	8008a16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a1c      	ldr	r2, [pc, #112]	; (8008a8c <TIM_Base_SetConfig+0xb8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00b      	beq.n	8008a36 <TIM_Base_SetConfig+0x62>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a24:	d007      	beq.n	8008a36 <TIM_Base_SetConfig+0x62>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a19      	ldr	r2, [pc, #100]	; (8008a90 <TIM_Base_SetConfig+0xbc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d003      	beq.n	8008a36 <TIM_Base_SetConfig+0x62>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <TIM_Base_SetConfig+0xc0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d108      	bne.n	8008a48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	68fa      	ldr	r2, [r7, #12]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <TIM_Base_SetConfig+0xb8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d103      	bne.n	8008a7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	615a      	str	r2, [r3, #20]
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr
 8008a8c:	40012c00 	.word	0x40012c00
 8008a90:	40000400 	.word	0x40000400
 8008a94:	40000800 	.word	0x40000800

08008a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	f023 0201 	bic.w	r2, r3, #1
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f023 0303 	bic.w	r3, r3, #3
 8008ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f023 0302 	bic.w	r3, r3, #2
 8008ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1c      	ldr	r2, [pc, #112]	; (8008b60 <TIM_OC1_SetConfig+0xc8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d10c      	bne.n	8008b0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f023 0308 	bic.w	r3, r3, #8
 8008afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f023 0304 	bic.w	r3, r3, #4
 8008b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <TIM_OC1_SetConfig+0xc8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d111      	bne.n	8008b3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	621a      	str	r2, [r3, #32]
}
 8008b54:	bf00      	nop
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	40012c00 	.word	0x40012c00

08008b64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f023 0210 	bic.w	r2, r3, #16
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	021b      	lsls	r3, r3, #8
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f023 0320 	bic.w	r3, r3, #32
 8008bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	011b      	lsls	r3, r3, #4
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <TIM_OC2_SetConfig+0xd0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d10d      	bne.n	8008be0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a14      	ldr	r2, [pc, #80]	; (8008c34 <TIM_OC2_SetConfig+0xd0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d113      	bne.n	8008c10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68fa      	ldr	r2, [r7, #12]
 8008c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	621a      	str	r2, [r3, #32]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr
 8008c34:	40012c00 	.word	0x40012c00

08008c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <TIM_OC3_SetConfig+0xd0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d10d      	bne.n	8008cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <TIM_OC3_SetConfig+0xd0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d113      	bne.n	8008ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	621a      	str	r2, [r3, #32]
}
 8008cfc:	bf00      	nop
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	40012c00 	.word	0x40012c00

08008d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b087      	sub	sp, #28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69db      	ldr	r3, [r3, #28]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	031b      	lsls	r3, r3, #12
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a0f      	ldr	r2, [pc, #60]	; (8008da4 <TIM_OC4_SetConfig+0x98>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d109      	bne.n	8008d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	019b      	lsls	r3, r3, #6
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr
 8008da4:	40012c00 	.word	0x40012c00

08008da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	f023 0201 	bic.w	r2, r3, #1
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f023 030a 	bic.w	r3, r3, #10
 8008de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	621a      	str	r2, [r3, #32]
}
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	f023 0210 	bic.w	r2, r3, #16
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	031b      	lsls	r3, r3, #12
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	621a      	str	r2, [r3, #32]
}
 8008e58:	bf00      	nop
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	f043 0307 	orr.w	r3, r3, #7
 8008e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	609a      	str	r2, [r3, #8]
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bc80      	pop	{r7}
 8008e94:	4770      	bx	lr

08008e96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b087      	sub	sp, #28
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	021a      	lsls	r2, r3, #8
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	609a      	str	r2, [r3, #8]
}
 8008eca:	bf00      	nop
 8008ecc:	371c      	adds	r7, #28
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f003 031f 	and.w	r3, r3, #31
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a1a      	ldr	r2, [r3, #32]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f003 031f 	and.w	r3, r3, #31
 8008f06:	6879      	ldr	r1, [r7, #4]
 8008f08:	fa01 f303 	lsl.w	r3, r1, r3
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e046      	b.n	8008fc2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2202      	movs	r2, #2
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a16      	ldr	r2, [pc, #88]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00e      	beq.n	8008f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d009      	beq.n	8008f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a12      	ldr	r2, [pc, #72]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d004      	beq.n	8008f96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a10      	ldr	r2, [pc, #64]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d10c      	bne.n	8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800

08008fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr

08008fea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d101      	bne.n	800900e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e042      	b.n	8009094 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d106      	bne.n	8009028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7fa fa66 	bl	80034f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2224      	movs	r2, #36	; 0x24
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800903e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f941 	bl	800a2c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e024      	b.n	80090f8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2224      	movs	r2, #36	; 0x24
 80090b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68da      	ldr	r2, [r3, #12]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090c4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fa faf8 	bl	80036bc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b20      	cmp	r3, #32
 800911e:	d16d      	bne.n	80091fc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_UART_Transmit+0x2c>
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e066      	b.n	80091fe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2221      	movs	r2, #33	; 0x21
 800913a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800913e:	f7fb fe0d 	bl	8004d5c <HAL_GetTick>
 8009142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	88fa      	ldrh	r2, [r7, #6]
 800914e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009158:	d108      	bne.n	800916c <HAL_UART_Transmit+0x6c>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	61bb      	str	r3, [r7, #24]
 800916a:	e003      	b.n	8009174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009174:	e02a      	b.n	80091cc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2200      	movs	r2, #0
 800917e:	2180      	movs	r1, #128	; 0x80
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f000 fd77 	bl	8009c74 <UART_WaitOnFlagUntilTimeout>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e036      	b.n	80091fe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	3302      	adds	r3, #2
 80091aa:	61bb      	str	r3, [r7, #24]
 80091ac:	e007      	b.n	80091be <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091ae:	69fb      	ldr	r3, [r7, #28]
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	3301      	adds	r3, #1
 80091bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1cf      	bne.n	8009176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2200      	movs	r2, #0
 80091de:	2140      	movs	r1, #64	; 0x40
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f000 fd47 	bl	8009c74 <UART_WaitOnFlagUntilTimeout>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e006      	b.n	80091fe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80091fc:	2302      	movs	r3, #2
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3720      	adds	r7, #32
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	4613      	mov	r3, r2
 8009212:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b20      	cmp	r3, #32
 800921e:	d121      	bne.n	8009264 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <HAL_UART_Transmit_IT+0x26>
 8009226:	88fb      	ldrh	r3, [r7, #6]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e01a      	b.n	8009266 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	88fa      	ldrh	r2, [r7, #6]
 800923a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	88fa      	ldrh	r2, [r7, #6]
 8009240:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2221      	movs	r2, #33	; 0x21
 800924c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800925e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b20      	cmp	r3, #32
 8009288:	d112      	bne.n	80092b0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <HAL_UART_Receive_DMA+0x26>
 8009290:	88fb      	ldrh	r3, [r7, #6]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d101      	bne.n	800929a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e00b      	b.n	80092b2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80092a0:	88fb      	ldrh	r3, [r7, #6]
 80092a2:	461a      	mov	r2, r3
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 fd52 	bl	8009d50 <UART_Start_Receive_DMA>
 80092ac:	4603      	mov	r3, r0
 80092ae:	e000      	b.n	80092b2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80092b0:	2302      	movs	r3, #2
  }
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b0a2      	sub	sp, #136	; 0x88
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092dc:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80092e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80092f0:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e3      	bne.n	80092ca <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3314      	adds	r3, #20
 8009308:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	67fb      	str	r3, [r7, #124]	; 0x7c
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3314      	adds	r3, #20
 8009320:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009322:	65ba      	str	r2, [r7, #88]	; 0x58
 8009324:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009328:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	2b01      	cmp	r3, #1
 800933c:	d119      	bne.n	8009372 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	330c      	adds	r3, #12
 8009344:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	67bb      	str	r3, [r7, #120]	; 0x78
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	330c      	adds	r3, #12
 800935c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800935e:	647a      	str	r2, [r7, #68]	; 0x44
 8009360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009364:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800936c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e5      	bne.n	800933e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00f      	beq.n	800939a <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	4a53      	ldr	r2, [pc, #332]	; (80094dc <HAL_UART_Abort_IT+0x220>)
 800938e:	635a      	str	r2, [r3, #52]	; 0x34
 8009390:	e003      	b.n	800939a <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009396:	2200      	movs	r2, #0
 8009398:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00f      	beq.n	80093c2 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	4a4a      	ldr	r2, [pc, #296]	; (80094e0 <HAL_UART_Abort_IT+0x224>)
 80093b6:	635a      	str	r2, [r3, #52]	; 0x34
 80093b8:	e003      	b.n	80093c2 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093be:	2200      	movs	r2, #0
 80093c0:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d02d      	beq.n	800942c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3314      	adds	r3, #20
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	623b      	str	r3, [r7, #32]
   return(result);
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093e6:	677b      	str	r3, [r7, #116]	; 0x74
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3314      	adds	r3, #20
 80093ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80093f0:	633a      	str	r2, [r7, #48]	; 0x30
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e5      	bne.n	80093d0 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00f      	beq.n	800942c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	4618      	mov	r0, r3
 8009412:	f7fc faf7 	bl	8005a04 <HAL_DMA_Abort_IT>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	2200      	movs	r2, #0
 8009422:	635a      	str	r2, [r3, #52]	; 0x34
 8009424:	e002      	b.n	800942c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8009426:	2300      	movs	r3, #0
 8009428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d030      	beq.n	800949c <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3314      	adds	r3, #20
 8009440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60fb      	str	r3, [r7, #12]
   return(result);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009450:	673b      	str	r3, [r7, #112]	; 0x70
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800945a:	61fa      	str	r2, [r7, #28]
 800945c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	69b9      	ldr	r1, [r7, #24]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	617b      	str	r3, [r7, #20]
   return(result);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009472:	2b00      	cmp	r3, #0
 8009474:	d012      	beq.n	800949c <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	4618      	mov	r0, r3
 800947c:	f7fc fac2 	bl	8005a04 <HAL_DMA_Abort_IT>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948a:	2200      	movs	r2, #0
 800948c:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 800948e:	2301      	movs	r3, #1
 8009490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009494:	e002      	b.n	800949c <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8009496:	2300      	movs	r3, #0
 8009498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 800949c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d116      	bne.n	80094d2 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fabf 	bl	8009a50 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3788      	adds	r7, #136	; 0x88
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	08009fbf 	.word	0x08009fbf
 80094e0:	0800a01f 	.word	0x0800a01f

080094e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b0ba      	sub	sp, #232	; 0xe8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800950a:	2300      	movs	r3, #0
 800950c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009510:	2300      	movs	r3, #0
 8009512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951a:	f003 030f 	and.w	r3, r3, #15
 800951e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10f      	bne.n	800954a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	f003 0320 	and.w	r3, r3, #32
 8009532:	2b00      	cmp	r3, #0
 8009534:	d009      	beq.n	800954a <HAL_UART_IRQHandler+0x66>
 8009536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fe02 	bl	800a14c <UART_Receive_IT>
      return;
 8009548:	e25b      	b.n	8009a02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800954a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 80de 	beq.w	8009710 <HAL_UART_IRQHandler+0x22c>
 8009554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b00      	cmp	r3, #0
 800955e:	d106      	bne.n	800956e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80d1 	beq.w	8009710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800956e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009572:	f003 0301 	and.w	r3, r3, #1
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00b      	beq.n	8009592 <HAL_UART_IRQHandler+0xae>
 800957a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800957e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009582:	2b00      	cmp	r3, #0
 8009584:	d005      	beq.n	8009592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958a:	f043 0201 	orr.w	r2, r3, #1
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0304 	and.w	r3, r3, #4
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <HAL_UART_IRQHandler+0xd2>
 800959e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d005      	beq.n	80095b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ae:	f043 0202 	orr.w	r2, r3, #2
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00b      	beq.n	80095da <HAL_UART_IRQHandler+0xf6>
 80095c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d005      	beq.n	80095da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d2:	f043 0204 	orr.w	r2, r3, #4
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095de:	f003 0308 	and.w	r3, r3, #8
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d011      	beq.n	800960a <HAL_UART_IRQHandler+0x126>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d105      	bne.n	80095fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	f043 0208 	orr.w	r2, r3, #8
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 81f2 	beq.w	80099f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d008      	beq.n	8009632 <HAL_UART_IRQHandler+0x14e>
 8009620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fd8d 	bl	800a14c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf14      	ite	ne
 8009640:	2301      	movne	r3, #1
 8009642:	2300      	moveq	r3, #0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d103      	bne.n	800965e <HAL_UART_IRQHandler+0x17a>
 8009656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800965a:	2b00      	cmp	r3, #0
 800965c:	d04f      	beq.n	80096fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fc37 	bl	8009ed2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	695b      	ldr	r3, [r3, #20]
 800966a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d041      	beq.n	80096f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3314      	adds	r3, #20
 8009678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800968c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3314      	adds	r3, #20
 800969a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800969e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1d9      	bne.n	8009672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d013      	beq.n	80096ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	4a7e      	ldr	r2, [pc, #504]	; (80098c4 <HAL_UART_IRQHandler+0x3e0>)
 80096cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fc f996 	bl	8005a04 <HAL_DMA_Abort_IT>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d016      	beq.n	800970c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096e8:	4610      	mov	r0, r2
 80096ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ec:	e00e      	b.n	800970c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f9a5 	bl	8009a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f4:	e00a      	b.n	800970c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f9a1 	bl	8009a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	e006      	b.n	800970c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f99d 	bl	8009a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800970a:	e175      	b.n	80099f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800970c:	bf00      	nop
    return;
 800970e:	e173      	b.n	80099f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009714:	2b01      	cmp	r3, #1
 8009716:	f040 814f 	bne.w	80099b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800971a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800971e:	f003 0310 	and.w	r3, r3, #16
 8009722:	2b00      	cmp	r3, #0
 8009724:	f000 8148 	beq.w	80099b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8141 	beq.w	80099b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009736:	2300      	movs	r3, #0
 8009738:	60bb      	str	r3, [r7, #8]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80b6 	beq.w	80098c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800976c:	2b00      	cmp	r3, #0
 800976e:	f000 8145 	beq.w	80099fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800977a:	429a      	cmp	r2, r3
 800977c:	f080 813e 	bcs.w	80099fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	2b20      	cmp	r3, #32
 8009790:	f000 8088 	beq.w	80098a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	330c      	adds	r3, #12
 800979a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097a2:	e853 3f00 	ldrex	r3, [r3]
 80097a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1d9      	bne.n	8009794 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3314      	adds	r3, #20
 80097e6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3314      	adds	r3, #20
 8009800:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009804:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009808:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800980c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009816:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e1      	bne.n	80097e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3314      	adds	r3, #20
 8009822:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800982c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800982e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3314      	adds	r3, #20
 800983c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009840:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009842:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009846:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800984e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e3      	bne.n	800981c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2220      	movs	r2, #32
 8009858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	330c      	adds	r3, #12
 8009868:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009874:	f023 0310 	bic.w	r3, r3, #16
 8009878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	330c      	adds	r3, #12
 8009882:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009886:	65ba      	str	r2, [r7, #88]	; 0x58
 8009888:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800988c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800988e:	e841 2300 	strex	r3, r2, [r1]
 8009892:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e3      	bne.n	8009862 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fc f874 	bl	800598c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f8d1 	bl	8009a62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098c0:	e09c      	b.n	80099fc <HAL_UART_IRQHandler+0x518>
 80098c2:	bf00      	nop
 80098c4:	08009f97 	.word	0x08009f97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 808e 	beq.w	8009a00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	f000 8089 	beq.w	8009a00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	330c      	adds	r3, #12
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	330c      	adds	r3, #12
 800990e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009912:	647a      	str	r2, [r7, #68]	; 0x44
 8009914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e3      	bne.n	80098ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3314      	adds	r3, #20
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	623b      	str	r3, [r7, #32]
   return(result);
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	f023 0301 	bic.w	r3, r3, #1
 800993c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3314      	adds	r3, #20
 8009946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800994a:	633a      	str	r2, [r7, #48]	; 0x30
 800994c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e3      	bne.n	8009926 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2220      	movs	r2, #32
 8009962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	330c      	adds	r3, #12
 8009972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	60fb      	str	r3, [r7, #12]
   return(result);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0310 	bic.w	r3, r3, #16
 8009982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	330c      	adds	r3, #12
 800998c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009990:	61fa      	str	r2, [r7, #28]
 8009992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	69fa      	ldr	r2, [r7, #28]
 8009998:	e841 2300 	strex	r3, r2, [r1]
 800999c:	617b      	str	r3, [r7, #20]
   return(result);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1e3      	bne.n	800996c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099ae:	4619      	mov	r1, r3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f856 	bl	8009a62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099b6:	e023      	b.n	8009a00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <HAL_UART_IRQHandler+0x4f4>
 80099c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fb54 	bl	800a07e <UART_Transmit_IT>
    return;
 80099d6:	e014      	b.n	8009a02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00e      	beq.n	8009a02 <HAL_UART_IRQHandler+0x51e>
 80099e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d008      	beq.n	8009a02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fb93 	bl	800a11c <UART_EndTransmit_IT>
    return;
 80099f6:	e004      	b.n	8009a02 <HAL_UART_IRQHandler+0x51e>
    return;
 80099f8:	bf00      	nop
 80099fa:	e002      	b.n	8009a02 <HAL_UART_IRQHandler+0x51e>
      return;
 80099fc:	bf00      	nop
 80099fe:	e000      	b.n	8009a02 <HAL_UART_IRQHandler+0x51e>
      return;
 8009a00:	bf00      	nop
  }
}
 8009a02:	37e8      	adds	r7, #232	; 0xe8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bc80      	pop	{r7}
 8009a18:	4770      	bx	lr

08009a1a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bc80      	pop	{r7}
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bc80      	pop	{r7}
 8009a3c:	4770      	bx	lr

08009a3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bc80      	pop	{r7}
 8009a4e:	4770      	bx	lr

08009a50 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bc80      	pop	{r7}
 8009a60:	4770      	bx	lr

08009a62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr

08009a78 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b09c      	sub	sp, #112	; 0x70
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a84:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d172      	bne.n	8009b7a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a96:	2200      	movs	r2, #0
 8009a98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	330c      	adds	r3, #12
 8009aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	330c      	adds	r3, #12
 8009ab8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009aba:	65ba      	str	r2, [r7, #88]	; 0x58
 8009abc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ac2:	e841 2300 	strex	r3, r2, [r1]
 8009ac6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1e5      	bne.n	8009a9a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3314      	adds	r3, #20
 8009ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8009ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3314      	adds	r3, #20
 8009aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009aee:	647a      	str	r2, [r7, #68]	; 0x44
 8009af0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3314      	adds	r3, #20
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	623b      	str	r3, [r7, #32]
   return(result);
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b18:	663b      	str	r3, [r7, #96]	; 0x60
 8009b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3314      	adds	r3, #20
 8009b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b22:	633a      	str	r2, [r7, #48]	; 0x30
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e5      	bne.n	8009b02 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d119      	bne.n	8009b7a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	330c      	adds	r3, #12
 8009b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f023 0310 	bic.w	r3, r3, #16
 8009b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	330c      	adds	r3, #12
 8009b64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b66:	61fa      	str	r2, [r7, #28]
 8009b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	69b9      	ldr	r1, [r7, #24]
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	617b      	str	r3, [r7, #20]
   return(result);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e5      	bne.n	8009b46 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d106      	bne.n	8009b96 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b90:	f7ff ff67 	bl	8009a62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b94:	e002      	b.n	8009b9c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009b96:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009b98:	f7ff ff3f 	bl	8009a1a <HAL_UART_RxCpltCallback>
}
 8009b9c:	bf00      	nop
 8009b9e:	3770      	adds	r7, #112	; 0x70
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d108      	bne.n	8009bd2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bc4:	085b      	lsrs	r3, r3, #1
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	4619      	mov	r1, r3
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff ff49 	bl	8009a62 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009bd0:	e002      	b.n	8009bd8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff ff2a 	bl	8009a2c <HAL_UART_RxHalfCpltCallback>
}
 8009bd8:	bf00      	nop
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b21      	cmp	r3, #33	; 0x21
 8009c12:	d108      	bne.n	8009c26 <UART_DMAError+0x46>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009c20:	68b8      	ldr	r0, [r7, #8]
 8009c22:	f000 f92f 	bl	8009e84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bf14      	ite	ne
 8009c34:	2301      	movne	r3, #1
 8009c36:	2300      	moveq	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	2b22      	cmp	r3, #34	; 0x22
 8009c46:	d108      	bne.n	8009c5a <UART_DMAError+0x7a>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d005      	beq.n	8009c5a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2200      	movs	r2, #0
 8009c52:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f000 f93c 	bl	8009ed2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5e:	f043 0210 	orr.w	r2, r3, #16
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c66:	68b8      	ldr	r0, [r7, #8]
 8009c68:	f7ff fee9 	bl	8009a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b090      	sub	sp, #64	; 0x40
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c84:	e050      	b.n	8009d28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d04c      	beq.n	8009d28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d007      	beq.n	8009ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c94:	f7fb f862 	bl	8004d5c <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d241      	bcs.n	8009d28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cc4:	637a      	str	r2, [r7, #52]	; 0x34
 8009cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e5      	bne.n	8009ca4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3314      	adds	r3, #20
 8009cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f023 0301 	bic.w	r3, r3, #1
 8009cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cf8:	623a      	str	r2, [r7, #32]
 8009cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	69f9      	ldr	r1, [r7, #28]
 8009cfe:	6a3a      	ldr	r2, [r7, #32]
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e5      	bne.n	8009cd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8009d24:	2303      	movs	r3, #3
 8009d26:	e00f      	b.n	8009d48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4013      	ands	r3, r2
 8009d32:	68ba      	ldr	r2, [r7, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d09f      	beq.n	8009c86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3740      	adds	r7, #64	; 0x40
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b098      	sub	sp, #96	; 0x60
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	88fa      	ldrh	r2, [r7, #6]
 8009d68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2222      	movs	r2, #34	; 0x22
 8009d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d7c:	4a3e      	ldr	r2, [pc, #248]	; (8009e78 <UART_Start_Receive_DMA+0x128>)
 8009d7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d84:	4a3d      	ldr	r2, [pc, #244]	; (8009e7c <UART_Start_Receive_DMA+0x12c>)
 8009d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8c:	4a3c      	ldr	r2, [pc, #240]	; (8009e80 <UART_Start_Receive_DMA+0x130>)
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d94:	2200      	movs	r2, #0
 8009d96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d98:	f107 0308 	add.w	r3, r7, #8
 8009d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3304      	adds	r3, #4
 8009da8:	4619      	mov	r1, r3
 8009daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	88fb      	ldrh	r3, [r7, #6]
 8009db0:	f7fb fd8c 	bl	80058cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009db4:	2300      	movs	r3, #0
 8009db6:	613b      	str	r3, [r7, #16]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	613b      	str	r3, [r7, #16]
 8009dc8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d019      	beq.n	8009e06 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	330c      	adds	r3, #12
 8009dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	330c      	adds	r3, #12
 8009df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009df2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009df4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009df8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e5      	bne.n	8009dd2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3314      	adds	r3, #20
 8009e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3314      	adds	r3, #20
 8009e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e26:	63ba      	str	r2, [r7, #56]	; 0x38
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e5      	bne.n	8009e06 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	3314      	adds	r3, #20
 8009e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	617b      	str	r3, [r7, #20]
   return(result);
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e50:	653b      	str	r3, [r7, #80]	; 0x50
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3314      	adds	r3, #20
 8009e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e5a:	627a      	str	r2, [r7, #36]	; 0x24
 8009e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6a39      	ldr	r1, [r7, #32]
 8009e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e5      	bne.n	8009e3a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3760      	adds	r7, #96	; 0x60
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	08009a79 	.word	0x08009a79
 8009e7c:	08009ba5 	.word	0x08009ba5
 8009e80:	08009be1 	.word	0x08009be1

08009e84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b089      	sub	sp, #36	; 0x24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	330c      	adds	r3, #12
 8009e92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009ea2:	61fb      	str	r3, [r7, #28]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	330c      	adds	r3, #12
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	61ba      	str	r2, [r7, #24]
 8009eae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6979      	ldr	r1, [r7, #20]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e5      	bne.n	8009e8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8009ec8:	bf00      	nop
 8009eca:	3724      	adds	r7, #36	; 0x24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bc80      	pop	{r7}
 8009ed0:	4770      	bx	lr

08009ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b095      	sub	sp, #84	; 0x54
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	330c      	adds	r3, #12
 8009ee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	330c      	adds	r3, #12
 8009ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009efa:	643a      	str	r2, [r7, #64]	; 0x40
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e5      	bne.n	8009eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3314      	adds	r3, #20
 8009f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f023 0301 	bic.w	r3, r3, #1
 8009f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3314      	adds	r3, #20
 8009f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d119      	bne.n	8009f7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	330c      	adds	r3, #12
 8009f50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	e853 3f00 	ldrex	r3, [r3]
 8009f58:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	f023 0310 	bic.w	r3, r3, #16
 8009f60:	647b      	str	r3, [r7, #68]	; 0x44
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	330c      	adds	r3, #12
 8009f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f6a:	61ba      	str	r2, [r7, #24]
 8009f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f6e:	6979      	ldr	r1, [r7, #20]
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	e841 2300 	strex	r3, r2, [r1]
 8009f76:	613b      	str	r3, [r7, #16]
   return(result);
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1e5      	bne.n	8009f4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009f8c:	bf00      	nop
 8009f8e:	3754      	adds	r7, #84	; 0x54
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bc80      	pop	{r7}
 8009f94:	4770      	bx	lr

08009f96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f7ff fd44 	bl	8009a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d004      	beq.n	8009fe6 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d117      	bne.n	800a016 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff fd1e 	bl	8009a50 <HAL_UART_AbortCpltCallback>
 800a014:	e000      	b.n	800a018 <UART_DMATxAbortCallback+0x5a>
      return;
 800a016:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a030:	2200      	movs	r2, #0
 800a032:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	2b00      	cmp	r3, #0
 800a044:	d117      	bne.n	800a076 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fcee 	bl	8009a50 <HAL_UART_AbortCpltCallback>
 800a074:	e000      	b.n	800a078 <UART_DMARxAbortCallback+0x5a>
      return;
 800a076:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a07e:	b480      	push	{r7}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b21      	cmp	r3, #33	; 0x21
 800a090:	d13e      	bne.n	800a110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a09a:	d114      	bne.n	800a0c6 <UART_Transmit_IT+0x48>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d110      	bne.n	800a0c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	1c9a      	adds	r2, r3, #2
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	621a      	str	r2, [r3, #32]
 800a0c4:	e008      	b.n	800a0d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	1c59      	adds	r1, r3, #1
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	6211      	str	r1, [r2, #32]
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10f      	bne.n	800a10c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a10a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	e000      	b.n	800a112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a110:	2302      	movs	r3, #2
  }
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	bc80      	pop	{r7}
 800a11a:	4770      	bx	lr

0800a11c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a132:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff fc63 	bl	8009a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08c      	sub	sp, #48	; 0x30
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b22      	cmp	r3, #34	; 0x22
 800a15e:	f040 80ae 	bne.w	800a2be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16a:	d117      	bne.n	800a19c <UART_Receive_IT+0x50>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d113      	bne.n	800a19c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	b29b      	uxth	r3, r3
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	629a      	str	r2, [r3, #40]	; 0x28
 800a19a:	e026      	b.n	800a1ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ae:	d007      	beq.n	800a1c0 <UART_Receive_IT+0x74>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <UART_Receive_IT+0x82>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	e008      	b.n	800a1e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d15d      	bne.n	800a2ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0220 	bic.w	r2, r2, #32
 800a20c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a21c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0201 	bic.w	r2, r2, #1
 800a22c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	2b01      	cmp	r3, #1
 800a242:	d135      	bne.n	800a2b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	330c      	adds	r3, #12
 800a250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	613b      	str	r3, [r7, #16]
   return(result);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f023 0310 	bic.w	r3, r3, #16
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	330c      	adds	r3, #12
 800a268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a26a:	623a      	str	r2, [r7, #32]
 800a26c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	69f9      	ldr	r1, [r7, #28]
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	61bb      	str	r3, [r7, #24]
   return(result);
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e5      	bne.n	800a24a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d10a      	bne.n	800a2a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff fbda 	bl	8009a62 <HAL_UARTEx_RxEventCallback>
 800a2ae:	e002      	b.n	800a2b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fbb2 	bl	8009a1a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e002      	b.n	800a2c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e000      	b.n	800a2c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a2be:	2302      	movs	r3, #2
  }
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3730      	adds	r7, #48	; 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a302:	f023 030c 	bic.w	r3, r3, #12
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	430b      	orrs	r3, r1
 800a30e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a2c      	ldr	r2, [pc, #176]	; (800a3dc <UART_SetConfig+0x114>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d103      	bne.n	800a338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a330:	f7fd f948 	bl	80075c4 <HAL_RCC_GetPCLK2Freq>
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	e002      	b.n	800a33e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a338:	f7fd f930 	bl	800759c <HAL_RCC_GetPCLK1Freq>
 800a33c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009a      	lsls	r2, r3, #2
 800a348:	441a      	add	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	fbb2 f3f3 	udiv	r3, r2, r3
 800a354:	4a22      	ldr	r2, [pc, #136]	; (800a3e0 <UART_SetConfig+0x118>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	095b      	lsrs	r3, r3, #5
 800a35c:	0119      	lsls	r1, r3, #4
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009a      	lsls	r2, r3, #2
 800a368:	441a      	add	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	fbb2 f2f3 	udiv	r2, r2, r3
 800a374:	4b1a      	ldr	r3, [pc, #104]	; (800a3e0 <UART_SetConfig+0x118>)
 800a376:	fba3 0302 	umull	r0, r3, r3, r2
 800a37a:	095b      	lsrs	r3, r3, #5
 800a37c:	2064      	movs	r0, #100	; 0x64
 800a37e:	fb00 f303 	mul.w	r3, r0, r3
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	3332      	adds	r3, #50	; 0x32
 800a388:	4a15      	ldr	r2, [pc, #84]	; (800a3e0 <UART_SetConfig+0x118>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a394:	4419      	add	r1, r3
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009a      	lsls	r2, r3, #2
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <UART_SetConfig+0x118>)
 800a3ae:	fba3 0302 	umull	r0, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	2064      	movs	r0, #100	; 0x64
 800a3b6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	3332      	adds	r3, #50	; 0x32
 800a3c0:	4a07      	ldr	r2, [pc, #28]	; (800a3e0 <UART_SetConfig+0x118>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	40013800 	.word	0x40013800
 800a3e0:	51eb851f 	.word	0x51eb851f

0800a3e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a3f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3f6:	2b84      	cmp	r3, #132	; 0x84
 800a3f8:	d005      	beq.n	800a406 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a3fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	3303      	adds	r3, #3
 800a404:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a406:	68fb      	ldr	r3, [r7, #12]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bc80      	pop	{r7}
 800a410:	4770      	bx	lr

0800a412 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a412:	b480      	push	{r7}
 800a414:	b083      	sub	sp, #12
 800a416:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	607b      	str	r3, [r7, #4]
  return(result);
 800a41e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a420:	2b00      	cmp	r3, #0
 800a422:	bf14      	ite	ne
 800a424:	2301      	movne	r3, #1
 800a426:	2300      	moveq	r3, #0
 800a428:	b2db      	uxtb	r3, r3
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	bc80      	pop	{r7}
 800a432:	4770      	bx	lr

0800a434 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a438:	f001 fd0a 	bl	800be50 <vTaskStartScheduler>
  
  return osOK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	bd80      	pop	{r7, pc}

0800a442 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a442:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a444:	b089      	sub	sp, #36	; 0x24
 800a446:	af04      	add	r7, sp, #16
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d020      	beq.n	800a496 <osThreadCreate+0x54>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d01c      	beq.n	800a496 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685c      	ldr	r4, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691e      	ldr	r6, [r3, #16]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff ffb8 	bl	800a3e4 <makeFreeRtosPriority>
 800a474:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a47e:	9202      	str	r2, [sp, #8]
 800a480:	9301      	str	r3, [sp, #4]
 800a482:	9100      	str	r1, [sp, #0]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	4632      	mov	r2, r6
 800a488:	4629      	mov	r1, r5
 800a48a:	4620      	mov	r0, r4
 800a48c:	f001 f8f0 	bl	800b670 <xTaskCreateStatic>
 800a490:	4603      	mov	r3, r0
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e01c      	b.n	800a4d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685c      	ldr	r4, [r3, #4]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7ff ff9a 	bl	800a3e4 <makeFreeRtosPriority>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	f107 030c 	add.w	r3, r7, #12
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	9200      	str	r2, [sp, #0]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	4632      	mov	r2, r6
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f001 f931 	bl	800b728 <xTaskCreate>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d001      	beq.n	800a4d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	e000      	b.n	800a4d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a4dc <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  taskYIELD();
 800a4e0:	4b06      	ldr	r3, [pc, #24]	; (800a4fc <osThreadYield+0x20>)
 800a4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	f3bf 8f6f 	isb	sy
  
  return osOK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bc80      	pop	{r7}
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	e000ed04 	.word	0xe000ed04

0800a500 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <osDelay+0x16>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	e000      	b.n	800a518 <osDelay+0x18>
 800a516:	2301      	movs	r3, #1
 800a518:	4618      	mov	r0, r3
 800a51a:	f001 fac9 	bl	800bab0 <vTaskDelay>
  
  return osOK;
 800a51e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af02      	add	r7, sp, #8
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	460b      	mov	r3, r1
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d013      	beq.n	800a566 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800a53e:	7afb      	ldrb	r3, [r7, #11]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d101      	bne.n	800a548 <osTimerCreate+0x20>
 800a544:	2101      	movs	r1, #1
 800a546:	e000      	b.n	800a54a <osTimerCreate+0x22>
 800a548:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800a552:	9201      	str	r2, [sp, #4]
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	460a      	mov	r2, r1
 800a55a:	2101      	movs	r1, #1
 800a55c:	480b      	ldr	r0, [pc, #44]	; (800a58c <osTimerCreate+0x64>)
 800a55e:	f002 fc20 	bl	800cda2 <xTimerCreateStatic>
 800a562:	4603      	mov	r3, r0
 800a564:	e00e      	b.n	800a584 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d101      	bne.n	800a570 <osTimerCreate+0x48>
 800a56c:	2201      	movs	r2, #1
 800a56e:	e000      	b.n	800a572 <osTimerCreate+0x4a>
 800a570:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2101      	movs	r1, #1
 800a57c:	4803      	ldr	r0, [pc, #12]	; (800a58c <osTimerCreate+0x64>)
 800a57e:	f002 fbef 	bl	800cd60 <xTimerCreate>
 800a582:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	0800e984 	.word	0x0800e984

0800a590 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <osTimerStart+0x20>
    ticks = 1;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800a5b0:	f7ff ff2f 	bl	800a412 <inHandlerMode>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01a      	beq.n	800a5f0 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	2200      	movs	r2, #0
 800a5c0:	9200      	str	r2, [sp, #0]
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	2109      	movs	r1, #9
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f002 fc5a 	bl	800ce80 <xTimerGenericCommand>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d002      	beq.n	800a5d8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800a5d2:	23ff      	movs	r3, #255	; 0xff
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e018      	b.n	800a60a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d015      	beq.n	800a60a <osTimerStart+0x7a>
 800a5de:	4b0d      	ldr	r3, [pc, #52]	; (800a614 <osTimerStart+0x84>)
 800a5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	e00c      	b.n	800a60a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	2104      	movs	r1, #4
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f002 fc40 	bl	800ce80 <xTimerGenericCommand>
 800a600:	4603      	mov	r3, r0
 800a602:	2b01      	cmp	r3, #1
 800a604:	d001      	beq.n	800a60a <osTimerStart+0x7a>
      result = osErrorOS;
 800a606:	23ff      	movs	r3, #255	; 0xff
 800a608:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800a60a:	697b      	ldr	r3, [r7, #20]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	e000ed04 	.word	0xe000ed04

0800a618 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a622:	2300      	movs	r3, #0
 800a624:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a62a:	f7ff fef2 	bl	800a412 <inHandlerMode>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01c      	beq.n	800a66e <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a634:	6839      	ldr	r1, [r7, #0]
 800a636:	f107 0208 	add.w	r2, r7, #8
 800a63a:	f107 030c 	add.w	r3, r7, #12
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	4613      	mov	r3, r2
 800a642:	2201      	movs	r2, #1
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f002 fa0d 	bl	800ca64 <xTaskGenericNotifyFromISR>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d002      	beq.n	800a656 <osSignalSet+0x3e>
      return 0x80000000;
 800a650:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a654:	e019      	b.n	800a68a <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d015      	beq.n	800a688 <osSignalSet+0x70>
 800a65c:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <osSignalSet+0x7c>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	e00c      	b.n	800a688 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a66e:	6839      	ldr	r1, [r7, #0]
 800a670:	f107 0308 	add.w	r3, r7, #8
 800a674:	2201      	movs	r2, #1
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f002 f94a 	bl	800c910 <xTaskGenericNotify>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d002      	beq.n	800a688 <osSignalSet+0x70>
    return 0x80000000;
 800a682:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a686:	e000      	b.n	800a68a <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a688:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b089      	sub	sp, #36	; 0x24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d103      	bne.n	800a6bc <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a6b8:	61fb      	str	r3, [r7, #28]
 800a6ba:	e009      	b.n	800a6d0 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d101      	bne.n	800a6d0 <osSignalWait+0x38>
      ticks = 1;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a6d0:	f7ff fe9f 	bl	800a412 <inHandlerMode>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a6da:	2382      	movs	r3, #130	; 0x82
 800a6dc:	613b      	str	r3, [r7, #16]
 800a6de:	e01b      	b.n	800a718 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	f107 0310 	add.w	r3, r7, #16
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f002 f8b0 	bl	800c850 <xTaskNotifyWait>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d008      	beq.n	800a708 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <osSignalWait+0x6a>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	e00a      	b.n	800a718 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a702:	2340      	movs	r3, #64	; 0x40
 800a704:	613b      	str	r3, [r7, #16]
 800a706:	e007      	b.n	800a718 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	da02      	bge.n	800a714 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a70e:	2386      	movs	r3, #134	; 0x86
 800a710:	613b      	str	r3, [r7, #16]
 800a712:	e001      	b.n	800a718 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a714:	2308      	movs	r3, #8
 800a716:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	461c      	mov	r4, r3
 800a71c:	f107 0310 	add.w	r3, r7, #16
 800a720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a724:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	3724      	adds	r7, #36	; 0x24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd90      	pop	{r4, r7, pc}

0800a730 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af02      	add	r7, sp, #8
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00f      	beq.n	800a762 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d10a      	bne.n	800a75e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	2203      	movs	r2, #3
 800a74e:	9200      	str	r2, [sp, #0]
 800a750:	2200      	movs	r2, #0
 800a752:	2100      	movs	r1, #0
 800a754:	2001      	movs	r0, #1
 800a756:	f000 fa55 	bl	800ac04 <xQueueGenericCreateStatic>
 800a75a:	4603      	mov	r3, r0
 800a75c:	e016      	b.n	800a78c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	e014      	b.n	800a78c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d110      	bne.n	800a78a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a768:	2203      	movs	r2, #3
 800a76a:	2100      	movs	r1, #0
 800a76c:	2001      	movs	r0, #1
 800a76e:	f000 fac0 	bl	800acf2 <xQueueGenericCreate>
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d005      	beq.n	800a786 <osSemaphoreCreate+0x56>
 800a77a:	2300      	movs	r3, #0
 800a77c:	2200      	movs	r2, #0
 800a77e:	2100      	movs	r1, #0
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 fb13 	bl	800adac <xQueueGenericSend>
      return sema;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	e000      	b.n	800a78c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a78a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b085      	sub	sp, #20
 800a798:	af02      	add	r7, sp, #8
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d011      	beq.n	800a7ca <osMessageCreate+0x36>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68db      	ldr	r3, [r3, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00d      	beq.n	800a7ca <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6859      	ldr	r1, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	2400      	movs	r4, #0
 800a7c0:	9400      	str	r4, [sp, #0]
 800a7c2:	f000 fa1f 	bl	800ac04 <xQueueGenericCreateStatic>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	e008      	b.n	800a7dc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	f000 fa8c 	bl	800acf2 <xQueueGenericCreate>
 800a7da:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd90      	pop	{r4, r7, pc}

0800a7e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <osMessagePut+0x1e>
    ticks = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a802:	f7ff fe06 	bl	800a412 <inHandlerMode>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d018      	beq.n	800a83e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	f107 0108 	add.w	r1, r7, #8
 800a814:	2300      	movs	r3, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 fbc6 	bl	800afa8 <xQueueGenericSendFromISR>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d001      	beq.n	800a826 <osMessagePut+0x42>
      return osErrorOS;
 800a822:	23ff      	movs	r3, #255	; 0xff
 800a824:	e018      	b.n	800a858 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d014      	beq.n	800a856 <osMessagePut+0x72>
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <osMessagePut+0x7c>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	e00b      	b.n	800a856 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a83e:	f107 0108 	add.w	r1, r7, #8
 800a842:	2300      	movs	r3, #0
 800a844:	697a      	ldr	r2, [r7, #20]
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fab0 	bl	800adac <xQueueGenericSend>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d001      	beq.n	800a856 <osMessagePut+0x72>
      return osErrorOS;
 800a852:	23ff      	movs	r3, #255	; 0xff
 800a854:	e000      	b.n	800a858 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	e000ed04 	.word	0xe000ed04

0800a864 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b08b      	sub	sp, #44	; 0x2c
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a87e:	2380      	movs	r3, #128	; 0x80
 800a880:	617b      	str	r3, [r7, #20]
    return event;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	461c      	mov	r4, r3
 800a886:	f107 0314 	add.w	r3, r7, #20
 800a88a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a88e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a892:	e054      	b.n	800a93e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a894:	2300      	movs	r3, #0
 800a896:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a2:	d103      	bne.n	800a8ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8aa:	e009      	b.n	800a8c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d006      	beq.n	800a8c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <osMessageGet+0x5c>
      ticks = 1;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a8c0:	f7ff fda7 	bl	800a412 <inHandlerMode>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d01c      	beq.n	800a904 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a8ca:	f107 0220 	add.w	r2, r7, #32
 800a8ce:	f107 0314 	add.w	r3, r7, #20
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	68b8      	ldr	r0, [r7, #8]
 800a8d8:	f000 fcde 	bl	800b298 <xQueueReceiveFromISR>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d102      	bne.n	800a8e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a8e2:	2310      	movs	r3, #16
 800a8e4:	617b      	str	r3, [r7, #20]
 800a8e6:	e001      	b.n	800a8ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d01d      	beq.n	800a92e <osMessageGet+0xca>
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <osMessageGet+0xe4>)
 800a8f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	f3bf 8f4f 	dsb	sy
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	e014      	b.n	800a92e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a904:	f107 0314 	add.w	r3, r7, #20
 800a908:	3304      	adds	r3, #4
 800a90a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a90c:	4619      	mov	r1, r3
 800a90e:	68b8      	ldr	r0, [r7, #8]
 800a910:	f000 fbe2 	bl	800b0d8 <xQueueReceive>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d102      	bne.n	800a920 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a91a:	2310      	movs	r3, #16
 800a91c:	617b      	str	r3, [r7, #20]
 800a91e:	e006      	b.n	800a92e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <osMessageGet+0xc6>
 800a926:	2300      	movs	r3, #0
 800a928:	e000      	b.n	800a92c <osMessageGet+0xc8>
 800a92a:	2340      	movs	r3, #64	; 0x40
 800a92c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	461c      	mov	r4, r3
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a93a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	372c      	adds	r7, #44	; 0x2c
 800a942:	46bd      	mov	sp, r7
 800a944:	bd90      	pop	{r4, r7, pc}
 800a946:	bf00      	nop
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f001 f8df 	bl	800bb18 <vTaskSuspend>
  
  return osOK;
 800a95a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800a96c:	f7ff fd51 	bl	800a412 <inHandlerMode>
 800a970:	4603      	mov	r3, r0
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00e      	beq.n	800a994 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 f9f8 	bl	800bd6c <xTaskResumeFromISR>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d10b      	bne.n	800a99a <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <osThreadResume+0x40>)
 800a984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	e002      	b.n	800a99a <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f001 f98b 	bl	800bcb0 <vTaskResume>
  }
  return osOK;
 800a99a:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	e000ed04 	.word	0xe000ed04

0800a9a8 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <osDelayUntil+0x18>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	e000      	b.n	800a9c2 <osDelayUntil+0x1a>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 fff5 	bl	800b9b4 <vTaskDelayUntil>
  
  return osOK;
 800a9ca:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f103 0208 	add.w	r2, r3, #8
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f103 0208 	add.w	r2, r3, #8
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f103 0208 	add.w	r2, r3, #8
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bc80      	pop	{r7}
 800aa10:	4770      	bx	lr

0800aa12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bc80      	pop	{r7}
 800aa28:	4770      	bx	lr

0800aa2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b085      	sub	sp, #20
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	689b      	ldr	r3, [r3, #8]
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	601a      	str	r2, [r3, #0]
}
 800aa66:	bf00      	nop
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bc80      	pop	{r7}
 800aa6e:	4770      	bx	lr

0800aa70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa86:	d103      	bne.n	800aa90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e00c      	b.n	800aaaa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3308      	adds	r3, #8
 800aa94:	60fb      	str	r3, [r7, #12]
 800aa96:	e002      	b.n	800aa9e <vListInsert+0x2e>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	60fb      	str	r3, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d2f6      	bcs.n	800aa98 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	bc80      	pop	{r7}
 800aade:	4770      	bx	lr

0800aae0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	6892      	ldr	r2, [r2, #8]
 800aaf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6852      	ldr	r2, [r2, #4]
 800ab00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d103      	bne.n	800ab14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689a      	ldr	r2, [r3, #8]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr
	...

0800ab34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab5e:	f002 fd2d 	bl	800d5bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	68f9      	ldr	r1, [r7, #12]
 800ab6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab6e:	fb01 f303 	mul.w	r3, r1, r3
 800ab72:	441a      	add	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	68f9      	ldr	r1, [r7, #12]
 800ab92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab94:	fb01 f303 	mul.w	r3, r1, r3
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	22ff      	movs	r2, #255	; 0xff
 800aba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	22ff      	movs	r2, #255	; 0xff
 800abaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d114      	bne.n	800abde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d01a      	beq.n	800abf2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3310      	adds	r3, #16
 800abc0:	4618      	mov	r0, r3
 800abc2:	f001 fbdd 	bl	800c380 <xTaskRemoveFromEventList>
 800abc6:	4603      	mov	r3, r0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d012      	beq.n	800abf2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <xQueueGenericReset+0xcc>)
 800abce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	e009      	b.n	800abf2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	3310      	adds	r3, #16
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7ff fef6 	bl	800a9d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3324      	adds	r3, #36	; 0x24
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff fef1 	bl	800a9d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abf2:	f002 fd13 	bl	800d61c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abf6:	2301      	movs	r3, #1
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	e000ed04 	.word	0xe000ed04

0800ac04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08e      	sub	sp, #56	; 0x38
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
 800ac10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac46:	bf00      	nop
 800ac48:	e7fe      	b.n	800ac48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <xQueueGenericCreateStatic+0x52>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <xQueueGenericCreateStatic+0x56>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <xQueueGenericCreateStatic+0x58>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10a      	bne.n	800ac76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	623b      	str	r3, [r7, #32]
}
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d102      	bne.n	800ac82 <xQueueGenericCreateStatic+0x7e>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d101      	bne.n	800ac86 <xQueueGenericCreateStatic+0x82>
 800ac82:	2301      	movs	r3, #1
 800ac84:	e000      	b.n	800ac88 <xQueueGenericCreateStatic+0x84>
 800ac86:	2300      	movs	r3, #0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	61fb      	str	r3, [r7, #28]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aca2:	2348      	movs	r3, #72	; 0x48
 800aca4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b48      	cmp	r3, #72	; 0x48
 800acaa:	d00a      	beq.n	800acc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	61bb      	str	r3, [r7, #24]
}
 800acbe:	bf00      	nop
 800acc0:	e7fe      	b.n	800acc0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00d      	beq.n	800ace8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800accc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4613      	mov	r3, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	68b9      	ldr	r1, [r7, #8]
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 f843 	bl	800ad6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3730      	adds	r7, #48	; 0x30
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b08a      	sub	sp, #40	; 0x28
 800acf6:	af02      	add	r7, sp, #8
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	4613      	mov	r3, r2
 800acfe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	613b      	str	r3, [r7, #16]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d102      	bne.n	800ad28 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	61fb      	str	r3, [r7, #28]
 800ad26:	e004      	b.n	800ad32 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	fb02 f303 	mul.w	r3, r2, r3
 800ad30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3348      	adds	r3, #72	; 0x48
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fd40 	bl	800d7bc <pvPortMalloc>
 800ad3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00f      	beq.n	800ad64 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	3348      	adds	r3, #72	; 0x48
 800ad48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad52:	79fa      	ldrb	r2, [r7, #7]
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	68b9      	ldr	r1, [r7, #8]
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 f805 	bl	800ad6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800ad64:	69bb      	ldr	r3, [r7, #24]
	}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
 800ad7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d103      	bne.n	800ad8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	e002      	b.n	800ad90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	69b8      	ldr	r0, [r7, #24]
 800ada0:	f7ff fec8 	bl	800ab34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ada4:	bf00      	nop
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08e      	sub	sp, #56	; 0x38
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
 800adb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800adba:	2300      	movs	r3, #0
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xQueueGenericSend+0x32>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <xQueueGenericSend+0x40>
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <xQueueGenericSend+0x44>
 800adec:	2301      	movs	r3, #1
 800adee:	e000      	b.n	800adf2 <xQueueGenericSend+0x46>
 800adf0:	2300      	movs	r3, #0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10a      	bne.n	800ae0c <xQueueGenericSend+0x60>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae08:	bf00      	nop
 800ae0a:	e7fe      	b.n	800ae0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d103      	bne.n	800ae1a <xQueueGenericSend+0x6e>
 800ae12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d101      	bne.n	800ae1e <xQueueGenericSend+0x72>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e000      	b.n	800ae20 <xQueueGenericSend+0x74>
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10a      	bne.n	800ae3a <xQueueGenericSend+0x8e>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	623b      	str	r3, [r7, #32]
}
 800ae36:	bf00      	nop
 800ae38:	e7fe      	b.n	800ae38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae3a:	f001 fc65 	bl	800c708 <xTaskGetSchedulerState>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <xQueueGenericSend+0x9e>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <xQueueGenericSend+0xa2>
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	e000      	b.n	800ae50 <xQueueGenericSend+0xa4>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <xQueueGenericSend+0xbe>
	__asm volatile
 800ae54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae58:	f383 8811 	msr	BASEPRI, r3
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	61fb      	str	r3, [r7, #28]
}
 800ae66:	bf00      	nop
 800ae68:	e7fe      	b.n	800ae68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae6a:	f002 fba7 	bl	800d5bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d302      	bcc.n	800ae80 <xQueueGenericSend+0xd4>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d129      	bne.n	800aed4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae86:	f000 fa87 	bl	800b398 <prvCopyDataToQueue>
 800ae8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d010      	beq.n	800aeb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f001 fa71 	bl	800c380 <xTaskRemoveFromEventList>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d013      	beq.n	800aecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aea4:	4b3f      	ldr	r3, [pc, #252]	; (800afa4 <xQueueGenericSend+0x1f8>)
 800aea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	e00a      	b.n	800aecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aeb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aebc:	4b39      	ldr	r3, [pc, #228]	; (800afa4 <xQueueGenericSend+0x1f8>)
 800aebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aecc:	f002 fba6 	bl	800d61c <vPortExitCritical>
				return pdPASS;
 800aed0:	2301      	movs	r3, #1
 800aed2:	e063      	b.n	800af9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d103      	bne.n	800aee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeda:	f002 fb9f 	bl	800d61c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	e05c      	b.n	800af9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d106      	bne.n	800aef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aee8:	f107 0314 	add.w	r3, r7, #20
 800aeec:	4618      	mov	r0, r3
 800aeee:	f001 faa9 	bl	800c444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aef2:	2301      	movs	r3, #1
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aef6:	f002 fb91 	bl	800d61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aefa:	f001 f819 	bl	800bf30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aefe:	f002 fb5d 	bl	800d5bc <vPortEnterCritical>
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af08:	b25b      	sxtb	r3, r3
 800af0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0e:	d103      	bne.n	800af18 <xQueueGenericSend+0x16c>
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af1e:	b25b      	sxtb	r3, r3
 800af20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af24:	d103      	bne.n	800af2e <xQueueGenericSend+0x182>
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af2e:	f002 fb75 	bl	800d61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af32:	1d3a      	adds	r2, r7, #4
 800af34:	f107 0314 	add.w	r3, r7, #20
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fa98 	bl	800c470 <xTaskCheckForTimeOut>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d124      	bne.n	800af90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af48:	f000 fb1e 	bl	800b588 <prvIsQueueFull>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d018      	beq.n	800af84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	3310      	adds	r3, #16
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 f9c0 	bl	800c2e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af62:	f000 faa9 	bl	800b4b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af66:	f000 fff1 	bl	800bf4c <xTaskResumeAll>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f47f af7c 	bne.w	800ae6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af72:	4b0c      	ldr	r3, [pc, #48]	; (800afa4 <xQueueGenericSend+0x1f8>)
 800af74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	e772      	b.n	800ae6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af86:	f000 fa97 	bl	800b4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af8a:	f000 ffdf 	bl	800bf4c <xTaskResumeAll>
 800af8e:	e76c      	b.n	800ae6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af92:	f000 fa91 	bl	800b4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af96:	f000 ffd9 	bl	800bf4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af9a:	2300      	movs	r3, #0
		}
	}
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3738      	adds	r7, #56	; 0x38
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	e000ed04 	.word	0xe000ed04

0800afa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08e      	sub	sp, #56	; 0x38
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d103      	bne.n	800afe4 <xQueueGenericSendFromISR+0x3c>
 800afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <xQueueGenericSendFromISR+0x40>
 800afe4:	2301      	movs	r3, #1
 800afe6:	e000      	b.n	800afea <xQueueGenericSendFromISR+0x42>
 800afe8:	2300      	movs	r3, #0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	623b      	str	r3, [r7, #32]
}
 800b000:	bf00      	nop
 800b002:	e7fe      	b.n	800b002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d103      	bne.n	800b012 <xQueueGenericSendFromISR+0x6a>
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d101      	bne.n	800b016 <xQueueGenericSendFromISR+0x6e>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <xQueueGenericSendFromISR+0x70>
 800b016:	2300      	movs	r3, #0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10a      	bne.n	800b032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b020:	f383 8811 	msr	BASEPRI, r3
 800b024:	f3bf 8f6f 	isb	sy
 800b028:	f3bf 8f4f 	dsb	sy
 800b02c:	61fb      	str	r3, [r7, #28]
}
 800b02e:	bf00      	nop
 800b030:	e7fe      	b.n	800b030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b032:	f002 fb85 	bl	800d740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b036:	f3ef 8211 	mrs	r2, BASEPRI
 800b03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	61ba      	str	r2, [r7, #24]
 800b04c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b04e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d302      	bcc.n	800b064 <xQueueGenericSendFromISR+0xbc>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b02      	cmp	r3, #2
 800b062:	d12c      	bne.n	800b0be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b074:	f000 f990 	bl	800b398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b078:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b07c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b080:	d112      	bne.n	800b0a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	2b00      	cmp	r3, #0
 800b088:	d016      	beq.n	800b0b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08c:	3324      	adds	r3, #36	; 0x24
 800b08e:	4618      	mov	r0, r3
 800b090:	f001 f976 	bl	800c380 <xTaskRemoveFromEventList>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00e      	beq.n	800b0b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	e007      	b.n	800b0b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	b25a      	sxtb	r2, r3
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b0bc:	e001      	b.n	800b0c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3738      	adds	r7, #56	; 0x38
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08c      	sub	sp, #48	; 0x30
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d10a      	bne.n	800b108 <xQueueReceive+0x30>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	623b      	str	r3, [r7, #32]
}
 800b104:	bf00      	nop
 800b106:	e7fe      	b.n	800b106 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d103      	bne.n	800b116 <xQueueReceive+0x3e>
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b112:	2b00      	cmp	r3, #0
 800b114:	d101      	bne.n	800b11a <xQueueReceive+0x42>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <xQueueReceive+0x44>
 800b11a:	2300      	movs	r3, #0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10a      	bne.n	800b136 <xQueueReceive+0x5e>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	61fb      	str	r3, [r7, #28]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b136:	f001 fae7 	bl	800c708 <xTaskGetSchedulerState>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <xQueueReceive+0x6e>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <xQueueReceive+0x72>
 800b146:	2301      	movs	r3, #1
 800b148:	e000      	b.n	800b14c <xQueueReceive+0x74>
 800b14a:	2300      	movs	r3, #0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d10a      	bne.n	800b166 <xQueueReceive+0x8e>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	f383 8811 	msr	BASEPRI, r3
 800b158:	f3bf 8f6f 	isb	sy
 800b15c:	f3bf 8f4f 	dsb	sy
 800b160:	61bb      	str	r3, [r7, #24]
}
 800b162:	bf00      	nop
 800b164:	e7fe      	b.n	800b164 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800b166:	f002 fa29 	bl	800d5bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b172:	2b00      	cmp	r3, #0
 800b174:	d01f      	beq.n	800b1b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b17a:	f000 f977 	bl	800b46c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	1e5a      	subs	r2, r3, #1
 800b182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b184:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b188:	691b      	ldr	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00f      	beq.n	800b1ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	3310      	adds	r3, #16
 800b192:	4618      	mov	r0, r3
 800b194:	f001 f8f4 	bl	800c380 <xTaskRemoveFromEventList>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d007      	beq.n	800b1ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b19e:	4b3d      	ldr	r3, [pc, #244]	; (800b294 <xQueueReceive+0x1bc>)
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1ae:	f002 fa35 	bl	800d61c <vPortExitCritical>
				return pdPASS;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e069      	b.n	800b28a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d103      	bne.n	800b1c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1bc:	f002 fa2e 	bl	800d61c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e062      	b.n	800b28a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d106      	bne.n	800b1d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1ca:	f107 0310 	add.w	r3, r7, #16
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 f938 	bl	800c444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1d8:	f002 fa20 	bl	800d61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1dc:	f000 fea8 	bl	800bf30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1e0:	f002 f9ec 	bl	800d5bc <vPortEnterCritical>
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1ea:	b25b      	sxtb	r3, r3
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f0:	d103      	bne.n	800b1fa <xQueueReceive+0x122>
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b200:	b25b      	sxtb	r3, r3
 800b202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b206:	d103      	bne.n	800b210 <xQueueReceive+0x138>
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b210:	f002 fa04 	bl	800d61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b214:	1d3a      	adds	r2, r7, #4
 800b216:	f107 0310 	add.w	r3, r7, #16
 800b21a:	4611      	mov	r1, r2
 800b21c:	4618      	mov	r0, r3
 800b21e:	f001 f927 	bl	800c470 <xTaskCheckForTimeOut>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d123      	bne.n	800b270 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22a:	f000 f997 	bl	800b55c <prvIsQueueEmpty>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d017      	beq.n	800b264 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	3324      	adds	r3, #36	; 0x24
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	4611      	mov	r1, r2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 f84f 	bl	800c2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b244:	f000 f938 	bl	800b4b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b248:	f000 fe80 	bl	800bf4c <xTaskResumeAll>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d189      	bne.n	800b166 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b252:	4b10      	ldr	r3, [pc, #64]	; (800b294 <xQueueReceive+0x1bc>)
 800b254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	e780      	b.n	800b166 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b266:	f000 f927 	bl	800b4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b26a:	f000 fe6f 	bl	800bf4c <xTaskResumeAll>
 800b26e:	e77a      	b.n	800b166 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b272:	f000 f921 	bl	800b4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b276:	f000 fe69 	bl	800bf4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b27c:	f000 f96e 	bl	800b55c <prvIsQueueEmpty>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	f43f af6f 	beq.w	800b166 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3730      	adds	r7, #48	; 0x30
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	e000ed04 	.word	0xe000ed04

0800b298 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08e      	sub	sp, #56	; 0x38
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	623b      	str	r3, [r7, #32]
}
 800b2c0:	bf00      	nop
 800b2c2:	e7fe      	b.n	800b2c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d103      	bne.n	800b2d2 <xQueueReceiveFromISR+0x3a>
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <xQueueReceiveFromISR+0x3e>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <xQueueReceiveFromISR+0x40>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10a      	bne.n	800b2f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	61fb      	str	r3, [r7, #28]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2f2:	f002 fa25 	bl	800d740 <vPortValidateInterruptPriority>
	__asm volatile
 800b2f6:	f3ef 8211 	mrs	r2, BASEPRI
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	61ba      	str	r2, [r7, #24]
 800b30c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b30e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b310:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d02f      	beq.n	800b37e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b328:	68b9      	ldr	r1, [r7, #8]
 800b32a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b32c:	f000 f89e 	bl	800b46c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b332:	1e5a      	subs	r2, r3, #1
 800b334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b336:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b338:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b340:	d112      	bne.n	800b368 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b344:	691b      	ldr	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d016      	beq.n	800b378 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	3310      	adds	r3, #16
 800b34e:	4618      	mov	r0, r3
 800b350:	f001 f816 	bl	800c380 <xTaskRemoveFromEventList>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00e      	beq.n	800b378 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00b      	beq.n	800b378 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	e007      	b.n	800b378 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b36c:	3301      	adds	r3, #1
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	b25a      	sxtb	r2, r3
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b378:	2301      	movs	r3, #1
 800b37a:	637b      	str	r3, [r7, #52]	; 0x34
 800b37c:	e001      	b.n	800b382 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b37e:	2300      	movs	r3, #0
 800b380:	637b      	str	r3, [r7, #52]	; 0x34
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f383 8811 	msr	BASEPRI, r3
}
 800b38c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b390:	4618      	mov	r0, r3
 800b392:	3738      	adds	r7, #56	; 0x38
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	60b9      	str	r1, [r7, #8]
 800b3a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d10d      	bne.n	800b3d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d14d      	bne.n	800b45a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f001 f9be 	bl	800c744 <xTaskPriorityDisinherit>
 800b3c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	605a      	str	r2, [r3, #4]
 800b3d0:	e043      	b.n	800b45a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d119      	bne.n	800b40c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6898      	ldr	r0, [r3, #8]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	68b9      	ldr	r1, [r7, #8]
 800b3e4:	f002 fd4e 	bl	800de84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	689a      	ldr	r2, [r3, #8]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f0:	441a      	add	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d32b      	bcc.n	800b45a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	609a      	str	r2, [r3, #8]
 800b40a:	e026      	b.n	800b45a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	68d8      	ldr	r0, [r3, #12]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b414:	461a      	mov	r2, r3
 800b416:	68b9      	ldr	r1, [r7, #8]
 800b418:	f002 fd34 	bl	800de84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b424:	425b      	negs	r3, r3
 800b426:	441a      	add	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	68da      	ldr	r2, [r3, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	429a      	cmp	r2, r3
 800b436:	d207      	bcs.n	800b448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b440:	425b      	negs	r3, r3
 800b442:	441a      	add	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d105      	bne.n	800b45a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3b01      	subs	r3, #1
 800b458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b462:	697b      	ldr	r3, [r7, #20]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d018      	beq.n	800b4b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68da      	ldr	r2, [r3, #12]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b486:	441a      	add	r2, r3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68da      	ldr	r2, [r3, #12]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	429a      	cmp	r2, r3
 800b496:	d303      	bcc.n	800b4a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68d9      	ldr	r1, [r3, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	6838      	ldr	r0, [r7, #0]
 800b4ac:	f002 fcea 	bl	800de84 <memcpy>
	}
}
 800b4b0:	bf00      	nop
 800b4b2:	3708      	adds	r7, #8
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b4c0:	f002 f87c 	bl	800d5bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4cc:	e011      	b.n	800b4f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d012      	beq.n	800b4fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3324      	adds	r3, #36	; 0x24
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 ff50 	bl	800c380 <xTaskRemoveFromEventList>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b4e6:	f001 f825 	bl	800c534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dce9      	bgt.n	800b4ce <prvUnlockQueue+0x16>
 800b4fa:	e000      	b.n	800b4fe <prvUnlockQueue+0x46>
					break;
 800b4fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	22ff      	movs	r2, #255	; 0xff
 800b502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b506:	f002 f889 	bl	800d61c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b50a:	f002 f857 	bl	800d5bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b516:	e011      	b.n	800b53c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d012      	beq.n	800b546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3310      	adds	r3, #16
 800b524:	4618      	mov	r0, r3
 800b526:	f000 ff2b 	bl	800c380 <xTaskRemoveFromEventList>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b530:	f001 f800 	bl	800c534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b534:	7bbb      	ldrb	r3, [r7, #14]
 800b536:	3b01      	subs	r3, #1
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b53c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b540:	2b00      	cmp	r3, #0
 800b542:	dce9      	bgt.n	800b518 <prvUnlockQueue+0x60>
 800b544:	e000      	b.n	800b548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	22ff      	movs	r2, #255	; 0xff
 800b54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b550:	f002 f864 	bl	800d61c <vPortExitCritical>
}
 800b554:	bf00      	nop
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b564:	f002 f82a 	bl	800d5bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b570:	2301      	movs	r3, #1
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	e001      	b.n	800b57a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b57a:	f002 f84f 	bl	800d61c <vPortExitCritical>

	return xReturn;
 800b57e:	68fb      	ldr	r3, [r7, #12]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b590:	f002 f814 	bl	800d5bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d102      	bne.n	800b5a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e001      	b.n	800b5aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5aa:	f002 f837 	bl	800d61c <vPortExitCritical>

	return xReturn;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3710      	adds	r7, #16
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	60fb      	str	r3, [r7, #12]
 800b5c6:	e014      	b.n	800b5f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5c8:	4a0e      	ldr	r2, [pc, #56]	; (800b604 <vQueueAddToRegistry+0x4c>)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5d4:	490b      	ldr	r1, [pc, #44]	; (800b604 <vQueueAddToRegistry+0x4c>)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5de:	4a09      	ldr	r2, [pc, #36]	; (800b604 <vQueueAddToRegistry+0x4c>)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	4413      	add	r3, r2
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b5ea:	e006      	b.n	800b5fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	60fb      	str	r3, [r7, #12]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b07      	cmp	r3, #7
 800b5f6:	d9e7      	bls.n	800b5c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bc80      	pop	{r7}
 800b602:	4770      	bx	lr
 800b604:	20001748 	.word	0x20001748

0800b608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b618:	f001 ffd0 	bl	800d5bc <vPortEnterCritical>
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b622:	b25b      	sxtb	r3, r3
 800b624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b628:	d103      	bne.n	800b632 <vQueueWaitForMessageRestricted+0x2a>
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b638:	b25b      	sxtb	r3, r3
 800b63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b63e:	d103      	bne.n	800b648 <vQueueWaitForMessageRestricted+0x40>
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b648:	f001 ffe8 	bl	800d61c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	2b00      	cmp	r3, #0
 800b652:	d106      	bne.n	800b662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	3324      	adds	r3, #36	; 0x24
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	68b9      	ldr	r1, [r7, #8]
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fe63 	bl	800c328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b662:	6978      	ldr	r0, [r7, #20]
 800b664:	f7ff ff28 	bl	800b4b8 <prvUnlockQueue>
	}
 800b668:	bf00      	nop
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08e      	sub	sp, #56	; 0x38
 800b674:	af04      	add	r7, sp, #16
 800b676:	60f8      	str	r0, [r7, #12]
 800b678:	60b9      	str	r1, [r7, #8]
 800b67a:	607a      	str	r2, [r7, #4]
 800b67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10a      	bne.n	800b69a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	623b      	str	r3, [r7, #32]
}
 800b696:	bf00      	nop
 800b698:	e7fe      	b.n	800b698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	61fb      	str	r3, [r7, #28]
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6b6:	23a0      	movs	r3, #160	; 0xa0
 800b6b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2ba0      	cmp	r3, #160	; 0xa0
 800b6be:	d00a      	beq.n	800b6d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	61bb      	str	r3, [r7, #24]
}
 800b6d2:	bf00      	nop
 800b6d4:	e7fe      	b.n	800b6d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01e      	beq.n	800b71a <xTaskCreateStatic+0xaa>
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d01b      	beq.n	800b71a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	9302      	str	r3, [sp, #8]
 800b6fc:	f107 0314 	add.w	r3, r7, #20
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f851 	bl	800b7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b714:	f000 f8e4 	bl	800b8e0 <prvAddNewTaskToReadyList>
 800b718:	e001      	b.n	800b71e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b71e:	697b      	ldr	r3, [r7, #20]
	}
 800b720:	4618      	mov	r0, r3
 800b722:	3728      	adds	r7, #40	; 0x28
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08c      	sub	sp, #48	; 0x30
 800b72c:	af04      	add	r7, sp, #16
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	603b      	str	r3, [r7, #0]
 800b734:	4613      	mov	r3, r2
 800b736:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f002 f83d 	bl	800d7bc <pvPortMalloc>
 800b742:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00e      	beq.n	800b768 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b74a:	20a0      	movs	r0, #160	; 0xa0
 800b74c:	f002 f836 	bl	800d7bc <pvPortMalloc>
 800b750:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	631a      	str	r2, [r3, #48]	; 0x30
 800b75e:	e005      	b.n	800b76c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b760:	6978      	ldr	r0, [r7, #20]
 800b762:	f002 f8ef 	bl	800d944 <vPortFree>
 800b766:	e001      	b.n	800b76c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d017      	beq.n	800b7a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b77a:	88fa      	ldrh	r2, [r7, #6]
 800b77c:	2300      	movs	r3, #0
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 f80f 	bl	800b7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b796:	69f8      	ldr	r0, [r7, #28]
 800b798:	f000 f8a2 	bl	800b8e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b79c:	2301      	movs	r3, #1
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	e002      	b.n	800b7a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7a8:	69bb      	ldr	r3, [r7, #24]
	}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	f003 0307 	and.w	r3, r3, #7
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d00a      	beq.n	800b7fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	617b      	str	r3, [r7, #20]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	e012      	b.n	800b828 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	7819      	ldrb	r1, [r3, #0]
 800b80a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	4413      	add	r3, r2
 800b810:	3334      	adds	r3, #52	; 0x34
 800b812:	460a      	mov	r2, r1
 800b814:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	4413      	add	r3, r2
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d006      	beq.n	800b830 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	3301      	adds	r3, #1
 800b826:	61fb      	str	r3, [r7, #28]
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	2b0f      	cmp	r3, #15
 800b82c:	d9e9      	bls.n	800b802 <prvInitialiseNewTask+0x4e>
 800b82e:	e000      	b.n	800b832 <prvInitialiseNewTask+0x7e>
		{
			break;
 800b830:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2b06      	cmp	r3, #6
 800b83e:	d901      	bls.n	800b844 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b840:	2306      	movs	r3, #6
 800b842:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b848:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b84e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b852:	2200      	movs	r2, #0
 800b854:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f8d9 	bl	800aa12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	3318      	adds	r3, #24
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff f8d4 	bl	800aa12 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b86e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	f1c3 0207 	rsb	r2, r3, #7
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	2200      	movs	r2, #0
 800b884:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	334c      	adds	r3, #76	; 0x4c
 800b894:	224c      	movs	r2, #76	; 0x4c
 800b896:	2100      	movs	r1, #0
 800b898:	4618      	mov	r0, r3
 800b89a:	f002 fa3b 	bl	800dd14 <memset>
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <prvInitialiseNewTask+0x120>)
 800b8a2:	651a      	str	r2, [r3, #80]	; 0x50
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	4a0c      	ldr	r2, [pc, #48]	; (800b8d8 <prvInitialiseNewTask+0x124>)
 800b8a8:	655a      	str	r2, [r3, #84]	; 0x54
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	4a0b      	ldr	r2, [pc, #44]	; (800b8dc <prvInitialiseNewTask+0x128>)
 800b8ae:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	68f9      	ldr	r1, [r7, #12]
 800b8b4:	69b8      	ldr	r0, [r7, #24]
 800b8b6:	f001 fd93 	bl	800d3e0 <pxPortInitialiseStack>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8cc:	bf00      	nop
 800b8ce:	3720      	adds	r7, #32
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	20002dd8 	.word	0x20002dd8
 800b8d8:	20002e40 	.word	0x20002e40
 800b8dc:	20002ea8 	.word	0x20002ea8

0800b8e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b8e8:	f001 fe68 	bl	800d5bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b8ec:	4b2a      	ldr	r3, [pc, #168]	; (800b998 <prvAddNewTaskToReadyList+0xb8>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	4a29      	ldr	r2, [pc, #164]	; (800b998 <prvAddNewTaskToReadyList+0xb8>)
 800b8f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b8f6:	4b29      	ldr	r3, [pc, #164]	; (800b99c <prvAddNewTaskToReadyList+0xbc>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d109      	bne.n	800b912 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b8fe:	4a27      	ldr	r2, [pc, #156]	; (800b99c <prvAddNewTaskToReadyList+0xbc>)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b904:	4b24      	ldr	r3, [pc, #144]	; (800b998 <prvAddNewTaskToReadyList+0xb8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d110      	bne.n	800b92e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b90c:	f000 fe36 	bl	800c57c <prvInitialiseTaskLists>
 800b910:	e00d      	b.n	800b92e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b912:	4b23      	ldr	r3, [pc, #140]	; (800b9a0 <prvAddNewTaskToReadyList+0xc0>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d109      	bne.n	800b92e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b91a:	4b20      	ldr	r3, [pc, #128]	; (800b99c <prvAddNewTaskToReadyList+0xbc>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	429a      	cmp	r2, r3
 800b926:	d802      	bhi.n	800b92e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b928:	4a1c      	ldr	r2, [pc, #112]	; (800b99c <prvAddNewTaskToReadyList+0xbc>)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b92e:	4b1d      	ldr	r3, [pc, #116]	; (800b9a4 <prvAddNewTaskToReadyList+0xc4>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3301      	adds	r3, #1
 800b934:	4a1b      	ldr	r2, [pc, #108]	; (800b9a4 <prvAddNewTaskToReadyList+0xc4>)
 800b936:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b93c:	2201      	movs	r2, #1
 800b93e:	409a      	lsls	r2, r3
 800b940:	4b19      	ldr	r3, [pc, #100]	; (800b9a8 <prvAddNewTaskToReadyList+0xc8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4313      	orrs	r3, r2
 800b946:	4a18      	ldr	r2, [pc, #96]	; (800b9a8 <prvAddNewTaskToReadyList+0xc8>)
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b94e:	4613      	mov	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	4a15      	ldr	r2, [pc, #84]	; (800b9ac <prvAddNewTaskToReadyList+0xcc>)
 800b958:	441a      	add	r2, r3
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	3304      	adds	r3, #4
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f7ff f862 	bl	800aa2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b966:	f001 fe59 	bl	800d61c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b96a:	4b0d      	ldr	r3, [pc, #52]	; (800b9a0 <prvAddNewTaskToReadyList+0xc0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00e      	beq.n	800b990 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <prvAddNewTaskToReadyList+0xbc>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d207      	bcs.n	800b990 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b980:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <prvAddNewTaskToReadyList+0xd0>)
 800b982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b986:	601a      	str	r2, [r3, #0]
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20001888 	.word	0x20001888
 800b99c:	20001788 	.word	0x20001788
 800b9a0:	20001894 	.word	0x20001894
 800b9a4:	200018a4 	.word	0x200018a4
 800b9a8:	20001890 	.word	0x20001890
 800b9ac:	2000178c 	.word	0x2000178c
 800b9b0:	e000ed04 	.word	0xe000ed04

0800b9b4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	; 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <vTaskDelayUntil+0x2a>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	617b      	str	r3, [r7, #20]
}
 800b9da:	bf00      	nop
 800b9dc:	e7fe      	b.n	800b9dc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <vTaskDelayUntil+0x46>
	__asm volatile
 800b9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	613b      	str	r3, [r7, #16]
}
 800b9f6:	bf00      	nop
 800b9f8:	e7fe      	b.n	800b9f8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b9fa:	4b2a      	ldr	r3, [pc, #168]	; (800baa4 <vTaskDelayUntil+0xf0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00a      	beq.n	800ba18 <vTaskDelayUntil+0x64>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60fb      	str	r3, [r7, #12]
}
 800ba14:	bf00      	nop
 800ba16:	e7fe      	b.n	800ba16 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ba18:	f000 fa8a 	bl	800bf30 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ba1c:	4b22      	ldr	r3, [pc, #136]	; (800baa8 <vTaskDelayUntil+0xf4>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	4413      	add	r3, r2
 800ba2a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6a3a      	ldr	r2, [r7, #32]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d20b      	bcs.n	800ba4e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	69fa      	ldr	r2, [r7, #28]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d211      	bcs.n	800ba64 <vTaskDelayUntil+0xb0>
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d90d      	bls.n	800ba64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba4c:	e00a      	b.n	800ba64 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d303      	bcc.n	800ba60 <vTaskDelayUntil+0xac>
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d901      	bls.n	800ba64 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	69fa      	ldr	r2, [r7, #28]
 800ba68:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d006      	beq.n	800ba7e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ba70:	69fa      	ldr	r2, [r7, #28]
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	2100      	movs	r1, #0
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 f8c3 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ba7e:	f000 fa65 	bl	800bf4c <xTaskResumeAll>
 800ba82:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d107      	bne.n	800ba9a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ba8a:	4b08      	ldr	r3, [pc, #32]	; (800baac <vTaskDelayUntil+0xf8>)
 800ba8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba90:	601a      	str	r2, [r3, #0]
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba9a:	bf00      	nop
 800ba9c:	3728      	adds	r7, #40	; 0x28
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	200018b0 	.word	0x200018b0
 800baa8:	2000188c 	.word	0x2000188c
 800baac:	e000ed04 	.word	0xe000ed04

0800bab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d017      	beq.n	800baf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bac2:	4b13      	ldr	r3, [pc, #76]	; (800bb10 <vTaskDelay+0x60>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <vTaskDelay+0x30>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	60bb      	str	r3, [r7, #8]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bae0:	f000 fa26 	bl	800bf30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bae4:	2100      	movs	r1, #0
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f001 f88c 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800baec:	f000 fa2e 	bl	800bf4c <xTaskResumeAll>
 800baf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d107      	bne.n	800bb08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <vTaskDelay+0x64>)
 800bafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafe:	601a      	str	r2, [r3, #0]
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	200018b0 	.word	0x200018b0
 800bb14:	e000ed04 	.word	0xe000ed04

0800bb18 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bb20:	f001 fd4c 	bl	800d5bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <vTaskSuspend+0x18>
 800bb2a:	4b3c      	ldr	r3, [pc, #240]	; (800bc1c <vTaskSuspend+0x104>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	e000      	b.n	800bb32 <vTaskSuspend+0x1a>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3304      	adds	r3, #4
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe ffd1 	bl	800aae0 <uxListRemove>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d115      	bne.n	800bb70 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb48:	4935      	ldr	r1, [pc, #212]	; (800bc20 <vTaskSuspend+0x108>)
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d10a      	bne.n	800bb70 <vTaskSuspend+0x58>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5e:	2201      	movs	r2, #1
 800bb60:	fa02 f303 	lsl.w	r3, r2, r3
 800bb64:	43da      	mvns	r2, r3
 800bb66:	4b2f      	ldr	r3, [pc, #188]	; (800bc24 <vTaskSuspend+0x10c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	4a2d      	ldr	r2, [pc, #180]	; (800bc24 <vTaskSuspend+0x10c>)
 800bb6e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d004      	beq.n	800bb82 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3318      	adds	r3, #24
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe ffaf 	bl	800aae0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4619      	mov	r1, r3
 800bb88:	4827      	ldr	r0, [pc, #156]	; (800bc28 <vTaskSuspend+0x110>)
 800bb8a:	f7fe ff4e 	bl	800aa2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d103      	bne.n	800bba2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800bba2:	f001 fd3b 	bl	800d61c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800bba6:	4b21      	ldr	r3, [pc, #132]	; (800bc2c <vTaskSuspend+0x114>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d005      	beq.n	800bbba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800bbae:	f001 fd05 	bl	800d5bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800bbb2:	f000 fd85 	bl	800c6c0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800bbb6:	f001 fd31 	bl	800d61c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800bbba:	4b18      	ldr	r3, [pc, #96]	; (800bc1c <vTaskSuspend+0x104>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d127      	bne.n	800bc14 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800bbc4:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <vTaskSuspend+0x114>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d017      	beq.n	800bbfc <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800bbcc:	4b18      	ldr	r3, [pc, #96]	; (800bc30 <vTaskSuspend+0x118>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00a      	beq.n	800bbea <vTaskSuspend+0xd2>
	__asm volatile
 800bbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd8:	f383 8811 	msr	BASEPRI, r3
 800bbdc:	f3bf 8f6f 	isb	sy
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	60bb      	str	r3, [r7, #8]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <vTaskSuspend+0x11c>)
 800bbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf0:	601a      	str	r2, [r3, #0]
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbfa:	e00b      	b.n	800bc14 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <vTaskSuspend+0x110>)
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <vTaskSuspend+0x120>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d103      	bne.n	800bc10 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800bc08:	4b04      	ldr	r3, [pc, #16]	; (800bc1c <vTaskSuspend+0x104>)
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]
	}
 800bc0e:	e001      	b.n	800bc14 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800bc10:	f000 fb04 	bl	800c21c <vTaskSwitchContext>
	}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	20001788 	.word	0x20001788
 800bc20:	2000178c 	.word	0x2000178c
 800bc24:	20001890 	.word	0x20001890
 800bc28:	20001874 	.word	0x20001874
 800bc2c:	20001894 	.word	0x20001894
 800bc30:	200018b0 	.word	0x200018b0
 800bc34:	e000ed04 	.word	0xe000ed04
 800bc38:	20001888 	.word	0x20001888

0800bc3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800bc44:	2300      	movs	r3, #0
 800bc46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	60fb      	str	r3, [r7, #12]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	4a0e      	ldr	r2, [pc, #56]	; (800bca8 <prvTaskIsTaskSuspended+0x6c>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d101      	bne.n	800bc76 <prvTaskIsTaskSuspended+0x3a>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <prvTaskIsTaskSuspended+0x3c>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00f      	beq.n	800bc9c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc80:	4a0a      	ldr	r2, [pc, #40]	; (800bcac <prvTaskIsTaskSuspended+0x70>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d00a      	beq.n	800bc9c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <prvTaskIsTaskSuspended+0x56>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <prvTaskIsTaskSuspended+0x58>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc9c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800bc9e:	4618      	mov	r0, r3
 800bca0:	371c      	adds	r7, #28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr
 800bca8:	20001874 	.word	0x20001874
 800bcac:	20001848 	.word	0x20001848

0800bcb0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d10a      	bne.n	800bcd8 <vTaskResume+0x28>
	__asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	60bb      	str	r3, [r7, #8]
}
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d039      	beq.n	800bd52 <vTaskResume+0xa2>
 800bcde:	4b1f      	ldr	r3, [pc, #124]	; (800bd5c <vTaskResume+0xac>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d034      	beq.n	800bd52 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800bce8:	f001 fc68 	bl	800d5bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7ff ffa5 	bl	800bc3c <prvTaskIsTaskSuspended>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d02a      	beq.n	800bd4e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	3304      	adds	r3, #4
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe feef 	bl	800aae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd06:	2201      	movs	r2, #1
 800bd08:	409a      	lsls	r2, r3
 800bd0a:	4b15      	ldr	r3, [pc, #84]	; (800bd60 <vTaskResume+0xb0>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	4a13      	ldr	r2, [pc, #76]	; (800bd60 <vTaskResume+0xb0>)
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd18:	4613      	mov	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	4413      	add	r3, r2
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	4a10      	ldr	r2, [pc, #64]	; (800bd64 <vTaskResume+0xb4>)
 800bd22:	441a      	add	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fe fe7d 	bl	800aa2a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <vTaskResume+0xac>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d307      	bcc.n	800bd4e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <vTaskResume+0xb8>)
 800bd40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800bd4e:	f001 fc65 	bl	800d61c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20001788 	.word	0x20001788
 800bd60:	20001890 	.word	0x20001890
 800bd64:	2000178c 	.word	0x2000178c
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08a      	sub	sp, #40	; 0x28
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800bd74:	2300      	movs	r3, #0
 800bd76:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	61bb      	str	r3, [r7, #24]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd98:	f001 fcd2 	bl	800d740 <vPortValidateInterruptPriority>
	__asm volatile
 800bd9c:	f3ef 8211 	mrs	r2, BASEPRI
 800bda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	617a      	str	r2, [r7, #20]
 800bdb2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bdb4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdb6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800bdb8:	6a38      	ldr	r0, [r7, #32]
 800bdba:	f7ff ff3f 	bl	800bc3c <prvTaskIsTaskSuspended>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d02f      	beq.n	800be24 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc4:	4b1d      	ldr	r3, [pc, #116]	; (800be3c <xTaskResumeFromISR+0xd0>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d125      	bne.n	800be18 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <xTaskResumeFromISR+0xd4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d301      	bcc.n	800bdde <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800bdda:	2301      	movs	r3, #1
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fe7c 	bl	800aae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	2201      	movs	r2, #1
 800bdee:	409a      	lsls	r2, r3
 800bdf0:	4b14      	ldr	r3, [pc, #80]	; (800be44 <xTaskResumeFromISR+0xd8>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	4a13      	ldr	r2, [pc, #76]	; (800be44 <xTaskResumeFromISR+0xd8>)
 800bdf8:	6013      	str	r3, [r2, #0]
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	4a10      	ldr	r2, [pc, #64]	; (800be48 <xTaskResumeFromISR+0xdc>)
 800be08:	441a      	add	r2, r3
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	3304      	adds	r3, #4
 800be0e:	4619      	mov	r1, r3
 800be10:	4610      	mov	r0, r2
 800be12:	f7fe fe0a 	bl	800aa2a <vListInsertEnd>
 800be16:	e005      	b.n	800be24 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	3318      	adds	r3, #24
 800be1c:	4619      	mov	r1, r3
 800be1e:	480b      	ldr	r0, [pc, #44]	; (800be4c <xTaskResumeFromISR+0xe0>)
 800be20:	f7fe fe03 	bl	800aa2a <vListInsertEnd>
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f383 8811 	msr	BASEPRI, r3
}
 800be2e:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800be32:	4618      	mov	r0, r3
 800be34:	3728      	adds	r7, #40	; 0x28
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	200018b0 	.word	0x200018b0
 800be40:	20001788 	.word	0x20001788
 800be44:	20001890 	.word	0x20001890
 800be48:	2000178c 	.word	0x2000178c
 800be4c:	20001848 	.word	0x20001848

0800be50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08a      	sub	sp, #40	; 0x28
 800be54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be56:	2300      	movs	r3, #0
 800be58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be5e:	463a      	mov	r2, r7
 800be60:	1d39      	adds	r1, r7, #4
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	4618      	mov	r0, r3
 800be68:	f7f6 f854 	bl	8001f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be6c:	6839      	ldr	r1, [r7, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	9202      	str	r2, [sp, #8]
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	2300      	movs	r3, #0
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	2300      	movs	r3, #0
 800be7c:	460a      	mov	r2, r1
 800be7e:	4924      	ldr	r1, [pc, #144]	; (800bf10 <vTaskStartScheduler+0xc0>)
 800be80:	4824      	ldr	r0, [pc, #144]	; (800bf14 <vTaskStartScheduler+0xc4>)
 800be82:	f7ff fbf5 	bl	800b670 <xTaskCreateStatic>
 800be86:	4603      	mov	r3, r0
 800be88:	4a23      	ldr	r2, [pc, #140]	; (800bf18 <vTaskStartScheduler+0xc8>)
 800be8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be8c:	4b22      	ldr	r3, [pc, #136]	; (800bf18 <vTaskStartScheduler+0xc8>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be94:	2301      	movs	r3, #1
 800be96:	617b      	str	r3, [r7, #20]
 800be98:	e001      	b.n	800be9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d102      	bne.n	800beaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bea4:	f000 ff14 	bl	800ccd0 <xTimerCreateTimerTask>
 800bea8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d11b      	bne.n	800bee8 <vTaskStartScheduler+0x98>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bec4:	4b15      	ldr	r3, [pc, #84]	; (800bf1c <vTaskStartScheduler+0xcc>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	334c      	adds	r3, #76	; 0x4c
 800beca:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <vTaskStartScheduler+0xd0>)
 800becc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <vTaskStartScheduler+0xd4>)
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bed6:	4b14      	ldr	r3, [pc, #80]	; (800bf28 <vTaskStartScheduler+0xd8>)
 800bed8:	2201      	movs	r2, #1
 800beda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800bedc:	4b13      	ldr	r3, [pc, #76]	; (800bf2c <vTaskStartScheduler+0xdc>)
 800bede:	2200      	movs	r2, #0
 800bee0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bee2:	f001 faf9 	bl	800d4d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bee6:	e00e      	b.n	800bf06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beee:	d10a      	bne.n	800bf06 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60fb      	str	r3, [r7, #12]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <vTaskStartScheduler+0xb4>
}
 800bf06:	bf00      	nop
 800bf08:	3718      	adds	r7, #24
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	0800e988 	.word	0x0800e988
 800bf14:	0800c54d 	.word	0x0800c54d
 800bf18:	200018ac 	.word	0x200018ac
 800bf1c:	20001788 	.word	0x20001788
 800bf20:	2000025c 	.word	0x2000025c
 800bf24:	200018a8 	.word	0x200018a8
 800bf28:	20001894 	.word	0x20001894
 800bf2c:	2000188c 	.word	0x2000188c

0800bf30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf34:	4b04      	ldr	r3, [pc, #16]	; (800bf48 <vTaskSuspendAll+0x18>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	3301      	adds	r3, #1
 800bf3a:	4a03      	ldr	r2, [pc, #12]	; (800bf48 <vTaskSuspendAll+0x18>)
 800bf3c:	6013      	str	r3, [r2, #0]
}
 800bf3e:	bf00      	nop
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bc80      	pop	{r7}
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	200018b0 	.word	0x200018b0

0800bf4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf52:	2300      	movs	r3, #0
 800bf54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf56:	2300      	movs	r3, #0
 800bf58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf5a:	4b41      	ldr	r3, [pc, #260]	; (800c060 <xTaskResumeAll+0x114>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <xTaskResumeAll+0x2c>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	603b      	str	r3, [r7, #0]
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf78:	f001 fb20 	bl	800d5bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf7c:	4b38      	ldr	r3, [pc, #224]	; (800c060 <xTaskResumeAll+0x114>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	4a37      	ldr	r2, [pc, #220]	; (800c060 <xTaskResumeAll+0x114>)
 800bf84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf86:	4b36      	ldr	r3, [pc, #216]	; (800c060 <xTaskResumeAll+0x114>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d161      	bne.n	800c052 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf8e:	4b35      	ldr	r3, [pc, #212]	; (800c064 <xTaskResumeAll+0x118>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d05d      	beq.n	800c052 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf96:	e02e      	b.n	800bff6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bf98:	4b33      	ldr	r3, [pc, #204]	; (800c068 <xTaskResumeAll+0x11c>)
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3318      	adds	r3, #24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fe fd9b 	bl	800aae0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fd96 	bl	800aae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	2201      	movs	r2, #1
 800bfba:	409a      	lsls	r2, r3
 800bfbc:	4b2b      	ldr	r3, [pc, #172]	; (800c06c <xTaskResumeAll+0x120>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	4a2a      	ldr	r2, [pc, #168]	; (800c06c <xTaskResumeAll+0x120>)
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4a27      	ldr	r2, [pc, #156]	; (800c070 <xTaskResumeAll+0x124>)
 800bfd4:	441a      	add	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	3304      	adds	r3, #4
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4610      	mov	r0, r2
 800bfde:	f7fe fd24 	bl	800aa2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe6:	4b23      	ldr	r3, [pc, #140]	; (800c074 <xTaskResumeAll+0x128>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bff0:	4b21      	ldr	r3, [pc, #132]	; (800c078 <xTaskResumeAll+0x12c>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bff6:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <xTaskResumeAll+0x11c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1cc      	bne.n	800bf98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c004:	f000 fb5c 	bl	800c6c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c008:	4b1c      	ldr	r3, [pc, #112]	; (800c07c <xTaskResumeAll+0x130>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d010      	beq.n	800c036 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c014:	f000 f844 	bl	800c0a0 <xTaskIncrementTick>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d002      	beq.n	800c024 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c01e:	4b16      	ldr	r3, [pc, #88]	; (800c078 <xTaskResumeAll+0x12c>)
 800c020:	2201      	movs	r2, #1
 800c022:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3b01      	subs	r3, #1
 800c028:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1f1      	bne.n	800c014 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800c030:	4b12      	ldr	r3, [pc, #72]	; (800c07c <xTaskResumeAll+0x130>)
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c036:	4b10      	ldr	r3, [pc, #64]	; (800c078 <xTaskResumeAll+0x12c>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d009      	beq.n	800c052 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c03e:	2301      	movs	r3, #1
 800c040:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c042:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <xTaskResumeAll+0x134>)
 800c044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c048:	601a      	str	r2, [r3, #0]
 800c04a:	f3bf 8f4f 	dsb	sy
 800c04e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c052:	f001 fae3 	bl	800d61c <vPortExitCritical>

	return xAlreadyYielded;
 800c056:	68bb      	ldr	r3, [r7, #8]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	200018b0 	.word	0x200018b0
 800c064:	20001888 	.word	0x20001888
 800c068:	20001848 	.word	0x20001848
 800c06c:	20001890 	.word	0x20001890
 800c070:	2000178c 	.word	0x2000178c
 800c074:	20001788 	.word	0x20001788
 800c078:	2000189c 	.word	0x2000189c
 800c07c:	20001898 	.word	0x20001898
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c08a:	4b04      	ldr	r3, [pc, #16]	; (800c09c <xTaskGetTickCount+0x18>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c090:	687b      	ldr	r3, [r7, #4]
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	bc80      	pop	{r7}
 800c09a:	4770      	bx	lr
 800c09c:	2000188c 	.word	0x2000188c

0800c0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0aa:	4b51      	ldr	r3, [pc, #324]	; (800c1f0 <xTaskIncrementTick+0x150>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	f040 808d 	bne.w	800c1ce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0b4:	4b4f      	ldr	r3, [pc, #316]	; (800c1f4 <xTaskIncrementTick+0x154>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0bc:	4a4d      	ldr	r2, [pc, #308]	; (800c1f4 <xTaskIncrementTick+0x154>)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d120      	bne.n	800c10a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0c8:	4b4b      	ldr	r3, [pc, #300]	; (800c1f8 <xTaskIncrementTick+0x158>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00a      	beq.n	800c0e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	603b      	str	r3, [r7, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	e7fe      	b.n	800c0e6 <xTaskIncrementTick+0x46>
 800c0e8:	4b43      	ldr	r3, [pc, #268]	; (800c1f8 <xTaskIncrementTick+0x158>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	60fb      	str	r3, [r7, #12]
 800c0ee:	4b43      	ldr	r3, [pc, #268]	; (800c1fc <xTaskIncrementTick+0x15c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4a41      	ldr	r2, [pc, #260]	; (800c1f8 <xTaskIncrementTick+0x158>)
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	4a41      	ldr	r2, [pc, #260]	; (800c1fc <xTaskIncrementTick+0x15c>)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	4b40      	ldr	r3, [pc, #256]	; (800c200 <xTaskIncrementTick+0x160>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	3301      	adds	r3, #1
 800c102:	4a3f      	ldr	r2, [pc, #252]	; (800c200 <xTaskIncrementTick+0x160>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	f000 fadb 	bl	800c6c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c10a:	4b3e      	ldr	r3, [pc, #248]	; (800c204 <xTaskIncrementTick+0x164>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	429a      	cmp	r2, r3
 800c112:	d34d      	bcc.n	800c1b0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c114:	4b38      	ldr	r3, [pc, #224]	; (800c1f8 <xTaskIncrementTick+0x158>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <xTaskIncrementTick+0x82>
 800c11e:	2301      	movs	r3, #1
 800c120:	e000      	b.n	800c124 <xTaskIncrementTick+0x84>
 800c122:	2300      	movs	r3, #0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c128:	4b36      	ldr	r3, [pc, #216]	; (800c204 <xTaskIncrementTick+0x164>)
 800c12a:	f04f 32ff 	mov.w	r2, #4294967295
 800c12e:	601a      	str	r2, [r3, #0]
					break;
 800c130:	e03e      	b.n	800c1b0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c132:	4b31      	ldr	r3, [pc, #196]	; (800c1f8 <xTaskIncrementTick+0x158>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	429a      	cmp	r2, r3
 800c148:	d203      	bcs.n	800c152 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c14a:	4a2e      	ldr	r2, [pc, #184]	; (800c204 <xTaskIncrementTick+0x164>)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6013      	str	r3, [r2, #0]
						break;
 800c150:	e02e      	b.n	800c1b0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	3304      	adds	r3, #4
 800c156:	4618      	mov	r0, r3
 800c158:	f7fe fcc2 	bl	800aae0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c160:	2b00      	cmp	r3, #0
 800c162:	d004      	beq.n	800c16e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	3318      	adds	r3, #24
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe fcb9 	bl	800aae0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c172:	2201      	movs	r2, #1
 800c174:	409a      	lsls	r2, r3
 800c176:	4b24      	ldr	r3, [pc, #144]	; (800c208 <xTaskIncrementTick+0x168>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	4a22      	ldr	r2, [pc, #136]	; (800c208 <xTaskIncrementTick+0x168>)
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c184:	4613      	mov	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4a1f      	ldr	r2, [pc, #124]	; (800c20c <xTaskIncrementTick+0x16c>)
 800c18e:	441a      	add	r2, r3
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	3304      	adds	r3, #4
 800c194:	4619      	mov	r1, r3
 800c196:	4610      	mov	r0, r2
 800c198:	f7fe fc47 	bl	800aa2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a0:	4b1b      	ldr	r3, [pc, #108]	; (800c210 <xTaskIncrementTick+0x170>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d3b4      	bcc.n	800c114 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ae:	e7b1      	b.n	800c114 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1b0:	4b17      	ldr	r3, [pc, #92]	; (800c210 <xTaskIncrementTick+0x170>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	4915      	ldr	r1, [pc, #84]	; (800c20c <xTaskIncrementTick+0x16c>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	009b      	lsls	r3, r3, #2
 800c1bc:	4413      	add	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	440b      	add	r3, r1
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d907      	bls.n	800c1d8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	e004      	b.n	800c1d8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <xTaskIncrementTick+0x174>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	4a0f      	ldr	r2, [pc, #60]	; (800c214 <xTaskIncrementTick+0x174>)
 800c1d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <xTaskIncrementTick+0x178>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c1e4:	697b      	ldr	r3, [r7, #20]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200018b0 	.word	0x200018b0
 800c1f4:	2000188c 	.word	0x2000188c
 800c1f8:	20001840 	.word	0x20001840
 800c1fc:	20001844 	.word	0x20001844
 800c200:	200018a0 	.word	0x200018a0
 800c204:	200018a8 	.word	0x200018a8
 800c208:	20001890 	.word	0x20001890
 800c20c:	2000178c 	.word	0x2000178c
 800c210:	20001788 	.word	0x20001788
 800c214:	20001898 	.word	0x20001898
 800c218:	2000189c 	.word	0x2000189c

0800c21c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c222:	4b29      	ldr	r3, [pc, #164]	; (800c2c8 <vTaskSwitchContext+0xac>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c22a:	4b28      	ldr	r3, [pc, #160]	; (800c2cc <vTaskSwitchContext+0xb0>)
 800c22c:	2201      	movs	r2, #1
 800c22e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c230:	e044      	b.n	800c2bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c232:	4b26      	ldr	r3, [pc, #152]	; (800c2cc <vTaskSwitchContext+0xb0>)
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800c238:	4b25      	ldr	r3, [pc, #148]	; (800c2d0 <vTaskSwitchContext+0xb4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	fab3 f383 	clz	r3, r3
 800c244:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	f1c3 031f 	rsb	r3, r3, #31
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	4921      	ldr	r1, [pc, #132]	; (800c2d4 <vTaskSwitchContext+0xb8>)
 800c250:	697a      	ldr	r2, [r7, #20]
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	440b      	add	r3, r1
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10a      	bne.n	800c278 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	607b      	str	r3, [r7, #4]
}
 800c274:	bf00      	nop
 800c276:	e7fe      	b.n	800c276 <vTaskSwitchContext+0x5a>
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	4613      	mov	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	4413      	add	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4a14      	ldr	r2, [pc, #80]	; (800c2d4 <vTaskSwitchContext+0xb8>)
 800c284:	4413      	add	r3, r2
 800c286:	613b      	str	r3, [r7, #16]
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	605a      	str	r2, [r3, #4]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	3308      	adds	r3, #8
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d104      	bne.n	800c2a8 <vTaskSwitchContext+0x8c>
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	685a      	ldr	r2, [r3, #4]
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	605a      	str	r2, [r3, #4]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	685b      	ldr	r3, [r3, #4]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	4a0a      	ldr	r2, [pc, #40]	; (800c2d8 <vTaskSwitchContext+0xbc>)
 800c2b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2b2:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <vTaskSwitchContext+0xbc>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	334c      	adds	r3, #76	; 0x4c
 800c2b8:	4a08      	ldr	r2, [pc, #32]	; (800c2dc <vTaskSwitchContext+0xc0>)
 800c2ba:	6013      	str	r3, [r2, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bc80      	pop	{r7}
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	200018b0 	.word	0x200018b0
 800c2cc:	2000189c 	.word	0x2000189c
 800c2d0:	20001890 	.word	0x20001890
 800c2d4:	2000178c 	.word	0x2000178c
 800c2d8:	20001788 	.word	0x20001788
 800c2dc:	2000025c 	.word	0x2000025c

0800c2e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b084      	sub	sp, #16
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10a      	bne.n	800c306 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	60fb      	str	r3, [r7, #12]
}
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c306:	4b07      	ldr	r3, [pc, #28]	; (800c324 <vTaskPlaceOnEventList+0x44>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3318      	adds	r3, #24
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f7fe fbae 	bl	800aa70 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c314:	2101      	movs	r1, #1
 800c316:	6838      	ldr	r0, [r7, #0]
 800c318:	f000 fc74 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	20001788 	.word	0x20001788

0800c328 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10a      	bne.n	800c350 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	617b      	str	r3, [r7, #20]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c350:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <vTaskPlaceOnEventListRestricted+0x54>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3318      	adds	r3, #24
 800c356:	4619      	mov	r1, r3
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7fe fb66 	bl	800aa2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d002      	beq.n	800c36a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c364:	f04f 33ff 	mov.w	r3, #4294967295
 800c368:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c36a:	6879      	ldr	r1, [r7, #4]
 800c36c:	68b8      	ldr	r0, [r7, #8]
 800c36e:	f000 fc49 	bl	800cc04 <prvAddCurrentTaskToDelayedList>
	}
 800c372:	bf00      	nop
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20001788 	.word	0x20001788

0800c380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10a      	bne.n	800c3ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	60fb      	str	r3, [r7, #12]
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	3318      	adds	r3, #24
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fb95 	bl	800aae0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3b6:	4b1d      	ldr	r3, [pc, #116]	; (800c42c <xTaskRemoveFromEventList+0xac>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d11c      	bne.n	800c3f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe fb8c 	bl	800aae0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	409a      	lsls	r2, r3
 800c3d0:	4b17      	ldr	r3, [pc, #92]	; (800c430 <xTaskRemoveFromEventList+0xb0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	4a16      	ldr	r2, [pc, #88]	; (800c430 <xTaskRemoveFromEventList+0xb0>)
 800c3d8:	6013      	str	r3, [r2, #0]
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4a13      	ldr	r2, [pc, #76]	; (800c434 <xTaskRemoveFromEventList+0xb4>)
 800c3e8:	441a      	add	r2, r3
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	f7fe fb1a 	bl	800aa2a <vListInsertEnd>
 800c3f6:	e005      	b.n	800c404 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	3318      	adds	r3, #24
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	480e      	ldr	r0, [pc, #56]	; (800c438 <xTaskRemoveFromEventList+0xb8>)
 800c400:	f7fe fb13 	bl	800aa2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c408:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <xTaskRemoveFromEventList+0xbc>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40e:	429a      	cmp	r2, r3
 800c410:	d905      	bls.n	800c41e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c412:	2301      	movs	r3, #1
 800c414:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c416:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <xTaskRemoveFromEventList+0xc0>)
 800c418:	2201      	movs	r2, #1
 800c41a:	601a      	str	r2, [r3, #0]
 800c41c:	e001      	b.n	800c422 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c41e:	2300      	movs	r3, #0
 800c420:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800c422:	697b      	ldr	r3, [r7, #20]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	200018b0 	.word	0x200018b0
 800c430:	20001890 	.word	0x20001890
 800c434:	2000178c 	.word	0x2000178c
 800c438:	20001848 	.word	0x20001848
 800c43c:	20001788 	.word	0x20001788
 800c440:	2000189c 	.word	0x2000189c

0800c444 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c44c:	4b06      	ldr	r3, [pc, #24]	; (800c468 <vTaskInternalSetTimeOutState+0x24>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <vTaskInternalSetTimeOutState+0x28>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	605a      	str	r2, [r3, #4]
}
 800c45c:	bf00      	nop
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	bc80      	pop	{r7}
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	200018a0 	.word	0x200018a0
 800c46c:	2000188c 	.word	0x2000188c

0800c470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	613b      	str	r3, [r7, #16]
}
 800c492:	bf00      	nop
 800c494:	e7fe      	b.n	800c494 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10a      	bne.n	800c4b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	60fb      	str	r3, [r7, #12]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c4b2:	f001 f883 	bl	800d5bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c4b6:	4b1d      	ldr	r3, [pc, #116]	; (800c52c <xTaskCheckForTimeOut+0xbc>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d102      	bne.n	800c4d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61fb      	str	r3, [r7, #28]
 800c4d4:	e023      	b.n	800c51e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <xTaskCheckForTimeOut+0xc0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d007      	beq.n	800c4f2 <xTaskCheckForTimeOut+0x82>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	69ba      	ldr	r2, [r7, #24]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d302      	bcc.n	800c4f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	61fb      	str	r3, [r7, #28]
 800c4f0:	e015      	b.n	800c51e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d20b      	bcs.n	800c514 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff ff9b 	bl	800c444 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c50e:	2300      	movs	r3, #0
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	e004      	b.n	800c51e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c51a:	2301      	movs	r3, #1
 800c51c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c51e:	f001 f87d 	bl	800d61c <vPortExitCritical>

	return xReturn;
 800c522:	69fb      	ldr	r3, [r7, #28]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3720      	adds	r7, #32
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	2000188c 	.word	0x2000188c
 800c530:	200018a0 	.word	0x200018a0

0800c534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c534:	b480      	push	{r7}
 800c536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c538:	4b03      	ldr	r3, [pc, #12]	; (800c548 <vTaskMissedYield+0x14>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
}
 800c53e:	bf00      	nop
 800c540:	46bd      	mov	sp, r7
 800c542:	bc80      	pop	{r7}
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2000189c 	.word	0x2000189c

0800c54c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c554:	f000 f852 	bl	800c5fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c558:	4b06      	ldr	r3, [pc, #24]	; (800c574 <prvIdleTask+0x28>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d9f9      	bls.n	800c554 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c560:	4b05      	ldr	r3, [pc, #20]	; (800c578 <prvIdleTask+0x2c>)
 800c562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c566:	601a      	str	r2, [r3, #0]
 800c568:	f3bf 8f4f 	dsb	sy
 800c56c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c570:	e7f0      	b.n	800c554 <prvIdleTask+0x8>
 800c572:	bf00      	nop
 800c574:	2000178c 	.word	0x2000178c
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c582:	2300      	movs	r3, #0
 800c584:	607b      	str	r3, [r7, #4]
 800c586:	e00c      	b.n	800c5a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4613      	mov	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4a12      	ldr	r2, [pc, #72]	; (800c5dc <prvInitialiseTaskLists+0x60>)
 800c594:	4413      	add	r3, r2
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fa1c 	bl	800a9d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	607b      	str	r3, [r7, #4]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b06      	cmp	r3, #6
 800c5a6:	d9ef      	bls.n	800c588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c5a8:	480d      	ldr	r0, [pc, #52]	; (800c5e0 <prvInitialiseTaskLists+0x64>)
 800c5aa:	f7fe fa13 	bl	800a9d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c5ae:	480d      	ldr	r0, [pc, #52]	; (800c5e4 <prvInitialiseTaskLists+0x68>)
 800c5b0:	f7fe fa10 	bl	800a9d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c5b4:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <prvInitialiseTaskLists+0x6c>)
 800c5b6:	f7fe fa0d 	bl	800a9d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c5ba:	480c      	ldr	r0, [pc, #48]	; (800c5ec <prvInitialiseTaskLists+0x70>)
 800c5bc:	f7fe fa0a 	bl	800a9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c5c0:	480b      	ldr	r0, [pc, #44]	; (800c5f0 <prvInitialiseTaskLists+0x74>)
 800c5c2:	f7fe fa07 	bl	800a9d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <prvInitialiseTaskLists+0x78>)
 800c5c8:	4a05      	ldr	r2, [pc, #20]	; (800c5e0 <prvInitialiseTaskLists+0x64>)
 800c5ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <prvInitialiseTaskLists+0x7c>)
 800c5ce:	4a05      	ldr	r2, [pc, #20]	; (800c5e4 <prvInitialiseTaskLists+0x68>)
 800c5d0:	601a      	str	r2, [r3, #0]
}
 800c5d2:	bf00      	nop
 800c5d4:	3708      	adds	r7, #8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	2000178c 	.word	0x2000178c
 800c5e0:	20001818 	.word	0x20001818
 800c5e4:	2000182c 	.word	0x2000182c
 800c5e8:	20001848 	.word	0x20001848
 800c5ec:	2000185c 	.word	0x2000185c
 800c5f0:	20001874 	.word	0x20001874
 800c5f4:	20001840 	.word	0x20001840
 800c5f8:	20001844 	.word	0x20001844

0800c5fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c602:	e019      	b.n	800c638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c604:	f000 ffda 	bl	800d5bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800c608:	4b10      	ldr	r3, [pc, #64]	; (800c64c <prvCheckTasksWaitingTermination+0x50>)
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3304      	adds	r3, #4
 800c614:	4618      	mov	r0, r3
 800c616:	f7fe fa63 	bl	800aae0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <prvCheckTasksWaitingTermination+0x54>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3b01      	subs	r3, #1
 800c620:	4a0b      	ldr	r2, [pc, #44]	; (800c650 <prvCheckTasksWaitingTermination+0x54>)
 800c622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c624:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <prvCheckTasksWaitingTermination+0x58>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3b01      	subs	r3, #1
 800c62a:	4a0a      	ldr	r2, [pc, #40]	; (800c654 <prvCheckTasksWaitingTermination+0x58>)
 800c62c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c62e:	f000 fff5 	bl	800d61c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f810 	bl	800c658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <prvCheckTasksWaitingTermination+0x58>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e1      	bne.n	800c604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	2000185c 	.word	0x2000185c
 800c650:	20001888 	.word	0x20001888
 800c654:	20001870 	.word	0x20001870

0800c658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	334c      	adds	r3, #76	; 0x4c
 800c664:	4618      	mov	r0, r3
 800c666:	f001 fb73 	bl	800dd50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c670:	2b00      	cmp	r3, #0
 800c672:	d108      	bne.n	800c686 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	4618      	mov	r0, r3
 800c67a:	f001 f963 	bl	800d944 <vPortFree>
				vPortFree( pxTCB );
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 f960 	bl	800d944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c684:	e018      	b.n	800c6b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c68c:	2b01      	cmp	r3, #1
 800c68e:	d103      	bne.n	800c698 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f001 f957 	bl	800d944 <vPortFree>
	}
 800c696:	e00f      	b.n	800c6b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c69e:	2b02      	cmp	r3, #2
 800c6a0:	d00a      	beq.n	800c6b8 <prvDeleteTCB+0x60>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	f383 8811 	msr	BASEPRI, r3
 800c6aa:	f3bf 8f6f 	isb	sy
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	60fb      	str	r3, [r7, #12]
}
 800c6b4:	bf00      	nop
 800c6b6:	e7fe      	b.n	800c6b6 <prvDeleteTCB+0x5e>
	}
 800c6b8:	bf00      	nop
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6c6:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <prvResetNextTaskUnblockTime+0x40>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <prvResetNextTaskUnblockTime+0x14>
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e000      	b.n	800c6d6 <prvResetNextTaskUnblockTime+0x16>
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c6da:	4b0a      	ldr	r3, [pc, #40]	; (800c704 <prvResetNextTaskUnblockTime+0x44>)
 800c6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c6e2:	e008      	b.n	800c6f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c6e4:	4b06      	ldr	r3, [pc, #24]	; (800c700 <prvResetNextTaskUnblockTime+0x40>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	4a04      	ldr	r2, [pc, #16]	; (800c704 <prvResetNextTaskUnblockTime+0x44>)
 800c6f4:	6013      	str	r3, [r2, #0]
}
 800c6f6:	bf00      	nop
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bc80      	pop	{r7}
 800c6fe:	4770      	bx	lr
 800c700:	20001840 	.word	0x20001840
 800c704:	200018a8 	.word	0x200018a8

0800c708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c70e:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <xTaskGetSchedulerState+0x34>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d102      	bne.n	800c71c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c716:	2301      	movs	r3, #1
 800c718:	607b      	str	r3, [r7, #4]
 800c71a:	e008      	b.n	800c72e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c71c:	4b08      	ldr	r3, [pc, #32]	; (800c740 <xTaskGetSchedulerState+0x38>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d102      	bne.n	800c72a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c724:	2302      	movs	r3, #2
 800c726:	607b      	str	r3, [r7, #4]
 800c728:	e001      	b.n	800c72e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c72a:	2300      	movs	r3, #0
 800c72c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c72e:	687b      	ldr	r3, [r7, #4]
	}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	bc80      	pop	{r7}
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20001894 	.word	0x20001894
 800c740:	200018b0 	.word	0x200018b0

0800c744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c750:	2300      	movs	r3, #0
 800c752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d06e      	beq.n	800c838 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c75a:	4b3a      	ldr	r3, [pc, #232]	; (800c844 <xTaskPriorityDisinherit+0x100>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	429a      	cmp	r2, r3
 800c762:	d00a      	beq.n	800c77a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	60fb      	str	r3, [r7, #12]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10a      	bne.n	800c798 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	60bb      	str	r3, [r7, #8]
}
 800c794:	bf00      	nop
 800c796:	e7fe      	b.n	800c796 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c79c:	1e5a      	subs	r2, r3, #1
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d044      	beq.n	800c838 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d140      	bne.n	800c838 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f7fe f990 	bl	800aae0 <uxListRemove>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d115      	bne.n	800c7f2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ca:	491f      	ldr	r1, [pc, #124]	; (800c848 <xTaskPriorityDisinherit+0x104>)
 800c7cc:	4613      	mov	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	440b      	add	r3, r1
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <xTaskPriorityDisinherit+0xae>
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7e6:	43da      	mvns	r2, r3
 800c7e8:	4b18      	ldr	r3, [pc, #96]	; (800c84c <xTaskPriorityDisinherit+0x108>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	4a17      	ldr	r2, [pc, #92]	; (800c84c <xTaskPriorityDisinherit+0x108>)
 800c7f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fe:	f1c3 0207 	rsb	r2, r3, #7
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80a:	2201      	movs	r2, #1
 800c80c:	409a      	lsls	r2, r3
 800c80e:	4b0f      	ldr	r3, [pc, #60]	; (800c84c <xTaskPriorityDisinherit+0x108>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4313      	orrs	r3, r2
 800c814:	4a0d      	ldr	r2, [pc, #52]	; (800c84c <xTaskPriorityDisinherit+0x108>)
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81c:	4613      	mov	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	4a08      	ldr	r2, [pc, #32]	; (800c848 <xTaskPriorityDisinherit+0x104>)
 800c826:	441a      	add	r2, r3
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	3304      	adds	r3, #4
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f7fe f8fb 	bl	800aa2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c834:	2301      	movs	r3, #1
 800c836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c838:	697b      	ldr	r3, [r7, #20]
	}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20001788 	.word	0x20001788
 800c848:	2000178c 	.word	0x2000178c
 800c84c:	20001890 	.word	0x20001890

0800c850 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	60f8      	str	r0, [r7, #12]
 800c858:	60b9      	str	r1, [r7, #8]
 800c85a:	607a      	str	r2, [r7, #4]
 800c85c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c85e:	f000 fead 	bl	800d5bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c862:	4b29      	ldr	r3, [pc, #164]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d01c      	beq.n	800c8aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c870:	4b25      	ldr	r3, [pc, #148]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	43d2      	mvns	r2, r2
 800c87c:	400a      	ands	r2, r1
 800c87e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c882:	4b21      	ldr	r3, [pc, #132]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2201      	movs	r2, #1
 800c888:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c892:	2101      	movs	r1, #1
 800c894:	6838      	ldr	r0, [r7, #0]
 800c896:	f000 f9b5 	bl	800cc04 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c89a:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <xTaskNotifyWait+0xbc>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c8aa:	f000 feb7 	bl	800d61c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c8ae:	f000 fe85 	bl	800d5bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d005      	beq.n	800c8c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c8b8:	4b13      	ldr	r3, [pc, #76]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c8c4:	4b10      	ldr	r3, [pc, #64]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d002      	beq.n	800c8d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	617b      	str	r3, [r7, #20]
 800c8d6:	e00a      	b.n	800c8ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c8d8:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	43d2      	mvns	r2, r2
 800c8e4:	400a      	ands	r2, r1
 800c8e6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8ee:	4b06      	ldr	r3, [pc, #24]	; (800c908 <xTaskNotifyWait+0xb8>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800c8f8:	f000 fe90 	bl	800d61c <vPortExitCritical>

		return xReturn;
 800c8fc:	697b      	ldr	r3, [r7, #20]
	}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20001788 	.word	0x20001788
 800c90c:	e000ed04 	.word	0xe000ed04

0800c910 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	4613      	mov	r3, r2
 800c91e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c920:	2301      	movs	r3, #1
 800c922:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d10a      	bne.n	800c940 <xTaskGenericNotify+0x30>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	61bb      	str	r3, [r7, #24]
}
 800c93c:	bf00      	nop
 800c93e:	e7fe      	b.n	800c93e <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c944:	f000 fe3a 	bl	800d5bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d004      	beq.n	800c958 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c958:	6a3b      	ldr	r3, [r7, #32]
 800c95a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800c95e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	2202      	movs	r2, #2
 800c964:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800c968:	79fb      	ldrb	r3, [r7, #7]
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	d82d      	bhi.n	800c9ca <xTaskGenericNotify+0xba>
 800c96e:	a201      	add	r2, pc, #4	; (adr r2, 800c974 <xTaskGenericNotify+0x64>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c9cb 	.word	0x0800c9cb
 800c978:	0800c989 	.word	0x0800c989
 800c97c:	0800c99b 	.word	0x0800c99b
 800c980:	0800c9ab 	.word	0x0800c9ab
 800c984:	0800c9b5 	.word	0x0800c9b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	431a      	orrs	r2, r3
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c998:	e017      	b.n	800c9ca <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	6a3b      	ldr	r3, [r7, #32]
 800c9a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c9a8:	e00f      	b.n	800c9ca <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800c9b2:	e00a      	b.n	800c9ca <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c9b4:	7ffb      	ldrb	r3, [r7, #31]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d004      	beq.n	800c9c4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c9ba:	6a3b      	ldr	r3, [r7, #32]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c9c2:	e001      	b.n	800c9c8 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c9c8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c9ca:	7ffb      	ldrb	r3, [r7, #31]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d139      	bne.n	800ca44 <xTaskGenericNotify+0x134>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	3304      	adds	r3, #4
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe f883 	bl	800aae0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c9da:	6a3b      	ldr	r3, [r7, #32]
 800c9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9de:	2201      	movs	r2, #1
 800c9e0:	409a      	lsls	r2, r3
 800c9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ca54 <xTaskGenericNotify+0x144>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	4a1a      	ldr	r2, [pc, #104]	; (800ca54 <xTaskGenericNotify+0x144>)
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	6a3b      	ldr	r3, [r7, #32]
 800c9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <xTaskGenericNotify+0x148>)
 800c9fa:	441a      	add	r2, r3
 800c9fc:	6a3b      	ldr	r3, [r7, #32]
 800c9fe:	3304      	adds	r3, #4
 800ca00:	4619      	mov	r1, r3
 800ca02:	4610      	mov	r0, r2
 800ca04:	f7fe f811 	bl	800aa2a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d00a      	beq.n	800ca26 <xTaskGenericNotify+0x116>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	617b      	str	r3, [r7, #20]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xTaskGenericNotify+0x114>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca2a:	4b0c      	ldr	r3, [pc, #48]	; (800ca5c <xTaskGenericNotify+0x14c>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d907      	bls.n	800ca44 <xTaskGenericNotify+0x134>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800ca34:	4b0a      	ldr	r3, [pc, #40]	; (800ca60 <xTaskGenericNotify+0x150>)
 800ca36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca44:	f000 fdea 	bl	800d61c <vPortExitCritical>

		return xReturn;
 800ca48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3728      	adds	r7, #40	; 0x28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20001890 	.word	0x20001890
 800ca58:	2000178c 	.word	0x2000178c
 800ca5c:	20001788 	.word	0x20001788
 800ca60:	e000ed04 	.word	0xe000ed04

0800ca64 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08e      	sub	sp, #56	; 0x38
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	603b      	str	r3, [r7, #0]
 800ca70:	4613      	mov	r3, r2
 800ca72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ca74:	2301      	movs	r3, #1
 800ca76:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10a      	bne.n	800ca94 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ca90:	bf00      	nop
 800ca92:	e7fe      	b.n	800ca92 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca94:	f000 fe54 	bl	800d740 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ca9c:	f3ef 8211 	mrs	r2, BASEPRI
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	f383 8811 	msr	BASEPRI, r3
 800caa8:	f3bf 8f6f 	isb	sy
 800caac:	f3bf 8f4f 	dsb	sy
 800cab0:	623a      	str	r2, [r7, #32]
 800cab2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cab4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d004      	beq.n	800cac8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800cace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad4:	2202      	movs	r2, #2
 800cad6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 800cada:	79fb      	ldrb	r3, [r7, #7]
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d82f      	bhi.n	800cb40 <xTaskGenericNotifyFromISR+0xdc>
 800cae0:	a201      	add	r2, pc, #4	; (adr r2, 800cae8 <xTaskGenericNotifyFromISR+0x84>)
 800cae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae6:	bf00      	nop
 800cae8:	0800cb41 	.word	0x0800cb41
 800caec:	0800cafd 	.word	0x0800cafd
 800caf0:	0800cb0f 	.word	0x0800cb0f
 800caf4:	0800cb1f 	.word	0x0800cb1f
 800caf8:	0800cb29 	.word	0x0800cb29
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	431a      	orrs	r2, r3
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb0c:	e018      	b.n	800cb40 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb1c:	e010      	b.n	800cb40 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 800cb26:	e00b      	b.n	800cb40 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d004      	beq.n	800cb3a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb38:	e001      	b.n	800cb3e <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800cb3e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d146      	bne.n	800cbd6 <xTaskGenericNotifyFromISR+0x172>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00a      	beq.n	800cb66 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	61bb      	str	r3, [r7, #24]
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb66:	4b21      	ldr	r3, [pc, #132]	; (800cbec <xTaskGenericNotifyFromISR+0x188>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d11c      	bne.n	800cba8 <xTaskGenericNotifyFromISR+0x144>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb70:	3304      	adds	r3, #4
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fd ffb4 	bl	800aae0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	409a      	lsls	r2, r3
 800cb80:	4b1b      	ldr	r3, [pc, #108]	; (800cbf0 <xTaskGenericNotifyFromISR+0x18c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	4a1a      	ldr	r2, [pc, #104]	; (800cbf0 <xTaskGenericNotifyFromISR+0x18c>)
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4a17      	ldr	r2, [pc, #92]	; (800cbf4 <xTaskGenericNotifyFromISR+0x190>)
 800cb98:	441a      	add	r2, r3
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7fd ff42 	bl	800aa2a <vListInsertEnd>
 800cba6:	e005      	b.n	800cbb4 <xTaskGenericNotifyFromISR+0x150>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbaa:	3318      	adds	r3, #24
 800cbac:	4619      	mov	r1, r3
 800cbae:	4812      	ldr	r0, [pc, #72]	; (800cbf8 <xTaskGenericNotifyFromISR+0x194>)
 800cbb0:	f7fd ff3b 	bl	800aa2a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb8:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <xTaskGenericNotifyFromISR+0x198>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d909      	bls.n	800cbd6 <xTaskGenericNotifyFromISR+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d003      	beq.n	800cbd0 <xTaskGenericNotifyFromISR+0x16c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbca:	2201      	movs	r2, #1
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	e002      	b.n	800cbd6 <xTaskGenericNotifyFromISR+0x172>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <xTaskGenericNotifyFromISR+0x19c>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	f383 8811 	msr	BASEPRI, r3
}
 800cbe0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cbe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3738      	adds	r7, #56	; 0x38
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	200018b0 	.word	0x200018b0
 800cbf0:	20001890 	.word	0x20001890
 800cbf4:	2000178c 	.word	0x2000178c
 800cbf8:	20001848 	.word	0x20001848
 800cbfc:	20001788 	.word	0x20001788
 800cc00:	2000189c 	.word	0x2000189c

0800cc04 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cc0e:	4b29      	ldr	r3, [pc, #164]	; (800ccb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc14:	4b28      	ldr	r3, [pc, #160]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fd ff60 	bl	800aae0 <uxListRemove>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10b      	bne.n	800cc3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc32:	43da      	mvns	r2, r3
 800cc34:	4b21      	ldr	r3, [pc, #132]	; (800ccbc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4013      	ands	r3, r2
 800cc3a:	4a20      	ldr	r2, [pc, #128]	; (800ccbc <prvAddCurrentTaskToDelayedList+0xb8>)
 800cc3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc44:	d10a      	bne.n	800cc5c <prvAddCurrentTaskToDelayedList+0x58>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d007      	beq.n	800cc5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc4c:	4b1a      	ldr	r3, [pc, #104]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	3304      	adds	r3, #4
 800cc52:	4619      	mov	r1, r3
 800cc54:	481a      	ldr	r0, [pc, #104]	; (800ccc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800cc56:	f7fd fee8 	bl	800aa2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cc5a:	e026      	b.n	800ccaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4413      	add	r3, r2
 800cc62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cc64:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d209      	bcs.n	800cc88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc74:	4b13      	ldr	r3, [pc, #76]	; (800ccc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f7fd fef5 	bl	800aa70 <vListInsert>
}
 800cc86:	e010      	b.n	800ccaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc88:	4b0f      	ldr	r3, [pc, #60]	; (800ccc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	4b0a      	ldr	r3, [pc, #40]	; (800ccb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3304      	adds	r3, #4
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7fd feeb 	bl	800aa70 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc9a:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	68ba      	ldr	r2, [r7, #8]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d202      	bcs.n	800ccaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cca4:	4a09      	ldr	r2, [pc, #36]	; (800cccc <prvAddCurrentTaskToDelayedList+0xc8>)
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	6013      	str	r3, [r2, #0]
}
 800ccaa:	bf00      	nop
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	2000188c 	.word	0x2000188c
 800ccb8:	20001788 	.word	0x20001788
 800ccbc:	20001890 	.word	0x20001890
 800ccc0:	20001874 	.word	0x20001874
 800ccc4:	20001844 	.word	0x20001844
 800ccc8:	20001840 	.word	0x20001840
 800cccc:	200018a8 	.word	0x200018a8

0800ccd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b08a      	sub	sp, #40	; 0x28
 800ccd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ccda:	f000 fb41 	bl	800d360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ccde:	4b1c      	ldr	r3, [pc, #112]	; (800cd50 <xTimerCreateTimerTask+0x80>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d021      	beq.n	800cd2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cce6:	2300      	movs	r3, #0
 800cce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ccee:	1d3a      	adds	r2, r7, #4
 800ccf0:	f107 0108 	add.w	r1, r7, #8
 800ccf4:	f107 030c 	add.w	r3, r7, #12
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7f5 f923 	bl	8001f44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	9202      	str	r2, [sp, #8]
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	2302      	movs	r3, #2
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	460a      	mov	r2, r1
 800cd10:	4910      	ldr	r1, [pc, #64]	; (800cd54 <xTimerCreateTimerTask+0x84>)
 800cd12:	4811      	ldr	r0, [pc, #68]	; (800cd58 <xTimerCreateTimerTask+0x88>)
 800cd14:	f7fe fcac 	bl	800b670 <xTaskCreateStatic>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	4a10      	ldr	r2, [pc, #64]	; (800cd5c <xTimerCreateTimerTask+0x8c>)
 800cd1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cd1e:	4b0f      	ldr	r3, [pc, #60]	; (800cd5c <xTimerCreateTimerTask+0x8c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cd26:	2301      	movs	r3, #1
 800cd28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10a      	bne.n	800cd46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	613b      	str	r3, [r7, #16]
}
 800cd42:	bf00      	nop
 800cd44:	e7fe      	b.n	800cd44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cd46:	697b      	ldr	r3, [r7, #20]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3718      	adds	r7, #24
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	200018e4 	.word	0x200018e4
 800cd54:	0800e990 	.word	0x0800e990
 800cd58:	0800cf9d 	.word	0x0800cf9d
 800cd5c:	200018e8 	.word	0x200018e8

0800cd60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af02      	add	r7, sp, #8
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
 800cd6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800cd6e:	202c      	movs	r0, #44	; 0x2c
 800cd70:	f000 fd24 	bl	800d7bc <pvPortMalloc>
 800cd74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00d      	beq.n	800cd98 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	9301      	str	r3, [sp, #4]
 800cd80:	6a3b      	ldr	r3, [r7, #32]
 800cd82:	9300      	str	r3, [sp, #0]
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	68b9      	ldr	r1, [r7, #8]
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 f846 	bl	800ce1c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800cd98:	697b      	ldr	r3, [r7, #20]
	}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b08a      	sub	sp, #40	; 0x28
 800cda6:	af02      	add	r7, sp, #8
 800cda8:	60f8      	str	r0, [r7, #12]
 800cdaa:	60b9      	str	r1, [r7, #8]
 800cdac:	607a      	str	r2, [r7, #4]
 800cdae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800cdb0:	232c      	movs	r3, #44	; 0x2c
 800cdb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2b2c      	cmp	r3, #44	; 0x2c
 800cdb8:	d00a      	beq.n	800cdd0 <xTimerCreateStatic+0x2e>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	61bb      	str	r3, [r7, #24]
}
 800cdcc:	bf00      	nop
 800cdce:	e7fe      	b.n	800cdce <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10a      	bne.n	800cdec <xTimerCreateStatic+0x4a>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	617b      	str	r3, [r7, #20]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00d      	beq.n	800ce12 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	68b9      	ldr	r1, [r7, #8]
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 f809 	bl	800ce1c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800ce12:	69fb      	ldr	r3, [r7, #28]
	}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3720      	adds	r7, #32
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	607a      	str	r2, [r7, #4]
 800ce28:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	617b      	str	r3, [r7, #20]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d015      	beq.n	800ce78 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ce4c:	f000 fa88 	bl	800d360 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6a:	6a3a      	ldr	r2, [r7, #32]
 800ce6c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	3304      	adds	r3, #4
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fd fdcd 	bl	800aa12 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800ce78:	bf00      	nop
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	; 0x28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d10a      	bne.n	800ceae <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	623b      	str	r3, [r7, #32]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ceae:	4b1a      	ldr	r3, [pc, #104]	; (800cf18 <xTimerGenericCommand+0x98>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d02a      	beq.n	800cf0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	2b05      	cmp	r3, #5
 800cec6:	dc18      	bgt.n	800cefa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cec8:	f7ff fc1e 	bl	800c708 <xTaskGetSchedulerState>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d109      	bne.n	800cee6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ced2:	4b11      	ldr	r3, [pc, #68]	; (800cf18 <xTimerGenericCommand+0x98>)
 800ced4:	6818      	ldr	r0, [r3, #0]
 800ced6:	f107 0114 	add.w	r1, r7, #20
 800ceda:	2300      	movs	r3, #0
 800cedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cede:	f7fd ff65 	bl	800adac <xQueueGenericSend>
 800cee2:	6278      	str	r0, [r7, #36]	; 0x24
 800cee4:	e012      	b.n	800cf0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cee6:	4b0c      	ldr	r3, [pc, #48]	; (800cf18 <xTimerGenericCommand+0x98>)
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	f107 0114 	add.w	r1, r7, #20
 800ceee:	2300      	movs	r3, #0
 800cef0:	2200      	movs	r2, #0
 800cef2:	f7fd ff5b 	bl	800adac <xQueueGenericSend>
 800cef6:	6278      	str	r0, [r7, #36]	; 0x24
 800cef8:	e008      	b.n	800cf0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <xTimerGenericCommand+0x98>)
 800cefc:	6818      	ldr	r0, [r3, #0]
 800cefe:	f107 0114 	add.w	r1, r7, #20
 800cf02:	2300      	movs	r3, #0
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	f7fe f84f 	bl	800afa8 <xQueueGenericSendFromISR>
 800cf0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3728      	adds	r7, #40	; 0x28
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	200018e4 	.word	0x200018e4

0800cf1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af02      	add	r7, sp, #8
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf26:	4b1c      	ldr	r3, [pc, #112]	; (800cf98 <prvProcessExpiredTimer+0x7c>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	3304      	adds	r3, #4
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7fd fdd3 	bl	800aae0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d122      	bne.n	800cf88 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	699a      	ldr	r2, [r3, #24]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	18d1      	adds	r1, r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	6978      	ldr	r0, [r7, #20]
 800cf50:	f000 f8c8 	bl	800d0e4 <prvInsertTimerInActiveList>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d016      	beq.n	800cf88 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	2300      	movs	r3, #0
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	2100      	movs	r1, #0
 800cf64:	6978      	ldr	r0, [r7, #20]
 800cf66:	f7ff ff8b 	bl	800ce80 <xTimerGenericCommand>
 800cf6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10a      	bne.n	800cf88 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800cf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf76:	f383 8811 	msr	BASEPRI, r3
 800cf7a:	f3bf 8f6f 	isb	sy
 800cf7e:	f3bf 8f4f 	dsb	sy
 800cf82:	60fb      	str	r3, [r7, #12]
}
 800cf84:	bf00      	nop
 800cf86:	e7fe      	b.n	800cf86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8c:	6978      	ldr	r0, [r7, #20]
 800cf8e:	4798      	blx	r3
}
 800cf90:	bf00      	nop
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	200018dc 	.word	0x200018dc

0800cf9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfa4:	f107 0308 	add.w	r3, r7, #8
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 f857 	bl	800d05c <prvGetNextExpireTime>
 800cfae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f803 	bl	800cfc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfba:	f000 f8d5 	bl	800d168 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfbe:	e7f1      	b.n	800cfa4 <prvTimerTask+0x8>

0800cfc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfca:	f7fe ffb1 	bl	800bf30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfce:	f107 0308 	add.w	r3, r7, #8
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f000 f866 	bl	800d0a4 <prvSampleTimeNow>
 800cfd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d130      	bne.n	800d042 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10a      	bne.n	800cffc <prvProcessTimerOrBlockTask+0x3c>
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d806      	bhi.n	800cffc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cfee:	f7fe ffad 	bl	800bf4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cff2:	68f9      	ldr	r1, [r7, #12]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f7ff ff91 	bl	800cf1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cffa:	e024      	b.n	800d046 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d008      	beq.n	800d014 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d002:	4b13      	ldr	r3, [pc, #76]	; (800d050 <prvProcessTimerOrBlockTask+0x90>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bf0c      	ite	eq
 800d00c:	2301      	moveq	r3, #1
 800d00e:	2300      	movne	r3, #0
 800d010:	b2db      	uxtb	r3, r3
 800d012:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d014:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <prvProcessTimerOrBlockTask+0x94>)
 800d016:	6818      	ldr	r0, [r3, #0]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	4619      	mov	r1, r3
 800d022:	f7fe faf1 	bl	800b608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d026:	f7fe ff91 	bl	800bf4c <xTaskResumeAll>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d030:	4b09      	ldr	r3, [pc, #36]	; (800d058 <prvProcessTimerOrBlockTask+0x98>)
 800d032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d036:	601a      	str	r2, [r3, #0]
 800d038:	f3bf 8f4f 	dsb	sy
 800d03c:	f3bf 8f6f 	isb	sy
}
 800d040:	e001      	b.n	800d046 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d042:	f7fe ff83 	bl	800bf4c <xTaskResumeAll>
}
 800d046:	bf00      	nop
 800d048:	3710      	adds	r7, #16
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	200018e0 	.word	0x200018e0
 800d054:	200018e4 	.word	0x200018e4
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d064:	4b0e      	ldr	r3, [pc, #56]	; (800d0a0 <prvGetNextExpireTime+0x44>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	bf0c      	ite	eq
 800d06e:	2301      	moveq	r3, #1
 800d070:	2300      	movne	r3, #0
 800d072:	b2db      	uxtb	r3, r3
 800d074:	461a      	mov	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d105      	bne.n	800d08e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d082:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <prvGetNextExpireTime+0x44>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68db      	ldr	r3, [r3, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	e001      	b.n	800d092 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d08e:	2300      	movs	r3, #0
 800d090:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d092:	68fb      	ldr	r3, [r7, #12]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	bc80      	pop	{r7}
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	200018dc 	.word	0x200018dc

0800d0a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0ac:	f7fe ffea 	bl	800c084 <xTaskGetTickCount>
 800d0b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <prvSampleTimeNow+0x3c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68fa      	ldr	r2, [r7, #12]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d205      	bcs.n	800d0c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0bc:	f000 f8ee 	bl	800d29c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	601a      	str	r2, [r3, #0]
 800d0c6:	e002      	b.n	800d0ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0ce:	4a04      	ldr	r2, [pc, #16]	; (800d0e0 <prvSampleTimeNow+0x3c>)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	200018ec 	.word	0x200018ec

0800d0e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b086      	sub	sp, #24
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68fa      	ldr	r2, [r7, #12]
 800d100:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	429a      	cmp	r2, r3
 800d108:	d812      	bhi.n	800d130 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	699b      	ldr	r3, [r3, #24]
 800d114:	429a      	cmp	r2, r3
 800d116:	d302      	bcc.n	800d11e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d118:	2301      	movs	r3, #1
 800d11a:	617b      	str	r3, [r7, #20]
 800d11c:	e01b      	b.n	800d156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d11e:	4b10      	ldr	r3, [pc, #64]	; (800d160 <prvInsertTimerInActiveList+0x7c>)
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3304      	adds	r3, #4
 800d126:	4619      	mov	r1, r3
 800d128:	4610      	mov	r0, r2
 800d12a:	f7fd fca1 	bl	800aa70 <vListInsert>
 800d12e:	e012      	b.n	800d156 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d206      	bcs.n	800d146 <prvInsertTimerInActiveList+0x62>
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d302      	bcc.n	800d146 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d140:	2301      	movs	r3, #1
 800d142:	617b      	str	r3, [r7, #20]
 800d144:	e007      	b.n	800d156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d146:	4b07      	ldr	r3, [pc, #28]	; (800d164 <prvInsertTimerInActiveList+0x80>)
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4619      	mov	r1, r3
 800d150:	4610      	mov	r0, r2
 800d152:	f7fd fc8d 	bl	800aa70 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d156:	697b      	ldr	r3, [r7, #20]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	200018e0 	.word	0x200018e0
 800d164:	200018dc 	.word	0x200018dc

0800d168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08c      	sub	sp, #48	; 0x30
 800d16c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d16e:	e081      	b.n	800d274 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	db7e      	blt.n	800d274 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	695b      	ldr	r3, [r3, #20]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d004      	beq.n	800d18c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	3304      	adds	r3, #4
 800d186:	4618      	mov	r0, r3
 800d188:	f7fd fcaa 	bl	800aae0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d18c:	1d3b      	adds	r3, r7, #4
 800d18e:	4618      	mov	r0, r3
 800d190:	f7ff ff88 	bl	800d0a4 <prvSampleTimeNow>
 800d194:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2b09      	cmp	r3, #9
 800d19a:	d86a      	bhi.n	800d272 <prvProcessReceivedCommands+0x10a>
 800d19c:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <prvProcessReceivedCommands+0x3c>)
 800d19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a2:	bf00      	nop
 800d1a4:	0800d1cd 	.word	0x0800d1cd
 800d1a8:	0800d1cd 	.word	0x0800d1cd
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	0800d275 	.word	0x0800d275
 800d1b4:	0800d229 	.word	0x0800d229
 800d1b8:	0800d261 	.word	0x0800d261
 800d1bc:	0800d1cd 	.word	0x0800d1cd
 800d1c0:	0800d1cd 	.word	0x0800d1cd
 800d1c4:	0800d275 	.word	0x0800d275
 800d1c8:	0800d229 	.word	0x0800d229
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	699b      	ldr	r3, [r3, #24]
 800d1d2:	18d1      	adds	r1, r2, r3
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	6a3a      	ldr	r2, [r7, #32]
 800d1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1da:	f7ff ff83 	bl	800d0e4 <prvInsertTimerInActiveList>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d047      	beq.n	800d274 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d1ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d13f      	bne.n	800d274 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	441a      	add	r2, r3
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	2300      	movs	r3, #0
 800d202:	2100      	movs	r1, #0
 800d204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d206:	f7ff fe3b 	bl	800ce80 <xTimerGenericCommand>
 800d20a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d130      	bne.n	800d274 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	61bb      	str	r3, [r7, #24]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d10a      	bne.n	800d24c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 800d236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23a:	f383 8811 	msr	BASEPRI, r3
 800d23e:	f3bf 8f6f 	isb	sy
 800d242:	f3bf 8f4f 	dsb	sy
 800d246:	617b      	str	r3, [r7, #20]
}
 800d248:	bf00      	nop
 800d24a:	e7fe      	b.n	800d24a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	18d1      	adds	r1, r2, r3
 800d254:	6a3b      	ldr	r3, [r7, #32]
 800d256:	6a3a      	ldr	r2, [r7, #32]
 800d258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d25a:	f7ff ff43 	bl	800d0e4 <prvInsertTimerInActiveList>
					break;
 800d25e:	e009      	b.n	800d274 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d266:	2b00      	cmp	r3, #0
 800d268:	d104      	bne.n	800d274 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 800d26a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d26c:	f000 fb6a 	bl	800d944 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d270:	e000      	b.n	800d274 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
 800d272:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d274:	4b08      	ldr	r3, [pc, #32]	; (800d298 <prvProcessReceivedCommands+0x130>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f107 0108 	add.w	r1, r7, #8
 800d27c:	2200      	movs	r2, #0
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fd ff2a 	bl	800b0d8 <xQueueReceive>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	f47f af72 	bne.w	800d170 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d28c:	bf00      	nop
 800d28e:	bf00      	nop
 800d290:	3728      	adds	r7, #40	; 0x28
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	200018e4 	.word	0x200018e4

0800d29c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b088      	sub	sp, #32
 800d2a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d2a2:	e045      	b.n	800d330 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2a4:	4b2c      	ldr	r3, [pc, #176]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2ae:	4b2a      	ldr	r3, [pc, #168]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	3304      	adds	r3, #4
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fd fc0f 	bl	800aae0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d12e      	bne.n	800d330 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	693a      	ldr	r2, [r7, #16]
 800d2d8:	4413      	add	r3, r2
 800d2da:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d90e      	bls.n	800d302 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2f0:	4b19      	ldr	r3, [pc, #100]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	f7fd fbb8 	bl	800aa70 <vListInsert>
 800d300:	e016      	b.n	800d330 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d302:	2300      	movs	r3, #0
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	2300      	movs	r3, #0
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	2100      	movs	r1, #0
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff fdb7 	bl	800ce80 <xTimerGenericCommand>
 800d312:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10a      	bne.n	800d330 <prvSwitchTimerLists+0x94>
	__asm volatile
 800d31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	603b      	str	r3, [r7, #0]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d330:	4b09      	ldr	r3, [pc, #36]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1b4      	bne.n	800d2a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d33a:	4b07      	ldr	r3, [pc, #28]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d340:	4b06      	ldr	r3, [pc, #24]	; (800d35c <prvSwitchTimerLists+0xc0>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a04      	ldr	r2, [pc, #16]	; (800d358 <prvSwitchTimerLists+0xbc>)
 800d346:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d348:	4a04      	ldr	r2, [pc, #16]	; (800d35c <prvSwitchTimerLists+0xc0>)
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	6013      	str	r3, [r2, #0]
}
 800d34e:	bf00      	nop
 800d350:	3718      	adds	r7, #24
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	200018dc 	.word	0x200018dc
 800d35c:	200018e0 	.word	0x200018e0

0800d360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d366:	f000 f929 	bl	800d5bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d120      	bne.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d372:	4814      	ldr	r0, [pc, #80]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d374:	f7fd fb2e 	bl	800a9d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d378:	4813      	ldr	r0, [pc, #76]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d37a:	f7fd fb2b 	bl	800a9d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <prvCheckForValidListAndQueue+0x6c>)
 800d380:	4a10      	ldr	r2, [pc, #64]	; (800d3c4 <prvCheckForValidListAndQueue+0x64>)
 800d382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d384:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <prvCheckForValidListAndQueue+0x70>)
 800d386:	4a10      	ldr	r2, [pc, #64]	; (800d3c8 <prvCheckForValidListAndQueue+0x68>)
 800d388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d38a:	2300      	movs	r3, #0
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4b11      	ldr	r3, [pc, #68]	; (800d3d4 <prvCheckForValidListAndQueue+0x74>)
 800d390:	4a11      	ldr	r2, [pc, #68]	; (800d3d8 <prvCheckForValidListAndQueue+0x78>)
 800d392:	210c      	movs	r1, #12
 800d394:	200a      	movs	r0, #10
 800d396:	f7fd fc35 	bl	800ac04 <xQueueGenericCreateStatic>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d39e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d3a0:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d005      	beq.n	800d3b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d3a8:	4b05      	ldr	r3, [pc, #20]	; (800d3c0 <prvCheckForValidListAndQueue+0x60>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	490b      	ldr	r1, [pc, #44]	; (800d3dc <prvCheckForValidListAndQueue+0x7c>)
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe f902 	bl	800b5b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3b4:	f000 f932 	bl	800d61c <vPortExitCritical>
}
 800d3b8:	bf00      	nop
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	200018e4 	.word	0x200018e4
 800d3c4:	200018b4 	.word	0x200018b4
 800d3c8:	200018c8 	.word	0x200018c8
 800d3cc:	200018dc 	.word	0x200018dc
 800d3d0:	200018e0 	.word	0x200018e0
 800d3d4:	20001968 	.word	0x20001968
 800d3d8:	200018f0 	.word	0x200018f0
 800d3dc:	0800e998 	.word	0x0800e998

0800d3e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	3b04      	subs	r3, #4
 800d3f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d3f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	3b04      	subs	r3, #4
 800d3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f023 0201 	bic.w	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	3b04      	subs	r3, #4
 800d40e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d410:	4a08      	ldr	r2, [pc, #32]	; (800d434 <pxPortInitialiseStack+0x54>)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3b14      	subs	r3, #20
 800d41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3b20      	subs	r3, #32
 800d426:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d428:	68fb      	ldr	r3, [r7, #12]
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	bc80      	pop	{r7}
 800d432:	4770      	bx	lr
 800d434:	0800d439 	.word	0x0800d439

0800d438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d43e:	2300      	movs	r3, #0
 800d440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d442:	4b12      	ldr	r3, [pc, #72]	; (800d48c <prvTaskExitError+0x54>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d44a:	d00a      	beq.n	800d462 <prvTaskExitError+0x2a>
	__asm volatile
 800d44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d450:	f383 8811 	msr	BASEPRI, r3
 800d454:	f3bf 8f6f 	isb	sy
 800d458:	f3bf 8f4f 	dsb	sy
 800d45c:	60fb      	str	r3, [r7, #12]
}
 800d45e:	bf00      	nop
 800d460:	e7fe      	b.n	800d460 <prvTaskExitError+0x28>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	60bb      	str	r3, [r7, #8]
}
 800d474:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d476:	bf00      	nop
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0fc      	beq.n	800d478 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d47e:	bf00      	nop
 800d480:	bf00      	nop
 800d482:	3714      	adds	r7, #20
 800d484:	46bd      	mov	sp, r7
 800d486:	bc80      	pop	{r7}
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	2000020c 	.word	0x2000020c

0800d490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d490:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <pxCurrentTCBConst2>)
 800d492:	6819      	ldr	r1, [r3, #0]
 800d494:	6808      	ldr	r0, [r1, #0]
 800d496:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d49a:	f380 8809 	msr	PSP, r0
 800d49e:	f3bf 8f6f 	isb	sy
 800d4a2:	f04f 0000 	mov.w	r0, #0
 800d4a6:	f380 8811 	msr	BASEPRI, r0
 800d4aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800d4ae:	4770      	bx	lr

0800d4b0 <pxCurrentTCBConst2>:
 800d4b0:	20001788 	.word	0x20001788
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop

0800d4b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d4b8:	4806      	ldr	r0, [pc, #24]	; (800d4d4 <prvPortStartFirstTask+0x1c>)
 800d4ba:	6800      	ldr	r0, [r0, #0]
 800d4bc:	6800      	ldr	r0, [r0, #0]
 800d4be:	f380 8808 	msr	MSP, r0
 800d4c2:	b662      	cpsie	i
 800d4c4:	b661      	cpsie	f
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	df00      	svc	0
 800d4d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed08 	.word	0xe000ed08

0800d4d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d4de:	4b32      	ldr	r3, [pc, #200]	; (800d5a8 <xPortStartScheduler+0xd0>)
 800d4e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	22ff      	movs	r2, #255	; 0xff
 800d4ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d500:	b2da      	uxtb	r2, r3
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <xPortStartScheduler+0xd4>)
 800d504:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d506:	4b2a      	ldr	r3, [pc, #168]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d508:	2207      	movs	r2, #7
 800d50a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d50c:	e009      	b.n	800d522 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d50e:	4b28      	ldr	r3, [pc, #160]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3b01      	subs	r3, #1
 800d514:	4a26      	ldr	r2, [pc, #152]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d516:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d522:	78fb      	ldrb	r3, [r7, #3]
 800d524:	b2db      	uxtb	r3, r3
 800d526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52a:	2b80      	cmp	r3, #128	; 0x80
 800d52c:	d0ef      	beq.n	800d50e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d52e:	4b20      	ldr	r3, [pc, #128]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f1c3 0307 	rsb	r3, r3, #7
 800d536:	2b04      	cmp	r3, #4
 800d538:	d00a      	beq.n	800d550 <xPortStartScheduler+0x78>
	__asm volatile
 800d53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53e:	f383 8811 	msr	BASEPRI, r3
 800d542:	f3bf 8f6f 	isb	sy
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	60bb      	str	r3, [r7, #8]
}
 800d54c:	bf00      	nop
 800d54e:	e7fe      	b.n	800d54e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d550:	4b17      	ldr	r3, [pc, #92]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	021b      	lsls	r3, r3, #8
 800d556:	4a16      	ldr	r2, [pc, #88]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d558:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d55a:	4b15      	ldr	r3, [pc, #84]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d562:	4a13      	ldr	r2, [pc, #76]	; (800d5b0 <xPortStartScheduler+0xd8>)
 800d564:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	b2da      	uxtb	r2, r3
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d56e:	4b11      	ldr	r3, [pc, #68]	; (800d5b4 <xPortStartScheduler+0xdc>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a10      	ldr	r2, [pc, #64]	; (800d5b4 <xPortStartScheduler+0xdc>)
 800d574:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d57a:	4b0e      	ldr	r3, [pc, #56]	; (800d5b4 <xPortStartScheduler+0xdc>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4a0d      	ldr	r2, [pc, #52]	; (800d5b4 <xPortStartScheduler+0xdc>)
 800d580:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d584:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d586:	f000 f8b9 	bl	800d6fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d58a:	4b0b      	ldr	r3, [pc, #44]	; (800d5b8 <xPortStartScheduler+0xe0>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d590:	f7ff ff92 	bl	800d4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d594:	f7fe fe42 	bl	800c21c <vTaskSwitchContext>
	prvTaskExitError();
 800d598:	f7ff ff4e 	bl	800d438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	e000e400 	.word	0xe000e400
 800d5ac:	200019b0 	.word	0x200019b0
 800d5b0:	200019b4 	.word	0x200019b4
 800d5b4:	e000ed20 	.word	0xe000ed20
 800d5b8:	2000020c 	.word	0x2000020c

0800d5bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	607b      	str	r3, [r7, #4]
}
 800d5d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <vPortEnterCritical+0x58>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	4a0d      	ldr	r2, [pc, #52]	; (800d614 <vPortEnterCritical+0x58>)
 800d5de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d5e0:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <vPortEnterCritical+0x58>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d10f      	bne.n	800d608 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d5e8:	4b0b      	ldr	r3, [pc, #44]	; (800d618 <vPortEnterCritical+0x5c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00a      	beq.n	800d608 <vPortEnterCritical+0x4c>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	603b      	str	r3, [r7, #0]
}
 800d604:	bf00      	nop
 800d606:	e7fe      	b.n	800d606 <vPortEnterCritical+0x4a>
	}
}
 800d608:	bf00      	nop
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bc80      	pop	{r7}
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop
 800d614:	2000020c 	.word	0x2000020c
 800d618:	e000ed04 	.word	0xe000ed04

0800d61c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d622:	4b11      	ldr	r3, [pc, #68]	; (800d668 <vPortExitCritical+0x4c>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <vPortExitCritical+0x24>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	607b      	str	r3, [r7, #4]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d640:	4b09      	ldr	r3, [pc, #36]	; (800d668 <vPortExitCritical+0x4c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3b01      	subs	r3, #1
 800d646:	4a08      	ldr	r2, [pc, #32]	; (800d668 <vPortExitCritical+0x4c>)
 800d648:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d64a:	4b07      	ldr	r3, [pc, #28]	; (800d668 <vPortExitCritical+0x4c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d105      	bne.n	800d65e <vPortExitCritical+0x42>
 800d652:	2300      	movs	r3, #0
 800d654:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	f383 8811 	msr	BASEPRI, r3
}
 800d65c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d65e:	bf00      	nop
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	bc80      	pop	{r7}
 800d666:	4770      	bx	lr
 800d668:	2000020c 	.word	0x2000020c
 800d66c:	00000000 	.word	0x00000000

0800d670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d670:	f3ef 8009 	mrs	r0, PSP
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	4b0d      	ldr	r3, [pc, #52]	; (800d6b0 <pxCurrentTCBConst>)
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d680:	6010      	str	r0, [r2, #0]
 800d682:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d686:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d68a:	f380 8811 	msr	BASEPRI, r0
 800d68e:	f7fe fdc5 	bl	800c21c <vTaskSwitchContext>
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8811 	msr	BASEPRI, r0
 800d69a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d69e:	6819      	ldr	r1, [r3, #0]
 800d6a0:	6808      	ldr	r0, [r1, #0]
 800d6a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d6a6:	f380 8809 	msr	PSP, r0
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	4770      	bx	lr

0800d6b0 <pxCurrentTCBConst>:
 800d6b0:	20001788 	.word	0x20001788
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d6b4:	bf00      	nop
 800d6b6:	bf00      	nop

0800d6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	607b      	str	r3, [r7, #4]
}
 800d6d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d6d2:	f7fe fce5 	bl	800c0a0 <xTaskIncrementTick>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d003      	beq.n	800d6e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6dc:	4b06      	ldr	r3, [pc, #24]	; (800d6f8 <SysTick_Handler+0x40>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f383 8811 	msr	BASEPRI, r3
}
 800d6ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	e000ed04 	.word	0xe000ed04

0800d6fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d700:	4b0a      	ldr	r3, [pc, #40]	; (800d72c <vPortSetupTimerInterrupt+0x30>)
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d706:	4b0a      	ldr	r3, [pc, #40]	; (800d730 <vPortSetupTimerInterrupt+0x34>)
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d70c:	4b09      	ldr	r3, [pc, #36]	; (800d734 <vPortSetupTimerInterrupt+0x38>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a09      	ldr	r2, [pc, #36]	; (800d738 <vPortSetupTimerInterrupt+0x3c>)
 800d712:	fba2 2303 	umull	r2, r3, r2, r3
 800d716:	099b      	lsrs	r3, r3, #6
 800d718:	4a08      	ldr	r2, [pc, #32]	; (800d73c <vPortSetupTimerInterrupt+0x40>)
 800d71a:	3b01      	subs	r3, #1
 800d71c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d71e:	4b03      	ldr	r3, [pc, #12]	; (800d72c <vPortSetupTimerInterrupt+0x30>)
 800d720:	2207      	movs	r2, #7
 800d722:	601a      	str	r2, [r3, #0]
}
 800d724:	bf00      	nop
 800d726:	46bd      	mov	sp, r7
 800d728:	bc80      	pop	{r7}
 800d72a:	4770      	bx	lr
 800d72c:	e000e010 	.word	0xe000e010
 800d730:	e000e018 	.word	0xe000e018
 800d734:	20000200 	.word	0x20000200
 800d738:	10624dd3 	.word	0x10624dd3
 800d73c:	e000e014 	.word	0xe000e014

0800d740 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d746:	f3ef 8305 	mrs	r3, IPSR
 800d74a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b0f      	cmp	r3, #15
 800d750:	d914      	bls.n	800d77c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d752:	4a16      	ldr	r2, [pc, #88]	; (800d7ac <vPortValidateInterruptPriority+0x6c>)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	781b      	ldrb	r3, [r3, #0]
 800d75a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d75c:	4b14      	ldr	r3, [pc, #80]	; (800d7b0 <vPortValidateInterruptPriority+0x70>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	7afa      	ldrb	r2, [r7, #11]
 800d762:	429a      	cmp	r2, r3
 800d764:	d20a      	bcs.n	800d77c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	607b      	str	r3, [r7, #4]
}
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d77c:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <vPortValidateInterruptPriority+0x74>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d784:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <vPortValidateInterruptPriority+0x78>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d90a      	bls.n	800d7a2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d790:	f383 8811 	msr	BASEPRI, r3
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	f3bf 8f4f 	dsb	sy
 800d79c:	603b      	str	r3, [r7, #0]
}
 800d79e:	bf00      	nop
 800d7a0:	e7fe      	b.n	800d7a0 <vPortValidateInterruptPriority+0x60>
	}
 800d7a2:	bf00      	nop
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bc80      	pop	{r7}
 800d7aa:	4770      	bx	lr
 800d7ac:	e000e3f0 	.word	0xe000e3f0
 800d7b0:	200019b0 	.word	0x200019b0
 800d7b4:	e000ed0c 	.word	0xe000ed0c
 800d7b8:	200019b4 	.word	0x200019b4

0800d7bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b08a      	sub	sp, #40	; 0x28
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7c8:	f7fe fbb2 	bl	800bf30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7cc:	4b58      	ldr	r3, [pc, #352]	; (800d930 <pvPortMalloc+0x174>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d7d4:	f000 f910 	bl	800d9f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d7d8:	4b56      	ldr	r3, [pc, #344]	; (800d934 <pvPortMalloc+0x178>)
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f040 808e 	bne.w	800d902 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d01d      	beq.n	800d828 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d7ec:	2208      	movs	r2, #8
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d014      	beq.n	800d828 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f023 0307 	bic.w	r3, r3, #7
 800d804:	3308      	adds	r3, #8
 800d806:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f003 0307 	and.w	r3, r3, #7
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00a      	beq.n	800d828 <pvPortMalloc+0x6c>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	617b      	str	r3, [r7, #20]
}
 800d824:	bf00      	nop
 800d826:	e7fe      	b.n	800d826 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d069      	beq.n	800d902 <pvPortMalloc+0x146>
 800d82e:	4b42      	ldr	r3, [pc, #264]	; (800d938 <pvPortMalloc+0x17c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	429a      	cmp	r2, r3
 800d836:	d864      	bhi.n	800d902 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d838:	4b40      	ldr	r3, [pc, #256]	; (800d93c <pvPortMalloc+0x180>)
 800d83a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d83c:	4b3f      	ldr	r3, [pc, #252]	; (800d93c <pvPortMalloc+0x180>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d842:	e004      	b.n	800d84e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	687a      	ldr	r2, [r7, #4]
 800d854:	429a      	cmp	r2, r3
 800d856:	d903      	bls.n	800d860 <pvPortMalloc+0xa4>
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f1      	bne.n	800d844 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d860:	4b33      	ldr	r3, [pc, #204]	; (800d930 <pvPortMalloc+0x174>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d866:	429a      	cmp	r2, r3
 800d868:	d04b      	beq.n	800d902 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d86a:	6a3b      	ldr	r3, [r7, #32]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2208      	movs	r2, #8
 800d870:	4413      	add	r3, r2
 800d872:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	1ad2      	subs	r2, r2, r3
 800d884:	2308      	movs	r3, #8
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	429a      	cmp	r2, r3
 800d88a:	d91f      	bls.n	800d8cc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4413      	add	r3, r2
 800d892:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	f003 0307 	and.w	r3, r3, #7
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00a      	beq.n	800d8b4 <pvPortMalloc+0xf8>
	__asm volatile
 800d89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a2:	f383 8811 	msr	BASEPRI, r3
 800d8a6:	f3bf 8f6f 	isb	sy
 800d8aa:	f3bf 8f4f 	dsb	sy
 800d8ae:	613b      	str	r3, [r7, #16]
}
 800d8b0:	bf00      	nop
 800d8b2:	e7fe      	b.n	800d8b2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	1ad2      	subs	r2, r2, r3
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8c6:	69b8      	ldr	r0, [r7, #24]
 800d8c8:	f000 f8f8 	bl	800dabc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d8cc:	4b1a      	ldr	r3, [pc, #104]	; (800d938 <pvPortMalloc+0x17c>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	1ad3      	subs	r3, r2, r3
 800d8d6:	4a18      	ldr	r2, [pc, #96]	; (800d938 <pvPortMalloc+0x17c>)
 800d8d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d8da:	4b17      	ldr	r3, [pc, #92]	; (800d938 <pvPortMalloc+0x17c>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b18      	ldr	r3, [pc, #96]	; (800d940 <pvPortMalloc+0x184>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d203      	bcs.n	800d8ee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8e6:	4b14      	ldr	r3, [pc, #80]	; (800d938 <pvPortMalloc+0x17c>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a15      	ldr	r2, [pc, #84]	; (800d940 <pvPortMalloc+0x184>)
 800d8ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	685a      	ldr	r2, [r3, #4]
 800d8f2:	4b10      	ldr	r3, [pc, #64]	; (800d934 <pvPortMalloc+0x178>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	431a      	orrs	r2, r3
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d902:	f7fe fb23 	bl	800bf4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	f003 0307 	and.w	r3, r3, #7
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00a      	beq.n	800d926 <pvPortMalloc+0x16a>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	60fb      	str	r3, [r7, #12]
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <pvPortMalloc+0x168>
	return pvReturn;
 800d926:	69fb      	ldr	r3, [r7, #28]
}
 800d928:	4618      	mov	r0, r3
 800d92a:	3728      	adds	r7, #40	; 0x28
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	20002dc0 	.word	0x20002dc0
 800d934:	20002dcc 	.word	0x20002dcc
 800d938:	20002dc4 	.word	0x20002dc4
 800d93c:	20002db8 	.word	0x20002db8
 800d940:	20002dc8 	.word	0x20002dc8

0800d944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d048      	beq.n	800d9e8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d956:	2308      	movs	r3, #8
 800d958:	425b      	negs	r3, r3
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	4413      	add	r3, r2
 800d95e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	685a      	ldr	r2, [r3, #4]
 800d968:	4b21      	ldr	r3, [pc, #132]	; (800d9f0 <vPortFree+0xac>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4013      	ands	r3, r2
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d10a      	bne.n	800d988 <vPortFree+0x44>
	__asm volatile
 800d972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d976:	f383 8811 	msr	BASEPRI, r3
 800d97a:	f3bf 8f6f 	isb	sy
 800d97e:	f3bf 8f4f 	dsb	sy
 800d982:	60fb      	str	r3, [r7, #12]
}
 800d984:	bf00      	nop
 800d986:	e7fe      	b.n	800d986 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <vPortFree+0x62>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	60bb      	str	r3, [r7, #8]
}
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	4b11      	ldr	r3, [pc, #68]	; (800d9f0 <vPortFree+0xac>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4013      	ands	r3, r2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d019      	beq.n	800d9e8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9b4:	693b      	ldr	r3, [r7, #16]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d115      	bne.n	800d9e8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	685a      	ldr	r2, [r3, #4]
 800d9c0:	4b0b      	ldr	r3, [pc, #44]	; (800d9f0 <vPortFree+0xac>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	43db      	mvns	r3, r3
 800d9c6:	401a      	ands	r2, r3
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9cc:	f7fe fab0 	bl	800bf30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	685a      	ldr	r2, [r3, #4]
 800d9d4:	4b07      	ldr	r3, [pc, #28]	; (800d9f4 <vPortFree+0xb0>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4413      	add	r3, r2
 800d9da:	4a06      	ldr	r2, [pc, #24]	; (800d9f4 <vPortFree+0xb0>)
 800d9dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9de:	6938      	ldr	r0, [r7, #16]
 800d9e0:	f000 f86c 	bl	800dabc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d9e4:	f7fe fab2 	bl	800bf4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9e8:	bf00      	nop
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	20002dcc 	.word	0x20002dcc
 800d9f4:	20002dc4 	.word	0x20002dc4

0800d9f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800da02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da04:	4b27      	ldr	r3, [pc, #156]	; (800daa4 <prvHeapInit+0xac>)
 800da06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f003 0307 	and.w	r3, r3, #7
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00c      	beq.n	800da2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	3307      	adds	r3, #7
 800da16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f023 0307 	bic.w	r3, r3, #7
 800da1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da20:	68ba      	ldr	r2, [r7, #8]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	1ad3      	subs	r3, r2, r3
 800da26:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <prvHeapInit+0xac>)
 800da28:	4413      	add	r3, r2
 800da2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da30:	4a1d      	ldr	r2, [pc, #116]	; (800daa8 <prvHeapInit+0xb0>)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da36:	4b1c      	ldr	r3, [pc, #112]	; (800daa8 <prvHeapInit+0xb0>)
 800da38:	2200      	movs	r2, #0
 800da3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	4413      	add	r3, r2
 800da42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da44:	2208      	movs	r2, #8
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f023 0307 	bic.w	r3, r3, #7
 800da52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	4a15      	ldr	r2, [pc, #84]	; (800daac <prvHeapInit+0xb4>)
 800da58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da5a:	4b14      	ldr	r3, [pc, #80]	; (800daac <prvHeapInit+0xb4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2200      	movs	r2, #0
 800da60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da62:	4b12      	ldr	r3, [pc, #72]	; (800daac <prvHeapInit+0xb4>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2200      	movs	r2, #0
 800da68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	1ad2      	subs	r2, r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da78:	4b0c      	ldr	r3, [pc, #48]	; (800daac <prvHeapInit+0xb4>)
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	4a0a      	ldr	r2, [pc, #40]	; (800dab0 <prvHeapInit+0xb8>)
 800da86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	4a09      	ldr	r2, [pc, #36]	; (800dab4 <prvHeapInit+0xbc>)
 800da8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da90:	4b09      	ldr	r3, [pc, #36]	; (800dab8 <prvHeapInit+0xc0>)
 800da92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da96:	601a      	str	r2, [r3, #0]
}
 800da98:	bf00      	nop
 800da9a:	3714      	adds	r7, #20
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bc80      	pop	{r7}
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	200019b8 	.word	0x200019b8
 800daa8:	20002db8 	.word	0x20002db8
 800daac:	20002dc0 	.word	0x20002dc0
 800dab0:	20002dc8 	.word	0x20002dc8
 800dab4:	20002dc4 	.word	0x20002dc4
 800dab8:	20002dcc 	.word	0x20002dcc

0800dabc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dac4:	4b27      	ldr	r3, [pc, #156]	; (800db64 <prvInsertBlockIntoFreeList+0xa8>)
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	e002      	b.n	800dad0 <prvInsertBlockIntoFreeList+0x14>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d8f7      	bhi.n	800daca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	4413      	add	r3, r2
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d108      	bne.n	800dafe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	685a      	ldr	r2, [r3, #4]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	441a      	add	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	441a      	add	r2, r3
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	429a      	cmp	r2, r3
 800db10:	d118      	bne.n	800db44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4b14      	ldr	r3, [pc, #80]	; (800db68 <prvInsertBlockIntoFreeList+0xac>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d00d      	beq.n	800db3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	441a      	add	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	e008      	b.n	800db4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db3a:	4b0b      	ldr	r3, [pc, #44]	; (800db68 <prvInsertBlockIntoFreeList+0xac>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	e003      	b.n	800db4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	429a      	cmp	r2, r3
 800db52:	d002      	beq.n	800db5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db5a:	bf00      	nop
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	bc80      	pop	{r7}
 800db62:	4770      	bx	lr
 800db64:	20002db8 	.word	0x20002db8
 800db68:	20002dc0 	.word	0x20002dc0

0800db6c <malloc>:
 800db6c:	4b02      	ldr	r3, [pc, #8]	; (800db78 <malloc+0xc>)
 800db6e:	4601      	mov	r1, r0
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f000 b823 	b.w	800dbbc <_malloc_r>
 800db76:	bf00      	nop
 800db78:	2000025c 	.word	0x2000025c

0800db7c <sbrk_aligned>:
 800db7c:	b570      	push	{r4, r5, r6, lr}
 800db7e:	4e0e      	ldr	r6, [pc, #56]	; (800dbb8 <sbrk_aligned+0x3c>)
 800db80:	460c      	mov	r4, r1
 800db82:	6831      	ldr	r1, [r6, #0]
 800db84:	4605      	mov	r5, r0
 800db86:	b911      	cbnz	r1, 800db8e <sbrk_aligned+0x12>
 800db88:	f000 f938 	bl	800ddfc <_sbrk_r>
 800db8c:	6030      	str	r0, [r6, #0]
 800db8e:	4621      	mov	r1, r4
 800db90:	4628      	mov	r0, r5
 800db92:	f000 f933 	bl	800ddfc <_sbrk_r>
 800db96:	1c43      	adds	r3, r0, #1
 800db98:	d00a      	beq.n	800dbb0 <sbrk_aligned+0x34>
 800db9a:	1cc4      	adds	r4, r0, #3
 800db9c:	f024 0403 	bic.w	r4, r4, #3
 800dba0:	42a0      	cmp	r0, r4
 800dba2:	d007      	beq.n	800dbb4 <sbrk_aligned+0x38>
 800dba4:	1a21      	subs	r1, r4, r0
 800dba6:	4628      	mov	r0, r5
 800dba8:	f000 f928 	bl	800ddfc <_sbrk_r>
 800dbac:	3001      	adds	r0, #1
 800dbae:	d101      	bne.n	800dbb4 <sbrk_aligned+0x38>
 800dbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}
 800dbb8:	20002dd4 	.word	0x20002dd4

0800dbbc <_malloc_r>:
 800dbbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc0:	1ccd      	adds	r5, r1, #3
 800dbc2:	f025 0503 	bic.w	r5, r5, #3
 800dbc6:	3508      	adds	r5, #8
 800dbc8:	2d0c      	cmp	r5, #12
 800dbca:	bf38      	it	cc
 800dbcc:	250c      	movcc	r5, #12
 800dbce:	2d00      	cmp	r5, #0
 800dbd0:	4607      	mov	r7, r0
 800dbd2:	db01      	blt.n	800dbd8 <_malloc_r+0x1c>
 800dbd4:	42a9      	cmp	r1, r5
 800dbd6:	d905      	bls.n	800dbe4 <_malloc_r+0x28>
 800dbd8:	230c      	movs	r3, #12
 800dbda:	2600      	movs	r6, #0
 800dbdc:	603b      	str	r3, [r7, #0]
 800dbde:	4630      	mov	r0, r6
 800dbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbe4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dcb8 <_malloc_r+0xfc>
 800dbe8:	f000 f868 	bl	800dcbc <__malloc_lock>
 800dbec:	f8d8 3000 	ldr.w	r3, [r8]
 800dbf0:	461c      	mov	r4, r3
 800dbf2:	bb5c      	cbnz	r4, 800dc4c <_malloc_r+0x90>
 800dbf4:	4629      	mov	r1, r5
 800dbf6:	4638      	mov	r0, r7
 800dbf8:	f7ff ffc0 	bl	800db7c <sbrk_aligned>
 800dbfc:	1c43      	adds	r3, r0, #1
 800dbfe:	4604      	mov	r4, r0
 800dc00:	d155      	bne.n	800dcae <_malloc_r+0xf2>
 800dc02:	f8d8 4000 	ldr.w	r4, [r8]
 800dc06:	4626      	mov	r6, r4
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	d145      	bne.n	800dc98 <_malloc_r+0xdc>
 800dc0c:	2c00      	cmp	r4, #0
 800dc0e:	d048      	beq.n	800dca2 <_malloc_r+0xe6>
 800dc10:	6823      	ldr	r3, [r4, #0]
 800dc12:	4631      	mov	r1, r6
 800dc14:	4638      	mov	r0, r7
 800dc16:	eb04 0903 	add.w	r9, r4, r3
 800dc1a:	f000 f8ef 	bl	800ddfc <_sbrk_r>
 800dc1e:	4581      	cmp	r9, r0
 800dc20:	d13f      	bne.n	800dca2 <_malloc_r+0xe6>
 800dc22:	6821      	ldr	r1, [r4, #0]
 800dc24:	4638      	mov	r0, r7
 800dc26:	1a6d      	subs	r5, r5, r1
 800dc28:	4629      	mov	r1, r5
 800dc2a:	f7ff ffa7 	bl	800db7c <sbrk_aligned>
 800dc2e:	3001      	adds	r0, #1
 800dc30:	d037      	beq.n	800dca2 <_malloc_r+0xe6>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	442b      	add	r3, r5
 800dc36:	6023      	str	r3, [r4, #0]
 800dc38:	f8d8 3000 	ldr.w	r3, [r8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d038      	beq.n	800dcb2 <_malloc_r+0xf6>
 800dc40:	685a      	ldr	r2, [r3, #4]
 800dc42:	42a2      	cmp	r2, r4
 800dc44:	d12b      	bne.n	800dc9e <_malloc_r+0xe2>
 800dc46:	2200      	movs	r2, #0
 800dc48:	605a      	str	r2, [r3, #4]
 800dc4a:	e00f      	b.n	800dc6c <_malloc_r+0xb0>
 800dc4c:	6822      	ldr	r2, [r4, #0]
 800dc4e:	1b52      	subs	r2, r2, r5
 800dc50:	d41f      	bmi.n	800dc92 <_malloc_r+0xd6>
 800dc52:	2a0b      	cmp	r2, #11
 800dc54:	d917      	bls.n	800dc86 <_malloc_r+0xca>
 800dc56:	1961      	adds	r1, r4, r5
 800dc58:	42a3      	cmp	r3, r4
 800dc5a:	6025      	str	r5, [r4, #0]
 800dc5c:	bf18      	it	ne
 800dc5e:	6059      	strne	r1, [r3, #4]
 800dc60:	6863      	ldr	r3, [r4, #4]
 800dc62:	bf08      	it	eq
 800dc64:	f8c8 1000 	streq.w	r1, [r8]
 800dc68:	5162      	str	r2, [r4, r5]
 800dc6a:	604b      	str	r3, [r1, #4]
 800dc6c:	4638      	mov	r0, r7
 800dc6e:	f104 060b 	add.w	r6, r4, #11
 800dc72:	f000 f829 	bl	800dcc8 <__malloc_unlock>
 800dc76:	f026 0607 	bic.w	r6, r6, #7
 800dc7a:	1d23      	adds	r3, r4, #4
 800dc7c:	1af2      	subs	r2, r6, r3
 800dc7e:	d0ae      	beq.n	800dbde <_malloc_r+0x22>
 800dc80:	1b9b      	subs	r3, r3, r6
 800dc82:	50a3      	str	r3, [r4, r2]
 800dc84:	e7ab      	b.n	800dbde <_malloc_r+0x22>
 800dc86:	42a3      	cmp	r3, r4
 800dc88:	6862      	ldr	r2, [r4, #4]
 800dc8a:	d1dd      	bne.n	800dc48 <_malloc_r+0x8c>
 800dc8c:	f8c8 2000 	str.w	r2, [r8]
 800dc90:	e7ec      	b.n	800dc6c <_malloc_r+0xb0>
 800dc92:	4623      	mov	r3, r4
 800dc94:	6864      	ldr	r4, [r4, #4]
 800dc96:	e7ac      	b.n	800dbf2 <_malloc_r+0x36>
 800dc98:	4634      	mov	r4, r6
 800dc9a:	6876      	ldr	r6, [r6, #4]
 800dc9c:	e7b4      	b.n	800dc08 <_malloc_r+0x4c>
 800dc9e:	4613      	mov	r3, r2
 800dca0:	e7cc      	b.n	800dc3c <_malloc_r+0x80>
 800dca2:	230c      	movs	r3, #12
 800dca4:	4638      	mov	r0, r7
 800dca6:	603b      	str	r3, [r7, #0]
 800dca8:	f000 f80e 	bl	800dcc8 <__malloc_unlock>
 800dcac:	e797      	b.n	800dbde <_malloc_r+0x22>
 800dcae:	6025      	str	r5, [r4, #0]
 800dcb0:	e7dc      	b.n	800dc6c <_malloc_r+0xb0>
 800dcb2:	605b      	str	r3, [r3, #4]
 800dcb4:	deff      	udf	#255	; 0xff
 800dcb6:	bf00      	nop
 800dcb8:	20002dd0 	.word	0x20002dd0

0800dcbc <__malloc_lock>:
 800dcbc:	4801      	ldr	r0, [pc, #4]	; (800dcc4 <__malloc_lock+0x8>)
 800dcbe:	f000 b8d7 	b.w	800de70 <__retarget_lock_acquire_recursive>
 800dcc2:	bf00      	nop
 800dcc4:	20002f14 	.word	0x20002f14

0800dcc8 <__malloc_unlock>:
 800dcc8:	4801      	ldr	r0, [pc, #4]	; (800dcd0 <__malloc_unlock+0x8>)
 800dcca:	f000 b8d2 	b.w	800de72 <__retarget_lock_release_recursive>
 800dcce:	bf00      	nop
 800dcd0:	20002f14 	.word	0x20002f14

0800dcd4 <siprintf>:
 800dcd4:	b40e      	push	{r1, r2, r3}
 800dcd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dcda:	b500      	push	{lr}
 800dcdc:	b09c      	sub	sp, #112	; 0x70
 800dcde:	ab1d      	add	r3, sp, #116	; 0x74
 800dce0:	9002      	str	r0, [sp, #8]
 800dce2:	9006      	str	r0, [sp, #24]
 800dce4:	9107      	str	r1, [sp, #28]
 800dce6:	9104      	str	r1, [sp, #16]
 800dce8:	4808      	ldr	r0, [pc, #32]	; (800dd0c <siprintf+0x38>)
 800dcea:	4909      	ldr	r1, [pc, #36]	; (800dd10 <siprintf+0x3c>)
 800dcec:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf0:	9105      	str	r1, [sp, #20]
 800dcf2:	6800      	ldr	r0, [r0, #0]
 800dcf4:	a902      	add	r1, sp, #8
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	f000 f974 	bl	800dfe4 <_svfiprintf_r>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	b01c      	add	sp, #112	; 0x70
 800dd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd08:	b003      	add	sp, #12
 800dd0a:	4770      	bx	lr
 800dd0c:	2000025c 	.word	0x2000025c
 800dd10:	ffff0208 	.word	0xffff0208

0800dd14 <memset>:
 800dd14:	4603      	mov	r3, r0
 800dd16:	4402      	add	r2, r0
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d100      	bne.n	800dd1e <memset+0xa>
 800dd1c:	4770      	bx	lr
 800dd1e:	f803 1b01 	strb.w	r1, [r3], #1
 800dd22:	e7f9      	b.n	800dd18 <memset+0x4>

0800dd24 <strstr>:
 800dd24:	780a      	ldrb	r2, [r1, #0]
 800dd26:	b570      	push	{r4, r5, r6, lr}
 800dd28:	b96a      	cbnz	r2, 800dd46 <strstr+0x22>
 800dd2a:	bd70      	pop	{r4, r5, r6, pc}
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d109      	bne.n	800dd44 <strstr+0x20>
 800dd30:	460c      	mov	r4, r1
 800dd32:	4605      	mov	r5, r0
 800dd34:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0f6      	beq.n	800dd2a <strstr+0x6>
 800dd3c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800dd40:	429e      	cmp	r6, r3
 800dd42:	d0f7      	beq.n	800dd34 <strstr+0x10>
 800dd44:	3001      	adds	r0, #1
 800dd46:	7803      	ldrb	r3, [r0, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1ef      	bne.n	800dd2c <strstr+0x8>
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	e7ec      	b.n	800dd2a <strstr+0x6>

0800dd50 <_reclaim_reent>:
 800dd50:	4b29      	ldr	r3, [pc, #164]	; (800ddf8 <_reclaim_reent+0xa8>)
 800dd52:	b570      	push	{r4, r5, r6, lr}
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4604      	mov	r4, r0
 800dd58:	4283      	cmp	r3, r0
 800dd5a:	d04b      	beq.n	800ddf4 <_reclaim_reent+0xa4>
 800dd5c:	69c3      	ldr	r3, [r0, #28]
 800dd5e:	b143      	cbz	r3, 800dd72 <_reclaim_reent+0x22>
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d144      	bne.n	800ddf0 <_reclaim_reent+0xa0>
 800dd66:	69e3      	ldr	r3, [r4, #28]
 800dd68:	6819      	ldr	r1, [r3, #0]
 800dd6a:	b111      	cbz	r1, 800dd72 <_reclaim_reent+0x22>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	f000 f897 	bl	800dea0 <_free_r>
 800dd72:	6961      	ldr	r1, [r4, #20]
 800dd74:	b111      	cbz	r1, 800dd7c <_reclaim_reent+0x2c>
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f892 	bl	800dea0 <_free_r>
 800dd7c:	69e1      	ldr	r1, [r4, #28]
 800dd7e:	b111      	cbz	r1, 800dd86 <_reclaim_reent+0x36>
 800dd80:	4620      	mov	r0, r4
 800dd82:	f000 f88d 	bl	800dea0 <_free_r>
 800dd86:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd88:	b111      	cbz	r1, 800dd90 <_reclaim_reent+0x40>
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f000 f888 	bl	800dea0 <_free_r>
 800dd90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd92:	b111      	cbz	r1, 800dd9a <_reclaim_reent+0x4a>
 800dd94:	4620      	mov	r0, r4
 800dd96:	f000 f883 	bl	800dea0 <_free_r>
 800dd9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dd9c:	b111      	cbz	r1, 800dda4 <_reclaim_reent+0x54>
 800dd9e:	4620      	mov	r0, r4
 800dda0:	f000 f87e 	bl	800dea0 <_free_r>
 800dda4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dda6:	b111      	cbz	r1, 800ddae <_reclaim_reent+0x5e>
 800dda8:	4620      	mov	r0, r4
 800ddaa:	f000 f879 	bl	800dea0 <_free_r>
 800ddae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ddb0:	b111      	cbz	r1, 800ddb8 <_reclaim_reent+0x68>
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f000 f874 	bl	800dea0 <_free_r>
 800ddb8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ddba:	b111      	cbz	r1, 800ddc2 <_reclaim_reent+0x72>
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 f86f 	bl	800dea0 <_free_r>
 800ddc2:	6a23      	ldr	r3, [r4, #32]
 800ddc4:	b1b3      	cbz	r3, 800ddf4 <_reclaim_reent+0xa4>
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddcc:	4718      	bx	r3
 800ddce:	5949      	ldr	r1, [r1, r5]
 800ddd0:	b941      	cbnz	r1, 800dde4 <_reclaim_reent+0x94>
 800ddd2:	3504      	adds	r5, #4
 800ddd4:	69e3      	ldr	r3, [r4, #28]
 800ddd6:	2d80      	cmp	r5, #128	; 0x80
 800ddd8:	68d9      	ldr	r1, [r3, #12]
 800ddda:	d1f8      	bne.n	800ddce <_reclaim_reent+0x7e>
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 f85f 	bl	800dea0 <_free_r>
 800dde2:	e7c0      	b.n	800dd66 <_reclaim_reent+0x16>
 800dde4:	680e      	ldr	r6, [r1, #0]
 800dde6:	4620      	mov	r0, r4
 800dde8:	f000 f85a 	bl	800dea0 <_free_r>
 800ddec:	4631      	mov	r1, r6
 800ddee:	e7ef      	b.n	800ddd0 <_reclaim_reent+0x80>
 800ddf0:	2500      	movs	r5, #0
 800ddf2:	e7ef      	b.n	800ddd4 <_reclaim_reent+0x84>
 800ddf4:	bd70      	pop	{r4, r5, r6, pc}
 800ddf6:	bf00      	nop
 800ddf8:	2000025c 	.word	0x2000025c

0800ddfc <_sbrk_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	2300      	movs	r3, #0
 800de00:	4d05      	ldr	r5, [pc, #20]	; (800de18 <_sbrk_r+0x1c>)
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	f7f5 fd64 	bl	80038d4 <_sbrk>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_sbrk_r+0x1a>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_sbrk_r+0x1a>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	20002f10 	.word	0x20002f10

0800de1c <__errno>:
 800de1c:	4b01      	ldr	r3, [pc, #4]	; (800de24 <__errno+0x8>)
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	4770      	bx	lr
 800de22:	bf00      	nop
 800de24:	2000025c 	.word	0x2000025c

0800de28 <__libc_init_array>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	2600      	movs	r6, #0
 800de2c:	4d0c      	ldr	r5, [pc, #48]	; (800de60 <__libc_init_array+0x38>)
 800de2e:	4c0d      	ldr	r4, [pc, #52]	; (800de64 <__libc_init_array+0x3c>)
 800de30:	1b64      	subs	r4, r4, r5
 800de32:	10a4      	asrs	r4, r4, #2
 800de34:	42a6      	cmp	r6, r4
 800de36:	d109      	bne.n	800de4c <__libc_init_array+0x24>
 800de38:	f000 fbc6 	bl	800e5c8 <_init>
 800de3c:	2600      	movs	r6, #0
 800de3e:	4d0a      	ldr	r5, [pc, #40]	; (800de68 <__libc_init_array+0x40>)
 800de40:	4c0a      	ldr	r4, [pc, #40]	; (800de6c <__libc_init_array+0x44>)
 800de42:	1b64      	subs	r4, r4, r5
 800de44:	10a4      	asrs	r4, r4, #2
 800de46:	42a6      	cmp	r6, r4
 800de48:	d105      	bne.n	800de56 <__libc_init_array+0x2e>
 800de4a:	bd70      	pop	{r4, r5, r6, pc}
 800de4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de50:	4798      	blx	r3
 800de52:	3601      	adds	r6, #1
 800de54:	e7ee      	b.n	800de34 <__libc_init_array+0xc>
 800de56:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5a:	4798      	blx	r3
 800de5c:	3601      	adds	r6, #1
 800de5e:	e7f2      	b.n	800de46 <__libc_init_array+0x1e>
 800de60:	0800ea14 	.word	0x0800ea14
 800de64:	0800ea14 	.word	0x0800ea14
 800de68:	0800ea14 	.word	0x0800ea14
 800de6c:	0800ea18 	.word	0x0800ea18

0800de70 <__retarget_lock_acquire_recursive>:
 800de70:	4770      	bx	lr

0800de72 <__retarget_lock_release_recursive>:
 800de72:	4770      	bx	lr

0800de74 <strcpy>:
 800de74:	4603      	mov	r3, r0
 800de76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de7a:	f803 2b01 	strb.w	r2, [r3], #1
 800de7e:	2a00      	cmp	r2, #0
 800de80:	d1f9      	bne.n	800de76 <strcpy+0x2>
 800de82:	4770      	bx	lr

0800de84 <memcpy>:
 800de84:	440a      	add	r2, r1
 800de86:	4291      	cmp	r1, r2
 800de88:	f100 33ff 	add.w	r3, r0, #4294967295
 800de8c:	d100      	bne.n	800de90 <memcpy+0xc>
 800de8e:	4770      	bx	lr
 800de90:	b510      	push	{r4, lr}
 800de92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de96:	4291      	cmp	r1, r2
 800de98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de9c:	d1f9      	bne.n	800de92 <memcpy+0xe>
 800de9e:	bd10      	pop	{r4, pc}

0800dea0 <_free_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4605      	mov	r5, r0
 800dea4:	2900      	cmp	r1, #0
 800dea6:	d040      	beq.n	800df2a <_free_r+0x8a>
 800dea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deac:	1f0c      	subs	r4, r1, #4
 800deae:	2b00      	cmp	r3, #0
 800deb0:	bfb8      	it	lt
 800deb2:	18e4      	addlt	r4, r4, r3
 800deb4:	f7ff ff02 	bl	800dcbc <__malloc_lock>
 800deb8:	4a1c      	ldr	r2, [pc, #112]	; (800df2c <_free_r+0x8c>)
 800deba:	6813      	ldr	r3, [r2, #0]
 800debc:	b933      	cbnz	r3, 800decc <_free_r+0x2c>
 800debe:	6063      	str	r3, [r4, #4]
 800dec0:	6014      	str	r4, [r2, #0]
 800dec2:	4628      	mov	r0, r5
 800dec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec8:	f7ff befe 	b.w	800dcc8 <__malloc_unlock>
 800decc:	42a3      	cmp	r3, r4
 800dece:	d908      	bls.n	800dee2 <_free_r+0x42>
 800ded0:	6820      	ldr	r0, [r4, #0]
 800ded2:	1821      	adds	r1, r4, r0
 800ded4:	428b      	cmp	r3, r1
 800ded6:	bf01      	itttt	eq
 800ded8:	6819      	ldreq	r1, [r3, #0]
 800deda:	685b      	ldreq	r3, [r3, #4]
 800dedc:	1809      	addeq	r1, r1, r0
 800dede:	6021      	streq	r1, [r4, #0]
 800dee0:	e7ed      	b.n	800debe <_free_r+0x1e>
 800dee2:	461a      	mov	r2, r3
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	b10b      	cbz	r3, 800deec <_free_r+0x4c>
 800dee8:	42a3      	cmp	r3, r4
 800deea:	d9fa      	bls.n	800dee2 <_free_r+0x42>
 800deec:	6811      	ldr	r1, [r2, #0]
 800deee:	1850      	adds	r0, r2, r1
 800def0:	42a0      	cmp	r0, r4
 800def2:	d10b      	bne.n	800df0c <_free_r+0x6c>
 800def4:	6820      	ldr	r0, [r4, #0]
 800def6:	4401      	add	r1, r0
 800def8:	1850      	adds	r0, r2, r1
 800defa:	4283      	cmp	r3, r0
 800defc:	6011      	str	r1, [r2, #0]
 800defe:	d1e0      	bne.n	800dec2 <_free_r+0x22>
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	685b      	ldr	r3, [r3, #4]
 800df04:	4408      	add	r0, r1
 800df06:	6010      	str	r0, [r2, #0]
 800df08:	6053      	str	r3, [r2, #4]
 800df0a:	e7da      	b.n	800dec2 <_free_r+0x22>
 800df0c:	d902      	bls.n	800df14 <_free_r+0x74>
 800df0e:	230c      	movs	r3, #12
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	e7d6      	b.n	800dec2 <_free_r+0x22>
 800df14:	6820      	ldr	r0, [r4, #0]
 800df16:	1821      	adds	r1, r4, r0
 800df18:	428b      	cmp	r3, r1
 800df1a:	bf01      	itttt	eq
 800df1c:	6819      	ldreq	r1, [r3, #0]
 800df1e:	685b      	ldreq	r3, [r3, #4]
 800df20:	1809      	addeq	r1, r1, r0
 800df22:	6021      	streq	r1, [r4, #0]
 800df24:	6063      	str	r3, [r4, #4]
 800df26:	6054      	str	r4, [r2, #4]
 800df28:	e7cb      	b.n	800dec2 <_free_r+0x22>
 800df2a:	bd38      	pop	{r3, r4, r5, pc}
 800df2c:	20002dd0 	.word	0x20002dd0

0800df30 <__ssputs_r>:
 800df30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df34:	461f      	mov	r7, r3
 800df36:	688e      	ldr	r6, [r1, #8]
 800df38:	4682      	mov	sl, r0
 800df3a:	42be      	cmp	r6, r7
 800df3c:	460c      	mov	r4, r1
 800df3e:	4690      	mov	r8, r2
 800df40:	680b      	ldr	r3, [r1, #0]
 800df42:	d82c      	bhi.n	800df9e <__ssputs_r+0x6e>
 800df44:	898a      	ldrh	r2, [r1, #12]
 800df46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df4a:	d026      	beq.n	800df9a <__ssputs_r+0x6a>
 800df4c:	6965      	ldr	r5, [r4, #20]
 800df4e:	6909      	ldr	r1, [r1, #16]
 800df50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df54:	eba3 0901 	sub.w	r9, r3, r1
 800df58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df5c:	1c7b      	adds	r3, r7, #1
 800df5e:	444b      	add	r3, r9
 800df60:	106d      	asrs	r5, r5, #1
 800df62:	429d      	cmp	r5, r3
 800df64:	bf38      	it	cc
 800df66:	461d      	movcc	r5, r3
 800df68:	0553      	lsls	r3, r2, #21
 800df6a:	d527      	bpl.n	800dfbc <__ssputs_r+0x8c>
 800df6c:	4629      	mov	r1, r5
 800df6e:	f7ff fe25 	bl	800dbbc <_malloc_r>
 800df72:	4606      	mov	r6, r0
 800df74:	b360      	cbz	r0, 800dfd0 <__ssputs_r+0xa0>
 800df76:	464a      	mov	r2, r9
 800df78:	6921      	ldr	r1, [r4, #16]
 800df7a:	f7ff ff83 	bl	800de84 <memcpy>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df88:	81a3      	strh	r3, [r4, #12]
 800df8a:	6126      	str	r6, [r4, #16]
 800df8c:	444e      	add	r6, r9
 800df8e:	6026      	str	r6, [r4, #0]
 800df90:	463e      	mov	r6, r7
 800df92:	6165      	str	r5, [r4, #20]
 800df94:	eba5 0509 	sub.w	r5, r5, r9
 800df98:	60a5      	str	r5, [r4, #8]
 800df9a:	42be      	cmp	r6, r7
 800df9c:	d900      	bls.n	800dfa0 <__ssputs_r+0x70>
 800df9e:	463e      	mov	r6, r7
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	4641      	mov	r1, r8
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	f000 faaf 	bl	800e508 <memmove>
 800dfaa:	2000      	movs	r0, #0
 800dfac:	68a3      	ldr	r3, [r4, #8]
 800dfae:	1b9b      	subs	r3, r3, r6
 800dfb0:	60a3      	str	r3, [r4, #8]
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	4433      	add	r3, r6
 800dfb6:	6023      	str	r3, [r4, #0]
 800dfb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfbc:	462a      	mov	r2, r5
 800dfbe:	f000 facb 	bl	800e558 <_realloc_r>
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d1e0      	bne.n	800df8a <__ssputs_r+0x5a>
 800dfc8:	4650      	mov	r0, sl
 800dfca:	6921      	ldr	r1, [r4, #16]
 800dfcc:	f7ff ff68 	bl	800dea0 <_free_r>
 800dfd0:	230c      	movs	r3, #12
 800dfd2:	f8ca 3000 	str.w	r3, [sl]
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe0:	81a3      	strh	r3, [r4, #12]
 800dfe2:	e7e9      	b.n	800dfb8 <__ssputs_r+0x88>

0800dfe4 <_svfiprintf_r>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4698      	mov	r8, r3
 800dfea:	898b      	ldrh	r3, [r1, #12]
 800dfec:	4607      	mov	r7, r0
 800dfee:	061b      	lsls	r3, r3, #24
 800dff0:	460d      	mov	r5, r1
 800dff2:	4614      	mov	r4, r2
 800dff4:	b09d      	sub	sp, #116	; 0x74
 800dff6:	d50e      	bpl.n	800e016 <_svfiprintf_r+0x32>
 800dff8:	690b      	ldr	r3, [r1, #16]
 800dffa:	b963      	cbnz	r3, 800e016 <_svfiprintf_r+0x32>
 800dffc:	2140      	movs	r1, #64	; 0x40
 800dffe:	f7ff fddd 	bl	800dbbc <_malloc_r>
 800e002:	6028      	str	r0, [r5, #0]
 800e004:	6128      	str	r0, [r5, #16]
 800e006:	b920      	cbnz	r0, 800e012 <_svfiprintf_r+0x2e>
 800e008:	230c      	movs	r3, #12
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	f04f 30ff 	mov.w	r0, #4294967295
 800e010:	e0d0      	b.n	800e1b4 <_svfiprintf_r+0x1d0>
 800e012:	2340      	movs	r3, #64	; 0x40
 800e014:	616b      	str	r3, [r5, #20]
 800e016:	2300      	movs	r3, #0
 800e018:	9309      	str	r3, [sp, #36]	; 0x24
 800e01a:	2320      	movs	r3, #32
 800e01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e020:	2330      	movs	r3, #48	; 0x30
 800e022:	f04f 0901 	mov.w	r9, #1
 800e026:	f8cd 800c 	str.w	r8, [sp, #12]
 800e02a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800e1cc <_svfiprintf_r+0x1e8>
 800e02e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e032:	4623      	mov	r3, r4
 800e034:	469a      	mov	sl, r3
 800e036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e03a:	b10a      	cbz	r2, 800e040 <_svfiprintf_r+0x5c>
 800e03c:	2a25      	cmp	r2, #37	; 0x25
 800e03e:	d1f9      	bne.n	800e034 <_svfiprintf_r+0x50>
 800e040:	ebba 0b04 	subs.w	fp, sl, r4
 800e044:	d00b      	beq.n	800e05e <_svfiprintf_r+0x7a>
 800e046:	465b      	mov	r3, fp
 800e048:	4622      	mov	r2, r4
 800e04a:	4629      	mov	r1, r5
 800e04c:	4638      	mov	r0, r7
 800e04e:	f7ff ff6f 	bl	800df30 <__ssputs_r>
 800e052:	3001      	adds	r0, #1
 800e054:	f000 80a9 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e05a:	445a      	add	r2, fp
 800e05c:	9209      	str	r2, [sp, #36]	; 0x24
 800e05e:	f89a 3000 	ldrb.w	r3, [sl]
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 80a1 	beq.w	800e1aa <_svfiprintf_r+0x1c6>
 800e068:	2300      	movs	r3, #0
 800e06a:	f04f 32ff 	mov.w	r2, #4294967295
 800e06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e072:	f10a 0a01 	add.w	sl, sl, #1
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	9307      	str	r3, [sp, #28]
 800e07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e07e:	931a      	str	r3, [sp, #104]	; 0x68
 800e080:	4654      	mov	r4, sl
 800e082:	2205      	movs	r2, #5
 800e084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e088:	4850      	ldr	r0, [pc, #320]	; (800e1cc <_svfiprintf_r+0x1e8>)
 800e08a:	f000 fa57 	bl	800e53c <memchr>
 800e08e:	9a04      	ldr	r2, [sp, #16]
 800e090:	b9d8      	cbnz	r0, 800e0ca <_svfiprintf_r+0xe6>
 800e092:	06d0      	lsls	r0, r2, #27
 800e094:	bf44      	itt	mi
 800e096:	2320      	movmi	r3, #32
 800e098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e09c:	0711      	lsls	r1, r2, #28
 800e09e:	bf44      	itt	mi
 800e0a0:	232b      	movmi	r3, #43	; 0x2b
 800e0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ac:	d015      	beq.n	800e0da <_svfiprintf_r+0xf6>
 800e0ae:	4654      	mov	r4, sl
 800e0b0:	2000      	movs	r0, #0
 800e0b2:	f04f 0c0a 	mov.w	ip, #10
 800e0b6:	9a07      	ldr	r2, [sp, #28]
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0be:	3b30      	subs	r3, #48	; 0x30
 800e0c0:	2b09      	cmp	r3, #9
 800e0c2:	d94d      	bls.n	800e160 <_svfiprintf_r+0x17c>
 800e0c4:	b1b0      	cbz	r0, 800e0f4 <_svfiprintf_r+0x110>
 800e0c6:	9207      	str	r2, [sp, #28]
 800e0c8:	e014      	b.n	800e0f4 <_svfiprintf_r+0x110>
 800e0ca:	eba0 0308 	sub.w	r3, r0, r8
 800e0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	46a2      	mov	sl, r4
 800e0d6:	9304      	str	r3, [sp, #16]
 800e0d8:	e7d2      	b.n	800e080 <_svfiprintf_r+0x9c>
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	1d19      	adds	r1, r3, #4
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	9103      	str	r1, [sp, #12]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	bfbb      	ittet	lt
 800e0e6:	425b      	neglt	r3, r3
 800e0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ec:	9307      	strge	r3, [sp, #28]
 800e0ee:	9307      	strlt	r3, [sp, #28]
 800e0f0:	bfb8      	it	lt
 800e0f2:	9204      	strlt	r2, [sp, #16]
 800e0f4:	7823      	ldrb	r3, [r4, #0]
 800e0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0f8:	d10c      	bne.n	800e114 <_svfiprintf_r+0x130>
 800e0fa:	7863      	ldrb	r3, [r4, #1]
 800e0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e0fe:	d134      	bne.n	800e16a <_svfiprintf_r+0x186>
 800e100:	9b03      	ldr	r3, [sp, #12]
 800e102:	3402      	adds	r4, #2
 800e104:	1d1a      	adds	r2, r3, #4
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	9203      	str	r2, [sp, #12]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bfb8      	it	lt
 800e10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e112:	9305      	str	r3, [sp, #20]
 800e114:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e1d0 <_svfiprintf_r+0x1ec>
 800e118:	2203      	movs	r2, #3
 800e11a:	4650      	mov	r0, sl
 800e11c:	7821      	ldrb	r1, [r4, #0]
 800e11e:	f000 fa0d 	bl	800e53c <memchr>
 800e122:	b138      	cbz	r0, 800e134 <_svfiprintf_r+0x150>
 800e124:	2240      	movs	r2, #64	; 0x40
 800e126:	9b04      	ldr	r3, [sp, #16]
 800e128:	eba0 000a 	sub.w	r0, r0, sl
 800e12c:	4082      	lsls	r2, r0
 800e12e:	4313      	orrs	r3, r2
 800e130:	3401      	adds	r4, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e138:	2206      	movs	r2, #6
 800e13a:	4826      	ldr	r0, [pc, #152]	; (800e1d4 <_svfiprintf_r+0x1f0>)
 800e13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e140:	f000 f9fc 	bl	800e53c <memchr>
 800e144:	2800      	cmp	r0, #0
 800e146:	d038      	beq.n	800e1ba <_svfiprintf_r+0x1d6>
 800e148:	4b23      	ldr	r3, [pc, #140]	; (800e1d8 <_svfiprintf_r+0x1f4>)
 800e14a:	bb1b      	cbnz	r3, 800e194 <_svfiprintf_r+0x1b0>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	3307      	adds	r3, #7
 800e150:	f023 0307 	bic.w	r3, r3, #7
 800e154:	3308      	adds	r3, #8
 800e156:	9303      	str	r3, [sp, #12]
 800e158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e15a:	4433      	add	r3, r6
 800e15c:	9309      	str	r3, [sp, #36]	; 0x24
 800e15e:	e768      	b.n	800e032 <_svfiprintf_r+0x4e>
 800e160:	460c      	mov	r4, r1
 800e162:	2001      	movs	r0, #1
 800e164:	fb0c 3202 	mla	r2, ip, r2, r3
 800e168:	e7a6      	b.n	800e0b8 <_svfiprintf_r+0xd4>
 800e16a:	2300      	movs	r3, #0
 800e16c:	f04f 0c0a 	mov.w	ip, #10
 800e170:	4619      	mov	r1, r3
 800e172:	3401      	adds	r4, #1
 800e174:	9305      	str	r3, [sp, #20]
 800e176:	4620      	mov	r0, r4
 800e178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e17c:	3a30      	subs	r2, #48	; 0x30
 800e17e:	2a09      	cmp	r2, #9
 800e180:	d903      	bls.n	800e18a <_svfiprintf_r+0x1a6>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0c6      	beq.n	800e114 <_svfiprintf_r+0x130>
 800e186:	9105      	str	r1, [sp, #20]
 800e188:	e7c4      	b.n	800e114 <_svfiprintf_r+0x130>
 800e18a:	4604      	mov	r4, r0
 800e18c:	2301      	movs	r3, #1
 800e18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e192:	e7f0      	b.n	800e176 <_svfiprintf_r+0x192>
 800e194:	ab03      	add	r3, sp, #12
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	462a      	mov	r2, r5
 800e19a:	4638      	mov	r0, r7
 800e19c:	4b0f      	ldr	r3, [pc, #60]	; (800e1dc <_svfiprintf_r+0x1f8>)
 800e19e:	a904      	add	r1, sp, #16
 800e1a0:	f3af 8000 	nop.w
 800e1a4:	1c42      	adds	r2, r0, #1
 800e1a6:	4606      	mov	r6, r0
 800e1a8:	d1d6      	bne.n	800e158 <_svfiprintf_r+0x174>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	f53f af2d 	bmi.w	800e00c <_svfiprintf_r+0x28>
 800e1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1b4:	b01d      	add	sp, #116	; 0x74
 800e1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ba:	ab03      	add	r3, sp, #12
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	462a      	mov	r2, r5
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	4b06      	ldr	r3, [pc, #24]	; (800e1dc <_svfiprintf_r+0x1f8>)
 800e1c4:	a904      	add	r1, sp, #16
 800e1c6:	f000 f87d 	bl	800e2c4 <_printf_i>
 800e1ca:	e7eb      	b.n	800e1a4 <_svfiprintf_r+0x1c0>
 800e1cc:	0800e9de 	.word	0x0800e9de
 800e1d0:	0800e9e4 	.word	0x0800e9e4
 800e1d4:	0800e9e8 	.word	0x0800e9e8
 800e1d8:	00000000 	.word	0x00000000
 800e1dc:	0800df31 	.word	0x0800df31

0800e1e0 <_printf_common>:
 800e1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e4:	4616      	mov	r6, r2
 800e1e6:	4699      	mov	r9, r3
 800e1e8:	688a      	ldr	r2, [r1, #8]
 800e1ea:	690b      	ldr	r3, [r1, #16]
 800e1ec:	4607      	mov	r7, r0
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	bfb8      	it	lt
 800e1f2:	4613      	movlt	r3, r2
 800e1f4:	6033      	str	r3, [r6, #0]
 800e1f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e200:	b10a      	cbz	r2, 800e206 <_printf_common+0x26>
 800e202:	3301      	adds	r3, #1
 800e204:	6033      	str	r3, [r6, #0]
 800e206:	6823      	ldr	r3, [r4, #0]
 800e208:	0699      	lsls	r1, r3, #26
 800e20a:	bf42      	ittt	mi
 800e20c:	6833      	ldrmi	r3, [r6, #0]
 800e20e:	3302      	addmi	r3, #2
 800e210:	6033      	strmi	r3, [r6, #0]
 800e212:	6825      	ldr	r5, [r4, #0]
 800e214:	f015 0506 	ands.w	r5, r5, #6
 800e218:	d106      	bne.n	800e228 <_printf_common+0x48>
 800e21a:	f104 0a19 	add.w	sl, r4, #25
 800e21e:	68e3      	ldr	r3, [r4, #12]
 800e220:	6832      	ldr	r2, [r6, #0]
 800e222:	1a9b      	subs	r3, r3, r2
 800e224:	42ab      	cmp	r3, r5
 800e226:	dc2b      	bgt.n	800e280 <_printf_common+0xa0>
 800e228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e22c:	1e13      	subs	r3, r2, #0
 800e22e:	6822      	ldr	r2, [r4, #0]
 800e230:	bf18      	it	ne
 800e232:	2301      	movne	r3, #1
 800e234:	0692      	lsls	r2, r2, #26
 800e236:	d430      	bmi.n	800e29a <_printf_common+0xba>
 800e238:	4649      	mov	r1, r9
 800e23a:	4638      	mov	r0, r7
 800e23c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e240:	47c0      	blx	r8
 800e242:	3001      	adds	r0, #1
 800e244:	d023      	beq.n	800e28e <_printf_common+0xae>
 800e246:	6823      	ldr	r3, [r4, #0]
 800e248:	6922      	ldr	r2, [r4, #16]
 800e24a:	f003 0306 	and.w	r3, r3, #6
 800e24e:	2b04      	cmp	r3, #4
 800e250:	bf14      	ite	ne
 800e252:	2500      	movne	r5, #0
 800e254:	6833      	ldreq	r3, [r6, #0]
 800e256:	f04f 0600 	mov.w	r6, #0
 800e25a:	bf08      	it	eq
 800e25c:	68e5      	ldreq	r5, [r4, #12]
 800e25e:	f104 041a 	add.w	r4, r4, #26
 800e262:	bf08      	it	eq
 800e264:	1aed      	subeq	r5, r5, r3
 800e266:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e26a:	bf08      	it	eq
 800e26c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e270:	4293      	cmp	r3, r2
 800e272:	bfc4      	itt	gt
 800e274:	1a9b      	subgt	r3, r3, r2
 800e276:	18ed      	addgt	r5, r5, r3
 800e278:	42b5      	cmp	r5, r6
 800e27a:	d11a      	bne.n	800e2b2 <_printf_common+0xd2>
 800e27c:	2000      	movs	r0, #0
 800e27e:	e008      	b.n	800e292 <_printf_common+0xb2>
 800e280:	2301      	movs	r3, #1
 800e282:	4652      	mov	r2, sl
 800e284:	4649      	mov	r1, r9
 800e286:	4638      	mov	r0, r7
 800e288:	47c0      	blx	r8
 800e28a:	3001      	adds	r0, #1
 800e28c:	d103      	bne.n	800e296 <_printf_common+0xb6>
 800e28e:	f04f 30ff 	mov.w	r0, #4294967295
 800e292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e296:	3501      	adds	r5, #1
 800e298:	e7c1      	b.n	800e21e <_printf_common+0x3e>
 800e29a:	2030      	movs	r0, #48	; 0x30
 800e29c:	18e1      	adds	r1, r4, r3
 800e29e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a8:	4422      	add	r2, r4
 800e2aa:	3302      	adds	r3, #2
 800e2ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2b0:	e7c2      	b.n	800e238 <_printf_common+0x58>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	4622      	mov	r2, r4
 800e2b6:	4649      	mov	r1, r9
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	47c0      	blx	r8
 800e2bc:	3001      	adds	r0, #1
 800e2be:	d0e6      	beq.n	800e28e <_printf_common+0xae>
 800e2c0:	3601      	adds	r6, #1
 800e2c2:	e7d9      	b.n	800e278 <_printf_common+0x98>

0800e2c4 <_printf_i>:
 800e2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c8:	7e0f      	ldrb	r7, [r1, #24]
 800e2ca:	4691      	mov	r9, r2
 800e2cc:	2f78      	cmp	r7, #120	; 0x78
 800e2ce:	4680      	mov	r8, r0
 800e2d0:	460c      	mov	r4, r1
 800e2d2:	469a      	mov	sl, r3
 800e2d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e2d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e2da:	d807      	bhi.n	800e2ec <_printf_i+0x28>
 800e2dc:	2f62      	cmp	r7, #98	; 0x62
 800e2de:	d80a      	bhi.n	800e2f6 <_printf_i+0x32>
 800e2e0:	2f00      	cmp	r7, #0
 800e2e2:	f000 80d5 	beq.w	800e490 <_printf_i+0x1cc>
 800e2e6:	2f58      	cmp	r7, #88	; 0x58
 800e2e8:	f000 80c1 	beq.w	800e46e <_printf_i+0x1aa>
 800e2ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2f4:	e03a      	b.n	800e36c <_printf_i+0xa8>
 800e2f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2fa:	2b15      	cmp	r3, #21
 800e2fc:	d8f6      	bhi.n	800e2ec <_printf_i+0x28>
 800e2fe:	a101      	add	r1, pc, #4	; (adr r1, 800e304 <_printf_i+0x40>)
 800e300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e304:	0800e35d 	.word	0x0800e35d
 800e308:	0800e371 	.word	0x0800e371
 800e30c:	0800e2ed 	.word	0x0800e2ed
 800e310:	0800e2ed 	.word	0x0800e2ed
 800e314:	0800e2ed 	.word	0x0800e2ed
 800e318:	0800e2ed 	.word	0x0800e2ed
 800e31c:	0800e371 	.word	0x0800e371
 800e320:	0800e2ed 	.word	0x0800e2ed
 800e324:	0800e2ed 	.word	0x0800e2ed
 800e328:	0800e2ed 	.word	0x0800e2ed
 800e32c:	0800e2ed 	.word	0x0800e2ed
 800e330:	0800e477 	.word	0x0800e477
 800e334:	0800e39d 	.word	0x0800e39d
 800e338:	0800e431 	.word	0x0800e431
 800e33c:	0800e2ed 	.word	0x0800e2ed
 800e340:	0800e2ed 	.word	0x0800e2ed
 800e344:	0800e499 	.word	0x0800e499
 800e348:	0800e2ed 	.word	0x0800e2ed
 800e34c:	0800e39d 	.word	0x0800e39d
 800e350:	0800e2ed 	.word	0x0800e2ed
 800e354:	0800e2ed 	.word	0x0800e2ed
 800e358:	0800e439 	.word	0x0800e439
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	1d1a      	adds	r2, r3, #4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	602a      	str	r2, [r5, #0]
 800e364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e36c:	2301      	movs	r3, #1
 800e36e:	e0a0      	b.n	800e4b2 <_printf_i+0x1ee>
 800e370:	6820      	ldr	r0, [r4, #0]
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	0607      	lsls	r7, r0, #24
 800e376:	f103 0104 	add.w	r1, r3, #4
 800e37a:	6029      	str	r1, [r5, #0]
 800e37c:	d501      	bpl.n	800e382 <_printf_i+0xbe>
 800e37e:	681e      	ldr	r6, [r3, #0]
 800e380:	e003      	b.n	800e38a <_printf_i+0xc6>
 800e382:	0646      	lsls	r6, r0, #25
 800e384:	d5fb      	bpl.n	800e37e <_printf_i+0xba>
 800e386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e38a:	2e00      	cmp	r6, #0
 800e38c:	da03      	bge.n	800e396 <_printf_i+0xd2>
 800e38e:	232d      	movs	r3, #45	; 0x2d
 800e390:	4276      	negs	r6, r6
 800e392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e396:	230a      	movs	r3, #10
 800e398:	4859      	ldr	r0, [pc, #356]	; (800e500 <_printf_i+0x23c>)
 800e39a:	e012      	b.n	800e3c2 <_printf_i+0xfe>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	6820      	ldr	r0, [r4, #0]
 800e3a0:	1d19      	adds	r1, r3, #4
 800e3a2:	6029      	str	r1, [r5, #0]
 800e3a4:	0605      	lsls	r5, r0, #24
 800e3a6:	d501      	bpl.n	800e3ac <_printf_i+0xe8>
 800e3a8:	681e      	ldr	r6, [r3, #0]
 800e3aa:	e002      	b.n	800e3b2 <_printf_i+0xee>
 800e3ac:	0641      	lsls	r1, r0, #25
 800e3ae:	d5fb      	bpl.n	800e3a8 <_printf_i+0xe4>
 800e3b0:	881e      	ldrh	r6, [r3, #0]
 800e3b2:	2f6f      	cmp	r7, #111	; 0x6f
 800e3b4:	bf0c      	ite	eq
 800e3b6:	2308      	moveq	r3, #8
 800e3b8:	230a      	movne	r3, #10
 800e3ba:	4851      	ldr	r0, [pc, #324]	; (800e500 <_printf_i+0x23c>)
 800e3bc:	2100      	movs	r1, #0
 800e3be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e3c2:	6865      	ldr	r5, [r4, #4]
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	bfa8      	it	ge
 800e3c8:	6821      	ldrge	r1, [r4, #0]
 800e3ca:	60a5      	str	r5, [r4, #8]
 800e3cc:	bfa4      	itt	ge
 800e3ce:	f021 0104 	bicge.w	r1, r1, #4
 800e3d2:	6021      	strge	r1, [r4, #0]
 800e3d4:	b90e      	cbnz	r6, 800e3da <_printf_i+0x116>
 800e3d6:	2d00      	cmp	r5, #0
 800e3d8:	d04b      	beq.n	800e472 <_printf_i+0x1ae>
 800e3da:	4615      	mov	r5, r2
 800e3dc:	fbb6 f1f3 	udiv	r1, r6, r3
 800e3e0:	fb03 6711 	mls	r7, r3, r1, r6
 800e3e4:	5dc7      	ldrb	r7, [r0, r7]
 800e3e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e3ea:	4637      	mov	r7, r6
 800e3ec:	42bb      	cmp	r3, r7
 800e3ee:	460e      	mov	r6, r1
 800e3f0:	d9f4      	bls.n	800e3dc <_printf_i+0x118>
 800e3f2:	2b08      	cmp	r3, #8
 800e3f4:	d10b      	bne.n	800e40e <_printf_i+0x14a>
 800e3f6:	6823      	ldr	r3, [r4, #0]
 800e3f8:	07de      	lsls	r6, r3, #31
 800e3fa:	d508      	bpl.n	800e40e <_printf_i+0x14a>
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	6861      	ldr	r1, [r4, #4]
 800e400:	4299      	cmp	r1, r3
 800e402:	bfde      	ittt	le
 800e404:	2330      	movle	r3, #48	; 0x30
 800e406:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e40a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e40e:	1b52      	subs	r2, r2, r5
 800e410:	6122      	str	r2, [r4, #16]
 800e412:	464b      	mov	r3, r9
 800e414:	4621      	mov	r1, r4
 800e416:	4640      	mov	r0, r8
 800e418:	f8cd a000 	str.w	sl, [sp]
 800e41c:	aa03      	add	r2, sp, #12
 800e41e:	f7ff fedf 	bl	800e1e0 <_printf_common>
 800e422:	3001      	adds	r0, #1
 800e424:	d14a      	bne.n	800e4bc <_printf_i+0x1f8>
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	b004      	add	sp, #16
 800e42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	f043 0320 	orr.w	r3, r3, #32
 800e436:	6023      	str	r3, [r4, #0]
 800e438:	2778      	movs	r7, #120	; 0x78
 800e43a:	4832      	ldr	r0, [pc, #200]	; (800e504 <_printf_i+0x240>)
 800e43c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	6829      	ldr	r1, [r5, #0]
 800e444:	061f      	lsls	r7, r3, #24
 800e446:	f851 6b04 	ldr.w	r6, [r1], #4
 800e44a:	d402      	bmi.n	800e452 <_printf_i+0x18e>
 800e44c:	065f      	lsls	r7, r3, #25
 800e44e:	bf48      	it	mi
 800e450:	b2b6      	uxthmi	r6, r6
 800e452:	07df      	lsls	r7, r3, #31
 800e454:	bf48      	it	mi
 800e456:	f043 0320 	orrmi.w	r3, r3, #32
 800e45a:	6029      	str	r1, [r5, #0]
 800e45c:	bf48      	it	mi
 800e45e:	6023      	strmi	r3, [r4, #0]
 800e460:	b91e      	cbnz	r6, 800e46a <_printf_i+0x1a6>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	f023 0320 	bic.w	r3, r3, #32
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	2310      	movs	r3, #16
 800e46c:	e7a6      	b.n	800e3bc <_printf_i+0xf8>
 800e46e:	4824      	ldr	r0, [pc, #144]	; (800e500 <_printf_i+0x23c>)
 800e470:	e7e4      	b.n	800e43c <_printf_i+0x178>
 800e472:	4615      	mov	r5, r2
 800e474:	e7bd      	b.n	800e3f2 <_printf_i+0x12e>
 800e476:	682b      	ldr	r3, [r5, #0]
 800e478:	6826      	ldr	r6, [r4, #0]
 800e47a:	1d18      	adds	r0, r3, #4
 800e47c:	6961      	ldr	r1, [r4, #20]
 800e47e:	6028      	str	r0, [r5, #0]
 800e480:	0635      	lsls	r5, r6, #24
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	d501      	bpl.n	800e48a <_printf_i+0x1c6>
 800e486:	6019      	str	r1, [r3, #0]
 800e488:	e002      	b.n	800e490 <_printf_i+0x1cc>
 800e48a:	0670      	lsls	r0, r6, #25
 800e48c:	d5fb      	bpl.n	800e486 <_printf_i+0x1c2>
 800e48e:	8019      	strh	r1, [r3, #0]
 800e490:	2300      	movs	r3, #0
 800e492:	4615      	mov	r5, r2
 800e494:	6123      	str	r3, [r4, #16]
 800e496:	e7bc      	b.n	800e412 <_printf_i+0x14e>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	2100      	movs	r1, #0
 800e49c:	1d1a      	adds	r2, r3, #4
 800e49e:	602a      	str	r2, [r5, #0]
 800e4a0:	681d      	ldr	r5, [r3, #0]
 800e4a2:	6862      	ldr	r2, [r4, #4]
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f000 f849 	bl	800e53c <memchr>
 800e4aa:	b108      	cbz	r0, 800e4b0 <_printf_i+0x1ec>
 800e4ac:	1b40      	subs	r0, r0, r5
 800e4ae:	6060      	str	r0, [r4, #4]
 800e4b0:	6863      	ldr	r3, [r4, #4]
 800e4b2:	6123      	str	r3, [r4, #16]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4ba:	e7aa      	b.n	800e412 <_printf_i+0x14e>
 800e4bc:	462a      	mov	r2, r5
 800e4be:	4649      	mov	r1, r9
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	47d0      	blx	sl
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	d0ad      	beq.n	800e426 <_printf_i+0x162>
 800e4ca:	6823      	ldr	r3, [r4, #0]
 800e4cc:	079b      	lsls	r3, r3, #30
 800e4ce:	d413      	bmi.n	800e4f8 <_printf_i+0x234>
 800e4d0:	68e0      	ldr	r0, [r4, #12]
 800e4d2:	9b03      	ldr	r3, [sp, #12]
 800e4d4:	4298      	cmp	r0, r3
 800e4d6:	bfb8      	it	lt
 800e4d8:	4618      	movlt	r0, r3
 800e4da:	e7a6      	b.n	800e42a <_printf_i+0x166>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	4632      	mov	r2, r6
 800e4e0:	4649      	mov	r1, r9
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	47d0      	blx	sl
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	d09d      	beq.n	800e426 <_printf_i+0x162>
 800e4ea:	3501      	adds	r5, #1
 800e4ec:	68e3      	ldr	r3, [r4, #12]
 800e4ee:	9903      	ldr	r1, [sp, #12]
 800e4f0:	1a5b      	subs	r3, r3, r1
 800e4f2:	42ab      	cmp	r3, r5
 800e4f4:	dcf2      	bgt.n	800e4dc <_printf_i+0x218>
 800e4f6:	e7eb      	b.n	800e4d0 <_printf_i+0x20c>
 800e4f8:	2500      	movs	r5, #0
 800e4fa:	f104 0619 	add.w	r6, r4, #25
 800e4fe:	e7f5      	b.n	800e4ec <_printf_i+0x228>
 800e500:	0800e9ef 	.word	0x0800e9ef
 800e504:	0800ea00 	.word	0x0800ea00

0800e508 <memmove>:
 800e508:	4288      	cmp	r0, r1
 800e50a:	b510      	push	{r4, lr}
 800e50c:	eb01 0402 	add.w	r4, r1, r2
 800e510:	d902      	bls.n	800e518 <memmove+0x10>
 800e512:	4284      	cmp	r4, r0
 800e514:	4623      	mov	r3, r4
 800e516:	d807      	bhi.n	800e528 <memmove+0x20>
 800e518:	1e43      	subs	r3, r0, #1
 800e51a:	42a1      	cmp	r1, r4
 800e51c:	d008      	beq.n	800e530 <memmove+0x28>
 800e51e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e522:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e526:	e7f8      	b.n	800e51a <memmove+0x12>
 800e528:	4601      	mov	r1, r0
 800e52a:	4402      	add	r2, r0
 800e52c:	428a      	cmp	r2, r1
 800e52e:	d100      	bne.n	800e532 <memmove+0x2a>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e53a:	e7f7      	b.n	800e52c <memmove+0x24>

0800e53c <memchr>:
 800e53c:	4603      	mov	r3, r0
 800e53e:	b510      	push	{r4, lr}
 800e540:	b2c9      	uxtb	r1, r1
 800e542:	4402      	add	r2, r0
 800e544:	4293      	cmp	r3, r2
 800e546:	4618      	mov	r0, r3
 800e548:	d101      	bne.n	800e54e <memchr+0x12>
 800e54a:	2000      	movs	r0, #0
 800e54c:	e003      	b.n	800e556 <memchr+0x1a>
 800e54e:	7804      	ldrb	r4, [r0, #0]
 800e550:	3301      	adds	r3, #1
 800e552:	428c      	cmp	r4, r1
 800e554:	d1f6      	bne.n	800e544 <memchr+0x8>
 800e556:	bd10      	pop	{r4, pc}

0800e558 <_realloc_r>:
 800e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	4680      	mov	r8, r0
 800e55e:	4614      	mov	r4, r2
 800e560:	460e      	mov	r6, r1
 800e562:	b921      	cbnz	r1, 800e56e <_realloc_r+0x16>
 800e564:	4611      	mov	r1, r2
 800e566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e56a:	f7ff bb27 	b.w	800dbbc <_malloc_r>
 800e56e:	b92a      	cbnz	r2, 800e57c <_realloc_r+0x24>
 800e570:	f7ff fc96 	bl	800dea0 <_free_r>
 800e574:	4625      	mov	r5, r4
 800e576:	4628      	mov	r0, r5
 800e578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57c:	f000 f81b 	bl	800e5b6 <_malloc_usable_size_r>
 800e580:	4284      	cmp	r4, r0
 800e582:	4607      	mov	r7, r0
 800e584:	d802      	bhi.n	800e58c <_realloc_r+0x34>
 800e586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e58a:	d812      	bhi.n	800e5b2 <_realloc_r+0x5a>
 800e58c:	4621      	mov	r1, r4
 800e58e:	4640      	mov	r0, r8
 800e590:	f7ff fb14 	bl	800dbbc <_malloc_r>
 800e594:	4605      	mov	r5, r0
 800e596:	2800      	cmp	r0, #0
 800e598:	d0ed      	beq.n	800e576 <_realloc_r+0x1e>
 800e59a:	42bc      	cmp	r4, r7
 800e59c:	4622      	mov	r2, r4
 800e59e:	4631      	mov	r1, r6
 800e5a0:	bf28      	it	cs
 800e5a2:	463a      	movcs	r2, r7
 800e5a4:	f7ff fc6e 	bl	800de84 <memcpy>
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4640      	mov	r0, r8
 800e5ac:	f7ff fc78 	bl	800dea0 <_free_r>
 800e5b0:	e7e1      	b.n	800e576 <_realloc_r+0x1e>
 800e5b2:	4635      	mov	r5, r6
 800e5b4:	e7df      	b.n	800e576 <_realloc_r+0x1e>

0800e5b6 <_malloc_usable_size_r>:
 800e5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ba:	1f18      	subs	r0, r3, #4
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	bfbc      	itt	lt
 800e5c0:	580b      	ldrlt	r3, [r1, r0]
 800e5c2:	18c0      	addlt	r0, r0, r3
 800e5c4:	4770      	bx	lr
	...

0800e5c8 <_init>:
 800e5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ca:	bf00      	nop
 800e5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ce:	bc08      	pop	{r3}
 800e5d0:	469e      	mov	lr, r3
 800e5d2:	4770      	bx	lr

0800e5d4 <_fini>:
 800e5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d6:	bf00      	nop
 800e5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5da:	bc08      	pop	{r3}
 800e5dc:	469e      	mov	lr, r3
 800e5de:	4770      	bx	lr
