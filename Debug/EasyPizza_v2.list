
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b414  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b960  0800b960  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b960  0800b960  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b960  0800b960  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b960  0800b960  0001b960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b964  0800b964  0001b964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bec  20000070  0800b9d4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002c5c  0800b9d4  00022c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   000355b1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000789b  00000000  00000000  00055689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00010440  00000000  00000000  0005cf24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001990  00000000  00000000  0006d368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b99  00000000  00000000  0006ecf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f7bd  00000000  00000000  00070891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000314fe  00000000  00000000  0009004e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1fa2  00000000  00000000  000c154c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ba0  00000000  00000000  001634f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00169090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b50c 	.word	0x0800b50c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800b50c 	.word	0x0800b50c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <bluetoothErroCRC>:
 * \brief 	Processa informacao recebida com chave apropriada
 * \param 	*ble - Ponteiro para o objeto pai.
 * \return 	Retorna BLE_SUCCESS em caso de hardware inicializado com sucesso.
 *         	Retorna BLE_CRC_INCORRETO no caso de erro de mensagem ou crc incorreto.
 */
void 			bluetoothErroCRC(Bluetooth* ble){
 8001094:	b537      	push	{r0, r1, r2, r4, r5, lr}

	//buffer calculo de crc
	CRC_short 		CRCReceive,CRCKey;

	//captura chave recebida pelo App
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 8001096:	f04f 0500 	mov.w	r5, #0
 800109a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
void 			bluetoothErroCRC(Bluetooth* ble){
 800109e:	4604      	mov	r4, r0
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 80010a0:	1843      	adds	r3, r0, r1
 80010a2:	7c9a      	ldrb	r2, [r3, #18]
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];

	//recalcula chave em funcao da msg
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80010a4:	3902      	subs	r1, #2
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 80010a6:	7cdb      	ldrb	r3, [r3, #19]
	CRCKey.byte.hi	= ble->_RxDataArr[ble->RxSize-2];
 80010a8:	f362 0507 	bfi	r5, r2, #0, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80010ac:	b289      	uxth	r1, r1
 80010ae:	3014      	adds	r0, #20
	CRCKey.byte.lo 	= ble->_RxDataArr[ble->RxSize-1];
 80010b0:	f363 250f 	bfi	r5, r3, #8, #8
	CRCReceive = CRC16(ble->_RxDataArr,ble->RxSize-2);
 80010b4:	f000 fc86 	bl	80019c4 <CRC16>
 80010b8:	4601      	mov	r1, r0

	if(validaCRC(CRCKey,CRCReceive)){
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fc98 	bl	80019f0 <validaCRC>
 80010c0:	b160      	cbz	r0, 80010dc <bluetoothErroCRC+0x48>
		//erro
		TXCRC[0] = 0x01;
 80010c2:	f64e 6301 	movw	r3, #60929	; 0xee01
 80010c6:	f8ad 3004 	strh.w	r3, [sp, #4]
		TXCRC[1] = 0xEE;
		TXCRC[2] = 0xEE;
 80010ca:	23ee      	movs	r3, #238	; 0xee
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80010cc:	2203      	movs	r2, #3
		TXCRC[2] = 0xEE;
 80010ce:	f88d 3006 	strb.w	r3, [sp, #6]
		HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 80010d2:	6820      	ldr	r0, [r4, #0]
 80010d4:	2332      	movs	r3, #50	; 0x32
 80010d6:	a901      	add	r1, sp, #4
 80010d8:	f006 fb51 	bl	800777e <HAL_UART_Transmit>
		//		bleError_Handler(BLE_CRC_INCORRETO);
	}else{
		//certo
		return;
	}
}
 80010dc:	b003      	add	sp, #12
 80010de:	bd30      	pop	{r4, r5, pc}

080010e0 <bluetooth1000ms>:
/**
 * \brief 	Processa contadores internos a passo de 1000 milisegundos
 * \param 	*ble - Ponteiro para o objeto pai.
 */
void 			bluetooth1000ms(Bluetooth* ble){
	if(ble->JanelaConexao>0)
 80010e0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80010e4:	b113      	cbz	r3, 80010ec <bluetooth1000ms+0xc>
		ble->JanelaConexao--;
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
}
 80010ec:	4770      	bx	lr

080010ee <putQueueComando>:
		if (result == HAL_OK)	break;
		if (tries == MAX_TRIES)	bleError_Handler(BLE_ENVIO_COMANDO);
//		osDelay(20);
	}
}
void putQueueComando(Bluetooth *ble, ConexaoBleRX comando) {
 80010ee:	b538      	push	{r3, r4, r5, lr}
 80010f0:	4604      	mov	r4, r0
	// permitir apenas um item por vez na fila. evitando dessincronia com dado recebida.
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom)) {
 80010f2:	6880      	ldr	r0, [r0, #8]
void putQueueComando(Bluetooth *ble, ConexaoBleRX comando) {
 80010f4:	460d      	mov	r5, r1
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom)) {
 80010f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80010f8:	4798      	blx	r3
 80010fa:	b148      	cbz	r0, 8001110 <putQueueComando+0x22>
		ble->myQ_bleCom->insert(ble->myQ_bleCom, comando);
 80010fc:	68a0      	ldr	r0, [r4, #8]
 80010fe:	4629      	mov	r1, r5
 8001100:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001102:	4798      	blx	r3
		osSignalSet(ble->Task, newMessage);
 8001104:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001106:	210a      	movs	r1, #10
	}
}
 8001108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osSignalSet(ble->Task, newMessage);
 800110c:	f006 bf4d 	b.w	8007faa <osSignalSet>
}
 8001110:	bd38      	pop	{r3, r4, r5, pc}

08001112 <putQueueDataRx>:
void putQueueDataRx(Bluetooth *ble, ComandosBleRX comando) {
 8001112:	b538      	push	{r3, r4, r5, lr}
 8001114:	4604      	mov	r4, r0
	// permitir apenas um item por vez na fila. evitando dessincronia com dado recebida.
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 8001116:	68c0      	ldr	r0, [r0, #12]
void putQueueDataRx(Bluetooth *ble, ComandosBleRX comando) {
 8001118:	460d      	mov	r5, r1
	if (ble->myQ_dataRx->is_empty(ble->myQ_dataRx)) {
 800111a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800111c:	4798      	blx	r3
 800111e:	b148      	cbz	r0, 8001134 <putQueueDataRx+0x22>
		ble->myQ_dataRx->insert(ble->myQ_dataRx, comando);
 8001120:	68e0      	ldr	r0, [r4, #12]
 8001122:	4629      	mov	r1, r5
 8001124:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001126:	4798      	blx	r3
		osSignalSet(ble->Task, newMessage);
 8001128:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800112a:	210a      	movs	r1, #10
	}
}
 800112c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		osSignalSet(ble->Task, newMessage);
 8001130:	f006 bf3b 	b.w	8007faa <osSignalSet>
}
 8001134:	bd38      	pop	{r3, r4, r5, pc}

08001136 <putQueueDataTx>:
void putQueueDataTx(Bluetooth *ble, ComandosBleTX comando) {
 8001136:	b510      	push	{r4, lr}
 8001138:	4604      	mov	r4, r0
	//todo tratar erro de fila cheia //bleError_Handler
	ble->myQ_dataTx->insert(ble->myQ_dataTx, comando);
 800113a:	6900      	ldr	r0, [r0, #16]
 800113c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800113e:	4798      	blx	r3
	osSignalSet(ble->Task, newMessage);
 8001140:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001142:	210a      	movs	r1, #10
}
 8001144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osSignalSet(ble->Task, newMessage);
 8001148:	f006 bf2f 	b.w	8007faa <osSignalSet>

0800114c <bleError_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void 			bleError_Handler(ErrorCode erro)
{
 800114c:	4601      	mov	r1, r0
 800114e:	b508      	push	{r3, lr}
//	__disable_irq();
	while (1)
	{
		ErrorBuffer_add(&eeprom, erro);
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <bleError_Handler+0x24>)
 8001152:	f000 ff1d 	bl	8001f90 <ErrorBuffer_add>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001156:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800115a:	4906      	ldr	r1, [pc, #24]	; (8001174 <bleError_Handler+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <bleError_Handler+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800115e:	68ca      	ldr	r2, [r1, #12]
 8001160:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001164:	4313      	orrs	r3, r2
 8001166:	60cb      	str	r3, [r1, #12]
 8001168:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800116c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800116e:	e7fd      	b.n	800116c <bleError_Handler+0x20>
 8001170:	200016f8 	.word	0x200016f8
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0004 	.word	0x05fa0004

0800117c <bleAddComp>:
void 			bleAddComp(Bluetooth* ble, BleComando* _blecomm, ComandosBleRX __comando){
 800117c:	b508      	push	{r3, lr}
	if (ble == NULL || _blecomm == NULL) {
 800117e:	b100      	cbz	r0, 8001182 <bleAddComp+0x6>
 8001180:	b911      	cbnz	r1, 8001188 <bleAddComp+0xc>
		bleError_Handler(BLE_OBJETO_NULO);
 8001182:	2003      	movs	r0, #3
		bleError_Handler(BLE_COMANDO_NAO_CRIADO);
 8001184:	f7ff ffe2 	bl	800114c <bleError_Handler>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 8001188:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 800118c:	2b1d      	cmp	r3, #29
 800118e:	d901      	bls.n	8001194 <bleAddComp+0x18>
		bleError_Handler(BLE_COMANDO_NAO_CRIADO);
 8001190:	2009      	movs	r0, #9
 8001192:	e7f7      	b.n	8001184 <bleAddComp+0x8>
	_blecomm->_comando 	= __comando;
 8001194:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoBasico;
 8001196:	2200      	movs	r2, #0
 8001198:	704a      	strb	r2, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 800119a:	f103 0210 	add.w	r2, r3, #16
	ble->contComandos++;
 800119e:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80011a0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	ble->contComandos++;
 80011a4:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
}
 80011a8:	bd08      	pop	{r3, pc}

080011aa <createBleComp>:
BleComando* 	createBleComp(Bluetooth* ble, ComandosBleRX __comando) {
 80011aa:	b570      	push	{r4, r5, r6, lr}
 80011ac:	4605      	mov	r5, r0
	BleComando *me = (BleComando*)malloc(sizeof(BleComando));
 80011ae:	2002      	movs	r0, #2
BleComando* 	createBleComp(Bluetooth* ble, ComandosBleRX __comando) {
 80011b0:	460e      	mov	r6, r1
	BleComando *me = (BleComando*)malloc(sizeof(BleComando));
 80011b2:	f008 ffa9 	bl	800a108 <malloc>
	if (me == NULL) {
 80011b6:	4604      	mov	r4, r0
 80011b8:	b120      	cbz	r0, 80011c4 <createBleComp+0x1a>
	bleAddComp(ble, me, __comando);
 80011ba:	4601      	mov	r1, r0
 80011bc:	4632      	mov	r2, r6
 80011be:	4628      	mov	r0, r5
 80011c0:	f7ff ffdc 	bl	800117c <bleAddComp>
}
 80011c4:	4620      	mov	r0, r4
 80011c6:	bd70      	pop	{r4, r5, r6, pc}

080011c8 <bleAddCompConexao>:
void 			bleAddCompConexao(Bluetooth* ble, BleComando* _blecomm, ConexaoBleTX __comando){
 80011c8:	b508      	push	{r3, lr}
	if (ble == NULL || _blecomm == NULL) {
 80011ca:	b100      	cbz	r0, 80011ce <bleAddCompConexao+0x6>
 80011cc:	b911      	cbnz	r1, 80011d4 <bleAddCompConexao+0xc>
		bleError_Handler(BLE_OBJETO_NULO);
 80011ce:	2003      	movs	r0, #3
		bleError_Handler(BLE_COMANDOCON_NAO_CRIADO);
 80011d0:	f7ff ffbc 	bl	800114c <bleError_Handler>
	if(ble->contComandos>=BLUETOOTH_MAX_COMANDOS_COUNT){
 80011d4:	f890 30b8 	ldrb.w	r3, [r0, #184]	; 0xb8
 80011d8:	2b1d      	cmp	r3, #29
 80011da:	d901      	bls.n	80011e0 <bleAddCompConexao+0x18>
		bleError_Handler(BLE_COMANDOCON_NAO_CRIADO);
 80011dc:	200a      	movs	r0, #10
 80011de:	e7f7      	b.n	80011d0 <bleAddCompConexao+0x8>
	_blecomm->_comando 	= __comando;
 80011e0:	700a      	strb	r2, [r1, #0]
	_blecomm->_tipo 	= ComandoConexao;
 80011e2:	2201      	movs	r2, #1
 80011e4:	704a      	strb	r2, [r1, #1]
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80011e6:	f103 0210 	add.w	r2, r3, #16
	ble->contComandos++;
 80011ea:	3301      	adds	r3, #1
	ble->_BleCommArr[ble->contComandos] = _blecomm;
 80011ec:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	ble->contComandos++;
 80011f0:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
}
 80011f4:	bd08      	pop	{r3, pc}

080011f6 <readComando>:
void		 	readComando(Bluetooth* ble, TypeComandoBle tipo){
 80011f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011f8:	4604      	mov	r4, r0
 80011fa:	460d      	mov	r5, r1
	bluetoothErroCRC(ble);
 80011fc:	f7ff ff4a 	bl	8001094 <bluetoothErroCRC>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 8001200:	2300      	movs	r3, #0
 8001202:	f894 60b8 	ldrb.w	r6, [r4, #184]	; 0xb8
 8001206:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800120a:	b2d9      	uxtb	r1, r3
 800120c:	428e      	cmp	r6, r1
 800120e:	d802      	bhi.n	8001216 <readComando+0x20>
	bleError_Handler( BLE_COMANDO_NAO_ENCONTRADO);
 8001210:	2006      	movs	r0, #6
 8001212:	f7ff ff9b 	bl	800114c <bleError_Handler>
		localComandoRX = *ble->_BleCommArr[i];
 8001216:	f852 0f04 	ldr.w	r0, [r2, #4]!
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 800121a:	7d61      	ldrb	r1, [r4, #21]
		localComandoRX = *ble->_BleCommArr[i];
 800121c:	7807      	ldrb	r7, [r0, #0]
		if( ble->_RxDataArr[1] == localComandoRX._comando && localComandoRX._tipo == tipo){
 800121e:	42b9      	cmp	r1, r7
 8001220:	d114      	bne.n	800124c <readComando+0x56>
 8001222:	7840      	ldrb	r0, [r0, #1]
 8001224:	42a8      	cmp	r0, r5
 8001226:	d111      	bne.n	800124c <readComando+0x56>
			ble->ComandoAtual = localComandoRX;
 8001228:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800122c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
			switch (tipo) {
 8001230:	b115      	cbz	r5, 8001238 <readComando+0x42>
 8001232:	2d01      	cmp	r5, #1
 8001234:	d005      	beq.n	8001242 <readComando+0x4c>
}
 8001236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				putQueueDataRx(ble, ble->ComandoAtual._comando);
 8001238:	4620      	mov	r0, r4
}
 800123a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				putQueueDataRx(ble, ble->ComandoAtual._comando);
 800123e:	f7ff bf68 	b.w	8001112 <putQueueDataRx>
				putQueueComando(ble, ble->ComandoAtual._comando);
 8001242:	4620      	mov	r0, r4
}
 8001244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				putQueueComando(ble, ble->ComandoAtual._comando);
 8001248:	f7ff bf51 	b.w	80010ee <putQueueComando>
	for(uint8_t i = 0; i < ble->contComandos; i++)	{
 800124c:	3301      	adds	r3, #1
 800124e:	e7dc      	b.n	800120a <readComando+0x14>

08001250 <BLEDMA_IrqHandler>:
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001250:	6843      	ldr	r3, [r0, #4]
void 			BLEDMA_IrqHandler (Bluetooth *ble){
 8001252:	b570      	push	{r4, r5, r6, lr}
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001254:	681b      	ldr	r3, [r3, #0]
void 			BLEDMA_IrqHandler (Bluetooth *ble){
 8001256:	4604      	mov	r4, r0
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 8001258:	681a      	ldr	r2, [r3, #0]
void 			BLEDMA_IrqHandler (Bluetooth *ble){
 800125a:	b08a      	sub	sp, #40	; 0x28
	if(__HAL_DMA_GET_IT_SOURCE(ble->UARTDMAHandle, DMA_IT_TC) != RESET){
 800125c:	0792      	lsls	r2, r2, #30
 800125e:	d555      	bpl.n	800130c <BLEDMA_IrqHandler+0xbc>
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001260:	4a49      	ldr	r2, [pc, #292]	; (8001388 <BLEDMA_IrqHandler+0x138>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d028      	beq.n	80012b8 <BLEDMA_IrqHandler+0x68>
 8001266:	3214      	adds	r2, #20
 8001268:	4293      	cmp	r3, r2
 800126a:	d027      	beq.n	80012bc <BLEDMA_IrqHandler+0x6c>
 800126c:	3214      	adds	r2, #20
 800126e:	4293      	cmp	r3, r2
 8001270:	d026      	beq.n	80012c0 <BLEDMA_IrqHandler+0x70>
 8001272:	3214      	adds	r2, #20
 8001274:	4293      	cmp	r3, r2
 8001276:	d026      	beq.n	80012c6 <BLEDMA_IrqHandler+0x76>
 8001278:	3214      	adds	r2, #20
 800127a:	4293      	cmp	r3, r2
 800127c:	d026      	beq.n	80012cc <BLEDMA_IrqHandler+0x7c>
 800127e:	3214      	adds	r2, #20
 8001280:	4293      	cmp	r3, r2
 8001282:	bf0c      	ite	eq
 8001284:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8001288:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 800128c:	493f      	ldr	r1, [pc, #252]	; (800138c <BLEDMA_IrqHandler+0x13c>)
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 800128e:	f104 0614 	add.w	r6, r4, #20
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 8001292:	604a      	str	r2, [r1, #4]
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001294:	685b      	ldr	r3, [r3, #4]
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 8001296:	ad04      	add	r5, sp, #16
		ble->RxSize 		= DMA_RX_BUFFER_SIZE - ble->UARTDMAHandle->Instance->CNDTR;
 8001298:	f1c3 0318 	rsb	r3, r3, #24
 800129c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		sprintf(StringRecebida,"%s",ble->_RxDataArr);
 80012a0:	4631      	mov	r1, r6
 80012a2:	4628      	mov	r0, r5
 80012a4:	f009 fb17 	bl	800a8d6 <strcpy>
		switch(ble->MaquinaConexao){
 80012a8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	d824      	bhi.n	80012fa <BLEDMA_IrqHandler+0xaa>
 80012b0:	e8df f003 	tbb	[pc, r3]
 80012b4:	58452e0f 	.word	0x58452e0f
		__HAL_DMA_CLEAR_FLAG(ble->UARTDMAHandle, __HAL_DMA_GET_TC_FLAG_INDEX(ble->UARTDMAHandle));
 80012b8:	2202      	movs	r2, #2
 80012ba:	e7e7      	b.n	800128c <BLEDMA_IrqHandler+0x3c>
 80012bc:	2220      	movs	r2, #32
 80012be:	e7e5      	b.n	800128c <BLEDMA_IrqHandler+0x3c>
 80012c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c4:	e7e2      	b.n	800128c <BLEDMA_IrqHandler+0x3c>
 80012c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ca:	e7df      	b.n	800128c <BLEDMA_IrqHandler+0x3c>
 80012cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d0:	e7dc      	b.n	800128c <BLEDMA_IrqHandler+0x3c>
			ble->msIdle=0;
 80012d2:	2300      	movs	r3, #0
			ss = strstr(StringRecebida, "OK+ADDR:");
 80012d4:	4628      	mov	r0, r5
 80012d6:	492e      	ldr	r1, [pc, #184]	; (8001390 <BLEDMA_IrqHandler+0x140>)
			ble->msIdle=0;
 80012d8:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "OK+ADDR:");
 80012da:	f009 fa0d 	bl	800a6f8 <strstr>
			if (ss != NULL){
 80012de:	b160      	cbz	r0, 80012fa <BLEDMA_IrqHandler+0xaa>
				PontoExato = ss - StringRecebida;
 80012e0:	1b40      	subs	r0, r0, r5
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 80012e2:	1823      	adds	r3, r4, r0
 80012e4:	69d8      	ldr	r0, [r3, #28]
 80012e6:	6a19      	ldr	r1, [r3, #32]
 80012e8:	aa01      	add	r2, sp, #4
 80012ea:	c203      	stmia	r2!, {r0, r1}
 80012ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
				ble->chave = CRC16(addr8Bits,12);
 80012ee:	210c      	movs	r1, #12
					addr8Bits[i] = ble->_RxDataArr[i+PontoExato+8];
 80012f0:	6010      	str	r0, [r2, #0]
				ble->chave = CRC16(addr8Bits,12);
 80012f2:	a801      	add	r0, sp, #4
 80012f4:	f000 fb66 	bl	80019c4 <CRC16>
 80012f8:	8660      	strh	r0, [r4, #50]	; 0x32
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 80012fa:	2218      	movs	r2, #24
		ble->UARTDMAHandle->Instance->CMAR = (uint32_t)ble->_RxDataArr; /* Set memory address for DMA again */
 80012fc:	6863      	ldr	r3, [r4, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60de      	str	r6, [r3, #12]
		ble->UARTDMAHandle->Instance->CNDTR = DMA_RX_BUFFER_SIZE;    	/* Set number of bytes to receive */
 8001302:	605a      	str	r2, [r3, #4]
		ble->UARTDMAHandle->Instance->CCR |= DMA_CCR_EN;            	/* Start DMA transfer */
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	b00a      	add	sp, #40	; 0x28
 800130e:	bd70      	pop	{r4, r5, r6, pc}
			ble->msIdle=0;
 8001310:	2300      	movs	r3, #0
			ss = strstr(StringRecebida, "OK+CONN");
 8001312:	4628      	mov	r0, r5
 8001314:	491f      	ldr	r1, [pc, #124]	; (8001394 <BLEDMA_IrqHandler+0x144>)
			ble->msIdle=0;
 8001316:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "OK+CONN");
 8001318:	f009 f9ee 	bl	800a6f8 <strstr>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 800131c:	b138      	cbz	r0, 800132e <BLEDMA_IrqHandler+0xde>
 800131e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8001322:	2b07      	cmp	r3, #7
 8001324:	d103      	bne.n	800132e <BLEDMA_IrqHandler+0xde>
				ble->MaquinaConexao = RX_CONECTADO;
 8001326:	2302      	movs	r3, #2
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001328:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
				break;
 800132c:	e7e5      	b.n	80012fa <BLEDMA_IrqHandler+0xaa>
			if ((ss != NULL  && ble->RxSize == TAMANHO_MENSAGEM_CONECTOU) || MACRO_LE_BT_STATUS){
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	4819      	ldr	r0, [pc, #100]	; (8001398 <BLEDMA_IrqHandler+0x148>)
 8001334:	f004 fb16 	bl	8005964 <HAL_GPIO_ReadPin>
 8001338:	2800      	cmp	r0, #0
 800133a:	d1f4      	bne.n	8001326 <BLEDMA_IrqHandler+0xd6>
 800133c:	e7dd      	b.n	80012fa <BLEDMA_IrqHandler+0xaa>
			ss = strstr(StringRecebida, "LOST");
 800133e:	4628      	mov	r0, r5
 8001340:	4916      	ldr	r1, [pc, #88]	; (800139c <BLEDMA_IrqHandler+0x14c>)
 8001342:	f009 f9d9 	bl	800a6f8 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001346:	b108      	cbz	r0, 800134c <BLEDMA_IrqHandler+0xfc>
				ble->MaquinaConexao 	= RX_DESCONECTADO;
 8001348:	2301      	movs	r3, #1
 800134a:	e7ed      	b.n	8001328 <BLEDMA_IrqHandler+0xd8>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 800134c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <BLEDMA_IrqHandler+0x148>)
 8001352:	f004 fb07 	bl	8005964 <HAL_GPIO_ReadPin>
 8001356:	2800      	cmp	r0, #0
 8001358:	d0f6      	beq.n	8001348 <BLEDMA_IrqHandler+0xf8>
			readComando(ble,ComandoConexao);
 800135a:	2101      	movs	r1, #1
			readComando(ble,ComandoBasico);
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff ff4a 	bl	80011f6 <readComando>
			break;
 8001362:	e7ca      	b.n	80012fa <BLEDMA_IrqHandler+0xaa>
			ble->msIdle=0;
 8001364:	2300      	movs	r3, #0
			ss = strstr(StringRecebida, "LOST");
 8001366:	4628      	mov	r0, r5
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <BLEDMA_IrqHandler+0x14c>)
			ble->msIdle=0;
 800136a:	8623      	strh	r3, [r4, #48]	; 0x30
			ss = strstr(StringRecebida, "LOST");
 800136c:	f009 f9c4 	bl	800a6f8 <strstr>
			if (ss != NULL || !MACRO_LE_BT_STATUS){
 8001370:	4605      	mov	r5, r0
 8001372:	2800      	cmp	r0, #0
 8001374:	d1e8      	bne.n	8001348 <BLEDMA_IrqHandler+0xf8>
 8001376:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <BLEDMA_IrqHandler+0x148>)
 800137c:	f004 faf2 	bl	8005964 <HAL_GPIO_ReadPin>
 8001380:	2800      	cmp	r0, #0
 8001382:	d0e1      	beq.n	8001348 <BLEDMA_IrqHandler+0xf8>
			readComando(ble,ComandoBasico);
 8001384:	4629      	mov	r1, r5
 8001386:	e7e9      	b.n	800135c <BLEDMA_IrqHandler+0x10c>
 8001388:	40020008 	.word	0x40020008
 800138c:	40020000 	.word	0x40020000
 8001390:	0800b5c0 	.word	0x0800b5c0
 8001394:	0800b5c9 	.word	0x0800b5c9
 8001398:	40010c00 	.word	0x40010c00
 800139c:	0800b5d1 	.word	0x0800b5d1

080013a0 <BLEUSART_IrqHandler>:
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    	/* if Idle flag is set */
 80013a0:	6803      	ldr	r3, [r0, #0]
void 			BLEUSART_IrqHandler(Bluetooth *ble){
 80013a2:	b082      	sub	sp, #8
	if (ble->UARTHandle->Instance->SR & UART_FLAG_IDLE) {    	/* if Idle flag is set */
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	06c9      	lsls	r1, r1, #27
 80013aa:	d514      	bpl.n	80013d6 <BLEUSART_IrqHandler+0x36>
		tmp = ble->UARTHandle->Instance->SR;                 	/* Read status register */
 80013ac:	6819      	ldr	r1, [r3, #0]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       			/* Disabling DMA will force transfer complete interrupt if enabled */
 80013ae:	6842      	ldr	r2, [r0, #4]
		tmp = ble->UARTHandle->Instance->SR;                 	/* Read status register */
 80013b0:	9101      	str	r1, [sp, #4]
		tmp = ble->UARTHandle->Instance->DR;                 	/* Read data register */
 80013b2:	6859      	ldr	r1, [r3, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       			/* Disabling DMA will force transfer complete interrupt if enabled */
 80013b4:	6812      	ldr	r2, [r2, #0]
		tmp = ble->UARTHandle->Instance->DR;                 	/* Read data register */
 80013b6:	9101      	str	r1, [sp, #4]
		__HAL_DMA_DISABLE (ble->UARTDMAHandle);       			/* Disabling DMA will force transfer complete interrupt if enabled */
 80013b8:	6811      	ldr	r1, [r2, #0]
 80013ba:	f021 0101 	bic.w	r1, r1, #1
 80013be:	6011      	str	r1, [r2, #0]
		__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);		// HABILITA idle line INTERRUPT
 80013c0:	68d9      	ldr	r1, [r3, #12]
 80013c2:	f041 0110 	orr.w	r1, r1, #16
 80013c6:	60d9      	str	r1, [r3, #12]
		__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);		// HABILITA O DMA Tx cplt INTERRUPT
 80013c8:	6813      	ldr	r3, [r2, #0]
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	b002      	add	sp, #8
		BLEDMA_IrqHandler (ble);
 80013d2:	f7ff bf3d 	b.w	8001250 <BLEDMA_IrqHandler>
}
 80013d6:	b002      	add	sp, #8
 80013d8:	4770      	bx	lr

080013da <bluetoothEnviaComando>:
{
 80013da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013de:	4614      	mov	r4, r2
 80013e0:	468a      	mov	sl, r1
	uint8_t	TX_Buffer		[size+3];
 80013e2:	f102 030a 	add.w	r3, r2, #10
 80013e6:	f023 0307 	bic.w	r3, r3, #7
		TX_Buffer[i]=_out[i];
 80013ea:	f102 0901 	add.w	r9, r2, #1
{
 80013ee:	af00      	add	r7, sp, #0
	uint8_t	TX_Buffer		[size+3];
 80013f0:	ebad 0d03 	sub.w	sp, sp, r3
		TX_Buffer[i]=_out[i];
 80013f4:	1c53      	adds	r3, r2, #1
	CRCVar = CRC16(_out,size+1);
 80013f6:	b2a5      	uxth	r5, r4
		TX_Buffer[i]=_out[i];
 80013f8:	bfac      	ite	ge
 80013fa:	464a      	movge	r2, r9
 80013fc:	2200      	movlt	r2, #0
{
 80013fe:	4606      	mov	r6, r0
		TX_Buffer[i]=_out[i];
 8001400:	4668      	mov	r0, sp
 8001402:	f009 fa70 	bl	800a8e6 <memcpy>
	CRCVar = CRC16(_out,size+1);
 8001406:	1c69      	adds	r1, r5, #1
 8001408:	4650      	mov	r0, sl
 800140a:	b289      	uxth	r1, r1
 800140c:	f000 fada 	bl	80019c4 <CRC16>
	TX_Buffer[size+2] = (unsigned char) CRCVar.byte.lo;
 8001410:	446c      	add	r4, sp
 8001412:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8001416:	70a3      	strb	r3, [r4, #2]
	uint8_t	TX_Buffer		[size+3];
 8001418:	46e8      	mov	r8, sp
	while (tries++ < MAX_TRIES) {
 800141a:	240a      	movs	r4, #10
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 800141c:	3503      	adds	r5, #3
	TX_Buffer[size+1] = (unsigned char) CRCVar.byte.hi;
 800141e:	f80d 0009 	strb.w	r0, [sp, r9]
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TX_Buffer, size+3,50);
 8001422:	b2ad      	uxth	r5, r5
 8001424:	2332      	movs	r3, #50	; 0x32
 8001426:	462a      	mov	r2, r5
 8001428:	4641      	mov	r1, r8
 800142a:	6830      	ldr	r0, [r6, #0]
 800142c:	f006 f9a7 	bl	800777e <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 8001430:	b910      	cbnz	r0, 8001438 <bluetoothEnviaComando+0x5e>
}
 8001432:	46bd      	mov	sp, r7
 8001434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tries == MAX_TRIES)	bleError_Handler(BLE_ENVIO_COMANDO);
 8001438:	3c01      	subs	r4, #1
 800143a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800143e:	d1f1      	bne.n	8001424 <bluetoothEnviaComando+0x4a>
 8001440:	200f      	movs	r0, #15
 8001442:	f7ff fe83 	bl	800114c <bleError_Handler>
	...

08001448 <txBleComando>:
void 			txBleComando(Bluetooth *ble){
 8001448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800144a:	4604      	mov	r4, r0
	if (ble->myQ_bleCom->is_empty(ble->myQ_bleCom)) {
 800144c:	6880      	ldr	r0, [r0, #8]
 800144e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001450:	4798      	blx	r3
 8001452:	b9b0      	cbnz	r0, 8001482 <txBleComando+0x3a>
	buffQueue = ble->myQ_bleCom->remove(ble->myQ_bleCom);
 8001454:	68a0      	ldr	r0, [r4, #8]
 8001456:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001458:	4798      	blx	r3
	if (buffQueue > 0) {
 800145a:	2800      	cmp	r0, #0
 800145c:	dd11      	ble.n	8001482 <txBleComando+0x3a>
		switch ((uint8_t)buffQueue) {
 800145e:	b2c0      	uxtb	r0, r0
 8001460:	2840      	cmp	r0, #64	; 0x40
 8001462:	d01c      	beq.n	800149e <txBleComando+0x56>
 8001464:	2842      	cmp	r0, #66	; 0x42
 8001466:	d135      	bne.n	80014d4 <txBleComando+0x8c>
			if(ble->JanelaConexao > 0){
 8001468:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800146c:	b15b      	cbz	r3, 8001486 <txBleComando+0x3e>
				bluetoothEnviaComando(ble,Buffer, 5);
 800146e:	2205      	movs	r2, #5
				Buffer[0] 	= 0x01;
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <txBleComando+0x90>)
 8001472:	9301      	str	r3, [sp, #4]
				Buffer[4] 	= ble->chave.byte.hi	;
 8001474:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001476:	f8ad 3008 	strh.w	r3, [sp, #8]
				bluetoothEnviaComando(ble,Buffer, 3);
 800147a:	4620      	mov	r0, r4
 800147c:	a901      	add	r1, sp, #4
 800147e:	f7ff ffac 	bl	80013da <bluetoothEnviaComando>
}
 8001482:	b004      	add	sp, #16
 8001484:	bd10      	pop	{r4, pc}
				Buffer[0] 	= 0x01;
 8001486:	4a15      	ldr	r2, [pc, #84]	; (80014dc <txBleComando+0x94>)
				bluetoothEnviaComando(ble,Buffer, 5);
 8001488:	4620      	mov	r0, r4
				Buffer[0] 	= 0x01;
 800148a:	9201      	str	r2, [sp, #4]
				bluetoothEnviaComando(ble,Buffer, 5);
 800148c:	a901      	add	r1, sp, #4
 800148e:	2205      	movs	r2, #5
				Buffer[4] 	= 0x00;
 8001490:	f8ad 3008 	strh.w	r3, [sp, #8]
				bluetoothEnviaComando(ble,Buffer, 5);
 8001494:	f7ff ffa1 	bl	80013da <bluetoothEnviaComando>
				bleError_Handler(BLE_NEW_DEVICE_NEGADO);
 8001498:	200b      	movs	r0, #11
				bleError_Handler(BLE_SENHA_ERRADA);
 800149a:	f7ff fe57 	bl	800114c <bleError_Handler>
			chaveApp.byte.hi = ble->_RxDataArr[3];
 800149e:	f04f 0100 	mov.w	r1, #0
 80014a2:	7de3      	ldrb	r3, [r4, #23]
			if(validaCRC(ble->chave, chaveApp)){
 80014a4:	8e60      	ldrh	r0, [r4, #50]	; 0x32
			chaveApp.byte.hi = ble->_RxDataArr[3];
 80014a6:	f363 0107 	bfi	r1, r3, #0, #8
			chaveApp.byte.lo = ble->_RxDataArr[4];
 80014aa:	7e23      	ldrb	r3, [r4, #24]
 80014ac:	f363 210f 	bfi	r1, r3, #8, #8
			if(validaCRC(ble->chave, chaveApp)){
 80014b0:	f000 fa9e 	bl	80019f0 <validaCRC>
 80014b4:	b140      	cbz	r0, 80014c8 <txBleComando+0x80>
				Buffer[0] 	= 0x01;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <txBleComando+0x98>)
				bluetoothEnviaComando(ble,Buffer, 3);
 80014b8:	4620      	mov	r0, r4
 80014ba:	2203      	movs	r2, #3
 80014bc:	a901      	add	r1, sp, #4
				Buffer[0] 	= 0x01;
 80014be:	9301      	str	r3, [sp, #4]
				bluetoothEnviaComando(ble,Buffer, 3);
 80014c0:	f7ff ff8b 	bl	80013da <bluetoothEnviaComando>
				bleError_Handler(BLE_SENHA_ERRADA);
 80014c4:	200c      	movs	r0, #12
 80014c6:	e7e8      	b.n	800149a <txBleComando+0x52>
				ble->MaquinaConexao	= RX_VALIDADO;
 80014c8:	2203      	movs	r2, #3
				Buffer[0] 	= 0x01;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <txBleComando+0x9c>)
				ble->MaquinaConexao	= RX_VALIDADO;
 80014cc:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
				Buffer[0] 	= 0x01;
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	e7d2      	b.n	800147a <txBleComando+0x32>
			bleError_Handler(BLE_COMANDO_NAO_ENCONTRADO);
 80014d4:	2006      	movs	r0, #6
 80014d6:	e7e0      	b.n	800149a <txBleComando+0x52>
 80014d8:	01515101 	.word	0x01515101
 80014dc:	00515101 	.word	0x00515101
 80014e0:	00525201 	.word	0x00525201
 80014e4:	01525201 	.word	0x01525201

080014e8 <comandHM10>:
void 			comandHM10(Bluetooth *ble, char _out[], uint16_t delay){
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ea:	4607      	mov	r7, r0
 80014ec:	460e      	mov	r6, r1
 80014ee:	4615      	mov	r5, r2
	while (tries++ < MAX_TRIES) {
 80014f0:	2405      	movs	r4, #5
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *) _out, strlen(_out),100);
 80014f2:	4630      	mov	r0, r6
 80014f4:	f7fe fe2c 	bl	8000150 <strlen>
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	b282      	uxth	r2, r0
 80014fc:	4631      	mov	r1, r6
 80014fe:	6838      	ldr	r0, [r7, #0]
 8001500:	f006 f93d 	bl	800777e <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 8001504:	b928      	cbnz	r0, 8001512 <comandHM10+0x2a>
	if(delay != 0){
 8001506:	b15d      	cbz	r5, 8001520 <comandHM10+0x38>
		osDelay(delay);
 8001508:	4628      	mov	r0, r5
}
 800150a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		osDelay(delay);
 800150e:	f006 bd03 	b.w	8007f18 <osDelay>
		if (tries == MAX_TRIES)	bleError_Handler(BLE_ENVIO_COMANDO);
 8001512:	3c01      	subs	r4, #1
 8001514:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001518:	d1eb      	bne.n	80014f2 <comandHM10+0xa>
 800151a:	200f      	movs	r0, #15
 800151c:	f7ff fe16 	bl	800114c <bleError_Handler>
}
 8001520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001524 <bluetoothDescon>:
void 			bluetoothDescon(Bluetooth* ble){
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4604      	mov	r4, r0
	comandHM10(ble,"AT",50);//DESCONECTA
 8001528:	4d05      	ldr	r5, [pc, #20]	; (8001540 <bluetoothDescon+0x1c>)
 800152a:	2232      	movs	r2, #50	; 0x32
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff ffdb 	bl	80014e8 <comandHM10>
	comandHM10(ble,"AT",50);//DESCONECTA
 8001532:	4629      	mov	r1, r5
 8001534:	4620      	mov	r0, r4
}
 8001536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	comandHM10(ble,"AT",50);//DESCONECTA
 800153a:	2232      	movs	r2, #50	; 0x32
 800153c:	f7ff bfd4 	b.w	80014e8 <comandHM10>
 8001540:	0800b5d6 	.word	0x0800b5d6

08001544 <bluetooth10ms>:
void 			bluetooth10ms(Bluetooth* ble){
 8001544:	b510      	push	{r4, lr}
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 8001546:	8e03      	ldrh	r3, [r0, #48]	; 0x30
void 			bluetooth10ms(Bluetooth* ble){
 8001548:	4604      	mov	r4, r0
	(ble->msIdle<=DEF_TEMPO_MAX_S_MSG_LOW)?ble->msIdle++:0;
 800154a:	2b78      	cmp	r3, #120	; 0x78
 800154c:	bf9c      	itt	ls
 800154e:	3301      	addls	r3, #1
 8001550:	8603      	strhls	r3, [r0, #48]	; 0x30
	if(ble->JanelaConexao>0){
 8001552:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8001556:	b16b      	cbz	r3, 8001574 <bluetooth10ms+0x30>
		if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_HIGH)	{
 8001558:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800155a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800155e:	d901      	bls.n	8001564 <bluetooth10ms+0x20>
			bluetoothDescon(ble);
 8001560:	f7ff ffe0 	bl	8001524 <bluetoothDescon>
	if(ble->msIdle > DEF_TEMPO_MAX_S_MSG_LOW)	{
 8001564:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8001566:	2b78      	cmp	r3, #120	; 0x78
 8001568:	d906      	bls.n	8001578 <bluetooth10ms+0x34>
		bluetoothDescon(ble);
 800156a:	4620      	mov	r0, r4
}
 800156c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bluetoothDescon(ble);
 8001570:	f7ff bfd8 	b.w	8001524 <bluetoothDescon>
		__NOP();
 8001574:	bf00      	nop
 8001576:	e7f5      	b.n	8001564 <bluetooth10ms+0x20>
}
 8001578:	bd10      	pop	{r4, pc}
	...

0800157c <iniciaBleHm10>:
void		 	iniciaBleHm10(Bluetooth* ble){
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4604      	mov	r4, r0
		switch (sequenciaBLE) {
 8001580:	4db2      	ldr	r5, [pc, #712]	; (800184c <iniciaBleHm10+0x2d0>)
			while (tryingAddr < max_attempts) {
 8001582:	4eb3      	ldr	r6, [pc, #716]	; (8001850 <iniciaBleHm10+0x2d4>)
void		 	iniciaBleHm10(Bluetooth* ble){
 8001584:	b08f      	sub	sp, #60	; 0x3c
		switch (sequenciaBLE) {
 8001586:	782b      	ldrb	r3, [r5, #0]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d8fd      	bhi.n	8001588 <iniciaBleHm10+0xc>
 800158c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001590:	00470005 	.word	0x00470005
 8001594:	012f00fb 	.word	0x012f00fb
 8001598:	015a      	.short	0x015a
			MACRO_RESET_BLE		//HARDRESET NO BLE_HM10
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a0:	48ac      	ldr	r0, [pc, #688]	; (8001854 <iniciaBleHm10+0x2d8>)
 80015a2:	f004 f9e5 	bl	8005970 <HAL_GPIO_WritePin>
 80015a6:	20c8      	movs	r0, #200	; 0xc8
 80015a8:	f006 fcb6 	bl	8007f18 <osDelay>
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015b2:	48a8      	ldr	r0, [pc, #672]	; (8001854 <iniciaBleHm10+0x2d8>)
 80015b4:	f004 f9dc 	bl	8005970 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80015b8:	2264      	movs	r2, #100	; 0x64
 80015ba:	4620      	mov	r0, r4
 80015bc:	49a6      	ldr	r1, [pc, #664]	; (8001858 <iniciaBleHm10+0x2dc>)
 80015be:	f7ff ff93 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+ADTY3",100);	//BLOQUEIA CONEXAO
 80015c2:	2264      	movs	r2, #100	; 0x64
 80015c4:	49a4      	ldr	r1, [pc, #656]	; (8001858 <iniciaBleHm10+0x2dc>)
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff ff8e 	bl	80014e8 <comandHM10>
			SETUP_UART(115200)
 80015cc:	6820      	ldr	r0, [r4, #0]
 80015ce:	f006 f95b 	bl	8007888 <HAL_UART_Abort_IT>
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	f006 f8b9 	bl	800774a <HAL_UART_DeInit>
 80015d8:	2032      	movs	r0, #50	; 0x32
 80015da:	f006 fc9d 	bl	8007f18 <osDelay>
 80015de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015e2:	6820      	ldr	r0, [r4, #0]
 80015e4:	6043      	str	r3, [r0, #4]
 80015e6:	f006 f881 	bl	80076ec <HAL_UART_Init>
 80015ea:	2032      	movs	r0, #50	; 0x32
 80015ec:	f006 fc94 	bl	8007f18 <osDelay>
			bluetoothDescon(ble);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff ff97 	bl	8001524 <bluetoothDescon>
			MACRO_DEFINE_INTERRUPT
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f104 0114 	add.w	r1, r4, #20
 80015fc:	6802      	ldr	r2, [r0, #0]
 80015fe:	68d3      	ldr	r3, [r2, #12]
 8001600:	f043 0310 	orr.w	r3, r3, #16
 8001604:	60d3      	str	r3, [r2, #12]
 8001606:	6863      	ldr	r3, [r4, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	2218      	movs	r2, #24
 8001614:	f006 fc36 	bl	8007e84 <HAL_UART_Receive_DMA>
			sequenciaBLE = redefineBle;
 8001618:	2301      	movs	r3, #1
			sequenciaBLE = capturaAddr;
 800161a:	702b      	strb	r3, [r5, #0]
			break;
 800161c:	e7b3      	b.n	8001586 <iniciaBleHm10+0xa>
			SETUP_UART(115200)
 800161e:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8001622:	6820      	ldr	r0, [r4, #0]
 8001624:	f006 f930 	bl	8007888 <HAL_UART_Abort_IT>
 8001628:	6820      	ldr	r0, [r4, #0]
 800162a:	f006 f88e 	bl	800774a <HAL_UART_DeInit>
 800162e:	2032      	movs	r0, #50	; 0x32
 8001630:	f006 fc72 	bl	8007f18 <osDelay>
 8001634:	6820      	ldr	r0, [r4, #0]
 8001636:	6047      	str	r7, [r0, #4]
 8001638:	f006 f858 	bl	80076ec <HAL_UART_Init>
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f006 fc6b 	bl	8007f18 <osDelay>
			comandHM10(ble,"AT",100);	//
 8001642:	2264      	movs	r2, #100	; 0x64
 8001644:	4620      	mov	r0, r4
 8001646:	4985      	ldr	r1, [pc, #532]	; (800185c <iniciaBleHm10+0x2e0>)
 8001648:	f7ff ff4e 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT",100);	//
 800164c:	2264      	movs	r2, #100	; 0x64
 800164e:	4620      	mov	r0, r4
 8001650:	4982      	ldr	r1, [pc, #520]	; (800185c <iniciaBleHm10+0x2e0>)
 8001652:	f7ff ff49 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800165a:	4981      	ldr	r1, [pc, #516]	; (8001860 <iniciaBleHm10+0x2e4>)
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff ff43 	bl	80014e8 <comandHM10>
			SETUP_UART(9600)
 8001662:	6820      	ldr	r0, [r4, #0]
 8001664:	f006 f910 	bl	8007888 <HAL_UART_Abort_IT>
 8001668:	6820      	ldr	r0, [r4, #0]
 800166a:	f006 f86e 	bl	800774a <HAL_UART_DeInit>
 800166e:	2032      	movs	r0, #50	; 0x32
 8001670:	f006 fc52 	bl	8007f18 <osDelay>
 8001674:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	6043      	str	r3, [r0, #4]
 800167c:	f006 f836 	bl	80076ec <HAL_UART_Init>
 8001680:	2032      	movs	r0, #50	; 0x32
 8001682:	f006 fc49 	bl	8007f18 <osDelay>
			comandHM10(ble,"AT+RENEW",1000);	//RESTAURA PADRAO FABRICA
 8001686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800168a:	4620      	mov	r0, r4
 800168c:	4974      	ldr	r1, [pc, #464]	; (8001860 <iniciaBleHm10+0x2e4>)
 800168e:	f7ff ff2b 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT",100);	//
 8001692:	2264      	movs	r2, #100	; 0x64
 8001694:	4620      	mov	r0, r4
 8001696:	4971      	ldr	r1, [pc, #452]	; (800185c <iniciaBleHm10+0x2e0>)
 8001698:	f7ff ff26 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT",100);	//
 800169c:	2264      	movs	r2, #100	; 0x64
 800169e:	4620      	mov	r0, r4
 80016a0:	496e      	ldr	r1, [pc, #440]	; (800185c <iniciaBleHm10+0x2e0>)
 80016a2:	f7ff ff21 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+ADTY3",300);	//BLOQUEIA CONEXAO
 80016a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016aa:	4620      	mov	r0, r4
 80016ac:	496a      	ldr	r1, [pc, #424]	; (8001858 <iniciaBleHm10+0x2dc>)
 80016ae:	f7ff ff1b 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+BAUD4",300);	//COLOCA BAUD EM 115200
 80016b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016b6:	496b      	ldr	r1, [pc, #428]	; (8001864 <iniciaBleHm10+0x2e8>)
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff ff15 	bl	80014e8 <comandHM10>
			SETUP_UART(115200)
 80016be:	6820      	ldr	r0, [r4, #0]
 80016c0:	f006 f8e2 	bl	8007888 <HAL_UART_Abort_IT>
 80016c4:	6820      	ldr	r0, [r4, #0]
 80016c6:	f006 f840 	bl	800774a <HAL_UART_DeInit>
 80016ca:	2032      	movs	r0, #50	; 0x32
 80016cc:	f006 fc24 	bl	8007f18 <osDelay>
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	6047      	str	r7, [r0, #4]
 80016d4:	f006 f80a 	bl	80076ec <HAL_UART_Init>
 80016d8:	2032      	movs	r0, #50	; 0x32
 80016da:	f006 fc1d 	bl	8007f18 <osDelay>
			MACRO_RESET_BLE
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e4:	485b      	ldr	r0, [pc, #364]	; (8001854 <iniciaBleHm10+0x2d8>)
 80016e6:	f004 f943 	bl	8005970 <HAL_GPIO_WritePin>
 80016ea:	20c8      	movs	r0, #200	; 0xc8
 80016ec:	f006 fc14 	bl	8007f18 <osDelay>
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f6:	4857      	ldr	r0, [pc, #348]	; (8001854 <iniciaBleHm10+0x2d8>)
 80016f8:	f004 f93a 	bl	8005970 <HAL_GPIO_WritePin>
			comandHM10(ble,"AT",100);	//
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	4620      	mov	r0, r4
 8001700:	4956      	ldr	r1, [pc, #344]	; (800185c <iniciaBleHm10+0x2e0>)
 8001702:	f7ff fef1 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT",100);	//
 8001706:	2264      	movs	r2, #100	; 0x64
 8001708:	4620      	mov	r0, r4
 800170a:	4954      	ldr	r1, [pc, #336]	; (800185c <iniciaBleHm10+0x2e0>)
 800170c:	f7ff feec 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+POWE3",300);	//POTENCIA MAXIMA
 8001710:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001714:	4620      	mov	r0, r4
 8001716:	4954      	ldr	r1, [pc, #336]	; (8001868 <iniciaBleHm10+0x2ec>)
 8001718:	f7ff fee6 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+SHOW3",300);	//MOSTRA O NOME e rssi
 800171c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001720:	4620      	mov	r0, r4
 8001722:	4952      	ldr	r1, [pc, #328]	; (800186c <iniciaBleHm10+0x2f0>)
 8001724:	f7ff fee0 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+GAIN1",300);	//INSERE GANHO
 8001728:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172c:	4620      	mov	r0, r4
 800172e:	4950      	ldr	r1, [pc, #320]	; (8001870 <iniciaBleHm10+0x2f4>)
 8001730:	f7ff feda 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+NOTI1",300);	//NOTIFICA QUE CONECTOU
 8001734:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001738:	4620      	mov	r0, r4
 800173a:	494e      	ldr	r1, [pc, #312]	; (8001874 <iniciaBleHm10+0x2f8>)
 800173c:	f7ff fed4 	bl	80014e8 <comandHM10>
			comandHM10(ble,"AT+PIO11",300);	//1 - CONECT = 1  \  DISC = 0
 8001740:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001744:	4620      	mov	r0, r4
 8001746:	494c      	ldr	r1, [pc, #304]	; (8001878 <iniciaBleHm10+0x2fc>)
 8001748:	f7ff fece 	bl	80014e8 <comandHM10>
			snprintf(comando, sizeof(comando), "AT+NAME%s", BLE_DEVICE_NAME);
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <iniciaBleHm10+0x300>)
 800174e:	2132      	movs	r1, #50	; 0x32
 8001750:	4a4b      	ldr	r2, [pc, #300]	; (8001880 <iniciaBleHm10+0x304>)
 8001752:	a801      	add	r0, sp, #4
 8001754:	f008 febc 	bl	800a4d0 <sniprintf>
			comandHM10(ble,comando, 400); 	// Configura o nome no dispositivo
 8001758:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800175c:	4620      	mov	r0, r4
 800175e:	a901      	add	r1, sp, #4
 8001760:	f7ff fec2 	bl	80014e8 <comandHM10>
			M_BLE_RESET
 8001764:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001768:	4620      	mov	r0, r4
 800176a:	4946      	ldr	r1, [pc, #280]	; (8001884 <iniciaBleHm10+0x308>)
 800176c:	f7ff febc 	bl	80014e8 <comandHM10>
			sequenciaBLE = capturaAddr;
 8001770:	2302      	movs	r3, #2
 8001772:	e752      	b.n	800161a <iniciaBleHm10+0x9e>
					tryingAddr++;
 8001774:	7833      	ldrb	r3, [r6, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2db      	uxtb	r3, r3
			if(tryingAddr >= max_attempts){
 800177a:	2b0e      	cmp	r3, #14
					tryingAddr++;
 800177c:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 800177e:	f67f af02 	bls.w	8001586 <iniciaBleHm10+0xa>
				sequenciaBLE = erro;//extrapolou as tentativas
 8001782:	2304      	movs	r3, #4
 8001784:	e749      	b.n	800161a <iniciaBleHm10+0x9e>
			while (tryingAddr < max_attempts) {
 8001786:	7833      	ldrb	r3, [r6, #0]
 8001788:	2b0e      	cmp	r3, #14
 800178a:	d8fa      	bhi.n	8001782 <iniciaBleHm10+0x206>
				comandHM10(ble,"AT+ADDR?",300);//pede addr
 800178c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001790:	4620      	mov	r0, r4
 8001792:	493d      	ldr	r1, [pc, #244]	; (8001888 <iniciaBleHm10+0x30c>)
 8001794:	f7ff fea8 	bl	80014e8 <comandHM10>
				MACRO_DEFINE_INTERRUPT
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	f104 0714 	add.w	r7, r4, #20
 800179e:	6802      	ldr	r2, [r0, #0]
 80017a0:	4639      	mov	r1, r7
 80017a2:	68d3      	ldr	r3, [r2, #12]
 80017a4:	f043 0310 	orr.w	r3, r3, #16
 80017a8:	60d3      	str	r3, [r2, #12]
 80017aa:	6863      	ldr	r3, [r4, #4]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	2218      	movs	r2, #24
 80017b8:	f006 fb64 	bl	8007e84 <HAL_UART_Receive_DMA>
				if (ble->chave.hilo != 0){
 80017bc:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0d7      	beq.n	8001774 <iniciaBleHm10+0x1f8>
					sequenciaBLE = final;
 80017c4:	2303      	movs	r3, #3
					MACRO_DEFINE_INTERRUPT
 80017c6:	6820      	ldr	r0, [r4, #0]
					sequenciaBLE = final;
 80017c8:	702b      	strb	r3, [r5, #0]
					MACRO_DEFINE_INTERRUPT
 80017ca:	6802      	ldr	r2, [r0, #0]
 80017cc:	4639      	mov	r1, r7
 80017ce:	68d3      	ldr	r3, [r2, #12]
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	60d3      	str	r3, [r2, #12]
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	6813      	ldr	r3, [r2, #0]
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	2218      	movs	r2, #24
 80017e4:	f006 fb4e 	bl	8007e84 <HAL_UART_Receive_DMA>
					tryingAddr=0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	7033      	strb	r3, [r6, #0]
			if(tryingAddr >= max_attempts){
 80017ec:	e6cb      	b.n	8001586 <iniciaBleHm10+0xa>
			comandHM10(ble,"AT+ADTY0",300);	//DESBLOQUEIA CONEXA
 80017ee:	4620      	mov	r0, r4
 80017f0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017f4:	4925      	ldr	r1, [pc, #148]	; (800188c <iniciaBleHm10+0x310>)
 80017f6:	f7ff fe77 	bl	80014e8 <comandHM10>
			MACRO_RESET_BLE
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001800:	4814      	ldr	r0, [pc, #80]	; (8001854 <iniciaBleHm10+0x2d8>)
 8001802:	f004 f8b5 	bl	8005970 <HAL_GPIO_WritePin>
 8001806:	20c8      	movs	r0, #200	; 0xc8
 8001808:	f006 fb86 	bl	8007f18 <osDelay>
 800180c:	2201      	movs	r2, #1
 800180e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001812:	4810      	ldr	r0, [pc, #64]	; (8001854 <iniciaBleHm10+0x2d8>)
 8001814:	f004 f8ac 	bl	8005970 <HAL_GPIO_WritePin>
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 8001818:	6820      	ldr	r0, [r4, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 800181a:	f104 0114 	add.w	r1, r4, #20
			__HAL_UART_ENABLE_IT 	(ble->UARTHandle, UART_IT_IDLE);						// HABILITA idle line INTERRUPT
 800181e:	6802      	ldr	r2, [r0, #0]
 8001820:	68d3      	ldr	r3, [r2, #12]
 8001822:	f043 0310 	orr.w	r3, r3, #16
 8001826:	60d3      	str	r3, [r2, #12]
			__HAL_DMA_ENABLE_IT 	(ble->UARTDMAHandle, DMA_IT_TC);					// HABILITA O DMA Tx cplt INTERRUPT
 8001828:	6863      	ldr	r3, [r4, #4]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	6813      	ldr	r3, [r2, #0]
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_DMA 	(ble->UARTHandle, ble->_RxDataArr, DMA_RX_BUFFER_SIZE);	// STARTA O UART1 EM DMA MODE
 8001834:	2218      	movs	r2, #24
 8001836:	f006 fb25 	bl	8007e84 <HAL_UART_Receive_DMA>
			ble->MaquinaConexao = RX_DESCONECTADO;
 800183a:	2301      	movs	r3, #1
 800183c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8001840:	b00f      	add	sp, #60	; 0x3c
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bleError_Handler(BLE_EXTRAPOLOU_TRY);
 8001844:	2004      	movs	r0, #4
 8001846:	f7ff fc81 	bl	800114c <bleError_Handler>
 800184a:	bf00      	nop
 800184c:	2000008c 	.word	0x2000008c
 8001850:	2000008d 	.word	0x2000008d
 8001854:	40010c00 	.word	0x40010c00
 8001858:	0800b5d9 	.word	0x0800b5d9
 800185c:	0800b5d6 	.word	0x0800b5d6
 8001860:	0800b5e2 	.word	0x0800b5e2
 8001864:	0800b5eb 	.word	0x0800b5eb
 8001868:	0800b5f4 	.word	0x0800b5f4
 800186c:	0800b5fd 	.word	0x0800b5fd
 8001870:	0800b606 	.word	0x0800b606
 8001874:	0800b60f 	.word	0x0800b60f
 8001878:	0800b618 	.word	0x0800b618
 800187c:	0800b621 	.word	0x0800b621
 8001880:	0800b62b 	.word	0x0800b62b
 8001884:	0800b635 	.word	0x0800b635
 8001888:	0800b63e 	.word	0x0800b63e
 800188c:	0800b647 	.word	0x0800b647

08001890 <bleConstrutora>:
void	 		bleConstrutora(Bluetooth *ble, UART_HandleTypeDef *UARTHandle, DMA_HandleTypeDef *UARTDMAHandle, osThreadId Task){
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	461d      	mov	r5, r3
	if (ble == NULL || UARTHandle == NULL || UARTDMAHandle == NULL) {
 8001894:	4604      	mov	r4, r0
 8001896:	b108      	cbz	r0, 800189c <bleConstrutora+0xc>
 8001898:	b101      	cbz	r1, 800189c <bleConstrutora+0xc>
 800189a:	b912      	cbnz	r2, 80018a2 <bleConstrutora+0x12>
		bleError_Handler(BLE_OBJETO_NULO);
 800189c:	2003      	movs	r0, #3
 800189e:	f7ff fc55 	bl	800114c <bleError_Handler>
	ble->contComandos 	= 0; 	// Renomeado para ter um nome mais explícito e sem _ inicial.
 80018a2:	2300      	movs	r3, #0
 80018a4:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 80018a8:	2378      	movs	r3, #120	; 0x78
	ble->UARTDMAHandle 	= UARTDMAHandle;
 80018aa:	e9c0 1200 	strd	r1, r2, [r0]
	ble->JanelaConexao 	= 120; 	// 120 segundos.
 80018ae:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
	ble->myQ_bleCom = Queue_create();
 80018b2:	f001 fb71 	bl	8002f98 <Queue_create>
 80018b6:	60a0      	str	r0, [r4, #8]
	ble->myQ_dataRx = Queue_create();
 80018b8:	f001 fb6e 	bl	8002f98 <Queue_create>
 80018bc:	60e0      	str	r0, [r4, #12]
	ble->myQ_dataTx = Queue_create();
 80018be:	f001 fb6b 	bl	8002f98 <Queue_create>
	osSignalSet(ble->Task, newMessage);
 80018c2:	210a      	movs	r1, #10
	ble->myQ_dataTx = Queue_create();
 80018c4:	6120      	str	r0, [r4, #16]
	ble->Task 		= Task;
 80018c6:	63e5      	str	r5, [r4, #60]	; 0x3c
	osSignalSet(ble->Task, newMessage);
 80018c8:	4628      	mov	r0, r5
 80018ca:	f006 fb6e 	bl	8007faa <osSignalSet>
	bleAddCompConexao(ble, &ble->BLEPedeSenha, RX_PEDE_SENHA);
 80018ce:	2242      	movs	r2, #66	; 0x42
 80018d0:	4620      	mov	r0, r4
 80018d2:	f104 0136 	add.w	r1, r4, #54	; 0x36
 80018d6:	f7ff fc77 	bl	80011c8 <bleAddCompConexao>
	bleAddCompConexao(ble, &ble->BLERecebeuSenha, RX_RECEBEU_SENHA);
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	4620      	mov	r0, r4
 80018de:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80018e2:	f7ff fc71 	bl	80011c8 <bleAddCompConexao>
	iniciaBleHm10(ble);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fe48 	bl	800157c <iniciaBleHm10>
	ble->aknowladge	= sendAknowladge;
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <bleConstrutora+0x64>)
 80018ee:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
}
 80018f2:	bd38      	pop	{r3, r4, r5, pc}
 80018f4:	080018f9 	.word	0x080018f9

080018f8 <sendAknowladge>:
	TXCRC[0] = 0x01;
 80018f8:	f64f 7301 	movw	r3, #65281	; 0xff01
void 			sendAknowladge(Bluetooth* ble,uint8_t Cmd){
 80018fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018fe:	4605      	mov	r5, r0
	while (tries++ < MAX_TRIES) {
 8001900:	2405      	movs	r4, #5
	TXCRC[0] = 0x01;
 8001902:	f8ad 3004 	strh.w	r3, [sp, #4]
	TXCRC[2] = Cmd;
 8001906:	f88d 1006 	strb.w	r1, [sp, #6]
		result = HAL_UART_Transmit(ble->UARTHandle, (uint8_t *)TXCRC, 3,50);
 800190a:	2332      	movs	r3, #50	; 0x32
 800190c:	2203      	movs	r2, #3
 800190e:	6828      	ldr	r0, [r5, #0]
 8001910:	a901      	add	r1, sp, #4
 8001912:	f005 ff34 	bl	800777e <HAL_UART_Transmit>
		if (result == HAL_OK)	break;
 8001916:	b908      	cbnz	r0, 800191c <sendAknowladge+0x24>
}
 8001918:	b003      	add	sp, #12
 800191a:	bd30      	pop	{r4, r5, pc}
		if (tries == MAX_TRIES)	bleError_Handler(BLE_ENVIO_COMANDO);
 800191c:	3c01      	subs	r4, #1
 800191e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001922:	d1f2      	bne.n	800190a <sendAknowladge+0x12>
 8001924:	200f      	movs	r0, #15
 8001926:	f7ff fc11 	bl	800114c <bleError_Handler>
	...

0800192c <vetor4b_TO_Double>:
 *  Created on: Dec 6, 2023
 *      Author: lucas
 */
#include "Conversoes.h"

void vetor4b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 800192c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001930:	4605      	mov	r5, r0
	// Verificar se o destino e o vetor não são nulos
	floatAsBytes myValue;

	// Copia os bytes do double para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < 4; ++i) {
 8001932:	2600      	movs	r6, #0
		myValue.bytes[i] = vetor[inicio + i] ;
		printf("%d \n",myValue.bytes[i]);
 8001934:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8001960 <vetor4b_TO_Double+0x34>
 8001938:	188c      	adds	r4, r1, r2
 800193a:	af01      	add	r7, sp, #4
		myValue.bytes[i] = vetor[inicio + i] ;
 800193c:	f814 1b01 	ldrb.w	r1, [r4], #1
		printf("%d \n",myValue.bytes[i]);
 8001940:	4640      	mov	r0, r8
	for (int i = 0; i < 4; ++i) {
 8001942:	3601      	adds	r6, #1
		myValue.bytes[i] = vetor[inicio + i] ;
 8001944:	f807 1b01 	strb.w	r1, [r7], #1
		printf("%d \n",myValue.bytes[i]);
 8001948:	f008 fd54 	bl	800a3f4 <iprintf>
	for (int i = 0; i < 4; ++i) {
 800194c:	2e04      	cmp	r6, #4
 800194e:	d1f5      	bne.n	800193c <vetor4b_TO_Double+0x10>
	}

	*destino = (double)myValue.value;
 8001950:	9801      	ldr	r0, [sp, #4]
 8001952:	f7fe fd69 	bl	8000428 <__aeabi_f2d>
 8001956:	e9c5 0100 	strd	r0, r1, [r5]
}
 800195a:	b002      	add	sp, #8
 800195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001960:	0800b650 	.word	0x0800b650

08001964 <vetor2b_TO_uint16>:
void vetor2b_TO_uint16(uint16_t *destino, uint8_t *vetor, uint8_t inicio) {
 8001964:	b410      	push	{r4}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 8001966:	b100      	cbz	r0, 800196a <vetor2b_TO_uint16+0x6>
 8001968:	b919      	cbnz	r1, 8001972 <vetor2b_TO_uint16+0xe>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <vetor2b_TO_uint16+0x20>)
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 800196c:	bc10      	pop	{r4}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 800196e:	f008 bda7 	b.w	800a4c0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 8001972:	5c8c      	ldrb	r4, [r1, r2]
 8001974:	4411      	add	r1, r2
 8001976:	784b      	ldrb	r3, [r1, #1]
 8001978:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800197c:	8003      	strh	r3, [r0, #0]
}
 800197e:	bc10      	pop	{r4}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	0800b655 	.word	0x0800b655

08001988 <vetor2b_TO_Double>:
void vetor2b_TO_Double(double *destino, uint8_t *vetor, uint8_t inicio) {
 8001988:	b510      	push	{r4, lr}

	// Verificar se o destino e o vetor não são nulos
	if (destino == NULL || vetor == NULL) {
 800198a:	4604      	mov	r4, r0
 800198c:	b100      	cbz	r0, 8001990 <vetor2b_TO_Double+0x8>
 800198e:	b921      	cbnz	r1, 800199a <vetor2b_TO_Double+0x12>
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
		return;
	}

	*destino = vetor[inicio] << 8 | vetor[inicio+1];
}
 8001990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Parâmetros inválidos para a função extraiFloatComoDoubleDoVetor.\n");
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <vetor2b_TO_Double+0x28>)
 8001996:	f008 bd93 	b.w	800a4c0 <puts>
	*destino = vetor[inicio] << 8 | vetor[inicio+1];
 800199a:	5c88      	ldrb	r0, [r1, r2]
 800199c:	4411      	add	r1, r2
 800199e:	784b      	ldrb	r3, [r1, #1]
 80019a0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80019a4:	f7fe fd2e 	bl	8000404 <__aeabi_i2d>
 80019a8:	e9c4 0100 	strd	r0, r1, [r4]
}
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	bf00      	nop
 80019b0:	0800b655 	.word	0x0800b655

080019b4 <float_TO_vetor4b>:
		myValue.bytes[i] = vetor[inicio + i];
	}

	*destino = myValue.value;
}
void float_TO_vetor4b(double valor, uint8_t *vetor, uint8_t inicio) {
 80019b4:	b538      	push	{r3, r4, r5, lr}
 80019b6:	4615      	mov	r5, r2
 80019b8:	461c      	mov	r4, r3

	// Cria uma união e armazena o valor float nela
	floatAsBytes myValue;
	myValue.value = (float)valor;
 80019ba:	f7ff f847 	bl	8000a4c <__aeabi_d2f>

	// Copia os bytes do float para o vetor, um por vez, começando no índice 'inicio'
	for (int i = 0; i < sizeof(myValue.value); ++i) {
		vetor[inicio + i] = myValue.bytes[i];
 80019be:	5128      	str	r0, [r5, r4]
	}
}
 80019c0:	bd38      	pop	{r3, r4, r5, pc}
	...

080019c4 <CRC16>:
			0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
			0x40
	};

	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80019c4:	23ff      	movs	r3, #255	; 0xff
{
 80019c6:	b570      	push	{r4, r5, r6, lr}
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80019c8:	461c      	mov	r4, r3
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80019ca:	4d07      	ldr	r5, [pc, #28]	; (80019e8 <CRC16+0x24>)
		uchCRCHi = auchCRCLo[uIndex] ;
 80019cc:	4e07      	ldr	r6, [pc, #28]	; (80019ec <CRC16+0x28>)
 80019ce:	4401      	add	r1, r0
	while (usDataLen--) /* pass through message buffer */
 80019d0:	4281      	cmp	r1, r0
 80019d2:	d102      	bne.n	80019da <CRC16+0x16>
	}
	ret.hilo = (uchCRCHi << 8 | uchCRCLo);

	return ret ;
}
 80019d4:	ea43 2004 	orr.w	r0, r3, r4, lsl #8
 80019d8:	bd70      	pop	{r4, r5, r6, pc}
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80019da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019de:	405a      	eors	r2, r3
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80019e0:	5cab      	ldrb	r3, [r5, r2]
 80019e2:	4063      	eors	r3, r4
		uchCRCHi = auchCRCLo[uIndex] ;
 80019e4:	5cb4      	ldrb	r4, [r6, r2]
 80019e6:	e7f3      	b.n	80019d0 <CRC16+0xc>
 80019e8:	0800b69a 	.word	0x0800b69a
 80019ec:	0800b79a 	.word	0x0800b79a

080019f0 <validaCRC>:

uint8_t validaCRC(CRC_short referencia, CRC_short chave){
	if(referencia.byte.hi != chave.byte.hi ||referencia.byte.lo != chave.byte.lo  ){
 80019f0:	b289      	uxth	r1, r1
 80019f2:	b280      	uxth	r0, r0
		return 1;
	}
	return 0;
}
 80019f4:	1a40      	subs	r0, r0, r1
 80019f6:	bf18      	it	ne
 80019f8:	2001      	movne	r0, #1
uint8_t validaCRC(CRC_short referencia, CRC_short chave){
 80019fa:	b082      	sub	sp, #8
}
 80019fc:	b002      	add	sp, #8
 80019fe:	4770      	bx	lr

08001a00 <set_StdValues8bits>:
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
	if (errCode != EEPROM_SUCCESS)
		eepromError_Handler(self->parentEeprom, errCode);
}
void 				set_StdValues8bits(eepromVarArr* 	self, uint8_t 	min, uint8_t 	def, uint8_t 	max) {
	self->minValue.intValue 	= min;
 8001a00:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001a02:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001a04:	6203      	str	r3, [r0, #32]
}
 8001a06:	4770      	bx	lr

08001a08 <set_StdValues16bits>:
void 				set_StdValues16bits(eepromVarArr* 	self, uint16_t 	min, uint16_t 	def, uint16_t 	max) {
	self->minValue.intValue 	= min;
 8001a08:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001a0a:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001a0c:	6203      	str	r3, [r0, #32]
}
 8001a0e:	4770      	bx	lr

08001a10 <set_StdValues32bits>:
void 				set_StdValues32bits(eepromVarArr* 	self, uint32_t 	min, uint32_t 	def, uint32_t 	max) {
	self->minValue.intValue 	= min;
 8001a10:	6181      	str	r1, [r0, #24]
	self->defaultValue.intValue = def;
 8001a12:	6102      	str	r2, [r0, #16]
	self->maxValue.intValue 	= max;
 8001a14:	6203      	str	r3, [r0, #32]
}
 8001a16:	4770      	bx	lr

08001a18 <set_StdValuesFloat>:
void 				set_StdValuesFloat(eepromVarArr* 	self, float 	min, float 		def, float 		max) {
	self->minValue.floatValue 		= min;
 8001a18:	6181      	str	r1, [r0, #24]
	self->defaultValue.floatValue 	= def;
 8001a1a:	6102      	str	r2, [r0, #16]
	self->maxValue.floatValue 		= max;
 8001a1c:	6203      	str	r3, [r0, #32]
}
 8001a1e:	4770      	bx	lr

08001a20 <set_StdValuesDouble>:
void 				set_StdValuesDouble(eepromVarArr* 	self, double 	min, double 	def, double 	max) {
	self->minValue.doubleValue 		= min;
 8001a20:	e9c0 2306 	strd	r2, r3, [r0, #24]
	self->defaultValue.doubleValue 	= def;
 8001a24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a28:	e9c0 2304 	strd	r2, r3, [r0, #16]
	self->maxValue.doubleValue 		= max;
 8001a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001a30:	e9c0 2308 	strd	r2, r3, [r0, #32]
}
 8001a34:	4770      	bx	lr
	...

08001a38 <objArrEeprom_init>:
ErrorCode 	objArrEeprom_init(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar){
 8001a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3c:	9d06      	ldr	r5, [sp, #24]
 8001a3e:	4688      	mov	r8, r1
 8001a40:	4617      	mov	r7, r2
 8001a42:	461e      	mov	r6, r3
	if (self == NULL || _addrVar == NULL)
 8001a44:	4604      	mov	r4, r0
 8001a46:	b300      	cbz	r0, 8001a8a <objArrEeprom_init+0x52>
 8001a48:	b1fd      	cbz	r5, 8001a8a <objArrEeprom_init+0x52>
	if (addr == 0)
 8001a4a:	b302      	cbz	r2, 8001a8e <objArrEeprom_init+0x56>
	memset(self, 0, sizeof(*self));
 8001a4c:	2248      	movs	r2, #72	; 0x48
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f008 fe4a 	bl	800a6e8 <memset>
	self->typeVar 		= type;
 8001a54:	7126      	strb	r6, [r4, #4]
	self->typeReset 	= typeReset;
 8001a56:	f884 8000 	strb.w	r8, [r4]
	self->_addrEprom 	= addr;
 8001a5a:	8067      	strh	r7, [r4, #2]
	switch (self->typeVar) {
 8001a5c:	2e04      	cmp	r6, #4
 8001a5e:	d818      	bhi.n	8001a92 <objArrEeprom_init+0x5a>
 8001a60:	e8df f006 	tbb	[pc, r6]
 8001a64:	03030303 	.word	0x03030303
 8001a68:	03          	.byte	0x03
 8001a69:	00          	.byte	0x00
	return EEPROM_SUCCESS;
 8001a6a:	2000      	movs	r0, #0
	self->M_setStdValues8bits		= set_StdValues8bits;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <objArrEeprom_init+0x60>)
	case DATA_DOUBLE:	self->ptrDouble	= (double *)_addrVar;	break;
 8001a6e:	62a5      	str	r5, [r4, #40]	; 0x28
	self->M_setStdValues8bits		= set_StdValues8bits;
 8001a70:	6323      	str	r3, [r4, #48]	; 0x30
	self->M_setStdValues16bits		= set_StdValues16bits;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <objArrEeprom_init+0x64>)
 8001a74:	6363      	str	r3, [r4, #52]	; 0x34
	self->M_setStdValues32bits		= set_StdValues32bits;
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <objArrEeprom_init+0x68>)
 8001a78:	63a3      	str	r3, [r4, #56]	; 0x38
	self->M_setStdValuesFloat		= set_StdValuesFloat;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <objArrEeprom_init+0x6c>)
 8001a7c:	63e3      	str	r3, [r4, #60]	; 0x3c
	self->M_setStdValuesDouble		= set_StdValuesDouble;
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <objArrEeprom_init+0x70>)
 8001a80:	6423      	str	r3, [r4, #64]	; 0x40
	self->M_update_eepromValue 		= update_eepromObjArr;
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <objArrEeprom_init+0x74>)
 8001a84:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return EEPROM_OBJETO_NULO;
 8001a8a:	2029      	movs	r0, #41	; 0x29
 8001a8c:	e7fb      	b.n	8001a86 <objArrEeprom_init+0x4e>
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001a8e:	2030      	movs	r0, #48	; 0x30
 8001a90:	e7f9      	b.n	8001a86 <objArrEeprom_init+0x4e>
	switch (self->typeVar) {
 8001a92:	202a      	movs	r0, #42	; 0x2a
 8001a94:	e7f7      	b.n	8001a86 <objArrEeprom_init+0x4e>
 8001a96:	bf00      	nop
 8001a98:	08001a01 	.word	0x08001a01
 8001a9c:	08001a09 	.word	0x08001a09
 8001aa0:	08001a11 	.word	0x08001a11
 8001aa4:	08001a19 	.word	0x08001a19
 8001aa8:	08001a21 	.word	0x08001a21
 8001aac:	0800203f 	.word	0x0800203f

08001ab0 <eeprom_AddVarOnArr>:
ErrorCode 	eepromVarArr_deinit(eepromVarArr*	self){
	__NOP();
	return EEPROM_SUCCESS;
}

ErrorCode 	eeprom_AddVarOnArr(Eeprom* eeprom, eepromVarArr* self) {
 8001ab0:	b570      	push	{r4, r5, r6, lr}

	if (eeprom->arrCount >= EEPROM_MAX_COMP_COUNT)
 8001ab2:	f890 4084 	ldrb.w	r4, [r0, #132]	; 0x84
 8001ab6:	2c1d      	cmp	r4, #29
 8001ab8:	d820      	bhi.n	8001afc <eeprom_AddVarOnArr+0x4c>
		return EEPROM_LISTA_CHEIA;
	if (self->_addrEprom == 0)
 8001aba:	884b      	ldrh	r3, [r1, #2]
 8001abc:	b303      	cbz	r3, 8001b00 <eeprom_AddVarOnArr+0x50>
		return EEPROM_ERRO_ENDERECO_OBJ;

	// Calcula o início da próxima página
	uint16_t inicioProximaPagina = ((self->_addrEprom / PAGE_SIZE) + 1) * PAGE_SIZE;
 8001abe:	095a      	lsrs	r2, r3, #5
 8001ac0:	3201      	adds	r2, #1

	// Verifica se o endereço inicial + tamanho da variável ultrapassa o início da próxima página
	uint16_t fimVar;

	switch (self->typeVar) {
 8001ac2:	790d      	ldrb	r5, [r1, #4]
	uint16_t inicioProximaPagina = ((self->_addrEprom / PAGE_SIZE) + 1) * PAGE_SIZE;
 8001ac4:	0152      	lsls	r2, r2, #5
 8001ac6:	b292      	uxth	r2, r2
	switch (self->typeVar) {
 8001ac8:	2d04      	cmp	r5, #4
 8001aca:	d81b      	bhi.n	8001b04 <eeprom_AddVarOnArr+0x54>
 8001acc:	e8df f005 	tbb	[pc, r5]
 8001ad0:	12121003 	.word	0x12121003
 8001ad4:	14          	.byte	0x14
 8001ad5:	00          	.byte	0x00
	case DATA_8BITS:
		fimVar = self->_addrEprom + sizeof(uint8_t);
 8001ad6:	3301      	adds	r3, #1
		break;
	case DATA_FLOAT:
		fimVar = self->_addrEprom + sizeof(float);
		break;
	case DATA_DOUBLE:
		fimVar = self->_addrEprom + sizeof(double);
 8001ad8:	b29b      	uxth	r3, r3
	default:
		return EEPROM_TIPO_DESCONHECIDO;
	}

	// Se a próxima varável começa no início de uma nova página, então essa variável cruzou a fronteira de uma página
	if (fimVar > inicioProximaPagina)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d814      	bhi.n	8001b08 <eeprom_AddVarOnArr+0x58>
		return EEPROM_QUEBRA_ENDERECO_OBJ;

	// Configuração do ponteiro parent
	self->parentEeprom = eeprom;
	// Adicionar a variável ao próximo slot livre
	eeprom->arrVar[eeprom->arrCount] = self;
 8001ade:	eb00 0384 	add.w	r3, r0, r4, lsl #2
	eeprom->arrCount++;
 8001ae2:	3401      	adds	r4, #1
	self->parentEeprom = eeprom;
 8001ae4:	62c8      	str	r0, [r1, #44]	; 0x2c
	eeprom->arrVar[eeprom->arrCount] = self;
 8001ae6:	60d9      	str	r1, [r3, #12]
	eeprom->arrCount++;
 8001ae8:	f880 4084 	strb.w	r4, [r0, #132]	; 0x84

	return EEPROM_SUCCESS;
 8001aec:	2000      	movs	r0, #0
}
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
		fimVar = self->_addrEprom + sizeof(uint16_t);
 8001af0:	3302      	adds	r3, #2
 8001af2:	e7f1      	b.n	8001ad8 <eeprom_AddVarOnArr+0x28>
		fimVar = self->_addrEprom + sizeof(float);
 8001af4:	3304      	adds	r3, #4
 8001af6:	e7ef      	b.n	8001ad8 <eeprom_AddVarOnArr+0x28>
		fimVar = self->_addrEprom + sizeof(double);
 8001af8:	3308      	adds	r3, #8
 8001afa:	e7ed      	b.n	8001ad8 <eeprom_AddVarOnArr+0x28>
		return EEPROM_LISTA_CHEIA;
 8001afc:	202c      	movs	r0, #44	; 0x2c
 8001afe:	e7f6      	b.n	8001aee <eeprom_AddVarOnArr+0x3e>
		return EEPROM_ERRO_ENDERECO_OBJ;
 8001b00:	2030      	movs	r0, #48	; 0x30
 8001b02:	e7f4      	b.n	8001aee <eeprom_AddVarOnArr+0x3e>
	switch (self->typeVar) {
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	e7f2      	b.n	8001aee <eeprom_AddVarOnArr+0x3e>
		return EEPROM_QUEBRA_ENDERECO_OBJ;
 8001b08:	2031      	movs	r0, #49	; 0x31
 8001b0a:	e7f0      	b.n	8001aee <eeprom_AddVarOnArr+0x3e>

08001b0c <eepromObjArr_update>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(self, errCode);
	}
}

ErrorCode 	eepromObjArr_update(eepromVarArr* obj) {
 8001b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	HAL_StatusTypeDef result;
	uint8_t tries = 0, MAX_TRIES = 5;
	uint8_t buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)

	LIBERA_EEPROM
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	; 0x80
ErrorCode 	eepromObjArr_update(eepromVarArr* obj) {
 8001b14:	b087      	sub	sp, #28
 8001b16:	4605      	mov	r5, r0
	LIBERA_EEPROM
 8001b18:	4864      	ldr	r0, [pc, #400]	; (8001cac <eepromObjArr_update+0x1a0>)
 8001b1a:	f003 ff29 	bl	8005970 <HAL_GPIO_WritePin>
 8001b1e:	2005      	movs	r0, #5
 8001b20:	f003 f9a6 	bl	8004e70 <HAL_Delay>
	uint8_t tries = 0, MAX_TRIES = 5;
 8001b24:	2400      	movs	r4, #0

	//verifica disponibilidade da eeprom
	while (tries++ < MAX_TRIES) {
		result = HAL_I2C_IsDeviceReady(obj->parentEeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001b26:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	2232      	movs	r2, #50	; 0x32
 8001b2e:	21a2      	movs	r1, #162	; 0xa2
 8001b30:	6840      	ldr	r0, [r0, #4]
 8001b32:	f004 fb95 	bl	8006260 <HAL_I2C_IsDeviceReady>
	while (tries++ < MAX_TRIES) {
 8001b36:	3401      	adds	r4, #1
		if (result == HAL_OK)	break;
 8001b38:	4606      	mov	r6, r0
	while (tries++ < MAX_TRIES) {
 8001b3a:	b2e4      	uxtb	r4, r4
		if (result == HAL_OK)	break;
 8001b3c:	b938      	cbnz	r0, 8001b4e <eepromObjArr_update+0x42>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
	}

	switch (obj->typeVar) {
 8001b3e:	792b      	ldrb	r3, [r5, #4]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d817      	bhi.n	8001b74 <eepromObjArr_update+0x68>
 8001b44:	e8df f003 	tbb	[pc, r3]
 8001b48:	72543607 	.word	0x72543607
 8001b4c:	8f          	.byte	0x8f
 8001b4d:	00          	.byte	0x00
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 8001b4e:	2c05      	cmp	r4, #5
 8001b50:	d1e9      	bne.n	8001b26 <eepromObjArr_update+0x1a>
 8001b52:	262d      	movs	r6, #45	; 0x2d
 8001b54:	e02a      	b.n	8001bac <eepromObjArr_update+0xa0>
	case DATA_8BITS:
		obj->value.intValue 	= *obj->ptr8;
		*((uint8_t*)&buffer) 	= *obj->ptr8;
		// limita as tentativas de escrita.
		while (tries++ < MAX_TRIES) {
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001b56:	27c8      	movs	r7, #200	; 0xc8
 8001b58:	f04f 0801 	mov.w	r8, #1
		obj->value.intValue 	= *obj->ptr8;
 8001b5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001b5e:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr8;
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	60aa      	str	r2, [r5, #8]
		*((uint8_t*)&buffer) 	= *obj->ptr8;
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f88d 3010 	strb.w	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	b2e4      	uxtb	r4, r4
 8001b70:	2c06      	cmp	r4, #6
 8001b72:	d10b      	bne.n	8001b8c <eepromObjArr_update+0x80>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
		}
		tries=0;
		break;
	}
	osDelay(40);
 8001b74:	2028      	movs	r0, #40	; 0x28
 8001b76:	f006 f9cf 	bl	8007f18 <osDelay>
	TRAVA_EEPROM
 8001b7a:	2005      	movs	r0, #5
 8001b7c:	f003 f978 	bl	8004e70 <HAL_Delay>
 8001b80:	2201      	movs	r2, #1
 8001b82:	2180      	movs	r1, #128	; 0x80
 8001b84:	4849      	ldr	r0, [pc, #292]	; (8001cac <eepromObjArr_update+0x1a0>)
 8001b86:	f003 fef3 	bl	8005970 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS;
 8001b8a:	e00f      	b.n	8001bac <eepromObjArr_update+0xa0>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8001b8c:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001b90:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b92:	f8cd 9000 	str.w	r9, [sp]
 8001b96:	2310      	movs	r3, #16
 8001b98:	21a2      	movs	r1, #162	; 0xa2
 8001b9a:	886a      	ldrh	r2, [r5, #2]
 8001b9c:	6840      	ldr	r0, [r0, #4]
 8001b9e:	f004 f991 	bl	8005ec4 <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	d0e6      	beq.n	8001b74 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001ba6:	2c05      	cmp	r4, #5
 8001ba8:	d1e0      	bne.n	8001b6c <eepromObjArr_update+0x60>
 8001baa:	262e      	movs	r6, #46	; 0x2e
}
 8001bac:	4630      	mov	r0, r6
 8001bae:	b007      	add	sp, #28
 8001bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001bb4:	27c8      	movs	r7, #200	; 0xc8
 8001bb6:	f04f 0802 	mov.w	r8, #2
		obj->value.intValue 	= *obj->ptr16;
 8001bba:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001bbc:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr16;
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	60ab      	str	r3, [r5, #8]
		*((uint16_t*)&buffer) 	= *obj->ptr16;
 8001bc4:	f8ad 3010 	strh.w	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001bc8:	3401      	adds	r4, #1
 8001bca:	b2e4      	uxtb	r4, r4
 8001bcc:	2c06      	cmp	r4, #6
 8001bce:	d0d1      	beq.n	8001b74 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8001bd0:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001bd4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001bd6:	f8cd 9000 	str.w	r9, [sp]
 8001bda:	2310      	movs	r3, #16
 8001bdc:	21a2      	movs	r1, #162	; 0xa2
 8001bde:	886a      	ldrh	r2, [r5, #2]
 8001be0:	6840      	ldr	r0, [r0, #4]
 8001be2:	f004 f96f 	bl	8005ec4 <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d0c4      	beq.n	8001b74 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001bea:	2c05      	cmp	r4, #5
 8001bec:	d1ec      	bne.n	8001bc8 <eepromObjArr_update+0xbc>
 8001bee:	e7dc      	b.n	8001baa <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001bf0:	27c8      	movs	r7, #200	; 0xc8
 8001bf2:	f04f 0804 	mov.w	r8, #4
		obj->value.intValue 	= *obj->ptr32;
 8001bf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001bf8:	f10d 0910 	add.w	r9, sp, #16
		obj->value.intValue 	= *obj->ptr32;
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	60aa      	str	r2, [r5, #8]
		*((uint32_t*)&buffer) 	= *obj->ptr32;
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	9304      	str	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001c04:	3401      	adds	r4, #1
 8001c06:	b2e4      	uxtb	r4, r4
 8001c08:	2c06      	cmp	r4, #6
 8001c0a:	d0b3      	beq.n	8001b74 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001c0c:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001c10:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c12:	f8cd 9000 	str.w	r9, [sp]
 8001c16:	2310      	movs	r3, #16
 8001c18:	21a2      	movs	r1, #162	; 0xa2
 8001c1a:	886a      	ldrh	r2, [r5, #2]
 8001c1c:	6840      	ldr	r0, [r0, #4]
 8001c1e:	f004 f951 	bl	8005ec4 <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d0a6      	beq.n	8001b74 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001c26:	2c05      	cmp	r4, #5
 8001c28:	d1ec      	bne.n	8001c04 <eepromObjArr_update+0xf8>
 8001c2a:	e7be      	b.n	8001baa <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001c2c:	27c8      	movs	r7, #200	; 0xc8
 8001c2e:	f04f 0804 	mov.w	r8, #4
		obj->value.floatValue 	= *obj->ptrFloat;
 8001c32:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001c34:	f10d 0910 	add.w	r9, sp, #16
		obj->value.floatValue 	= *obj->ptrFloat;
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	60ab      	str	r3, [r5, #8]
		*((float*)&buffer) 		= *obj->ptrFloat;
 8001c3c:	9304      	str	r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001c3e:	3401      	adds	r4, #1
 8001c40:	b2e4      	uxtb	r4, r4
 8001c42:	2c06      	cmp	r4, #6
 8001c44:	d096      	beq.n	8001b74 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8001c46:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001c4a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c4c:	f8cd 9000 	str.w	r9, [sp]
 8001c50:	2310      	movs	r3, #16
 8001c52:	21a2      	movs	r1, #162	; 0xa2
 8001c54:	886a      	ldrh	r2, [r5, #2]
 8001c56:	6840      	ldr	r0, [r0, #4]
 8001c58:	f004 f934 	bl	8005ec4 <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d089      	beq.n	8001b74 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001c60:	2c05      	cmp	r4, #5
 8001c62:	d1ec      	bne.n	8001c3e <eepromObjArr_update+0x132>
 8001c64:	e7a1      	b.n	8001baa <eepromObjArr_update+0x9e>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001c66:	27c8      	movs	r7, #200	; 0xc8
 8001c68:	f04f 0808 	mov.w	r8, #8
		obj->value.doubleValue 	= *obj->ptrDouble;
 8001c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001c6e:	f10d 0910 	add.w	r9, sp, #16
		obj->value.doubleValue 	= *obj->ptrDouble;
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	e9c5 2302 	strd	r2, r3, [r5, #8]
		*((double*)&buffer) 	= (double)obj->value.doubleValue;
 8001c7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
		while (tries++ < MAX_TRIES) {
 8001c7e:	3401      	adds	r4, #1
 8001c80:	b2e4      	uxtb	r4, r4
 8001c82:	2c06      	cmp	r4, #6
 8001c84:	f43f af76 	beq.w	8001b74 <eepromObjArr_update+0x68>
			result = HAL_I2C_Mem_Write(obj->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, obj->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 8001c88:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001c8c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001c8e:	f8cd 9000 	str.w	r9, [sp]
 8001c92:	2310      	movs	r3, #16
 8001c94:	21a2      	movs	r1, #162	; 0xa2
 8001c96:	886a      	ldrh	r2, [r5, #2]
 8001c98:	6840      	ldr	r0, [r0, #4]
 8001c9a:	f004 f913 	bl	8005ec4 <HAL_I2C_Mem_Write>
			if (result == HAL_OK)	break;
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	f43f af68 	beq.w	8001b74 <eepromObjArr_update+0x68>
			if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8001ca4:	2c05      	cmp	r4, #5
 8001ca6:	d1ea      	bne.n	8001c7e <eepromObjArr_update+0x172>
 8001ca8:	e77f      	b.n	8001baa <eepromObjArr_update+0x9e>
 8001caa:	bf00      	nop
 8001cac:	40010c00 	.word	0x40010c00

08001cb0 <containerEeprom_download>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(obj->parentEeprom, errCode);
	}
}

ErrorCode 	containerEeprom_download	(Eeprom *eeprom){
 8001cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cb4:	4605      	mov	r5, r0
	uint8_t tries = 0, MAX_TRIES = 5;
	uint8_t 		firstStart,	buffer[sizeof(double)] __attribute__((aligned(sizeof(double)))); // Buffer pode conter até 64 bits (para DATADOUBLE)
	eepromVarArr		*var;

	//verifica disponibilidade da eeprom
	while (tries++ < MAX_TRIES) {
 8001cb6:	2405      	movs	r4, #5
ErrorCode 	containerEeprom_download	(Eeprom *eeprom){
 8001cb8:	b089      	sub	sp, #36	; 0x24
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	2232      	movs	r2, #50	; 0x32
 8001cc0:	21a2      	movs	r1, #162	; 0xa2
 8001cc2:	6868      	ldr	r0, [r5, #4]
 8001cc4:	f004 facc 	bl	8006260 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)	break;
 8001cc8:	4606      	mov	r6, r0
 8001cca:	bb48      	cbnz	r0, 8001d20 <containerEeprom_download+0x70>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
	}
	tries=0;

	// verifica flag primeiro start.
	eeprom->read(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001ccc:	f10d 0317 	add.w	r3, sp, #23
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	214d      	movs	r1, #77	; 0x4d
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f8d5 40a0 	ldr.w	r4, [r5, #160]	; 0xa0
 8001cda:	47a0      	blx	r4
	if (firstStart != STD_REF_MEM) {
 8001cdc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001ce0:	2bb1      	cmp	r3, #177	; 0xb1
 8001ce2:	d00f      	beq.n	8001d04 <containerEeprom_download+0x54>
		// salvar na eeprom o primeiro start.
		eeprom->M_resetAllVar(eeprom, HARD_RESET);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001cec:	4798      	blx	r3
		firstStart = STD_REF_MEM;
 8001cee:	23b1      	movs	r3, #177	; 0xb1
		eeprom->write(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001cf0:	2201      	movs	r2, #1
		firstStart = STD_REF_MEM;
 8001cf2:	f88d 3017 	strb.w	r3, [sp, #23]
		eeprom->write(eeprom, addrREF_MEM_FLAG, sizeof(uint8_t), &firstStart);
 8001cf6:	214d      	movs	r1, #77	; 0x4d
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f8d5 409c 	ldr.w	r4, [r5, #156]	; 0x9c
 8001cfe:	f10d 0317 	add.w	r3, sp, #23
 8001d02:	47a0      	blx	r4

		// limpe o buffer,
		memset(&buffer, 0, sizeof(uint8_t[8]));

		// Realiza leitura da EEPROM.
		while (tries++ < MAX_TRIES) {
 8001d04:	f04f 0a00 	mov.w	sl, #0
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001d08:	f10d 0b18 	add.w	fp, sp, #24
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001d0c:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
 8001d10:	fa5f f38a 	uxtb.w	r3, sl
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d809      	bhi.n	8001d2c <containerEeprom_download+0x7c>
			break;
		}
	}
	// testa se valor referencia é diferente do valor da eeprom
	return EEPROM_SUCCESS;
}
 8001d18:	4630      	mov	r0, r6
 8001d1a:	b009      	add	sp, #36	; 0x24
 8001d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 8001d20:	3c01      	subs	r4, #1
 8001d22:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001d26:	d1c8      	bne.n	8001cba <containerEeprom_download+0xa>
 8001d28:	262d      	movs	r6, #45	; 0x2d
 8001d2a:	e7f5      	b.n	8001d18 <containerEeprom_download+0x68>
		var = eeprom->arrVar[i];
 8001d2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001d30:	68dc      	ldr	r4, [r3, #12]
		if (var->_addrEprom == 0) {
 8001d32:	8863      	ldrh	r3, [r4, #2]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	f000 8086 	beq.w	8001e46 <containerEeprom_download+0x196>
		switch (var->typeVar) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	7922      	ldrb	r2, [r4, #4]
		while (tries++ < MAX_TRIES) {
 8001d3e:	2705      	movs	r7, #5
 8001d40:	2a04      	cmp	r2, #4
		switch (var->typeVar) {
 8001d42:	bf88      	it	hi
 8001d44:	4698      	movhi	r8, r3
			result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT,buffer, dataSize, 200);
 8001d46:	f04f 09c8 	mov.w	r9, #200	; 0xc8
 8001d4a:	bf98      	it	ls
 8001d4c:	493f      	ldrls	r1, [pc, #252]	; (8001e4c <containerEeprom_download+0x19c>)
		memset(&buffer, 0, sizeof(uint8_t[8]));
 8001d4e:	e9cb 3300 	strd	r3, r3, [fp]
 8001d52:	bf98      	it	ls
 8001d54:	f811 8002 	ldrbls.w	r8, [r1, r2]
			result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT,buffer, dataSize, 200);
 8001d58:	fa1f f888 	uxth.w	r8, r8
 8001d5c:	8862      	ldrh	r2, [r4, #2]
 8001d5e:	2310      	movs	r3, #16
 8001d60:	21a3      	movs	r1, #163	; 0xa3
 8001d62:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001d66:	6868      	ldr	r0, [r5, #4]
 8001d68:	f8cd b000 	str.w	fp, [sp]
 8001d6c:	f004 f93a 	bl	8005fe4 <HAL_I2C_Mem_Read>
			if (result == HAL_OK)	break;
 8001d70:	b938      	cbnz	r0, 8001d82 <containerEeprom_download+0xd2>
		switch (var->typeVar) {
 8001d72:	7923      	ldrb	r3, [r4, #4]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d818      	bhi.n	8001daa <containerEeprom_download+0xfa>
 8001d78:	e8df f003 	tbb	[pc, r3]
 8001d7c:	37291a09 	.word	0x37291a09
 8001d80:	49          	.byte	0x49
 8001d81:	00          	.byte	0x00
			if (tries == MAX_TRIES)	return EEPROM_ERRO_LEITURA;
 8001d82:	3f01      	subs	r7, #1
 8001d84:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8001d88:	d1e8      	bne.n	8001d5c <containerEeprom_download+0xac>
 8001d8a:	262f      	movs	r6, #47	; 0x2f
 8001d8c:	e7c4      	b.n	8001d18 <containerEeprom_download+0x68>
			var->value.intValue = *((uint8_t*)&buffer);
 8001d8e:	f89d 3018 	ldrb.w	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001d92:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint8_t*)&buffer);
 8001d94:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d802      	bhi.n	8001da0 <containerEeprom_download+0xf0>
 8001d9a:	69a2      	ldr	r2, [r4, #24]
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d201      	bcs.n	8001da4 <containerEeprom_download+0xf4>
				var->value.intValue = var->defaultValue.intValue;
 8001da0:	6923      	ldr	r3, [r4, #16]
 8001da2:	60a3      	str	r3, [r4, #8]
			*var->ptr8 = var->value.intValue; 	// envio para ponteiro.
 8001da4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001da6:	68a2      	ldr	r2, [r4, #8]
 8001da8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 8001daa:	f10a 0a01 	add.w	sl, sl, #1
 8001dae:	e7ad      	b.n	8001d0c <containerEeprom_download+0x5c>
			var->value.intValue = *((uint16_t*)&buffer);
 8001db0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001db4:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint16_t*)&buffer);
 8001db6:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d802      	bhi.n	8001dc2 <containerEeprom_download+0x112>
 8001dbc:	69a2      	ldr	r2, [r4, #24]
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d201      	bcs.n	8001dc6 <containerEeprom_download+0x116>
				var->value.intValue = var->defaultValue.intValue;
 8001dc2:	6923      	ldr	r3, [r4, #16]
 8001dc4:	60a3      	str	r3, [r4, #8]
			*var->ptr16 = var->value.intValue; 	// envio para ponteiro
 8001dc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001dc8:	68a2      	ldr	r2, [r4, #8]
 8001dca:	801a      	strh	r2, [r3, #0]
			break;
 8001dcc:	e7ed      	b.n	8001daa <containerEeprom_download+0xfa>
			var->value.intValue = *((uint32_t*)&buffer);
 8001dce:	9b06      	ldr	r3, [sp, #24]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001dd0:	6a22      	ldr	r2, [r4, #32]
			var->value.intValue = *((uint32_t*)&buffer);
 8001dd2:	60a3      	str	r3, [r4, #8]
			if (var->value.intValue > var->maxValue.intValue || var->value.intValue < var->minValue.intValue) {
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d802      	bhi.n	8001dde <containerEeprom_download+0x12e>
 8001dd8:	69a2      	ldr	r2, [r4, #24]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d201      	bcs.n	8001de2 <containerEeprom_download+0x132>
				var->value.intValue = var->defaultValue.intValue;
 8001dde:	6923      	ldr	r3, [r4, #16]
 8001de0:	60a3      	str	r3, [r4, #8]
			*var->ptr32 = var->value.intValue;
 8001de2:	68a2      	ldr	r2, [r4, #8]
 8001de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001de6:	601a      	str	r2, [r3, #0]
			break;
 8001de8:	e7df      	b.n	8001daa <containerEeprom_download+0xfa>
			var->value.floatValue = *((float*)&buffer);
 8001dea:	9f06      	ldr	r7, [sp, #24]
			if (var->value.floatValue > var->maxValue.floatValue || var->value.floatValue < var->minValue.floatValue) {
 8001dec:	6a21      	ldr	r1, [r4, #32]
 8001dee:	4638      	mov	r0, r7
			var->value.floatValue = *((float*)&buffer);
 8001df0:	60a7      	str	r7, [r4, #8]
			if (var->value.floatValue > var->maxValue.floatValue || var->value.floatValue < var->minValue.floatValue) {
 8001df2:	f7ff f945 	bl	8001080 <__aeabi_fcmpgt>
 8001df6:	b920      	cbnz	r0, 8001e02 <containerEeprom_download+0x152>
 8001df8:	4638      	mov	r0, r7
 8001dfa:	69a1      	ldr	r1, [r4, #24]
 8001dfc:	f7ff f922 	bl	8001044 <__aeabi_fcmplt>
 8001e00:	b108      	cbz	r0, 8001e06 <containerEeprom_download+0x156>
				var->value.floatValue = var->defaultValue.floatValue;
 8001e02:	6923      	ldr	r3, [r4, #16]
 8001e04:	60a3      	str	r3, [r4, #8]
			*var->ptrFloat = var->value.floatValue;
 8001e06:	68a2      	ldr	r2, [r4, #8]
 8001e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e0a:	601a      	str	r2, [r3, #0]
			break;
 8001e0c:	e7cd      	b.n	8001daa <containerEeprom_download+0xfa>
			var->value.doubleValue = *((double*)&buffer);
 8001e0e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
			if (var->value.doubleValue > var->maxValue.doubleValue || var->value.doubleValue < var->minValue.doubleValue) {
 8001e12:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8001e16:	4640      	mov	r0, r8
 8001e18:	4649      	mov	r1, r9
			var->value.doubleValue = *((double*)&buffer);
 8001e1a:	e9c4 8902 	strd	r8, r9, [r4, #8]
			if (var->value.doubleValue > var->maxValue.doubleValue || var->value.doubleValue < var->minValue.doubleValue) {
 8001e1e:	f7fe fdeb 	bl	80009f8 <__aeabi_dcmpgt>
 8001e22:	b930      	cbnz	r0, 8001e32 <containerEeprom_download+0x182>
 8001e24:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8001e28:	4640      	mov	r0, r8
 8001e2a:	4649      	mov	r1, r9
 8001e2c:	f7fe fdc6 	bl	80009bc <__aeabi_dcmplt>
 8001e30:	b118      	cbz	r0, 8001e3a <containerEeprom_download+0x18a>
				var->value.doubleValue = var->defaultValue.doubleValue;
 8001e32:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001e36:	e9c4 2302 	strd	r2, r3, [r4, #8]
			*var->ptrDouble = var->value.doubleValue;
 8001e3a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8001e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001e40:	e9c3 0100 	strd	r0, r1, [r3]
			break;
 8001e44:	e7b1      	b.n	8001daa <containerEeprom_download+0xfa>
			return EEPROM_ERRO_ENDERECO_OBJ;
 8001e46:	2630      	movs	r6, #48	; 0x30
 8001e48:	e766      	b.n	8001d18 <containerEeprom_download+0x68>
 8001e4a:	bf00      	nop
 8001e4c:	0800b89a 	.word	0x0800b89a

08001e50 <eepromAddr_write>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(eeprom, errCode);
	}
}

ErrorCode eepromAddr_write(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	4688      	mov	r8, r1
 8001e56:	4691      	mov	r9, r2
 8001e58:	461f      	mov	r7, r3
	if (eeprom == NULL || data == NULL) {
 8001e5a:	4606      	mov	r6, r0
ErrorCode eepromAddr_write(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 8001e5c:	b085      	sub	sp, #20
	if (eeprom == NULL || data == NULL) {
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d046      	beq.n	8001ef0 <eepromAddr_write+0xa0>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d044      	beq.n	8001ef0 <eepromAddr_write+0xa0>
	}

	HAL_StatusTypeDef result;
	uint8_t tries = 0,MAX_TRIES = 5;;

	LIBERA_EEPROM
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	4823      	ldr	r0, [pc, #140]	; (8001ef8 <eepromAddr_write+0xa8>)
 8001e6c:	f003 fd80 	bl	8005970 <HAL_GPIO_WritePin>
 8001e70:	2005      	movs	r0, #5
 8001e72:	f002 fffd 	bl	8004e70 <HAL_Delay>
 8001e76:	2505      	movs	r5, #5

	// Verifica se a EEPROM está pronta para operações de escrita
	while (tries < MAX_TRIES) {
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_WRITE_ADDR, 1, HAL_MAX_DELAY);
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	21a2      	movs	r1, #162	; 0xa2
 8001e80:	6870      	ldr	r0, [r6, #4]
 8001e82:	f004 f9ed 	bl	8006260 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK) {
 8001e86:	4604      	mov	r4, r0
 8001e88:	b168      	cbz	r0, 8001ea6 <eepromAddr_write+0x56>
	while (tries < MAX_TRIES) {
 8001e8a:	3d01      	subs	r5, #1
 8001e8c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001e90:	d1f2      	bne.n	8001e78 <eepromAddr_write+0x28>
		}
		tries++;
	}

	if (tries >= MAX_TRIES) {
		TRAVA_EEPROM
 8001e92:	2005      	movs	r0, #5
 8001e94:	f002 ffec 	bl	8004e70 <HAL_Delay>
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	4816      	ldr	r0, [pc, #88]	; (8001ef8 <eepromAddr_write+0xa8>)
 8001e9e:	f003 fd67 	bl	8005970 <HAL_GPIO_WritePin>
		return EEPROM_I2C_ERROR; // EEPROM não está pronta após várias tentativas
 8001ea2:	242d      	movs	r4, #45	; 0x2d
 8001ea4:	e020      	b.n	8001ee8 <eepromAddr_write+0x98>
 8001ea6:	4605      	mov	r5, r0
	}

	// Escrita dos dados na EEPROM utilizando a função HAL_I2C_Mem_Write
	tries = 0; // Reinicializa o contador de tentativas
	while (tries < MAX_TRIES) {
		result = HAL_I2C_Mem_Write(eeprom->i2cHandle, EEPROM_WRITE_ADDR, addr, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
 8001ea8:	f04f 3bff 	mov.w	fp, #4294967295
 8001eac:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8001eb0:	9700      	str	r7, [sp, #0]
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	21a2      	movs	r1, #162	; 0xa2
 8001eb8:	6870      	ldr	r0, [r6, #4]
 8001eba:	fa5f fa85 	uxtb.w	sl, r5
 8001ebe:	f004 f801 	bl	8005ec4 <HAL_I2C_Mem_Write>
		if (result == HAL_OK) {
 8001ec2:	b118      	cbz	r0, 8001ecc <eepromAddr_write+0x7c>
	while (tries < MAX_TRIES) {
 8001ec4:	3501      	adds	r5, #1
 8001ec6:	2d05      	cmp	r5, #5
 8001ec8:	d1f0      	bne.n	8001eac <eepromAddr_write+0x5c>
 8001eca:	46aa      	mov	sl, r5
			break; // Dados gravados com sucesso
		}
		tries++;
	}

	TRAVA_EEPROM
 8001ecc:	2005      	movs	r0, #5
 8001ece:	f002 ffcf 	bl	8004e70 <HAL_Delay>
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	4808      	ldr	r0, [pc, #32]	; (8001ef8 <eepromAddr_write+0xa8>)
 8001ed8:	f003 fd4a 	bl	8005970 <HAL_GPIO_WritePin>
	if (tries >= MAX_TRIES) {
 8001edc:	f1ba 0f05 	cmp.w	sl, #5
 8001ee0:	d008      	beq.n	8001ef4 <eepromAddr_write+0xa4>
		return EEPROM_ERRO_ESCRITA; // Falha ao escrever após várias tentativas
	}

	osDelay(5); // Pequeno atraso para garantir que a escrita tenha tempo para se estabelecer
 8001ee2:	2005      	movs	r0, #5
 8001ee4:	f006 f818 	bl	8007f18 <osDelay>
	return EEPROM_SUCCESS; // Dados gravados com sucesso
}
 8001ee8:	4620      	mov	r0, r4
 8001eea:	b005      	add	sp, #20
 8001eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return EEPROM_OBJETO_NULO;
 8001ef0:	2429      	movs	r4, #41	; 0x29
 8001ef2:	e7f9      	b.n	8001ee8 <eepromAddr_write+0x98>
		return EEPROM_ERRO_ESCRITA; // Falha ao escrever após várias tentativas
 8001ef4:	242e      	movs	r4, #46	; 0x2e
 8001ef6:	e7f7      	b.n	8001ee8 <eepromAddr_write+0x98>
 8001ef8:	40010c00 	.word	0x40010c00

08001efc <eepromAddr_read>:
	if (errCode != EEPROM_SUCCESS) {
		eepromError_Handler(eeprom, errCode);
	}
}

ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 8001efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f00:	4606      	mov	r6, r0
 8001f02:	460f      	mov	r7, r1

	HAL_StatusTypeDef result;
	uint8_t tries = 0;
	const uint8_t MAX_TRIES = 5;

	LIBERA_EEPROM
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <eepromAddr_read+0x84>)
 8001f06:	2180      	movs	r1, #128	; 0x80
ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 8001f08:	4691      	mov	r9, r2
	LIBERA_EEPROM
 8001f0a:	2200      	movs	r2, #0
ErrorCode 	eepromAddr_read(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 8001f0c:	4698      	mov	r8, r3
	LIBERA_EEPROM
 8001f0e:	f003 fd2f 	bl	8005970 <HAL_GPIO_WritePin>
 8001f12:	2005      	movs	r0, #5
 8001f14:	f002 ffac 	bl	8004e70 <HAL_Delay>

	// verifica disponibilidade da eeprom.
	while (tries++ < MAX_TRIES) {
 8001f18:	2405      	movs	r4, #5
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle, EEPROM_READ_ADDR, 50, HAL_MAX_DELAY);
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	2232      	movs	r2, #50	; 0x32
 8001f20:	21a3      	movs	r1, #163	; 0xa3
 8001f22:	6870      	ldr	r0, [r6, #4]
 8001f24:	f004 f99c 	bl	8006260 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)    break;
 8001f28:	b9e8      	cbnz	r0, 8001f66 <eepromAddr_read+0x6a>
 8001f2a:	2505      	movs	r5, #5
	}

	// limita as tentativas de leitura.
	tries = 0;
	while (tries++ < MAX_TRIES) {
		result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, _addrEprom, I2C_MEMADD_SIZE_16BIT, value, size, 200);
 8001f2c:	f04f 0ac8 	mov.w	sl, #200	; 0xc8
 8001f30:	2310      	movs	r3, #16
 8001f32:	463a      	mov	r2, r7
 8001f34:	21a3      	movs	r1, #163	; 0xa3
 8001f36:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8001f3a:	6870      	ldr	r0, [r6, #4]
 8001f3c:	f8cd 8000 	str.w	r8, [sp]
 8001f40:	f004 f850 	bl	8005fe4 <HAL_I2C_Mem_Read>
		if (result == HAL_OK)    break;
 8001f44:	4604      	mov	r4, r0
 8001f46:	b9a0      	cbnz	r0, 8001f72 <eepromAddr_read+0x76>
		if (tries == MAX_TRIES)  return EEPROM_ERRO_LEITURA;
	}

	osDelay(40);
 8001f48:	2028      	movs	r0, #40	; 0x28
 8001f4a:	f005 ffe5 	bl	8007f18 <osDelay>
	TRAVA_EEPROM
 8001f4e:	2005      	movs	r0, #5
 8001f50:	f002 ff8e 	bl	8004e70 <HAL_Delay>
 8001f54:	2201      	movs	r2, #1
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <eepromAddr_read+0x84>)
 8001f5a:	f003 fd09 	bl	8005970 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS;
}
 8001f5e:	4620      	mov	r0, r4
 8001f60:	b004      	add	sp, #16
 8001f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (tries == MAX_TRIES)  return EEPROM_I2C_ERROR;
 8001f66:	3c01      	subs	r4, #1
 8001f68:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001f6c:	d1d5      	bne.n	8001f1a <eepromAddr_read+0x1e>
 8001f6e:	242d      	movs	r4, #45	; 0x2d
 8001f70:	e7f5      	b.n	8001f5e <eepromAddr_read+0x62>
		if (tries == MAX_TRIES)  return EEPROM_ERRO_LEITURA;
 8001f72:	3d01      	subs	r5, #1
 8001f74:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001f78:	d1da      	bne.n	8001f30 <eepromAddr_read+0x34>
 8001f7a:	242f      	movs	r4, #47	; 0x2f
 8001f7c:	e7ef      	b.n	8001f5e <eepromAddr_read+0x62>
 8001f7e:	bf00      	nop
 8001f80:	40010c00 	.word	0x40010c00

08001f84 <ErrorBuffer_init>:
		ErrorBuffer_add(eeprom, erro);
		NVIC_SystemReset();
	}
}
void ErrorBuffer_init(ErrorBuffer* ebuffer) {
	memset(ebuffer->errors, 0, sizeof(ebuffer->errors)); // Preenche com 0xFFFF que é valor padrão para EEPROM limpa
 8001f84:	2300      	movs	r3, #0
 8001f86:	6003      	str	r3, [r0, #0]
 8001f88:	6043      	str	r3, [r0, #4]
 8001f8a:	8103      	strh	r3, [r0, #8]
	ebuffer->errorCount = 0;
 8001f8c:	7283      	strb	r3, [r0, #10]
}
 8001f8e:	4770      	bx	lr

08001f90 <ErrorBuffer_add>:

ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 8001f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
	// Verifica se o errorCode já está no buffer
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 8001f92:	2200      	movs	r2, #0
ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 8001f94:	4604      	mov	r4, r0
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 8001f96:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
ErrorCode ErrorBuffer_add(Eeprom* eeprom, uint8_t errorCode) {
 8001f9a:	f88d 1007 	strb.w	r1, [sp, #7]
 8001f9e:	3084      	adds	r0, #132	; 0x84
	for (uint8_t i = 0; i < eeprom->errorBuffer.errorCount; i++) {
 8001fa0:	b2d5      	uxtb	r5, r2
 8001fa2:	42ab      	cmp	r3, r5
 8001fa4:	d817      	bhi.n	8001fd6 <ErrorBuffer_add+0x46>
			return EEPROM_ERROR_EXISTS; // Erro já foi adicionado anteriormente
		}
	}

	// Adiciona o erro se houver espaço no buffer
	if (eeprom->errorBuffer.errorCount < MAX_ERRORS) {
 8001fa6:	2b0a      	cmp	r3, #10
 8001fa8:	d01c      	beq.n	8001fe4 <ErrorBuffer_add+0x54>
		eeprom->errorBuffer.errors[eeprom->errorBuffer.errorCount] = errorCode;
 8001faa:	18e2      	adds	r2, r4, r3
 8001fac:	f882 1085 	strb.w	r1, [r2, #133]	; 0x85
		eeprom->write(eeprom, addrINIT_ERR + eeprom->errorBuffer.errorCount * sizeof(uint16_t), sizeof(uint8_t), &errorCode); // Grava novo erro na EEPROM
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8001fb6:	b2c9      	uxtb	r1, r1
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f10d 0307 	add.w	r3, sp, #7
 8001fbe:	f8d4 509c 	ldr.w	r5, [r4, #156]	; 0x9c
 8001fc2:	4091      	lsls	r1, r2
 8001fc4:	47a8      	blx	r5
		eeprom->errorBuffer.errorCount++;
		return EEPROM_SUCCESS;
 8001fc6:	2000      	movs	r0, #0
		eeprom->errorBuffer.errorCount++;
 8001fc8:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
	}

	return EEPROM_ERROR_FULL; // Buffer de erros cheio
}
 8001fd2:	b003      	add	sp, #12
 8001fd4:	bd30      	pop	{r4, r5, pc}
		if (eeprom->errorBuffer.errors[i] == errorCode) {
 8001fd6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8001fda:	3201      	adds	r2, #1
 8001fdc:	428d      	cmp	r5, r1
 8001fde:	d1df      	bne.n	8001fa0 <ErrorBuffer_add+0x10>
			return EEPROM_ERROR_EXISTS; // Erro já foi adicionado anteriormente
 8001fe0:	2035      	movs	r0, #53	; 0x35
 8001fe2:	e7f6      	b.n	8001fd2 <ErrorBuffer_add+0x42>
	return EEPROM_ERROR_FULL; // Buffer de erros cheio
 8001fe4:	2034      	movs	r0, #52	; 0x34
 8001fe6:	e7f4      	b.n	8001fd2 <ErrorBuffer_add+0x42>

08001fe8 <eepromError_Handler>:
void 			eepromError_Handler(Eeprom *eeprom, ErrorCode erro){
 8001fe8:	b508      	push	{r3, lr}
		ErrorBuffer_add(eeprom, erro);
 8001fea:	f7ff ffd1 	bl	8001f90 <ErrorBuffer_add>
 8001fee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ff2:	4905      	ldr	r1, [pc, #20]	; (8002008 <eepromError_Handler+0x20>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <eepromError_Handler+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ff6:	68ca      	ldr	r2, [r1, #12]
 8001ff8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60cb      	str	r3, [r1, #12]
 8002000:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002004:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002006:	e7fd      	b.n	8002004 <eepromError_Handler+0x1c>
 8002008:	e000ed00 	.word	0xe000ed00
 800200c:	05fa0004 	.word	0x05fa0004

08002010 <init_objArrEeprom>:
void 				init_objArrEeprom(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar) {
 8002010:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
 8002012:	9d06      	ldr	r5, [sp, #24]
void 				init_objArrEeprom(eepromVarArr* 	self, TypeRestauracao typeReset, uint16_t addr, DataType type, void *_addrVar) {
 8002014:	4604      	mov	r4, r0
	ErrorCode errCode = objArrEeprom_init(self, typeReset, addr, type,_addrVar);
 8002016:	9500      	str	r5, [sp, #0]
 8002018:	f7ff fd0e 	bl	8001a38 <objArrEeprom_init>
	if (errCode != EEPROM_SUCCESS)
 800201c:	4601      	mov	r1, r0
 800201e:	b110      	cbz	r0, 8002026 <init_objArrEeprom+0x16>
		eepromError_Handler(self->parentEeprom, errCode);
 8002020:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002022:	f7ff ffe1 	bl	8001fe8 <eepromError_Handler>
}
 8002026:	b003      	add	sp, #12
 8002028:	bd30      	pop	{r4, r5, pc}

0800202a <addVarOnContainerEeprom>:
void 				addVarOnContainerEeprom(Eeprom* self, eepromVarArr* var){
 800202a:	b510      	push	{r4, lr}
 800202c:	4604      	mov	r4, r0
	ErrorCode errCode = eeprom_AddVarOnArr(self, var);
 800202e:	f7ff fd3f 	bl	8001ab0 <eeprom_AddVarOnArr>
	if (errCode != EEPROM_SUCCESS) {
 8002032:	4601      	mov	r1, r0
 8002034:	b110      	cbz	r0, 800203c <addVarOnContainerEeprom+0x12>
		eepromError_Handler(self, errCode);
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff ffd6 	bl	8001fe8 <eepromError_Handler>
}
 800203c:	bd10      	pop	{r4, pc}

0800203e <update_eepromObjArr>:
void 				update_eepromObjArr(eepromVarArr* obj) {
 800203e:	b510      	push	{r4, lr}
 8002040:	4604      	mov	r4, r0
	ErrorCode errCode = eepromObjArr_update(obj);
 8002042:	f7ff fd63 	bl	8001b0c <eepromObjArr_update>
	if (errCode != EEPROM_SUCCESS) {
 8002046:	4601      	mov	r1, r0
 8002048:	b110      	cbz	r0, 8002050 <update_eepromObjArr+0x12>
		eepromError_Handler(obj->parentEeprom, errCode);
 800204a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800204c:	f7ff ffcc 	bl	8001fe8 <eepromError_Handler>
}
 8002050:	bd10      	pop	{r4, pc}

08002052 <download_containerEeprom>:
void 				download_containerEeprom	(Eeprom *eeprom){
 8002052:	b510      	push	{r4, lr}
 8002054:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_download(eeprom);
 8002056:	f7ff fe2b 	bl	8001cb0 <containerEeprom_download>
	if (errCode != EEPROM_SUCCESS) {
 800205a:	4601      	mov	r1, r0
 800205c:	b110      	cbz	r0, 8002064 <download_containerEeprom+0x12>
		eepromError_Handler(eeprom, errCode);
 800205e:	4620      	mov	r0, r4
 8002060:	f7ff ffc2 	bl	8001fe8 <eepromError_Handler>
}
 8002064:	bd10      	pop	{r4, pc}

08002066 <write_eepromAddr>:
void 				write_eepromAddr(Eeprom *eeprom, uint16_t addr, uint16_t size, uint8_t *data) {
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
	ErrorCode errCode = eepromAddr_write(eeprom,addr,size,data);
 800206a:	f7ff fef1 	bl	8001e50 <eepromAddr_write>
	if (errCode != EEPROM_SUCCESS) {
 800206e:	4601      	mov	r1, r0
 8002070:	b110      	cbz	r0, 8002078 <write_eepromAddr+0x12>
		eepromError_Handler(eeprom, errCode);
 8002072:	4620      	mov	r0, r4
 8002074:	f7ff ffb8 	bl	8001fe8 <eepromError_Handler>
}
 8002078:	bd10      	pop	{r4, pc}

0800207a <read_eepromAddr>:
void 				read_eepromAddr(Eeprom *eeprom, uint16_t _addrEprom, uint16_t size, uint8_t *value) {
 800207a:	b510      	push	{r4, lr}
 800207c:	4604      	mov	r4, r0
	ErrorCode errCode = eepromAddr_read(eeprom, _addrEprom,size, value);
 800207e:	f7ff ff3d 	bl	8001efc <eepromAddr_read>
	if (errCode != EEPROM_SUCCESS) {
 8002082:	4601      	mov	r1, r0
 8002084:	b110      	cbz	r0, 800208c <read_eepromAddr+0x12>
		eepromError_Handler(eeprom, errCode);
 8002086:	4620      	mov	r0, r4
 8002088:	f7ff ffae 	bl	8001fe8 <eepromError_Handler>
}
 800208c:	bd10      	pop	{r4, pc}

0800208e <ErrorBuffer_read>:
ErrorCode ErrorBuffer_read(Eeprom *eeprom) {
 800208e:	b570      	push	{r4, r5, r6, lr}
	if (eeprom == NULL ) {
 8002090:	4604      	mov	r4, r0
ErrorCode ErrorBuffer_read(Eeprom *eeprom) {
 8002092:	b088      	sub	sp, #32
	if (eeprom == NULL ) {
 8002094:	b1f8      	cbz	r0, 80020d6 <ErrorBuffer_read+0x48>
	HAL_StatusTypeDef result;
	uint8_t buffer[MAX_ERRORS];  // Buffer para ler os erros da EEPROM (2 bytes por erro)
	int i;

	// Lê os erros da EEPROM
	result = HAL_I2C_Mem_Read(eeprom->i2cHandle, EEPROM_READ_ADDR, addrINIT_ERR,I2C_MEMADD_SIZE_16BIT, buffer, MAX_ERRORS, HAL_MAX_DELAY);
 8002096:	230a      	movs	r3, #10
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80020a0:	ad05      	add	r5, sp, #20
 80020a2:	9500      	str	r5, [sp, #0]
 80020a4:	2310      	movs	r3, #16
 80020a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020aa:	21a3      	movs	r1, #163	; 0xa3
 80020ac:	6840      	ldr	r0, [r0, #4]
 80020ae:	f003 ff99 	bl	8005fe4 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80020b2:	b990      	cbnz	r0, 80020da <ErrorBuffer_read+0x4c>
		return EEPROM_ERRO_LEITURA;
	}

	// Armazena os erros lidos no ErrorBuffer
	for (i = 0; i < MAX_ERRORS; i++) {
 80020b4:	4602      	mov	r2, r0
		if (buffer[i] != 0) {
 80020b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80020ba:	b139      	cbz	r1, 80020cc <ErrorBuffer_read+0x3e>
			eeprom->errorBuffer.errors[eeprom->errorBuffer.errorCount++] = buffer[i];
 80020bc:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 80020c0:	1c5e      	adds	r6, r3, #1
 80020c2:	4423      	add	r3, r4
 80020c4:	f884 608f 	strb.w	r6, [r4, #143]	; 0x8f
 80020c8:	f883 1085 	strb.w	r1, [r3, #133]	; 0x85
	for (i = 0; i < MAX_ERRORS; i++) {
 80020cc:	3201      	adds	r2, #1
 80020ce:	2a0a      	cmp	r2, #10
 80020d0:	d1f1      	bne.n	80020b6 <ErrorBuffer_read+0x28>
		}
	}

	return EEPROM_SUCCESS;
}
 80020d2:	b008      	add	sp, #32
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
		return EEPROM_OBJETO_NULO;
 80020d6:	2029      	movs	r0, #41	; 0x29
 80020d8:	e7fb      	b.n	80020d2 <ErrorBuffer_read+0x44>
		return EEPROM_ERRO_LEITURA;
 80020da:	202f      	movs	r0, #47	; 0x2f
 80020dc:	e7f9      	b.n	80020d2 <ErrorBuffer_read+0x44>
	...

080020e0 <containerEeprom_init>:
ErrorCode 	containerEeprom_init(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila){
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	460e      	mov	r6, r1
 80020e4:	4615      	mov	r5, r2
	if (self == NULL || i2c == NULL || fila == NULL)
 80020e6:	4604      	mov	r4, r0
 80020e8:	b1f8      	cbz	r0, 800212a <containerEeprom_init+0x4a>
 80020ea:	b1f1      	cbz	r1, 800212a <containerEeprom_init+0x4a>
 80020ec:	b1ea      	cbz	r2, 800212a <containerEeprom_init+0x4a>
	memset(self, 0, sizeof(*self));
 80020ee:	22a4      	movs	r2, #164	; 0xa4
 80020f0:	2100      	movs	r1, #0
 80020f2:	f008 faf9 	bl	800a6e8 <memset>
	ErrorBuffer_init(&self->errorBuffer);
 80020f6:	f104 0085 	add.w	r0, r4, #133	; 0x85
	self->filaComandos 			= fila; // fila de salvamento.
 80020fa:	e9c4 6501 	strd	r6, r5, [r4, #4]
	ErrorBuffer_init(&self->errorBuffer);
 80020fe:	f7ff ff41 	bl	8001f84 <ErrorBuffer_init>
	ErrorBuffer_read(self);
 8002102:	4620      	mov	r0, r4
 8002104:	f7ff ffc3 	bl	800208e <ErrorBuffer_read>
	self->read = read_eepromAddr;
 8002108:	2000      	movs	r0, #0
	self->M_AddOnArr = addVarOnContainerEeprom;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <containerEeprom_init+0x50>)
 800210c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	self->M_downloadAllVar = download_containerEeprom;
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <containerEeprom_init+0x54>)
 8002112:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	self->M_resetAllVar = reset_containerEeprom;
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <containerEeprom_init+0x58>)
 8002118:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	self->write = write_eepromAddr;
 800211c:	4b07      	ldr	r3, [pc, #28]	; (800213c <containerEeprom_init+0x5c>)
 800211e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	self->read = read_eepromAddr;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <containerEeprom_init+0x60>)
 8002124:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
 8002128:	bd70      	pop	{r4, r5, r6, pc}
		return EEPROM_OBJETO_NULO;
 800212a:	2029      	movs	r0, #41	; 0x29
 800212c:	e7fc      	b.n	8002128 <containerEeprom_init+0x48>
 800212e:	bf00      	nop
 8002130:	0800202b 	.word	0x0800202b
 8002134:	08002053 	.word	0x08002053
 8002138:	08002395 	.word	0x08002395
 800213c:	08002067 	.word	0x08002067
 8002140:	0800207b 	.word	0x0800207b

08002144 <init_containerEeprom>:
void 				init_containerEeprom(Eeprom *self, I2C_HandleTypeDef *i2c, osMessageQId *fila) {
 8002144:	b510      	push	{r4, lr}
 8002146:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_init(self, i2c, fila);
 8002148:	f7ff ffca 	bl	80020e0 <containerEeprom_init>
	if (errCode != EEPROM_SUCCESS) {
 800214c:	4601      	mov	r1, r0
 800214e:	b110      	cbz	r0, 8002156 <init_containerEeprom+0x12>
		eepromError_Handler(self, errCode);
 8002150:	4620      	mov	r0, r4
 8002152:	f7ff ff49 	bl	8001fe8 <eepromError_Handler>
}
 8002156:	bd10      	pop	{r4, pc}

08002158 <ErrorBuffer_clear>:
void ErrorBuffer_clear(Eeprom* eeprom) {
 8002158:	b570      	push	{r4, r5, r6, lr}
	memset(eeprom->errorBuffer.errors, 0, sizeof(eeprom->errorBuffer.errors)); // Zera o buffer de erro
 800215a:	2500      	movs	r5, #0
void ErrorBuffer_clear(Eeprom* eeprom) {
 800215c:	4604      	mov	r4, r0
	memset(eeprom->errorBuffer.errors, 0, sizeof(eeprom->errorBuffer.errors)); // Zera o buffer de erro
 800215e:	f100 0385 	add.w	r3, r0, #133	; 0x85
 8002162:	f8c0 5085 	str.w	r5, [r0, #133]	; 0x85
 8002166:	f8c0 5089 	str.w	r5, [r0, #137]	; 0x89
 800216a:	811d      	strh	r5, [r3, #8]
	eeprom->write(eeprom, addrINIT_ERR, sizeof(eeprom->errorBuffer.errors), eeprom->errorBuffer.errors); // Zera o registro na EEPROM
 800216c:	220a      	movs	r2, #10
 800216e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002172:	f8d0 609c 	ldr.w	r6, [r0, #156]	; 0x9c
 8002176:	47b0      	blx	r6
	eeprom->errorBuffer.errorCount = 0;
 8002178:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
}
 800217c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002180 <containerEeprom_reset>:
ErrorCode 	containerEeprom_reset(Eeprom *eeprom, TypeRestauracao resetType) {
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	b089      	sub	sp, #36	; 0x24
	if (!eeprom) {
 8002186:	4606      	mov	r6, r0
ErrorCode 	containerEeprom_reset(Eeprom *eeprom, TypeRestauracao resetType) {
 8002188:	9105      	str	r1, [sp, #20]
	if (!eeprom) {
 800218a:	2800      	cmp	r0, #0
 800218c:	f000 80fe 	beq.w	800238c <containerEeprom_reset+0x20c>
	LIBERA_EEPROM
 8002190:	2200      	movs	r2, #0
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	487e      	ldr	r0, [pc, #504]	; (8002390 <containerEeprom_reset+0x210>)
 8002196:	f003 fbeb 	bl	8005970 <HAL_GPIO_WritePin>
 800219a:	2005      	movs	r0, #5
 800219c:	f002 fe68 	bl	8004e70 <HAL_Delay>
 80021a0:	2405      	movs	r4, #5
		result = HAL_I2C_IsDeviceReady(eeprom->i2cHandle,EEPROM_WRITE_ADDR, 50, HAL_MAX_DELAY);
 80021a2:	f04f 33ff 	mov.w	r3, #4294967295
 80021a6:	2232      	movs	r2, #50	; 0x32
 80021a8:	21a2      	movs	r1, #162	; 0xa2
 80021aa:	6870      	ldr	r0, [r6, #4]
 80021ac:	f004 f858 	bl	8006260 <HAL_I2C_IsDeviceReady>
		if (result == HAL_OK)	break;
 80021b0:	4605      	mov	r5, r0
 80021b2:	b910      	cbnz	r0, 80021ba <containerEeprom_reset+0x3a>
 80021b4:	4682      	mov	sl, r0
		memset(&buffer, 0, sizeof(uint8_t[8]));
 80021b6:	af06      	add	r7, sp, #24
 80021b8:	e015      	b.n	80021e6 <containerEeprom_reset+0x66>
		if (tries == MAX_TRIES)	return EEPROM_I2C_ERROR;
 80021ba:	3c01      	subs	r4, #1
 80021bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80021c0:	d1ef      	bne.n	80021a2 <containerEeprom_reset+0x22>
 80021c2:	252d      	movs	r5, #45	; 0x2d
 80021c4:	e04a      	b.n	800225c <containerEeprom_reset+0xdc>
		var = eeprom->arrVar[i];
 80021c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80021ca:	68dc      	ldr	r4, [r3, #12]
		memset(&buffer, 0, sizeof(uint8_t[8]));
 80021cc:	2300      	movs	r3, #0
 80021ce:	e9c7 3300 	strd	r3, r3, [r7]
		if (resetType == HARD_RESET || var->typeReset == SOFT_RESET) {
 80021d2:	9b05      	ldr	r3, [sp, #20]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d018      	beq.n	800220a <containerEeprom_reset+0x8a>
 80021d8:	7823      	ldrb	r3, [r4, #0]
 80021da:	b1b3      	cbz	r3, 800220a <containerEeprom_reset+0x8a>
		osDelay(20);
 80021dc:	2014      	movs	r0, #20
 80021de:	f005 fe9b 	bl	8007f18 <osDelay>
	for (uint8_t i = 0; i < eeprom->arrCount; i++) {
 80021e2:	f10a 0a01 	add.w	sl, sl, #1
 80021e6:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 80021ea:	fa5f f38a 	uxtb.w	r3, sl
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d8e9      	bhi.n	80021c6 <containerEeprom_reset+0x46>
	ErrorBuffer_clear(eeprom); // Limpa o buffer de erros)
 80021f2:	4630      	mov	r0, r6
 80021f4:	f7ff ffb0 	bl	8002158 <ErrorBuffer_clear>
	TRAVA_EEPROM
 80021f8:	2005      	movs	r0, #5
 80021fa:	f002 fe39 	bl	8004e70 <HAL_Delay>
 80021fe:	2201      	movs	r2, #1
 8002200:	2180      	movs	r1, #128	; 0x80
 8002202:	4863      	ldr	r0, [pc, #396]	; (8002390 <containerEeprom_reset+0x210>)
 8002204:	f003 fbb4 	bl	8005970 <HAL_GPIO_WritePin>
	return EEPROM_SUCCESS; // Retorna sucesso se todos os valores foram resetados
 8002208:	e028      	b.n	800225c <containerEeprom_reset+0xdc>
			switch (var->typeVar) {
 800220a:	7923      	ldrb	r3, [r4, #4]
 800220c:	2b04      	cmp	r3, #4
 800220e:	f200 80bb 	bhi.w	8002388 <containerEeprom_reset+0x208>
 8002212:	e8df f003 	tbb	[pc, r3]
 8002216:	2703      	.short	0x2703
 8002218:	6346      	.short	0x6346
 800221a:	8c          	.byte	0x8c
 800221b:	00          	.byte	0x00
				while (tries++ < MAX_TRIES) {
 800221c:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8002220:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 8002224:	f04f 0901 	mov.w	r9, #1
				*var->ptr8 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 8002228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800222a:	6922      	ldr	r2, [r4, #16]
 800222c:	701a      	strb	r2, [r3, #0]
				var->value.intValue		= *var->ptr8;
 800222e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	60a3      	str	r3, [r4, #8]
				*((uint8_t*)&buffer) 	= var->value.intValue;
 8002234:	f88d 3018 	strb.w	r3, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 1, 200);
 8002238:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800223a:	8862      	ldrh	r2, [r4, #2]
 800223c:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002240:	9700      	str	r7, [sp, #0]
 8002242:	2310      	movs	r3, #16
 8002244:	21a2      	movs	r1, #162	; 0xa2
 8002246:	6840      	ldr	r0, [r0, #4]
 8002248:	f003 fe3c 	bl	8005ec4 <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 800224c:	2800      	cmp	r0, #0
 800224e:	d0c5      	beq.n	80021dc <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8002250:	f108 38ff 	add.w	r8, r8, #4294967295
 8002254:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8002258:	d1ee      	bne.n	8002238 <containerEeprom_reset+0xb8>
 800225a:	252e      	movs	r5, #46	; 0x2e
}
 800225c:	4628      	mov	r0, r5
 800225e:	b009      	add	sp, #36	; 0x24
 8002260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while (tries++ < MAX_TRIES) {
 8002264:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 8002268:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 800226c:	f04f 0902 	mov.w	r9, #2
				*var->ptr16 = (var->defaultValue.intValue ? var->defaultValue.intValue : 0);
 8002270:	6923      	ldr	r3, [r4, #16]
 8002272:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002274:	b29a      	uxth	r2, r3
 8002276:	800a      	strh	r2, [r1, #0]
				var->value.intValue 	= *var->ptr16;
 8002278:	60a2      	str	r2, [r4, #8]
				*((uint16_t*)&buffer) 	= var->value.intValue;
 800227a:	f8ad 2018 	strh.w	r2, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 2, 200);
 800227e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002280:	8862      	ldrh	r2, [r4, #2]
 8002282:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002286:	9700      	str	r7, [sp, #0]
 8002288:	2310      	movs	r3, #16
 800228a:	21a2      	movs	r1, #162	; 0xa2
 800228c:	6840      	ldr	r0, [r0, #4]
 800228e:	f003 fe19 	bl	8005ec4 <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 8002292:	2800      	cmp	r0, #0
 8002294:	d0a2      	beq.n	80021dc <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8002296:	f108 38ff 	add.w	r8, r8, #4294967295
 800229a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800229e:	d1ee      	bne.n	800227e <containerEeprom_reset+0xfe>
 80022a0:	e7db      	b.n	800225a <containerEeprom_reset+0xda>
				while (tries++ < MAX_TRIES) {
 80022a2:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 80022a6:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
 80022aa:	f04f 0904 	mov.w	r9, #4
				*var->ptr32 = var->defaultValue.intValue ? var->defaultValue.intValue : 0;
 80022ae:	6923      	ldr	r3, [r4, #16]
 80022b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80022b2:	6013      	str	r3, [r2, #0]
				var->value.intValue 	= *var->ptr32;
 80022b4:	60a3      	str	r3, [r4, #8]
				*((uint32_t*)&buffer) 	= var->value.intValue;
 80022b6:	9306      	str	r3, [sp, #24]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 80022b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022ba:	8862      	ldrh	r2, [r4, #2]
 80022bc:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 80022c0:	9700      	str	r7, [sp, #0]
 80022c2:	2310      	movs	r3, #16
 80022c4:	21a2      	movs	r1, #162	; 0xa2
 80022c6:	6840      	ldr	r0, [r0, #4]
 80022c8:	f003 fdfc 	bl	8005ec4 <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d085      	beq.n	80021dc <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 80022d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80022d4:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 80022d8:	d1ee      	bne.n	80022b8 <containerEeprom_reset+0x138>
 80022da:	e7be      	b.n	800225a <containerEeprom_reset+0xda>
				*var->ptrFloat = var->defaultValue.floatValue ? var->defaultValue.floatValue : 0.0;
 80022dc:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80022e0:	2100      	movs	r1, #0
 80022e2:	4640      	mov	r0, r8
 80022e4:	f7fe fea4 	bl	8001030 <__aeabi_fcmpeq>
 80022e8:	b108      	cbz	r0, 80022ee <containerEeprom_reset+0x16e>
 80022ea:	f04f 0800 	mov.w	r8, #0
 80022ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 80022f0:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
				*var->ptrFloat = var->defaultValue.floatValue ? var->defaultValue.floatValue : 0.0;
 80022f4:	f8c3 8000 	str.w	r8, [r3]
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 80022f8:	f04f 0904 	mov.w	r9, #4
				var->value.floatValue 	= *var->ptrFloat;
 80022fc:	f8c4 8008 	str.w	r8, [r4, #8]
				*((float*)&buffer) 		= var->value.floatValue;
 8002300:	f8cd 8018 	str.w	r8, [sp, #24]
				while (tries++ < MAX_TRIES) {
 8002304:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 4, 200);
 8002308:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800230a:	8862      	ldrh	r2, [r4, #2]
 800230c:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 8002310:	9700      	str	r7, [sp, #0]
 8002312:	2310      	movs	r3, #16
 8002314:	21a2      	movs	r1, #162	; 0xa2
 8002316:	6840      	ldr	r0, [r0, #4]
 8002318:	f003 fdd4 	bl	8005ec4 <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 800231c:	2800      	cmp	r0, #0
 800231e:	f43f af5d 	beq.w	80021dc <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 8002322:	f108 38ff 	add.w	r8, r8, #4294967295
 8002326:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 800232a:	d1ed      	bne.n	8002308 <containerEeprom_reset+0x188>
 800232c:	e795      	b.n	800225a <containerEeprom_reset+0xda>
				*var->ptrDouble = var->defaultValue.doubleValue ? var->defaultValue.doubleValue : 0.0;
 800232e:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 8002332:	2200      	movs	r2, #0
 8002334:	2300      	movs	r3, #0
 8002336:	4640      	mov	r0, r8
 8002338:	4649      	mov	r1, r9
 800233a:	f7fe fb35 	bl	80009a8 <__aeabi_dcmpeq>
 800233e:	b118      	cbz	r0, 8002348 <containerEeprom_reset+0x1c8>
 8002340:	f04f 0800 	mov.w	r8, #0
 8002344:	f04f 0900 	mov.w	r9, #0
 8002348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 800234a:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
				*var->ptrDouble = var->defaultValue.doubleValue ? var->defaultValue.doubleValue : 0.0;
 800234e:	e9c3 8900 	strd	r8, r9, [r3]
				var->value.doubleValue 	= *var->ptrDouble;
 8002352:	e9c4 8902 	strd	r8, r9, [r4, #8]
				*((double*)&buffer) 	= (double)*var->ptrDouble;
 8002356:	e9cd 8906 	strd	r8, r9, [sp, #24]
				while (tries++ < MAX_TRIES) {
 800235a:	f04f 0805 	mov.w	r8, #5
					result = HAL_I2C_Mem_Write(var->parentEeprom->i2cHandle, EEPROM_WRITE_ADDR, var->_addrEprom, I2C_MEMADD_SIZE_16BIT, buffer, 8, 200);
 800235e:	f04f 0908 	mov.w	r9, #8
 8002362:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002364:	8862      	ldrh	r2, [r4, #2]
 8002366:	e9cd 9b01 	strd	r9, fp, [sp, #4]
 800236a:	9700      	str	r7, [sp, #0]
 800236c:	2310      	movs	r3, #16
 800236e:	21a2      	movs	r1, #162	; 0xa2
 8002370:	6840      	ldr	r0, [r0, #4]
 8002372:	f003 fda7 	bl	8005ec4 <HAL_I2C_Mem_Write>
					if (result == HAL_OK)	break;
 8002376:	2800      	cmp	r0, #0
 8002378:	f43f af30 	beq.w	80021dc <containerEeprom_reset+0x5c>
					if (tries == MAX_TRIES)	return EEPROM_ERRO_ESCRITA;
 800237c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002380:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8002384:	d1ed      	bne.n	8002362 <containerEeprom_reset+0x1e2>
 8002386:	e768      	b.n	800225a <containerEeprom_reset+0xda>
			switch (var->typeVar) {
 8002388:	252a      	movs	r5, #42	; 0x2a
 800238a:	e767      	b.n	800225c <containerEeprom_reset+0xdc>
		return EEPROM_OBJETO_NULO;
 800238c:	2529      	movs	r5, #41	; 0x29
 800238e:	e765      	b.n	800225c <containerEeprom_reset+0xdc>
 8002390:	40010c00 	.word	0x40010c00

08002394 <reset_containerEeprom>:
void 				reset_containerEeprom(Eeprom *eeprom, TypeRestauracao resetType) {
 8002394:	b510      	push	{r4, lr}
 8002396:	4604      	mov	r4, r0
	ErrorCode errCode = containerEeprom_reset(eeprom, resetType);
 8002398:	f7ff fef2 	bl	8002180 <containerEeprom_reset>
	if (errCode != EEPROM_SUCCESS) {
 800239c:	4601      	mov	r1, r0
 800239e:	b110      	cbz	r0, 80023a6 <reset_containerEeprom+0x12>
		eepromError_Handler(eeprom, errCode);
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff fe21 	bl	8001fe8 <eepromError_Handler>
}
 80023a6:	bd10      	pop	{r4, pc}

080023a8 <OutputAddDigital>:
 *      Author: lucas
 */
#include "OutputDigital.h"

OUTPUT_ErrorCode OutputAddDigital(OutputDigital* Output,IndviduoOutput* _individ, uint16_t _pinoOUT,GPIO_TypeDef *_portaOUT,
		void (*callback)(),uint16_t limitOn,uint16_t limitOff){
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80023ae:	f8bd 4014 	ldrh.w	r4, [sp, #20]

	// Caso algum ponteiro seja nulo, retorne código de erro correspondente.
	if (Output == NULL || _individ == NULL || _portaOUT == NULL ) {
 80023b2:	b108      	cbz	r0, 80023b8 <OutputAddDigital+0x10>
 80023b4:	b101      	cbz	r1, 80023b8 <OutputAddDigital+0x10>
 80023b6:	b90b      	cbnz	r3, 80023bc <OutputAddDigital+0x14>
  __ASM volatile ("cpsid i" : : : "memory");
 80023b8:	b672      	cpsid	i
void outputError_Handler(OUTPUT_ErrorCode erro)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023ba:	e7fe      	b.n	80023ba <OutputAddDigital+0x12>
	if(limitOn && limitOff){
 80023bc:	b115      	cbz	r5, 80023c4 <OutputAddDigital+0x1c>
 80023be:	b10c      	cbz	r4, 80023c4 <OutputAddDigital+0x1c>
 80023c0:	b672      	cpsid	i
	while (1)
 80023c2:	e7fe      	b.n	80023c2 <OutputAddDigital+0x1a>
	_individ->GPIOx		= _portaOUT;	// porta a ser controlada.
 80023c4:	604b      	str	r3, [r1, #4]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 80023c6:	9b03      	ldr	r3, [sp, #12]
	_individ->GPIO_Pin	= _pinoOUT;		// pino a ser controlado.
 80023c8:	800a      	strh	r2, [r1, #0]
	_individ->timeOut 	= callback;		// callback caso extrapole qualquer um dos limites.
 80023ca:	614b      	str	r3, [r1, #20]
	_individ->limitOn 	= limitOn;		// se houver limite ligado.
 80023cc:	81cd      	strh	r5, [r1, #14]
	_individ->limitOff 	= limitOff;		// se houver limite desligado.
 80023ce:	820c      	strh	r4, [r1, #16]
	Output->_OutDigitalArr[Output->_DigitalCount] = _individ;
 80023d0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80023d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	Output->_DigitalCount++;
 80023d8:	3301      	adds	r3, #1
 80023da:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
}
 80023de:	2000      	movs	r0, #0
 80023e0:	bd30      	pop	{r4, r5, pc}

080023e2 <onDigital>:
void onDigital(IndviduoOutput* outPut) {
 80023e2:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 80023e4:	8801      	ldrh	r1, [r0, #0]
void onDigital(IndviduoOutput* outPut) {
 80023e6:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	6840      	ldr	r0, [r0, #4]
 80023ec:	f003 fac0 	bl	8005970 <HAL_GPIO_WritePin>
	outPut->_state = on;
 80023f0:	2301      	movs	r3, #1
 80023f2:	7223      	strb	r3, [r4, #8]
}
 80023f4:	bd10      	pop	{r4, pc}

080023f6 <offDigital>:
void offDigital(IndviduoOutput* outPut) {
 80023f6:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 80023f8:	8801      	ldrh	r1, [r0, #0]
void offDigital(IndviduoOutput* outPut) {
 80023fa:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(outPut->GPIOx, outPut->GPIO_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	6840      	ldr	r0, [r0, #4]
 8002400:	f003 fab6 	bl	8005970 <HAL_GPIO_WritePin>
	outPut->_state = off;
 8002404:	2300      	movs	r3, #0
 8002406:	7223      	strb	r3, [r4, #8]
}
 8002408:	bd10      	pop	{r4, pc}

0800240a <contadorOutput>:
void contadorOutput(OutputDigital* Output){
 800240a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 800240e:	2400      	movs	r4, #0
void contadorOutput(OutputDigital* Output){
 8002410:	4605      	mov	r5, r0
 8002412:	4626      	mov	r6, r4
 8002414:	f64f 77ff 	movw	r7, #65535	; 0xffff
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002418:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800241c:	fa5f f884 	uxtb.w	r8, r4
 8002420:	4543      	cmp	r3, r8
 8002422:	d80b      	bhi.n	800243c <contadorOutput+0x32>
 8002424:	f04f 0a00 	mov.w	sl, #0
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 8002428:	f04f 0b02 	mov.w	fp, #2
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 800242c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8002430:	fa5f f38a 	uxtb.w	r3, sl
 8002434:	429a      	cmp	r2, r3
 8002436:	d825      	bhi.n	8002484 <contadorOutput+0x7a>
}
 8002438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Output->_OutDigitalArr[i]->_state == on){
 800243c:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8002440:	7a1a      	ldrb	r2, [r3, #8]
 8002442:	2a01      	cmp	r2, #1
 8002444:	d117      	bne.n	8002476 <contadorOutput+0x6c>
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 8002446:	895a      	ldrh	r2, [r3, #10]
			Output->_OutDigitalArr[i]->timeOff = 0;
 8002448:	819e      	strh	r6, [r3, #12]
			(Output->_OutDigitalArr[i]->timeOn<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOn++:0;
 800244a:	42ba      	cmp	r2, r7
 800244c:	d001      	beq.n	8002452 <contadorOutput+0x48>
 800244e:	3201      	adds	r2, #1
 8002450:	815a      	strh	r2, [r3, #10]
		if(Output->_OutDigitalArr[i]->limitOn != 0){
 8002452:	89da      	ldrh	r2, [r3, #14]
 8002454:	b122      	cbz	r2, 8002460 <contadorOutput+0x56>
			if(Output->_OutDigitalArr[i]->timeOn >= Output->_OutDigitalArr[i]->limitOn){
 8002456:	8959      	ldrh	r1, [r3, #10]
 8002458:	4291      	cmp	r1, r2
 800245a:	d301      	bcc.n	8002460 <contadorOutput+0x56>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	4798      	blx	r3
		if(Output->_OutDigitalArr[i]->limitOff != 0){
 8002460:	f855 3028 	ldr.w	r3, [r5, r8, lsl #2]
 8002464:	8a1a      	ldrh	r2, [r3, #16]
 8002466:	b122      	cbz	r2, 8002472 <contadorOutput+0x68>
			if(Output->_OutDigitalArr[i]->timeOff >= Output->_OutDigitalArr[i]->limitOff){
 8002468:	8999      	ldrh	r1, [r3, #12]
 800246a:	4291      	cmp	r1, r2
 800246c:	d301      	bcc.n	8002472 <contadorOutput+0x68>
				Output->_OutDigitalArr[i]->timeOut();//chama callback de timeout.
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_DigitalCount; i++)	{
 8002472:	3401      	adds	r4, #1
 8002474:	e7d0      	b.n	8002418 <contadorOutput+0xe>
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 8002476:	899a      	ldrh	r2, [r3, #12]
			Output->_OutDigitalArr[i]->timeOn = 0;
 8002478:	815e      	strh	r6, [r3, #10]
			(Output->_OutDigitalArr[i]->timeOff<UINT16_MAX)?Output->_OutDigitalArr[i]->timeOff++:0;
 800247a:	42ba      	cmp	r2, r7
 800247c:	bf1c      	itt	ne
 800247e:	3201      	addne	r2, #1
 8002480:	819a      	strhne	r2, [r3, #12]
 8002482:	e7e6      	b.n	8002452 <contadorOutput+0x48>
		if(Output->_OutPidArr[i]->realtime >=  Output->_OutPidArr[i]->setPoint ){
 8002484:	3306      	adds	r3, #6
 8002486:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 800248a:	e9d4 890a 	ldrd	r8, r9, [r4, #40]	; 0x28
 800248e:	e9d4 670c 	ldrd	r6, r7, [r4, #48]	; 0x30
 8002492:	4640      	mov	r0, r8
 8002494:	4632      	mov	r2, r6
 8002496:	463b      	mov	r3, r7
 8002498:	4649      	mov	r1, r9
 800249a:	f7fe faa3 	bl	80009e4 <__aeabi_dcmpge>
 800249e:	bb08      	cbnz	r0, 80024e4 <contadorOutput+0xda>
		}else if(Output->_OutPidArr[i]->realtime + Output->_OutPidArr[i]->histerese >  Output->_OutPidArr[i]->setPoint ){
 80024a0:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
 80024a2:	f7fd ffaf 	bl	8000404 <__aeabi_i2d>
 80024a6:	4642      	mov	r2, r8
 80024a8:	464b      	mov	r3, r9
 80024aa:	f7fd fe5f 	bl	800016c <__adddf3>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4630      	mov	r0, r6
 80024b4:	4639      	mov	r1, r7
 80024b6:	f7fe fa81 	bl	80009bc <__aeabi_dcmplt>
 80024ba:	b1c8      	cbz	r0, 80024f0 <contadorOutput+0xe6>
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 80024bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
			Output->_OutPidArr[i]->_PWMstate = mantendo;
 80024c2:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
			(Output->_OutPidArr[i]->timeOn<UINT16_MAX)?Output->_OutPidArr[i]->timeOn++:0;
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d001      	beq.n	80024ce <contadorOutput+0xc4>
 80024ca:	3301      	adds	r3, #1
 80024cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
		if(Output->_OutPidArr[i]->limiteOn != 0){
 80024ce:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80024d2:	b123      	cbz	r3, 80024de <contadorOutput+0xd4>
			if(Output->_OutPidArr[i]->timeOn >= Output->_OutPidArr[i]->limiteOn){
 80024d4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d301      	bcc.n	80024de <contadorOutput+0xd4>
				Output->_OutPidArr[i]->timeOut();//chama callback de timeout
 80024da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024dc:	4798      	blx	r3
	for(uint8_t i = 0; i < Output->_PidCount; i++)	{
 80024de:	f10a 0a01 	add.w	sl, sl, #1
 80024e2:	e7a3      	b.n	800242c <contadorOutput+0x22>
 80024e4:	2300      	movs	r3, #0
			Output->_OutPidArr[i]->_PWMstate = buscando;
 80024e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			Output->_OutPidArr[i]->timeOn=0;
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e7ed      	b.n	80024cc <contadorOutput+0xc2>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e7f8      	b.n	80024e6 <contadorOutput+0xdc>

080024f4 <IndviduoPID_SetPWMValue>:
void IndviduoPID_SetPWMValue(IndviduoPID *pid, double pwmValue) {
 80024f4:	b5d0      	push	{r4, r6, r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	4604      	mov	r4, r0
 80024fa:	461f      	mov	r7, r3
 80024fc:	4616      	mov	r6, r2
	TIM_OC_InitTypeDef sConfigOC = {0};
 80024fe:	2100      	movs	r1, #0
 8002500:	2214      	movs	r2, #20
 8002502:	a803      	add	r0, sp, #12
 8002504:	f008 f8f0 	bl	800a6e8 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002508:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 800250a:	4639      	mov	r1, r7
 800250c:	4630      	mov	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800250e:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002510:	f7fe fa7c 	bl	8000a0c <__aeabi_d2uiz>
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002514:	6862      	ldr	r2, [r4, #4]
	sConfigOC.Pulse = pwmValue; // O valor do duty cycle
 8002516:	9002      	str	r0, [sp, #8]
	if (HAL_TIM_PWM_ConfigChannel(pid->TimHandle, &sConfigOC, pid->Channel) != HAL_OK) {
 8002518:	a901      	add	r1, sp, #4
 800251a:	6820      	ldr	r0, [r4, #0]
 800251c:	f004 fe80 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002520:	b108      	cbz	r0, 8002526 <IndviduoPID_SetPWMValue+0x32>
 8002522:	b672      	cpsid	i
	while (1)
 8002524:	e7fe      	b.n	8002524 <IndviduoPID_SetPWMValue+0x30>
	if (HAL_TIM_PWM_Start(pid->TimHandle, pid->Channel) != HAL_OK) {
 8002526:	e9d4 0100 	ldrd	r0, r1, [r4]
 800252a:	f004 ffd3 	bl	80074d4 <HAL_TIM_PWM_Start>
 800252e:	b108      	cbz	r0, 8002534 <IndviduoPID_SetPWMValue+0x40>
 8002530:	b672      	cpsid	i
	while (1)
 8002532:	e7fe      	b.n	8002532 <IndviduoPID_SetPWMValue+0x3e>
}
 8002534:	b008      	add	sp, #32
 8002536:	bdd0      	pop	{r4, r6, r7, pc}

08002538 <OutputAddPID>:
		uint16_t limit_on,void (*callback)()){
 8002538:	b508      	push	{r3, lr}
	if (Output == NULL || _individ == NULL || htim == NULL ) {
 800253a:	b108      	cbz	r0, 8002540 <OutputAddPID+0x8>
 800253c:	b101      	cbz	r1, 8002540 <OutputAddPID+0x8>
 800253e:	b90a      	cbnz	r2, 8002544 <OutputAddPID+0xc>
 8002540:	b672      	cpsid	i
	while (1)
 8002542:	e7fe      	b.n	8002542 <OutputAddPID+0xa>
	_individ->Channel   = Channel;	// channel do timer.
 8002544:	e9c1 2300 	strd	r2, r3, [r1]
	_individ->kp	= Kp;
 8002548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800254c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_individ->ki	= Ki;
 8002550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002554:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_individ->kd	= Kd;
 8002558:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800255c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_individ->histerese	= histerese;// histerese dada em graus.
 8002560:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8002564:	874b      	strh	r3, [r1, #58]	; 0x3a
	_individ->timeOut = callback;	// callback caso extrapole tempo de acionamento.
 8002566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002568:	644b      	str	r3, [r1, #68]	; 0x44
	Output->_OutPidArr[Output->_PidCount] = _individ;
 800256a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800256e:	1d9a      	adds	r2, r3, #6
	Output->_PidCount++;
 8002570:	3301      	adds	r3, #1
	Output->_OutPidArr[Output->_PidCount] = _individ;
 8002572:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	Output->_PidCount++;
 8002576:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	IndviduoPID_SetPWMValue(_individ, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	4608      	mov	r0, r1
 800257e:	2300      	movs	r3, #0
 8002580:	f7ff ffb8 	bl	80024f4 <IndviduoPID_SetPWMValue>
}
 8002584:	2000      	movs	r0, #0
 8002586:	bd08      	pop	{r3, pc}

08002588 <IndviduoPID_SetPWMValueDirect>:
	volatile uint32_t *ccrAddress = &pid->TimHandle->Instance->CCR1 + (pid->Channel >> 2);
 8002588:	6803      	ldr	r3, [r0, #0]
 800258a:	6842      	ldr	r2, [r0, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0892      	lsrs	r2, r2, #2
 8002590:	3334      	adds	r3, #52	; 0x34
	*ccrAddress = pwmValue;
 8002592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002596:	4770      	bx	lr

08002598 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <vApplicationGetIdleTaskMemory+0x10>)
 800259a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <vApplicationGetIdleTaskMemory+0x14>)
 800259e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000290 	.word	0x20000290
 80025ac:	20000090 	.word	0x20000090

080025b0 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <vApplicationGetTimerTaskMemory+0x10>)
 80025b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <vApplicationGetTimerTaskMemory+0x14>)
 80025b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80025b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025bc:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80025be:	4770      	bx	lr
 80025c0:	20000730 	.word	0x20000730
 80025c4:	20000330 	.word	0x20000330

080025c8 <timeoutAquecimento>:
		PrimitiveStates.Lastro.realtime = TempLastro-34;
		i=0;
	}
}

void timeoutAquecimento (void){
 80025c8:	b510      	push	{r4, lr}
	//callback apontada no OutPut dos canais de aquecimento
	//essa funcao é chamada no momento que a contagem atinge seu limite

	//verifica erro temperatura lastro
	if(PrimitiveStates.Lastro.realtime < PrimitiveStates.Lastro.setPoint-5){
 80025ca:	4c14      	ldr	r4, [pc, #80]	; (800261c <timeoutAquecimento+0x54>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <timeoutAquecimento+0x58>)
 80025d4:	f7fd fdc8 	bl	8000168 <__aeabi_dsub>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 80025e0:	f7fe f9ec 	bl	80009bc <__aeabi_dcmplt>
 80025e4:	b128      	cbz	r0, 80025f2 <timeoutAquecimento+0x2a>
		//todo incluir no buffer erros
		PrimitiveStates.Erro.bit.IdleLastro=1;
 80025e6:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	}

	//verifica erro temperatura teto
	if(PrimitiveStates.Teto.realtime < PrimitiveStates.Teto.setPoint-5){
 80025f2:	2200      	movs	r2, #0
 80025f4:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <timeoutAquecimento+0x58>)
 80025fa:	f7fd fdb5 	bl	8000168 <__aeabi_dsub>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8002606:	f7fe f9d9 	bl	80009bc <__aeabi_dcmplt>
 800260a:	b128      	cbz	r0, 8002618 <timeoutAquecimento+0x50>
		//todo incluir no buffer erros
		PrimitiveStates.Erro.bit.IdleTeto=1;
 800260c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	}
}
 8002618:	bd10      	pop	{r4, pc}
 800261a:	bf00      	nop
 800261c:	200007e8 	.word	0x200007e8
 8002620:	40140000 	.word	0x40140000

08002624 <timeoutDesligaLampada>:

void timeoutDesligaLampada(void){

	offDigital(&PrimitiveStates.Lampada);
 8002624:	4801      	ldr	r0, [pc, #4]	; (800262c <timeoutDesligaLampada+0x8>)
 8002626:	f7ff bee6 	b.w	80023f6 <offDigital>
 800262a:	bf00      	nop
 800262c:	200007e8 	.word	0x200007e8

08002630 <CBTimer10ms>:
	/* USER CODE END StartEeprom */
}

/* CBTimer10ms function */
void CBTimer10ms(void const * argument)
{
 8002630:	b510      	push	{r4, lr}
	/* USER CODE BEGIN CBTimer10ms */

	static TypeMaquinaConexao LocalMaquinaConexao;
	bluetooth10ms(&bluetooth);
 8002632:	4c0a      	ldr	r4, [pc, #40]	; (800265c <CBTimer10ms+0x2c>)
 8002634:	4620      	mov	r0, r4
 8002636:	f7fe ff85 	bl	8001544 <bluetooth10ms>


	if (LocalMaquinaConexao != bluetooth.MaquinaConexao) {
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <CBTimer10ms+0x30>)
 800263c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8002640:	7811      	ldrb	r1, [r2, #0]
 8002642:	4299      	cmp	r1, r3
 8002644:	d009      	beq.n	800265a <CBTimer10ms+0x2a>
		LocalMaquinaConexao = bluetooth.MaquinaConexao;
		if(LocalMaquinaConexao == RX_VALIDADO){
 8002646:	2b03      	cmp	r3, #3
		LocalMaquinaConexao = bluetooth.MaquinaConexao;
 8002648:	7013      	strb	r3, [r2, #0]
		if(LocalMaquinaConexao == RX_VALIDADO){
 800264a:	d106      	bne.n	800265a <CBTimer10ms+0x2a>
		}
	}


	/* USER CODE END CBTimer10ms */
}
 800264c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			osSignalSet(TaskBuzzerHandle, SINAL_CONECTOU);
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <CBTimer10ms+0x34>)
 8002652:	2110      	movs	r1, #16
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	f005 bca8 	b.w	8007faa <osSignalSet>
}
 800265a:	bd10      	pop	{r4, pc}
 800265c:	20000e4c 	.word	0x20000e4c
 8002660:	200007e4 	.word	0x200007e4
 8002664:	20000b9c 	.word	0x20000b9c

08002668 <_write>:
{
 8002668:	4610      	mov	r0, r2
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800266c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
{
 8002670:	b530      	push	{r4, r5, lr}
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	4283      	cmp	r3, r0
 8002674:	db00      	blt.n	8002678 <_write+0x10>
}
 8002676:	bd30      	pop	{r4, r5, pc}
 8002678:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 800267c:	07e5      	lsls	r5, r4, #31
 800267e:	d507      	bpl.n	8002690 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002680:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002684:	07e4      	lsls	r4, r4, #31
 8002686:	d503      	bpl.n	8002690 <_write+0x28>
		ITM_SendChar(*ptr++);
 8002688:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800268a:	6815      	ldr	r5, [r2, #0]
 800268c:	b115      	cbz	r5, 8002694 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800268e:	7014      	strb	r4, [r2, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	3301      	adds	r3, #1
 8002692:	e7ee      	b.n	8002672 <_write+0xa>
      __NOP();
 8002694:	bf00      	nop
 8002696:	e7f8      	b.n	800268a <_write+0x22>

08002698 <desligaForno>:
	PrimitiveStates.SPTimerMinutos 	= 0;
 8002698:	2200      	movs	r2, #0
	PrimitiveStates.Lastro.setPoint	= 0;
 800269a:	2000      	movs	r0, #0
 800269c:	2100      	movs	r1, #0
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <desligaForno+0x20>)
 80026a0:	e9c3 013c 	strd	r0, r1, [r3, #240]	; 0xf0
	PrimitiveStates.Teto.setPoint 	= 0;
 80026a4:	e9c3 012a 	strd	r0, r1, [r3, #168]	; 0xa8
	PrimitiveStates.SPTimerMinutos 	= 0;
 80026a8:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	PrimitiveStates.SPTimerSegundos = 0;
 80026ac:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	PrimitiveStates.RTTimerSegundos = 0;
 80026b0:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	200007e8 	.word	0x200007e8
 80026bc:	00000000 	.word	0x00000000

080026c0 <controleCooler>:
void controleCooler(void){
 80026c0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	if(PrimitiveStates.Lastro.realtime>ON_FAN_TEMPERATURA || PrimitiveStates.Teto.realtime>ON_FAN_TEMPERATURA){
 80026c4:	4c1a      	ldr	r4, [pc, #104]	; (8002730 <controleCooler+0x70>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	e9d4 893a 	ldrd	r8, r9, [r4, #232]	; 0xe8
 80026cc:	4b19      	ldr	r3, [pc, #100]	; (8002734 <controleCooler+0x74>)
 80026ce:	4640      	mov	r0, r8
 80026d0:	4649      	mov	r1, r9
 80026d2:	f7fe f991 	bl	80009f8 <__aeabi_dcmpgt>
 80026d6:	b940      	cbnz	r0, 80026ea <controleCooler+0x2a>
 80026d8:	e9d4 6728 	ldrd	r6, r7, [r4, #160]	; 0xa0
 80026dc:	2200      	movs	r2, #0
 80026de:	4630      	mov	r0, r6
 80026e0:	4639      	mov	r1, r7
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <controleCooler+0x74>)
 80026e4:	f7fe f988 	bl	80009f8 <__aeabi_dcmpgt>
 80026e8:	b120      	cbz	r0, 80026f4 <controleCooler+0x34>
}
 80026ea:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		onDigital(&PrimitiveStates.Cooler);
 80026ee:	4812      	ldr	r0, [pc, #72]	; (8002738 <controleCooler+0x78>)
 80026f0:	f7ff be77 	b.w	80023e2 <onDigital>
	}else 	if(PrimitiveStates.Lastro.realtime<ON_FAN_TEMPERATURA-5 && PrimitiveStates.Teto.realtime<ON_FAN_TEMPERATURA-5){
 80026f4:	4640      	mov	r0, r8
 80026f6:	a30c      	add	r3, pc, #48	; (adr r3, 8002728 <controleCooler+0x68>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	4649      	mov	r1, r9
 80026fe:	f7fe f95d 	bl	80009bc <__aeabi_dcmplt>
 8002702:	b168      	cbz	r0, 8002720 <controleCooler+0x60>
 8002704:	a308      	add	r3, pc, #32	; (adr r3, 8002728 <controleCooler+0x68>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	4630      	mov	r0, r6
 800270c:	4639      	mov	r1, r7
 800270e:	f7fe f955 	bl	80009bc <__aeabi_dcmplt>
 8002712:	b128      	cbz	r0, 8002720 <controleCooler+0x60>
		offDigital(&PrimitiveStates.Cooler);
 8002714:	f104 0018 	add.w	r0, r4, #24
}
 8002718:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
		offDigital(&PrimitiveStates.Cooler);
 800271c:	f7ff be6b 	b.w	80023f6 <offDigital>
}
 8002720:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8002724:	f3af 8000 	nop.w
 8002728:	00000000 	.word	0x00000000
 800272c:	40686000 	.word	0x40686000
 8002730:	200007e8 	.word	0x200007e8
 8002734:	40690000 	.word	0x40690000
 8002738:	20000800 	.word	0x20000800

0800273c <CBTimer1000ms>:

/* CBTimer1000ms function */
void CBTimer1000ms(void const * argument)
{
 800273c:	b508      	push	{r3, lr}
	/* USER CODE BEGIN CBTimer1000ms */

	bluetooth1000ms(&bluetooth);
 800273e:	480a      	ldr	r0, [pc, #40]	; (8002768 <CBTimer1000ms+0x2c>)
 8002740:	f7fe fcce 	bl	80010e0 <bluetooth1000ms>
	taskTemperatura1sec();
 8002744:	f002 fafa 	bl	8004d3c <taskTemperatura1sec>
	taskBluetooth1sec();
 8002748:	f001 f9d6 	bl	8003af8 <taskBluetooth1sec>
	controleCooler();
 800274c:	f7ff ffb8 	bl	80026c0 <controleCooler>

	//contadores de todas as saidas digitais
	contadorOutput(&outPuts);
 8002750:	4806      	ldr	r0, [pc, #24]	; (800276c <CBTimer1000ms+0x30>)
 8002752:	f7ff fe5a 	bl	800240a <contadorOutput>

	//se existir erros do tipo abaixo, o forno é desligado
	if(PrimitiveStates.Erro.byte != 0){
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <CBTimer1000ms+0x34>)
 8002758:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 800275c:	b11b      	cbz	r3, 8002766 <CBTimer1000ms+0x2a>
		desligaForno();
	}
	/* USER CODE END CBTimer1000ms */
}
 800275e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		desligaForno();
 8002762:	f7ff bf99 	b.w	8002698 <desligaForno>
}
 8002766:	bd08      	pop	{r3, pc}
 8002768:	20000e4c 	.word	0x20000e4c
 800276c:	200011a0 	.word	0x200011a0
 8002770:	200007e8 	.word	0x200007e8

08002774 <HAL_ADC_ConvCpltCallback>:
{
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(i<TAM){
 8002778:	4e24      	ldr	r6, [pc, #144]	; (800280c <HAL_ADC_ConvCpltCallback+0x98>)
		somatorio1+=buffer_ADC[1]; // somatorio
 800277a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002810 <HAL_ADC_ConvCpltCallback+0x9c>
	if(i<TAM){
 800277e:	8834      	ldrh	r4, [r6, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 8002780:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002814 <HAL_ADC_ConvCpltCallback+0xa0>
	if(i<TAM){
 8002784:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
		somatorio1+=buffer_ADC[1]; // somatorio
 8002788:	f8d9 0000 	ldr.w	r0, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 800278c:	f8d8 5000 	ldr.w	r5, [r8]
	if(i<TAM){
 8002790:	d20d      	bcs.n	80027ae <HAL_ADC_ConvCpltCallback+0x3a>
		somatorio1+=buffer_ADC[1]; // somatorio
 8002792:	4a21      	ldr	r2, [pc, #132]	; (8002818 <HAL_ADC_ConvCpltCallback+0xa4>)
		i++;
 8002794:	3401      	adds	r4, #1
		somatorio1+=buffer_ADC[1]; // somatorio
 8002796:	6853      	ldr	r3, [r2, #4]
		i++;
 8002798:	b2a4      	uxth	r4, r4
		somatorio1+=buffer_ADC[1]; // somatorio
 800279a:	4403      	add	r3, r0
 800279c:	f8c9 3000 	str.w	r3, [r9]
		somatorio2+=buffer_ADC[0]; // somatorio
 80027a0:	6813      	ldr	r3, [r2, #0]
 80027a2:	442b      	add	r3, r5
 80027a4:	f8c8 3000 	str.w	r3, [r8]
		i++;
 80027a8:	8034      	strh	r4, [r6, #0]
}
 80027aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		somatorio1 = somatorio1 / TAM; //calc media
 80027ae:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
 80027b2:	fb90 f0fa 	sdiv	r0, r0, sl
		Temp1 = somatorio1*16; //calc valor final
 80027b6:	0100      	lsls	r0, r0, #4
 80027b8:	f7fe fa52 	bl	8000c60 <__aeabi_i2f>
		somatorio2 = somatorio2 / TAM; //calc media
 80027bc:	fb95 f5fa 	sdiv	r5, r5, sl
		somatorio1 = 0; 		//zera somatorio
 80027c0:	2400      	movs	r4, #0
		Temp1 = somatorio1*16; //calc valor final
 80027c2:	4607      	mov	r7, r0
		Temp2 = somatorio2*16; 	//calc valor final
 80027c4:	0128      	lsls	r0, r5, #4
		somatorio1 = 0; 		//zera somatorio
 80027c6:	f8c9 4000 	str.w	r4, [r9]
		Temp2 = somatorio2*16; 	//calc valor final
 80027ca:	f7fe fa49 	bl	8000c60 <__aeabi_i2f>
		Temp1 = Temp1/100;
 80027ce:	4913      	ldr	r1, [pc, #76]	; (800281c <HAL_ADC_ConvCpltCallback+0xa8>)
		Temp2 = somatorio2*16; 	//calc valor final
 80027d0:	4605      	mov	r5, r0
		somatorio2 = 0; 		//zera somatorio
 80027d2:	f8c8 4000 	str.w	r4, [r8]
		Temp1 = Temp1/100;
 80027d6:	4638      	mov	r0, r7
 80027d8:	f7fe fb4a 	bl	8000e70 <__aeabi_fdiv>
		TempTeto=(double)Temp1;
 80027dc:	f7fd fe24 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Teto.realtime = TempTeto-34;
 80027e0:	2200      	movs	r2, #0
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_ADC_ConvCpltCallback+0xac>)
 80027e4:	f7fd fcc0 	bl	8000168 <__aeabi_dsub>
 80027e8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8002824 <HAL_ADC_ConvCpltCallback+0xb0>
 80027ec:	e9c8 0128 	strd	r0, r1, [r8, #160]	; 0xa0
		Temp2 = Temp2/100;
 80027f0:	490a      	ldr	r1, [pc, #40]	; (800281c <HAL_ADC_ConvCpltCallback+0xa8>)
 80027f2:	4628      	mov	r0, r5
 80027f4:	f7fe fb3c 	bl	8000e70 <__aeabi_fdiv>
		TempLastro=(double)Temp2;
 80027f8:	f7fd fe16 	bl	8000428 <__aeabi_f2d>
		PrimitiveStates.Lastro.realtime = TempLastro-34;
 80027fc:	2200      	movs	r2, #0
 80027fe:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_ADC_ConvCpltCallback+0xac>)
 8002800:	f7fd fcb2 	bl	8000168 <__aeabi_dsub>
 8002804:	e9c8 013a 	strd	r0, r1, [r8, #232]	; 0xe8
		i=0;
 8002808:	e7ce      	b.n	80027a8 <HAL_ADC_ConvCpltCallback+0x34>
 800280a:	bf00      	nop
 800280c:	2000119c 	.word	0x2000119c
 8002810:	200011cc 	.word	0x200011cc
 8002814:	200011d0 	.word	0x200011d0
 8002818:	20000f0c 	.word	0x20000f0c
 800281c:	42c80000 	.word	0x42c80000
 8002820:	40410000 	.word	0x40410000
 8002824:	200007e8 	.word	0x200007e8

08002828 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8002828:	6802      	ldr	r2, [r0, #0]
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800282c:	429a      	cmp	r2, r3
 800282e:	d101      	bne.n	8002834 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 8002830:	f002 bb0c 	b.w	8004e4c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40012c00 	.word	0x40012c00

0800283c <Error_Handler>:
 800283c:	b672      	cpsid	i
  __ASM volatile ("dsb 0xF":::"memory");
 800283e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002842:	4905      	ldr	r1, [pc, #20]	; (8002858 <Error_Handler+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <Error_Handler+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002846:	68ca      	ldr	r2, [r1, #12]
 8002848:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800284c:	4313      	orrs	r3, r2
 800284e:	60cb      	str	r3, [r1, #12]
 8002850:	f3bf 8f4f 	dsb	sy
    __NOP();
 8002854:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002856:	e7fd      	b.n	8002854 <Error_Handler+0x18>
 8002858:	e000ed00 	.word	0xe000ed00
 800285c:	05fa0004 	.word	0x05fa0004

08002860 <SystemClock_Config>:
{
 8002860:	b530      	push	{r4, r5, lr}
 8002862:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002864:	2220      	movs	r2, #32
 8002866:	2100      	movs	r1, #0
 8002868:	a80b      	add	r0, sp, #44	; 0x2c
 800286a:	f007 ff3d 	bl	800a6e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286e:	2214      	movs	r2, #20
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002870:	2510      	movs	r5, #16
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002872:	2100      	movs	r1, #0
 8002874:	eb0d 0002 	add.w	r0, sp, r2
 8002878:	f007 ff36 	bl	800a6e8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800287c:	462a      	mov	r2, r5
 800287e:	2100      	movs	r1, #0
 8002880:	a801      	add	r0, sp, #4
 8002882:	f007 ff31 	bl	800a6e8 <memset>
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002886:	2401      	movs	r4, #1
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002888:	230a      	movs	r3, #10
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800288a:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800288e:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002890:	2502      	movs	r5, #2
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8002892:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002896:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002898:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800289a:	9511      	str	r5, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800289c:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289e:	f003 fd95 	bl	80063cc <HAL_RCC_OscConfig>
 80028a2:	b108      	cbz	r0, 80028a8 <SystemClock_Config+0x48>
		Error_Handler();
 80028a4:	f7ff ffca 	bl	800283c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a8:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028aa:	e9cd 3505 	strd	r3, r5, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b2:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b4:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028b8:	4621      	mov	r1, r4
 80028ba:	a805      	add	r0, sp, #20
 80028bc:	f003 ff48 	bl	8006750 <HAL_RCC_ClockConfig>
 80028c0:	2800      	cmp	r0, #0
 80028c2:	d1ef      	bne.n	80028a4 <SystemClock_Config+0x44>
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80028c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c8:	2203      	movs	r2, #3
 80028ca:	e9cd 2301 	strd	r2, r3, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80028ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d2:	a801      	add	r0, sp, #4
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80028d4:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d6:	f004 f815 	bl	8006904 <HAL_RCCEx_PeriphCLKConfig>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d1e2      	bne.n	80028a4 <SystemClock_Config+0x44>
}
 80028de:	b015      	add	sp, #84	; 0x54
 80028e0:	bd30      	pop	{r4, r5, pc}
 80028e2:	0000      	movs	r0, r0
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <main>:
{
 80028e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	2710      	movs	r7, #16
{
 80028ee:	b0bb      	sub	sp, #236	; 0xec
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028f0:	4d4c      	ldr	r5, [pc, #304]	; (8002a24 <main+0x13c>)
	HAL_Init();
 80028f2:	f002 fa99 	bl	8004e28 <HAL_Init>
	SystemClock_Config();
 80028f6:	f7ff ffb3 	bl	8002860 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	463a      	mov	r2, r7
 80028fc:	2100      	movs	r1, #0
 80028fe:	a833      	add	r0, sp, #204	; 0xcc
 8002900:	f007 fef2 	bl	800a6e8 <memset>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002904:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002908:	f043 0304 	orr.w	r3, r3, #4
 800290c:	61ab      	str	r3, [r5, #24]
 800290e:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002910:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	930b      	str	r3, [sp, #44]	; 0x2c
 800291a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800291c:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 800291e:	4842      	ldr	r0, [pc, #264]	; (8002a28 <main+0x140>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	61ab      	str	r3, [r5, #24]
 8002926:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2400      	movs	r4, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	930c      	str	r3, [sp, #48]	; 0x30
 8002930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOB, BLE_EN_Pin|BLE_RESET_Pin, GPIO_PIN_SET);
 8002932:	f003 f81d 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293c:	483b      	ldr	r0, [pc, #236]	; (8002a2c <main+0x144>)
 800293e:	f003 f817 	bl	8005970 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin
 8002942:	2200      	movs	r2, #0
 8002944:	21f8      	movs	r1, #248	; 0xf8
 8002946:	4838      	ldr	r0, [pc, #224]	; (8002a28 <main+0x140>)
 8002948:	f003 f812 	bl	8005970 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294c:	f04f 0801 	mov.w	r8, #1
 8002950:	f246 0378 	movw	r3, #24696	; 0x6078
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002958:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
	GPIO_InitStruct.Pin = BOTAO_BLE_Pin;
 800295c:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002960:	4831      	ldr	r0, [pc, #196]	; (8002a28 <main+0x140>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002962:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8002a30 <main+0x148>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	a933      	add	r1, sp, #204	; 0xcc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002968:	e9cd 3833 	strd	r3, r8, [sp, #204]	; 0xcc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	e9cd 4935 	strd	r4, r9, [sp, #212]	; 0xd4
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f002 feb0 	bl	80056d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <main+0x140>)
 8002976:	a933      	add	r1, sp, #204	; 0xcc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	9435      	str	r4, [sp, #212]	; 0xd4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800297a:	e9cd ab33 	strd	sl, fp, [sp, #204]	; 0xcc
	HAL_GPIO_Init(BLE_STATUS_GPIO_Port, &GPIO_InitStruct);
 800297e:	f002 fea9 	bl	80056d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 8002982:	482a      	ldr	r0, [pc, #168]	; (8002a2c <main+0x144>)
 8002984:	a933      	add	r1, sp, #204	; 0xcc
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	9435      	str	r4, [sp, #212]	; 0xd4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002988:	e9cd 6b33 	strd	r6, fp, [sp, #204]	; 0xcc
	HAL_GPIO_Init(BOTAO_BLE_GPIO_Port, &GPIO_InitStruct);
 800298c:	f002 fea2 	bl	80056d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 8002990:	4826      	ldr	r0, [pc, #152]	; (8002a2c <main+0x144>)
 8002992:	a933      	add	r1, sp, #204	; 0xcc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	e9cd 4935 	strd	r4, r9, [sp, #212]	; 0xd4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002998:	e9cd a833 	strd	sl, r8, [sp, #204]	; 0xcc
	HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 800299c:	f002 fe9a 	bl	80056d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = EEPROM_EN_Pin;
 80029a0:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 80029a2:	4821      	ldr	r0, [pc, #132]	; (8002a28 <main+0x140>)
 80029a4:	a933      	add	r1, sp, #204	; 0xcc
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	e9cd 3833 	strd	r3, r8, [sp, #204]	; 0xcc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	e9cd 9935 	strd	r9, r9, [sp, #212]	; 0xd4
	HAL_GPIO_Init(EEPROM_EN_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f002 fe91 	bl	80056d4 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80029b2:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029b4:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80029b6:	ea43 0308 	orr.w	r3, r3, r8
 80029ba:	616b      	str	r3, [r5, #20]
 80029bc:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029be:	2105      	movs	r1, #5
	__HAL_RCC_DMA1_CLK_ENABLE();
 80029c0:	ea03 0308 	and.w	r3, r3, r8
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029c4:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80029c6:	930a      	str	r3, [sp, #40]	; 0x28
 80029c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80029ca:	f002 fc9d 	bl	8005308 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80029ce:	200b      	movs	r0, #11
 80029d0:	f002 fcca 	bl	8005368 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80029d4:	4622      	mov	r2, r4
 80029d6:	2105      	movs	r1, #5
 80029d8:	200d      	movs	r0, #13
 80029da:	f002 fc95 	bl	8005308 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80029de:	200d      	movs	r0, #13
 80029e0:	f002 fcc2 	bl	8005368 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80029e4:	4622      	mov	r2, r4
 80029e6:	2105      	movs	r1, #5
 80029e8:	200f      	movs	r0, #15
 80029ea:	f002 fc8d 	bl	8005308 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80029ee:	200f      	movs	r0, #15
 80029f0:	f002 fcba 	bl	8005368 <HAL_NVIC_EnableIRQ>
	hadc1.Instance = ADC1;
 80029f4:	4d0f      	ldr	r5, [pc, #60]	; (8002a34 <main+0x14c>)
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <main+0x150>)
	ADC_ChannelConfTypeDef sConfig = {0};
 80029f8:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
	hadc1.Instance = ADC1;
 80029fc:	602b      	str	r3, [r5, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029fe:	f44f 7380 	mov.w	r3, #256	; 0x100
	ADC_ChannelConfTypeDef sConfig = {0};
 8002a02:	9419      	str	r4, [sp, #100]	; 0x64
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a04:	60ab      	str	r3, [r5, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a06:	752c      	strb	r4, [r5, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a08:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a0c:	606c      	str	r4, [r5, #4]
	hadc1.Init.NbrOfConversion = 3;
 8002a0e:	2403      	movs	r4, #3
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a10:	4628      	mov	r0, r5
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002a12:	f885 800c 	strb.w	r8, [r5, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a16:	61eb      	str	r3, [r5, #28]
	hadc1.Init.NbrOfConversion = 3;
 8002a18:	612c      	str	r4, [r5, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a1a:	f002 fbe5 	bl	80051e8 <HAL_ADC_Init>
 8002a1e:	b168      	cbz	r0, 8002a3c <main+0x154>
		Error_Handler();
 8002a20:	f7ff ff0c 	bl	800283c <Error_Handler>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010c00 	.word	0x40010c00
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	10110000 	.word	0x10110000
 8002a34:	20000f18 	.word	0x20000f18
 8002a38:	40012400 	.word	0x40012400
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002a3c:	2306      	movs	r3, #6
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a3e:	e9cd 0817 	strd	r0, r8, [sp, #92]	; 0x5c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a42:	a917      	add	r1, sp, #92	; 0x5c
 8002a44:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002a46:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a48:	f002 fa60 	bl	8004f0c <HAL_ADC_ConfigChannel>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	d1e7      	bne.n	8002a20 <main+0x138>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a50:	4628      	mov	r0, r5
 8002a52:	a917      	add	r1, sp, #92	; 0x5c
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a54:	e9cd 8917 	strd	r8, r9, [sp, #92]	; 0x5c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a58:	f002 fa58 	bl	8004f0c <HAL_ADC_ConfigChannel>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d1df      	bne.n	8002a20 <main+0x138>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a60:	4628      	mov	r0, r5
 8002a62:	a917      	add	r1, sp, #92	; 0x5c
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a64:	e9cd 7417 	strd	r7, r4, [sp, #92]	; 0x5c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a68:	f002 fa50 	bl	8004f0c <HAL_ADC_ConfigChannel>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1d6      	bne.n	8002a20 <main+0x138>
	hi2c1.Instance = I2C1;
 8002a72:	48c1      	ldr	r0, [pc, #772]	; (8002d78 <main+0x490>)
	hi2c1.Init.ClockSpeed = 100000;
 8002a74:	f8df c304 	ldr.w	ip, [pc, #772]	; 8002d7c <main+0x494>
 8002a78:	4ac1      	ldr	r2, [pc, #772]	; (8002d80 <main+0x498>)
	hi2c1.Init.OwnAddress1 = 0;
 8002a7a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hi2c1.Init.ClockSpeed = 100000;
 8002a7e:	e9c0 c200 	strd	ip, r2, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a86:	e9c0 3306 	strd	r3, r3, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a8e:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a90:	f003 f970 	bl	8005d74 <HAL_I2C_Init>
 8002a94:	4605      	mov	r5, r0
 8002a96:	2800      	cmp	r0, #0
 8002a98:	d1c2      	bne.n	8002a20 <main+0x138>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a9a:	463a      	mov	r2, r7
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	a825      	add	r0, sp, #148	; 0x94
 8002aa0:	f007 fe22 	bl	800a6e8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002aa4:	221c      	movs	r2, #28
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	a833      	add	r0, sp, #204	; 0xcc
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aaa:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002aae:	f007 fe1b 	bl	800a6e8 <memset>
	htim3.Init.Prescaler = 4000-1;
 8002ab2:	f640 739f 	movw	r3, #3999	; 0xf9f
	htim3.Instance = TIM3;
 8002ab6:	4cb3      	ldr	r4, [pc, #716]	; (8002d84 <main+0x49c>)
	htim3.Init.Prescaler = 4000-1;
 8002ab8:	4fb3      	ldr	r7, [pc, #716]	; (8002d88 <main+0x4a0>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aba:	4620      	mov	r0, r4
	htim3.Init.Prescaler = 4000-1;
 8002abc:	e9c4 7300 	strd	r7, r3, [r4]
	htim3.Init.Period = 100-1;
 8002ac0:	2363      	movs	r3, #99	; 0x63
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	60a5      	str	r5, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac8:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002aca:	f004 fb25 	bl	8007118 <HAL_TIM_Base_Init>
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d1a6      	bne.n	8002a20 <main+0x138>
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	a925      	add	r1, sp, #148	; 0x94
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad6:	9625      	str	r6, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ad8:	f004 fc05 	bl	80072e6 <HAL_TIM_ConfigClockSource>
 8002adc:	2800      	cmp	r0, #0
 8002ade:	d19f      	bne.n	8002a20 <main+0x138>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	f004 fb45 	bl	8007170 <HAL_TIM_PWM_Init>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	d19a      	bne.n	8002a20 <main+0x138>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aea:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aee:	a913      	add	r1, sp, #76	; 0x4c
 8002af0:	4620      	mov	r0, r4
 8002af2:	f004 fd2d 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 8002af6:	4602      	mov	r2, r0
 8002af8:	2800      	cmp	r0, #0
 8002afa:	d191      	bne.n	8002a20 <main+0x138>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afc:	2360      	movs	r3, #96	; 0x60
	sConfigOC.Pulse = 0;
 8002afe:	e9cd 3033 	strd	r3, r0, [sp, #204]	; 0xcc
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b02:	2304      	movs	r3, #4
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	9035      	str	r0, [sp, #212]	; 0xd4
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b06:	a933      	add	r1, sp, #204	; 0xcc
 8002b08:	4620      	mov	r0, r4
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002b0a:	9337      	str	r3, [sp, #220]	; 0xdc
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0c:	f004 fb88 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d185      	bne.n	8002a20 <main+0x138>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b14:	2204      	movs	r2, #4
 8002b16:	4620      	mov	r0, r4
 8002b18:	a933      	add	r1, sp, #204	; 0xcc
 8002b1a:	f004 fb81 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	f47f af7e 	bne.w	8002a20 <main+0x138>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b24:	2208      	movs	r2, #8
 8002b26:	4620      	mov	r0, r4
 8002b28:	a933      	add	r1, sp, #204	; 0xcc
 8002b2a:	f004 fb79 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	f47f af76 	bne.w	8002a20 <main+0x138>
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b34:	220c      	movs	r2, #12
 8002b36:	4620      	mov	r0, r4
 8002b38:	a933      	add	r1, sp, #204	; 0xcc
 8002b3a:	f004 fb71 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002b3e:	4605      	mov	r5, r0
 8002b40:	2800      	cmp	r0, #0
 8002b42:	f47f af6d 	bne.w	8002a20 <main+0x138>
	HAL_TIM_MspPostInit(&htim3);
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 fd58 	bl	80035fc <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	4629      	mov	r1, r5
 8002b50:	a81e      	add	r0, sp, #120	; 0x78
 8002b52:	f007 fdc9 	bl	800a6e8 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002b56:	221c      	movs	r2, #28
 8002b58:	4629      	mov	r1, r5
 8002b5a:	a82c      	add	r0, sp, #176	; 0xb0
	htim2.Init.Prescaler = 165-1;
 8002b5c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002b64:	f007 fdc0 	bl	800a6e8 <memset>
	htim2.Init.Prescaler = 165-1;
 8002b68:	23a4      	movs	r3, #164	; 0xa4
	htim2.Instance = TIM2;
 8002b6a:	4c88      	ldr	r4, [pc, #544]	; (8002d8c <main+0x4a4>)
	htim2.Init.Prescaler = 165-1;
 8002b6c:	e9c4 6300 	strd	r6, r3, [r4]
	htim2.Init.Period = 100-1;
 8002b70:	2363      	movs	r3, #99	; 0x63
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b72:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b74:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b7c:	f004 facc 	bl	8007118 <HAL_TIM_Base_Init>
 8002b80:	2800      	cmp	r0, #0
 8002b82:	f47f af4d 	bne.w	8002a20 <main+0x138>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	a91e      	add	r1, sp, #120	; 0x78
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b8e:	931e      	str	r3, [sp, #120]	; 0x78
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b90:	f004 fba9 	bl	80072e6 <HAL_TIM_ConfigClockSource>
 8002b94:	2800      	cmp	r0, #0
 8002b96:	f47f af43 	bne.w	8002a20 <main+0x138>
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f004 fae8 	bl	8007170 <HAL_TIM_PWM_Init>
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f47f af3d 	bne.w	8002a20 <main+0x138>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba6:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002baa:	a911      	add	r1, sp, #68	; 0x44
 8002bac:	4620      	mov	r0, r4
 8002bae:	f004 fccf 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	f47f af34 	bne.w	8002a20 <main+0x138>
	sConfigOC.Pulse = 50;
 8002bb8:	2560      	movs	r5, #96	; 0x60
 8002bba:	2332      	movs	r3, #50	; 0x32
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bbc:	902e      	str	r0, [sp, #184]	; 0xb8
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bbe:	9030      	str	r0, [sp, #192]	; 0xc0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bc0:	220c      	movs	r2, #12
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	a92c      	add	r1, sp, #176	; 0xb0
	sConfigOC.Pulse = 50;
 8002bc6:	e9cd 532c 	strd	r5, r3, [sp, #176]	; 0xb0
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bca:	f004 fb29 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8002bce:	4605      	mov	r5, r0
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	f47f af25 	bne.w	8002a20 <main+0x138>
	HAL_TIM_MspPostInit(&htim2);
 8002bd6:	4620      	mov	r0, r4
 8002bd8:	f000 fd10 	bl	80035fc <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 8002bdc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 8002be0:	486b      	ldr	r0, [pc, #428]	; (8002d90 <main+0x4a8>)
	huart1.Init.BaudRate = 9600;
 8002be2:	4c6c      	ldr	r4, [pc, #432]	; (8002d94 <main+0x4ac>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002be4:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 8002be8:	e9c0 4300 	strd	r4, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bec:	240c      	movs	r4, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 8002bee:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bf0:	e9c0 4505 	strd	r4, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf4:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bf6:	f004 fd79 	bl	80076ec <HAL_UART_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	f47f af0f 	bne.w	8002a20 <main+0x138>
	huart3.Init.BaudRate = 115200;
 8002c02:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart3.Instance = USART3;
 8002c06:	4864      	ldr	r0, [pc, #400]	; (8002d98 <main+0x4b0>)
	huart3.Init.BaudRate = 115200;
 8002c08:	4964      	ldr	r1, [pc, #400]	; (8002d9c <main+0x4b4>)
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002c0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart3.Init.BaudRate = 115200;
 8002c0e:	e9c0 1200 	strd	r1, r2, [r0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002c12:	e9c0 3404 	strd	r3, r4, [r0, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c16:	e9c0 3306 	strd	r3, r3, [r0, #24]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c1a:	f004 fd67 	bl	80076ec <HAL_UART_Init>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	f47f aefe 	bne.w	8002a20 <main+0x138>
	RTC_TimeTypeDef sTime = {0};
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8002c2a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	RTC_DateTypeDef DateToUpdate = {0};
 8002c2e:	930f      	str	r3, [sp, #60]	; 0x3c
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
	hrtc.Instance = RTC;
 8002c34:	4c5a      	ldr	r4, [pc, #360]	; (8002da0 <main+0x4b8>)
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002c36:	4a5b      	ldr	r2, [pc, #364]	; (8002da4 <main+0x4bc>)
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c38:	4620      	mov	r0, r4
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002c3a:	e9c4 2300 	strd	r2, r3, [r4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c42:	60a3      	str	r3, [r4, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c44:	f004 f8a2 	bl	8006d8c <HAL_RTC_Init>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	f47f aee9 	bne.w	8002a20 <main+0x138>
	sTime.Hours = 0x0;
 8002c4e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
	sTime.Seconds = 0x0;
 8002c52:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c56:	2201      	movs	r2, #1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	a90d      	add	r1, sp, #52	; 0x34
 8002c5c:	f003 ffd3 	bl	8006c06 <HAL_RTC_SetTime>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f47f aedd 	bne.w	8002a20 <main+0x138>
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c66:	4b50      	ldr	r3, [pc, #320]	; (8002da8 <main+0x4c0>)
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002c68:	4620      	mov	r0, r4
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	a90f      	add	r1, sp, #60	; 0x3c
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c6e:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002c70:	f004 f81a 	bl	8006ca8 <HAL_RTC_SetDate>
 8002c74:	4604      	mov	r4, r0
 8002c76:	2800      	cmp	r0, #0
 8002c78:	f47f aed2 	bne.w	8002a20 <main+0x138>
	OutputAddPID	(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002c7c:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 8002c80:	e9d9 8900 	ldrd	r8, r9, [r9]
 8002c84:	a73a      	add	r7, pc, #232	; (adr r7, 8002d70 <main+0x488>)
 8002c86:	e9d7 6700 	ldrd	r6, r7, [r7]
	HAL_Delay(1000);
 8002c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c8e:	f002 f8ef 	bl	8004e70 <HAL_Delay>
	HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 3	);// ADC_DMA
 8002c92:	2203      	movs	r2, #3
 8002c94:	4945      	ldr	r1, [pc, #276]	; (8002dac <main+0x4c4>)
 8002c96:	4846      	ldr	r0, [pc, #280]	; (8002db0 <main+0x4c8>)
 8002c98:	f002 f9f2 	bl	8005080 <HAL_ADC_Start_DMA>
	OutputAddDigital(&outPuts,&PrimitiveStates.Lampada		,RELE_1_Pin	,RELE_1_GPIO_Port	,timeoutDesligaLampada	,TIME_LAMPADA	,0);
 8002c9c:	232d      	movs	r3, #45	; 0x2d
 8002c9e:	9301      	str	r3, [sp, #4]
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <main+0x4cc>)
 8002ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ca6:	4944      	ldr	r1, [pc, #272]	; (8002db8 <main+0x4d0>)
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4844      	ldr	r0, [pc, #272]	; (8002dbc <main+0x4d4>)
 8002cac:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <main+0x4d8>)
 8002cae:	9402      	str	r4, [sp, #8]
 8002cb0:	f7ff fb7a 	bl	80023a8 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.Cooler		,RELE_2_Pin	,RELE_2_GPIO_Port	,0	,0	,0);
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <main+0x4dc>)
 8002cb8:	4943      	ldr	r1, [pc, #268]	; (8002dc8 <main+0x4e0>)
 8002cba:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002cbe:	483f      	ldr	r0, [pc, #252]	; (8002dbc <main+0x4d4>)
 8002cc0:	9400      	str	r4, [sp, #0]
 8002cc2:	f7ff fb71 	bl	80023a8 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedLastro	,RELE_3_Pin	,RELE_3_GPIO_Port	,0	,0	,0);
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	4b3e      	ldr	r3, [pc, #248]	; (8002dc4 <main+0x4dc>)
 8002cca:	4940      	ldr	r1, [pc, #256]	; (8002dcc <main+0x4e4>)
 8002ccc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002cd0:	483a      	ldr	r0, [pc, #232]	; (8002dbc <main+0x4d4>)
 8002cd2:	9400      	str	r4, [sp, #0]
 8002cd4:	f7ff fb68 	bl	80023a8 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedTeto		,RELE_4_Pin	,RELE_4_GPIO_Port	,0	,0	,0);
 8002cd8:	2220      	movs	r2, #32
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <main+0x4dc>)
 8002cdc:	493c      	ldr	r1, [pc, #240]	; (8002dd0 <main+0x4e8>)
 8002cde:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002ce2:	4836      	ldr	r0, [pc, #216]	; (8002dbc <main+0x4d4>)
 8002ce4:	9400      	str	r4, [sp, #0]
 8002ce6:	f7ff fb5f 	bl	80023a8 <OutputAddDigital>
	OutputAddDigital(&outPuts,&PrimitiveStates.LedVerde		,RELE_5_Pin	,RELE_5_GPIO_Port	,0	,0	,0);
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <main+0x4dc>)
 8002cee:	4939      	ldr	r1, [pc, #228]	; (8002dd4 <main+0x4ec>)
 8002cf0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002cf4:	4831      	ldr	r0, [pc, #196]	; (8002dbc <main+0x4d4>)
 8002cf6:	9400      	str	r4, [sp, #0]
 8002cf8:	f7ff fb56 	bl	80023a8 <OutputAddDigital>
	OutputAddPID	(&outPuts,&PrimitiveStates.Teto		,&htim3	,TIM_CHANNEL_4	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002cfc:	2503      	movs	r5, #3
 8002cfe:	f44f 7a16 	mov.w	sl, #600	; 0x258
 8002d02:	2200      	movs	r2, #0
 8002d04:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8002dd8 <main+0x4f0>
 8002d08:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <main+0x4f4>)
 8002d0a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002d0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002d12:	e9cd 2300 	strd	r2, r3, [sp]
 8002d16:	e9cd 5a06 	strd	r5, sl, [sp, #24]
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <main+0x49c>)
 8002d1e:	4930      	ldr	r1, [pc, #192]	; (8002de0 <main+0x4f8>)
 8002d20:	4826      	ldr	r0, [pc, #152]	; (8002dbc <main+0x4d4>)
 8002d22:	f8cd b020 	str.w	fp, [sp, #32]
 8002d26:	f7ff fc07 	bl	8002538 <OutputAddPID>
	OutputAddPID	(&outPuts,&PrimitiveStates.Lastro	,&htim3	,TIM_CHANNEL_3	,STD_KP	,STD_KI	,STD_KD	,STD_HISTERESE	,TIME_MAX_AQUECIMENTO	,timeoutAquecimento);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <main+0x4f4>)
 8002d2e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002d32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002d36:	e9cd 2300 	strd	r2, r3, [sp]
 8002d3a:	492a      	ldr	r1, [pc, #168]	; (8002de4 <main+0x4fc>)
 8002d3c:	2308      	movs	r3, #8
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <main+0x49c>)
 8002d40:	9506      	str	r5, [sp, #24]
 8002d42:	e9cd ab07 	strd	sl, fp, [sp, #28]
 8002d46:	481d      	ldr	r0, [pc, #116]	; (8002dbc <main+0x4d4>)
 8002d48:	f7ff fbf6 	bl	8002538 <OutputAddPID>
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	a80d      	add	r0, sp, #52	; 0x34
	osSemaphoreDef(BinSemUartTx);
 8002d50:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002d54:	f005 f976 	bl	8008044 <osSemaphoreCreate>
 8002d58:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <main+0x500>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002d5a:	4622      	mov	r2, r4
	BinSemUartTxHandle = osSemaphoreCreate(osSemaphore(BinSemUartTx), 1);
 8002d5c:	6018      	str	r0, [r3, #0]
	osTimerDef(timer10ms, CBTimer10ms);
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <main+0x504>)
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002d60:	2101      	movs	r1, #1
 8002d62:	a80f      	add	r0, sp, #60	; 0x3c
 8002d64:	e044      	b.n	8002df0 <main+0x508>
 8002d66:	bf00      	nop
 8002d68:	33333333 	.word	0x33333333
 8002d6c:	3fd33333 	.word	0x3fd33333
 8002d70:	47ae147b 	.word	0x47ae147b
 8002d74:	3f847ae1 	.word	0x3f847ae1
 8002d78:	20001014 	.word	0x20001014
 8002d7c:	40005400 	.word	0x40005400
 8002d80:	000186a0 	.word	0x000186a0
 8002d84:	200010c4 	.word	0x200010c4
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	2000107c 	.word	0x2000107c
 8002d90:	2000110c 	.word	0x2000110c
 8002d94:	40013800 	.word	0x40013800
 8002d98:	20001154 	.word	0x20001154
 8002d9c:	40004800 	.word	0x40004800
 8002da0:	20001068 	.word	0x20001068
 8002da4:	40002800 	.word	0x40002800
 8002da8:	00010101 	.word	0x00010101
 8002dac:	20000f0c 	.word	0x20000f0c
 8002db0:	20000f18 	.word	0x20000f18
 8002db4:	08002625 	.word	0x08002625
 8002db8:	200007e8 	.word	0x200007e8
 8002dbc:	200011a0 	.word	0x200011a0
 8002dc0:	40010800 	.word	0x40010800
 8002dc4:	40010c00 	.word	0x40010c00
 8002dc8:	20000800 	.word	0x20000800
 8002dcc:	20000848 	.word	0x20000848
 8002dd0:	20000830 	.word	0x20000830
 8002dd4:	20000818 	.word	0x20000818
 8002dd8:	080025c9 	.word	0x080025c9
 8002ddc:	403e0000 	.word	0x403e0000
 8002de0:	20000860 	.word	0x20000860
 8002de4:	200008a8 	.word	0x200008a8
 8002de8:	200007d0 	.word	0x200007d0
 8002dec:	08002631 	.word	0x08002631
	osTimerDef(timer10ms, CBTimer10ms);
 8002df0:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002df4:	f005 f898 	bl	8007f28 <osTimerCreate>
 8002df8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002ef0 <main+0x608>
	osTimerDef(timer1000ms, CBTimer1000ms);
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <main+0x60c>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002dfe:	4622      	mov	r2, r4
 8002e00:	2101      	movs	r1, #1
	timer10msHandle = osTimerCreate(osTimer(timer10ms), osTimerPeriodic, NULL);
 8002e02:	f8c8 0000 	str.w	r0, [r8]
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002e06:	a811      	add	r0, sp, #68	; 0x44
	osTimerDef(timer1000ms, CBTimer1000ms);
 8002e08:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002e0c:	f005 f88c 	bl	8007f28 <osTimerCreate>
	osMessageQDef(FilaEeprom, 5, uint8_t);
 8002e10:	4d39      	ldr	r5, [pc, #228]	; (8002ef8 <main+0x610>)
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002e12:	4f3a      	ldr	r7, [pc, #232]	; (8002efc <main+0x614>)
	osMessageQDef(FilaEeprom, 5, uint8_t);
 8002e14:	ae13      	add	r6, sp, #76	; 0x4c
	timer1000msHandle = osTimerCreate(osTimer(timer1000ms), osTimerPeriodic, NULL);
 8002e16:	6038      	str	r0, [r7, #0]
	osMessageQDef(FilaEeprom, 5, uint8_t);
 8002e18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e1c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002e20:	4621      	mov	r1, r4
 8002e22:	4630      	mov	r0, r6
 8002e24:	f005 f931 	bl	800808a <osMessageCreate>
 8002e28:	4b35      	ldr	r3, [pc, #212]	; (8002f00 <main+0x618>)
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 8002e2a:	f105 0c10 	add.w	ip, r5, #16
 8002e2e:	ae17      	add	r6, sp, #92	; 0x5c
	FilaEepromHandle = osMessageCreate(osMessageQ(FilaEeprom), NULL);
 8002e30:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskBluetooth, StartBluetooth, osPriorityHigh, 0, 256);
 8002e32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e38:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002e3c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002e40:	4621      	mov	r1, r4
 8002e42:	a817      	add	r0, sp, #92	; 0x5c
 8002e44:	f005 f834 	bl	8007eb0 <osThreadCreate>
 8002e48:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <main+0x61c>)
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002e4a:	f105 0c2c 	add.w	ip, r5, #44	; 0x2c
 8002e4e:	ae1e      	add	r6, sp, #120	; 0x78
	TaskBluetoothHandle = osThreadCreate(osThread(TaskBluetooth), NULL);
 8002e50:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8002e52:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e58:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002e5c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002e60:	4621      	mov	r1, r4
 8002e62:	a81e      	add	r0, sp, #120	; 0x78
 8002e64:	f005 f824 	bl	8007eb0 <osThreadCreate>
 8002e68:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8002f08 <main+0x620>
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002e6c:	f105 0c48 	add.w	ip, r5, #72	; 0x48
 8002e70:	ae25      	add	r6, sp, #148	; 0x94
	TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8002e72:	f8c9 0000 	str.w	r0, [r9]
	osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8002e76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e7c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002e80:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002e84:	4621      	mov	r1, r4
 8002e86:	a825      	add	r0, sp, #148	; 0x94
 8002e88:	f005 f812 	bl	8007eb0 <osThreadCreate>
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <main+0x624>)
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002e8e:	f105 0c64 	add.w	ip, r5, #100	; 0x64
 8002e92:	ae2c      	add	r6, sp, #176	; 0xb0
	TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8002e94:	6018      	str	r0, [r3, #0]
	osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8002e96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002e9a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002e9c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8002ea0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	a82c      	add	r0, sp, #176	; 0xb0
 8002ea8:	f005 f802 	bl	8007eb0 <osThreadCreate>
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <main+0x628>)
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002eae:	ae33      	add	r6, sp, #204	; 0xcc
 8002eb0:	3580      	adds	r5, #128	; 0x80
	TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8002eb2:	6018      	str	r0, [r3, #0]
	osThreadDef(TaskEeprom, StartEeprom, osPriorityNormal, 0, 128);
 8002eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002eb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ebc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	TaskEepromHandle = osThreadCreate(osThread(TaskEeprom), NULL);
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	a833      	add	r0, sp, #204	; 0xcc
 8002ec4:	f004 fff4 	bl	8007eb0 <osThreadCreate>
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <main+0x62c>)
 8002eca:	6018      	str	r0, [r3, #0]
	osThreadSuspend(TaskTemperaturaHandle); //só é liberada após taskeeprom
 8002ecc:	f8d9 0000 	ldr.w	r0, [r9]
 8002ed0:	f005 f94f 	bl	8008172 <osThreadSuspend>
	osTimerStart(timer10msHandle,10);
 8002ed4:	210a      	movs	r1, #10
 8002ed6:	f8d8 0000 	ldr.w	r0, [r8]
 8002eda:	f005 f83d 	bl	8007f58 <osTimerStart>
	osTimerStart(timer1000msHandle,1000);
 8002ede:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ee2:	6838      	ldr	r0, [r7, #0]
 8002ee4:	f005 f838 	bl	8007f58 <osTimerStart>
	osKernelStart();
 8002ee8:	f004 ffdd 	bl	8007ea6 <osKernelStart>
	while (1)
 8002eec:	e7fe      	b.n	8002eec <main+0x604>
 8002eee:	bf00      	nop
 8002ef0:	200011d8 	.word	0x200011d8
 8002ef4:	0800273d 	.word	0x0800273d
 8002ef8:	0800b524 	.word	0x0800b524
 8002efc:	200011d4 	.word	0x200011d4
 8002f00:	200007e0 	.word	0x200007e0
 8002f04:	200008f8 	.word	0x200008f8
 8002f08:	20000ba4 	.word	0x20000ba4
 8002f0c:	20000b9c 	.word	0x20000b9c
 8002f10:	20000e48 	.word	0x20000e48
 8002f14:	20000ba0 	.word	0x20000ba0

08002f18 <Queue_is_full>:
        free(me);
    }
}

int  Queue_is_full  (Queue* const me) {
    return (me->head + 1) % QUEUE_SIZE == me->tail;
 8002f18:	220a      	movs	r2, #10
 8002f1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002f1e:	3301      	adds	r3, #1
 8002f20:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f24:	fb02 3311 	mls	r3, r2, r1, r3
}
 8002f28:	1a1b      	subs	r3, r3, r0
 8002f2a:	4258      	negs	r0, r3
 8002f2c:	4158      	adcs	r0, r3
 8002f2e:	4770      	bx	lr

08002f30 <Queue_is_empty>:

int  Queue_is_empty (Queue* const me) {
    return (me->head == me->tail);
 8002f30:	e9d0 200a 	ldrd	r2, r0, [r0, #40]	; 0x28
}
 8002f34:	1a13      	subs	r3, r2, r0
 8002f36:	4258      	negs	r0, r3
 8002f38:	4158      	adcs	r0, r3
 8002f3a:	4770      	bx	lr

08002f3c <Queue_get_size>:

int  Queue_get_size (Queue* const me) {
    return me->size;
}
 8002f3c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002f3e:	4770      	bx	lr

08002f40 <Queue_remove>:
        me->head = (me->head + 1) % QUEUE_SIZE;
        ++me->size;
    }
}

int  Queue_remove   (Queue* const me) {
 8002f40:	b510      	push	{r4, lr}
    int value = -9999; // sentinel value
    if (!me->is_empty(me)) {
 8002f42:	6b83      	ldr	r3, [r0, #56]	; 0x38
int  Queue_remove   (Queue* const me) {
 8002f44:	4604      	mov	r4, r0
    if (!me->is_empty(me)) {
 8002f46:	4798      	blx	r3
 8002f48:	b968      	cbnz	r0, 8002f66 <Queue_remove+0x26>
        value = me->buffer[me->tail];
        me->tail = (me->tail + 1) % QUEUE_SIZE;
 8002f4a:	220a      	movs	r2, #10
        value = me->buffer[me->tail];
 8002f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f4e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
        me->tail = (me->tail + 1) % QUEUE_SIZE;
 8002f52:	3301      	adds	r3, #1
 8002f54:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f58:	fb02 3311 	mls	r3, r2, r1, r3
 8002f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
        --me->size;
 8002f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f60:	3b01      	subs	r3, #1
 8002f62:	6323      	str	r3, [r4, #48]	; 0x30
    }
    return value;
}
 8002f64:	bd10      	pop	{r4, pc}
    int value = -9999; // sentinel value
 8002f66:	4801      	ldr	r0, [pc, #4]	; (8002f6c <Queue_remove+0x2c>)
    return value;
 8002f68:	e7fc      	b.n	8002f64 <Queue_remove+0x24>
 8002f6a:	bf00      	nop
 8002f6c:	ffffd8f1 	.word	0xffffd8f1

08002f70 <Queue_insert>:
void Queue_insert   (Queue* const me, int k) {
 8002f70:	b538      	push	{r3, r4, r5, lr}
    if (!me->is_full(me)) {
 8002f72:	6b43      	ldr	r3, [r0, #52]	; 0x34
void Queue_insert   (Queue* const me, int k) {
 8002f74:	4604      	mov	r4, r0
 8002f76:	460d      	mov	r5, r1
    if (!me->is_full(me)) {
 8002f78:	4798      	blx	r3
 8002f7a:	b960      	cbnz	r0, 8002f96 <Queue_insert+0x26>
        me->head = (me->head + 1) % QUEUE_SIZE;
 8002f7c:	220a      	movs	r2, #10
        me->buffer[me->head] = k;
 8002f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f80:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        me->head = (me->head + 1) % QUEUE_SIZE;
 8002f84:	3301      	adds	r3, #1
 8002f86:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f8a:	fb02 3311 	mls	r3, r2, r1, r3
 8002f8e:	62a3      	str	r3, [r4, #40]	; 0x28
        ++me->size;
 8002f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f92:	3301      	adds	r3, #1
 8002f94:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002f96:	bd38      	pop	{r3, r4, r5, pc}

08002f98 <Queue_create>:
Queue* Queue_create() {
 8002f98:	b508      	push	{r3, lr}
    Queue* me = (Queue*) malloc(sizeof(Queue));
 8002f9a:	2048      	movs	r0, #72	; 0x48
 8002f9c:	f007 f8b4 	bl	800a108 <malloc>
    if (me == NULL)
 8002fa0:	b168      	cbz	r0, 8002fbe <Queue_create+0x26>
    me->head  = 0;
 8002fa2:	2300      	movs	r3, #0
    me->tail  = 0;
 8002fa4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    me->size  = 0;
 8002fa8:	6303      	str	r3, [r0, #48]	; 0x30
    me->is_full    = pFn_is_full;
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <Queue_create+0x28>)
 8002fac:	6343      	str	r3, [r0, #52]	; 0x34
    me->is_empty   = pFn_is_empty;
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <Queue_create+0x2c>)
 8002fb0:	6383      	str	r3, [r0, #56]	; 0x38
    me->get_size   = pFn_get_size;
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <Queue_create+0x30>)
 8002fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    me->insert     = pFn_insert;
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <Queue_create+0x34>)
 8002fb8:	6403      	str	r3, [r0, #64]	; 0x40
    me->remove     = pFn_remove;
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <Queue_create+0x38>)
 8002fbc:	6443      	str	r3, [r0, #68]	; 0x44
}
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	08002f19 	.word	0x08002f19
 8002fc4:	08002f31 	.word	0x08002f31
 8002fc8:	08002f3d 	.word	0x08002f3d
 8002fcc:	08002f71 	.word	0x08002f71
 8002fd0:	08002f41 	.word	0x08002f41

08002fd4 <PID_Init>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002fd4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002fd6:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	uPID->OutputSum = *uPID->MyOutput;
 8002fda:	e9d3 6700 	ldrd	r6, r7, [r3]
	uPID->LastInput = *uPID->MyInput;
	
	if (uPID->OutputSum > uPID->OutMax)
 8002fde:	e9d0 891a 	ldrd	r8, r9, [r0, #104]	; 0x68
	uPID->OutputSum = *uPID->MyOutput;
 8002fe2:	e9c0 6714 	strd	r6, r7, [r0, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 8002fe6:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8002fe8:	4604      	mov	r4, r0
	uPID->LastInput = *uPID->MyInput;
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (uPID->OutputSum > uPID->OutMax)
 8002fee:	4639      	mov	r1, r7
	uPID->LastInput = *uPID->MyInput;
 8002ff0:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
	if (uPID->OutputSum > uPID->OutMax)
 8002ff4:	4642      	mov	r2, r8
 8002ff6:	464b      	mov	r3, r9
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	f7fd fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8002ffe:	b110      	cbz	r0, 8003006 <PID_Init+0x32>
	{
		uPID->OutputSum = uPID->OutMax;
	}
	else if (uPID->OutputSum < uPID->OutMin)
	{
		uPID->OutputSum = uPID->OutMin;
 8003000:	e9c4 8914 	strd	r8, r9, [r4, #80]	; 0x50
	}
	else { }
	
}
 8003004:	e009      	b.n	800301a <PID_Init+0x46>
	else if (uPID->OutputSum < uPID->OutMin)
 8003006:	e9d4 8918 	ldrd	r8, r9, [r4, #96]	; 0x60
 800300a:	4630      	mov	r0, r6
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	4639      	mov	r1, r7
 8003012:	f7fd fcd3 	bl	80009bc <__aeabi_dcmplt>
 8003016:	2800      	cmp	r0, #0
 8003018:	d1f2      	bne.n	8003000 <PID_Init+0x2c>
}
 800301a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}

0800301e <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 800301e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8003022:	7843      	ldrb	r3, [r0, #1]
{
 8003024:	4604      	mov	r4, r0
 8003026:	b089      	sub	sp, #36	; 0x24
	if (!uPID->InAuto)
 8003028:	b91b      	cbnz	r3, 8003032 <PID_Compute+0x14>
	{
		return _FALSE;
 800302a:	2000      	movs	r0, #0
	else
	{
		return _FALSE;
	}
	
}
 800302c:	b009      	add	sp, #36	; 0x24
 800302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	now        = GetTime();
 8003032:	f001 ff17 	bl	8004e64 <HAL_GetTick>
	timeChange = (now - uPID->LastTime);
 8003036:	6863      	ldr	r3, [r4, #4]
	if (timeChange >= uPID->SampleTime)
 8003038:	68a2      	ldr	r2, [r4, #8]
	timeChange = (now - uPID->LastTime);
 800303a:	1ac3      	subs	r3, r0, r3
	if (timeChange >= uPID->SampleTime)
 800303c:	429a      	cmp	r2, r3
	now        = GetTime();
 800303e:	4605      	mov	r5, r0
	if (timeChange >= uPID->SampleTime)
 8003040:	d8f3      	bhi.n	800302a <PID_Compute+0xc>
		input   = *uPID->MyInput;
 8003042:	6c23      	ldr	r3, [r4, #64]	; 0x40
		error   = *uPID->MySetpoint - input;
 8003044:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		input   = *uPID->MyInput;
 8003046:	e9d3 ab00 	ldrd	sl, fp, [r3]
		error   = *uPID->MySetpoint - input;
 800304a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800304e:	4652      	mov	r2, sl
 8003050:	465b      	mov	r3, fp
 8003052:	f7fd f889 	bl	8000168 <__aeabi_dsub>
		dInput  = (input - uPID->LastInput);
 8003056:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
		error   = *uPID->MySetpoint - input;
 800305a:	e9cd 0104 	strd	r0, r1, [sp, #16]
		dInput  = (input - uPID->LastInput);
 800305e:	4650      	mov	r0, sl
 8003060:	4659      	mov	r1, fp
 8003062:	f7fd f881 	bl	8000168 <__aeabi_dsub>
		uPID->OutputSum     += (uPID->Ki * error);
 8003066:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		dInput  = (input - uPID->LastInput);
 800306a:	e9cd 0106 	strd	r0, r1, [sp, #24]
		uPID->OutputSum     += (uPID->Ki * error);
 800306e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003072:	f7fd fa31 	bl	80004d8 <__aeabi_dmul>
 8003076:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
 800307a:	f7fd f877 	bl	800016c <__adddf3>
 800307e:	4606      	mov	r6, r0
 8003080:	460f      	mov	r7, r1
		if (!uPID->POnE)
 8003082:	7823      	ldrb	r3, [r4, #0]
		uPID->OutputSum     += (uPID->Ki * error);
 8003084:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (!uPID->POnE)
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	b96b      	cbnz	r3, 80030a8 <PID_Compute+0x8a>
			uPID->OutputSum -= uPID->Kp * dInput;
 800308c:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8003090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003094:	f7fd fa20 	bl	80004d8 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4630      	mov	r0, r6
 800309e:	4639      	mov	r1, r7
 80030a0:	f7fd f862 	bl	8000168 <__aeabi_dsub>
 80030a4:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
		if (uPID->OutputSum > uPID->OutMax)
 80030a8:	e9d4 8914 	ldrd	r8, r9, [r4, #80]	; 0x50
 80030ac:	e9d4 671a 	ldrd	r6, r7, [r4, #104]	; 0x68
 80030b0:	4640      	mov	r0, r8
 80030b2:	4632      	mov	r2, r6
 80030b4:	463b      	mov	r3, r7
 80030b6:	4649      	mov	r1, r9
 80030b8:	f7fd fc9e 	bl	80009f8 <__aeabi_dcmpgt>
 80030bc:	2800      	cmp	r0, #0
 80030be:	d038      	beq.n	8003132 <PID_Compute+0x114>
			uPID->OutputSum = uPID->OutMax;
 80030c0:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
		if (uPID->POnE)
 80030c4:	9b01      	ldr	r3, [sp, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d042      	beq.n	8003150 <PID_Compute+0x132>
			output = uPID->Kp * error;
 80030ca:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80030ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030d2:	f7fd fa01 	bl	80004d8 <__aeabi_dmul>
 80030d6:	4680      	mov	r8, r0
 80030d8:	4689      	mov	r9, r1
		output += uPID->OutputSum - uPID->Kd * dInput;
 80030da:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80030de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030e2:	f7fd f9f9 	bl	80004d8 <__aeabi_dmul>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
 80030ee:	f7fd f83b 	bl	8000168 <__aeabi_dsub>
 80030f2:	4642      	mov	r2, r8
 80030f4:	464b      	mov	r3, r9
 80030f6:	f7fd f839 	bl	800016c <__adddf3>
 80030fa:	4680      	mov	r8, r0
 80030fc:	4689      	mov	r9, r1
		if (output > uPID->OutMax)
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4630      	mov	r0, r6
 8003104:	4639      	mov	r1, r7
 8003106:	f7fd fc59 	bl	80009bc <__aeabi_dcmplt>
 800310a:	b950      	cbnz	r0, 8003122 <PID_Compute+0x104>
		else if (output < uPID->OutMin)
 800310c:	e9d4 6718 	ldrd	r6, r7, [r4, #96]	; 0x60
 8003110:	4642      	mov	r2, r8
 8003112:	464b      	mov	r3, r9
 8003114:	4630      	mov	r0, r6
 8003116:	4639      	mov	r1, r7
 8003118:	f7fd fc6e 	bl	80009f8 <__aeabi_dcmpgt>
 800311c:	b908      	cbnz	r0, 8003122 <PID_Compute+0x104>
		output += uPID->OutputSum - uPID->Kd * dInput;
 800311e:	4646      	mov	r6, r8
 8003120:	464f      	mov	r7, r9
		*uPID->MyOutput = output;
 8003122:	6c63      	ldr	r3, [r4, #68]	; 0x44
		return _TRUE;
 8003124:	2001      	movs	r0, #1
		*uPID->MyOutput = output;
 8003126:	e9c3 6700 	strd	r6, r7, [r3]
		uPID->LastInput = input;
 800312a:	e9c4 ab16 	strd	sl, fp, [r4, #88]	; 0x58
		uPID->LastTime = now;
 800312e:	6065      	str	r5, [r4, #4]
		return _TRUE;
 8003130:	e77c      	b.n	800302c <PID_Compute+0xe>
		else if (uPID->OutputSum < uPID->OutMin)
 8003132:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800313e:	f7fd fc3d 	bl	80009bc <__aeabi_dcmplt>
 8003142:	2800      	cmp	r0, #0
 8003144:	d0be      	beq.n	80030c4 <PID_Compute+0xa6>
			uPID->OutputSum = uPID->OutMin;
 8003146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800314a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 800314e:	e7b9      	b.n	80030c4 <PID_Compute+0xa6>
			output = 0;
 8003150:	f04f 0800 	mov.w	r8, #0
 8003154:	f04f 0900 	mov.w	r9, #0
 8003158:	e7bf      	b.n	80030da <PID_Compute+0xbc>

0800315a <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800315a:	2901      	cmp	r1, #1
{
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4604      	mov	r4, r0
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003160:	bf0c      	ite	eq
 8003162:	2501      	moveq	r5, #1
 8003164:	2500      	movne	r5, #0
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003166:	d103      	bne.n	8003170 <PID_SetMode+0x16>
 8003168:	7843      	ldrb	r3, [r0, #1]
 800316a:	b90b      	cbnz	r3, 8003170 <PID_SetMode+0x16>
	{
		PID_Init(uPID);
 800316c:	f7ff ff32 	bl	8002fd4 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8003170:	7065      	strb	r5, [r4, #1]
	
}
 8003172:	bd38      	pop	{r3, r4, r5, pc}

08003174 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003178:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4682      	mov	sl, r0
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003182:	4632      	mov	r2, r6
 8003184:	463b      	mov	r3, r7
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd fc2b 	bl	80009e4 <__aeabi_dcmpge>
 800318e:	2800      	cmp	r0, #0
 8003190:	d137      	bne.n	8003202 <PID_SetOutputLimits+0x8e>
	
	uPID->OutMin = Min;
	uPID->OutMax = Max;
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8003192:	f89a 3001 	ldrb.w	r3, [sl, #1]
	uPID->OutMin = Min;
 8003196:	e9ca 4518 	strd	r4, r5, [sl, #96]	; 0x60
	uPID->OutMax = Max;
 800319a:	e9ca 671a 	strd	r6, r7, [sl, #104]	; 0x68
	if (uPID->InAuto)
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02f      	beq.n	8003202 <PID_SetOutputLimits+0x8e>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80031a2:	f8da b044 	ldr.w	fp, [sl, #68]	; 0x44
 80031a6:	4632      	mov	r2, r6
 80031a8:	e9db 8900 	ldrd	r8, r9, [fp]
 80031ac:	463b      	mov	r3, r7
 80031ae:	4640      	mov	r0, r8
 80031b0:	4649      	mov	r1, r9
 80031b2:	f7fd fc21 	bl	80009f8 <__aeabi_dcmpgt>
 80031b6:	b178      	cbz	r0, 80031d8 <PID_SetOutputLimits+0x64>
		{
			*uPID->MyOutput = uPID->OutMax;
 80031b8:	e9cb 6700 	strd	r6, r7, [fp]
			*uPID->MyOutput = uPID->OutMin;
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80031bc:	e9da 6714 	ldrd	r6, r7, [sl, #80]	; 0x50
 80031c0:	e9da 451a 	ldrd	r4, r5, [sl, #104]	; 0x68
 80031c4:	4630      	mov	r0, r6
 80031c6:	4622      	mov	r2, r4
 80031c8:	462b      	mov	r3, r5
 80031ca:	4639      	mov	r1, r7
 80031cc:	f7fd fc14 	bl	80009f8 <__aeabi_dcmpgt>
 80031d0:	b168      	cbz	r0, 80031ee <PID_SetOutputLimits+0x7a>
		{
			uPID->OutputSum = uPID->OutMax;
		}
		else if (uPID->OutputSum < uPID->OutMin)
		{
			uPID->OutputSum = uPID->OutMin;
 80031d2:	e9ca 4514 	strd	r4, r5, [sl, #80]	; 0x50
		}
		else { }
 80031d6:	e014      	b.n	8003202 <PID_SetOutputLimits+0x8e>
		else if (*uPID->MyOutput < uPID->OutMin)
 80031d8:	4622      	mov	r2, r4
 80031da:	462b      	mov	r3, r5
 80031dc:	4640      	mov	r0, r8
 80031de:	4649      	mov	r1, r9
 80031e0:	f7fd fbec 	bl	80009bc <__aeabi_dcmplt>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d0e9      	beq.n	80031bc <PID_SetOutputLimits+0x48>
			*uPID->MyOutput = uPID->OutMin;
 80031e8:	e9cb 4500 	strd	r4, r5, [fp]
 80031ec:	e7e6      	b.n	80031bc <PID_SetOutputLimits+0x48>
		else if (uPID->OutputSum < uPID->OutMin)
 80031ee:	e9da 4518 	ldrd	r4, r5, [sl, #96]	; 0x60
 80031f2:	4630      	mov	r0, r6
 80031f4:	4622      	mov	r2, r4
 80031f6:	462b      	mov	r3, r5
 80031f8:	4639      	mov	r1, r7
 80031fa:	f7fd fbdf 	bl	80009bc <__aeabi_dcmplt>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1e7      	bne.n	80031d2 <PID_SetOutputLimits+0x5e>
		
	}
	
}
 8003202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003208 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800320c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8003210:	4614      	mov	r4, r2
 8003212:	461d      	mov	r5, r3
 8003214:	4682      	mov	sl, r0
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003216:	2200      	movs	r2, #0
 8003218:	2300      	movs	r3, #0
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
{
 800321e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003222:	f7fd fbcb 	bl	80009bc <__aeabi_dcmplt>
 8003226:	2800      	cmp	r0, #0
 8003228:	d15a      	bne.n	80032e0 <PID_SetTunings2+0xd8>
 800322a:	2200      	movs	r2, #0
 800322c:	2300      	movs	r3, #0
 800322e:	4640      	mov	r0, r8
 8003230:	4649      	mov	r1, r9
 8003232:	f7fd fbc3 	bl	80009bc <__aeabi_dcmplt>
 8003236:	2800      	cmp	r0, #0
 8003238:	d152      	bne.n	80032e0 <PID_SetTunings2+0xd8>
 800323a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800323e:	2200      	movs	r2, #0
 8003240:	2300      	movs	r3, #0
 8003242:	f7fd fbbb 	bl	80009bc <__aeabi_dcmplt>
 8003246:	2800      	cmp	r0, #0
 8003248:	d14a      	bne.n	80032e0 <PID_SetTunings2+0xd8>
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800324a:	1e73      	subs	r3, r6, #1
	uPID->POn    = POn;
 800324c:	f88a 6002 	strb.w	r6, [sl, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8003250:	425e      	negs	r6, r3
 8003252:	415e      	adcs	r6, r3

	uPID->DispKp = Kp;
	uPID->DispKi = Ki;
 8003254:	e9ca 8906 	strd	r8, r9, [sl, #24]
	uPID->DispKd = Kd;
 8003258:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800325c:	f88a 6000 	strb.w	r6, [sl]
	uPID->DispKd = Kd;
 8003260:	e9ca 2308 	strd	r2, r3, [sl, #32]
	uPID->DispKp = Kp;
 8003264:	e9ca 4504 	strd	r4, r5, [sl, #16]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8003268:	f8da 0008 	ldr.w	r0, [sl, #8]
 800326c:	f7fd f8ba 	bl	80003e4 <__aeabi_ui2d>
 8003270:	2200      	movs	r2, #0
 8003272:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <PID_SetTunings2+0xdc>)
 8003274:	f7fd fa5a 	bl	800072c <__aeabi_ddiv>
	
	uPID->Kp = Kp;
 8003278:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800327c:	4606      	mov	r6, r0
 800327e:	460f      	mov	r7, r1
	uPID->Ki = Ki * SampleTimeInSec;
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4640      	mov	r0, r8
 8003286:	4649      	mov	r1, r9
 8003288:	f7fd f926 	bl	80004d8 <__aeabi_dmul>
 800328c:	4680      	mov	r8, r0
 800328e:	4689      	mov	r9, r1
	uPID->Kd = Kd / SampleTimeInSec;
 8003290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003294:	463b      	mov	r3, r7
 8003296:	4632      	mov	r2, r6
	uPID->Ki = Ki * SampleTimeInSec;
 8003298:	e9ca 890c 	strd	r8, r9, [sl, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800329c:	f7fd fa46 	bl	800072c <__aeabi_ddiv>
 80032a0:	4606      	mov	r6, r0
 80032a2:	460f      	mov	r7, r1
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80032a4:	f89a 3003 	ldrb.w	r3, [sl, #3]
	uPID->Kd = Kd / SampleTimeInSec;
 80032a8:	e9ca 670e 	strd	r6, r7, [sl, #56]	; 0x38
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d117      	bne.n	80032e0 <PID_SetTunings2+0xd8>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80032b0:	4622      	mov	r2, r4
 80032b2:	462b      	mov	r3, r5
 80032b4:	2000      	movs	r0, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	f7fc ff56 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 80032bc:	4642      	mov	r2, r8
		uPID->Kp = (0 - uPID->Kp);
 80032be:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80032c2:	464b      	mov	r3, r9
 80032c4:	2000      	movs	r0, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	f7fc ff4e 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 80032cc:	4632      	mov	r2, r6
		uPID->Ki = (0 - uPID->Ki);
 80032ce:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80032d2:	463b      	mov	r3, r7
 80032d4:	2000      	movs	r0, #0
 80032d6:	2100      	movs	r1, #0
 80032d8:	f7fc ff46 	bl	8000168 <__aeabi_dsub>
 80032dc:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
		
	}
	
}
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e4:	408f4000 	.word	0x408f4000

080032e8 <PID_SetTunings>:
{
 80032e8:	b530      	push	{r4, r5, lr}
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80032ea:	7881      	ldrb	r1, [r0, #2]
{
 80032ec:	b087      	sub	sp, #28
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80032ee:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 80032f2:	9104      	str	r1, [sp, #16]
 80032f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80032f8:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80032fc:	e9cd 4500 	strd	r4, r5, [sp]
 8003300:	f7ff ff82 	bl	8003208 <PID_SetTunings2>
}
 8003304:	b007      	add	sp, #28
 8003306:	bd30      	pop	{r4, r5, pc}

08003308 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8003308:	b538      	push	{r3, r4, r5, lr}
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 800330a:	7843      	ldrb	r3, [r0, #1]
{
 800330c:	4604      	mov	r4, r0
 800330e:	460d      	mov	r5, r1
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003310:	b1d3      	cbz	r3, 8003348 <PID_SetControllerDirection+0x40>
 8003312:	78c3      	ldrb	r3, [r0, #3]
 8003314:	428b      	cmp	r3, r1
 8003316:	d017      	beq.n	8003348 <PID_SetControllerDirection+0x40>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8003318:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 800331c:	2100      	movs	r1, #0
 800331e:	2000      	movs	r0, #0
 8003320:	f7fc ff22 	bl	8000168 <__aeabi_dsub>
		uPID->Ki = (0 - uPID->Ki);
 8003324:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
		uPID->Kp = (0 - uPID->Kp);
 8003328:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800332c:	2000      	movs	r0, #0
 800332e:	2100      	movs	r1, #0
 8003330:	f7fc ff1a 	bl	8000168 <__aeabi_dsub>
		uPID->Kd = (0 - uPID->Kd);
 8003334:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
		uPID->Ki = (0 - uPID->Ki);
 8003338:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800333c:	2000      	movs	r0, #0
 800333e:	2100      	movs	r1, #0
 8003340:	f7fc ff12 	bl	8000168 <__aeabi_dsub>
 8003344:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8003348:	70e5      	strb	r5, [r4, #3]
	
}
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	0000      	movs	r0, r0
	...

08003350 <PID>:
{
 8003350:	b510      	push	{r4, lr}
	uPID->MySetpoint = Setpoint;
 8003352:	6483      	str	r3, [r0, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003354:	2300      	movs	r3, #0
	uPID->MyInput    = Input;
 8003356:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800335a:	7043      	strb	r3, [r0, #1]
	uPID->OutMin = Min;
 800335c:	2200      	movs	r2, #0
 800335e:	2300      	movs	r3, #0
 8003360:	e9c0 2318 	strd	r2, r3, [r0, #96]	; 0x60
	uPID->OutMax = Max;
 8003364:	a312      	add	r3, pc, #72	; (adr r3, 80033b0 <PID+0x60>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 800336e:	2364      	movs	r3, #100	; 0x64
{
 8003370:	4604      	mov	r4, r0
 8003372:	b086      	sub	sp, #24
	PID_SetControllerDirection(uPID, ControllerDirection);
 8003374:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003378:	6083      	str	r3, [r0, #8]
	PID_SetControllerDirection(uPID, ControllerDirection);
 800337a:	f7ff ffc5 	bl	8003308 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800337e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003382:	4620      	mov	r0, r4
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800338a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800338e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003392:	e9cd 2300 	strd	r2, r3, [sp]
 8003396:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800339a:	f7ff ff35 	bl	8003208 <PID_SetTunings2>
	uPID->LastTime = GetTime() - uPID->SampleTime;
 800339e:	f001 fd61 	bl	8004e64 <HAL_GetTick>
 80033a2:	68a3      	ldr	r3, [r4, #8]
 80033a4:	1ac0      	subs	r0, r0, r3
 80033a6:	6060      	str	r0, [r4, #4]
}
 80033a8:	b006      	add	sp, #24
 80033aa:	bd10      	pop	{r4, pc}
 80033ac:	f3af 8000 	nop.w
 80033b0:	00000000 	.word	0x00000000
 80033b4:	406fe000 	.word	0x406fe000

080033b8 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80033ba:	1e0d      	subs	r5, r1, #0
{
 80033bc:	4604      	mov	r4, r0
	if (NewSampleTime > 0)
 80033be:	dd20      	ble.n	8003402 <PID_SetSampleTime+0x4a>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80033c0:	4628      	mov	r0, r5
 80033c2:	f7fd f81f 	bl	8000404 <__aeabi_i2d>
 80033c6:	4606      	mov	r6, r0
 80033c8:	68a0      	ldr	r0, [r4, #8]
 80033ca:	460f      	mov	r7, r1
 80033cc:	f7fd f80a 	bl	80003e4 <__aeabi_ui2d>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4630      	mov	r0, r6
 80033d6:	4639      	mov	r1, r7
 80033d8:	f7fd f9a8 	bl	800072c <__aeabi_ddiv>
		
		uPID->Ki *= ratio;
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80033e0:	4606      	mov	r6, r0
 80033e2:	460f      	mov	r7, r1
		uPID->Ki *= ratio;
 80033e4:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 80033e8:	f7fd f876 	bl	80004d8 <__aeabi_dmul>
		uPID->Kd /= ratio;
 80033ec:	4632      	mov	r2, r6
		uPID->Ki *= ratio;
 80033ee:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
		uPID->Kd /= ratio;
 80033f2:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80033f6:	463b      	mov	r3, r7
 80033f8:	f7fd f998 	bl	800072c <__aeabi_ddiv>
 80033fc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003400:	60a5      	str	r5, [r4, #8]
		
	}
	
}
 8003402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003404 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_MspInit+0x48>)
{
 8003406:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003408:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800340a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003414:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003418:	f002 0201 	and.w	r2, r2, #1
 800341c:	9200      	str	r2, [sp, #0]
 800341e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003426:	61da      	str	r2, [r3, #28]
 8003428:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800342a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003434:	f001 ff68 	bl	8005308 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003438:	4a05      	ldr	r2, [pc, #20]	; (8003450 <HAL_MspInit+0x4c>)
 800343a:	6853      	ldr	r3, [r2, #4]
 800343c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003446:	b003      	add	sp, #12
 8003448:	f85d fb04 	ldr.w	pc, [sp], #4
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000

08003454 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003454:	b530      	push	{r4, r5, lr}
 8003456:	4605      	mov	r5, r0
 8003458:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345a:	2210      	movs	r2, #16
 800345c:	2100      	movs	r1, #0
 800345e:	a802      	add	r0, sp, #8
 8003460:	f007 f942 	bl	800a6e8 <memset>
  if(hadc->Instance==ADC1)
 8003464:	682a      	ldr	r2, [r5, #0]
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_ADC_MspInit+0x84>)
 8003468:	429a      	cmp	r2, r3
 800346a:	d133      	bne.n	80034d4 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800346c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003470:	699a      	ldr	r2, [r3, #24]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003472:	481a      	ldr	r0, [pc, #104]	; (80034dc <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003478:	619a      	str	r2, [r3, #24]
 800347a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800347e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003488:	4c15      	ldr	r4, [pc, #84]	; (80034e0 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	f042 0204 	orr.w	r2, r2, #4
 800348e:	619a      	str	r2, [r3, #24]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	9301      	str	r3, [sp, #4]
 8003498:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800349a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800349c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f002 f918 	bl	80056d4 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a4:	2300      	movs	r3, #0
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034a8:	2180      	movs	r1, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034aa:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034b6:	e9c4 1203 	strd	r1, r2, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034ba:	2220      	movs	r2, #32
 80034bc:	e9c4 0205 	strd	r0, r2, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034c0:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c2:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034c4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034c6:	f001 ff6f 	bl	80053a8 <HAL_DMA_Init>
 80034ca:	b108      	cbz	r0, 80034d0 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80034cc:	f7ff f9b6 	bl	800283c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034d0:	622c      	str	r4, [r5, #32]
 80034d2:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034d4:	b007      	add	sp, #28
 80034d6:	bd30      	pop	{r4, r5, pc}
 80034d8:	40012400 	.word	0x40012400
 80034dc:	40010800 	.word	0x40010800
 80034e0:	20000f48 	.word	0x20000f48
 80034e4:	40020008 	.word	0x40020008

080034e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
 80034ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ee:	2210      	movs	r2, #16
 80034f0:	2100      	movs	r1, #0
 80034f2:	a802      	add	r0, sp, #8
 80034f4:	f007 f8f8 	bl	800a6e8 <memset>
  if(hi2c->Instance==I2C1)
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_I2C_MspInit+0x68>)
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d124      	bne.n	800354a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003500:	4c14      	ldr	r4, [pc, #80]	; (8003554 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003502:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003506:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003508:	4813      	ldr	r0, [pc, #76]	; (8003558 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	f043 0308 	orr.w	r3, r3, #8
 800350e:	61a3      	str	r3, [r4, #24]
 8003510:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800351c:	2312      	movs	r3, #18
 800351e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f002 f8d5 	bl	80056d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_I2C_MspInit+0x74>)
 800352c:	6853      	ldr	r3, [r2, #4]
 800352e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003532:	f043 0302 	orr.w	r3, r3, #2
 8003536:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003538:	69e3      	ldr	r3, [r4, #28]
 800353a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800353e:	61e3      	str	r3, [r4, #28]
 8003540:	69e3      	ldr	r3, [r4, #28]
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	9301      	str	r3, [sp, #4]
 8003548:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800354a:	b006      	add	sp, #24
 800354c:	bd10      	pop	{r4, pc}
 800354e:	bf00      	nop
 8003550:	40005400 	.word	0x40005400
 8003554:	40021000 	.word	0x40021000
 8003558:	40010c00 	.word	0x40010c00
 800355c:	40010000 	.word	0x40010000

08003560 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003560:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8003562:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <HAL_RTC_MspInit+0x30>)
 8003564:	6802      	ldr	r2, [r0, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d10f      	bne.n	800358a <HAL_RTC_MspInit+0x2a>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800356a:	f002 ff29 	bl	80063c0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RTC_MspInit+0x34>)
 8003570:	69da      	ldr	r2, [r3, #28]
 8003572:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003576:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003578:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <HAL_RTC_MspInit+0x38>)
 8003586:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800358a:	b003      	add	sp, #12
 800358c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003590:	40002800 	.word	0x40002800
 8003594:	40021000 	.word	0x40021000
 8003598:	42420000 	.word	0x42420000

0800359c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800359c:	6803      	ldr	r3, [r0, #0]
{
 800359e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d10d      	bne.n	80035c2 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035a6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	f042 0201 	orr.w	r2, r2, #1
 80035b0:	61da      	str	r2, [r3, #28]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035bc:	b003      	add	sp, #12
 80035be:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 80035c2:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <HAL_TIM_Base_MspInit+0x58>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d1f9      	bne.n	80035bc <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035ca:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035cc:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035ce:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035d0:	f042 0202 	orr.w	r2, r2, #2
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	9301      	str	r3, [sp, #4]
 80035e0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035e2:	f001 fe91 	bl	8005308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035e6:	201d      	movs	r0, #29
}
 80035e8:	b003      	add	sp, #12
 80035ea:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035ee:	f001 bebb 	b.w	8005368 <HAL_NVIC_EnableIRQ>
 80035f2:	bf00      	nop
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	2210      	movs	r2, #16
{
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	2100      	movs	r1, #0
 8003606:	eb0d 0002 	add.w	r0, sp, r2
 800360a:	f007 f86d 	bl	800a6e8 <memset>
  if(htim->Instance==TIM2)
 800360e:	6823      	ldr	r3, [r4, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d115      	bne.n	8003642 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800361a:	699a      	ldr	r2, [r3, #24]
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361c:	481c      	ldr	r0, [pc, #112]	; (8003690 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361e:	f042 0204 	orr.w	r2, r2, #4
 8003622:	619a      	str	r2, [r3, #24]
 8003624:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003626:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003630:	2302      	movs	r3, #2
 8003632:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003636:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800363a:	f002 f84b 	bl	80056d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800363e:	b008      	add	sp, #32
 8003640:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 8003642:	4a14      	ldr	r2, [pc, #80]	; (8003694 <HAL_TIM_MspPostInit+0x98>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d1fa      	bne.n	800363e <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	4810      	ldr	r0, [pc, #64]	; (8003690 <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003650:	f042 0204 	orr.w	r2, r2, #4
 8003654:	619a      	str	r2, [r3, #24]
 8003656:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003658:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	f002 0204 	and.w	r2, r2, #4
 800365e:	9202      	str	r2, [sp, #8]
 8003660:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	f042 0208 	orr.w	r2, r2, #8
 8003668:	619a      	str	r2, [r3, #24]
 800366a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367c:	f002 f82a 	bl	80056d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003680:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	4806      	ldr	r0, [pc, #24]	; (800369c <HAL_TIM_MspPostInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003684:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368a:	a904      	add	r1, sp, #16
 800368c:	e7d5      	b.n	800363a <HAL_TIM_MspPostInit+0x3e>
 800368e:	bf00      	nop
 8003690:	40010800 	.word	0x40010800
 8003694:	40000400 	.word	0x40000400
 8003698:	40021000 	.word	0x40021000
 800369c:	40010c00 	.word	0x40010c00

080036a0 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	2210      	movs	r2, #16
{
 80036a2:	b570      	push	{r4, r5, r6, lr}
 80036a4:	4606      	mov	r6, r0
 80036a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	eb0d 0002 	add.w	r0, sp, r2
 80036ac:	2100      	movs	r1, #0
 80036ae:	f007 f81b 	bl	800a6e8 <memset>
  if(huart->Instance==USART1)
 80036b2:	6833      	ldr	r3, [r6, #0]
 80036b4:	4a43      	ldr	r2, [pc, #268]	; (80037c4 <HAL_UART_MspInit+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d144      	bne.n	8003744 <HAL_UART_MspInit+0xa4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ba:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_UART_MspInit+0x128>)
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c2:	4842      	ldr	r0, [pc, #264]	; (80037cc <HAL_UART_MspInit+0x12c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c8:	619a      	str	r2, [r3, #24]
 80036ca:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036cc:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80036d2:	9200      	str	r2, [sp, #0]
 80036d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80036d8:	4c3d      	ldr	r4, [pc, #244]	; (80037d0 <HAL_UART_MspInit+0x130>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036da:	f042 0204 	orr.w	r2, r2, #4
 80036de:	619a      	str	r2, [r3, #24]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ea:	2302      	movs	r3, #2
 80036ec:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f001 ffed 	bl	80056d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	4833      	ldr	r0, [pc, #204]	; (80037cc <HAL_UART_MspInit+0x12c>)
 8003700:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003702:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f001 ffe4 	bl	80056d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_UART_MspInit+0x134>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800370e:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003710:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003714:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003716:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800371a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800371e:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003720:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003722:	f001 fe41 	bl	80053a8 <HAL_DMA_Init>
 8003726:	b108      	cbz	r0, 800372c <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8003728:	f7ff f888 	bl	800283c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800372c:	2025      	movs	r0, #37	; 0x25
 800372e:	2200      	movs	r2, #0
 8003730:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003732:	63f4      	str	r4, [r6, #60]	; 0x3c
 8003734:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003736:	f001 fde7 	bl	8005308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800373a:	2025      	movs	r0, #37	; 0x25
 800373c:	f001 fe14 	bl	8005368 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003740:	b008      	add	sp, #32
 8003742:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART3)
 8003744:	4a24      	ldr	r2, [pc, #144]	; (80037d8 <HAL_UART_MspInit+0x138>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d1fa      	bne.n	8003740 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800374a:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_UART_MspInit+0x128>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	4823      	ldr	r0, [pc, #140]	; (80037dc <HAL_UART_MspInit+0x13c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800374e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003750:	a904      	add	r1, sp, #16
    __HAL_RCC_USART3_CLK_ENABLE();
 8003752:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003756:	61da      	str	r2, [r3, #28]
 8003758:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375a:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 800375c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003760:	9202      	str	r2, [sp, #8]
 8003762:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003764:	699a      	ldr	r2, [r3, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003766:	4c1e      	ldr	r4, [pc, #120]	; (80037e0 <HAL_UART_MspInit+0x140>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	619a      	str	r2, [r3, #24]
 800376e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	9303      	str	r3, [sp, #12]
 800377a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	2302      	movs	r3, #2
 800377e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003782:	2303      	movs	r3, #3
 8003784:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003786:	f001 ffa5 	bl	80056d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800378a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800378e:	4813      	ldr	r0, [pc, #76]	; (80037dc <HAL_UART_MspInit+0x13c>)
 8003790:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003792:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003796:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f001 ff9c 	bl	80056d4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_UART_MspInit+0x144>)
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800379e:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037a0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037a4:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a6:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80037aa:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ac:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ae:	e9c4 3506 	strd	r3, r5, [r4, #24]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037b2:	6165      	str	r5, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037b4:	f001 fdf8 	bl	80053a8 <HAL_DMA_Init>
 80037b8:	b108      	cbz	r0, 80037be <HAL_UART_MspInit+0x11e>
      Error_Handler();
 80037ba:	f7ff f83f 	bl	800283c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80037be:	63f4      	str	r4, [r6, #60]	; 0x3c
 80037c0:	6266      	str	r6, [r4, #36]	; 0x24
}
 80037c2:	e7bd      	b.n	8003740 <HAL_UART_MspInit+0xa0>
 80037c4:	40013800 	.word	0x40013800
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40010800 	.word	0x40010800
 80037d0:	20000f8c 	.word	0x20000f8c
 80037d4:	40020058 	.word	0x40020058
 80037d8:	40004800 	.word	0x40004800
 80037dc:	40010c00 	.word	0x40010c00
 80037e0:	20000fd0 	.word	0x20000fd0
 80037e4:	40020030 	.word	0x40020030

080037e8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART1)
 80037e8:	6803      	ldr	r3, [r0, #0]
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <HAL_UART_MspDeInit+0x5c>)
{
 80037ec:	b510      	push	{r4, lr}
  if(huart->Instance==USART1)
 80037ee:	4293      	cmp	r3, r2
{
 80037f0:	4604      	mov	r4, r0
  if(huart->Instance==USART1)
 80037f2:	d112      	bne.n	800381a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80037f4:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 80037f8:	6993      	ldr	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80037fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_USART1_CLK_DISABLE();
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003802:	4811      	ldr	r0, [pc, #68]	; (8003848 <HAL_UART_MspDeInit+0x60>)
    __HAL_RCC_USART1_CLK_DISABLE();
 8003804:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003806:	f002 f83f 	bl	8005888 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800380a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800380c:	f001 fdfe 	bl	800540c <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8003810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003814:	2025      	movs	r0, #37	; 0x25
 8003816:	f001 bdb5 	b.w	8005384 <HAL_NVIC_DisableIRQ>
  else if(huart->Instance==USART3)
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <HAL_UART_MspDeInit+0x64>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10f      	bne.n	8003840 <HAL_UART_MspDeInit+0x58>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003820:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8003824:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003826:	480a      	ldr	r0, [pc, #40]	; (8003850 <HAL_UART_MspDeInit+0x68>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8003828:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 800382c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 8003830:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8003832:	f002 f829 	bl	8005888 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8003836:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmarx);
 800383c:	f001 bde6 	b.w	800540c <HAL_DMA_DeInit>
}
 8003840:	bd10      	pop	{r4, pc}
 8003842:	bf00      	nop
 8003844:	40013800 	.word	0x40013800
 8003848:	40010800 	.word	0x40010800
 800384c:	40004800 	.word	0x40004800
 8003850:	40010c00 	.word	0x40010c00

08003854 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_InitTick+0x7c>)
{
 8003856:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003858:	699a      	ldr	r2, [r3, #24]
{
 800385a:	b088      	sub	sp, #32
  __HAL_RCC_TIM1_CLK_ENABLE();
 800385c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003860:	619a      	str	r2, [r3, #24]
 8003862:	699b      	ldr	r3, [r3, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003864:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800386a:	9302      	str	r3, [sp, #8]
{
 800386c:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800386e:	a803      	add	r0, sp, #12

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003870:	4d18      	ldr	r5, [pc, #96]	; (80038d4 <HAL_InitTick+0x80>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003872:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003874:	f003 f828 	bl	80068c8 <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003878:	f003 f816 	bl	80068a8 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_InitTick+0x84>)
 800387e:	602b      	str	r3, [r5, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003880:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003884:	60eb      	str	r3, [r5, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003886:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_InitTick+0x88>)
 8003888:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800388c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800388e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003890:	6068      	str	r0, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim1);
 8003892:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = 0;
 8003894:	612b      	str	r3, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003896:	60ab      	str	r3, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003898:	61ab      	str	r3, [r5, #24]
  status = HAL_TIM_Base_Init(&htim1);
 800389a:	f003 fc3d 	bl	8007118 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800389e:	4604      	mov	r4, r0
 80038a0:	b980      	cbnz	r0, 80038c4 <HAL_InitTick+0x70>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80038a2:	4628      	mov	r0, r5
 80038a4:	f003 fb2e 	bl	8006f04 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80038a8:	4604      	mov	r4, r0
 80038aa:	b958      	cbnz	r0, 80038c4 <HAL_InitTick+0x70>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80038ac:	2019      	movs	r0, #25
 80038ae:	f001 fd5b 	bl	8005368 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b2:	2e0f      	cmp	r6, #15
 80038b4:	d809      	bhi.n	80038ca <HAL_InitTick+0x76>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80038b6:	4622      	mov	r2, r4
 80038b8:	4631      	mov	r1, r6
 80038ba:	2019      	movs	r0, #25
 80038bc:	f001 fd24 	bl	8005308 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <HAL_InitTick+0x8c>)
 80038c2:	601e      	str	r6, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80038c4:	4620      	mov	r0, r4
 80038c6:	b008      	add	sp, #32
 80038c8:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_ERROR;
 80038ca:	2401      	movs	r4, #1
 80038cc:	e7fa      	b.n	80038c4 <HAL_InitTick+0x70>
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	200011dc 	.word	0x200011dc
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	000f4240 	.word	0x000f4240
 80038e0:	20000008 	.word	0x20000008

080038e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038e4:	e7fe      	b.n	80038e4 <NMI_Handler>
	...

080038e8 <HardFault_Handler>:
 80038e8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80038ec:	4905      	ldr	r1, [pc, #20]	; (8003904 <HardFault_Handler+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <HardFault_Handler+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80038f0:	68ca      	ldr	r2, [r1, #12]
 80038f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
 80038fa:	f3bf 8f4f 	dsb	sy
    __NOP();
 80038fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8003900:	e7fd      	b.n	80038fe <HardFault_Handler+0x16>
 8003902:	bf00      	nop
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	05fa0004 	.word	0x05fa0004

0800390c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800390c:	e7fe      	b.n	800390c <MemManage_Handler>

0800390e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800390e:	e7fe      	b.n	800390e <BusFault_Handler>

08003910 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003910:	e7fe      	b.n	8003910 <UsageFault_Handler>

08003912 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003912:	4770      	bx	lr

08003914 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003914:	4801      	ldr	r0, [pc, #4]	; (800391c <DMA1_Channel1_IRQHandler+0x8>)
 8003916:	f001 be49 	b.w	80055ac <HAL_DMA_IRQHandler>
 800391a:	bf00      	nop
 800391c:	20000f48 	.word	0x20000f48

08003920 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003920:	4801      	ldr	r0, [pc, #4]	; (8003928 <DMA1_Channel3_IRQHandler+0x8>)
 8003922:	f001 be43 	b.w	80055ac <HAL_DMA_IRQHandler>
 8003926:	bf00      	nop
 8003928:	20000fd0 	.word	0x20000fd0

0800392c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800392c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <DMA1_Channel5_IRQHandler+0x14>)
 8003930:	f001 fe3c 	bl	80055ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
  BLEDMA_IrqHandler(&bluetooth);
  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003934:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEDMA_IrqHandler(&bluetooth);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <DMA1_Channel5_IRQHandler+0x18>)
 800393a:	f7fd bc89 	b.w	8001250 <BLEDMA_IrqHandler>
 800393e:	bf00      	nop
 8003940:	20000f8c 	.word	0x20000f8c
 8003944:	20000e4c 	.word	0x20000e4c

08003948 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <TIM1_UP_IRQHandler+0x8>)
 800394a:	f003 bb0a 	b.w	8006f62 <HAL_TIM_IRQHandler>
 800394e:	bf00      	nop
 8003950:	200011dc 	.word	0x200011dc

08003954 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <TIM3_IRQHandler+0x8>)
 8003956:	f003 bb04 	b.w	8006f62 <HAL_TIM_IRQHandler>
 800395a:	bf00      	nop
 800395c:	200010c4 	.word	0x200010c4

08003960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003962:	4804      	ldr	r0, [pc, #16]	; (8003974 <USART1_IRQHandler+0x14>)
 8003964:	f004 f8f8 	bl	8007b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  BLEUSART_IrqHandler(&bluetooth);
  /* USER CODE END USART1_IRQn 1 */
}
 8003968:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BLEUSART_IrqHandler(&bluetooth);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <USART1_IRQHandler+0x18>)
 800396e:	f7fd bd17 	b.w	80013a0 <BLEUSART_IrqHandler>
 8003972:	bf00      	nop
 8003974:	2000110c 	.word	0x2000110c
 8003978:	20000e4c 	.word	0x20000e4c

0800397c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	460d      	mov	r5, r1
 8003980:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	460e      	mov	r6, r1
 8003984:	1b73      	subs	r3, r6, r5
 8003986:	429c      	cmp	r4, r3
 8003988:	dc01      	bgt.n	800398e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800398a:	4620      	mov	r0, r4
 800398c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800398e:	f3af 8000 	nop.w
 8003992:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003996:	e7f5      	b.n	8003984 <_read+0x8>

08003998 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	4770      	bx	lr

0800399e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800399e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 80039a2:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80039a4:	604b      	str	r3, [r1, #4]
}
 80039a6:	4770      	bx	lr

080039a8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80039a8:	2001      	movs	r0, #1
 80039aa:	4770      	bx	lr

080039ac <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80039ac:	2000      	movs	r0, #0
 80039ae:	4770      	bx	lr

080039b0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <_sbrk+0x30>)
{
 80039b2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80039b4:	6811      	ldr	r1, [r2, #0]
{
 80039b6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80039b8:	b909      	cbnz	r1, 80039be <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <_sbrk+0x34>)
 80039bc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039be:	6810      	ldr	r0, [r2, #0]
 80039c0:	4909      	ldr	r1, [pc, #36]	; (80039e8 <_sbrk+0x38>)
 80039c2:	4c0a      	ldr	r4, [pc, #40]	; (80039ec <_sbrk+0x3c>)
 80039c4:	4403      	add	r3, r0
 80039c6:	1b09      	subs	r1, r1, r4
 80039c8:	428b      	cmp	r3, r1
 80039ca:	d906      	bls.n	80039da <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80039cc:	f006 ff56 	bl	800a87c <__errno>
 80039d0:	230c      	movs	r3, #12
 80039d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80039d8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80039da:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80039dc:	e7fc      	b.n	80039d8 <_sbrk+0x28>
 80039de:	bf00      	nop
 80039e0:	20001224 	.word	0x20001224
 80039e4:	20002c60 	.word	0x20002c60
 80039e8:	20005000 	.word	0x20005000
 80039ec:	00000400 	.word	0x00000400

080039f0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f0:	4770      	bx	lr
	...

080039f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80039f4:	f7ff fffc 	bl	80039f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039f8:	480b      	ldr	r0, [pc, #44]	; (8003a28 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80039fa:	490c      	ldr	r1, [pc, #48]	; (8003a2c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80039fc:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <LoopFillZerobss+0x16>)
  movs r3, #0
 80039fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a00:	e002      	b.n	8003a08 <LoopCopyDataInit>

08003a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a06:	3304      	adds	r3, #4

08003a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a0c:	d3f9      	bcc.n	8003a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a0e:	4a09      	ldr	r2, [pc, #36]	; (8003a34 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a10:	4c09      	ldr	r4, [pc, #36]	; (8003a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a14:	e001      	b.n	8003a1a <LoopFillZerobss>

08003a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a18:	3204      	adds	r2, #4

08003a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a1c:	d3fb      	bcc.n	8003a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a1e:	f006 ff33 	bl	800a888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a22:	f7fe ff61 	bl	80028e8 <main>
  bx lr
 8003a26:	4770      	bx	lr
  ldr r0, =_sdata
 8003a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a2c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003a30:	0800b968 	.word	0x0800b968
  ldr r2, =_sbss
 8003a34:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003a38:	20002c5c 	.word	0x20002c5c

08003a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC1_2_IRQHandler>
	...

08003a40 <initBluetooth>:
			osSignalSet(bluetooth.Task, newMessage);

		osDelay(40);
	}
}
void initBluetooth(void){
 8003a40:	b510      	push	{r4, lr}

	//inicializacao do bluetooth
	//todo tratar returns
	bleConstrutora(&bluetooth, &huart1, &hdma_usart1_rx, TaskBluetoothHandle);
 8003a42:	4b29      	ldr	r3, [pc, #164]	; (8003ae8 <initBluetooth+0xa8>)
 8003a44:	4c29      	ldr	r4, [pc, #164]	; (8003aec <initBluetooth+0xac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a29      	ldr	r2, [pc, #164]	; (8003af0 <initBluetooth+0xb0>)
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4929      	ldr	r1, [pc, #164]	; (8003af4 <initBluetooth+0xb4>)
 8003a4e:	f7fd ff1f 	bl	8001890 <bleConstrutora>

	//possiveis comandos a serem recebidos pelo bluetooth
	createBleComp(&bluetooth, RX_SOLICITA_REALTIME);
 8003a52:	2115      	movs	r1, #21
 8003a54:	4620      	mov	r0, r4
 8003a56:	f7fd fba8 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_SOLICITA_SINCRONIA);
 8003a5a:	2117      	movs	r1, #23
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7fd fba4 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_TEMPERATURA);
 8003a62:	2126      	movs	r1, #38	; 0x26
 8003a64:	4620      	mov	r0, r4
 8003a66:	f7fd fba0 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA);
 8003a6a:	2110      	movs	r1, #16
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7fd fb9c 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_RESTAURA_HARD);
 8003a72:	2109      	movs	r1, #9
 8003a74:	4620      	mov	r0, r4
 8003a76:	f7fd fb98 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_TETO);
 8003a7a:	2121      	movs	r1, #33	; 0x21
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7fd fb94 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMP_LASTRO);
 8003a82:	2122      	movs	r1, #34	; 0x22
 8003a84:	4620      	mov	r0, r4
 8003a86:	f7fd fb90 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_SP_TEMPO);
 8003a8a:	2123      	movs	r1, #35	; 0x23
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7fd fb8c 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_TEMPO);
 8003a92:	2124      	movs	r1, #36	; 0x24
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7fd fb88 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_RECEITA);
 8003a9a:	2125      	movs	r1, #37	; 0x25
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7fd fb84 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_LIGA_LAMPADA);
 8003aa2:	2127      	movs	r1, #39	; 0x27
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	f7fd fb80 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_DESLIGA_LAMPADA);
 8003aaa:	2128      	movs	r1, #40	; 0x28
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7fd fb7c 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_LIMITE_LAMPADA);
 8003ab2:	2130      	movs	r1, #48	; 0x30
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fd fb78 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_CANCELA_PROCESSO);
 8003aba:	2129      	movs	r1, #41	; 0x29
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7fd fb74 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_TETO);
 8003ac2:	2133      	movs	r1, #51	; 0x33
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fd fb70 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_TUNNING_LASTRO);
 8003aca:	2134      	movs	r1, #52	; 0x34
 8003acc:	4620      	mov	r0, r4
 8003ace:	f7fd fb6c 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_TOGGLE_BUZZER);
 8003ad2:	2135      	movs	r1, #53	; 0x35
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7fd fb68 	bl	80011aa <createBleComp>
	createBleComp(&bluetooth, RX_APAGA_ERROS);
 8003ada:	4620      	mov	r0, r4

}
 8003adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	createBleComp(&bluetooth, RX_APAGA_ERROS);
 8003ae0:	2175      	movs	r1, #117	; 0x75
 8003ae2:	f7fd bb62 	b.w	80011aa <createBleComp>
 8003ae6:	bf00      	nop
 8003ae8:	200008f8 	.word	0x200008f8
 8003aec:	20000e4c 	.word	0x20000e4c
 8003af0:	20000f8c 	.word	0x20000f8c
 8003af4:	2000110c 	.word	0x2000110c

08003af8 <taskBluetooth1sec>:
void taskBluetooth1sec(void){

	//---monitor de inatividade
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003af8:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <taskBluetooth1sec+0x34>)
void taskBluetooth1sec(void){
 8003afa:	b508      	push	{r3, lr}
	if(tempoSemAtividade>=TIME_INATIVO_SETUP){
 8003afc:	8813      	ldrh	r3, [r2, #0]
 8003afe:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8003b02:	d30b      	bcc.n	8003b1c <taskBluetooth1sec+0x24>
		desligaForno();
 8003b04:	f7fe fdc8 	bl	8002698 <desligaForno>
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
		tempoSemAtividade++;
	}

	//---sequenciamento de envio de sincronia
	if(bluetooth.MaquinaConexao == RX_DESCONECTADO){
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <taskBluetooth1sec+0x38>)
 8003b0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003b0e:	2b01      	cmp	r3, #1
		FlagSincronia.cont=0;
 8003b10:	bf01      	itttt	eq
 8003b12:	2200      	moveq	r2, #0
 8003b14:	4b07      	ldreq	r3, [pc, #28]	; (8003b34 <taskBluetooth1sec+0x3c>)
 8003b16:	705a      	strbeq	r2, [r3, #1]
		FlagSincronia.flag=0;
 8003b18:	701a      	strbeq	r2, [r3, #0]
	}
	/*
	 * ao conectar, seta a FlagSincronia
	 * ao desconectar, reseta a FlagSincronia
	 * */
}
 8003b1a:	bd08      	pop	{r3, pc}
	}else if(PrimitiveStates.stateTimer != TIMER_decrementando){
 8003b1c:	4906      	ldr	r1, [pc, #24]	; (8003b38 <taskBluetooth1sec+0x40>)
 8003b1e:	f891 110d 	ldrb.w	r1, [r1, #269]	; 0x10d
 8003b22:	2901      	cmp	r1, #1
		tempoSemAtividade++;
 8003b24:	bf1c      	itt	ne
 8003b26:	3301      	addne	r3, #1
 8003b28:	8013      	strhne	r3, [r2, #0]
 8003b2a:	e7ed      	b.n	8003b08 <taskBluetooth1sec+0x10>
 8003b2c:	2000122a 	.word	0x2000122a
 8003b30:	20000e4c 	.word	0x20000e4c
 8003b34:	20001228 	.word	0x20001228
 8003b38:	200007e8 	.word	0x200007e8

08003b3c <txBluetooth>:
void txBluetooth(void){
 8003b3c:	b530      	push	{r4, r5, lr}
	unsigned char	Buffer		[BLUETOOTH_MAX_BUFF_LEN];
	int bufferQ_dataTx;

	// exite item na lista.
	if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx)) {
 8003b3e:	4c9b      	ldr	r4, [pc, #620]	; (8003dac <txBluetooth+0x270>)
void txBluetooth(void){
 8003b40:	b087      	sub	sp, #28
	if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx)) {
 8003b42:	6920      	ldr	r0, [r4, #16]
 8003b44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003b46:	4798      	blx	r3
 8003b48:	4605      	mov	r5, r0
 8003b4a:	b9e8      	cbnz	r0, 8003b88 <txBluetooth+0x4c>

		// remove item da lista.
		bufferQ_dataTx = bluetooth.myQ_dataTx->remove(bluetooth.myQ_dataTx);
 8003b4c:	6920      	ldr	r0, [r4, #16]
 8003b4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003b50:	4798      	blx	r3
		if (bufferQ_dataTx > 0) {
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	dd18      	ble.n	8003b88 <txBluetooth+0x4c>

			switch ((uint8_t)bufferQ_dataTx) {
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	dc0c      	bgt.n	8003b76 <txBluetooth+0x3a>
 8003b5c:	2b15      	cmp	r3, #21
 8003b5e:	dd13      	ble.n	8003b88 <txBluetooth+0x4c>
 8003b60:	3b16      	subs	r3, #22
 8003b62:	2b0a      	cmp	r3, #10
 8003b64:	d810      	bhi.n	8003b88 <txBluetooth+0x4c>
 8003b66:	e8df f003 	tbb	[pc, r3]
 8003b6a:	5411      	.short	0x5411
 8003b6c:	0f0fa182 	.word	0x0f0fa182
 8003b70:	0f0f0f0f 	.word	0x0f0f0f0f
 8003b74:	c4          	.byte	0xc4
 8003b75:	00          	.byte	0x00
 8003b76:	2b30      	cmp	r3, #48	; 0x30
 8003b78:	f000 80e4 	beq.w	8003d44 <txBluetooth+0x208>
 8003b7c:	2b70      	cmp	r3, #112	; 0x70
 8003b7e:	f000 80e6 	beq.w	8003d4e <txBluetooth+0x212>
 8003b82:	2b29      	cmp	r3, #41	; 0x29
 8003b84:	f000 80d4 	beq.w	8003d30 <txBluetooth+0x1f4>
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
				break;
			}
		}
	}
}
 8003b88:	b007      	add	sp, #28
 8003b8a:	bd30      	pop	{r4, r5, pc}
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b8c:	f241 6301 	movw	r3, #5633	; 0x1601
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003b90:	4c87      	ldr	r4, [pc, #540]	; (8003db0 <txBluetooth+0x274>)
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003b92:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003b96:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003b9a:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
				Buffer[2] 	= PrimitiveStates.Erro.byte;			// Conjunto de erros
 8003b9e:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= PrimitiveStates.Teto._PWMstate;
 8003ba2:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8003ba6:	f88d 3003 	strb.w	r3, [sp, #3]
				Buffer[4] 	= PrimitiveStates.Lastro._PWMstate;
 8003baa:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8003bae:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003bb2:	f7fc ff2b 	bl	8000a0c <__aeabi_d2uiz>
 8003bb6:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[6] 	= (uint16_t)PrimitiveStates.Teto.realtime 		& 0x00FF;
 8003bba:	f88d 0006 	strb.w	r0, [sp, #6]
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003bbe:	e9d4 012a 	ldrd	r0, r1, [r4, #168]	; 0xa8
				Buffer[5] 	= (uint16_t)PrimitiveStates.Teto.realtime 		>>8;
 8003bc2:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003bc6:	f7fc ff21 	bl	8000a0c <__aeabi_d2uiz>
 8003bca:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[8] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		& 0x00FF;
 8003bce:	f88d 0008 	strb.w	r0, [sp, #8]
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003bd2:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
				Buffer[7] 	= (uint16_t)PrimitiveStates.Teto.setPoint 		>>8;
 8003bd6:	f88d 3007 	strb.w	r3, [sp, #7]
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003bda:	f7fc ff17 	bl	8000a0c <__aeabi_d2uiz>
 8003bde:	f3c0 2307 	ubfx	r3, r0, #8, #8
				Buffer[10] 	= (uint16_t)PrimitiveStates.Lastro.realtime 	& 0x00FF;
 8003be2:	f88d 000a 	strb.w	r0, [sp, #10]
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003be6:	e9d4 013c 	ldrd	r0, r1, [r4, #240]	; 0xf0
				Buffer[9] 	= (uint16_t)PrimitiveStates.Lastro.realtime		>>8;
 8003bea:	f88d 3009 	strb.w	r3, [sp, #9]
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003bee:	f7fc ff0d 	bl	8000a0c <__aeabi_d2uiz>
				bluetoothEnviaComando(&bluetooth,Buffer, 13);
 8003bf2:	220d      	movs	r2, #13
				Buffer[11] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	>>8;
 8003bf4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8003bf8:	f88d 300b 	strb.w	r3, [sp, #11]
				Buffer[13] 	= PrimitiveStates.Buzzer;
 8003bfc:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
				Buffer[12] 	= (uint16_t)PrimitiveStates.Lastro.setPoint 	& 0x00FF;
 8003c00:	f88d 000c 	strb.w	r0, [sp, #12]
				Buffer[13] 	= PrimitiveStates.Buzzer;
 8003c04:	f88d 300d 	strb.w	r3, [sp, #13]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003c08:	4669      	mov	r1, sp
 8003c0a:	4868      	ldr	r0, [pc, #416]	; (8003dac <txBluetooth+0x270>)
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003c0c:	f7fd fbe5 	bl	80013da <bluetoothEnviaComando>
}
 8003c10:	e7ba      	b.n	8003b88 <txBluetooth+0x4c>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003c12:	f241 7301 	movw	r3, #5889	; 0x1701
 8003c16:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= PrimitiveStates.stateTimer;			// State da maquina de timer
 8003c1a:	4b65      	ldr	r3, [pc, #404]	; (8003db0 <txBluetooth+0x274>)
 8003c1c:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8003c20:	f88d 2002 	strb.w	r2, [sp, #2]
				Buffer[3] 	= PrimitiveStates.RTTimerMinutos;
 8003c24:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 8003c28:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= PrimitiveStates.RTTimerSegundos;
 8003c2c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8003c30:	f88d 2004 	strb.w	r2, [sp, #4]
				Buffer[5] 	= PrimitiveStates.SPTimerMinutos;
 8003c34:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003c38:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003c3c:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
				Buffer[10]	= PrimitiveStates.Lampada._state;
 8003c40:	7a1b      	ldrb	r3, [r3, #8]
				Buffer[6] 	= PrimitiveStates.SPTimerSegundos;
 8003c42:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003c46:	4a5b      	ldr	r2, [pc, #364]	; (8003db4 <txBluetooth+0x278>)
				Buffer[10]	= PrimitiveStates.Lampada._state;
 8003c48:	f88d 300a 	strb.w	r3, [sp, #10]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003c4c:	8811      	ldrh	r1, [r2, #0]
				Buffer[11] 	= (uint16_t)Calendario.TotalCiclos >> 8;
 8003c4e:	8893      	ldrh	r3, [r2, #4]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003c50:	0a08      	lsrs	r0, r1, #8
				Buffer[8] 	= (uint16_t)Calendario.Horimetro_horas & 0x00FF;
 8003c52:	f88d 1008 	strb.w	r1, [sp, #8]
				Buffer[9] 	= (uint8_t)Calendario.Horimetro_parcial_min;
 8003c56:	7891      	ldrb	r1, [r2, #2]
				Buffer[7] 	= (uint16_t)Calendario.Horimetro_horas >> 8;
 8003c58:	f88d 0007 	strb.w	r0, [sp, #7]
				Buffer[9] 	= (uint8_t)Calendario.Horimetro_parcial_min;
 8003c5c:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003c60:	0a1a      	lsrs	r2, r3, #8
 8003c62:	f88d 200b 	strb.w	r2, [sp, #11]
				Buffer[12] 	= (uint16_t)Calendario.ContMaxLastro & 0x00FF;
 8003c66:	f88d 300c 	strb.w	r3, [sp, #12]
				bluetoothEnviaComando(&bluetooth,Buffer, 12);
 8003c6a:	220c      	movs	r2, #12
 8003c6c:	e7cc      	b.n	8003c08 <txBluetooth+0xcc>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003c6e:	f641 0301 	movw	r3, #6145	; 0x1801
 8003c72:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= 0x01;									// Modelo
 8003c76:	2301      	movs	r3, #1
 8003c78:	f88d 3002 	strb.w	r3, [sp, #2]
				Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003c7c:	4b4c      	ldr	r3, [pc, #304]	; (8003db0 <txBluetooth+0x274>)
 8003c7e:	89db      	ldrh	r3, [r3, #14]
 8003c80:	0a1a      	lsrs	r2, r3, #8
				Buffer[4] 	= (uint16_t)PrimitiveStates.Lampada.limitOn & 0x00FF;
 8003c82:	f88d 3004 	strb.w	r3, [sp, #4]
				Buffer[5] 	= (uint8_t)0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f88d 3005 	strb.w	r3, [sp, #5]
				Buffer[6] 	= (uint8_t)0;
 8003c8c:	f8ad 3006 	strh.w	r3, [sp, #6]
				Buffer[8]	= VERSAO;
 8003c90:	2303      	movs	r3, #3
 8003c92:	f88d 3008 	strb.w	r3, [sp, #8]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <txBluetooth+0x278>)
				Buffer[3] 	= (uint16_t)PrimitiveStates.Lampada.limitOn >> 8;
 8003c98:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003c9c:	88da      	ldrh	r2, [r3, #6]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003c9e:	891b      	ldrh	r3, [r3, #8]
				Buffer[9] 	= (uint16_t)Calendario.ContMaxTeto >> 8;
 8003ca0:	0a11      	lsrs	r1, r2, #8
 8003ca2:	f88d 1009 	strb.w	r1, [sp, #9]
				Buffer[10] 	= (uint16_t)Calendario.ContMaxTeto & 0x00FF;
 8003ca6:	f88d 200a 	strb.w	r2, [sp, #10]
				Buffer[11] 	= (uint16_t)Calendario.ContMaxLastro >> 8;
 8003caa:	e7d9      	b.n	8003c60 <txBluetooth+0x124>
				Buffer[0] = 0x01;
 8003cac:	f641 1301 	movw	r3, #6401	; 0x1901
				float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003cb0:	4c3f      	ldr	r4, [pc, #252]	; (8003db0 <txBluetooth+0x274>)
 8003cb2:	466a      	mov	r2, sp
 8003cb4:	e9d4 0120 	ldrd	r0, r1, [r4, #128]	; 0x80
				Buffer[0] = 0x01;
 8003cb8:	f8ad 3000 	strh.w	r3, [sp]
				float_TO_vetor4b(PrimitiveStates.Teto.kp, Buffer, 2);
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f7fd fe79 	bl	80019b4 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.ki, Buffer, 6);
 8003cc2:	e9d4 0122 	ldrd	r0, r1, [r4, #136]	; 0x88
 8003cc6:	2306      	movs	r3, #6
 8003cc8:	466a      	mov	r2, sp
 8003cca:	f7fd fe73 	bl	80019b4 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Teto.kd, Buffer, 10);
 8003cce:	e9d4 0124 	ldrd	r0, r1, [r4, #144]	; 0x90
 8003cd2:	230a      	movs	r3, #10
 8003cd4:	466a      	mov	r2, sp
 8003cd6:	f7fd fe6d 	bl	80019b4 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Teto.histerese 	>>8;
 8003cda:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8003cde:	ba5b      	rev16	r3, r3
 8003ce0:	f8ad 300e 	strh.w	r3, [sp, #14]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Teto.limite 		>>8;
 8003ce4:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003ce8:	ba5b      	rev16	r3, r3
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003cea:	2211      	movs	r2, #17
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003cec:	f8ad 3010 	strh.w	r3, [sp, #16]
				bluetoothEnviaComando(&bluetooth,Buffer, 17);
 8003cf0:	e78a      	b.n	8003c08 <txBluetooth+0xcc>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cf2:	f242 0301 	movw	r3, #8193	; 0x2001
				float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003cf6:	4c2e      	ldr	r4, [pc, #184]	; (8003db0 <txBluetooth+0x274>)
 8003cf8:	466a      	mov	r2, sp
 8003cfa:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003cfe:	f8ad 3000 	strh.w	r3, [sp]
				float_TO_vetor4b(PrimitiveStates.Lastro.kp, Buffer, 2);
 8003d02:	2302      	movs	r3, #2
 8003d04:	f7fd fe56 	bl	80019b4 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.ki, Buffer, 6);
 8003d08:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
 8003d0c:	2306      	movs	r3, #6
 8003d0e:	466a      	mov	r2, sp
 8003d10:	f7fd fe50 	bl	80019b4 <float_TO_vetor4b>
				float_TO_vetor4b(PrimitiveStates.Lastro.kd, Buffer, 10);
 8003d14:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
 8003d18:	230a      	movs	r3, #10
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f7fd fe4a 	bl	80019b4 <float_TO_vetor4b>
				Buffer[14] 	= (uint16_t)PrimitiveStates.Lastro.histerese 	>>8;
 8003d20:	f8b4 30fa 	ldrh.w	r3, [r4, #250]	; 0xfa
 8003d24:	ba5b      	rev16	r3, r3
 8003d26:	f8ad 300e 	strh.w	r3, [sp, #14]
				Buffer[16] 	= (uint16_t)PrimitiveStates.Lastro.limite 		>>8;
 8003d2a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003d2e:	e7db      	b.n	8003ce8 <txBluetooth+0x1ac>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d30:	f642 1201 	movw	r2, #10497	; 0x2901
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d34:	f8ad 2000 	strh.w	r2, [sp]
				bluetoothEnviaComando(&bluetooth,Buffer, 2);
 8003d38:	2202      	movs	r2, #2
				Buffer[2] 	= 0x30;									// FUNÇÃO -
 8003d3a:	f88d 3002 	strb.w	r3, [sp, #2]
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003d3e:	4669      	mov	r1, sp
 8003d40:	4620      	mov	r0, r4
 8003d42:	e763      	b.n	8003c0c <txBluetooth+0xd0>
				FlagSincronia.flag=0;
 8003d44:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <txBluetooth+0x27c>)
 8003d46:	7015      	strb	r5, [r2, #0]
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d48:	f243 0201 	movw	r2, #12289	; 0x3001
 8003d4c:	e7f2      	b.n	8003d34 <txBluetooth+0x1f8>
				Buffer[0] 	= 0x01;									// ENDEREÇO
 8003d4e:	f247 0301 	movw	r3, #28673	; 0x7001
 8003d52:	f8ad 3000 	strh.w	r3, [sp]
				Buffer[2] 	= eeprom.errorBuffer.errors[0];
 8003d56:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <txBluetooth+0x280>)
 8003d58:	f893 2085 	ldrb.w	r2, [r3, #133]	; 0x85
 8003d5c:	f88d 2002 	strb.w	r2, [sp, #2]
				Buffer[3] 	= eeprom.errorBuffer.errors[1];
 8003d60:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8003d64:	f88d 2003 	strb.w	r2, [sp, #3]
				Buffer[4] 	= eeprom.errorBuffer.errors[2];
 8003d68:	f893 2087 	ldrb.w	r2, [r3, #135]	; 0x87
 8003d6c:	f88d 2004 	strb.w	r2, [sp, #4]
				Buffer[5] 	= eeprom.errorBuffer.errors[3];
 8003d70:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8003d74:	f88d 2005 	strb.w	r2, [sp, #5]
				Buffer[6] 	= eeprom.errorBuffer.errors[4];
 8003d78:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8003d7c:	f88d 2006 	strb.w	r2, [sp, #6]
				Buffer[7] 	= eeprom.errorBuffer.errors[5];
 8003d80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8003d84:	f88d 2007 	strb.w	r2, [sp, #7]
				Buffer[8] 	= eeprom.errorBuffer.errors[6];
 8003d88:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8003d8c:	f88d 2008 	strb.w	r2, [sp, #8]
				Buffer[9] 	= eeprom.errorBuffer.errors[7];
 8003d90:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8003d94:	f88d 2009 	strb.w	r2, [sp, #9]
				Buffer[10] 	= eeprom.errorBuffer.errors[8];
 8003d98:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
				Buffer[11] 	= eeprom.errorBuffer.errors[9];
 8003d9c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
				Buffer[10] 	= eeprom.errorBuffer.errors[8];
 8003da0:	f88d 200a 	strb.w	r2, [sp, #10]
				Buffer[11] 	= eeprom.errorBuffer.errors[9];
 8003da4:	f88d 300b 	strb.w	r3, [sp, #11]
				bluetoothEnviaComando(&bluetooth,Buffer, 11);
 8003da8:	220b      	movs	r2, #11
 8003daa:	e7c8      	b.n	8003d3e <txBluetooth+0x202>
 8003dac:	20000e4c 	.word	0x20000e4c
 8003db0:	200007e8 	.word	0x200007e8
 8003db4:	200007d4 	.word	0x200007d4
 8003db8:	20001228 	.word	0x20001228
 8003dbc:	200016f8 	.word	0x200016f8

08003dc0 <verificaLimiteSetpoint>:
				break;
			}
		}
	}
}
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003dc0:	b538      	push	{r3, r4, r5, lr}
	if(canal->setPoint < canal->limite)
 8003dc2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
void verificaLimiteSetpoint(IndviduoPID	*canal){
 8003dc4:	4604      	mov	r4, r0
	if(canal->setPoint < canal->limite)
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	f7fc fb1c 	bl	8000404 <__aeabi_i2d>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	e9d4 010c 	ldrd	r0, r1, [r4, #48]	; 0x30
 8003dd4:	f7fc fdf2 	bl	80009bc <__aeabi_dcmplt>
 8003dd8:	b920      	cbnz	r0, 8003de4 <verificaLimiteSetpoint+0x24>
		return;

	canal->setPoint = canal->limite;
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f7fc fb02 	bl	80003e4 <__aeabi_ui2d>
 8003de0:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return;
}
 8003de4:	bd38      	pop	{r3, r4, r5, pc}
	...

08003de8 <sincAutomatico>:
bool sincAutomatico(void){ //1==permite 0==recusa

	//envia sincronia junto do realtime apenas 3 vezes por reconexao
	if(!FlagSincronia.flag){
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <sincAutomatico+0x20>)
 8003dea:	7818      	ldrb	r0, [r3, #0]
 8003dec:	b950      	cbnz	r0, 8003e04 <sincAutomatico+0x1c>
		if(FlagSincronia.cont<ENVIO_DE_SINCRONIAS){
 8003dee:	2101      	movs	r1, #1
 8003df0:	785a      	ldrb	r2, [r3, #1]
 8003df2:	2a02      	cmp	r2, #2
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003df4:	bf9d      	ittte	ls
 8003df6:	1852      	addls	r2, r2, r1
			return 1;
 8003df8:	4608      	movls	r0, r1
			FlagSincronia.cont++; //permite 3 envios antes de resetar a flag
 8003dfa:	705a      	strbls	r2, [r3, #1]
		}else{
			FlagSincronia.cont = 0; //zera o contador
 8003dfc:	7058      	strbhi	r0, [r3, #1]
			FlagSincronia.flag = 1; //reseta a flag
 8003dfe:	bf88      	it	hi
 8003e00:	7019      	strbhi	r1, [r3, #0]
			return 0;
 8003e02:	4770      	bx	lr
		}
	}
	return 0;
 8003e04:	2000      	movs	r0, #0
}
 8003e06:	4770      	bx	lr
 8003e08:	20001228 	.word	0x20001228

08003e0c <rxBluetooth>:
void rxBluetooth(void){
 8003e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (!bluetooth.myQ_dataRx->is_empty(bluetooth.myQ_dataRx)) {
 8003e0e:	4ca8      	ldr	r4, [pc, #672]	; (80040b0 <rxBluetooth+0x2a4>)
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003e14:	4798      	blx	r3
 8003e16:	4606      	mov	r6, r0
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d13f      	bne.n	8003e9c <rxBluetooth+0x90>
		if (bluetooth.myQ_dataRx->remove(bluetooth.myQ_dataRx) > 0) {
 8003e1c:	68e0      	ldr	r0, [r4, #12]
 8003e1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e20:	4798      	blx	r3
 8003e22:	2800      	cmp	r0, #0
 8003e24:	dd3a      	ble.n	8003e9c <rxBluetooth+0x90>
			switch (bluetooth.ComandoAtual._comando) {
 8003e26:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8003e2a:	2d35      	cmp	r5, #53	; 0x35
 8003e2c:	d833      	bhi.n	8003e96 <rxBluetooth+0x8a>
 8003e2e:	2d08      	cmp	r5, #8
 8003e30:	d934      	bls.n	8003e9c <rxBluetooth+0x90>
 8003e32:	3d09      	subs	r5, #9
 8003e34:	2d2c      	cmp	r5, #44	; 0x2c
 8003e36:	d831      	bhi.n	8003e9c <rxBluetooth+0x90>
 8003e38:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003e3c:	00300053 	.word	0x00300053
 8003e40:	00300030 	.word	0x00300030
 8003e44:	00300030 	.word	0x00300030
 8003e48:	00620030 	.word	0x00620030
 8003e4c:	00300030 	.word	0x00300030
 8003e50:	00300030 	.word	0x00300030
 8003e54:	00300032 	.word	0x00300032
 8003e58:	00300051 	.word	0x00300051
 8003e5c:	00300030 	.word	0x00300030
 8003e60:	00300030 	.word	0x00300030
 8003e64:	00300030 	.word	0x00300030
 8003e68:	00300030 	.word	0x00300030
 8003e6c:	00780065 	.word	0x00780065
 8003e70:	00990087 	.word	0x00990087
 8003e74:	003000da 	.word	0x003000da
 8003e78:	01270114 	.word	0x01270114
 8003e7c:	00300168 	.word	0x00300168
 8003e80:	00300030 	.word	0x00300030
 8003e84:	00300030 	.word	0x00300030
 8003e88:	01500030 	.word	0x01500030
 8003e8c:	00300030 	.word	0x00300030
 8003e90:	01a80173 	.word	0x01a80173
 8003e94:	01dd      	.short	0x01dd
 8003e96:	2d75      	cmp	r5, #117	; 0x75
 8003e98:	f000 81cd 	beq.w	8004236 <rxBluetooth+0x42a>
}
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA);
 8003ea0:	2116      	movs	r1, #22
 8003ea2:	4883      	ldr	r0, [pc, #524]	; (80040b0 <rxBluetooth+0x2a4>)
 8003ea4:	f7fd f947 	bl	8001136 <putQueueDataTx>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 8003ea8:	2117      	movs	r1, #23
 8003eaa:	4881      	ldr	r0, [pc, #516]	; (80040b0 <rxBluetooth+0x2a4>)
 8003eac:	f7fd f943 	bl	8001136 <putQueueDataTx>
				if(sincAutomatico()){
 8003eb0:	f7ff ff9a 	bl	8003de8 <sincAutomatico>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d0f1      	beq.n	8003e9c <rxBluetooth+0x90>
					putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8003eb8:	2118      	movs	r1, #24
 8003eba:	487d      	ldr	r0, [pc, #500]	; (80040b0 <rxBluetooth+0x2a4>)
 8003ebc:	f7fd f93b 	bl	8001136 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 8003ec0:	2119      	movs	r1, #25
 8003ec2:	487b      	ldr	r0, [pc, #492]	; (80040b0 <rxBluetooth+0x2a4>)
 8003ec4:	f7fd f937 	bl	8001136 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 8003ec8:	2120      	movs	r1, #32
 8003eca:	4879      	ldr	r0, [pc, #484]	; (80040b0 <rxBluetooth+0x2a4>)
 8003ecc:	f7fd f933 	bl	8001136 <putQueueDataTx>
					putQueueDataTx(&bluetooth, TX_ERROS);
 8003ed0:	2170      	movs	r1, #112	; 0x70
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8003ed2:	4877      	ldr	r0, [pc, #476]	; (80040b0 <rxBluetooth+0x2a4>)
}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 8003eda:	f7fd b92c 	b.w	8001136 <putQueueDataTx>
 8003ede:	2118      	movs	r1, #24
 8003ee0:	e7f7      	b.n	8003ed2 <rxBluetooth+0xc6>
				osMessagePut(FilaEepromHandle, CEepromHardReset, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2101      	movs	r1, #1
				osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <rxBluetooth+0x2a8>)
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	f004 f8e0 	bl	80080ae <osMessagePut>
				putQueueDataTx(&bluetooth, TX_RESETANDO);
 8003eee:	2129      	movs	r1, #41	; 0x29
 8003ef0:	486f      	ldr	r0, [pc, #444]	; (80040b0 <rxBluetooth+0x2a4>)
 8003ef2:	f7fd f920 	bl	8001136 <putQueueDataTx>
				osDelay(50);
 8003ef6:	2032      	movs	r0, #50	; 0x32
 8003ef8:	f004 f80e 	bl	8007f18 <osDelay>
				putQueueDataTx(&bluetooth, TX_RESETADO_OK);
 8003efc:	2130      	movs	r1, #48	; 0x30
 8003efe:	e7e8      	b.n	8003ed2 <rxBluetooth+0xc6>
				osMessagePut(FilaEepromHandle, CEepromSoftReset, 0);
 8003f00:	2200      	movs	r2, #0
 8003f02:	2102      	movs	r1, #2
 8003f04:	e7ef      	b.n	8003ee6 <rxBluetooth+0xda>
				MACRO_ANULA_INATIVIDADE
 8003f06:	2200      	movs	r2, #0
 8003f08:	4b6b      	ldr	r3, [pc, #428]	; (80040b8 <rxBluetooth+0x2ac>)
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003f0a:	496c      	ldr	r1, [pc, #432]	; (80040bc <rxBluetooth+0x2b0>)
				MACRO_ANULA_INATIVIDADE
 8003f0c:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr,2);
 8003f0e:	486c      	ldr	r0, [pc, #432]	; (80040c0 <rxBluetooth+0x2b4>)
 8003f10:	2202      	movs	r2, #2
 8003f12:	f7fd fd39 	bl	8001988 <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8003f16:	486b      	ldr	r0, [pc, #428]	; (80040c4 <rxBluetooth+0x2b8>)
 8003f18:	f7ff ff52 	bl	8003dc0 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_TETO);
 8003f1c:	2121      	movs	r1, #33	; 0x21
 8003f1e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
				bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 8003f22:	4863      	ldr	r0, [pc, #396]	; (80040b0 <rxBluetooth+0x2a4>)
}
 8003f24:	b004      	add	sp, #16
 8003f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				bluetooth.aknowladge(&bluetooth,RX_APAGA_ERROS);
 8003f2a:	4718      	bx	r3
				MACRO_ANULA_INATIVIDADE
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4b62      	ldr	r3, [pc, #392]	; (80040b8 <rxBluetooth+0x2ac>)
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003f30:	4962      	ldr	r1, [pc, #392]	; (80040bc <rxBluetooth+0x2b0>)
				MACRO_ANULA_INATIVIDADE
 8003f32:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr,2);
 8003f34:	4864      	ldr	r0, [pc, #400]	; (80040c8 <rxBluetooth+0x2bc>)
 8003f36:	2202      	movs	r2, #2
 8003f38:	f7fd fd26 	bl	8001988 <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 8003f3c:	4863      	ldr	r0, [pc, #396]	; (80040cc <rxBluetooth+0x2c0>)
 8003f3e:	f7ff ff3f 	bl	8003dc0 <verificaLimiteSetpoint>
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMP_LASTRO);
 8003f42:	2122      	movs	r1, #34	; 0x22
 8003f44:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8003f48:	e7eb      	b.n	8003f22 <rxBluetooth+0x116>
				MACRO_ANULA_INATIVIDADE
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4b5a      	ldr	r3, [pc, #360]	; (80040b8 <rxBluetooth+0x2ac>)
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003f4e:	7da1      	ldrb	r1, [r4, #22]
				MACRO_ANULA_INATIVIDADE
 8003f50:	801a      	strh	r2, [r3, #0]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003f52:	4b5f      	ldr	r3, [pc, #380]	; (80040d0 <rxBluetooth+0x2c4>)
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003f54:	7de2      	ldrb	r2, [r4, #23]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[2];
 8003f56:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 8003f5a:	f883 110b 	strb.w	r1, [r3, #267]	; 0x10b
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[3];
 8003f5e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003f62:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				bluetooth.aknowladge(&bluetooth,RX_SP_TEMPO);
 8003f66:	2123      	movs	r1, #35	; 0x23
 8003f68:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8003f6c:	e7d9      	b.n	8003f22 <rxBluetooth+0x116>
				MACRO_ANULA_INATIVIDADE
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4b51      	ldr	r3, [pc, #324]	; (80040b8 <rxBluetooth+0x2ac>)
 8003f72:	801a      	strh	r2, [r3, #0]
				switch (PrimitiveStates.stateTimer) {
 8003f74:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <rxBluetooth+0x2c4>)
 8003f76:	f893 210d 	ldrb.w	r2, [r3, #269]	; 0x10d
 8003f7a:	2a01      	cmp	r2, #1
 8003f7c:	d036      	beq.n	8003fec <rxBluetooth+0x1e0>
 8003f7e:	2a02      	cmp	r2, #2
 8003f80:	d01e      	beq.n	8003fc0 <rxBluetooth+0x1b4>
 8003f82:	bb7a      	cbnz	r2, 8003fe4 <rxBluetooth+0x1d8>
					PrimitiveStates.RTTimerMinutos 	= PrimitiveStates.SPTimerMinutos;
 8003f84:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8003f88:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
					PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8003f8c:	f893 210a 	ldrb.w	r2, [r3, #266]	; 0x10a
 8003f90:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003f94:	4a4f      	ldr	r2, [pc, #316]	; (80040d4 <rxBluetooth+0x2c8>)
 8003f96:	6810      	ldr	r0, [r2, #0]
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003f98:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8003f9c:	2a01      	cmp	r2, #1
 8003f9e:	d00a      	beq.n	8003fb6 <rxBluetooth+0x1aa>
 8003fa0:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8003fa4:	2a01      	cmp	r2, #1
 8003fa6:	d006      	beq.n	8003fb6 <rxBluetooth+0x1aa>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003fa8:	2201      	movs	r2, #1
						osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003faa:	2104      	movs	r1, #4
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003fac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003fb0:	f003 fffb 	bl	8007faa <osSignalSet>
					break;
 8003fb4:	e016      	b.n	8003fe4 <rxBluetooth+0x1d8>
						PrimitiveStates.stateTimer = TIMER_idle;
 8003fb6:	2200      	movs	r2, #0
						osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003fb8:	2102      	movs	r1, #2
						PrimitiveStates.stateTimer = TIMER_idle;
 8003fba:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
						osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8003fbe:	e7f7      	b.n	8003fb0 <rxBluetooth+0x1a4>
					if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8003fc0:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8003fc4:	2a01      	cmp	r2, #1
 8003fc6:	d00a      	beq.n	8003fde <rxBluetooth+0x1d2>
 8003fc8:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 8003fcc:	2a01      	cmp	r2, #1
 8003fce:	d006      	beq.n	8003fde <rxBluetooth+0x1d2>
						PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8003fd0:	2201      	movs	r2, #1
					PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003fd2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8003fd6:	4b3f      	ldr	r3, [pc, #252]	; (80040d4 <rxBluetooth+0x2c8>)
 8003fd8:	2104      	movs	r1, #4
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	e7e8      	b.n	8003fb0 <rxBluetooth+0x1a4>
						PrimitiveStates.stateTimer = TIMER_idle;
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_TEMPO);
 8003fe4:	2124      	movs	r1, #36	; 0x24
 8003fe6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8003fea:	e79a      	b.n	8003f22 <rxBluetooth+0x116>
					PrimitiveStates.stateTimer 	= TIMER_pausado;
 8003fec:	2202      	movs	r2, #2
 8003fee:	e7f0      	b.n	8003fd2 <rxBluetooth+0x1c6>
				MACRO_ANULA_INATIVIDADE
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <rxBluetooth+0x2ac>)
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003ff4:	4931      	ldr	r1, [pc, #196]	; (80040bc <rxBluetooth+0x2b0>)
				MACRO_ANULA_INATIVIDADE
 8003ff6:	801a      	strh	r2, [r3, #0]
				vetor2b_TO_Double(&PrimitiveStates.Teto.setPoint,bluetooth._RxDataArr	,2);
 8003ff8:	4831      	ldr	r0, [pc, #196]	; (80040c0 <rxBluetooth+0x2b4>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f7fd fcc4 	bl	8001988 <vetor2b_TO_Double>
				vetor2b_TO_Double(&PrimitiveStates.Lastro.setPoint,bluetooth._RxDataArr	,4);
 8004000:	2204      	movs	r2, #4
 8004002:	492e      	ldr	r1, [pc, #184]	; (80040bc <rxBluetooth+0x2b0>)
 8004004:	4830      	ldr	r0, [pc, #192]	; (80040c8 <rxBluetooth+0x2bc>)
 8004006:	f7fd fcbf 	bl	8001988 <vetor2b_TO_Double>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 800400a:	4830      	ldr	r0, [pc, #192]	; (80040cc <rxBluetooth+0x2c0>)
 800400c:	f7ff fed8 	bl	8003dc0 <verificaLimiteSetpoint>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 8004010:	482c      	ldr	r0, [pc, #176]	; (80040c4 <rxBluetooth+0x2b8>)
 8004012:	f7ff fed5 	bl	8003dc0 <verificaLimiteSetpoint>
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004016:	4d2e      	ldr	r5, [pc, #184]	; (80040d0 <rxBluetooth+0x2c4>)
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 8004018:	7ee3      	ldrb	r3, [r4, #27]
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 800401a:	7ea2      	ldrb	r2, [r4, #26]
				contadorOutput(&outPuts);
 800401c:	482e      	ldr	r0, [pc, #184]	; (80040d8 <rxBluetooth+0x2cc>)
				PrimitiveStates.SPTimerSegundos = bluetooth._RxDataArr[7];
 800401e:	f885 310a 	strb.w	r3, [r5, #266]	; 0x10a
				PrimitiveStates.RTTimerSegundos = PrimitiveStates.SPTimerSegundos;
 8004022:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
				PrimitiveStates.SPTimerMinutos 	= bluetooth._RxDataArr[6];
 8004026:	f885 2109 	strb.w	r2, [r5, #265]	; 0x109
				PrimitiveStates.RTTimerMinutos = PrimitiveStates.SPTimerMinutos;
 800402a:	f885 210b 	strb.w	r2, [r5, #267]	; 0x10b
				contadorOutput(&outPuts);
 800402e:	f7fe f9ec 	bl	800240a <contadorOutput>
				if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando){
 8004032:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
 8004036:	2b01      	cmp	r3, #1
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <rxBluetooth+0x2c8>)
 800403a:	d00e      	beq.n	800405a <rxBluetooth+0x24e>
 800403c:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
 8004040:	2a01      	cmp	r2, #1
 8004042:	d00a      	beq.n	800405a <rxBluetooth+0x24e>
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8004044:	2201      	movs	r2, #1
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004046:	2104      	movs	r1, #4
					PrimitiveStates.stateTimer 	= TIMER_decrementando;
 8004048:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f003 ffac 	bl	8007faa <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_RECEITA);
 8004052:	2125      	movs	r1, #37	; 0x25
 8004054:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004058:	e763      	b.n	8003f22 <rxBluetooth+0x116>
					PrimitiveStates.stateTimer = TIMER_idle;
 800405a:	2200      	movs	r2, #0
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 800405c:	2102      	movs	r1, #2
					PrimitiveStates.stateTimer = TIMER_idle;
 800405e:	f885 210d 	strb.w	r2, [r5, #269]	; 0x10d
					osSignalSet(TaskBuzzerHandle, SINAL_NEGADO);
 8004062:	e7f3      	b.n	800404c <rxBluetooth+0x240>
				MACRO_ANULA_INATIVIDADE
 8004064:	2200      	movs	r2, #0
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <rxBluetooth+0x2ac>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004068:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 800406a:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <rxBluetooth+0x2c8>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	f003 ff9b 	bl	8007faa <osSignalSet>
				onDigital(&PrimitiveStates.Lampada);
 8004074:	4816      	ldr	r0, [pc, #88]	; (80040d0 <rxBluetooth+0x2c4>)
 8004076:	f7fe f9b4 	bl	80023e2 <onDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 800407a:	2117      	movs	r1, #23
 800407c:	480c      	ldr	r0, [pc, #48]	; (80040b0 <rxBluetooth+0x2a4>)
 800407e:	f7fd f85a 	bl	8001136 <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_LIGA_LAMPADA);
 8004082:	2127      	movs	r1, #39	; 0x27
 8004084:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004088:	e74b      	b.n	8003f22 <rxBluetooth+0x116>
				MACRO_ANULA_INATIVIDADE
 800408a:	2200      	movs	r2, #0
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <rxBluetooth+0x2ac>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800408e:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 8004090:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <rxBluetooth+0x2c8>)
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f003 ff88 	bl	8007faa <osSignalSet>
				offDigital(&PrimitiveStates.Lampada);
 800409a:	480d      	ldr	r0, [pc, #52]	; (80040d0 <rxBluetooth+0x2c4>)
 800409c:	f7fe f9ab 	bl	80023f6 <offDigital>
				putQueueDataTx(&bluetooth, TX_REALTIME_DATA2);
 80040a0:	2117      	movs	r1, #23
 80040a2:	4803      	ldr	r0, [pc, #12]	; (80040b0 <rxBluetooth+0x2a4>)
 80040a4:	f7fd f847 	bl	8001136 <putQueueDataTx>
				bluetooth.aknowladge(&bluetooth,RX_DESLIGA_LAMPADA);
 80040a8:	2128      	movs	r1, #40	; 0x28
 80040aa:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80040ae:	e738      	b.n	8003f22 <rxBluetooth+0x116>
 80040b0:	20000e4c 	.word	0x20000e4c
 80040b4:	200007e0 	.word	0x200007e0
 80040b8:	2000122a 	.word	0x2000122a
 80040bc:	20000e60 	.word	0x20000e60
 80040c0:	20000890 	.word	0x20000890
 80040c4:	20000860 	.word	0x20000860
 80040c8:	200008d8 	.word	0x200008d8
 80040cc:	200008a8 	.word	0x200008a8
 80040d0:	200007e8 	.word	0x200007e8
 80040d4:	20000b9c 	.word	0x20000b9c
 80040d8:	200011a0 	.word	0x200011a0
				PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 80040dc:	7de2      	ldrb	r2, [r4, #23]
 80040de:	4b5f      	ldr	r3, [pc, #380]	; (800425c <rxBluetooth+0x450>)
				osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 80040e0:	2104      	movs	r1, #4
				PrimitiveStates.Lampada.limitOn = bluetooth._RxDataArr[3];
 80040e2:	81da      	strh	r2, [r3, #14]
				osMessagePut(FilaEepromHandle, CEepromLimiteLuz, 0);
 80040e4:	4b5e      	ldr	r3, [pc, #376]	; (8004260 <rxBluetooth+0x454>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f003 ffe0 	bl	80080ae <osMessagePut>
				FlagSincronia.cont=0;
 80040ee:	2200      	movs	r2, #0
				putQueueDataTx(&bluetooth, TX_SINCRONIA);
 80040f0:	2118      	movs	r1, #24
				FlagSincronia.cont=0;
 80040f2:	4b5c      	ldr	r3, [pc, #368]	; (8004264 <rxBluetooth+0x458>)
 80040f4:	705a      	strb	r2, [r3, #1]
				putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 80040f6:	485c      	ldr	r0, [pc, #368]	; (8004268 <rxBluetooth+0x45c>)
 80040f8:	f7fd f81d 	bl	8001136 <putQueueDataTx>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80040fc:	2104      	movs	r1, #4
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <rxBluetooth+0x460>)
 8004100:	6818      	ldr	r0, [r3, #0]
}
 8004102:	b004      	add	sp, #16
 8004104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004108:	f003 bf4f 	b.w	8007faa <osSignalSet>
				desligaForno();
 800410c:	f7fe fac4 	bl	8002698 <desligaForno>
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004110:	4b56      	ldr	r3, [pc, #344]	; (800426c <rxBluetooth+0x460>)
 8004112:	2104      	movs	r1, #4
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	f003 ff48 	bl	8007faa <osSignalSet>
				bluetooth.aknowladge(&bluetooth,RX_CANCELA_PROCESSO);
 800411a:	2129      	movs	r1, #41	; 0x29
 800411c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004120:	e6ff      	b.n	8003f22 <rxBluetooth+0x116>
				MACRO_ANULA_INATIVIDADE
 8004122:	2400      	movs	r4, #0
 8004124:	4b52      	ldr	r3, [pc, #328]	; (8004270 <rxBluetooth+0x464>)
				vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 8004126:	2202      	movs	r2, #2
 8004128:	4952      	ldr	r1, [pc, #328]	; (8004274 <rxBluetooth+0x468>)
 800412a:	4853      	ldr	r0, [pc, #332]	; (8004278 <rxBluetooth+0x46c>)
				MACRO_ANULA_INATIVIDADE
 800412c:	801c      	strh	r4, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Teto.kp,bluetooth._RxDataArr,2);
 800412e:	f7fd fbfd 	bl	800192c <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.ki,bluetooth._RxDataArr,6);
 8004132:	2206      	movs	r2, #6
 8004134:	494f      	ldr	r1, [pc, #316]	; (8004274 <rxBluetooth+0x468>)
 8004136:	4851      	ldr	r0, [pc, #324]	; (800427c <rxBluetooth+0x470>)
 8004138:	f7fd fbf8 	bl	800192c <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Teto.kd,bluetooth._RxDataArr,10);
 800413c:	220a      	movs	r2, #10
 800413e:	494d      	ldr	r1, [pc, #308]	; (8004274 <rxBluetooth+0x468>)
 8004140:	484f      	ldr	r0, [pc, #316]	; (8004280 <rxBluetooth+0x474>)
 8004142:	f7fd fbf3 	bl	800192c <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.histerese,bluetooth._RxDataArr,14);
 8004146:	220e      	movs	r2, #14
 8004148:	494a      	ldr	r1, [pc, #296]	; (8004274 <rxBluetooth+0x468>)
 800414a:	484e      	ldr	r0, [pc, #312]	; (8004284 <rxBluetooth+0x478>)
 800414c:	f7fd fc0a 	bl	8001964 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Teto.limite ,bluetooth._RxDataArr,16);
 8004150:	2210      	movs	r2, #16
 8004152:	4948      	ldr	r1, [pc, #288]	; (8004274 <rxBluetooth+0x468>)
 8004154:	484c      	ldr	r0, [pc, #304]	; (8004288 <rxBluetooth+0x47c>)
 8004156:	f7fd fc05 	bl	8001964 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Teto);
 800415a:	484c      	ldr	r0, [pc, #304]	; (800428c <rxBluetooth+0x480>)
 800415c:	f7ff fe30 	bl	8003dc0 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 8004160:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <rxBluetooth+0x454>)
 8004162:	4622      	mov	r2, r4
 8004164:	2108      	movs	r1, #8
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	f003 ffa1 	bl	80080ae <osMessagePut>
				PID_SetTunings(&TPIDTeto, PrimitiveStates.Teto.kp, PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd);
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <rxBluetooth+0x450>)
 800416e:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8004172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004176:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800417a:	e9cd 0100 	strd	r0, r1, [sp]
 800417e:	4844      	ldr	r0, [pc, #272]	; (8004290 <rxBluetooth+0x484>)
 8004180:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004184:	f7ff f8b0 	bl	80032e8 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA2);
 8004188:	2119      	movs	r1, #25
 800418a:	e7b4      	b.n	80040f6 <rxBluetooth+0x2ea>
				MACRO_ANULA_INATIVIDADE
 800418c:	2400      	movs	r4, #0
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <rxBluetooth+0x464>)
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8004190:	2202      	movs	r2, #2
 8004192:	4938      	ldr	r1, [pc, #224]	; (8004274 <rxBluetooth+0x468>)
 8004194:	483f      	ldr	r0, [pc, #252]	; (8004294 <rxBluetooth+0x488>)
				MACRO_ANULA_INATIVIDADE
 8004196:	801c      	strh	r4, [r3, #0]
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kp,bluetooth._RxDataArr,2);
 8004198:	f7fd fbc8 	bl	800192c <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.ki,bluetooth._RxDataArr,6);
 800419c:	2206      	movs	r2, #6
 800419e:	4935      	ldr	r1, [pc, #212]	; (8004274 <rxBluetooth+0x468>)
 80041a0:	483d      	ldr	r0, [pc, #244]	; (8004298 <rxBluetooth+0x48c>)
 80041a2:	f7fd fbc3 	bl	800192c <vetor4b_TO_Double>
				vetor4b_TO_Double(&PrimitiveStates.Lastro.kd,bluetooth._RxDataArr,10);
 80041a6:	220a      	movs	r2, #10
 80041a8:	4932      	ldr	r1, [pc, #200]	; (8004274 <rxBluetooth+0x468>)
 80041aa:	483c      	ldr	r0, [pc, #240]	; (800429c <rxBluetooth+0x490>)
 80041ac:	f7fd fbbe 	bl	800192c <vetor4b_TO_Double>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.histerese,bluetooth._RxDataArr,14);
 80041b0:	220e      	movs	r2, #14
 80041b2:	4930      	ldr	r1, [pc, #192]	; (8004274 <rxBluetooth+0x468>)
 80041b4:	483a      	ldr	r0, [pc, #232]	; (80042a0 <rxBluetooth+0x494>)
 80041b6:	f7fd fbd5 	bl	8001964 <vetor2b_TO_uint16>
				vetor2b_TO_uint16(&PrimitiveStates.Lastro.limite ,bluetooth._RxDataArr,16);
 80041ba:	2210      	movs	r2, #16
 80041bc:	492d      	ldr	r1, [pc, #180]	; (8004274 <rxBluetooth+0x468>)
 80041be:	4839      	ldr	r0, [pc, #228]	; (80042a4 <rxBluetooth+0x498>)
 80041c0:	f7fd fbd0 	bl	8001964 <vetor2b_TO_uint16>
				verificaLimiteSetpoint(&PrimitiveStates.Lastro);
 80041c4:	4838      	ldr	r0, [pc, #224]	; (80042a8 <rxBluetooth+0x49c>)
 80041c6:	f7ff fdfb 	bl	8003dc0 <verificaLimiteSetpoint>
				osMessagePut(FilaEepromHandle, CEepromTunning, 0);
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <rxBluetooth+0x454>)
 80041cc:	4622      	mov	r2, r4
 80041ce:	2108      	movs	r1, #8
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f003 ff6c 	bl	80080ae <osMessagePut>
				PID_SetTunings(&TPIDLastro, PrimitiveStates.Lastro.kp, PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd);
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <rxBluetooth+0x450>)
 80041d8:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 80041dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041e0:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 80041e4:	e9cd 0100 	strd	r0, r1, [sp]
 80041e8:	4830      	ldr	r0, [pc, #192]	; (80042ac <rxBluetooth+0x4a0>)
 80041ea:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	; 0xc8
 80041ee:	f7ff f87b 	bl	80032e8 <PID_SetTunings>
				putQueueDataTx(&bluetooth, TX_SINCRONIA3);
 80041f2:	2120      	movs	r1, #32
 80041f4:	e77f      	b.n	80040f6 <rxBluetooth+0x2ea>
				MACRO_ANULA_INATIVIDADE
 80041f6:	2200      	movs	r2, #0
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041f8:	4d1c      	ldr	r5, [pc, #112]	; (800426c <rxBluetooth+0x460>)
				MACRO_ANULA_INATIVIDADE
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <rxBluetooth+0x464>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 80041fc:	2104      	movs	r1, #4
 80041fe:	6828      	ldr	r0, [r5, #0]
				MACRO_ANULA_INATIVIDADE
 8004200:	801a      	strh	r2, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004202:	f003 fed2 	bl	8007faa <osSignalSet>
				PrimitiveStates.Buzzer = !PrimitiveStates.Buzzer;
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <rxBluetooth+0x450>)
 8004208:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 800420c:	2a00      	cmp	r2, #0
 800420e:	bf0c      	ite	eq
 8004210:	2201      	moveq	r2, #1
 8004212:	2200      	movne	r2, #0
 8004214:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
				if(PrimitiveStates.Buzzer){
 8004218:	d103      	bne.n	8004222 <rxBluetooth+0x416>
					osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800421a:	2104      	movs	r1, #4
 800421c:	6828      	ldr	r0, [r5, #0]
 800421e:	f003 fec4 	bl	8007faa <osSignalSet>
				osMessagePut(FilaEepromHandle, CEepromToogleBuzzer, 0);
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <rxBluetooth+0x454>)
 8004224:	2109      	movs	r1, #9
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	f003 ff40 	bl	80080ae <osMessagePut>
				bluetooth.aknowladge(&bluetooth,RX_TOGGLE_BUZZER);
 800422e:	2135      	movs	r1, #53	; 0x35
 8004230:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004234:	e675      	b.n	8003f22 <rxBluetooth+0x116>
				MACRO_ANULA_INATIVIDADE
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <rxBluetooth+0x464>)
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 8004238:	2104      	movs	r1, #4
				MACRO_ANULA_INATIVIDADE
 800423a:	801e      	strh	r6, [r3, #0]
				osSignalSet(TaskBuzzerHandle, SINAL_COMFIRMA);
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <rxBluetooth+0x460>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	f003 feb3 	bl	8007faa <osSignalSet>
				osMessagePut(FilaEepromHandle, CEepromClearErrors, 0);
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <rxBluetooth+0x454>)
 8004246:	210a      	movs	r1, #10
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	4632      	mov	r2, r6
 800424c:	f003 ff2f 	bl	80080ae <osMessagePut>
				bluetooth.aknowladge(&bluetooth,RX_APAGA_ERROS);
 8004250:	4629      	mov	r1, r5
 8004252:	4620      	mov	r0, r4
 8004254:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8004258:	e664      	b.n	8003f24 <rxBluetooth+0x118>
 800425a:	bf00      	nop
 800425c:	200007e8 	.word	0x200007e8
 8004260:	200007e0 	.word	0x200007e0
 8004264:	20001228 	.word	0x20001228
 8004268:	20000e4c 	.word	0x20000e4c
 800426c:	20000b9c 	.word	0x20000b9c
 8004270:	2000122a 	.word	0x2000122a
 8004274:	20000e60 	.word	0x20000e60
 8004278:	20000868 	.word	0x20000868
 800427c:	20000870 	.word	0x20000870
 8004280:	20000878 	.word	0x20000878
 8004284:	2000089a 	.word	0x2000089a
 8004288:	20000898 	.word	0x20000898
 800428c:	20000860 	.word	0x20000860
 8004290:	20001810 	.word	0x20001810
 8004294:	200008b0 	.word	0x200008b0
 8004298:	200008b8 	.word	0x200008b8
 800429c:	200008c0 	.word	0x200008c0
 80042a0:	200008e2 	.word	0x200008e2
 80042a4:	200008e0 	.word	0x200008e0
 80042a8:	200008a8 	.word	0x200008a8
 80042ac:	200017a0 	.word	0x200017a0

080042b0 <StartBluetooth>:
{
 80042b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	initBluetooth();
 80042b2:	f7ff fbc5 	bl	8003a40 <initBluetooth>
			txBleComando(&bluetooth);
 80042b6:	4c0e      	ldr	r4, [pc, #56]	; (80042f0 <StartBluetooth+0x40>)
		evt = osSignalWait(newMessage, osWaitForever);
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	210a      	movs	r1, #10
 80042be:	a801      	add	r0, sp, #4
 80042c0:	f003 fe9c 	bl	8007ffc <osSignalWait>
		if (evt.status == osEventSignal) {
 80042c4:	9b01      	ldr	r3, [sp, #4]
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d106      	bne.n	80042d8 <StartBluetooth+0x28>
			txBleComando(&bluetooth);
 80042ca:	4620      	mov	r0, r4
 80042cc:	f7fd f8bc 	bl	8001448 <txBleComando>
			rxBluetooth();
 80042d0:	f7ff fd9c 	bl	8003e0c <rxBluetooth>
			txBluetooth();
 80042d4:	f7ff fc32 	bl	8003b3c <txBluetooth>
		if (!bluetooth.myQ_dataTx->is_empty(bluetooth.myQ_dataTx))
 80042d8:	6920      	ldr	r0, [r4, #16]
 80042da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042dc:	4798      	blx	r3
 80042de:	b918      	cbnz	r0, 80042e8 <StartBluetooth+0x38>
			osSignalSet(bluetooth.Task, newMessage);
 80042e0:	210a      	movs	r1, #10
 80042e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80042e4:	f003 fe61 	bl	8007faa <osSignalSet>
		osDelay(40);
 80042e8:	2028      	movs	r0, #40	; 0x28
 80042ea:	f003 fe15 	bl	8007f18 <osDelay>
		evt = osSignalWait(newMessage, osWaitForever);
 80042ee:	e7e3      	b.n	80042b8 <StartBluetooth+0x8>
 80042f0:	20000e4c 	.word	0x20000e4c

080042f4 <sequencia2Buzzer>:
		M_BUZZER_OFF
		offDigital(&PrimitiveStates.Lampada);
		osDelay(100);
	}
}
void sequencia2Buzzer(void){
 80042f4:	b538      	push	{r3, r4, r5, lr}
	M_BUZZER_ON
 80042f6:	4d0a      	ldr	r5, [pc, #40]	; (8004320 <sequencia2Buzzer+0x2c>)
	onDigital(&PrimitiveStates.Lampada);
 80042f8:	4c0a      	ldr	r4, [pc, #40]	; (8004324 <sequencia2Buzzer+0x30>)
	M_BUZZER_ON
 80042fa:	210c      	movs	r1, #12
 80042fc:	4628      	mov	r0, r5
 80042fe:	f003 f8e9 	bl	80074d4 <HAL_TIM_PWM_Start>
	onDigital(&PrimitiveStates.Lampada);
 8004302:	4620      	mov	r0, r4
 8004304:	f7fe f86d 	bl	80023e2 <onDigital>
	osDelay(100);
 8004308:	2064      	movs	r0, #100	; 0x64
 800430a:	f003 fe05 	bl	8007f18 <osDelay>
	M_BUZZER_OFF
 800430e:	4628      	mov	r0, r5
 8004310:	210c      	movs	r1, #12
 8004312:	f003 f91b 	bl	800754c <HAL_TIM_PWM_Stop>
	offDigital(&PrimitiveStates.Lampada);
 8004316:	4620      	mov	r0, r4
}
 8004318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	offDigital(&PrimitiveStates.Lampada);
 800431c:	f7fe b86b 	b.w	80023f6 <offDigital>
 8004320:	2000107c 	.word	0x2000107c
 8004324:	200007e8 	.word	0x200007e8

08004328 <waitBuzzerSignal>:
void waitBuzzerSignal(void){
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432a:	b085      	sub	sp, #20
	const int32_t signals = SINAL_TEMP_REACH | SINAL_COMFIRMA | SINAL_NEGADO | SINAL_PRONTO | SINAL_CONECTOU;
	osEvent evt;

	// Aguarde até que qualquer um dos sinais seja recebido
	evt = osSignalWait(signals, osWaitForever);
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	211f      	movs	r1, #31
 8004332:	a801      	add	r0, sp, #4
 8004334:	f003 fe62 	bl	8007ffc <osSignalWait>

	// Verifique os sinais
	if (evt.status == osEventSignal) {
 8004338:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
 800433c:	2b08      	cmp	r3, #8
 800433e:	f040 80c0 	bne.w	80044c2 <waitBuzzerSignal+0x19a>

		if (evt.value.signals & SINAL_TEMP_REACH) {
 8004342:	07e5      	lsls	r5, r4, #31
 8004344:	d514      	bpl.n	8004370 <waitBuzzerSignal+0x48>
			onDigital(&PrimitiveStates.Lampada);
 8004346:	4860      	ldr	r0, [pc, #384]	; (80044c8 <waitBuzzerSignal+0x1a0>)
 8004348:	f7fe f84b 	bl	80023e2 <onDigital>
 800434c:	2505      	movs	r5, #5
			// execute o padrão de buzzer para SINAL_TEMP_REACH
			for (int i = 0; i < 5; ++i) {
				M_BUZZER_ON
 800434e:	4e5f      	ldr	r6, [pc, #380]	; (80044cc <waitBuzzerSignal+0x1a4>)
 8004350:	210c      	movs	r1, #12
 8004352:	4630      	mov	r0, r6
 8004354:	f003 f8be 	bl	80074d4 <HAL_TIM_PWM_Start>
				osDelay(50);
 8004358:	2032      	movs	r0, #50	; 0x32
 800435a:	f003 fddd 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 800435e:	210c      	movs	r1, #12
 8004360:	4630      	mov	r0, r6
 8004362:	f003 f8f3 	bl	800754c <HAL_TIM_PWM_Stop>
				osDelay(30);
 8004366:	201e      	movs	r0, #30
 8004368:	f003 fdd6 	bl	8007f18 <osDelay>
			for (int i = 0; i < 5; ++i) {
 800436c:	3d01      	subs	r5, #1
 800436e:	d1ef      	bne.n	8004350 <waitBuzzerSignal+0x28>
			}
		}

		if (evt.value.signals & SINAL_COMFIRMA) {
 8004370:	0760      	lsls	r0, r4, #29
 8004372:	d519      	bpl.n	80043a8 <waitBuzzerSignal+0x80>
			//retorna caso buzzer desabilitado
			if(!PrimitiveStates.Buzzer){
 8004374:	4b54      	ldr	r3, [pc, #336]	; (80044c8 <waitBuzzerSignal+0x1a0>)
 8004376:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800437a:	b933      	cbnz	r3, 800438a <waitBuzzerSignal+0x62>
				M_BUZZER_OFF
 800437c:	210c      	movs	r1, #12
 800437e:	4853      	ldr	r0, [pc, #332]	; (80044cc <waitBuzzerSignal+0x1a4>)
			offDigital(&PrimitiveStates.LedVerde);
			osDelay(150);

		}
	}
}
 8004380:	b005      	add	sp, #20
 8004382:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				M_BUZZER_OFF
 8004386:	f003 b8e1 	b.w	800754c <HAL_TIM_PWM_Stop>
			M_BUZZER_ON
 800438a:	210c      	movs	r1, #12
 800438c:	484f      	ldr	r0, [pc, #316]	; (80044cc <waitBuzzerSignal+0x1a4>)
 800438e:	f003 f8a1 	bl	80074d4 <HAL_TIM_PWM_Start>
			osDelay(70);
 8004392:	2046      	movs	r0, #70	; 0x46
 8004394:	f003 fdc0 	bl	8007f18 <osDelay>
			M_BUZZER_OFF
 8004398:	210c      	movs	r1, #12
 800439a:	484c      	ldr	r0, [pc, #304]	; (80044cc <waitBuzzerSignal+0x1a4>)
 800439c:	f003 f8d6 	bl	800754c <HAL_TIM_PWM_Stop>
			osDelay(500);
 80043a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043a4:	f003 fdb8 	bl	8007f18 <osDelay>
		if (evt.value.signals & SINAL_NEGADO) {
 80043a8:	07a1      	lsls	r1, r4, #30
 80043aa:	d520      	bpl.n	80043ee <waitBuzzerSignal+0xc6>
			if(!PrimitiveStates.Buzzer){
 80043ac:	4b46      	ldr	r3, [pc, #280]	; (80044c8 <waitBuzzerSignal+0x1a0>)
 80043ae:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0e2      	beq.n	800437c <waitBuzzerSignal+0x54>
				M_BUZZER_ON
 80043b6:	210c      	movs	r1, #12
 80043b8:	4844      	ldr	r0, [pc, #272]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80043ba:	f003 f88b 	bl	80074d4 <HAL_TIM_PWM_Start>
				osDelay(70);
 80043be:	2046      	movs	r0, #70	; 0x46
 80043c0:	f003 fdaa 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 80043c4:	210c      	movs	r1, #12
 80043c6:	4841      	ldr	r0, [pc, #260]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80043c8:	f003 f8c0 	bl	800754c <HAL_TIM_PWM_Stop>
				osDelay(50);
 80043cc:	2032      	movs	r0, #50	; 0x32
 80043ce:	f003 fda3 	bl	8007f18 <osDelay>
				M_BUZZER_ON
 80043d2:	210c      	movs	r1, #12
 80043d4:	483d      	ldr	r0, [pc, #244]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80043d6:	f003 f87d 	bl	80074d4 <HAL_TIM_PWM_Start>
				osDelay(70);
 80043da:	2046      	movs	r0, #70	; 0x46
 80043dc:	f003 fd9c 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 80043e0:	210c      	movs	r1, #12
 80043e2:	483a      	ldr	r0, [pc, #232]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80043e4:	f003 f8b2 	bl	800754c <HAL_TIM_PWM_Stop>
				osDelay(50);
 80043e8:	2032      	movs	r0, #50	; 0x32
 80043ea:	f003 fd95 	bl	8007f18 <osDelay>
		if (evt.value.signals & SINAL_PRONTO) {
 80043ee:	0722      	lsls	r2, r4, #28
 80043f0:	d51b      	bpl.n	800442a <waitBuzzerSignal+0x102>
 80043f2:	250a      	movs	r5, #10
				M_BUZZER_ON
 80043f4:	4f35      	ldr	r7, [pc, #212]	; (80044cc <waitBuzzerSignal+0x1a4>)
				onDigital(&PrimitiveStates.Lampada);
 80043f6:	4e34      	ldr	r6, [pc, #208]	; (80044c8 <waitBuzzerSignal+0x1a0>)
				M_BUZZER_ON
 80043f8:	210c      	movs	r1, #12
 80043fa:	4638      	mov	r0, r7
 80043fc:	f003 f86a 	bl	80074d4 <HAL_TIM_PWM_Start>
				onDigital(&PrimitiveStates.Lampada);
 8004400:	4630      	mov	r0, r6
 8004402:	f7fd ffee 	bl	80023e2 <onDigital>
				osDelay(250);
 8004406:	20fa      	movs	r0, #250	; 0xfa
 8004408:	f003 fd86 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 800440c:	210c      	movs	r1, #12
 800440e:	4638      	mov	r0, r7
 8004410:	f003 f89c 	bl	800754c <HAL_TIM_PWM_Stop>
				offDigital(&PrimitiveStates.Lampada);
 8004414:	4630      	mov	r0, r6
 8004416:	f7fd ffee 	bl	80023f6 <offDigital>
				osDelay(100);
 800441a:	2064      	movs	r0, #100	; 0x64
 800441c:	f003 fd7c 	bl	8007f18 <osDelay>
			for (int i = 0; i < N_REP_SINAL_PRONTO; ++i) {
 8004420:	3d01      	subs	r5, #1
 8004422:	d1e9      	bne.n	80043f8 <waitBuzzerSignal+0xd0>
			onDigital(&PrimitiveStates.Lampada);//DEIXA LAMPADA LIGADA
 8004424:	4828      	ldr	r0, [pc, #160]	; (80044c8 <waitBuzzerSignal+0x1a0>)
 8004426:	f7fd ffdc 	bl	80023e2 <onDigital>
		if (evt.value.signals & SINAL_CONECTOU) {
 800442a:	06e3      	lsls	r3, r4, #27
 800442c:	d549      	bpl.n	80044c2 <waitBuzzerSignal+0x19a>
			if(!PrimitiveStates.Buzzer){
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <waitBuzzerSignal+0x1a0>)
				M_BUZZER_OFF
 8004430:	210c      	movs	r1, #12
			if(!PrimitiveStates.Buzzer){
 8004432:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
				M_BUZZER_OFF
 8004436:	4825      	ldr	r0, [pc, #148]	; (80044cc <waitBuzzerSignal+0x1a4>)
			if(!PrimitiveStates.Buzzer){
 8004438:	bb43      	cbnz	r3, 800448c <waitBuzzerSignal+0x164>
				M_BUZZER_OFF
 800443a:	f003 f887 	bl	800754c <HAL_TIM_PWM_Stop>
			onDigital(&PrimitiveStates.LedTeto);
 800443e:	4824      	ldr	r0, [pc, #144]	; (80044d0 <waitBuzzerSignal+0x1a8>)
 8004440:	f7fd ffcf 	bl	80023e2 <onDigital>
			osDelay(150);
 8004444:	2096      	movs	r0, #150	; 0x96
 8004446:	f003 fd67 	bl	8007f18 <osDelay>
			onDigital(&PrimitiveStates.LedLastro);
 800444a:	4822      	ldr	r0, [pc, #136]	; (80044d4 <waitBuzzerSignal+0x1ac>)
 800444c:	f7fd ffc9 	bl	80023e2 <onDigital>
			osDelay(150);
 8004450:	2096      	movs	r0, #150	; 0x96
 8004452:	f003 fd61 	bl	8007f18 <osDelay>
			onDigital(&PrimitiveStates.LedVerde);
 8004456:	4820      	ldr	r0, [pc, #128]	; (80044d8 <waitBuzzerSignal+0x1b0>)
 8004458:	f7fd ffc3 	bl	80023e2 <onDigital>
			osDelay(150);
 800445c:	2096      	movs	r0, #150	; 0x96
 800445e:	f003 fd5b 	bl	8007f18 <osDelay>
			offDigital(&PrimitiveStates.LedTeto);
 8004462:	481b      	ldr	r0, [pc, #108]	; (80044d0 <waitBuzzerSignal+0x1a8>)
 8004464:	f7fd ffc7 	bl	80023f6 <offDigital>
			osDelay(150);
 8004468:	2096      	movs	r0, #150	; 0x96
 800446a:	f003 fd55 	bl	8007f18 <osDelay>
			offDigital(&PrimitiveStates.LedLastro);
 800446e:	4819      	ldr	r0, [pc, #100]	; (80044d4 <waitBuzzerSignal+0x1ac>)
 8004470:	f7fd ffc1 	bl	80023f6 <offDigital>
			osDelay(150);
 8004474:	2096      	movs	r0, #150	; 0x96
 8004476:	f003 fd4f 	bl	8007f18 <osDelay>
			offDigital(&PrimitiveStates.LedVerde);
 800447a:	4817      	ldr	r0, [pc, #92]	; (80044d8 <waitBuzzerSignal+0x1b0>)
 800447c:	f7fd ffbb 	bl	80023f6 <offDigital>
			osDelay(150);
 8004480:	2096      	movs	r0, #150	; 0x96
}
 8004482:	b005      	add	sp, #20
 8004484:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			osDelay(150);
 8004488:	f003 bd46 	b.w	8007f18 <osDelay>
				M_BUZZER_ON
 800448c:	f003 f822 	bl	80074d4 <HAL_TIM_PWM_Start>
				osDelay(30);
 8004490:	201e      	movs	r0, #30
 8004492:	f003 fd41 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 8004496:	210c      	movs	r1, #12
 8004498:	480c      	ldr	r0, [pc, #48]	; (80044cc <waitBuzzerSignal+0x1a4>)
 800449a:	f003 f857 	bl	800754c <HAL_TIM_PWM_Stop>
				osDelay(20);
 800449e:	2014      	movs	r0, #20
 80044a0:	f003 fd3a 	bl	8007f18 <osDelay>
				M_BUZZER_ON
 80044a4:	210c      	movs	r1, #12
 80044a6:	4809      	ldr	r0, [pc, #36]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80044a8:	f003 f814 	bl	80074d4 <HAL_TIM_PWM_Start>
				osDelay(30);
 80044ac:	201e      	movs	r0, #30
 80044ae:	f003 fd33 	bl	8007f18 <osDelay>
				M_BUZZER_OFF
 80044b2:	210c      	movs	r1, #12
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <waitBuzzerSignal+0x1a4>)
 80044b6:	f003 f849 	bl	800754c <HAL_TIM_PWM_Stop>
				osDelay(20);
 80044ba:	2014      	movs	r0, #20
 80044bc:	f003 fd2c 	bl	8007f18 <osDelay>
 80044c0:	e7bd      	b.n	800443e <waitBuzzerSignal+0x116>
}
 80044c2:	b005      	add	sp, #20
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200007e8 	.word	0x200007e8
 80044cc:	2000107c 	.word	0x2000107c
 80044d0:	20000830 	.word	0x20000830
 80044d4:	20000848 	.word	0x20000848
 80044d8:	20000818 	.word	0x20000818

080044dc <StartBuzzer>:
{
 80044dc:	b508      	push	{r3, lr}
	sequencia2Buzzer();
 80044de:	f7ff ff09 	bl	80042f4 <sequencia2Buzzer>
		waitBuzzerSignal();
 80044e2:	f7ff ff21 	bl	8004328 <waitBuzzerSignal>
		osThreadYield();
 80044e6:	f003 fd0b 	bl	8007f00 <osThreadYield>
		osDelay(100);
 80044ea:	2064      	movs	r0, #100	; 0x64
 80044ec:	f003 fd14 	bl	8007f18 <osDelay>
	for(;;)
 80044f0:	e7f7      	b.n	80044e2 <StartBuzzer+0x6>
 80044f2:	0000      	movs	r0, r0
 80044f4:	0000      	movs	r0, r0
	...

080044f8 <setupEepromVarArr>:
		osThreadYield();
		osDelay(500);
	}
}

void setupEepromVarArr(void){
 80044f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	// tempo de LUZ.
	init_objArrEeprom(&E_tempoDelayLuz, SOFT_RESET, addrTEMPO_LUZ, DATA_16BITS, &PrimitiveStates.Lampada.limitOn);
 80044fc:	2301      	movs	r3, #1
 80044fe:	f8df a318 	ldr.w	sl, [pc, #792]	; 8004818 <setupEepromVarArr+0x320>
 8004502:	4cc6      	ldr	r4, [pc, #792]	; (800481c <setupEepromVarArr+0x324>)
	E_tempoDelayLuz.M_setStdValues16bits(&E_tempoDelayLuz, 0 ,TIME_LAMPADA,6000);
	eeprom.M_AddOnArr(&eeprom,	&E_tempoDelayLuz);
 8004504:	4fc6      	ldr	r7, [pc, #792]	; (8004820 <setupEepromVarArr+0x328>)
	init_objArrEeprom(&E_tempoDelayLuz, SOFT_RESET, addrTEMPO_LUZ, DATA_16BITS, &PrimitiveStates.Lampada.limitOn);
 8004506:	461a      	mov	r2, r3
 8004508:	4620      	mov	r0, r4
 800450a:	2100      	movs	r1, #0
 800450c:	f8cd a000 	str.w	sl, [sp]
 8004510:	f7fd fd7e 	bl	8002010 <init_objArrEeprom>
	E_tempoDelayLuz.M_setStdValues16bits(&E_tempoDelayLuz, 0 ,TIME_LAMPADA,6000);
 8004514:	222d      	movs	r2, #45	; 0x2d
 8004516:	4620      	mov	r0, r4
 8004518:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800451a:	f241 7370 	movw	r3, #6000	; 0x1770
 800451e:	2100      	movs	r1, #0
 8004520:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_tempoDelayLuz);
 8004522:	4621      	mov	r1, r4
 8004524:	4638      	mov	r0, r7
 8004526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800452a:	4798      	blx	r3

	// HORIMETRO, total apenas de HORAS em funcionamento.
	init_objArrEeprom(&E_horimetroHoras, HARD_RESET, addrHORIMETRO, DATA_16BITS, &Calendario.Horimetro_horas);
 800452c:	2301      	movs	r3, #1
 800452e:	4ebd      	ldr	r6, [pc, #756]	; (8004824 <setupEepromVarArr+0x32c>)
 8004530:	4cbd      	ldr	r4, [pc, #756]	; (8004828 <setupEepromVarArr+0x330>)
 8004532:	4619      	mov	r1, r3
 8004534:	4630      	mov	r0, r6
 8004536:	9400      	str	r4, [sp, #0]
 8004538:	2203      	movs	r2, #3
 800453a:	f7fd fd69 	bl	8002010 <init_objArrEeprom>
	E_horimetroHoras.M_setStdValues16bits(&E_horimetroHoras, 0,0,60000);
 800453e:	2200      	movs	r2, #0
 8004540:	4630      	mov	r0, r6
 8004542:	4611      	mov	r1, r2
 8004544:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8004546:	f64e 2360 	movw	r3, #60000	; 0xea60
 800454a:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroHoras);
 800454c:	4631      	mov	r1, r6
 800454e:	4638      	mov	r0, r7

	// HORIMETRO, parte em MINUTOS do total.
	init_objArrEeprom(&E_horimetroMinutos, HARD_RESET, addrMINUTIMETRO, DATA_8BITS, &Calendario.Horimetro_parcial_min);
 8004550:	4eb6      	ldr	r6, [pc, #728]	; (800482c <setupEepromVarArr+0x334>)
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroHoras);
 8004552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004556:	4798      	blx	r3
	init_objArrEeprom(&E_horimetroMinutos, HARD_RESET, addrMINUTIMETRO, DATA_8BITS, &Calendario.Horimetro_parcial_min);
 8004558:	1ca3      	adds	r3, r4, #2
 800455a:	4630      	mov	r0, r6
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2205      	movs	r2, #5
 8004560:	2300      	movs	r3, #0
 8004562:	2101      	movs	r1, #1
 8004564:	f7fd fd54 	bl	8002010 <init_objArrEeprom>
	E_horimetroMinutos.M_setStdValues8bits(&E_horimetroMinutos, 0,0,60);
 8004568:	2200      	movs	r2, #0
 800456a:	4630      	mov	r0, r6
 800456c:	4611      	mov	r1, r2
 800456e:	6b35      	ldr	r5, [r6, #48]	; 0x30
 8004570:	233c      	movs	r3, #60	; 0x3c
 8004572:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_horimetroMinutos);
 8004574:	4631      	mov	r1, r6
 8004576:	4638      	mov	r0, r7
 8004578:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800457c:	4798      	blx	r3

	// contagem total de ciclos realizados pelo TIMER.
	init_objArrEeprom(&E_totalCiclos, HARD_RESET, addrTOTAL_GERAL, DATA_16BITS, &Calendario.TotalCiclos);
 800457e:	1d23      	adds	r3, r4, #4
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	4eaa      	ldr	r6, [pc, #680]	; (8004830 <setupEepromVarArr+0x338>)
 8004586:	4619      	mov	r1, r3
 8004588:	4630      	mov	r0, r6
 800458a:	2209      	movs	r2, #9
 800458c:	f7fd fd40 	bl	8002010 <init_objArrEeprom>
	E_totalCiclos.M_setStdValues16bits(&E_totalCiclos, 0,0,60000);
 8004590:	2200      	movs	r2, #0
 8004592:	4630      	mov	r0, r6
 8004594:	4611      	mov	r1, r2
 8004596:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8004598:	f64e 2360 	movw	r3, #60000	; 0xea60
 800459c:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_totalCiclos);
 800459e:	4631      	mov	r1, r6
 80045a0:	4638      	mov	r0, r7
 80045a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045a6:	4798      	blx	r3

	// contagem total de vezes que o sensor de TETO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContTetoMax, HARD_RESET, addrCONT_MAX_TETO, DATA_16BITS, &Calendario.ContMaxTeto);
 80045a8:	1da3      	adds	r3, r4, #6
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2301      	movs	r3, #1
 80045ae:	4ea1      	ldr	r6, [pc, #644]	; (8004834 <setupEepromVarArr+0x33c>)
 80045b0:	4619      	mov	r1, r3
 80045b2:	4630      	mov	r0, r6
 80045b4:	220b      	movs	r2, #11
 80045b6:	f7fd fd2b 	bl	8002010 <init_objArrEeprom>
	E_ContTetoMax.M_setStdValues16bits(&E_ContTetoMax, 0,0,60000);
 80045ba:	2200      	movs	r2, #0
 80045bc:	4630      	mov	r0, r6
 80045be:	4611      	mov	r1, r2
 80045c0:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80045c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045c6:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_ContTetoMax);
 80045c8:	4631      	mov	r1, r6
 80045ca:	4638      	mov	r0, r7
 80045cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d0:	4798      	blx	r3

	// contagem total de vezes que o sensor de LASTRO chegou em temperatura maxima.
	init_objArrEeprom(&E_ContLastroMax, HARD_RESET, addrCONT_MAX_LASTRO, DATA_16BITS, &Calendario.ContMaxLastro);
 80045d2:	2301      	movs	r3, #1
 80045d4:	4d98      	ldr	r5, [pc, #608]	; (8004838 <setupEepromVarArr+0x340>)
 80045d6:	3408      	adds	r4, #8
 80045d8:	4619      	mov	r1, r3
 80045da:	4628      	mov	r0, r5
 80045dc:	9400      	str	r4, [sp, #0]
 80045de:	220d      	movs	r2, #13
 80045e0:	f7fd fd16 	bl	8002010 <init_objArrEeprom>
	E_ContLastroMax.M_setStdValues16bits(&E_ContLastroMax, 0,0,60000);
 80045e4:	2200      	movs	r2, #0
 80045e6:	4628      	mov	r0, r5
 80045e8:	4611      	mov	r1, r2
 80045ea:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 80045ec:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045f0:	47a0      	blx	r4
	eeprom.M_AddOnArr(&eeprom,	&E_ContLastroMax);

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE TETO -----------------*/
	// HISTERESE em graus do TETO.
	init_objArrEeprom(&E_hitereseStateTeto, SOFT_RESET, addrTETO_HIST, DATA_16BITS, &PrimitiveStates.Teto.histerese);
 80045f2:	4c92      	ldr	r4, [pc, #584]	; (800483c <setupEepromVarArr+0x344>)
	eeprom.M_AddOnArr(&eeprom,	&E_ContLastroMax);
 80045f4:	4629      	mov	r1, r5
 80045f6:	4638      	mov	r0, r7
 80045f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045fc:	4798      	blx	r3
	init_objArrEeprom(&E_hitereseStateTeto, SOFT_RESET, addrTETO_HIST, DATA_16BITS, &PrimitiveStates.Teto.histerese);
 80045fe:	f10a 03a4 	add.w	r3, sl, #164	; 0xa4
 8004602:	4620      	mov	r0, r4
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2229      	movs	r2, #41	; 0x29
 8004608:	2301      	movs	r3, #1
 800460a:	2100      	movs	r1, #0
 800460c:	f7fd fd00 	bl	8002010 <init_objArrEeprom>
	E_hitereseStateTeto.M_setStdValues16bits(&E_hitereseStateTeto, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 8004610:	2203      	movs	r2, #3
 8004612:	4620      	mov	r0, r4
 8004614:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004616:	2314      	movs	r3, #20
 8004618:	2100      	movs	r1, #0
 800461a:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateTeto);
 800461c:	4621      	mov	r1, r4
 800461e:	4638      	mov	r0, r7

	// LIMITE para TETO.
	init_objArrEeprom(&E_limiteTeto, SOFT_RESET, addrTETO_LIMIT, DATA_16BITS, &PrimitiveStates.Teto.limite);
 8004620:	4c87      	ldr	r4, [pc, #540]	; (8004840 <setupEepromVarArr+0x348>)
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateTeto);
 8004622:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004626:	4798      	blx	r3
	init_objArrEeprom(&E_limiteTeto, SOFT_RESET, addrTETO_LIMIT, DATA_16BITS, &PrimitiveStates.Teto.limite);
 8004628:	f10a 03a2 	add.w	r3, sl, #162	; 0xa2
 800462c:	4620      	mov	r0, r4
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	222b      	movs	r2, #43	; 0x2b
 8004632:	2301      	movs	r3, #1
 8004634:	2100      	movs	r1, #0
 8004636:	f7fd fceb 	bl	8002010 <init_objArrEeprom>
	E_limiteTeto.M_setStdValues16bits(&E_limiteTeto, 0 ,STD_LIMITETETO,STD_LIMITE_TEMP);
 800463a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800463e:	4620      	mov	r0, r4
 8004640:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004642:	f44f 7316 	mov.w	r3, #600	; 0x258
 8004646:	2100      	movs	r1, #0
 8004648:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_limiteTeto);

	// KP value para TETO.
	init_objArrEeprom(&E_kPTeto, SOFT_RESET, addrTETO_KP, DATA_DOUBLE, &PrimitiveStates.Teto.kp);
 800464a:	4e7e      	ldr	r6, [pc, #504]	; (8004844 <setupEepromVarArr+0x34c>)
	eeprom.M_AddOnArr(&eeprom,	&E_limiteTeto);
 800464c:	4621      	mov	r1, r4
 800464e:	4638      	mov	r0, r7
 8004650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004654:	4798      	blx	r3
	init_objArrEeprom(&E_kPTeto, SOFT_RESET, addrTETO_KP, DATA_DOUBLE, &PrimitiveStates.Teto.kp);
 8004656:	f10a 0372 	add.w	r3, sl, #114	; 0x72
 800465a:	4630      	mov	r0, r6
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	220f      	movs	r2, #15
 8004660:	2304      	movs	r3, #4
 8004662:	2100      	movs	r1, #0
 8004664:	f7fd fcd4 	bl	8002010 <init_objArrEeprom>
	E_kPTeto.M_setStdValuesDouble(&E_kPTeto, 0 ,STD_KP,1000);
 8004668:	f04f 0800 	mov.w	r8, #0
 800466c:	2200      	movs	r2, #0
 800466e:	2400      	movs	r4, #0
 8004670:	2500      	movs	r5, #0
 8004672:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8004848 <setupEepromVarArr+0x350>
 8004676:	4b75      	ldr	r3, [pc, #468]	; (800484c <setupEepromVarArr+0x354>)
 8004678:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800467c:	e9cd 2300 	strd	r2, r3, [sp]
 8004680:	4630      	mov	r0, r6
 8004682:	4622      	mov	r2, r4
 8004684:	462b      	mov	r3, r5
 8004686:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8004688:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPTeto);
 800468a:	4631      	mov	r1, r6
 800468c:	4638      	mov	r0, r7

	// KI value para TETO.
	init_objArrEeprom(&E_kITeto, SOFT_RESET, addrTETO_KI, DATA_DOUBLE, &PrimitiveStates.Teto.ki);
 800468e:	4e70      	ldr	r6, [pc, #448]	; (8004850 <setupEepromVarArr+0x358>)
	eeprom.M_AddOnArr(&eeprom,	&E_kPTeto);
 8004690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004694:	4798      	blx	r3
	init_objArrEeprom(&E_kITeto, SOFT_RESET, addrTETO_KI, DATA_DOUBLE, &PrimitiveStates.Teto.ki);
 8004696:	f10a 037a 	add.w	r3, sl, #122	; 0x7a
 800469a:	4630      	mov	r0, r6
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	2217      	movs	r2, #23
 80046a0:	2304      	movs	r3, #4
 80046a2:	2100      	movs	r1, #0
 80046a4:	f7fd fcb4 	bl	8002010 <init_objArrEeprom>
	E_kITeto.M_setStdValuesDouble(&E_kITeto, 0 ,STD_KI,1000);
 80046a8:	a257      	add	r2, pc, #348	; (adr r2, 8004808 <setupEepromVarArr+0x310>)
 80046aa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80046ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80046b2:	e9cd 1200 	strd	r1, r2, [sp]
 80046b6:	462b      	mov	r3, r5
 80046b8:	4622      	mov	r2, r4
 80046ba:	4630      	mov	r0, r6
 80046bc:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80046be:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kITeto);
 80046c0:	4631      	mov	r1, r6
 80046c2:	4638      	mov	r0, r7

	// KD value para TETO.
	init_objArrEeprom(&E_kDTeto, SOFT_RESET, addrTETO_KD, DATA_DOUBLE, &PrimitiveStates.Teto.kd);
 80046c4:	4e63      	ldr	r6, [pc, #396]	; (8004854 <setupEepromVarArr+0x35c>)
	eeprom.M_AddOnArr(&eeprom,	&E_kITeto);
 80046c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ca:	4798      	blx	r3
	init_objArrEeprom(&E_kDTeto, SOFT_RESET, addrTETO_KD, DATA_DOUBLE, &PrimitiveStates.Teto.kd);
 80046cc:	f10a 0382 	add.w	r3, sl, #130	; 0x82
 80046d0:	4630      	mov	r0, r6
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2221      	movs	r2, #33	; 0x21
 80046d6:	2304      	movs	r3, #4
 80046d8:	2100      	movs	r1, #0
 80046da:	f7fd fc99 	bl	8002010 <init_objArrEeprom>
	E_kDTeto.M_setStdValuesDouble(&E_kDTeto, 0 ,STD_KD,1000);
 80046de:	a14c      	add	r1, pc, #304	; (adr r1, 8004810 <setupEepromVarArr+0x318>)
 80046e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046e4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80046e8:	e9cd 0100 	strd	r0, r1, [sp]
 80046ec:	4622      	mov	r2, r4
 80046ee:	462b      	mov	r3, r5
 80046f0:	4630      	mov	r0, r6
 80046f2:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80046f4:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDTeto);
 80046f6:	4631      	mov	r1, r6
 80046f8:	4638      	mov	r0, r7

	/*----------------- MEMORIA DE CONTROLE TEMPERATURA DE LASTRO -----------------*/
	// HISTERESE em graus do LASTRO.
	init_objArrEeprom(&E_hitereseStateLastro, SOFT_RESET, addrLASTRO_HIST, DATA_16BITS, &PrimitiveStates.Lastro.histerese);
 80046fa:	4e57      	ldr	r6, [pc, #348]	; (8004858 <setupEepromVarArr+0x360>)
	eeprom.M_AddOnArr(&eeprom,	&E_kDTeto);
 80046fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004700:	4798      	blx	r3
	init_objArrEeprom(&E_hitereseStateLastro, SOFT_RESET, addrLASTRO_HIST, DATA_16BITS, &PrimitiveStates.Lastro.histerese);
 8004702:	f10a 03ec 	add.w	r3, sl, #236	; 0xec
 8004706:	4630      	mov	r0, r6
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2249      	movs	r2, #73	; 0x49
 800470c:	2301      	movs	r3, #1
 800470e:	2100      	movs	r1, #0
 8004710:	f7fd fc7e 	bl	8002010 <init_objArrEeprom>
	E_hitereseStateLastro.M_setStdValues16bits(&E_hitereseStateLastro, 0 ,STD_HISTERESE,STD_LIMITE_HISTERESE);
 8004714:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
 8004718:	2203      	movs	r2, #3
 800471a:	4630      	mov	r0, r6
 800471c:	2314      	movs	r3, #20
 800471e:	2100      	movs	r1, #0
 8004720:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateLastro);
 8004722:	4631      	mov	r1, r6
 8004724:	4638      	mov	r0, r7

	// LIMITE para LASTRO.
	init_objArrEeprom(&E_limiteLastro, SOFT_RESET, addrLASTRO_LIMIT, DATA_16BITS, &PrimitiveStates.Lastro.limite);
 8004726:	4e4d      	ldr	r6, [pc, #308]	; (800485c <setupEepromVarArr+0x364>)
	eeprom.M_AddOnArr(&eeprom,	&E_hitereseStateLastro);
 8004728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800472c:	4798      	blx	r3
	init_objArrEeprom(&E_limiteLastro, SOFT_RESET, addrLASTRO_LIMIT, DATA_16BITS, &PrimitiveStates.Lastro.limite);
 800472e:	f10a 03ea 	add.w	r3, sl, #234	; 0xea
 8004732:	4630      	mov	r0, r6
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	224b      	movs	r2, #75	; 0x4b
 8004738:	2301      	movs	r3, #1
 800473a:	2100      	movs	r1, #0
 800473c:	f7fd fc68 	bl	8002010 <init_objArrEeprom>
	E_limiteLastro.M_setStdValues16bits(&E_limiteLastro, 0 ,STD_LIMITELASTRO,STD_LIMITE_TEMP);
 8004740:	f8d6 c034 	ldr.w	ip, [r6, #52]	; 0x34
 8004744:	f240 12db 	movw	r2, #475	; 0x1db
 8004748:	4630      	mov	r0, r6
 800474a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800474e:	2100      	movs	r1, #0
 8004750:	47e0      	blx	ip
	eeprom.M_AddOnArr(&eeprom,	&E_limiteLastro);
 8004752:	4631      	mov	r1, r6
 8004754:	4638      	mov	r0, r7

	// KP value para LASTRO.
	init_objArrEeprom(&E_kPLastro, SOFT_RESET, addrLASTRO_KP, DATA_DOUBLE, &PrimitiveStates.Lastro.kp);
 8004756:	4e42      	ldr	r6, [pc, #264]	; (8004860 <setupEepromVarArr+0x368>)
	eeprom.M_AddOnArr(&eeprom,	&E_limiteLastro);
 8004758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800475c:	4798      	blx	r3
	init_objArrEeprom(&E_kPLastro, SOFT_RESET, addrLASTRO_KP, DATA_DOUBLE, &PrimitiveStates.Lastro.kp);
 800475e:	f10a 03ba 	add.w	r3, sl, #186	; 0xba
 8004762:	4630      	mov	r0, r6
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	222d      	movs	r2, #45	; 0x2d
 8004768:	2304      	movs	r3, #4
 800476a:	2100      	movs	r1, #0
 800476c:	f7fd fc50 	bl	8002010 <init_objArrEeprom>
	E_kPLastro.M_setStdValuesDouble(&E_kPLastro, 0 ,STD_KP,1000);
 8004770:	2200      	movs	r2, #0
 8004772:	4b36      	ldr	r3, [pc, #216]	; (800484c <setupEepromVarArr+0x354>)
 8004774:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004778:	e9cd 2300 	strd	r2, r3, [sp]
 800477c:	4630      	mov	r0, r6
 800477e:	4622      	mov	r2, r4
 8004780:	462b      	mov	r3, r5
 8004782:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8004784:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kPLastro);
 8004786:	4631      	mov	r1, r6
 8004788:	4638      	mov	r0, r7

	// KI value para LASTRO.
	init_objArrEeprom(&E_kILastro, SOFT_RESET, addrLASTRO_KI, DATA_DOUBLE, &PrimitiveStates.Lastro.ki);
 800478a:	4e36      	ldr	r6, [pc, #216]	; (8004864 <setupEepromVarArr+0x36c>)
	eeprom.M_AddOnArr(&eeprom,	&E_kPLastro);
 800478c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004790:	4798      	blx	r3
	init_objArrEeprom(&E_kILastro, SOFT_RESET, addrLASTRO_KI, DATA_DOUBLE, &PrimitiveStates.Lastro.ki);
 8004792:	f10a 03c2 	add.w	r3, sl, #194	; 0xc2
 8004796:	4630      	mov	r0, r6
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2235      	movs	r2, #53	; 0x35
 800479c:	2304      	movs	r3, #4
 800479e:	2100      	movs	r1, #0
 80047a0:	f7fd fc36 	bl	8002010 <init_objArrEeprom>
	E_kILastro.M_setStdValuesDouble(&E_kILastro, 0 ,STD_KI,1000);
 80047a4:	a218      	add	r2, pc, #96	; (adr r2, 8004808 <setupEepromVarArr+0x310>)
 80047a6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80047aa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80047ae:	e9cd 1200 	strd	r1, r2, [sp]
 80047b2:	462b      	mov	r3, r5
 80047b4:	4622      	mov	r2, r4
 80047b6:	4630      	mov	r0, r6
 80047b8:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80047ba:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kILastro);
 80047bc:	4631      	mov	r1, r6
 80047be:	4638      	mov	r0, r7

	// KD value para LASTRO.
	init_objArrEeprom(&E_kDLastro, SOFT_RESET, addrLASTRO_KD, DATA_DOUBLE, &PrimitiveStates.Lastro.kd);
 80047c0:	4e29      	ldr	r6, [pc, #164]	; (8004868 <setupEepromVarArr+0x370>)
	eeprom.M_AddOnArr(&eeprom,	&E_kILastro);
 80047c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047c6:	4798      	blx	r3
	init_objArrEeprom(&E_kDLastro, SOFT_RESET, addrLASTRO_KD, DATA_DOUBLE, &PrimitiveStates.Lastro.kd);
 80047c8:	f10a 03ca 	add.w	r3, sl, #202	; 0xca
 80047cc:	4630      	mov	r0, r6
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2241      	movs	r2, #65	; 0x41
 80047d2:	2304      	movs	r3, #4
 80047d4:	2100      	movs	r1, #0
 80047d6:	f7fd fc1b 	bl	8002010 <init_objArrEeprom>
	E_kDLastro.M_setStdValuesDouble(&E_kDLastro, 0 ,STD_KD,1000);
 80047da:	a10d      	add	r1, pc, #52	; (adr r1, 8004810 <setupEepromVarArr+0x318>)
 80047dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047e0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80047e4:	e9cd 0100 	strd	r0, r1, [sp]
 80047e8:	4622      	mov	r2, r4
 80047ea:	462b      	mov	r3, r5
 80047ec:	4630      	mov	r0, r6
 80047ee:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80047f0:	4788      	blx	r1
	eeprom.M_AddOnArr(&eeprom,	&E_kDLastro);
 80047f2:	4631      	mov	r1, r6
 80047f4:	4638      	mov	r0, r7
 80047f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047fa:	4798      	blx	r3

	//flag buzzer
	init_objArrEeprom(&E_FlagBuzzer, SOFT_RESET, addrBUZZER, DATA_8BITS, &PrimitiveStates.Buzzer);
 80047fc:	f10a 03fa 	add.w	r3, sl, #250	; 0xfa
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	2300      	movs	r3, #0
 8004804:	e032      	b.n	800486c <setupEepromVarArr+0x374>
 8004806:	bf00      	nop
 8004808:	47ae147b 	.word	0x47ae147b
 800480c:	3f847ae1 	.word	0x3f847ae1
 8004810:	33333333 	.word	0x33333333
 8004814:	3fd33333 	.word	0x3fd33333
 8004818:	200007f6 	.word	0x200007f6
 800481c:	20001668 	.word	0x20001668
 8004820:	200016f8 	.word	0x200016f8
 8004824:	20001398 	.word	0x20001398
 8004828:	200007d4 	.word	0x200007d4
 800482c:	200013e0 	.word	0x200013e0
 8004830:	200016b0 	.word	0x200016b0
 8004834:	20001278 	.word	0x20001278
 8004838:	20001230 	.word	0x20001230
 800483c:	20001350 	.word	0x20001350
 8004840:	20001620 	.word	0x20001620
 8004844:	20001590 	.word	0x20001590
 8004848:	408f4000 	.word	0x408f4000
 800484c:	403e0000 	.word	0x403e0000
 8004850:	20001500 	.word	0x20001500
 8004854:	20001470 	.word	0x20001470
 8004858:	20001308 	.word	0x20001308
 800485c:	200015d8 	.word	0x200015d8
 8004860:	20001548 	.word	0x20001548
 8004864:	200014b8 	.word	0x200014b8
 8004868:	20001428 	.word	0x20001428
 800486c:	4c09      	ldr	r4, [pc, #36]	; (8004894 <setupEepromVarArr+0x39c>)
 800486e:	4619      	mov	r1, r3
 8004870:	4620      	mov	r0, r4
 8004872:	223d      	movs	r2, #61	; 0x3d
 8004874:	f7fd fbcc 	bl	8002010 <init_objArrEeprom>
	E_FlagBuzzer.M_setStdValues8bits(&E_FlagBuzzer, 0,0,1);
 8004878:	2200      	movs	r2, #0
 800487a:	4620      	mov	r0, r4
 800487c:	4611      	mov	r1, r2
 800487e:	2301      	movs	r3, #1
 8004880:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004882:	47a8      	blx	r5
	eeprom.M_AddOnArr(&eeprom,	&E_FlagBuzzer);
 8004884:	4621      	mov	r1, r4
 8004886:	4638      	mov	r0, r7
 8004888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90

}
 800488c:	b004      	add	sp, #16
 800488e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	eeprom.M_AddOnArr(&eeprom,	&E_FlagBuzzer);
 8004892:	4718      	bx	r3
 8004894:	200012c0 	.word	0x200012c0

08004898 <processaEeprom>:

void processaEeprom(void){
 8004898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent  evt;

	evt = osMessageGet(FilaEepromHandle, osWaitForever);  // wait for message
 800489a:	4b32      	ldr	r3, [pc, #200]	; (8004964 <processaEeprom+0xcc>)
 800489c:	f04f 32ff 	mov.w	r2, #4294967295
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	a801      	add	r0, sp, #4
 80048a4:	f003 fc2b 	bl	80080fe <osMessageGet>
	if (evt.status == osEventMessage) {
 80048a8:	9b01      	ldr	r3, [sp, #4]
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d157      	bne.n	800495e <processaEeprom+0xc6>

		switch ((unsigned int)evt.value.p) {
 80048ae:	9b02      	ldr	r3, [sp, #8]
 80048b0:	2b0a      	cmp	r3, #10
 80048b2:	d854      	bhi.n	800495e <processaEeprom+0xc6>
 80048b4:	e8df f003 	tbb	[pc, r3]
 80048b8:	1e11190c 	.word	0x1e11190c
 80048bc:	2b250623 	.word	0x2b250623
 80048c0:	4b31      	.short	0x4b31
 80048c2:	4d          	.byte	0x4d
 80048c3:	00          	.byte	0x00

		case CEepromNewCile:
			E_totalCiclos.M_update_eepromValue(&E_totalCiclos);
 80048c4:	4828      	ldr	r0, [pc, #160]	; (8004968 <processaEeprom+0xd0>)
			break;
		case CEepromHorimetro:
			E_horimetroHoras.M_update_eepromValue(&E_horimetroHoras);
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 80048c6:	6c43      	ldr	r3, [r0, #68]	; 0x44
			break;
		default:
			break;
		}
	}
}
 80048c8:	b005      	add	sp, #20
 80048ca:	f85d eb04 	ldr.w	lr, [sp], #4
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 80048ce:	4718      	bx	r3
			E_horimetroHoras.M_update_eepromValue(&E_horimetroHoras);
 80048d0:	4826      	ldr	r0, [pc, #152]	; (800496c <processaEeprom+0xd4>)
 80048d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048d4:	4798      	blx	r3
			E_horimetroMinutos.M_update_eepromValue(&E_horimetroMinutos);
 80048d6:	4826      	ldr	r0, [pc, #152]	; (8004970 <processaEeprom+0xd8>)
 80048d8:	e7f5      	b.n	80048c6 <processaEeprom+0x2e>
			eeprom.M_resetAllVar(&eeprom,SOFT_RESET);
 80048da:	2100      	movs	r1, #0
 80048dc:	4825      	ldr	r0, [pc, #148]	; (8004974 <processaEeprom+0xdc>)
 80048de:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
}
 80048e2:	b005      	add	sp, #20
 80048e4:	f85d eb04 	ldr.w	lr, [sp], #4
			eeprom.M_resetAllVar(&eeprom,HARD_RESET);
 80048e8:	4718      	bx	r3
 80048ea:	4822      	ldr	r0, [pc, #136]	; (8004974 <processaEeprom+0xdc>)
 80048ec:	2101      	movs	r1, #1
 80048ee:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 80048f2:	e7f6      	b.n	80048e2 <processaEeprom+0x4a>
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 80048f4:	4820      	ldr	r0, [pc, #128]	; (8004978 <processaEeprom+0xe0>)
			E_kDLastro.M_update_eepromValue(&E_kDLastro);
 80048f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80048f8:	4798      	blx	r3
			E_limiteLastro.M_update_eepromValue(&E_limiteLastro);
 80048fa:	4820      	ldr	r0, [pc, #128]	; (800497c <processaEeprom+0xe4>)
 80048fc:	e7e3      	b.n	80048c6 <processaEeprom+0x2e>
			E_tempoDelayLuz.M_update_eepromValue(&E_tempoDelayLuz);
 80048fe:	4820      	ldr	r0, [pc, #128]	; (8004980 <processaEeprom+0xe8>)
 8004900:	e7e1      	b.n	80048c6 <processaEeprom+0x2e>
			Calendario.ContMaxTeto+=1;
 8004902:	4a20      	ldr	r2, [pc, #128]	; (8004984 <processaEeprom+0xec>)
			E_ContTetoMax.M_update_eepromValue(&E_ContTetoMax);
 8004904:	4820      	ldr	r0, [pc, #128]	; (8004988 <processaEeprom+0xf0>)
			Calendario.ContMaxTeto+=1;
 8004906:	88d3      	ldrh	r3, [r2, #6]
 8004908:	3301      	adds	r3, #1
 800490a:	80d3      	strh	r3, [r2, #6]
			E_ContTetoMax.M_update_eepromValue(&E_ContTetoMax);
 800490c:	e7db      	b.n	80048c6 <processaEeprom+0x2e>
			Calendario.ContMaxLastro+=1;
 800490e:	4a1d      	ldr	r2, [pc, #116]	; (8004984 <processaEeprom+0xec>)
			E_ContLastroMax.M_update_eepromValue(&E_ContLastroMax);
 8004910:	481e      	ldr	r0, [pc, #120]	; (800498c <processaEeprom+0xf4>)
			Calendario.ContMaxLastro+=1;
 8004912:	8913      	ldrh	r3, [r2, #8]
 8004914:	3301      	adds	r3, #1
 8004916:	8113      	strh	r3, [r2, #8]
			E_ContLastroMax.M_update_eepromValue(&E_ContLastroMax);
 8004918:	e7d5      	b.n	80048c6 <processaEeprom+0x2e>
			E_hitereseStateTeto.M_update_eepromValue(&E_hitereseStateTeto);
 800491a:	481d      	ldr	r0, [pc, #116]	; (8004990 <processaEeprom+0xf8>)
 800491c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800491e:	4798      	blx	r3
			E_kPTeto.M_update_eepromValue(&E_kPTeto);
 8004920:	481c      	ldr	r0, [pc, #112]	; (8004994 <processaEeprom+0xfc>)
 8004922:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004924:	4798      	blx	r3
			E_kITeto.M_update_eepromValue(&E_kITeto);
 8004926:	481c      	ldr	r0, [pc, #112]	; (8004998 <processaEeprom+0x100>)
 8004928:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800492a:	4798      	blx	r3
			E_kDTeto.M_update_eepromValue(&E_kDTeto);
 800492c:	481b      	ldr	r0, [pc, #108]	; (800499c <processaEeprom+0x104>)
 800492e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004930:	4798      	blx	r3
			E_limiteTeto.M_update_eepromValue(&E_limiteTeto);
 8004932:	4811      	ldr	r0, [pc, #68]	; (8004978 <processaEeprom+0xe0>)
 8004934:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004936:	4798      	blx	r3
			E_hitereseStateLastro.M_update_eepromValue(&E_hitereseStateLastro);
 8004938:	4819      	ldr	r0, [pc, #100]	; (80049a0 <processaEeprom+0x108>)
 800493a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800493c:	4798      	blx	r3
			E_kPLastro.M_update_eepromValue(&E_kPLastro);
 800493e:	4819      	ldr	r0, [pc, #100]	; (80049a4 <processaEeprom+0x10c>)
 8004940:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004942:	4798      	blx	r3
			E_kILastro.M_update_eepromValue(&E_kILastro);
 8004944:	4818      	ldr	r0, [pc, #96]	; (80049a8 <processaEeprom+0x110>)
 8004946:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004948:	4798      	blx	r3
			E_kDLastro.M_update_eepromValue(&E_kDLastro);
 800494a:	4818      	ldr	r0, [pc, #96]	; (80049ac <processaEeprom+0x114>)
 800494c:	e7d3      	b.n	80048f6 <processaEeprom+0x5e>
			E_FlagBuzzer.M_update_eepromValue(&E_FlagBuzzer);
 800494e:	4818      	ldr	r0, [pc, #96]	; (80049b0 <processaEeprom+0x118>)
 8004950:	e7b9      	b.n	80048c6 <processaEeprom+0x2e>
			ErrorBuffer_clear(&eeprom);
 8004952:	4808      	ldr	r0, [pc, #32]	; (8004974 <processaEeprom+0xdc>)
}
 8004954:	b005      	add	sp, #20
 8004956:	f85d eb04 	ldr.w	lr, [sp], #4
			ErrorBuffer_clear(&eeprom);
 800495a:	f7fd bbfd 	b.w	8002158 <ErrorBuffer_clear>
}
 800495e:	b005      	add	sp, #20
 8004960:	f85d fb04 	ldr.w	pc, [sp], #4
 8004964:	200007e0 	.word	0x200007e0
 8004968:	200016b0 	.word	0x200016b0
 800496c:	20001398 	.word	0x20001398
 8004970:	200013e0 	.word	0x200013e0
 8004974:	200016f8 	.word	0x200016f8
 8004978:	20001620 	.word	0x20001620
 800497c:	200015d8 	.word	0x200015d8
 8004980:	20001668 	.word	0x20001668
 8004984:	200007d4 	.word	0x200007d4
 8004988:	20001278 	.word	0x20001278
 800498c:	20001230 	.word	0x20001230
 8004990:	20001350 	.word	0x20001350
 8004994:	20001590 	.word	0x20001590
 8004998:	20001500 	.word	0x20001500
 800499c:	20001470 	.word	0x20001470
 80049a0:	20001308 	.word	0x20001308
 80049a4:	20001548 	.word	0x20001548
 80049a8:	200014b8 	.word	0x200014b8
 80049ac:	20001428 	.word	0x20001428
 80049b0:	200012c0 	.word	0x200012c0

080049b4 <StartEeprom>:
	init_containerEeprom(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80049b4:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <StartEeprom+0x34>)
{
 80049b6:	b508      	push	{r3, lr}
	init_containerEeprom(&eeprom, &hi2c1 ,&FilaEepromHandle);
 80049b8:	4620      	mov	r0, r4
 80049ba:	4a0c      	ldr	r2, [pc, #48]	; (80049ec <StartEeprom+0x38>)
 80049bc:	490c      	ldr	r1, [pc, #48]	; (80049f0 <StartEeprom+0x3c>)
 80049be:	f7fd fbc1 	bl	8002144 <init_containerEeprom>
	setupEepromVarArr();
 80049c2:	f7ff fd99 	bl	80044f8 <setupEepromVarArr>
	eeprom.M_downloadAllVar(&eeprom);	//le
 80049c6:	4620      	mov	r0, r4
 80049c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80049cc:	4798      	blx	r3
	osThreadResume(TaskTemperaturaHandle);
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <StartEeprom+0x40>)
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	f003 fbd3 	bl	800817c <osThreadResume>
		processaEeprom();
 80049d6:	f7ff ff5f 	bl	8004898 <processaEeprom>
		osThreadYield();
 80049da:	f003 fa91 	bl	8007f00 <osThreadYield>
		osDelay(500);
 80049de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049e2:	f003 fa99 	bl	8007f18 <osDelay>
	for(;;)
 80049e6:	e7f6      	b.n	80049d6 <StartEeprom+0x22>
 80049e8:	200016f8 	.word	0x200016f8
 80049ec:	200007e0 	.word	0x200007e0
 80049f0:	20001014 	.word	0x20001014
 80049f4:	20000ba4 	.word	0x20000ba4

080049f8 <initPID>:

	}
}


void initPID(void){
 80049f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 80049fc:	f04f 0801 	mov.w	r8, #1
 8004a00:	f04f 0900 	mov.w	r9, #0
void initPID(void){
 8004a04:	b089      	sub	sp, #36	; 0x24
	PID(&TPIDTeto, 		&PrimitiveStates.Teto.realtime, 	&PrimitiveStates.Teto.PWMOut, 	&PrimitiveStates.Teto.setPoint, 	PrimitiveStates.Teto.kp,PrimitiveStates.Teto.ki, PrimitiveStates.Teto.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004a06:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004a0a:	4c2b      	ldr	r4, [pc, #172]	; (8004ab8 <initPID+0xc0>)
 8004a0c:	4f2b      	ldr	r7, [pc, #172]	; (8004abc <initPID+0xc4>)
 8004a0e:	e954 2306 	ldrd	r2, r3, [r4, #-24]
 8004a12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a16:	e954 2308 	ldrd	r2, r3, [r4, #-32]
 8004a1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a1e:	4638      	mov	r0, r7
 8004a20:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8004a24:	f1a4 0108 	sub.w	r1, r4, #8
 8004a28:	e9cd 2300 	strd	r2, r3, [sp]
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	f1a4 0210 	sub.w	r2, r4, #16
 8004a32:	f7fe fc8d 	bl	8003350 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.Lastro.realtime, 	&PrimitiveStates.Lastro.PWMOut,	&PrimitiveStates.Lastro.setPoint, 	PrimitiveStates.Lastro.kp,PrimitiveStates.Lastro.ki, PrimitiveStates.Lastro.kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8004a36:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004a3a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004a3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a42:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 8004a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a4a:	4e1d      	ldr	r6, [pc, #116]	; (8004ac0 <initPID+0xc8>)
 8004a4c:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8004a50:	4630      	mov	r0, r6
 8004a52:	e9cd 2300 	strd	r2, r3, [sp]
 8004a56:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8004a5a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8004a5e:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8004a62:	f7fe fc75 	bl	8003350 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 8004a66:	4641      	mov	r1, r8
 8004a68:	4638      	mov	r0, r7
 8004a6a:	f7fe fb76 	bl	800315a <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a6e:	2400      	movs	r4, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004a70:	4641      	mov	r1, r8
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a72:	2500      	movs	r5, #0
 8004a74:	f04f 0800 	mov.w	r8, #0
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 8004a78:	4630      	mov	r0, r6
 8004a7a:	f7fe fb6e 	bl	800315a <PID_SetMode>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a7e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004ac4 <initPID+0xcc>
	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8004a82:	4638      	mov	r0, r7
 8004a84:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a88:	f7fe fc96 	bl	80033b8 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8004a8c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004a90:	4630      	mov	r0, r6
 8004a92:	f7fe fc91 	bl	80033b8 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	e9cd 8900 	strd	r8, r9, [sp]
 8004aa0:	f7fe fb68 	bl	8003174 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	462b      	mov	r3, r5
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	e9cd 8900 	strd	r8, r9, [sp]
 8004aae:	f7fe fb61 	bl	8003174 <PID_SetOutputLimits>
}
 8004ab2:	b009      	add	sp, #36	; 0x24
 8004ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ab8:	20000890 	.word	0x20000890
 8004abc:	20001810 	.word	0x20001810
 8004ac0:	200017a0 	.word	0x200017a0
 8004ac4:	40590000 	.word	0x40590000

08004ac8 <computaPID>:
void computaPID(void){
 8004ac8:	b510      	push	{r4, lr}

	PID_Compute(&TPIDTeto);
 8004aca:	480d      	ldr	r0, [pc, #52]	; (8004b00 <computaPID+0x38>)
	PID_Compute(&TPIDLastro);

	//transformar para a classe realizar isso //
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 8004acc:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <computaPID+0x3c>)
	PID_Compute(&TPIDTeto);
 8004ace:	f7fe faa6 	bl	800301e <PID_Compute>
	PID_Compute(&TPIDLastro);
 8004ad2:	480d      	ldr	r0, [pc, #52]	; (8004b08 <computaPID+0x40>)
 8004ad4:	f7fe faa3 	bl	800301e <PID_Compute>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Teto, (uint32_t)PrimitiveStates.Teto.PWMOut);
 8004ad8:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
 8004adc:	f7fb ff96 	bl	8000a0c <__aeabi_d2uiz>
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8004ae6:	f7fd fd4f 	bl	8002588 <IndviduoPID_SetPWMValueDirect>
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 8004aea:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
 8004aee:	f7fb ff8d 	bl	8000a0c <__aeabi_d2uiz>
 8004af2:	4601      	mov	r1, r0
 8004af4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0

}
 8004af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	IndviduoPID_SetPWMValueDirect(&PrimitiveStates.Lastro, (uint32_t)PrimitiveStates.Lastro.PWMOut);
 8004afc:	f7fd bd44 	b.w	8002588 <IndviduoPID_SetPWMValueDirect>
 8004b00:	20001810 	.word	0x20001810
 8004b04:	200007e8 	.word	0x200007e8
 8004b08:	200017a0 	.word	0x200017a0

08004b0c <StartTemperatura>:
void StartTemperatura(void const * argument){
 8004b0c:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8004b0e:	f004 f9e1 	bl	8008ed4 <xTaskGetTickCount>
 8004b12:	9001      	str	r0, [sp, #4]
	initPID();
 8004b14:	f7ff ff70 	bl	80049f8 <initPID>
		computaPID();
 8004b18:	f7ff ffd6 	bl	8004ac8 <computaPID>
		osDelayUntil(&xLastWakeTime,TIME_PID_CALC);
 8004b1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004b20:	a801      	add	r0, sp, #4
 8004b22:	f003 fb42 	bl	80081aa <osDelayUntil>
		osThreadYield();
 8004b26:	f003 f9eb 	bl	8007f00 <osThreadYield>
	for(;;)	{
 8004b2a:	e7f5      	b.n	8004b18 <StartTemperatura+0xc>

08004b2c <WatchDogLimitesTemperatura>:
	SaidasLeds();

	//Contador do horimetro
	Horimetro();
}
void WatchDogLimitesTemperatura(void){
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static bool flagMaxLastro,flagMaxTeto,flagTimer,flagTimerLastro;

	//Atingiu limite no TETO com incremento a cada ciclo
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004b2e:	4c3a      	ldr	r4, [pc, #232]	; (8004c18 <WatchDogLimitesTemperatura+0xec>)
		if(!flagMaxTeto){
 8004b30:	4e3a      	ldr	r6, [pc, #232]	; (8004c1c <WatchDogLimitesTemperatura+0xf0>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004b32:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 8004b36:	f7fb fc65 	bl	8000404 <__aeabi_i2d>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004b42:	f7fb ff59 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxTeto){
 8004b46:	7837      	ldrb	r7, [r6, #0]
 8004b48:	4d35      	ldr	r5, [pc, #212]	; (8004c20 <WatchDogLimitesTemperatura+0xf4>)
	if(PrimitiveStates.Teto.realtime>PrimitiveStates.Teto.limite){
 8004b4a:	b1a0      	cbz	r0, 8004b76 <WatchDogLimitesTemperatura+0x4a>
		if(!flagMaxTeto){
 8004b4c:	b93f      	cbnz	r7, 8004b5e <WatchDogLimitesTemperatura+0x32>
			flagMaxTeto = 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004b52:	4b34      	ldr	r3, [pc, #208]	; (8004c24 <WatchDogLimitesTemperatura+0xf8>)
 8004b54:	463a      	mov	r2, r7
 8004b56:	2106      	movs	r1, #6
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f003 faa8 	bl	80080ae <osMessagePut>
		}
		if(!flagTimer && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004b5e:	782a      	ldrb	r2, [r5, #0]
 8004b60:	b94a      	cbnz	r2, 8004b76 <WatchDogLimitesTemperatura+0x4a>
 8004b62:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <WatchDogLimitesTemperatura+0x4a>
			flagTimer = 1;
 8004b6a:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxTetoAgain, 0);
 8004b6c:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <WatchDogLimitesTemperatura+0xf8>)
 8004b6e:	2106      	movs	r1, #6
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f003 fa9c 	bl	80080ae <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxTeto && PrimitiveStates.Teto.realtime<PrimitiveStates.Teto.limite-20)
 8004b76:	7833      	ldrb	r3, [r6, #0]
 8004b78:	b16b      	cbz	r3, 8004b96 <WatchDogLimitesTemperatura+0x6a>
 8004b7a:	f8b4 00b0 	ldrh.w	r0, [r4, #176]	; 0xb0
 8004b7e:	3814      	subs	r0, #20
 8004b80:	f7fb fc40 	bl	8000404 <__aeabi_i2d>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
 8004b8c:	f7fb ff16 	bl	80009bc <__aeabi_dcmplt>
 8004b90:	b108      	cbz	r0, 8004b96 <WatchDogLimitesTemperatura+0x6a>
		flagMaxTeto = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	7033      	strb	r3, [r6, #0]
	if(flagTimer && PrimitiveStates.stateTimer == TIMER_idle)
 8004b96:	782b      	ldrb	r3, [r5, #0]
 8004b98:	b11b      	cbz	r3, 8004ba2 <WatchDogLimitesTemperatura+0x76>
 8004b9a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004b9e:	b903      	cbnz	r3, 8004ba2 <WatchDogLimitesTemperatura+0x76>
		flagTimer=0;
 8004ba0:	702b      	strb	r3, [r5, #0]

	//Atingiu limite no LASTRO com incremento a cada ciclo
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004ba2:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 8004ba6:	f7fb fc2d 	bl	8000404 <__aeabi_i2d>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8004bb2:	f7fb ff21 	bl	80009f8 <__aeabi_dcmpgt>
		if(!flagMaxLastro){
 8004bb6:	4e1c      	ldr	r6, [pc, #112]	; (8004c28 <WatchDogLimitesTemperatura+0xfc>)
 8004bb8:	4d1c      	ldr	r5, [pc, #112]	; (8004c2c <WatchDogLimitesTemperatura+0x100>)
 8004bba:	7837      	ldrb	r7, [r6, #0]
	if(PrimitiveStates.Lastro.realtime>PrimitiveStates.Lastro.limite){
 8004bbc:	b1a0      	cbz	r0, 8004be8 <WatchDogLimitesTemperatura+0xbc>
		if(!flagMaxLastro){
 8004bbe:	b93f      	cbnz	r7, 8004bd0 <WatchDogLimitesTemperatura+0xa4>
			flagMaxLastro = 1;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	7033      	strb	r3, [r6, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <WatchDogLimitesTemperatura+0xf8>)
 8004bc6:	463a      	mov	r2, r7
 8004bc8:	2107      	movs	r1, #7
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	f003 fa6f 	bl	80080ae <osMessagePut>
		}
		if(!flagTimerLastro && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004bd0:	782a      	ldrb	r2, [r5, #0]
 8004bd2:	b94a      	cbnz	r2, 8004be8 <WatchDogLimitesTemperatura+0xbc>
 8004bd4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <WatchDogLimitesTemperatura+0xbc>
			flagTimerLastro = 1;
 8004bdc:	702b      	strb	r3, [r5, #0]
			osMessagePut(FilaEepromHandle, CEepromTempMaxLastroAgain, 0);
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <WatchDogLimitesTemperatura+0xf8>)
 8004be0:	2107      	movs	r1, #7
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	f003 fa63 	bl	80080ae <osMessagePut>
		}
	}
	//cancela flags
	if(flagMaxLastro && PrimitiveStates.Lastro.realtime<PrimitiveStates.Lastro.limite-20)
 8004be8:	7833      	ldrb	r3, [r6, #0]
 8004bea:	b16b      	cbz	r3, 8004c08 <WatchDogLimitesTemperatura+0xdc>
 8004bec:	f8b4 00f8 	ldrh.w	r0, [r4, #248]	; 0xf8
 8004bf0:	3814      	subs	r0, #20
 8004bf2:	f7fb fc07 	bl	8000404 <__aeabi_i2d>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
 8004bfe:	f7fb fedd 	bl	80009bc <__aeabi_dcmplt>
 8004c02:	b108      	cbz	r0, 8004c08 <WatchDogLimitesTemperatura+0xdc>
		flagMaxLastro = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	7033      	strb	r3, [r6, #0]
	if(flagTimerLastro && PrimitiveStates.stateTimer == TIMER_idle)
 8004c08:	782b      	ldrb	r3, [r5, #0]
 8004c0a:	b11b      	cbz	r3, 8004c14 <WatchDogLimitesTemperatura+0xe8>
 8004c0c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004c10:	b903      	cbnz	r3, 8004c14 <WatchDogLimitesTemperatura+0xe8>
		flagTimerLastro=0;
 8004c12:	702b      	strb	r3, [r5, #0]


}
 8004c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c16:	bf00      	nop
 8004c18:	200007e8 	.word	0x200007e8
 8004c1c:	20001883 	.word	0x20001883
 8004c20:	20001884 	.word	0x20001884
 8004c24:	200007e0 	.word	0x200007e0
 8004c28:	20001882 	.word	0x20001882
 8004c2c:	20001885 	.word	0x20001885

08004c30 <SaidasLeds>:
void SaidasLeds(void){
 8004c30:	b510      	push	{r4, lr}

	//LED VERDE - indica que as 2 saidas estao ok
	if(PrimitiveStates.Lastro._PWMstate != buscando && PrimitiveStates.Teto._PWMstate != buscando ){
 8004c32:	4c14      	ldr	r4, [pc, #80]	; (8004c84 <SaidasLeds+0x54>)
 8004c34:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d017      	beq.n	8004c6c <SaidasLeds+0x3c>
 8004c3c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d013      	beq.n	8004c6c <SaidasLeds+0x3c>
		onDigital(&PrimitiveStates.LedVerde);
 8004c44:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8004c48:	f7fd fbcb 	bl	80023e2 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedVerde);
	}

	//LED VERMELHO TETO
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004c4c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		onDigital(&PrimitiveStates.LedTeto);
 8004c50:	480d      	ldr	r0, [pc, #52]	; (8004c88 <SaidasLeds+0x58>)
	if(PrimitiveStates.Teto._PWMstate == buscando){
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10e      	bne.n	8004c74 <SaidasLeds+0x44>
		onDigital(&PrimitiveStates.LedTeto);
 8004c56:	f7fd fbc4 	bl	80023e2 <onDigital>
	}else{
		offDigital(&PrimitiveStates.LedTeto);
	}

	//LED VERMELHO LASTRO
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004c5a:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
		onDigital(&PrimitiveStates.LedLastro);
 8004c5e:	480b      	ldr	r0, [pc, #44]	; (8004c8c <SaidasLeds+0x5c>)
	if(PrimitiveStates.Lastro._PWMstate == buscando){
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10a      	bne.n	8004c7a <SaidasLeds+0x4a>
	}else{
		offDigital(&PrimitiveStates.LedLastro);
	}
}
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		onDigital(&PrimitiveStates.LedLastro);
 8004c68:	f7fd bbbb 	b.w	80023e2 <onDigital>
		offDigital(&PrimitiveStates.LedVerde);
 8004c6c:	4808      	ldr	r0, [pc, #32]	; (8004c90 <SaidasLeds+0x60>)
 8004c6e:	f7fd fbc2 	bl	80023f6 <offDigital>
 8004c72:	e7eb      	b.n	8004c4c <SaidasLeds+0x1c>
		offDigital(&PrimitiveStates.LedTeto);
 8004c74:	f7fd fbbf 	bl	80023f6 <offDigital>
 8004c78:	e7ef      	b.n	8004c5a <SaidasLeds+0x2a>
}
 8004c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		offDigital(&PrimitiveStates.LedLastro);
 8004c7e:	f7fd bbba 	b.w	80023f6 <offDigital>
 8004c82:	bf00      	nop
 8004c84:	200007e8 	.word	0x200007e8
 8004c88:	20000830 	.word	0x20000830
 8004c8c:	20000848 	.word	0x20000848
 8004c90:	20000818 	.word	0x20000818

08004c94 <Horimetro>:
void Horimetro(void){
	static uint8_t segundos=0;
	//esperar implementacao digital output
	if(PrimitiveStates.Lastro._PWMstate != idle || PrimitiveStates.Teto._PWMstate != idle){
 8004c94:	4a12      	ldr	r2, [pc, #72]	; (8004ce0 <Horimetro+0x4c>)
 8004c96:	f892 30fc 	ldrb.w	r3, [r2, #252]	; 0xfc
 8004c9a:	f892 20b4 	ldrb.w	r2, [r2, #180]	; 0xb4
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	4a10      	ldr	r2, [pc, #64]	; (8004ce4 <Horimetro+0x50>)
 8004ca2:	d01b      	beq.n	8004cdc <Horimetro+0x48>
		segundos++;
 8004ca4:	7813      	ldrb	r3, [r2, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
		if(segundos == 60){
 8004caa:	2b3c      	cmp	r3, #60	; 0x3c
 8004cac:	d001      	beq.n	8004cb2 <Horimetro+0x1e>
			}
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
		}

	}else{
		segundos = 1;
 8004cae:	7013      	strb	r3, [r2, #0]
	}
}
 8004cb0:	4770      	bx	lr
			segundos = 0;
 8004cb2:	2100      	movs	r1, #0
			if(Calendario.Horimetro_parcial_min<59){
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <Horimetro+0x54>)
			segundos = 0;
 8004cb6:	7011      	strb	r1, [r2, #0]
			if(Calendario.Horimetro_parcial_min<59){
 8004cb8:	789a      	ldrb	r2, [r3, #2]
 8004cba:	2a3a      	cmp	r2, #58	; 0x3a
				Calendario.Horimetro_horas++;
 8004cbc:	bf8b      	itete	hi
 8004cbe:	881a      	ldrhhi	r2, [r3, #0]
				Calendario.Horimetro_parcial_min++;
 8004cc0:	3201      	addls	r2, #1
				Calendario.Horimetro_horas++;
 8004cc2:	3201      	addhi	r2, #1
				Calendario.Horimetro_parcial_min++;
 8004cc4:	709a      	strbls	r2, [r3, #2]
				Calendario.Horimetro_horas++;
 8004cc6:	bf88      	it	hi
 8004cc8:	801a      	strhhi	r2, [r3, #0]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004cca:	f04f 0200 	mov.w	r2, #0
				Calendario.Horimetro_parcial_min=0;
 8004cce:	bf88      	it	hi
 8004cd0:	7099      	strbhi	r1, [r3, #2]
			osMessagePut(FilaEepromHandle, CEepromHorimetro, 0);
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <Horimetro+0x58>)
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f003 b9e9 	b.w	80080ae <osMessagePut>
		segundos = 1;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e7e6      	b.n	8004cae <Horimetro+0x1a>
 8004ce0:	200007e8 	.word	0x200007e8
 8004ce4:	20001886 	.word	0x20001886
 8004ce8:	200007d4 	.word	0x200007d4
 8004cec:	200007e0 	.word	0x200007e0

08004cf0 <sinalizacaoReachTemp>:
void sinalizacaoReachTemp(void){
 8004cf0:	b570      	push	{r4, r5, r6, lr}
	static GenericPwmState __StateTeto, __StateLastro;

	//verifica se o estado anterior estava em buscando em qualquer dos dois PID
	if(__StateTeto == buscando || __StateLastro == buscando){
 8004cf2:	4e0e      	ldr	r6, [pc, #56]	; (8004d2c <sinalizacaoReachTemp+0x3c>)
 8004cf4:	4d0e      	ldr	r5, [pc, #56]	; (8004d30 <sinalizacaoReachTemp+0x40>)
 8004cf6:	7833      	ldrb	r3, [r6, #0]
 8004cf8:	4c0e      	ldr	r4, [pc, #56]	; (8004d34 <sinalizacaoReachTemp+0x44>)
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d002      	beq.n	8004d04 <sinalizacaoReachTemp+0x14>
 8004cfe:	782b      	ldrb	r3, [r5, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <sinalizacaoReachTemp+0x2e>
		if(PrimitiveStates.Teto._PWMstate != buscando && PrimitiveStates.Lastro._PWMstate != buscando ){
 8004d04:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d008      	beq.n	8004d1e <sinalizacaoReachTemp+0x2e>
 8004d0c:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d004      	beq.n	8004d1e <sinalizacaoReachTemp+0x2e>
			//notifica que chegou na temperatura
			osSignalSet(TaskBuzzerHandle, SINAL_TEMP_REACH);
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <sinalizacaoReachTemp+0x48>)
 8004d16:	2101      	movs	r1, #1
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	f003 f946 	bl	8007faa <osSignalSet>
		}
	}
	__StateTeto 	= PrimitiveStates.Teto._PWMstate;
 8004d1e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
 8004d22:	7033      	strb	r3, [r6, #0]
	__StateLastro 	= PrimitiveStates.Lastro._PWMstate;
 8004d24:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
 8004d28:	702b      	strb	r3, [r5, #0]


}
 8004d2a:	bd70      	pop	{r4, r5, r6, pc}
 8004d2c:	20001881 	.word	0x20001881
 8004d30:	20001880 	.word	0x20001880
 8004d34:	200007e8 	.word	0x200007e8
 8004d38:	20000b9c 	.word	0x20000b9c

08004d3c <taskTemperatura1sec>:
void taskTemperatura1sec(void){
 8004d3c:	b508      	push	{r3, lr}
	WatchDogLimitesTemperatura();
 8004d3e:	f7ff fef5 	bl	8004b2c <WatchDogLimitesTemperatura>
	sinalizacaoReachTemp();
 8004d42:	f7ff ffd5 	bl	8004cf0 <sinalizacaoReachTemp>
	SaidasLeds();
 8004d46:	f7ff ff73 	bl	8004c30 <SaidasLeds>
}
 8004d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Horimetro();
 8004d4e:	f7ff bfa1 	b.w	8004c94 <Horimetro>
	...

08004d54 <funcionamentoTimer>:
		osThreadYield();
		osDelayUntil(&xLastWakeTime,1000);
	}
}

void funcionamentoTimer(void){
 8004d54:	b570      	push	{r4, r5, r6, lr}

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004d56:	4c1c      	ldr	r4, [pc, #112]	; (8004dc8 <funcionamentoTimer+0x74>)
 8004d58:	f894 510b 	ldrb.w	r5, [r4, #267]	; 0x10b
 8004d5c:	b15d      	cbz	r5, 8004d76 <funcionamentoTimer+0x22>
 8004d5e:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d10a      	bne.n	8004d7e <funcionamentoTimer+0x2a>
		PrimitiveStates.RTTimerSegundos = 59;
 8004d68:	233b      	movs	r3, #59	; 0x3b
		PrimitiveStates.RTTimerMinutos--;
 8004d6a:	3d01      	subs	r5, #1
		PrimitiveStates.RTTimerSegundos = 59;
 8004d6c:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		PrimitiveStates.RTTimerMinutos--;
 8004d70:	f884 510b 	strb.w	r5, [r4, #267]	; 0x10b
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
			PrimitiveStates.stateTimer = TIMER_idle;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 8004d74:	bd70      	pop	{r4, r5, r6, pc}
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer == TIMER_decrementando){
 8004d76:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0fa      	beq.n	8004d74 <funcionamentoTimer+0x20>
 8004d7e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d1f6      	bne.n	8004d74 <funcionamentoTimer+0x20>
		PrimitiveStates.RTTimerSegundos--;
 8004d86:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0 && PrimitiveStates.stateTimer != TIMER_idle){
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <funcionamentoTimer+0x20>
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	d1ec      	bne.n	8004d74 <funcionamentoTimer+0x20>
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004d9a:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <funcionamentoTimer+0x78>)
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004d9c:	4e0c      	ldr	r6, [pc, #48]	; (8004dd0 <funcionamentoTimer+0x7c>)
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004d9e:	8893      	ldrh	r3, [r2, #4]
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004da0:	2105      	movs	r1, #5
			Calendario.TotalCiclos=Calendario.TotalCiclos+1;
 8004da2:	3301      	adds	r3, #1
 8004da4:	8093      	strh	r3, [r2, #4]
			osMessagePut(FilaEepromHandle, CEepromNewCile, 0);
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <funcionamentoTimer+0x80>)
 8004da8:	462a      	mov	r2, r5
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	f003 f97f 	bl	80080ae <osMessagePut>
			osSignalSet(TaskBuzzerHandle, SINAL_PRONTO);
 8004db0:	6830      	ldr	r0, [r6, #0]
 8004db2:	2108      	movs	r1, #8
 8004db4:	f003 f8f9 	bl	8007faa <osSignalSet>
			osThreadResume(TaskBuzzerHandle);
 8004db8:	6830      	ldr	r0, [r6, #0]
			PrimitiveStates.stateTimer = TIMER_idle;
 8004dba:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
}
 8004dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			osThreadResume(TaskBuzzerHandle);
 8004dc2:	f003 b9db 	b.w	800817c <osThreadResume>
 8004dc6:	bf00      	nop
 8004dc8:	200007e8 	.word	0x200007e8
 8004dcc:	200007d4 	.word	0x200007d4
 8004dd0:	20000b9c 	.word	0x20000b9c
 8004dd4:	200007e0 	.word	0x200007e0

08004dd8 <verificaErro>:


void verificaErro(void){
 8004dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8004dda:	2200      	movs	r2, #0
 8004ddc:	210f      	movs	r1, #15
 8004dde:	a801      	add	r0, sp, #4
 8004de0:	f003 f90c 	bl	8007ffc <osSignalWait>
	if (evt.status == osEventSignal){
 8004de4:	9b01      	ldr	r3, [sp, #4]
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d109      	bne.n	8004dfe <verificaErro+0x26>

		if(evt.value.v == ERRO_CRITICO){
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	2b0f      	cmp	r3, #15
 8004dee:	d106      	bne.n	8004dfe <verificaErro+0x26>
			osThreadSuspend(TaskTimerHandle);
 8004df0:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <verificaErro+0x2c>)
 8004df2:	6818      	ldr	r0, [r3, #0]
		}
	}
}
 8004df4:	b005      	add	sp, #20
 8004df6:	f85d eb04 	ldr.w	lr, [sp], #4
			osThreadSuspend(TaskTimerHandle);
 8004dfa:	f003 b9ba 	b.w	8008172 <osThreadSuspend>
}
 8004dfe:	b005      	add	sp, #20
 8004e00:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e04:	20000e48 	.word	0x20000e48

08004e08 <StartTimer>:
{
 8004e08:	b507      	push	{r0, r1, r2, lr}
	xLastWakeTime = xTaskGetTickCount();
 8004e0a:	f004 f863 	bl	8008ed4 <xTaskGetTickCount>
 8004e0e:	9001      	str	r0, [sp, #4]
		verificaErro();
 8004e10:	f7ff ffe2 	bl	8004dd8 <verificaErro>
		funcionamentoTimer();
 8004e14:	f7ff ff9e 	bl	8004d54 <funcionamentoTimer>
		osThreadYield();
 8004e18:	f003 f872 	bl	8007f00 <osThreadYield>
		osDelayUntil(&xLastWakeTime,1000);
 8004e1c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e20:	a801      	add	r0, sp, #4
 8004e22:	f003 f9c2 	bl	80081aa <osDelayUntil>
	for(;;)
 8004e26:	e7f3      	b.n	8004e10 <StartTimer+0x8>

08004e28 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <HAL_Init+0x20>)
{
 8004e2a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e2c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e2e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e30:	f043 0310 	orr.w	r3, r3, #16
 8004e34:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e36:	f000 fa55 	bl	80052e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e3a:	200f      	movs	r0, #15
 8004e3c:	f7fe fd0a 	bl	8003854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e40:	f7fe fae0 	bl	8003404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004e44:	2000      	movs	r0, #0
 8004e46:	bd08      	pop	{r3, pc}
 8004e48:	40022000 	.word	0x40022000

08004e4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004e4c:	4a03      	ldr	r2, [pc, #12]	; (8004e5c <HAL_IncTick+0x10>)
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <HAL_IncTick+0x14>)
 8004e50:	6811      	ldr	r1, [r2, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	440b      	add	r3, r1
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20001888 	.word	0x20001888
 8004e60:	20000004 	.word	0x20000004

08004e64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004e64:	4b01      	ldr	r3, [pc, #4]	; (8004e6c <HAL_GetTick+0x8>)
 8004e66:	6818      	ldr	r0, [r3, #0]
}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20001888 	.word	0x20001888

08004e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e74:	f7ff fff6 	bl	8004e64 <HAL_GetTick>
 8004e78:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e7a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004e7c:	bf1e      	ittt	ne
 8004e7e:	4b04      	ldrne	r3, [pc, #16]	; (8004e90 <HAL_Delay+0x20>)
 8004e80:	781b      	ldrbne	r3, [r3, #0]
 8004e82:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e84:	f7ff ffee 	bl	8004e64 <HAL_GetTick>
 8004e88:	1b43      	subs	r3, r0, r5
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	d3fa      	bcc.n	8004e84 <HAL_Delay+0x14>
  {
  }
}
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	20000004 	.word	0x20000004

08004e94 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e94:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8004e96:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	f012 0f50 	tst.w	r2, #80	; 0x50
 8004e9e:	d11b      	bne.n	8004ed8 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6892      	ldr	r2, [r2, #8]
 8004eac:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8004eb0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8004eb4:	d10c      	bne.n	8004ed0 <ADC_DMAConvCplt+0x3c>
 8004eb6:	7b1a      	ldrb	r2, [r3, #12]
 8004eb8:	b952      	cbnz	r2, 8004ed0 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004eba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ec0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec4:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ec6:	bf5e      	ittt	pl
 8004ec8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8004eca:	f042 0201 	orrpl.w	r2, r2, #1
 8004ece:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fd fc4f 	bl	8002774 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004ed6:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
}
 8004eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee0:	4718      	bx	r3

08004ee2 <HAL_ADC_ConvHalfCpltCallback>:
 8004ee2:	4770      	bx	lr

08004ee4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ee4:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ee6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004ee8:	f7ff fffb 	bl	8004ee2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eec:	bd08      	pop	{r3, pc}

08004eee <HAL_ADC_ErrorCallback>:
 8004eee:	4770      	bx	lr

08004ef0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ef0:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004ef2:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efa:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004efc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004efe:	f043 0304 	orr.w	r3, r3, #4
 8004f02:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f04:	f7ff fff3 	bl	8004eee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f08:	bd08      	pop	{r3, pc}
	...

08004f0c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8004f0c:	2300      	movs	r3, #0
{ 
 8004f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8004f10:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004f12:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8004f16:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d06c      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0xea>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8004f22:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f24:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8004f26:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f28:	6808      	ldr	r0, [r1, #0]
 8004f2a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8004f2e:	d822      	bhi.n	8004f76 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f30:	261f      	movs	r6, #31
 8004f32:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8004f34:	3b05      	subs	r3, #5
 8004f36:	409e      	lsls	r6, r3
 8004f38:	ea25 0506 	bic.w	r5, r5, r6
 8004f3c:	fa00 f303 	lsl.w	r3, r0, r3
 8004f40:	432b      	orrs	r3, r5
 8004f42:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f44:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f46:	688b      	ldr	r3, [r1, #8]
 8004f48:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8004f4c:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f50:	d929      	bls.n	8004fa6 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f52:	68d6      	ldr	r6, [r2, #12]
 8004f54:	3d1e      	subs	r5, #30
 8004f56:	40a9      	lsls	r1, r5
 8004f58:	ea26 0101 	bic.w	r1, r6, r1
 8004f5c:	40ab      	lsls	r3, r5
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f62:	f1a0 0310 	sub.w	r3, r0, #16
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d925      	bls.n	8004fb6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f6a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8004f72:	b002      	add	sp, #8
 8004f74:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8004f76:	2d0c      	cmp	r5, #12
 8004f78:	f04f 051f 	mov.w	r5, #31
 8004f7c:	d809      	bhi.n	8004f92 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004f7e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004f80:	3b23      	subs	r3, #35	; 0x23
 8004f82:	409d      	lsls	r5, r3
 8004f84:	ea26 0505 	bic.w	r5, r6, r5
 8004f88:	fa00 f303 	lsl.w	r3, r0, r3
 8004f8c:	432b      	orrs	r3, r5
 8004f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f90:	e7d8      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004f92:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8004f94:	3b41      	subs	r3, #65	; 0x41
 8004f96:	409d      	lsls	r5, r3
 8004f98:	ea26 0505 	bic.w	r5, r6, r5
 8004f9c:	fa00 f303 	lsl.w	r3, r0, r3
 8004fa0:	432b      	orrs	r3, r5
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fa4:	e7ce      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004fa6:	6910      	ldr	r0, [r2, #16]
 8004fa8:	40a9      	lsls	r1, r5
 8004faa:	ea20 0101 	bic.w	r1, r0, r1
 8004fae:	40ab      	lsls	r3, r5
 8004fb0:	430b      	orrs	r3, r1
 8004fb2:	6113      	str	r3, [r2, #16]
 8004fb4:	e7d9      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_ADC_ConfigChannel+0xf0>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d116      	bne.n	8004fea <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004fbc:	6893      	ldr	r3, [r2, #8]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	d4d3      	bmi.n	8004f6a <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004fc2:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fca:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fcc:	d1cd      	bne.n	8004f6a <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fce:	4b0c      	ldr	r3, [pc, #48]	; (8005000 <HAL_ADC_ConfigChannel+0xf4>)
 8004fd0:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <HAL_ADC_ConfigChannel+0xf8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fd8:	220a      	movs	r2, #10
 8004fda:	4353      	muls	r3, r2
            wait_loop_index--;
 8004fdc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004fde:	9b01      	ldr	r3, [sp, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0c2      	beq.n	8004f6a <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8004fe4:	9b01      	ldr	r3, [sp, #4]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	e7f8      	b.n	8004fdc <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004fec:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fee:	f043 0320 	orr.w	r3, r3, #32
 8004ff2:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8004ff4:	e7ba      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8004ff6:	2002      	movs	r0, #2
 8004ff8:	e7bb      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x66>
 8004ffa:	bf00      	nop
 8004ffc:	40012400 	.word	0x40012400
 8005000:	20000000 	.word	0x20000000
 8005004:	000f4240 	.word	0x000f4240

08005008 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8005008:	2300      	movs	r3, #0
{
 800500a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800500c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800500e:	6803      	ldr	r3, [r0, #0]
{
 8005010:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	07d2      	lsls	r2, r2, #31
 8005016:	d502      	bpl.n	800501e <ADC_Enable+0x16>
  return HAL_OK;
 8005018:	2000      	movs	r0, #0
}
 800501a:	b003      	add	sp, #12
 800501c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005026:	4b14      	ldr	r3, [pc, #80]	; (8005078 <ADC_Enable+0x70>)
 8005028:	4a14      	ldr	r2, [pc, #80]	; (800507c <ADC_Enable+0x74>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005030:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8005032:	9b01      	ldr	r3, [sp, #4]
 8005034:	b9e3      	cbnz	r3, 8005070 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8005036:	f7ff ff15 	bl	8004e64 <HAL_GetTick>
 800503a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	07db      	lsls	r3, r3, #31
 8005042:	d4e9      	bmi.n	8005018 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005044:	f7ff ff0e 	bl	8004e64 <HAL_GetTick>
 8005048:	1b40      	subs	r0, r0, r5
 800504a:	2802      	cmp	r0, #2
 800504c:	d9f6      	bls.n	800503c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f013 0301 	ands.w	r3, r3, #1
 8005056:	d1f1      	bne.n	800503c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005058:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 800505a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800505c:	f042 0210 	orr.w	r2, r2, #16
 8005060:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005062:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8005064:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005068:	f042 0201 	orr.w	r2, r2, #1
 800506c:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800506e:	e7d4      	b.n	800501a <ADC_Enable+0x12>
      wait_loop_index--;
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	3b01      	subs	r3, #1
 8005074:	e7dc      	b.n	8005030 <ADC_Enable+0x28>
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000
 800507c:	000f4240 	.word	0x000f4240

08005080 <HAL_ADC_Start_DMA>:
{
 8005080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005084:	4b40      	ldr	r3, [pc, #256]	; (8005188 <HAL_ADC_Start_DMA+0x108>)
{
 8005086:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005088:	6802      	ldr	r2, [r0, #0]
{
 800508a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800508c:	429a      	cmp	r2, r3
{
 800508e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005090:	d002      	beq.n	8005098 <HAL_ADC_Start_DMA+0x18>
 8005092:	493e      	ldr	r1, [pc, #248]	; (800518c <HAL_ADC_Start_DMA+0x10c>)
 8005094:	428a      	cmp	r2, r1
 8005096:	d103      	bne.n	80050a0 <HAL_ADC_Start_DMA+0x20>
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800509e:	d16e      	bne.n	800517e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80050a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d06c      	beq.n	8005182 <HAL_ADC_Start_DMA+0x102>
 80050a8:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80050aa:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80050ac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80050b0:	f7ff ffaa 	bl	8005008 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80050b4:	4606      	mov	r6, r0
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d15d      	bne.n	8005176 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80050ba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050bc:	6821      	ldr	r1, [r4, #0]
 80050be:	4b33      	ldr	r3, [pc, #204]	; (800518c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80050c0:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80050c4:	f025 0501 	bic.w	r5, r5, #1
 80050c8:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050cc:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80050ce:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80050d0:	d104      	bne.n	80050dc <HAL_ADC_Start_DMA+0x5c>
 80050d2:	4a2d      	ldr	r2, [pc, #180]	; (8005188 <HAL_ADC_Start_DMA+0x108>)
 80050d4:	6853      	ldr	r3, [r2, #4]
 80050d6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80050da:	d13e      	bne.n	800515a <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050e2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050e4:	684b      	ldr	r3, [r1, #4]
 80050e6:	055a      	lsls	r2, r3, #21
 80050e8:	d505      	bpl.n	80050f6 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050f8:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050fa:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050fe:	bf18      	it	ne
 8005100:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005102:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005104:	bf18      	it	ne
 8005106:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800510a:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800510c:	2300      	movs	r3, #0
 800510e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005112:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005114:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005116:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <HAL_ADC_Start_DMA+0x114>)
 800511a:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800511c:	4b1e      	ldr	r3, [pc, #120]	; (8005198 <HAL_ADC_Start_DMA+0x118>)
 800511e:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005120:	f06f 0302 	mvn.w	r3, #2
 8005124:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005128:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800512c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005130:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005134:	4643      	mov	r3, r8
 8005136:	f000 f993 	bl	8005460 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8005142:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	bf0c      	ite	eq
 800514a:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800514e:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8005152:	609a      	str	r2, [r3, #8]
}
 8005154:	4630      	mov	r0, r6
 8005156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800515a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800515c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005160:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005162:	6853      	ldr	r3, [r2, #4]
 8005164:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005166:	bf41      	itttt	mi
 8005168:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800516a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800516e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8005172:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8005174:	e7bf      	b.n	80050f6 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8005176:	2300      	movs	r3, #0
 8005178:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800517c:	e7ea      	b.n	8005154 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800517e:	2601      	movs	r6, #1
 8005180:	e7e8      	b.n	8005154 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8005182:	2602      	movs	r6, #2
 8005184:	e7e6      	b.n	8005154 <HAL_ADC_Start_DMA+0xd4>
 8005186:	bf00      	nop
 8005188:	40012400 	.word	0x40012400
 800518c:	40012800 	.word	0x40012800
 8005190:	08004e95 	.word	0x08004e95
 8005194:	08004ee5 	.word	0x08004ee5
 8005198:	08004ef1 	.word	0x08004ef1

0800519c <ADC_ConversionStop_Disable>:
{
 800519c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800519e:	6803      	ldr	r3, [r0, #0]
{
 80051a0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	07d1      	lsls	r1, r2, #31
 80051a6:	d401      	bmi.n	80051ac <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80051a8:	2000      	movs	r0, #0
}
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	f022 0201 	bic.w	r2, r2, #1
 80051b2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80051b4:	f7ff fe56 	bl	8004e64 <HAL_GetTick>
 80051b8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	07db      	lsls	r3, r3, #31
 80051c0:	d5f2      	bpl.n	80051a8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80051c2:	f7ff fe4f 	bl	8004e64 <HAL_GetTick>
 80051c6:	1b40      	subs	r0, r0, r5
 80051c8:	2802      	cmp	r0, #2
 80051ca:	d9f6      	bls.n	80051ba <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	07da      	lsls	r2, r3, #31
 80051d2:	d5f2      	bpl.n	80051ba <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d8:	f043 0310 	orr.w	r3, r3, #16
 80051dc:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80051e6:	e7e0      	b.n	80051aa <ADC_ConversionStop_Disable+0xe>

080051e8 <HAL_ADC_Init>:
{
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80051ea:	4604      	mov	r4, r0
 80051ec:	2800      	cmp	r0, #0
 80051ee:	d06d      	beq.n	80052cc <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80051f2:	b923      	cbnz	r3, 80051fe <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80051f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80051f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80051fa:	f7fe f92b 	bl	8003454 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff ffcc 	bl	800519c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005204:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005206:	f013 0310 	ands.w	r3, r3, #16
 800520a:	d161      	bne.n	80052d0 <HAL_ADC_Init+0xe8>
 800520c:	2800      	cmp	r0, #0
 800520e:	d15f      	bne.n	80052d0 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8005210:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005212:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8005214:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005218:	f022 0202 	bic.w	r2, r2, #2
 800521c:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005220:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005222:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8005224:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005226:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005228:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800522a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800522e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005232:	d036      	beq.n	80052a2 <HAL_ADC_Init+0xba>
 8005234:	1e77      	subs	r7, r6, #1
 8005236:	427d      	negs	r5, r7
 8005238:	417d      	adcs	r5, r7
 800523a:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800523c:	7d27      	ldrb	r7, [r4, #20]
 800523e:	2f01      	cmp	r7, #1
 8005240:	d106      	bne.n	8005250 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005242:	bb82      	cbnz	r2, 80052a6 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005244:	69a2      	ldr	r2, [r4, #24]
 8005246:	3a01      	subs	r2, #1
 8005248:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 800524c:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8005250:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005252:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8005256:	6857      	ldr	r7, [r2, #4]
 8005258:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 800525c:	ea45 0507 	orr.w	r5, r5, r7
 8005260:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8005262:	6897      	ldr	r7, [r2, #8]
 8005264:	4d1d      	ldr	r5, [pc, #116]	; (80052dc <HAL_ADC_Init+0xf4>)
 8005266:	ea05 0507 	and.w	r5, r5, r7
 800526a:	ea45 0501 	orr.w	r5, r5, r1
 800526e:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005270:	d001      	beq.n	8005276 <HAL_ADC_Init+0x8e>
 8005272:	2e01      	cmp	r6, #1
 8005274:	d102      	bne.n	800527c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005276:	6923      	ldr	r3, [r4, #16]
 8005278:	3b01      	subs	r3, #1
 800527a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800527c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800527e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8005282:	432b      	orrs	r3, r5
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <HAL_ADC_Init+0xf8>)
 800528a:	4013      	ands	r3, r2
 800528c:	4299      	cmp	r1, r3
 800528e:	d113      	bne.n	80052b8 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8005290:	2300      	movs	r3, #0
 8005292:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8005294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	f043 0301 	orr.w	r3, r3, #1
 800529e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80052a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80052a2:	4635      	mov	r5, r6
 80052a4:	e7ca      	b.n	800523c <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80052a8:	f042 0220 	orr.w	r2, r2, #32
 80052ac:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80052b6:	e7cb      	b.n	8005250 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80052b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052ba:	f023 0312 	bic.w	r3, r3, #18
 80052be:	f043 0310 	orr.w	r3, r3, #16
 80052c2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
 80052ce:	e7e7      	b.n	80052a0 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052d2:	f043 0310 	orr.w	r3, r3, #16
 80052d6:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80052d8:	e7f8      	b.n	80052cc <HAL_ADC_Init+0xe4>
 80052da:	bf00      	nop
 80052dc:	ffe1f7fd 	.word	0xffe1f7fd
 80052e0:	ff1f0efe 	.word	0xff1f0efe

080052e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e4:	4907      	ldr	r1, [pc, #28]	; (8005304 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80052e6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052e8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80052ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052f2:	0412      	lsls	r2, r2, #16
 80052f4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80052f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005300:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005302:	4770      	bx	lr
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800530a:	b530      	push	{r4, r5, lr}
 800530c:	68dc      	ldr	r4, [r3, #12]
 800530e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005312:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005316:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005318:	2b04      	cmp	r3, #4
 800531a:	bf28      	it	cs
 800531c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800531e:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005324:	bf94      	ite	ls
 8005326:	2400      	movls	r4, #0
 8005328:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800532a:	fa05 f303 	lsl.w	r3, r5, r3
 800532e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005332:	40a5      	lsls	r5, r4
 8005334:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005338:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800533a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800533c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005340:	bfac      	ite	ge
 8005342:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005346:	4a07      	ldrlt	r2, [pc, #28]	; (8005364 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005348:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800534c:	b2db      	uxtb	r3, r3
 800534e:	bfab      	itete	ge
 8005350:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005354:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005358:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800535c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800535e:	bd30      	pop	{r4, r5, pc}
 8005360:	e000ed00 	.word	0xe000ed00
 8005364:	e000ed14 	.word	0xe000ed14

08005368 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005368:	2800      	cmp	r0, #0
 800536a:	db07      	blt.n	800537c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800536c:	2301      	movs	r3, #1
 800536e:	0941      	lsrs	r1, r0, #5
 8005370:	4a03      	ldr	r2, [pc, #12]	; (8005380 <HAL_NVIC_EnableIRQ+0x18>)
 8005372:	f000 001f 	and.w	r0, r0, #31
 8005376:	4083      	lsls	r3, r0
 8005378:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	e000e100 	.word	0xe000e100

08005384 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005384:	2800      	cmp	r0, #0
 8005386:	db0c      	blt.n	80053a2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005388:	2201      	movs	r2, #1
 800538a:	4906      	ldr	r1, [pc, #24]	; (80053a4 <HAL_NVIC_DisableIRQ+0x20>)
 800538c:	0943      	lsrs	r3, r0, #5
 800538e:	f000 001f 	and.w	r0, r0, #31
 8005392:	4082      	lsls	r2, r0
 8005394:	3320      	adds	r3, #32
 8005396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800539a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800539e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80053a2:	4770      	bx	lr
 80053a4:	e000e100 	.word	0xe000e100

080053a8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80053a8:	4603      	mov	r3, r0
{
 80053aa:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80053ac:	b340      	cbz	r0, 8005400 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80053ae:	2114      	movs	r1, #20
 80053b0:	6800      	ldr	r0, [r0, #0]
 80053b2:	4a14      	ldr	r2, [pc, #80]	; (8005404 <HAL_DMA_Init+0x5c>)
 80053b4:	4402      	add	r2, r0
 80053b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80053ba:	0092      	lsls	r2, r2, #2
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <HAL_DMA_Init+0x60>)
 80053c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053c8:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 80053cc:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ce:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 80053d0:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d2:	4322      	orrs	r2, r4
 80053d4:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80053d6:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053da:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053dc:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80053de:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e2:	4322      	orrs	r2, r4
 80053e4:	699c      	ldr	r4, [r3, #24]
 80053e6:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e8:	69dc      	ldr	r4, [r3, #28]
 80053ea:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 80053ec:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053ee:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f0:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053f2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f4:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053f6:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 80053fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 80053fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005400:	2001      	movs	r0, #1
 8005402:	e7fc      	b.n	80053fe <HAL_DMA_Init+0x56>
 8005404:	bffdfff8 	.word	0xbffdfff8
 8005408:	40020000 	.word	0x40020000

0800540c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800540c:	b510      	push	{r4, lr}
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800540e:	b308      	cbz	r0, 8005454 <HAL_DMA_DeInit+0x48>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005410:	6801      	ldr	r1, [r0, #0]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <HAL_DMA_DeInit+0x4c>)
  __HAL_DMA_DISABLE(hdma);
 8005414:	680b      	ldr	r3, [r1, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005416:	440a      	add	r2, r1
  __HAL_DMA_DISABLE(hdma);
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	600b      	str	r3, [r1, #0]
  hdma->Instance->CCR  = 0U;
 800541e:	2300      	movs	r3, #0
 8005420:	600b      	str	r3, [r1, #0]
  hdma->Instance->CNDTR = 0U;
 8005422:	604b      	str	r3, [r1, #4]
  hdma->Instance->CPAR  = 0U;
 8005424:	608b      	str	r3, [r1, #8]
  hdma->Instance->CMAR = 0U;
 8005426:	60cb      	str	r3, [r1, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005428:	2114      	movs	r1, #20
 800542a:	fbb2 f2f1 	udiv	r2, r2, r1
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800542e:	2101      	movs	r1, #1
  hdma->DmaBaseAddress = DMA1;
 8005430:	4c0a      	ldr	r4, [pc, #40]	; (800545c <HAL_DMA_DeInit+0x50>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	6402      	str	r2, [r0, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DmaBaseAddress = DMA1;
 800543a:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800543c:	6062      	str	r2, [r4, #4]
  hdma->XferHalfCpltCallback = NULL;
  hdma->XferErrorCallback = NULL;
  hdma->XferAbortCallback = NULL;

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543e:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->XferHalfCpltCallback = NULL;
 8005440:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma->XferAbortCallback = NULL;
 8005444:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005448:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800544c:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8005450:	4618      	mov	r0, r3
}
 8005452:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005454:	2001      	movs	r0, #1
 8005456:	e7fc      	b.n	8005452 <HAL_DMA_DeInit+0x46>
 8005458:	bffdfff8 	.word	0xbffdfff8
 800545c:	40020000 	.word	0x40020000

08005460 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005462:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005464:	f890 0020 	ldrb.w	r0, [r0, #32]
 8005468:	2801      	cmp	r0, #1
 800546a:	d036      	beq.n	80054da <HAL_DMA_Start_IT+0x7a>
 800546c:	2001      	movs	r0, #1
 800546e:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005472:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8005476:	2400      	movs	r4, #0
 8005478:	2801      	cmp	r0, #1
 800547a:	b2c6      	uxtb	r6, r0
 800547c:	f04f 0002 	mov.w	r0, #2
 8005480:	d128      	bne.n	80054d4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005482:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005486:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005488:	682c      	ldr	r4, [r5, #0]
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	f020 0001 	bic.w	r0, r0, #1
 8005490:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005492:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 8005496:	fa06 f000 	lsl.w	r0, r6, r0
 800549a:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800549c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800549e:	686b      	ldr	r3, [r5, #4]
 80054a0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80054a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054a4:	bf0b      	itete	eq
 80054a6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80054a8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80054aa:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80054ac:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80054ae:	b14b      	cbz	r3, 80054c4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054b8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	6023      	str	r3, [r4, #0]
}
 80054c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	f023 0304 	bic.w	r3, r3, #4
 80054ca:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f043 030a 	orr.w	r3, r3, #10
 80054d2:	e7f0      	b.n	80054b6 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80054d4:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 80054d8:	e7f3      	b.n	80054c2 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 80054da:	2002      	movs	r0, #2
 80054dc:	e7f1      	b.n	80054c2 <HAL_DMA_Start_IT+0x62>

080054de <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054de:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80054e2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054e4:	2a02      	cmp	r2, #2
 80054e6:	d006      	beq.n	80054f6 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e8:	2204      	movs	r2, #4
 80054ea:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80054ec:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80054f4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054f6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054f8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054fa:	6811      	ldr	r1, [r2, #0]
 80054fc:	f021 010e 	bic.w	r1, r1, #14
 8005500:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005502:	6811      	ldr	r1, [r2, #0]
 8005504:	f021 0101 	bic.w	r1, r1, #1
 8005508:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800550a:	2101      	movs	r1, #1
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	fa01 f202 	lsl.w	r2, r1, r2
 8005512:	6042      	str	r2, [r0, #4]
  return status; 
 8005514:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8005516:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800551a:	e7e8      	b.n	80054ee <HAL_DMA_Abort+0x10>

0800551c <HAL_DMA_Abort_IT>:
{  
 800551c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800551e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005522:	2b02      	cmp	r3, #2
 8005524:	d003      	beq.n	800552e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005526:	2304      	movs	r3, #4
 8005528:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800552a:	2001      	movs	r0, #1
}
 800552c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800552e:	6803      	ldr	r3, [r0, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	f022 020e 	bic.w	r2, r2, #14
 8005536:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_DMA_Abort_IT+0x88>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01f      	beq.n	8005586 <HAL_DMA_Abort_IT+0x6a>
 8005546:	3214      	adds	r2, #20
 8005548:	4293      	cmp	r3, r2
 800554a:	d01e      	beq.n	800558a <HAL_DMA_Abort_IT+0x6e>
 800554c:	3214      	adds	r2, #20
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_DMA_Abort_IT+0x72>
 8005552:	3214      	adds	r2, #20
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Abort_IT+0x78>
 8005558:	3214      	adds	r2, #20
 800555a:	4293      	cmp	r3, r2
 800555c:	d01d      	beq.n	800559a <HAL_DMA_Abort_IT+0x7e>
 800555e:	3214      	adds	r2, #20
 8005560:	4293      	cmp	r3, r2
 8005562:	bf0c      	ite	eq
 8005564:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8005568:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800556c:	4a0e      	ldr	r2, [pc, #56]	; (80055a8 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800556e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005570:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005572:	2301      	movs	r3, #1
 8005574:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8005578:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800557a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800557e:	b17b      	cbz	r3, 80055a0 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8005580:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	4620      	mov	r0, r4
 8005584:	e7d2      	b.n	800552c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005586:	2301      	movs	r3, #1
 8005588:	e7f0      	b.n	800556c <HAL_DMA_Abort_IT+0x50>
 800558a:	2310      	movs	r3, #16
 800558c:	e7ee      	b.n	800556c <HAL_DMA_Abort_IT+0x50>
 800558e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005592:	e7eb      	b.n	800556c <HAL_DMA_Abort_IT+0x50>
 8005594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005598:	e7e8      	b.n	800556c <HAL_DMA_Abort_IT+0x50>
 800559a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800559e:	e7e5      	b.n	800556c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80055a0:	4618      	mov	r0, r3
 80055a2:	e7c3      	b.n	800552c <HAL_DMA_Abort_IT+0x10>
 80055a4:	40020008 	.word	0x40020008
 80055a8:	40020000 	.word	0x40020000

080055ac <HAL_DMA_IRQHandler>:
{
 80055ac:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80055ae:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055b0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80055b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055b4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80055b6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80055b8:	4095      	lsls	r5, r2
 80055ba:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80055bc:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80055be:	d032      	beq.n	8005626 <HAL_DMA_IRQHandler+0x7a>
 80055c0:	074d      	lsls	r5, r1, #29
 80055c2:	d530      	bpl.n	8005626 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c8:	bf5e      	ittt	pl
 80055ca:	681a      	ldrpl	r2, [r3, #0]
 80055cc:	f022 0204 	bicpl.w	r2, r2, #4
 80055d0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80055d2:	4a3e      	ldr	r2, [pc, #248]	; (80056cc <HAL_DMA_IRQHandler+0x120>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d019      	beq.n	800560c <HAL_DMA_IRQHandler+0x60>
 80055d8:	3214      	adds	r2, #20
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <HAL_DMA_IRQHandler+0x64>
 80055de:	3214      	adds	r2, #20
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d017      	beq.n	8005614 <HAL_DMA_IRQHandler+0x68>
 80055e4:	3214      	adds	r2, #20
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d017      	beq.n	800561a <HAL_DMA_IRQHandler+0x6e>
 80055ea:	3214      	adds	r2, #20
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d017      	beq.n	8005620 <HAL_DMA_IRQHandler+0x74>
 80055f0:	3214      	adds	r2, #20
 80055f2:	4293      	cmp	r3, r2
 80055f4:	bf0c      	ite	eq
 80055f6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80055fa:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80055fe:	4a34      	ldr	r2, [pc, #208]	; (80056d0 <HAL_DMA_IRQHandler+0x124>)
 8005600:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005602:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05e      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x11a>
}
 8005608:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800560a:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800560c:	2304      	movs	r3, #4
 800560e:	e7f6      	b.n	80055fe <HAL_DMA_IRQHandler+0x52>
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	e7f4      	b.n	80055fe <HAL_DMA_IRQHandler+0x52>
 8005614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005618:	e7f1      	b.n	80055fe <HAL_DMA_IRQHandler+0x52>
 800561a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800561e:	e7ee      	b.n	80055fe <HAL_DMA_IRQHandler+0x52>
 8005620:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005624:	e7eb      	b.n	80055fe <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005626:	2502      	movs	r5, #2
 8005628:	4095      	lsls	r5, r2
 800562a:	4225      	tst	r5, r4
 800562c:	d035      	beq.n	800569a <HAL_DMA_IRQHandler+0xee>
 800562e:	078d      	lsls	r5, r1, #30
 8005630:	d533      	bpl.n	800569a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	0694      	lsls	r4, r2, #26
 8005636:	d406      	bmi.n	8005646 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	f022 020a 	bic.w	r2, r2, #10
 800563e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005640:	2201      	movs	r2, #1
 8005642:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005646:	4a21      	ldr	r2, [pc, #132]	; (80056cc <HAL_DMA_IRQHandler+0x120>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d019      	beq.n	8005680 <HAL_DMA_IRQHandler+0xd4>
 800564c:	3214      	adds	r2, #20
 800564e:	4293      	cmp	r3, r2
 8005650:	d018      	beq.n	8005684 <HAL_DMA_IRQHandler+0xd8>
 8005652:	3214      	adds	r2, #20
 8005654:	4293      	cmp	r3, r2
 8005656:	d017      	beq.n	8005688 <HAL_DMA_IRQHandler+0xdc>
 8005658:	3214      	adds	r2, #20
 800565a:	4293      	cmp	r3, r2
 800565c:	d017      	beq.n	800568e <HAL_DMA_IRQHandler+0xe2>
 800565e:	3214      	adds	r2, #20
 8005660:	4293      	cmp	r3, r2
 8005662:	d017      	beq.n	8005694 <HAL_DMA_IRQHandler+0xe8>
 8005664:	3214      	adds	r2, #20
 8005666:	4293      	cmp	r3, r2
 8005668:	bf0c      	ite	eq
 800566a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800566e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005672:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <HAL_DMA_IRQHandler+0x124>)
 8005674:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005676:	2300      	movs	r3, #0
 8005678:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800567c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800567e:	e7c1      	b.n	8005604 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005680:	2302      	movs	r3, #2
 8005682:	e7f6      	b.n	8005672 <HAL_DMA_IRQHandler+0xc6>
 8005684:	2320      	movs	r3, #32
 8005686:	e7f4      	b.n	8005672 <HAL_DMA_IRQHandler+0xc6>
 8005688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800568c:	e7f1      	b.n	8005672 <HAL_DMA_IRQHandler+0xc6>
 800568e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005692:	e7ee      	b.n	8005672 <HAL_DMA_IRQHandler+0xc6>
 8005694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005698:	e7eb      	b.n	8005672 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800569a:	2508      	movs	r5, #8
 800569c:	4095      	lsls	r5, r2
 800569e:	4225      	tst	r5, r4
 80056a0:	d011      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x11a>
 80056a2:	0709      	lsls	r1, r1, #28
 80056a4:	d50f      	bpl.n	80056c6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056a6:	6819      	ldr	r1, [r3, #0]
 80056a8:	f021 010e 	bic.w	r1, r1, #14
 80056ac:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056ae:	2301      	movs	r3, #1
 80056b0:	fa03 f202 	lsl.w	r2, r3, r2
 80056b4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056b6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80056b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80056bc:	2300      	movs	r3, #0
 80056be:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80056c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80056c4:	e79e      	b.n	8005604 <HAL_DMA_IRQHandler+0x58>
}
 80056c6:	bc70      	pop	{r4, r5, r6}
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40020008 	.word	0x40020008
 80056d0:	40020000 	.word	0x40020000

080056d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80056d8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80056da:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056dc:	4f64      	ldr	r7, [pc, #400]	; (8005870 <HAL_GPIO_Init+0x19c>)
 80056de:	4b65      	ldr	r3, [pc, #404]	; (8005874 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80056e0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8005878 <HAL_GPIO_Init+0x1a4>
 80056e4:	f8df e194 	ldr.w	lr, [pc, #404]	; 800587c <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056e8:	680d      	ldr	r5, [r1, #0]
 80056ea:	fa35 f406 	lsrs.w	r4, r5, r6
 80056ee:	d102      	bne.n	80056f6 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80056f0:	b003      	add	sp, #12
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80056f6:	f04f 0801 	mov.w	r8, #1
 80056fa:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056fe:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005702:	ea38 0505 	bics.w	r5, r8, r5
 8005706:	d17a      	bne.n	80057fe <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8005708:	684d      	ldr	r5, [r1, #4]
 800570a:	2d03      	cmp	r5, #3
 800570c:	d807      	bhi.n	800571e <HAL_GPIO_Init+0x4a>
 800570e:	3d01      	subs	r5, #1
 8005710:	2d02      	cmp	r5, #2
 8005712:	f200 8087 	bhi.w	8005824 <HAL_GPIO_Init+0x150>
 8005716:	e8df f005 	tbb	[pc, r5]
 800571a:	9a95      	.short	0x9a95
 800571c:	a0          	.byte	0xa0
 800571d:	00          	.byte	0x00
 800571e:	2d12      	cmp	r5, #18
 8005720:	f000 8098 	beq.w	8005854 <HAL_GPIO_Init+0x180>
 8005724:	d86d      	bhi.n	8005802 <HAL_GPIO_Init+0x12e>
 8005726:	2d11      	cmp	r5, #17
 8005728:	f000 808e 	beq.w	8005848 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800572c:	2cff      	cmp	r4, #255	; 0xff
 800572e:	bf98      	it	ls
 8005730:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005732:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005736:	bf88      	it	hi
 8005738:	f100 0a04 	addhi.w	sl, r0, #4
 800573c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005740:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005744:	bf88      	it	hi
 8005746:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005748:	fa09 fb05 	lsl.w	fp, r9, r5
 800574c:	ea28 080b 	bic.w	r8, r8, fp
 8005750:	fa02 f505 	lsl.w	r5, r2, r5
 8005754:	ea48 0505 	orr.w	r5, r8, r5
 8005758:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800575c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005760:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005764:	d04b      	beq.n	80057fe <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005766:	69bd      	ldr	r5, [r7, #24]
 8005768:	f026 0803 	bic.w	r8, r6, #3
 800576c:	f045 0501 	orr.w	r5, r5, #1
 8005770:	61bd      	str	r5, [r7, #24]
 8005772:	69bd      	ldr	r5, [r7, #24]
 8005774:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8005778:	f005 0501 	and.w	r5, r5, #1
 800577c:	9501      	str	r5, [sp, #4]
 800577e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005782:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005786:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005788:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800578c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005790:	fa09 f90b 	lsl.w	r9, r9, fp
 8005794:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005798:	4d39      	ldr	r5, [pc, #228]	; (8005880 <HAL_GPIO_Init+0x1ac>)
 800579a:	42a8      	cmp	r0, r5
 800579c:	d061      	beq.n	8005862 <HAL_GPIO_Init+0x18e>
 800579e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057a2:	42a8      	cmp	r0, r5
 80057a4:	d05f      	beq.n	8005866 <HAL_GPIO_Init+0x192>
 80057a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057aa:	42a8      	cmp	r0, r5
 80057ac:	d05d      	beq.n	800586a <HAL_GPIO_Init+0x196>
 80057ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80057b2:	42a8      	cmp	r0, r5
 80057b4:	bf0c      	ite	eq
 80057b6:	2503      	moveq	r5, #3
 80057b8:	2504      	movne	r5, #4
 80057ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80057be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80057c2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80057c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80057cc:	bf14      	ite	ne
 80057ce:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057d0:	43a5      	biceq	r5, r4
 80057d2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80057d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80057da:	bf14      	ite	ne
 80057dc:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80057de:	43a5      	biceq	r5, r4
 80057e0:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80057e2:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80057e4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80057e8:	bf14      	ite	ne
 80057ea:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80057ec:	43a5      	biceq	r5, r4
 80057ee:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80057f0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057f2:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80057f6:	bf14      	ite	ne
 80057f8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80057fa:	43a5      	biceq	r5, r4
 80057fc:	601d      	str	r5, [r3, #0]
	position++;
 80057fe:	3601      	adds	r6, #1
 8005800:	e772      	b.n	80056e8 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8005802:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005884 <HAL_GPIO_Init+0x1b0>
 8005806:	454d      	cmp	r5, r9
 8005808:	d00c      	beq.n	8005824 <HAL_GPIO_Init+0x150>
 800580a:	d817      	bhi.n	800583c <HAL_GPIO_Init+0x168>
 800580c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005810:	454d      	cmp	r5, r9
 8005812:	d007      	beq.n	8005824 <HAL_GPIO_Init+0x150>
 8005814:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005818:	454d      	cmp	r5, r9
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0x150>
 800581c:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005820:	454d      	cmp	r5, r9
 8005822:	d183      	bne.n	800572c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005824:	688a      	ldr	r2, [r1, #8]
 8005826:	b1d2      	cbz	r2, 800585e <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005828:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800582a:	bf08      	it	eq
 800582c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005830:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005834:	bf18      	it	ne
 8005836:	f8c0 8014 	strne.w	r8, [r0, #20]
 800583a:	e777      	b.n	800572c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800583c:	4565      	cmp	r5, ip
 800583e:	d0f1      	beq.n	8005824 <HAL_GPIO_Init+0x150>
 8005840:	4575      	cmp	r5, lr
 8005842:	e7ee      	b.n	8005822 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005844:	68ca      	ldr	r2, [r1, #12]
          break;
 8005846:	e771      	b.n	800572c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005848:	68ca      	ldr	r2, [r1, #12]
 800584a:	3204      	adds	r2, #4
          break;
 800584c:	e76e      	b.n	800572c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800584e:	68ca      	ldr	r2, [r1, #12]
 8005850:	3208      	adds	r2, #8
          break;
 8005852:	e76b      	b.n	800572c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005854:	68ca      	ldr	r2, [r1, #12]
 8005856:	320c      	adds	r2, #12
          break;
 8005858:	e768      	b.n	800572c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800585a:	2200      	movs	r2, #0
 800585c:	e766      	b.n	800572c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800585e:	2204      	movs	r2, #4
 8005860:	e764      	b.n	800572c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005862:	2500      	movs	r5, #0
 8005864:	e7a9      	b.n	80057ba <HAL_GPIO_Init+0xe6>
 8005866:	2501      	movs	r5, #1
 8005868:	e7a7      	b.n	80057ba <HAL_GPIO_Init+0xe6>
 800586a:	2502      	movs	r5, #2
 800586c:	e7a5      	b.n	80057ba <HAL_GPIO_Init+0xe6>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	40010400 	.word	0x40010400
 8005878:	10310000 	.word	0x10310000
 800587c:	10320000 	.word	0x10320000
 8005880:	40010800 	.word	0x40010800
 8005884:	10220000 	.word	0x10220000

08005888 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800588c:	f04f 0b04 	mov.w	fp, #4
  uint32_t position = 0x00u;
 8005890:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005892:	f04f 0a01 	mov.w	sl, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8005896:	f04f 080f 	mov.w	r8, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800589a:	eb00 030b 	add.w	r3, r0, fp
 800589e:	9301      	str	r3, [sp, #4]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80058a0:	4b2e      	ldr	r3, [pc, #184]	; (800595c <HAL_GPIO_DeInit+0xd4>)
  while ((GPIO_Pin >> position) != 0u)
 80058a2:	fa31 f402 	lsrs.w	r4, r1, r2
 80058a6:	d102      	bne.n	80058ae <HAL_GPIO_DeInit+0x26>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 80058a8:	b003      	add	sp, #12
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80058ae:	fa0a f702 	lsl.w	r7, sl, r2
    if (iocurrent)
 80058b2:	400f      	ands	r7, r1
 80058b4:	d049      	beq.n	800594a <HAL_GPIO_DeInit+0xc2>
      tmp = AFIO->EXTICR[position >> 2u];
 80058b6:	f022 0403 	bic.w	r4, r2, #3
 80058ba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80058be:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80058c2:	f002 0c03 	and.w	ip, r2, #3
      tmp = AFIO->EXTICR[position >> 2u];
 80058c6:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80058c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80058cc:	fa08 f90c 	lsl.w	r9, r8, ip
 80058d0:	ea09 0e05 	and.w	lr, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80058d4:	4d22      	ldr	r5, [pc, #136]	; (8005960 <HAL_GPIO_DeInit+0xd8>)
 80058d6:	42a8      	cmp	r0, r5
 80058d8:	d039      	beq.n	800594e <HAL_GPIO_DeInit+0xc6>
 80058da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058de:	42a8      	cmp	r0, r5
 80058e0:	d037      	beq.n	8005952 <HAL_GPIO_DeInit+0xca>
 80058e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058e6:	42a8      	cmp	r0, r5
 80058e8:	d035      	beq.n	8005956 <HAL_GPIO_DeInit+0xce>
 80058ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80058ee:	42a8      	cmp	r0, r5
 80058f0:	bf0c      	ite	eq
 80058f2:	2503      	moveq	r5, #3
 80058f4:	2504      	movne	r5, #4
 80058f6:	fa05 f50c 	lsl.w	r5, r5, ip
 80058fa:	4575      	cmp	r5, lr
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80058fc:	ea6f 0607 	mvn.w	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005900:	d10f      	bne.n	8005922 <HAL_GPIO_DeInit+0x9a>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8005902:	681d      	ldr	r5, [r3, #0]
 8005904:	4035      	ands	r5, r6
 8005906:	601d      	str	r5, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8005908:	685d      	ldr	r5, [r3, #4]
 800590a:	4035      	ands	r5, r6
 800590c:	605d      	str	r5, [r3, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800590e:	68dd      	ldr	r5, [r3, #12]
 8005910:	4035      	ands	r5, r6
 8005912:	60dd      	str	r5, [r3, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8005914:	689d      	ldr	r5, [r3, #8]
 8005916:	4035      	ands	r5, r6
 8005918:	609d      	str	r5, [r3, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800591a:	68a5      	ldr	r5, [r4, #8]
 800591c:	ea25 0509 	bic.w	r5, r5, r9
 8005920:	60a5      	str	r5, [r4, #8]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005922:	2fff      	cmp	r7, #255	; 0xff
 8005924:	bf94      	ite	ls
 8005926:	4607      	movls	r7, r0
 8005928:	9f01      	ldrhi	r7, [sp, #4]
 800592a:	ea4f 0482 	mov.w	r4, r2, lsl #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800592e:	683d      	ldr	r5, [r7, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005930:	bf88      	it	hi
 8005932:	3c20      	subhi	r4, #32
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8005934:	fa08 fc04 	lsl.w	ip, r8, r4
 8005938:	ea25 050c 	bic.w	r5, r5, ip
 800593c:	fa0b f404 	lsl.w	r4, fp, r4
 8005940:	4325      	orrs	r5, r4
 8005942:	603d      	str	r5, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8005944:	68c4      	ldr	r4, [r0, #12]
 8005946:	4034      	ands	r4, r6
 8005948:	60c4      	str	r4, [r0, #12]
    position++;
 800594a:	3201      	adds	r2, #1
 800594c:	e7a9      	b.n	80058a2 <HAL_GPIO_DeInit+0x1a>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800594e:	2500      	movs	r5, #0
 8005950:	e7d1      	b.n	80058f6 <HAL_GPIO_DeInit+0x6e>
 8005952:	2501      	movs	r5, #1
 8005954:	e7cf      	b.n	80058f6 <HAL_GPIO_DeInit+0x6e>
 8005956:	2502      	movs	r5, #2
 8005958:	e7cd      	b.n	80058f6 <HAL_GPIO_DeInit+0x6e>
 800595a:	bf00      	nop
 800595c:	40010400 	.word	0x40010400
 8005960:	40010800 	.word	0x40010800

08005964 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005964:	6883      	ldr	r3, [r0, #8]
 8005966:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005968:	bf14      	ite	ne
 800596a:	2001      	movne	r0, #1
 800596c:	2000      	moveq	r0, #0
 800596e:	4770      	bx	lr

08005970 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005970:	b10a      	cbz	r2, 8005976 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005972:	6101      	str	r1, [r0, #16]
  }
}
 8005974:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005976:	0409      	lsls	r1, r1, #16
 8005978:	e7fb      	b.n	8005972 <HAL_GPIO_WritePin+0x2>

0800597a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597a:	6801      	ldr	r1, [r0, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	694b      	ldr	r3, [r1, #20]
 8005980:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005984:	d010      	beq.n	80059a8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005986:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800598a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800598c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005990:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005994:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005998:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800599e:	f043 0304 	orr.w	r3, r3, #4
 80059a2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
 80059a6:	4770      	bx	lr
  }
  return HAL_OK;
 80059a8:	4618      	mov	r0, r3
}
 80059aa:	4770      	bx	lr

080059ac <I2C_WaitOnFlagUntilTimeout>:
{
 80059ac:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80059b0:	4606      	mov	r6, r0
 80059b2:	460f      	mov	r7, r1
 80059b4:	4691      	mov	r9, r2
 80059b6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059bc:	6833      	ldr	r3, [r6, #0]
 80059be:	f1ba 0f01 	cmp.w	sl, #1
 80059c2:	bf0c      	ite	eq
 80059c4:	695c      	ldreq	r4, [r3, #20]
 80059c6:	699c      	ldrne	r4, [r3, #24]
 80059c8:	ea27 0404 	bic.w	r4, r7, r4
 80059cc:	b2a4      	uxth	r4, r4
 80059ce:	fab4 f484 	clz	r4, r4
 80059d2:	0964      	lsrs	r4, r4, #5
 80059d4:	45a1      	cmp	r9, r4
 80059d6:	d001      	beq.n	80059dc <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80059d8:	2000      	movs	r0, #0
 80059da:	e025      	b.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80059dc:	1c6a      	adds	r2, r5, #1
 80059de:	d0ee      	beq.n	80059be <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e0:	f7ff fa40 	bl	8004e64 <HAL_GetTick>
 80059e4:	9b08      	ldr	r3, [sp, #32]
 80059e6:	1ac0      	subs	r0, r0, r3
 80059e8:	42a8      	cmp	r0, r5
 80059ea:	d801      	bhi.n	80059f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d1e5      	bne.n	80059bc <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059f0:	6833      	ldr	r3, [r6, #0]
 80059f2:	f1ba 0f01 	cmp.w	sl, #1
 80059f6:	bf0c      	ite	eq
 80059f8:	695b      	ldreq	r3, [r3, #20]
 80059fa:	699b      	ldrne	r3, [r3, #24]
 80059fc:	ea27 0303 	bic.w	r3, r7, r3
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	fab3 f383 	clz	r3, r3
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	4599      	cmp	r9, r3
 8005a0a:	d1d7      	bne.n	80059bc <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a0c:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a0e:	2220      	movs	r2, #32
          return HAL_ERROR;
 8005a10:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a12:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a14:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a18:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a1c:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005a1e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a22:	f042 0220 	orr.w	r2, r2, #32
 8005a26:	6432      	str	r2, [r6, #64]	; 0x40
}
 8005a28:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	4604      	mov	r4, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	4616      	mov	r6, r2
 8005a36:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a38:	6825      	ldr	r5, [r4, #0]
 8005a3a:	6968      	ldr	r0, [r5, #20]
 8005a3c:	ea27 0000 	bic.w	r0, r7, r0
 8005a40:	b280      	uxth	r0, r0
 8005a42:	b1b8      	cbz	r0, 8005a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a44:	696b      	ldr	r3, [r5, #20]
 8005a46:	055a      	lsls	r2, r3, #21
 8005a48:	d516      	bpl.n	8005a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a4c:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a52:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005a58:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005a68:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8005a6c:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6e:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005a70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005a78:	1c73      	adds	r3, r6, #1
 8005a7a:	d0de      	beq.n	8005a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7ff f9f2 	bl	8004e64 <HAL_GetTick>
 8005a80:	eba0 0008 	sub.w	r0, r0, r8
 8005a84:	42b0      	cmp	r0, r6
 8005a86:	d801      	bhi.n	8005a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8005a88:	2e00      	cmp	r6, #0
 8005a8a:	d1d5      	bne.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	695a      	ldr	r2, [r3, #20]
 8005a90:	ea27 0202 	bic.w	r2, r7, r2
 8005a94:	b292      	uxth	r2, r2
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d0ce      	beq.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9a:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a9c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9e:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005aa0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005aaa:	f042 0220 	orr.w	r2, r2, #32
 8005aae:	e7dd      	b.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08005ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab8:	6823      	ldr	r3, [r4, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	d501      	bpl.n	8005ac4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005ac0:	2000      	movs	r0, #0
}
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ac4:	4620      	mov	r0, r4
 8005ac6:	f7ff ff58 	bl	800597a <I2C_IsAcknowledgeFailed>
 8005aca:	b9c8      	cbnz	r0, 8005b00 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005acc:	1c6a      	adds	r2, r5, #1
 8005ace:	d0f3      	beq.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	f7ff f9c8 	bl	8004e64 <HAL_GetTick>
 8005ad4:	1b80      	subs	r0, r0, r6
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	d801      	bhi.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	d1ec      	bne.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8005ae6:	d1e7      	bne.n	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005aea:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005aec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005af6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005afa:	f042 0220 	orr.w	r2, r2, #32
 8005afe:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7de      	b.n	8005ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08005b04 <I2C_RequestMemoryWrite>:
{
 8005b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b08:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b0a:	6802      	ldr	r2, [r0, #0]
{
 8005b0c:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b0e:	6813      	ldr	r3, [r2, #0]
{
 8005b10:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b16:	6013      	str	r3, [r2, #0]
{
 8005b18:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005b1c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1e:	463b      	mov	r3, r7
 8005b20:	2200      	movs	r2, #0
 8005b22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b26:	f8cd 8000 	str.w	r8, [sp]
{
 8005b2a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b2c:	f7ff ff3e 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	b138      	cbz	r0, 8005b44 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	05db      	lsls	r3, r3, #23
 8005b38:	d502      	bpl.n	8005b40 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b3e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005b40:	2003      	movs	r0, #3
 8005b42:	e00a      	b.n	8005b5a <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b44:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005b48:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b4a:	463a      	mov	r2, r7
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4917      	ldr	r1, [pc, #92]	; (8005bb0 <I2C_RequestMemoryWrite+0xac>)
 8005b52:	f7ff ff6b 	bl	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b56:	b118      	cbz	r0, 8005b60 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8005b58:	2001      	movs	r0, #1
}
 8005b5a:	b005      	add	sp, #20
 8005b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	9003      	str	r0, [sp, #12]
 8005b64:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b66:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b68:	9203      	str	r2, [sp, #12]
 8005b6a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b6c:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b70:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b72:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b74:	f7ff ff9c 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b78:	b140      	cbz	r0, 8005b8c <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b7e:	bf01      	itttt	eq
 8005b80:	6822      	ldreq	r2, [r4, #0]
 8005b82:	6813      	ldreq	r3, [r2, #0]
 8005b84:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005b88:	6013      	streq	r3, [r2, #0]
 8005b8a:	e7e5      	b.n	8005b58 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b8c:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b92:	d102      	bne.n	8005b9a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b94:	b2ed      	uxtb	r5, r5
 8005b96:	611d      	str	r5, [r3, #16]
 8005b98:	e7df      	b.n	8005b5a <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b9a:	0a2a      	lsrs	r2, r5, #8
 8005b9c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f7ff ff84 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d1e6      	bne.n	8005b7a <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	e7f1      	b.n	8005b94 <I2C_RequestMemoryWrite+0x90>
 8005bb0:	00010002 	.word	0x00010002

08005bb4 <I2C_RequestMemoryRead>:
{
 8005bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb8:	469a      	mov	sl, r3
 8005bba:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	6803      	ldr	r3, [r0, #0]
{
 8005bc0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc2:	681a      	ldr	r2, [r3, #0]
{
 8005bc4:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bca:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bcc:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd6:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd8:	463b      	mov	r3, r7
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8cd 8000 	str.w	r8, [sp]
{
 8005be0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005be2:	f7ff fee3 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	b148      	cbz	r0, 8005bfe <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bea:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bec:	05db      	lsls	r3, r3, #23
 8005bee:	d502      	bpl.n	8005bf6 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005bf6:	2003      	movs	r0, #3
}
 8005bf8:	b004      	add	sp, #16
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bfe:	fa5f f986 	uxtb.w	r9, r6
 8005c02:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005c06:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	463a      	mov	r2, r7
 8005c0a:	4643      	mov	r3, r8
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4929      	ldr	r1, [pc, #164]	; (8005cb4 <I2C_RequestMemoryRead+0x100>)
 8005c10:	f7ff ff0c 	bl	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	b108      	cbz	r0, 8005c1a <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8005c16:	2001      	movs	r0, #1
 8005c18:	e7ee      	b.n	8005bf8 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	9003      	str	r0, [sp, #12]
 8005c1e:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c20:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c22:	9203      	str	r2, [sp, #12]
 8005c24:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c26:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c28:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c2e:	f7ff ff3f 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c32:	b140      	cbz	r0, 8005c46 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c36:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c38:	bf01      	itttt	eq
 8005c3a:	6822      	ldreq	r2, [r4, #0]
 8005c3c:	6813      	ldreq	r3, [r2, #0]
 8005c3e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005c42:	6013      	streq	r3, [r2, #0]
 8005c44:	e7e7      	b.n	8005c16 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c46:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4c:	d11a      	bne.n	8005c84 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c4e:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c50:	4642      	mov	r2, r8
 8005c52:	4639      	mov	r1, r7
 8005c54:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c56:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c58:	f7ff ff2a 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d1e8      	bne.n	8005c34 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c62:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c64:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c66:	680b      	ldr	r3, [r1, #0]
 8005c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6c:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6e:	463b      	mov	r3, r7
 8005c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c74:	f8cd 8000 	str.w	r8, [sp]
 8005c78:	f7ff fe98 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	b160      	cbz	r0, 8005c9a <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c80:	6813      	ldr	r3, [r2, #0]
 8005c82:	e7b3      	b.n	8005bec <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c84:	0a2a      	lsrs	r2, r5, #8
 8005c86:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c88:	4639      	mov	r1, r7
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f7ff ff0f 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d1ce      	bne.n	8005c34 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	e7d9      	b.n	8005c4e <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c9a:	f049 0301 	orr.w	r3, r9, #1
 8005c9e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	4643      	mov	r3, r8
 8005ca4:	463a      	mov	r2, r7
 8005ca6:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <I2C_RequestMemoryRead+0x100>)
 8005ca8:	f7ff fec0 	bl	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8005cac:	3800      	subs	r0, #0
 8005cae:	bf18      	it	ne
 8005cb0:	2001      	movne	r0, #1
 8005cb2:	e7a1      	b.n	8005bf8 <I2C_RequestMemoryRead+0x44>
 8005cb4:	00010002 	.word	0x00010002

08005cb8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4604      	mov	r4, r0
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	075b      	lsls	r3, r3, #29
 8005cc6:	d501      	bpl.n	8005ccc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005cc8:	2000      	movs	r0, #0
}
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7ff fe54 	bl	800597a <I2C_IsAcknowledgeFailed>
 8005cd2:	b9c8      	cbnz	r0, 8005d08 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005cd4:	1c6a      	adds	r2, r5, #1
 8005cd6:	d0f3      	beq.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd8:	f7ff f8c4 	bl	8004e64 <HAL_GetTick>
 8005cdc:	1b80      	subs	r0, r0, r6
 8005cde:	42a8      	cmp	r0, r5
 8005ce0:	d801      	bhi.n	8005ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	d1ec      	bne.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f013 0304 	ands.w	r3, r3, #4
 8005cee:	d1e7      	bne.n	8005cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cf0:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cf4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8005cfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	f042 0220 	orr.w	r2, r2, #32
 8005d06:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005d08:	2001      	movs	r0, #1
 8005d0a:	e7de      	b.n	8005cca <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005d0c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4604      	mov	r4, r0
 8005d10:	460d      	mov	r5, r1
 8005d12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d14:	6821      	ldr	r1, [r4, #0]
 8005d16:	694b      	ldr	r3, [r1, #20]
 8005d18:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005d1c:	d001      	beq.n	8005d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e010      	b.n	8005d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d22:	694a      	ldr	r2, [r1, #20]
 8005d24:	06d2      	lsls	r2, r2, #27
 8005d26:	d50e      	bpl.n	8005d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d28:	f06f 0210 	mvn.w	r2, #16
 8005d2c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d2e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d30:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d32:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005d3c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7ff f88d 	bl	8004e64 <HAL_GetTick>
 8005d4a:	1b80      	subs	r0, r0, r6
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d801      	bhi.n	8005d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	d1df      	bne.n	8005d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005d5c:	d1da      	bne.n	8005d14 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d5e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d60:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d6c:	f042 0220 	orr.w	r2, r2, #32
 8005d70:	e7e4      	b.n	8005d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08005d74 <HAL_I2C_Init>:
{
 8005d74:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8005d76:	4604      	mov	r4, r0
 8005d78:	b908      	cbnz	r0, 8005d7e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8005d7a:	2001      	movs	r0, #1
}
 8005d7c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d86:	b91b      	cbnz	r3, 8005d90 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8005d88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005d8c:	f7fd fbac 	bl	80034e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d90:	2324      	movs	r3, #36	; 0x24
 8005d92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	f022 0201 	bic.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005dae:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005db0:	f000 fd6a 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005db4:	4b3f      	ldr	r3, [pc, #252]	; (8005eb4 <HAL_I2C_Init+0x140>)
 8005db6:	6865      	ldr	r5, [r4, #4]
 8005db8:	429d      	cmp	r5, r3
 8005dba:	bf94      	ite	ls
 8005dbc:	4b3e      	ldrls	r3, [pc, #248]	; (8005eb8 <HAL_I2C_Init+0x144>)
 8005dbe:	4b3f      	ldrhi	r3, [pc, #252]	; (8005ebc <HAL_I2C_Init+0x148>)
 8005dc0:	4298      	cmp	r0, r3
 8005dc2:	bf8c      	ite	hi
 8005dc4:	2300      	movhi	r3, #0
 8005dc6:	2301      	movls	r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1d6      	bne.n	8005d7a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dcc:	4e39      	ldr	r6, [pc, #228]	; (8005eb4 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8005dce:	4b3c      	ldr	r3, [pc, #240]	; (8005ec0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dd0:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8005dd2:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dd6:	bf88      	it	hi
 8005dd8:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ddc:	6822      	ldr	r2, [r4, #0]
 8005dde:	6851      	ldr	r1, [r2, #4]
 8005de0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005de4:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005de8:	bf82      	ittt	hi
 8005dea:	4373      	mulhi	r3, r6
 8005dec:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8005df0:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005df4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005df6:	6a11      	ldr	r1, [r2, #32]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e02:	69d1      	ldr	r1, [r2, #28]
 8005e04:	1e43      	subs	r3, r0, #1
 8005e06:	482b      	ldr	r0, [pc, #172]	; (8005eb4 <HAL_I2C_Init+0x140>)
 8005e08:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8005e0c:	4285      	cmp	r5, r0
 8005e0e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005e12:	d832      	bhi.n	8005e7a <HAL_I2C_Init+0x106>
 8005e14:	006d      	lsls	r5, r5, #1
 8005e16:	fbb3 f3f5 	udiv	r3, r3, r5
 8005e1a:	f640 70fc 	movw	r0, #4092	; 0xffc
 8005e1e:	3301      	adds	r3, #1
 8005e20:	4203      	tst	r3, r0
 8005e22:	d042      	beq.n	8005eaa <HAL_I2C_Init+0x136>
 8005e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e28:	4319      	orrs	r1, r3
 8005e2a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e2c:	6811      	ldr	r1, [r2, #0]
 8005e2e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005e32:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8005e36:	4303      	orrs	r3, r0
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e3c:	6891      	ldr	r1, [r2, #8]
 8005e3e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8005e42:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8005e46:	4303      	orrs	r3, r0
 8005e48:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e50:	68d1      	ldr	r1, [r2, #12]
 8005e52:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8005e56:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005e5a:	4303      	orrs	r3, r0
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005e60:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e62:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8005e64:	f043 0301 	orr.w	r3, r3, #1
 8005e68:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e72:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e74:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005e78:	e780      	b.n	8005d7c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e7a:	68a0      	ldr	r0, [r4, #8]
 8005e7c:	b950      	cbnz	r0, 8005e94 <HAL_I2C_Init+0x120>
 8005e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e82:	fbb3 f3f5 	udiv	r3, r3, r5
 8005e86:	3301      	adds	r3, #1
 8005e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8c:	b17b      	cbz	r3, 8005eae <HAL_I2C_Init+0x13a>
 8005e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e92:	e7c9      	b.n	8005e28 <HAL_I2C_Init+0xb4>
 8005e94:	2019      	movs	r0, #25
 8005e96:	4368      	muls	r0, r5
 8005e98:	fbb3 f3f0 	udiv	r3, r3, r0
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea2:	b123      	cbz	r3, 8005eae <HAL_I2C_Init+0x13a>
 8005ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea8:	e7be      	b.n	8005e28 <HAL_I2C_Init+0xb4>
 8005eaa:	2304      	movs	r3, #4
 8005eac:	e7bc      	b.n	8005e28 <HAL_I2C_Init+0xb4>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e7ba      	b.n	8005e28 <HAL_I2C_Init+0xb4>
 8005eb2:	bf00      	nop
 8005eb4:	000186a0 	.word	0x000186a0
 8005eb8:	001e847f 	.word	0x001e847f
 8005ebc:	003d08ff 	.word	0x003d08ff
 8005ec0:	000f4240 	.word	0x000f4240

08005ec4 <HAL_I2C_Mem_Write>:
{
 8005ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4699      	mov	r9, r3
 8005ecc:	460f      	mov	r7, r1
 8005ece:	4690      	mov	r8, r2
 8005ed0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005ed2:	f7fe ffc7 	bl	8004e64 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8005eda:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005edc:	2b20      	cmp	r3, #32
 8005ede:	d003      	beq.n	8005ee8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8005ee0:	2002      	movs	r0, #2
}
 8005ee2:	b003      	add	sp, #12
 8005ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ee8:	9000      	str	r0, [sp, #0]
 8005eea:	2319      	movs	r3, #25
 8005eec:	2201      	movs	r2, #1
 8005eee:	4620      	mov	r0, r4
 8005ef0:	493a      	ldr	r1, [pc, #232]	; (8005fdc <HAL_I2C_Mem_Write+0x118>)
 8005ef2:	f7ff fd5b 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d1f2      	bne.n	8005ee0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005efa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d0ee      	beq.n	8005ee0 <HAL_I2C_Mem_Write+0x1c>
 8005f02:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f04:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005f06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f0a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f0c:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f0e:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005f10:	bf58      	it	pl
 8005f12:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f14:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8005f16:	bf5c      	itt	pl
 8005f18:	f043 0301 	orrpl.w	r3, r3, #1
 8005f1c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f1e:	6803      	ldr	r3, [r0, #0]
 8005f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f24:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005f26:	2321      	movs	r3, #33	; 0x21
 8005f28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f2c:	2340      	movs	r3, #64	; 0x40
 8005f2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f32:	2300      	movs	r3, #0
 8005f34:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f38:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8005f3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f3c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f40:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8005f44:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f48:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f4a:	4b25      	ldr	r3, [pc, #148]	; (8005fe0 <HAL_I2C_Mem_Write+0x11c>)
 8005f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7ff fdd8 	bl	8005b04 <I2C_RequestMemoryWrite>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d02a      	beq.n	8005fae <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7c2      	b.n	8005ee2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f5c:	f7ff fda8 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f60:	b140      	cbz	r0, 8005f74 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f64:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	bf01      	itttt	eq
 8005f68:	6822      	ldreq	r2, [r4, #0]
 8005f6a:	6813      	ldreq	r3, [r2, #0]
 8005f6c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005f70:	6013      	streq	r3, [r2, #0]
 8005f72:	e7f1      	b.n	8005f58 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f76:	6827      	ldr	r7, [r4, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005f7e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005f80:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005f82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005f84:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005f86:	3a01      	subs	r2, #1
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f8c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005f8e:	1e48      	subs	r0, r1, #1
 8005f90:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f92:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005f94:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f96:	d50a      	bpl.n	8005fae <HAL_I2C_Mem_Write+0xea>
 8005f98:	b148      	cbz	r0, 8005fae <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8005f9c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005fa0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8005fa4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005faa:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005fac:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005fae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb0:	462a      	mov	r2, r5
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1d0      	bne.n	8005f5c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fba:	f7ff fe7d 	bl	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d1cf      	bne.n	8005f62 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	6813      	ldr	r3, [r2, #0]
 8005fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005fcc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8005fce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8005fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005fda:	e782      	b.n	8005ee2 <HAL_I2C_Mem_Write+0x1e>
 8005fdc:	00100002 	.word	0x00100002
 8005fe0:	ffff0000 	.word	0xffff0000

08005fe4 <HAL_I2C_Mem_Read>:
{
 8005fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fe8:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8005fea:	2300      	movs	r3, #0
{
 8005fec:	4604      	mov	r4, r0
 8005fee:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8005ff0:	9303      	str	r3, [sp, #12]
{
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	4690      	mov	r8, r2
 8005ff6:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8005ff8:	f7fe ff34 	bl	8004e64 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ffc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006000:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006002:	2b20      	cmp	r3, #32
 8006004:	d004      	beq.n	8006010 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8006006:	2502      	movs	r5, #2
}
 8006008:	4628      	mov	r0, r5
 800600a:	b009      	add	sp, #36	; 0x24
 800600c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006010:	9000      	str	r0, [sp, #0]
 8006012:	2319      	movs	r3, #25
 8006014:	2201      	movs	r2, #1
 8006016:	4620      	mov	r0, r4
 8006018:	498d      	ldr	r1, [pc, #564]	; (8006250 <HAL_I2C_Mem_Read+0x26c>)
 800601a:	f7ff fcc7 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 800601e:	2800      	cmp	r0, #0
 8006020:	d1f1      	bne.n	8006006 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8006022:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006026:	2b01      	cmp	r3, #1
 8006028:	d0ed      	beq.n	8006006 <HAL_I2C_Mem_Read+0x22>
 800602a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800602c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800602e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006032:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006034:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006036:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006038:	bf58      	it	pl
 800603a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800603c:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 800603e:	bf5c      	itt	pl
 8006040:	f043 0301 	orrpl.w	r3, r3, #1
 8006044:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006046:	6803      	ldr	r3, [r0, #0]
 8006048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800604e:	2322      	movs	r3, #34	; 0x22
 8006050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
 800605c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800605e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006060:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006062:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006064:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006068:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 800606c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800606e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006070:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006072:	4b78      	ldr	r3, [pc, #480]	; (8006254 <HAL_I2C_Mem_Read+0x270>)
 8006074:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006076:	464b      	mov	r3, r9
 8006078:	f7ff fd9c 	bl	8005bb4 <I2C_RequestMemoryRead>
 800607c:	4605      	mov	r5, r0
 800607e:	b108      	cbz	r0, 8006084 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8006080:	2501      	movs	r5, #1
 8006082:	e7c1      	b.n	8006008 <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8006084:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006086:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8006088:	b9c2      	cbnz	r2, 80060bc <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800608a:	9004      	str	r0, [sp, #16]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	9204      	str	r2, [sp, #16]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	9204      	str	r2, [sp, #16]
 8006094:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800609c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800609e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006258 <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80060a2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800625c <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 80060a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d137      	bne.n	800611c <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 80060ac:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80060ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80060ba:	e7a5      	b.n	8006008 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80060bc:	2a01      	cmp	r2, #1
 80060be:	d111      	bne.n	80060e4 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80060c8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	9005      	str	r0, [sp, #20]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	9205      	str	r2, [sp, #20]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	9205      	str	r2, [sp, #20]
 80060d6:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80060e0:	b662      	cpsie	i
}
 80060e2:	e7dc      	b.n	800609e <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80060e4:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e6:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80060e8:	d10e      	bne.n	8006108 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80060f0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	9006      	str	r0, [sp, #24]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	9206      	str	r2, [sp, #24]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	9206      	str	r2, [sp, #24]
 80060fe:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006106:	e7ea      	b.n	80060de <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800610c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610e:	9007      	str	r0, [sp, #28]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	9207      	str	r2, [sp, #28]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	9b07      	ldr	r3, [sp, #28]
 800611a:	e7c0      	b.n	800609e <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 800611c:	2b03      	cmp	r3, #3
 800611e:	d878      	bhi.n	8006212 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8006120:	2b01      	cmp	r3, #1
 8006122:	d115      	bne.n	8006150 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006124:	4632      	mov	r2, r6
 8006126:	4639      	mov	r1, r7
 8006128:	4620      	mov	r0, r4
 800612a:	f7ff fdef 	bl	8005d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800612e:	2800      	cmp	r0, #0
 8006130:	d1a6      	bne.n	8006080 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006138:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800613a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800613c:	3301      	adds	r3, #1
 800613e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006140:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006142:	3b01      	subs	r3, #1
 8006144:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006148:	3b01      	subs	r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800614e:	e7aa      	b.n	80060a6 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8006150:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	463b      	mov	r3, r7
 8006158:	4641      	mov	r1, r8
 800615a:	4620      	mov	r0, r4
 800615c:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 800615e:	d118      	bne.n	8006192 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006160:	f7ff fc24 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8006164:	2800      	cmp	r0, #0
 8006166:	d18b      	bne.n	8006080 <HAL_I2C_Mem_Read+0x9c>
 8006168:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006172:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006174:	691a      	ldr	r2, [r3, #16]
 8006176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006178:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800617a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617c:	3301      	adds	r3, #1
 800617e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006180:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006188:	3b01      	subs	r3, #1
 800618a:	b29b      	uxth	r3, r3
 800618c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800618e:	b662      	cpsie	i
 8006190:	e7cf      	b.n	8006132 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006192:	f7ff fc0b 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8006196:	2800      	cmp	r0, #0
 8006198:	f47f af72 	bne.w	8006080 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800619c:	6822      	ldr	r2, [r4, #0]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061a6:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061a8:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80061b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061b6:	1c53      	adds	r3, r2, #1
 80061b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80061ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80061bc:	3b01      	subs	r3, #1
 80061be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80061c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80061c8:	f8d9 3000 	ldr.w	r3, [r9]
 80061cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80061d0:	2123      	movs	r1, #35	; 0x23
 80061d2:	434b      	muls	r3, r1
 80061d4:	9303      	str	r3, [sp, #12]
            count--;
 80061d6:	9b03      	ldr	r3, [sp, #12]
 80061d8:	3b01      	subs	r3, #1
 80061da:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80061dc:	9b03      	ldr	r3, [sp, #12]
 80061de:	b96b      	cbnz	r3, 80061fc <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80061e0:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80061e2:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80061e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061ee:	f042 0220 	orr.w	r2, r2, #32
 80061f2:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80061f4:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80061f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80061fa:	e741      	b.n	8006080 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	6959      	ldr	r1, [r3, #20]
 8006200:	0748      	lsls	r0, r1, #29
 8006202:	d5e8      	bpl.n	80061d6 <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006204:	6819      	ldr	r1, [r3, #0]
 8006206:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800620a:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	7053      	strb	r3, [r2, #1]
 8006210:	e7b3      	b.n	800617a <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006212:	4632      	mov	r2, r6
 8006214:	4639      	mov	r1, r7
 8006216:	4620      	mov	r0, r4
 8006218:	f7ff fd78 	bl	8005d0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800621c:	2800      	cmp	r0, #0
 800621e:	f47f af2f 	bne.w	8006080 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006228:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800622a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800622c:	1c53      	adds	r3, r2, #1
 800622e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006230:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006232:	3b01      	subs	r3, #1
 8006234:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006238:	3b01      	subs	r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	6959      	ldr	r1, [r3, #20]
 8006242:	0749      	lsls	r1, r1, #29
 8006244:	f57f af2f 	bpl.w	80060a6 <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	7053      	strb	r3, [r2, #1]
 800624c:	e775      	b.n	800613a <HAL_I2C_Mem_Read+0x156>
 800624e:	bf00      	nop
 8006250:	00100002 	.word	0x00100002
 8006254:	ffff0000 	.word	0xffff0000
 8006258:	00010004 	.word	0x00010004
 800625c:	20000000 	.word	0x20000000

08006260 <HAL_I2C_IsDeviceReady>:
{
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	4604      	mov	r4, r0
 8006266:	b085      	sub	sp, #20
 8006268:	461f      	mov	r7, r3
 800626a:	4688      	mov	r8, r1
 800626c:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 800626e:	f7fe fdf9 	bl	8004e64 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006272:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006276:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006278:	2b20      	cmp	r3, #32
 800627a:	d003      	beq.n	8006284 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 800627c:	2002      	movs	r0, #2
}
 800627e:	b005      	add	sp, #20
 8006280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006284:	9000      	str	r0, [sp, #0]
 8006286:	2319      	movs	r3, #25
 8006288:	2201      	movs	r2, #1
 800628a:	4620      	mov	r0, r4
 800628c:	494a      	ldr	r1, [pc, #296]	; (80063b8 <HAL_I2C_IsDeviceReady+0x158>)
 800628e:	f7ff fb8d 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8006292:	2800      	cmp	r0, #0
 8006294:	d1f2      	bne.n	800627c <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8006296:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d0ee      	beq.n	800627c <HAL_I2C_IsDeviceReady+0x1c>
 800629e:	2301      	movs	r3, #1
 80062a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062a4:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a6:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062a8:	681a      	ldr	r2, [r3, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062aa:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80063b8 <HAL_I2C_IsDeviceReady+0x158>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062ae:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80062b0:	bf58      	it	pl
 80062b2:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062b4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 80062b8:	bf5c      	itt	pl
 80062ba:	f042 0201 	orrpl.w	r2, r2, #1
 80062be:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062c6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80062c8:	2324      	movs	r3, #36	; 0x24
 80062ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062ce:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d0:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062d2:	62e3      	str	r3, [r4, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062d4:	6822      	ldr	r2, [r4, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062da:	6813      	ldr	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80062dc:	4620      	mov	r0, r4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e2:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80062e4:	463b      	mov	r3, r7
 80062e6:	2200      	movs	r2, #0
 80062e8:	9500      	str	r5, [sp, #0]
 80062ea:	f7ff fb5f 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	b138      	cbz	r0, 8006302 <HAL_I2C_IsDeviceReady+0xa2>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	05db      	lsls	r3, r3, #23
 80062f6:	d502      	bpl.n	80062fe <HAL_I2C_IsDeviceReady+0x9e>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062fc:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80062fe:	2003      	movs	r0, #3
 8006300:	e7bd      	b.n	800627e <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006302:	f8c3 8010 	str.w	r8, [r3, #16]
      tickstart = HAL_GetTick();
 8006306:	f7fe fdad 	bl	8004e64 <HAL_GetTick>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800630a:	f04f 09a0 	mov.w	r9, #160	; 0xa0
      tickstart = HAL_GetTick();
 800630e:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006314:	695b      	ldr	r3, [r3, #20]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006316:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800631a:	f3c3 2380 	ubfx	r3, r3, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800631e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8006322:	29a0      	cmp	r1, #160	; 0xa0
 8006324:	d001      	beq.n	800632a <HAL_I2C_IsDeviceReady+0xca>
 8006326:	4313      	orrs	r3, r2
 8006328:	d01d      	beq.n	8006366 <HAL_I2C_IsDeviceReady+0x106>
      hi2c->State = HAL_I2C_STATE_READY;
 800632a:	f04f 0920 	mov.w	r9, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800632e:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8006330:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006334:	695a      	ldr	r2, [r3, #20]
 8006336:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006342:	d025      	beq.n	8006390 <HAL_I2C_IsDeviceReady+0x130>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006344:	2200      	movs	r2, #0
 8006346:	9203      	str	r2, [sp, #12]
 8006348:	695a      	ldr	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800634a:	4620      	mov	r0, r4
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634c:	9203      	str	r2, [sp, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006350:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006352:	9303      	str	r3, [sp, #12]
 8006354:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006356:	4918      	ldr	r1, [pc, #96]	; (80063b8 <HAL_I2C_IsDeviceReady+0x158>)
 8006358:	2319      	movs	r3, #25
 800635a:	9500      	str	r5, [sp, #0]
 800635c:	f7ff fb26 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 8006360:	b188      	cbz	r0, 8006386 <HAL_I2C_IsDeviceReady+0x126>
    return HAL_ERROR;
 8006362:	2001      	movs	r0, #1
 8006364:	e78b      	b.n	800627e <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fe fd7d 	bl	8004e64 <HAL_GetTick>
 800636a:	1b40      	subs	r0, r0, r5
 800636c:	42b8      	cmp	r0, r7
 800636e:	d800      	bhi.n	8006372 <HAL_I2C_IsDeviceReady+0x112>
 8006370:	b90f      	cbnz	r7, 8006376 <HAL_I2C_IsDeviceReady+0x116>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006372:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800637a:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800637c:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006380:	f3c3 2380 	ubfx	r3, r3, #10, #1
 8006384:	e7cb      	b.n	800631e <HAL_I2C_IsDeviceReady+0xbe>
        hi2c->State = HAL_I2C_STATE_READY;
 8006386:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800638a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 800638e:	e776      	b.n	800627e <HAL_I2C_IsDeviceReady+0x1e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006394:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006398:	4620      	mov	r0, r4
 800639a:	2319      	movs	r3, #25
 800639c:	2201      	movs	r2, #1
 800639e:	9500      	str	r5, [sp, #0]
 80063a0:	f7ff fb04 	bl	80059ac <I2C_WaitOnFlagUntilTimeout>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d1dc      	bne.n	8006362 <HAL_I2C_IsDeviceReady+0x102>
      I2C_Trials++;
 80063a8:	3601      	adds	r6, #1
    while (I2C_Trials < Trials);
 80063aa:	4556      	cmp	r6, sl
 80063ac:	d392      	bcc.n	80062d4 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 80063ae:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80063b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80063b6:	e7d4      	b.n	8006362 <HAL_I2C_IsDeviceReady+0x102>
 80063b8:	00100002 	.word	0x00100002
 80063bc:	ffff0000 	.word	0xffff0000

080063c0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80063c0:	2201      	movs	r2, #1
 80063c2:	4b01      	ldr	r3, [pc, #4]	; (80063c8 <HAL_PWR_EnableBkUpAccess+0x8>)
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	4770      	bx	lr
 80063c8:	420e0000 	.word	0x420e0000

080063cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063d0:	4605      	mov	r5, r0
 80063d2:	b338      	cbz	r0, 8006424 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d4:	6803      	ldr	r3, [r0, #0]
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d410      	bmi.n	80063fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	079f      	lsls	r7, r3, #30
 80063de:	d45e      	bmi.n	800649e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	0719      	lsls	r1, r3, #28
 80063e4:	f100 8095 	bmi.w	8006512 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	075a      	lsls	r2, r3, #29
 80063ec:	f100 80c1 	bmi.w	8006572 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f0:	69e8      	ldr	r0, [r5, #28]
 80063f2:	2800      	cmp	r0, #0
 80063f4:	f040 812c 	bne.w	8006650 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80063f8:	2000      	movs	r0, #0
 80063fa:	e029      	b.n	8006450 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063fc:	4c90      	ldr	r4, [pc, #576]	; (8006640 <HAL_RCC_OscConfig+0x274>)
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	f003 030c 	and.w	r3, r3, #12
 8006404:	2b04      	cmp	r3, #4
 8006406:	d007      	beq.n	8006418 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	f003 030c 	and.w	r3, r3, #12
 800640e:	2b08      	cmp	r3, #8
 8006410:	d10a      	bne.n	8006428 <HAL_RCC_OscConfig+0x5c>
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	03de      	lsls	r6, r3, #15
 8006416:	d507      	bpl.n	8006428 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	039c      	lsls	r4, r3, #14
 800641c:	d5dd      	bpl.n	80063da <HAL_RCC_OscConfig+0xe>
 800641e:	686b      	ldr	r3, [r5, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1da      	bne.n	80063da <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006424:	2001      	movs	r0, #1
 8006426:	e013      	b.n	8006450 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006428:	686b      	ldr	r3, [r5, #4]
 800642a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642e:	d112      	bne.n	8006456 <HAL_RCC_OscConfig+0x8a>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006436:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006438:	f7fe fd14 	bl	8004e64 <HAL_GetTick>
 800643c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	0398      	lsls	r0, r3, #14
 8006442:	d4ca      	bmi.n	80063da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fe fd0e 	bl	8004e64 <HAL_GetTick>
 8006448:	1b80      	subs	r0, r0, r6
 800644a:	2864      	cmp	r0, #100	; 0x64
 800644c:	d9f7      	bls.n	800643e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800644e:	2003      	movs	r0, #3
}
 8006450:	b002      	add	sp, #8
 8006452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006456:	b99b      	cbnz	r3, 8006480 <HAL_RCC_OscConfig+0xb4>
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006466:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006468:	f7fe fcfc 	bl	8004e64 <HAL_GetTick>
 800646c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	0399      	lsls	r1, r3, #14
 8006472:	d5b2      	bpl.n	80063da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006474:	f7fe fcf6 	bl	8004e64 <HAL_GetTick>
 8006478:	1b80      	subs	r0, r0, r6
 800647a:	2864      	cmp	r0, #100	; 0x64
 800647c:	d9f7      	bls.n	800646e <HAL_RCC_OscConfig+0xa2>
 800647e:	e7e6      	b.n	800644e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	d103      	bne.n	8006490 <HAL_RCC_OscConfig+0xc4>
 8006488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800648c:	6023      	str	r3, [r4, #0]
 800648e:	e7cf      	b.n	8006430 <HAL_RCC_OscConfig+0x64>
 8006490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800649c:	e7cb      	b.n	8006436 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800649e:	4c68      	ldr	r4, [pc, #416]	; (8006640 <HAL_RCC_OscConfig+0x274>)
 80064a0:	6863      	ldr	r3, [r4, #4]
 80064a2:	f013 0f0c 	tst.w	r3, #12
 80064a6:	d007      	beq.n	80064b8 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	f003 030c 	and.w	r3, r3, #12
 80064ae:	2b08      	cmp	r3, #8
 80064b0:	d110      	bne.n	80064d4 <HAL_RCC_OscConfig+0x108>
 80064b2:	6863      	ldr	r3, [r4, #4]
 80064b4:	03da      	lsls	r2, r3, #15
 80064b6:	d40d      	bmi.n	80064d4 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	079b      	lsls	r3, r3, #30
 80064bc:	d502      	bpl.n	80064c4 <HAL_RCC_OscConfig+0xf8>
 80064be:	692b      	ldr	r3, [r5, #16]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d1af      	bne.n	8006424 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	696a      	ldr	r2, [r5, #20]
 80064c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	e785      	b.n	80063e0 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064d4:	692a      	ldr	r2, [r5, #16]
 80064d6:	4b5b      	ldr	r3, [pc, #364]	; (8006644 <HAL_RCC_OscConfig+0x278>)
 80064d8:	b16a      	cbz	r2, 80064f6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064de:	f7fe fcc1 	bl	8004e64 <HAL_GetTick>
 80064e2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	079f      	lsls	r7, r3, #30
 80064e8:	d4ec      	bmi.n	80064c4 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064ea:	f7fe fcbb 	bl	8004e64 <HAL_GetTick>
 80064ee:	1b80      	subs	r0, r0, r6
 80064f0:	2802      	cmp	r0, #2
 80064f2:	d9f7      	bls.n	80064e4 <HAL_RCC_OscConfig+0x118>
 80064f4:	e7ab      	b.n	800644e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80064f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064f8:	f7fe fcb4 	bl	8004e64 <HAL_GetTick>
 80064fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0798      	lsls	r0, r3, #30
 8006502:	f57f af6d 	bpl.w	80063e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006506:	f7fe fcad 	bl	8004e64 <HAL_GetTick>
 800650a:	1b80      	subs	r0, r0, r6
 800650c:	2802      	cmp	r0, #2
 800650e:	d9f6      	bls.n	80064fe <HAL_RCC_OscConfig+0x132>
 8006510:	e79d      	b.n	800644e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006512:	69aa      	ldr	r2, [r5, #24]
 8006514:	4e4a      	ldr	r6, [pc, #296]	; (8006640 <HAL_RCC_OscConfig+0x274>)
 8006516:	4b4b      	ldr	r3, [pc, #300]	; (8006644 <HAL_RCC_OscConfig+0x278>)
 8006518:	b1e2      	cbz	r2, 8006554 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800651a:	2201      	movs	r2, #1
 800651c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006520:	f7fe fca0 	bl	8004e64 <HAL_GetTick>
 8006524:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006526:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006528:	079b      	lsls	r3, r3, #30
 800652a:	d50d      	bpl.n	8006548 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800652c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006530:	4b45      	ldr	r3, [pc, #276]	; (8006648 <HAL_RCC_OscConfig+0x27c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	fbb3 f3f2 	udiv	r3, r3, r2
 8006538:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800653a:	bf00      	nop
  }
  while (Delay --);
 800653c:	9b01      	ldr	r3, [sp, #4]
 800653e:	1e5a      	subs	r2, r3, #1
 8006540:	9201      	str	r2, [sp, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f9      	bne.n	800653a <HAL_RCC_OscConfig+0x16e>
 8006546:	e74f      	b.n	80063e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006548:	f7fe fc8c 	bl	8004e64 <HAL_GetTick>
 800654c:	1b00      	subs	r0, r0, r4
 800654e:	2802      	cmp	r0, #2
 8006550:	d9e9      	bls.n	8006526 <HAL_RCC_OscConfig+0x15a>
 8006552:	e77c      	b.n	800644e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006554:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8006558:	f7fe fc84 	bl	8004e64 <HAL_GetTick>
 800655c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006560:	079f      	lsls	r7, r3, #30
 8006562:	f57f af41 	bpl.w	80063e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006566:	f7fe fc7d 	bl	8004e64 <HAL_GetTick>
 800656a:	1b00      	subs	r0, r0, r4
 800656c:	2802      	cmp	r0, #2
 800656e:	d9f6      	bls.n	800655e <HAL_RCC_OscConfig+0x192>
 8006570:	e76d      	b.n	800644e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006572:	4c33      	ldr	r4, [pc, #204]	; (8006640 <HAL_RCC_OscConfig+0x274>)
 8006574:	69e3      	ldr	r3, [r4, #28]
 8006576:	00d8      	lsls	r0, r3, #3
 8006578:	d424      	bmi.n	80065c4 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800657a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800657c:	69e3      	ldr	r3, [r4, #28]
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006582:	61e3      	str	r3, [r4, #28]
 8006584:	69e3      	ldr	r3, [r4, #28]
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658e:	4e2f      	ldr	r6, [pc, #188]	; (800664c <HAL_RCC_OscConfig+0x280>)
 8006590:	6833      	ldr	r3, [r6, #0]
 8006592:	05d9      	lsls	r1, r3, #23
 8006594:	d518      	bpl.n	80065c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006596:	68eb      	ldr	r3, [r5, #12]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d126      	bne.n	80065ea <HAL_RCC_OscConfig+0x21e>
 800659c:	6a23      	ldr	r3, [r4, #32]
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80065a4:	f7fe fc5e 	bl	8004e64 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80065ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ae:	6a23      	ldr	r3, [r4, #32]
 80065b0:	079b      	lsls	r3, r3, #30
 80065b2:	d53f      	bpl.n	8006634 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	f43f af1b 	beq.w	80063f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ba:	69e3      	ldr	r3, [r4, #28]
 80065bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c0:	61e3      	str	r3, [r4, #28]
 80065c2:	e715      	b.n	80063f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80065c4:	2700      	movs	r7, #0
 80065c6:	e7e2      	b.n	800658e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065c8:	6833      	ldr	r3, [r6, #0]
 80065ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ce:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80065d0:	f7fe fc48 	bl	8004e64 <HAL_GetTick>
 80065d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d6:	6833      	ldr	r3, [r6, #0]
 80065d8:	05da      	lsls	r2, r3, #23
 80065da:	d4dc      	bmi.n	8006596 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065dc:	f7fe fc42 	bl	8004e64 <HAL_GetTick>
 80065e0:	eba0 0008 	sub.w	r0, r0, r8
 80065e4:	2864      	cmp	r0, #100	; 0x64
 80065e6:	d9f6      	bls.n	80065d6 <HAL_RCC_OscConfig+0x20a>
 80065e8:	e731      	b.n	800644e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ea:	b9ab      	cbnz	r3, 8006618 <HAL_RCC_OscConfig+0x24c>
 80065ec:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065f2:	f023 0301 	bic.w	r3, r3, #1
 80065f6:	6223      	str	r3, [r4, #32]
 80065f8:	6a23      	ldr	r3, [r4, #32]
 80065fa:	f023 0304 	bic.w	r3, r3, #4
 80065fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006600:	f7fe fc30 	bl	8004e64 <HAL_GetTick>
 8006604:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006606:	6a23      	ldr	r3, [r4, #32]
 8006608:	0798      	lsls	r0, r3, #30
 800660a:	d5d3      	bpl.n	80065b4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660c:	f7fe fc2a 	bl	8004e64 <HAL_GetTick>
 8006610:	1b80      	subs	r0, r0, r6
 8006612:	4540      	cmp	r0, r8
 8006614:	d9f7      	bls.n	8006606 <HAL_RCC_OscConfig+0x23a>
 8006616:	e71a      	b.n	800644e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006618:	2b05      	cmp	r3, #5
 800661a:	6a23      	ldr	r3, [r4, #32]
 800661c:	d103      	bne.n	8006626 <HAL_RCC_OscConfig+0x25a>
 800661e:	f043 0304 	orr.w	r3, r3, #4
 8006622:	6223      	str	r3, [r4, #32]
 8006624:	e7ba      	b.n	800659c <HAL_RCC_OscConfig+0x1d0>
 8006626:	f023 0301 	bic.w	r3, r3, #1
 800662a:	6223      	str	r3, [r4, #32]
 800662c:	6a23      	ldr	r3, [r4, #32]
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	e7b6      	b.n	80065a2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006634:	f7fe fc16 	bl	8004e64 <HAL_GetTick>
 8006638:	1b80      	subs	r0, r0, r6
 800663a:	4540      	cmp	r0, r8
 800663c:	d9b7      	bls.n	80065ae <HAL_RCC_OscConfig+0x1e2>
 800663e:	e706      	b.n	800644e <HAL_RCC_OscConfig+0x82>
 8006640:	40021000 	.word	0x40021000
 8006644:	42420000 	.word	0x42420000
 8006648:	20000000 	.word	0x20000000
 800664c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006650:	4c2a      	ldr	r4, [pc, #168]	; (80066fc <HAL_RCC_OscConfig+0x330>)
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	f003 030c 	and.w	r3, r3, #12
 8006658:	2b08      	cmp	r3, #8
 800665a:	d03e      	beq.n	80066da <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800665c:	2200      	movs	r2, #0
 800665e:	4b28      	ldr	r3, [pc, #160]	; (8006700 <HAL_RCC_OscConfig+0x334>)
 8006660:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006662:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006664:	d12c      	bne.n	80066c0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8006666:	f7fe fbfd 	bl	8004e64 <HAL_GetTick>
 800666a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	0199      	lsls	r1, r3, #6
 8006670:	d420      	bmi.n	80066b4 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006672:	6a2b      	ldr	r3, [r5, #32]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d105      	bne.n	8006686 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800667a:	6862      	ldr	r2, [r4, #4]
 800667c:	68a9      	ldr	r1, [r5, #8]
 800667e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006682:	430a      	orrs	r2, r1
 8006684:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006686:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006688:	6862      	ldr	r2, [r4, #4]
 800668a:	430b      	orrs	r3, r1
 800668c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006690:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8006692:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006694:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006696:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <HAL_RCC_OscConfig+0x334>)
 8006698:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800669a:	f7fe fbe3 	bl	8004e64 <HAL_GetTick>
 800669e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	019a      	lsls	r2, r3, #6
 80066a4:	f53f aea8 	bmi.w	80063f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fe fbdc 	bl	8004e64 <HAL_GetTick>
 80066ac:	1b40      	subs	r0, r0, r5
 80066ae:	2802      	cmp	r0, #2
 80066b0:	d9f6      	bls.n	80066a0 <HAL_RCC_OscConfig+0x2d4>
 80066b2:	e6cc      	b.n	800644e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b4:	f7fe fbd6 	bl	8004e64 <HAL_GetTick>
 80066b8:	1b80      	subs	r0, r0, r6
 80066ba:	2802      	cmp	r0, #2
 80066bc:	d9d6      	bls.n	800666c <HAL_RCC_OscConfig+0x2a0>
 80066be:	e6c6      	b.n	800644e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80066c0:	f7fe fbd0 	bl	8004e64 <HAL_GetTick>
 80066c4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	019b      	lsls	r3, r3, #6
 80066ca:	f57f ae95 	bpl.w	80063f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ce:	f7fe fbc9 	bl	8004e64 <HAL_GetTick>
 80066d2:	1b40      	subs	r0, r0, r5
 80066d4:	2802      	cmp	r0, #2
 80066d6:	d9f6      	bls.n	80066c6 <HAL_RCC_OscConfig+0x2fa>
 80066d8:	e6b9      	b.n	800644e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066da:	2801      	cmp	r0, #1
 80066dc:	f43f aeb8 	beq.w	8006450 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80066e0:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e2:	6a2a      	ldr	r2, [r5, #32]
 80066e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80066e8:	4291      	cmp	r1, r2
 80066ea:	f47f ae9b 	bne.w	8006424 <HAL_RCC_OscConfig+0x58>
 80066ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f4:	4293      	cmp	r3, r2
 80066f6:	f43f ae7f 	beq.w	80063f8 <HAL_RCC_OscConfig+0x2c>
 80066fa:	e693      	b.n	8006424 <HAL_RCC_OscConfig+0x58>
 80066fc:	40021000 	.word	0x40021000
 8006700:	42420000 	.word	0x42420000

08006704 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8006704:	4a0d      	ldr	r2, [pc, #52]	; (800673c <HAL_RCC_GetSysClockFreq+0x38>)
 8006706:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006708:	f003 010c 	and.w	r1, r3, #12
 800670c:	2908      	cmp	r1, #8
 800670e:	d112      	bne.n	8006736 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006710:	480b      	ldr	r0, [pc, #44]	; (8006740 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006712:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006716:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006718:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800671a:	d509      	bpl.n	8006730 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800671c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006720:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006724:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006726:	4a08      	ldr	r2, [pc, #32]	; (8006748 <HAL_RCC_GetSysClockFreq+0x44>)
 8006728:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800672a:	fbb0 f0f3 	udiv	r0, r0, r3
 800672e:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_GetSysClockFreq+0x48>)
 8006732:	4358      	muls	r0, r3
 8006734:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8006736:	4803      	ldr	r0, [pc, #12]	; (8006744 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000
 8006740:	0800b8f5 	.word	0x0800b8f5
 8006744:	007a1200 	.word	0x007a1200
 8006748:	0800b905 	.word	0x0800b905
 800674c:	003d0900 	.word	0x003d0900

08006750 <HAL_RCC_ClockConfig>:
{
 8006750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006756:	4604      	mov	r4, r0
 8006758:	b910      	cbnz	r0, 8006760 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800675a:	2001      	movs	r0, #1
}
 800675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4a44      	ldr	r2, [pc, #272]	; (8006874 <HAL_RCC_ClockConfig+0x124>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	428b      	cmp	r3, r1
 800676a:	d328      	bcc.n	80067be <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800676c:	6821      	ldr	r1, [r4, #0]
 800676e:	078e      	lsls	r6, r1, #30
 8006770:	d430      	bmi.n	80067d4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006772:	07ca      	lsls	r2, r1, #31
 8006774:	d443      	bmi.n	80067fe <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006776:	4a3f      	ldr	r2, [pc, #252]	; (8006874 <HAL_RCC_ClockConfig+0x124>)
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	f003 0307 	and.w	r3, r3, #7
 800677e:	42ab      	cmp	r3, r5
 8006780:	d865      	bhi.n	800684e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	4d3c      	ldr	r5, [pc, #240]	; (8006878 <HAL_RCC_ClockConfig+0x128>)
 8006786:	f012 0f04 	tst.w	r2, #4
 800678a:	d16c      	bne.n	8006866 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678c:	0713      	lsls	r3, r2, #28
 800678e:	d506      	bpl.n	800679e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006790:	686b      	ldr	r3, [r5, #4]
 8006792:	6922      	ldr	r2, [r4, #16]
 8006794:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006798:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800679c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800679e:	f7ff ffb1 	bl	8006704 <HAL_RCC_GetSysClockFreq>
 80067a2:	686b      	ldr	r3, [r5, #4]
 80067a4:	4a35      	ldr	r2, [pc, #212]	; (800687c <HAL_RCC_ClockConfig+0x12c>)
 80067a6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80067aa:	5cd3      	ldrb	r3, [r2, r3]
 80067ac:	40d8      	lsrs	r0, r3
 80067ae:	4b34      	ldr	r3, [pc, #208]	; (8006880 <HAL_RCC_ClockConfig+0x130>)
 80067b0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80067b2:	4b34      	ldr	r3, [pc, #208]	; (8006884 <HAL_RCC_ClockConfig+0x134>)
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f7fd f84d 	bl	8003854 <HAL_InitTick>
  return HAL_OK;
 80067ba:	2000      	movs	r0, #0
 80067bc:	e7ce      	b.n	800675c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	f023 0307 	bic.w	r3, r3, #7
 80067c4:	430b      	orrs	r3, r1
 80067c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c8:	6813      	ldr	r3, [r2, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	428b      	cmp	r3, r1
 80067d0:	d1c3      	bne.n	800675a <HAL_RCC_ClockConfig+0xa>
 80067d2:	e7cb      	b.n	800676c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d4:	4b28      	ldr	r3, [pc, #160]	; (8006878 <HAL_RCC_ClockConfig+0x128>)
 80067d6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067da:	bf1e      	ittt	ne
 80067dc:	685a      	ldrne	r2, [r3, #4]
 80067de:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80067e2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e6:	bf42      	ittt	mi
 80067e8:	685a      	ldrmi	r2, [r3, #4]
 80067ea:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80067ee:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	68a0      	ldr	r0, [r4, #8]
 80067f4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80067f8:	4302      	orrs	r2, r0
 80067fa:	605a      	str	r2, [r3, #4]
 80067fc:	e7b9      	b.n	8006772 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	4e1d      	ldr	r6, [pc, #116]	; (8006878 <HAL_RCC_ClockConfig+0x128>)
 8006802:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006804:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006806:	d11a      	bne.n	800683e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006808:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800680c:	d0a5      	beq.n	800675a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006810:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006814:	f023 0303 	bic.w	r3, r3, #3
 8006818:	4313      	orrs	r3, r2
 800681a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800681c:	f7fe fb22 	bl	8004e64 <HAL_GetTick>
 8006820:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006822:	6873      	ldr	r3, [r6, #4]
 8006824:	6862      	ldr	r2, [r4, #4]
 8006826:	f003 030c 	and.w	r3, r3, #12
 800682a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800682e:	d0a2      	beq.n	8006776 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006830:	f7fe fb18 	bl	8004e64 <HAL_GetTick>
 8006834:	1bc0      	subs	r0, r0, r7
 8006836:	4540      	cmp	r0, r8
 8006838:	d9f3      	bls.n	8006822 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800683a:	2003      	movs	r0, #3
 800683c:	e78e      	b.n	800675c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800683e:	2a02      	cmp	r2, #2
 8006840:	d102      	bne.n	8006848 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006842:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006846:	e7e1      	b.n	800680c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006848:	f013 0f02 	tst.w	r3, #2
 800684c:	e7de      	b.n	800680c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800684e:	6813      	ldr	r3, [r2, #0]
 8006850:	f023 0307 	bic.w	r3, r3, #7
 8006854:	432b      	orrs	r3, r5
 8006856:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	42ab      	cmp	r3, r5
 8006860:	f47f af7b 	bne.w	800675a <HAL_RCC_ClockConfig+0xa>
 8006864:	e78d      	b.n	8006782 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006866:	686b      	ldr	r3, [r5, #4]
 8006868:	68e1      	ldr	r1, [r4, #12]
 800686a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800686e:	430b      	orrs	r3, r1
 8006870:	606b      	str	r3, [r5, #4]
 8006872:	e78b      	b.n	800678c <HAL_RCC_ClockConfig+0x3c>
 8006874:	40022000 	.word	0x40022000
 8006878:	40021000 	.word	0x40021000
 800687c:	0800b8dd 	.word	0x0800b8dd
 8006880:	20000000 	.word	0x20000000
 8006884:	20000008 	.word	0x20000008

08006888 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <HAL_RCC_GetPCLK1Freq+0x14>)
 800688a:	4a05      	ldr	r2, [pc, #20]	; (80068a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006892:	5cd3      	ldrb	r3, [r2, r3]
 8006894:	4a03      	ldr	r2, [pc, #12]	; (80068a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006896:	6810      	ldr	r0, [r2, #0]
}
 8006898:	40d8      	lsrs	r0, r3
 800689a:	4770      	bx	lr
 800689c:	40021000 	.word	0x40021000
 80068a0:	0800b8ed 	.word	0x0800b8ed
 80068a4:	20000000 	.word	0x20000000

080068a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80068aa:	4a05      	ldr	r2, [pc, #20]	; (80068c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80068b2:	5cd3      	ldrb	r3, [r2, r3]
 80068b4:	4a03      	ldr	r2, [pc, #12]	; (80068c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80068b6:	6810      	ldr	r0, [r2, #0]
}
 80068b8:	40d8      	lsrs	r0, r3
 80068ba:	4770      	bx	lr
 80068bc:	40021000 	.word	0x40021000
 80068c0:	0800b8ed 	.word	0x0800b8ed
 80068c4:	20000000 	.word	0x20000000

080068c8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068c8:	230f      	movs	r3, #15
 80068ca:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <HAL_RCC_GetClockConfig+0x34>)
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	f002 0203 	and.w	r2, r2, #3
 80068d4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80068dc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80068e4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	08db      	lsrs	r3, r3, #3
 80068ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ee:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <HAL_RCC_GetClockConfig+0x38>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	600b      	str	r3, [r1, #0]
}
 80068fa:	4770      	bx	lr
 80068fc:	40021000 	.word	0x40021000
 8006900:	40022000 	.word	0x40022000

08006904 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006904:	6803      	ldr	r3, [r0, #0]
{
 8006906:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800690a:	07d9      	lsls	r1, r3, #31
{
 800690c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800690e:	d521      	bpl.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006910:	4c36      	ldr	r4, [pc, #216]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006912:	69e3      	ldr	r3, [r4, #28]
 8006914:	00da      	lsls	r2, r3, #3
 8006916:	d433      	bmi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006918:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800691a:	69e3      	ldr	r3, [r4, #28]
 800691c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006920:	61e3      	str	r3, [r4, #28]
 8006922:	69e3      	ldr	r3, [r4, #28]
 8006924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800692c:	4f30      	ldr	r7, [pc, #192]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	05db      	lsls	r3, r3, #23
 8006932:	d527      	bpl.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006934:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006936:	686a      	ldr	r2, [r5, #4]
 8006938:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800693c:	d136      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693e:	6a23      	ldr	r3, [r4, #32]
 8006940:	686a      	ldr	r2, [r5, #4]
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	4313      	orrs	r3, r2
 8006948:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800694a:	b11e      	cbz	r6, 8006954 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694c:	69e3      	ldr	r3, [r4, #28]
 800694e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006952:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006954:	6828      	ldr	r0, [r5, #0]
 8006956:	0783      	lsls	r3, r0, #30
 8006958:	d506      	bpl.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800695a:	4924      	ldr	r1, [pc, #144]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800695c:	68ab      	ldr	r3, [r5, #8]
 800695e:	684a      	ldr	r2, [r1, #4]
 8006960:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006964:	431a      	orrs	r2, r3
 8006966:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006968:	f010 0010 	ands.w	r0, r0, #16
 800696c:	d01b      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800696e:	4a1f      	ldr	r2, [pc, #124]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006970:	68e9      	ldr	r1, [r5, #12]
 8006972:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006974:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006976:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800697a:	430b      	orrs	r3, r1
 800697c:	6053      	str	r3, [r2, #4]
 800697e:	e012      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8006980:	2600      	movs	r6, #0
 8006982:	e7d3      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800698c:	f7fe fa6a 	bl	8004e64 <HAL_GetTick>
 8006990:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	05d8      	lsls	r0, r3, #23
 8006996:	d4cd      	bmi.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006998:	f7fe fa64 	bl	8004e64 <HAL_GetTick>
 800699c:	eba0 0008 	sub.w	r0, r0, r8
 80069a0:	2864      	cmp	r0, #100	; 0x64
 80069a2:	d9f6      	bls.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 80069a4:	2003      	movs	r0, #3
}
 80069a6:	b002      	add	sp, #8
 80069a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d0c4      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80069b4:	2001      	movs	r0, #1
 80069b6:	4a0f      	ldr	r2, [pc, #60]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80069ba:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069be:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069c4:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80069c8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80069ca:	07d9      	lsls	r1, r3, #31
 80069cc:	d5b7      	bpl.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80069ce:	f7fe fa49 	bl	8004e64 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80069d6:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d8:	6a23      	ldr	r3, [r4, #32]
 80069da:	079a      	lsls	r2, r3, #30
 80069dc:	d4af      	bmi.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069de:	f7fe fa41 	bl	8004e64 <HAL_GetTick>
 80069e2:	1bc0      	subs	r0, r0, r7
 80069e4:	4540      	cmp	r0, r8
 80069e6:	d9f7      	bls.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069e8:	e7dc      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80069ea:	bf00      	nop
 80069ec:	40021000 	.word	0x40021000
 80069f0:	40007000 	.word	0x40007000
 80069f4:	42420000 	.word	0x42420000

080069f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80069f8:	2802      	cmp	r0, #2
{
 80069fa:	b508      	push	{r3, lr}
  switch (PeriphClk)
 80069fc:	d044      	beq.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80069fe:	2810      	cmp	r0, #16
 8006a00:	d003      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8006a02:	2801      	cmp	r0, #1
 8006a04:	d022      	beq.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8006a06:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8006a08:	e034      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8006a0a:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a0c:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8006a14:	d02e      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a16:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8006a1a:	4822      	ldr	r0, [pc, #136]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a1c:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a1e:	bf48      	it	mi
 8006a20:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a22:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a24:	bf41      	itttt	mi
 8006a26:	4920      	ldrmi	r1, [pc, #128]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006a28:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006a2c:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006a2e:	4a1f      	ldrmi	r2, [pc, #124]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a30:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006a32:	bf4c      	ite	mi
 8006a34:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a38:	4a1d      	ldrpl	r2, [pc, #116]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a3a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a3c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006a40:	d418      	bmi.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8006a42:	2303      	movs	r3, #3
 8006a44:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006a46:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8006a4a:	e013      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a4c:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8006a50:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a52:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a54:	4019      	ands	r1, r3
 8006a56:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8006a5a:	d01e      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a64:	d107      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8006a66:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a6a:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8006a6c:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8006a70:	bf18      	it	ne
 8006a72:	4618      	movne	r0, r3
}
 8006a74:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a7a:	d1c4      	bne.n	8006a06 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8006a7c:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8006a7e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006a82:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8006a86:	e7f3      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006a88:	f7ff ff0e 	bl	80068a8 <HAL_RCC_GetPCLK2Freq>
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8006a94:	3301      	adds	r3, #1
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	e7d5      	b.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8006a9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a9e:	e7e9      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	0800b907 	.word	0x0800b907
 8006aa8:	0800b917 	.word	0x0800b917
 8006aac:	007a1200 	.word	0x007a1200
 8006ab0:	003d0900 	.word	0x003d0900

08006ab4 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006ab4:	6803      	ldr	r3, [r0, #0]
{
 8006ab6:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006ab8:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006aba:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006abc:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8006abe:	b295      	uxth	r5, r2
 8006ac0:	b28c      	uxth	r4, r1
 8006ac2:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006ac4:	bf17      	itett	ne
 8006ac6:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006ac8:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006aca:	b280      	uxthne	r0, r0
 8006acc:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006ad0:	bf08      	it	eq
 8006ad2:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8006ad6:	bd30      	pop	{r4, r5, pc}

08006ad8 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006ad8:	6803      	ldr	r3, [r0, #0]
 8006ada:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8006ade:	b29b      	uxth	r3, r3
}
 8006ae0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006ae4:	4770      	bx	lr

08006ae6 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8006ae6:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006ae8:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8006aea:	f000 000f 	and.w	r0, r0, #15
 8006aee:	fb02 0003 	mla	r0, r2, r3, r0
}
 8006af2:	b2c0      	uxtb	r0, r0
 8006af4:	4770      	bx	lr

08006af6 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006af6:	b530      	push	{r4, r5, lr}
  year = 2000U + nYear;

  if (nMonth < 3U)
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006af8:	2517      	movs	r5, #23
 8006afa:	2309      	movs	r3, #9
 8006afc:	434d      	muls	r5, r1
  if (nMonth < 3U)
 8006afe:	2902      	cmp	r1, #2
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006b00:	fbb5 f5f3 	udiv	r5, r5, r3
  year = 2000U + nYear;
 8006b04:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  if (nMonth < 3U)
 8006b08:	d817      	bhi.n	8006b3a <RTC_WeekDayNum+0x44>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006b0a:	f200 73cf 	addw	r3, r0, #1999	; 0x7cf
 8006b0e:	1d10      	adds	r0, r2, #4
 8006b10:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006b14:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b18:	4420      	add	r0, r4
 8006b1a:	4428      	add	r0, r5
 8006b1c:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 8006b20:	4410      	add	r0, r2
 8006b22:	2264      	movs	r2, #100	; 0x64
 8006b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b28:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006b2a:	2307      	movs	r3, #7
 8006b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b30:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006b34:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8006b36:	b2c0      	uxtb	r0, r0
 8006b38:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006b3a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006b3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006b42:	1c90      	adds	r0, r2, #2
 8006b44:	4420      	add	r0, r4
 8006b46:	4428      	add	r0, r5
 8006b48:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8006b4c:	4418      	add	r0, r3
 8006b4e:	2364      	movs	r3, #100	; 0x64
 8006b50:	fbb4 f4f3 	udiv	r4, r4, r3
 8006b54:	1b00      	subs	r0, r0, r4
 8006b56:	e7e8      	b.n	8006b2a <RTC_WeekDayNum+0x34>

08006b58 <RTC_EnterInitMode>:
{
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8006b5c:	f7fe f982 	bl	8004e64 <HAL_GetTick>
 8006b60:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	0692      	lsls	r2, r2, #26
 8006b68:	d505      	bpl.n	8006b76 <RTC_EnterInitMode+0x1e>
  return HAL_OK;
 8006b6a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	f042 0210 	orr.w	r2, r2, #16
 8006b72:	605a      	str	r2, [r3, #4]
}
 8006b74:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006b76:	f7fe f975 	bl	8004e64 <HAL_GetTick>
 8006b7a:	1b40      	subs	r0, r0, r5
 8006b7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006b80:	d9ef      	bls.n	8006b62 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8006b82:	2003      	movs	r0, #3
 8006b84:	e7f6      	b.n	8006b74 <RTC_EnterInitMode+0x1c>

08006b86 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b86:	6802      	ldr	r2, [r0, #0]
{
 8006b88:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8a:	6853      	ldr	r3, [r2, #4]
{
 8006b8c:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8e:	f023 0310 	bic.w	r3, r3, #16
 8006b92:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006b94:	f7fe f966 	bl	8004e64 <HAL_GetTick>
 8006b98:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	069b      	lsls	r3, r3, #26
 8006ba0:	d501      	bpl.n	8006ba6 <RTC_ExitInitMode+0x20>
  return HAL_OK;
 8006ba2:	2000      	movs	r0, #0
}
 8006ba4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006ba6:	f7fe f95d 	bl	8004e64 <HAL_GetTick>
 8006baa:	1b40      	subs	r0, r0, r5
 8006bac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006bb0:	d9f3      	bls.n	8006b9a <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8006bb2:	2003      	movs	r0, #3
 8006bb4:	e7f6      	b.n	8006ba4 <RTC_ExitInitMode+0x1e>

08006bb6 <RTC_WriteTimeCounter>:
{
 8006bb6:	b538      	push	{r3, r4, r5, lr}
 8006bb8:	4605      	mov	r5, r0
 8006bba:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bbc:	f7ff ffcc 	bl	8006b58 <RTC_EnterInitMode>
 8006bc0:	b958      	cbnz	r0, 8006bda <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006bc6:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006bc8:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006bca:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006bcc:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006bce:	f7ff ffda 	bl	8006b86 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006bd2:	3800      	subs	r0, #0
 8006bd4:	bf18      	it	ne
 8006bd6:	2001      	movne	r0, #1
}
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e7fc      	b.n	8006bd8 <RTC_WriteTimeCounter+0x22>

08006bde <RTC_WriteAlarmCounter>:
{
 8006bde:	b538      	push	{r3, r4, r5, lr}
 8006be0:	4605      	mov	r5, r0
 8006be2:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006be4:	f7ff ffb8 	bl	8006b58 <RTC_EnterInitMode>
 8006be8:	b958      	cbnz	r0, 8006c02 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006bee:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006bf0:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006bf2:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006bf4:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006bf6:	f7ff ffc6 	bl	8006b86 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8006bfa:	3800      	subs	r0, #0
 8006bfc:	bf18      	it	ne
 8006bfe:	2001      	movne	r0, #1
}
 8006c00:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8006c02:	2001      	movs	r0, #1
 8006c04:	e7fc      	b.n	8006c00 <RTC_WriteAlarmCounter+0x22>

08006c06 <HAL_RTC_SetTime>:
{
 8006c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 8006c08:	4604      	mov	r4, r0
 8006c0a:	b1e0      	cbz	r0, 8006c46 <HAL_RTC_SetTime+0x40>
 8006c0c:	b1d9      	cbz	r1, 8006c46 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8006c0e:	7c03      	ldrb	r3, [r0, #16]
 8006c10:	2502      	movs	r5, #2
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d045      	beq.n	8006ca2 <HAL_RTC_SetTime+0x9c>
 8006c16:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c18:	7445      	strb	r5, [r0, #17]
  __HAL_LOCK(hrtc);
 8006c1a:	7403      	strb	r3, [r0, #16]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006c1c:	7808      	ldrb	r0, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006c1e:	784e      	ldrb	r6, [r1, #1]
                              ((uint32_t)sTime->Seconds));
 8006c20:	788f      	ldrb	r7, [r1, #2]
  if (Format == RTC_FORMAT_BIN)
 8006c22:	b992      	cbnz	r2, 8006c4a <HAL_RTC_SetTime+0x44>
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006c24:	233c      	movs	r3, #60	; 0x3c
 8006c26:	435e      	muls	r6, r3
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006c28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006c2c:	fb03 6600 	mla	r6, r3, r0, r6
 8006c30:	443e      	add	r6, r7
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c32:	4631      	mov	r1, r6
 8006c34:	4620      	mov	r0, r4
 8006c36:	f7ff ffbe 	bl	8006bb6 <RTC_WriteTimeCounter>
 8006c3a:	4605      	mov	r5, r0
 8006c3c:	b1b8      	cbz	r0, 8006c6e <HAL_RTC_SetTime+0x68>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c3e:	2304      	movs	r3, #4
 8006c40:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006c42:	2300      	movs	r3, #0
 8006c44:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006c46:	2501      	movs	r5, #1
 8006c48:	e02b      	b.n	8006ca2 <HAL_RTC_SetTime+0x9c>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c4a:	f7ff ff4c 	bl	8006ae6 <RTC_Bcd2ToByte>
 8006c4e:	4605      	mov	r5, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff ff48 	bl	8006ae6 <RTC_Bcd2ToByte>
 8006c56:	233c      	movs	r3, #60	; 0x3c
 8006c58:	fb03 f100 	mul.w	r1, r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006c60:	4638      	mov	r0, r7
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c62:	fb03 1105 	mla	r1, r3, r5, r1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006c66:	f7ff ff3e 	bl	8006ae6 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006c6a:	1846      	adds	r6, r0, r1
 8006c6c:	e7e1      	b.n	8006c32 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006c6e:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c70:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006c72:	6853      	ldr	r3, [r2, #4]
 8006c74:	f023 0305 	bic.w	r3, r3, #5
 8006c78:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c7a:	f7ff ff2d 	bl	8006ad8 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006c7e:	4286      	cmp	r6, r0
 8006c80:	d90b      	bls.n	8006c9a <HAL_RTC_SetTime+0x94>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006c82:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006c86:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f7ff ffa7 	bl	8006bde <RTC_WriteAlarmCounter>
 8006c90:	b118      	cbz	r0, 8006c9a <HAL_RTC_SetTime+0x94>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c92:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006c94:	7425      	strb	r5, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c96:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006c98:	e7d5      	b.n	8006c46 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	7423      	strb	r3, [r4, #16]
}
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ca8 <HAL_RTC_SetDate>:
{
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 8006cac:	4604      	mov	r4, r0
 8006cae:	b348      	cbz	r0, 8006d04 <HAL_RTC_SetDate+0x5c>
 8006cb0:	b341      	cbz	r1, 8006d04 <HAL_RTC_SetDate+0x5c>
  __HAL_LOCK(hrtc);
 8006cb2:	7c03      	ldrb	r3, [r0, #16]
 8006cb4:	2002      	movs	r0, #2
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d047      	beq.n	8006d4a <HAL_RTC_SetDate+0xa2>
 8006cba:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cbc:	7460      	strb	r0, [r4, #17]
  __HAL_LOCK(hrtc);
 8006cbe:	7423      	strb	r3, [r4, #16]
  if (Format == RTC_FORMAT_BIN)
 8006cc0:	78c8      	ldrb	r0, [r1, #3]
 8006cc2:	bb0a      	cbnz	r2, 8006d08 <HAL_RTC_SetDate+0x60>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006cc4:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006cc6:	784b      	ldrb	r3, [r1, #1]
 8006cc8:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006cca:	788a      	ldrb	r2, [r1, #2]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006ccc:	7b61      	ldrb	r1, [r4, #13]
 8006cce:	7be0      	ldrb	r0, [r4, #15]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006cd0:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006cd2:	f7ff ff10 	bl	8006af6 <RTC_WeekDayNum>
 8006cd6:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006cd8:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7ff feea 	bl	8006ab4 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8006ce0:	4b1a      	ldr	r3, [pc, #104]	; (8006d4c <HAL_RTC_SetDate+0xa4>)
 8006ce2:	4298      	cmp	r0, r3
 8006ce4:	d92d      	bls.n	8006d42 <HAL_RTC_SetDate+0x9a>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006ce6:	4d1a      	ldr	r5, [pc, #104]	; (8006d50 <HAL_RTC_SetDate+0xa8>)
 8006ce8:	fbb0 f2f5 	udiv	r2, r0, r5
 8006cec:	fb05 0512 	mls	r5, r5, r2, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	f7ff ff5f 	bl	8006bb6 <RTC_WriteTimeCounter>
 8006cf8:	4606      	mov	r6, r0
 8006cfa:	b188      	cbz	r0, 8006d20 <HAL_RTC_SetDate+0x78>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8006d00:	2300      	movs	r3, #0
 8006d02:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8006d04:	2001      	movs	r0, #1
 8006d06:	e020      	b.n	8006d4a <HAL_RTC_SetDate+0xa2>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006d08:	f7ff feed 	bl	8006ae6 <RTC_Bcd2ToByte>
 8006d0c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006d0e:	7848      	ldrb	r0, [r1, #1]
 8006d10:	f7ff fee9 	bl	8006ae6 <RTC_Bcd2ToByte>
 8006d14:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006d16:	7888      	ldrb	r0, [r1, #2]
 8006d18:	f7ff fee5 	bl	8006ae6 <RTC_Bcd2ToByte>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	e7d5      	b.n	8006ccc <HAL_RTC_SetDate+0x24>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006d20:	4620      	mov	r0, r4
 8006d22:	f7ff fed9 	bl	8006ad8 <RTC_ReadAlarmCounter>
      if (counter_alarm < counter_time)
 8006d26:	4285      	cmp	r5, r0
 8006d28:	d90b      	bls.n	8006d42 <HAL_RTC_SetDate+0x9a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d2a:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8006d2e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8006d32:	4620      	mov	r0, r4
 8006d34:	f7ff ff53 	bl	8006bde <RTC_WriteAlarmCounter>
 8006d38:	b118      	cbz	r0, 8006d42 <HAL_RTC_SetDate+0x9a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d3a:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8006d3c:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d3e:	7463      	strb	r3, [r4, #17]
          return HAL_ERROR;
 8006d40:	e7e0      	b.n	8006d04 <HAL_RTC_SetDate+0x5c>
  hrtc->State = HAL_RTC_STATE_READY ;
 8006d42:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8006d44:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8006d46:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8006d48:	7420      	strb	r0, [r4, #16]
}
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	00015f8f 	.word	0x00015f8f
 8006d50:	00015180 	.word	0x00015180

08006d54 <HAL_RTC_WaitForSynchro>:
{
 8006d54:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8006d56:	4604      	mov	r4, r0
 8006d58:	b1a8      	cbz	r0, 8006d86 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006d5a:	6802      	ldr	r2, [r0, #0]
 8006d5c:	6853      	ldr	r3, [r2, #4]
 8006d5e:	f023 0308 	bic.w	r3, r3, #8
 8006d62:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8006d64:	f7fe f87e 	bl	8004e64 <HAL_GetTick>
 8006d68:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006d6a:	6823      	ldr	r3, [r4, #0]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	071b      	lsls	r3, r3, #28
 8006d70:	d501      	bpl.n	8006d76 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8006d72:	2000      	movs	r0, #0
}
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006d76:	f7fe f875 	bl	8004e64 <HAL_GetTick>
 8006d7a:	1b40      	subs	r0, r0, r5
 8006d7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006d80:	d9f3      	bls.n	8006d6a <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8006d82:	2003      	movs	r0, #3
 8006d84:	e7f6      	b.n	8006d74 <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8006d86:	2001      	movs	r0, #1
 8006d88:	e7f4      	b.n	8006d74 <HAL_RTC_WaitForSynchro+0x20>
	...

08006d8c <HAL_RTC_Init>:
{
 8006d8c:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8006d8e:	4604      	mov	r4, r0
 8006d90:	b170      	cbz	r0, 8006db0 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d92:	7c43      	ldrb	r3, [r0, #17]
 8006d94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d98:	b913      	cbnz	r3, 8006da0 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8006d9a:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8006d9c:	f7fc fbe0 	bl	8003560 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006da0:	2302      	movs	r3, #2
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006da2:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006da4:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006da6:	f7ff ffd5 	bl	8006d54 <HAL_RTC_WaitForSynchro>
 8006daa:	b118      	cbz	r0, 8006db4 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006dac:	2304      	movs	r3, #4
 8006dae:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8006db0:	2001      	movs	r0, #1
 8006db2:	e02f      	b.n	8006e14 <HAL_RTC_Init+0x88>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006db4:	4620      	mov	r0, r4
 8006db6:	f7ff fecf 	bl	8006b58 <RTC_EnterInitMode>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1f6      	bne.n	8006dac <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006dbe:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006dc0:	68a1      	ldr	r1, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006dc2:	6853      	ldr	r3, [r2, #4]
 8006dc4:	f023 0307 	bic.w	r3, r3, #7
 8006dc8:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <HAL_RTC_Init+0x8c>)
 8006dcc:	b119      	cbz	r1, 8006dd6 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8006dd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006dd8:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8006ddc:	430b      	orrs	r3, r1
 8006dde:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006de0:	6860      	ldr	r0, [r4, #4]
 8006de2:	1c43      	adds	r3, r0, #1
 8006de4:	d105      	bne.n	8006df2 <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006de6:	2001      	movs	r0, #1
 8006de8:	f7ff fe06 	bl	80069f8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d0dd      	beq.n	8006dac <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8006df0:	3801      	subs	r0, #1
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	f3c0 4203 	ubfx	r2, r0, #16, #4
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006df8:	b280      	uxth	r0, r0
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006dfa:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8006dfc:	60d8      	str	r0, [r3, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7ff fec1 	bl	8006b86 <RTC_ExitInitMode>
 8006e04:	2301      	movs	r3, #1
 8006e06:	b110      	cbz	r0, 8006e0e <HAL_RTC_Init+0x82>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006e08:	2204      	movs	r2, #4
 8006e0a:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8006e0c:	e7d0      	b.n	8006db0 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006e0e:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8006e10:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8006e12:	7463      	strb	r3, [r4, #17]
}
 8006e14:	bd10      	pop	{r4, pc}
 8006e16:	bf00      	nop
 8006e18:	40006c00 	.word	0x40006c00

08006e1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e1e:	6a02      	ldr	r2, [r0, #32]
{
 8006e20:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e2e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006e32:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e34:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006e36:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006e3a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e3c:	4d0a      	ldr	r5, [pc, #40]	; (8006e68 <TIM_OC1_SetConfig+0x4c>)
 8006e3e:	42a8      	cmp	r0, r5
 8006e40:	d10b      	bne.n	8006e5a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e42:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e44:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006e48:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e4a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e4e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006e52:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e54:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e58:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e5c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e5e:	684a      	ldr	r2, [r1, #4]
 8006e60:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e62:	6203      	str	r3, [r0, #32]
}
 8006e64:	bd70      	pop	{r4, r5, r6, pc}
 8006e66:	bf00      	nop
 8006e68:	40012c00 	.word	0x40012c00

08006e6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e6c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e6e:	6a02      	ldr	r2, [r0, #32]
{
 8006e70:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e76:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006e82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006e86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e8e:	4d0b      	ldr	r5, [pc, #44]	; (8006ebc <TIM_OC3_SetConfig+0x50>)
 8006e90:	42a8      	cmp	r0, r5
 8006e92:	d10d      	bne.n	8006eb0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e94:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e9e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ea2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006ea6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eac:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eb2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006eb4:	684a      	ldr	r2, [r1, #4]
 8006eb6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb8:	6203      	str	r3, [r0, #32]
}
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	40012c00 	.word	0x40012c00

08006ec0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ec0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec2:	6a02      	ldr	r2, [r0, #32]
{
 8006ec4:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eca:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ecc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ece:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006eda:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8006edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ee0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee4:	4d06      	ldr	r5, [pc, #24]	; (8006f00 <TIM_OC4_SetConfig+0x40>)
 8006ee6:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee8:	bf02      	ittt	eq
 8006eea:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006eec:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ef0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ef6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef8:	684a      	ldr	r2, [r1, #4]
 8006efa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efc:	6203      	str	r3, [r0, #32]
}
 8006efe:	bd30      	pop	{r4, r5, pc}
 8006f00:	40012c00 	.word	0x40012c00

08006f04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006f04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d120      	bne.n	8006f4e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f12:	6803      	ldr	r3, [r0, #0]
 8006f14:	68da      	ldr	r2, [r3, #12]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f1c:	4a0d      	ldr	r2, [pc, #52]	; (8006f54 <HAL_TIM_Base_Start_IT+0x50>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00a      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x34>
 8006f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f26:	d007      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x34>
 8006f28:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <HAL_TIM_Base_Start_IT+0x34>
 8006f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3e:	2a06      	cmp	r2, #6
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	f042 0201 	orr.w	r2, r2, #1
 8006f48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006f4a:	2000      	movs	r0, #0
}
 8006f4c:	4770      	bx	lr
    return HAL_ERROR;
 8006f4e:	2001      	movs	r0, #1
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40012c00 	.word	0x40012c00

08006f58 <HAL_TIM_PWM_MspInit>:
 8006f58:	4770      	bx	lr

08006f5a <HAL_TIM_OC_DelayElapsedCallback>:
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_IC_CaptureCallback>:
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIM_PWM_PulseFinishedCallback>:
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIM_TriggerCallback>:
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f62:	6803      	ldr	r3, [r0, #0]
{
 8006f64:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f66:	691a      	ldr	r2, [r3, #16]
{
 8006f68:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f6a:	0791      	lsls	r1, r2, #30
 8006f6c:	d50e      	bpl.n	8006f8c <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	0792      	lsls	r2, r2, #30
 8006f72:	d50b      	bpl.n	8006f8c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f74:	f06f 0202 	mvn.w	r2, #2
 8006f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	079b      	lsls	r3, r3, #30
 8006f82:	d077      	beq.n	8007074 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006f84:	f7ff ffea 	bl	8006f5c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	0750      	lsls	r0, r2, #29
 8006f92:	d510      	bpl.n	8006fb6 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	0751      	lsls	r1, r2, #29
 8006f98:	d50d      	bpl.n	8006fb6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f9a:	f06f 0204 	mvn.w	r2, #4
 8006f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa4:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006fac:	d068      	beq.n	8007080 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	f7ff ffd5 	bl	8006f5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	0712      	lsls	r2, r2, #28
 8006fbc:	d50f      	bpl.n	8006fde <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	0710      	lsls	r0, r2, #28
 8006fc2:	d50c      	bpl.n	8006fde <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fc4:	f06f 0208 	mvn.w	r2, #8
 8006fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fca:	2204      	movs	r2, #4
 8006fcc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fce:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006fd2:	0799      	lsls	r1, r3, #30
 8006fd4:	d05a      	beq.n	800708c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	f7ff ffc1 	bl	8006f5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	691a      	ldr	r2, [r3, #16]
 8006fe2:	06d2      	lsls	r2, r2, #27
 8006fe4:	d510      	bpl.n	8007008 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	06d0      	lsls	r0, r2, #27
 8006fea:	d50d      	bpl.n	8007008 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fec:	f06f 0210 	mvn.w	r2, #16
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ff6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ffa:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006ffe:	d04b      	beq.n	8007098 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8007000:	f7ff ffac 	bl	8006f5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007004:	2300      	movs	r3, #0
 8007006:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	07d1      	lsls	r1, r2, #31
 800700e:	d508      	bpl.n	8007022 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	07d2      	lsls	r2, r2, #31
 8007014:	d505      	bpl.n	8007022 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007016:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800701a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800701c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800701e:	f7fb fc03 	bl	8002828 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	0610      	lsls	r0, r2, #24
 8007028:	d508      	bpl.n	800703c <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	0611      	lsls	r1, r2, #24
 800702e:	d505      	bpl.n	800703c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007030:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8007034:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007036:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007038:	f000 fab9 	bl	80075ae <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	0652      	lsls	r2, r2, #25
 8007042:	d508      	bpl.n	8007056 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	0650      	lsls	r0, r2, #25
 8007048:	d505      	bpl.n	8007056 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800704e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007050:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007052:	f7ff ff85 	bl	8006f60 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	0691      	lsls	r1, r2, #26
 800705c:	d522      	bpl.n	80070a4 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	0692      	lsls	r2, r2, #26
 8007062:	d51f      	bpl.n	80070a4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007064:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007068:	4620      	mov	r0, r4
}
 800706a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800706e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007070:	f000 ba9c 	b.w	80075ac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007074:	f7ff ff71 	bl	8006f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007078:	4620      	mov	r0, r4
 800707a:	f7ff ff70 	bl	8006f5e <HAL_TIM_PWM_PulseFinishedCallback>
 800707e:	e783      	b.n	8006f88 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007080:	f7ff ff6b 	bl	8006f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	4620      	mov	r0, r4
 8007086:	f7ff ff6a 	bl	8006f5e <HAL_TIM_PWM_PulseFinishedCallback>
 800708a:	e792      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708c:	f7ff ff65 	bl	8006f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	4620      	mov	r0, r4
 8007092:	f7ff ff64 	bl	8006f5e <HAL_TIM_PWM_PulseFinishedCallback>
 8007096:	e7a0      	b.n	8006fda <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007098:	f7ff ff5f 	bl	8006f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709c:	4620      	mov	r0, r4
 800709e:	f7ff ff5e 	bl	8006f5e <HAL_TIM_PWM_PulseFinishedCallback>
 80070a2:	e7af      	b.n	8007004 <HAL_TIM_IRQHandler+0xa2>
}
 80070a4:	bd10      	pop	{r4, pc}
	...

080070a8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80070aa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070ac:	4290      	cmp	r0, r2
 80070ae:	d00a      	beq.n	80070c6 <TIM_Base_SetConfig+0x1e>
 80070b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80070b4:	d007      	beq.n	80070c6 <TIM_Base_SetConfig+0x1e>
 80070b6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80070ba:	4290      	cmp	r0, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_Base_SetConfig+0x1e>
 80070be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070c2:	4290      	cmp	r0, r2
 80070c4:	d115      	bne.n	80070f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80070c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80070cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ce:	4a11      	ldr	r2, [pc, #68]	; (8007114 <TIM_Base_SetConfig+0x6c>)
 80070d0:	4290      	cmp	r0, r2
 80070d2:	d00a      	beq.n	80070ea <TIM_Base_SetConfig+0x42>
 80070d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0x42>
 80070da:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80070de:	4290      	cmp	r0, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0x42>
 80070e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070e6:	4290      	cmp	r0, r2
 80070e8:	d103      	bne.n	80070f2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ea:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f2:	694a      	ldr	r2, [r1, #20]
 80070f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80070fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070fc:	688b      	ldr	r3, [r1, #8]
 80070fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007100:	680b      	ldr	r3, [r1, #0]
 8007102:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <TIM_Base_SetConfig+0x6c>)
 8007106:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8007108:	bf04      	itt	eq
 800710a:	690b      	ldreq	r3, [r1, #16]
 800710c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800710e:	2301      	movs	r3, #1
 8007110:	6143      	str	r3, [r0, #20]
}
 8007112:	4770      	bx	lr
 8007114:	40012c00 	.word	0x40012c00

08007118 <HAL_TIM_Base_Init>:
{
 8007118:	b510      	push	{r4, lr}
  if (htim == NULL)
 800711a:	4604      	mov	r4, r0
 800711c:	b330      	cbz	r0, 800716c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800711e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007122:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007126:	b91b      	cbnz	r3, 8007130 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007128:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800712c:	f7fc fa36 	bl	800359c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007132:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007138:	1d21      	adds	r1, r4, #4
 800713a:	f7ff ffb5 	bl	80070a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800713e:	2301      	movs	r3, #1
  return HAL_OK;
 8007140:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007142:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007146:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800714a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800714e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007152:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800715a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800715e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007166:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800716a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800716c:	2001      	movs	r0, #1
 800716e:	e7fc      	b.n	800716a <HAL_TIM_Base_Init+0x52>

08007170 <HAL_TIM_PWM_Init>:
{
 8007170:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007172:	4604      	mov	r4, r0
 8007174:	b330      	cbz	r0, 80071c4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007176:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800717a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800717e:	b91b      	cbnz	r3, 8007188 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007180:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007184:	f7ff fee8 	bl	8006f58 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800718a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800718c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007190:	1d21      	adds	r1, r4, #4
 8007192:	f7ff ff89 	bl	80070a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007196:	2301      	movs	r3, #1
  return HAL_OK;
 8007198:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800719a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800719e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80071a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80071a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80071aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80071ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80071be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80071c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80071c4:	2001      	movs	r0, #1
 80071c6:	e7fc      	b.n	80071c2 <HAL_TIM_PWM_Init+0x52>

080071c8 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80071c8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ca:	6a02      	ldr	r2, [r0, #32]
{
 80071cc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ce:	f022 0210 	bic.w	r2, r2, #16
 80071d2:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80071d4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80071d6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80071e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071ec:	4d0b      	ldr	r5, [pc, #44]	; (800721c <TIM_OC2_SetConfig+0x54>)
 80071ee:	42a8      	cmp	r0, r5
 80071f0:	d10d      	bne.n	800720e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071fc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007200:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007204:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800720a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800720e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007210:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007212:	684a      	ldr	r2, [r1, #4]
 8007214:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007216:	6203      	str	r3, [r0, #32]
}
 8007218:	bd70      	pop	{r4, r5, r6, pc}
 800721a:	bf00      	nop
 800721c:	40012c00 	.word	0x40012c00

08007220 <HAL_TIM_PWM_ConfigChannel>:
{
 8007220:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8007222:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007226:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8007228:	2b01      	cmp	r3, #1
 800722a:	d050      	beq.n	80072ce <HAL_TIM_PWM_ConfigChannel+0xae>
 800722c:	2301      	movs	r3, #1
  switch (Channel)
 800722e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8007230:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007234:	d03b      	beq.n	80072ae <HAL_TIM_PWM_ConfigChannel+0x8e>
 8007236:	d807      	bhi.n	8007248 <HAL_TIM_PWM_ConfigChannel+0x28>
 8007238:	b1c2      	cbz	r2, 800726c <HAL_TIM_PWM_ConfigChannel+0x4c>
 800723a:	2a04      	cmp	r2, #4
 800723c:	d027      	beq.n	800728e <HAL_TIM_PWM_ConfigChannel+0x6e>
 800723e:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8007240:	2300      	movs	r3, #0
 8007242:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8007246:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8007248:	2a0c      	cmp	r2, #12
 800724a:	d1f8      	bne.n	800723e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800724c:	6800      	ldr	r0, [r0, #0]
 800724e:	f7ff fe37 	bl	8006ec0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007252:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007254:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007256:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800725a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725c:	69c3      	ldr	r3, [r0, #28]
 800725e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007262:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007264:	69c3      	ldr	r3, [r0, #28]
 8007266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800726a:	e02e      	b.n	80072ca <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f7ff fdd5 	bl	8006e1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007272:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007274:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007276:	f043 0308 	orr.w	r3, r3, #8
 800727a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800727c:	6983      	ldr	r3, [r0, #24]
 800727e:	f023 0304 	bic.w	r3, r3, #4
 8007282:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007284:	6983      	ldr	r3, [r0, #24]
 8007286:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007288:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2000      	movs	r0, #0
      break;
 800728c:	e7d8      	b.n	8007240 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800728e:	6800      	ldr	r0, [r0, #0]
 8007290:	f7ff ff9a 	bl	80071c8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007294:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007296:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007298:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800729c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800729e:	6983      	ldr	r3, [r0, #24]
 80072a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072a4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a6:	6983      	ldr	r3, [r0, #24]
 80072a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80072ac:	e7ec      	b.n	8007288 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	f7ff fddc 	bl	8006e6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072b4:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072b6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072b8:	f043 0308 	orr.w	r3, r3, #8
 80072bc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072be:	69c3      	ldr	r3, [r0, #28]
 80072c0:	f023 0304 	bic.w	r3, r3, #4
 80072c4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072c6:	69c3      	ldr	r3, [r0, #28]
 80072c8:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ca:	61c3      	str	r3, [r0, #28]
 80072cc:	e7dd      	b.n	800728a <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80072ce:	2002      	movs	r0, #2
 80072d0:	e7b9      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x26>

080072d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d2:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072d4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d6:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072d8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072dc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80072e0:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e2:	6082      	str	r2, [r0, #8]
}
 80072e4:	bd10      	pop	{r4, pc}

080072e6 <HAL_TIM_ConfigClockSource>:
{
 80072e6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80072e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80072ec:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	f04f 0002 	mov.w	r0, #2
 80072f4:	f000 808e 	beq.w	8007414 <HAL_TIM_ConfigClockSource+0x12e>
 80072f8:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80072fa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80072fe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8007300:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8007304:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800730a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800730e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8007310:	680b      	ldr	r3, [r1, #0]
 8007312:	2b60      	cmp	r3, #96	; 0x60
 8007314:	d04f      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0xd0>
 8007316:	d832      	bhi.n	800737e <HAL_TIM_ConfigClockSource+0x98>
 8007318:	2b40      	cmp	r3, #64	; 0x40
 800731a:	d064      	beq.n	80073e6 <HAL_TIM_ConfigClockSource+0x100>
 800731c:	d816      	bhi.n	800734c <HAL_TIM_ConfigClockSource+0x66>
 800731e:	2b20      	cmp	r3, #32
 8007320:	d00d      	beq.n	800733e <HAL_TIM_ConfigClockSource+0x58>
 8007322:	d80a      	bhi.n	800733a <HAL_TIM_ConfigClockSource+0x54>
 8007324:	f033 0110 	bics.w	r1, r3, #16
 8007328:	d009      	beq.n	800733e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 800732a:	2301      	movs	r3, #1
 800732c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007330:	2300      	movs	r3, #0
 8007332:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007336:	4610      	mov	r0, r2
 8007338:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d1f5      	bne.n	800732a <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 800733e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007340:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007344:	4313      	orrs	r3, r2
 8007346:	f043 0307 	orr.w	r3, r3, #7
 800734a:	e028      	b.n	800739e <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800734c:	2b50      	cmp	r3, #80	; 0x50
 800734e:	d1ec      	bne.n	800732a <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8007350:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8007352:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8007354:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007356:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007358:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007362:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007364:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800736a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800736e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007370:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007372:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007378:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800737c:	e00f      	b.n	800739e <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 800737e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007382:	d00d      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0xba>
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d00c      	beq.n	80073a4 <HAL_TIM_ConfigClockSource+0xbe>
 800738a:	2b70      	cmp	r3, #112	; 0x70
 800738c:	d1cd      	bne.n	800732a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800738e:	68cb      	ldr	r3, [r1, #12]
 8007390:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007394:	f7ff ff9d 	bl	80072d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007398:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800739a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 800739e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2200      	movs	r2, #0
 80073a2:	e7c2      	b.n	800732a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80073a4:	68cb      	ldr	r3, [r1, #12]
 80073a6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80073aa:	f7ff ff92 	bl	80072d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ae:	6883      	ldr	r3, [r0, #8]
 80073b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073b4:	e7f3      	b.n	800739e <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80073b6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073b8:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80073ba:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073bc:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80073c0:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c2:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80073ce:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073d2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80073d6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80073d8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80073da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80073dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073e0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80073e4:	e7db      	b.n	800739e <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80073e6:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80073e8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80073ea:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ec:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ee:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073f2:	f023 0301 	bic.w	r3, r3, #1
 80073f6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80073fa:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007400:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007404:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007406:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007408:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800740a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800740e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8007412:	e7c4      	b.n	800739e <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8007414:	4602      	mov	r2, r0
 8007416:	e78e      	b.n	8007336 <HAL_TIM_ConfigClockSource+0x50>

08007418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007418:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800741a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800741c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800741e:	f001 011f 	and.w	r1, r1, #31
 8007422:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007424:	ea23 0304 	bic.w	r3, r3, r4
 8007428:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800742a:	6a03      	ldr	r3, [r0, #32]
 800742c:	408a      	lsls	r2, r1
 800742e:	431a      	orrs	r2, r3
 8007430:	6202      	str	r2, [r0, #32]
}
 8007432:	bd10      	pop	{r4, pc}

08007434 <HAL_TIM_OC_Start>:
{
 8007434:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007436:	b929      	cbnz	r1, 8007444 <HAL_TIM_OC_Start+0x10>
 8007438:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800743c:	2b01      	cmp	r3, #1
 800743e:	d021      	beq.n	8007484 <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8007440:	2001      	movs	r0, #1
}
 8007442:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007444:	2904      	cmp	r1, #4
 8007446:	d107      	bne.n	8007458 <HAL_TIM_OC_Start+0x24>
 8007448:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800744c:	2b01      	cmp	r3, #1
 800744e:	d1f7      	bne.n	8007440 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007450:	2302      	movs	r3, #2
 8007452:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007456:	e018      	b.n	800748a <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007458:	2908      	cmp	r1, #8
 800745a:	d107      	bne.n	800746c <HAL_TIM_OC_Start+0x38>
 800745c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007460:	2b01      	cmp	r3, #1
 8007462:	d1ed      	bne.n	8007440 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007464:	2302      	movs	r3, #2
 8007466:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800746a:	e00e      	b.n	800748a <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800746c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007470:	2b01      	cmp	r3, #1
 8007472:	d1e5      	bne.n	8007440 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007474:	2904      	cmp	r1, #4
 8007476:	d0eb      	beq.n	8007450 <HAL_TIM_OC_Start+0x1c>
 8007478:	2908      	cmp	r1, #8
 800747a:	d0f3      	beq.n	8007464 <HAL_TIM_OC_Start+0x30>
 800747c:	2302      	movs	r3, #2
 800747e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007482:	e002      	b.n	800748a <HAL_TIM_OC_Start+0x56>
 8007484:	2302      	movs	r3, #2
 8007486:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	2201      	movs	r2, #1
 800748e:	f7ff ffc3 	bl	8007418 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007492:	4b0e      	ldr	r3, [pc, #56]	; (80074cc <HAL_TIM_OC_Start+0x98>)
 8007494:	4298      	cmp	r0, r3
 8007496:	d10a      	bne.n	80074ae <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8007498:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800749a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800749e:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074a0:	6883      	ldr	r3, [r0, #8]
 80074a2:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d10b      	bne.n	80074c2 <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 80074aa:	2000      	movs	r0, #0
 80074ac:	e7c9      	b.n	8007442 <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80074b2:	d0f5      	beq.n	80074a0 <HAL_TIM_OC_Start+0x6c>
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_TIM_OC_Start+0x9c>)
 80074b6:	4298      	cmp	r0, r3
 80074b8:	d0f2      	beq.n	80074a0 <HAL_TIM_OC_Start+0x6c>
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	4298      	cmp	r0, r3
 80074c0:	d0ee      	beq.n	80074a0 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 80074c2:	6803      	ldr	r3, [r0, #0]
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	6003      	str	r3, [r0, #0]
 80074ca:	e7ee      	b.n	80074aa <HAL_TIM_OC_Start+0x76>
 80074cc:	40012c00 	.word	0x40012c00
 80074d0:	40000400 	.word	0x40000400

080074d4 <HAL_TIM_PWM_Start>:
 80074d4:	f7ff bfae 	b.w	8007434 <HAL_TIM_OC_Start>

080074d8 <HAL_TIM_OC_Stop>:
{
 80074d8:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074da:	2200      	movs	r2, #0
{
 80074dc:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074de:	6800      	ldr	r0, [r0, #0]
{
 80074e0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80074e2:	f7ff ff99 	bl	8007418 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074e6:	4b18      	ldr	r3, [pc, #96]	; (8007548 <HAL_TIM_OC_Stop+0x70>)
 80074e8:	4298      	cmp	r0, r3
 80074ea:	d10d      	bne.n	8007508 <HAL_TIM_OC_Stop+0x30>
    __HAL_TIM_MOE_DISABLE(htim);
 80074ec:	f241 1311 	movw	r3, #4369	; 0x1111
 80074f0:	6a02      	ldr	r2, [r0, #32]
 80074f2:	421a      	tst	r2, r3
 80074f4:	d108      	bne.n	8007508 <HAL_TIM_OC_Stop+0x30>
 80074f6:	f240 4344 	movw	r3, #1092	; 0x444
 80074fa:	6a02      	ldr	r2, [r0, #32]
 80074fc:	421a      	tst	r2, r3
 80074fe:	bf02      	ittt	eq
 8007500:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 8007502:	f423 4300 	biceq.w	r3, r3, #32768	; 0x8000
 8007506:	6443      	streq	r3, [r0, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8007508:	f241 1311 	movw	r3, #4369	; 0x1111
 800750c:	6a02      	ldr	r2, [r0, #32]
 800750e:	421a      	tst	r2, r3
 8007510:	d108      	bne.n	8007524 <HAL_TIM_OC_Stop+0x4c>
 8007512:	f240 4344 	movw	r3, #1092	; 0x444
 8007516:	6a02      	ldr	r2, [r0, #32]
 8007518:	421a      	tst	r2, r3
 800751a:	bf02      	ittt	eq
 800751c:	6803      	ldreq	r3, [r0, #0]
 800751e:	f023 0301 	biceq.w	r3, r3, #1
 8007522:	6003      	streq	r3, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007524:	2301      	movs	r3, #1
 8007526:	b91d      	cbnz	r5, 8007530 <HAL_TIM_OC_Stop+0x58>
 8007528:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800752c:	2000      	movs	r0, #0
 800752e:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007530:	2d04      	cmp	r5, #4
 8007532:	d102      	bne.n	800753a <HAL_TIM_OC_Stop+0x62>
 8007534:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007538:	e7f8      	b.n	800752c <HAL_TIM_OC_Stop+0x54>
 800753a:	2d08      	cmp	r5, #8
 800753c:	bf0c      	ite	eq
 800753e:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8007542:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8007546:	e7f1      	b.n	800752c <HAL_TIM_OC_Stop+0x54>
 8007548:	40012c00 	.word	0x40012c00

0800754c <HAL_TIM_PWM_Stop>:
 800754c:	f7ff bfc4 	b.w	80074d8 <HAL_TIM_OC_Stop>

08007550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007550:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007552:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007556:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007558:	2b01      	cmp	r3, #1
 800755a:	f04f 0002 	mov.w	r0, #2
 800755e:	d022      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007560:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007562:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007566:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007568:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800756a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800756e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007570:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007572:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	4c0c      	ldr	r4, [pc, #48]	; (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8007576:	42a3      	cmp	r3, r4
 8007578:	d00a      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d007      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007580:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007584:	42a3      	cmp	r3, r4
 8007586:	d003      	beq.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007588:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800758c:	42a3      	cmp	r3, r4
 800758e:	d104      	bne.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007590:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007592:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007596:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007598:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759a:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 800759c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800759e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80075a2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80075a6:	bd30      	pop	{r4, r5, pc}
 80075a8:	40012c00 	.word	0x40012c00

080075ac <HAL_TIMEx_CommutCallback>:
 80075ac:	4770      	bx	lr

080075ae <HAL_TIMEx_BreakCallback>:
 80075ae:	4770      	bx	lr

080075b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075b0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	f102 030c 	add.w	r3, r2, #12
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	320c      	adds	r2, #12
 80075c0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80075c4:	6802      	ldr	r2, [r0, #0]
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d1f2      	bne.n	80075b0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	f102 0314 	add.w	r3, r2, #20
 80075ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	f102 0c14 	add.w	ip, r2, #20
 80075da:	e84c 3100 	strex	r1, r3, [ip]
 80075de:	2900      	cmp	r1, #0
 80075e0:	d1f3      	bne.n	80075ca <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d10b      	bne.n	8007600 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	f102 030c 	add.w	r3, r2, #12
 80075ec:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	f102 0c0c 	add.w	ip, r2, #12
 80075f8:	e84c 3100 	strex	r1, r3, [ip]
 80075fc:	2900      	cmp	r1, #0
 80075fe:	d1f3      	bne.n	80075e8 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007600:	2320      	movs	r3, #32
 8007602:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007606:	2300      	movs	r3, #0
 8007608:	6303      	str	r3, [r0, #48]	; 0x30
}
 800760a:	4770      	bx	lr

0800760c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800760c:	b510      	push	{r4, lr}
 800760e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007610:	6803      	ldr	r3, [r0, #0]
 8007612:	68c1      	ldr	r1, [r0, #12]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800761a:	430a      	orrs	r2, r1
 800761c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800761e:	6882      	ldr	r2, [r0, #8]
 8007620:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007622:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007624:	4302      	orrs	r2, r0
 8007626:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007628:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800762c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007630:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007632:	430a      	orrs	r2, r1
 8007634:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007636:	695a      	ldr	r2, [r3, #20]
 8007638:	69a1      	ldr	r1, [r4, #24]
 800763a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800763e:	430a      	orrs	r2, r1
 8007640:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007642:	4a0e      	ldr	r2, [pc, #56]	; (800767c <UART_SetConfig+0x70>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d115      	bne.n	8007674 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007648:	f7ff f92e 	bl	80068a8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800764c:	2319      	movs	r3, #25
 800764e:	4343      	muls	r3, r0
 8007650:	6862      	ldr	r2, [r4, #4]
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	0092      	lsls	r2, r2, #2
 8007656:	fbb3 f3f2 	udiv	r3, r3, r2
 800765a:	2264      	movs	r2, #100	; 0x64
 800765c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007660:	fb02 3311 	mls	r3, r2, r1, r3
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	3332      	adds	r3, #50	; 0x32
 8007668:	fbb3 f3f2 	udiv	r3, r3, r2
 800766c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007670:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8007672:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007674:	f7ff f908 	bl	8006888 <HAL_RCC_GetPCLK1Freq>
 8007678:	e7e8      	b.n	800764c <UART_SetConfig+0x40>
 800767a:	bf00      	nop
 800767c:	40013800 	.word	0x40013800

08007680 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	4604      	mov	r4, r0
 8007684:	460e      	mov	r6, r1
 8007686:	4617      	mov	r7, r2
 8007688:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	6813      	ldr	r3, [r2, #0]
 800768e:	ea36 0303 	bics.w	r3, r6, r3
 8007692:	d101      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8007694:	2000      	movs	r0, #0
 8007696:	e028      	b.n	80076ea <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8007698:	1c6b      	adds	r3, r5, #1
 800769a:	d0f7      	beq.n	800768c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800769c:	b125      	cbz	r5, 80076a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800769e:	f7fd fbe1 	bl	8004e64 <HAL_GetTick>
 80076a2:	1bc0      	subs	r0, r0, r7
 80076a4:	4285      	cmp	r5, r0
 80076a6:	d2f0      	bcs.n	800768a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	f102 030c 	add.w	r3, r2, #12
 80076ae:	e853 3f00 	ldrex	r3, [r3]
 80076b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	320c      	adds	r2, #12
 80076b8:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 80076bc:	6821      	ldr	r1, [r4, #0]
 80076be:	2800      	cmp	r0, #0
 80076c0:	d1f2      	bne.n	80076a8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	f101 0314 	add.w	r3, r1, #20
 80076c6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	f101 0014 	add.w	r0, r1, #20
 80076d2:	e840 3200 	strex	r2, r3, [r0]
 80076d6:	2a00      	cmp	r2, #0
 80076d8:	d1f3      	bne.n	80076c2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 80076da:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 80076dc:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 80076de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(huart);
 80076e2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        huart->RxState = HAL_UART_STATE_READY;
 80076e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
 80076ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076ec <HAL_UART_Init>:
{
 80076ec:	b510      	push	{r4, lr}
  if (huart == NULL)
 80076ee:	4604      	mov	r4, r0
 80076f0:	b348      	cbz	r0, 8007746 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80076f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80076f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80076fa:	b91b      	cbnz	r3, 8007704 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80076fc:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8007700:	f7fb ffce 	bl	80036a0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007704:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007706:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007708:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 800770c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800770e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007714:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007716:	f7ff ff79 	bl	800760c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800771a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800771e:	691a      	ldr	r2, [r3, #16]
 8007720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800772c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007734:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007736:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800773a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800773e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007742:	6360      	str	r0, [r4, #52]	; 0x34
}
 8007744:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007746:	2001      	movs	r0, #1
 8007748:	e7fc      	b.n	8007744 <HAL_UART_Init+0x58>

0800774a <HAL_UART_DeInit>:
{
 800774a:	b510      	push	{r4, lr}
  if (huart == NULL)
 800774c:	4604      	mov	r4, r0
 800774e:	b1a0      	cbz	r0, 800777a <HAL_UART_DeInit+0x30>
  huart->gState = HAL_UART_STATE_BUSY;
 8007750:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007752:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007754:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8007758:	68d3      	ldr	r3, [r2, #12]
 800775a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800775e:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8007760:	f7fc f842 	bl	80037e8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007764:	2000      	movs	r0, #0
 8007766:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(huart);
 8007768:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800776c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8007770:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007774:	6320      	str	r0, [r4, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007776:	6360      	str	r0, [r4, #52]	; 0x34
}
 8007778:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800777a:	2001      	movs	r0, #1
 800777c:	e7fc      	b.n	8007778 <HAL_UART_DeInit+0x2e>

0800777e <HAL_UART_Transmit>:
{
 800777e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007782:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007784:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8007788:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800778a:	2b20      	cmp	r3, #32
{
 800778c:	460e      	mov	r6, r1
 800778e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007790:	d13c      	bne.n	800780c <HAL_UART_Transmit+0x8e>
    if ((pData == NULL) || (Size == 0U))
 8007792:	2900      	cmp	r1, #0
 8007794:	d03c      	beq.n	8007810 <HAL_UART_Transmit+0x92>
 8007796:	2a00      	cmp	r2, #0
 8007798:	d03a      	beq.n	8007810 <HAL_UART_Transmit+0x92>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779c:	2500      	movs	r5, #0
 800779e:	6445      	str	r5, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077a0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 80077a4:	f7fd fb5e 	bl	8004e64 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a8:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80077aa:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80077b0:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80077b2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b4:	d103      	bne.n	80077be <HAL_UART_Transmit+0x40>
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	b90b      	cbnz	r3, 80077be <HAL_UART_Transmit+0x40>
 80077ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80077bc:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 80077be:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	b953      	cbnz	r3, 80077da <HAL_UART_Transmit+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c4:	464b      	mov	r3, r9
 80077c6:	4642      	mov	r2, r8
 80077c8:	2140      	movs	r1, #64	; 0x40
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff ff58 	bl	8007680 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80077d0:	b950      	cbnz	r0, 80077e8 <HAL_UART_Transmit+0x6a>
    huart->gState = HAL_UART_STATE_READY;
 80077d2:	2320      	movs	r3, #32
 80077d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 80077d8:	e007      	b.n	80077ea <HAL_UART_Transmit+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077da:	464b      	mov	r3, r9
 80077dc:	4642      	mov	r2, r8
 80077de:	2180      	movs	r1, #128	; 0x80
 80077e0:	4620      	mov	r0, r4
 80077e2:	f7ff ff4d 	bl	8007680 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80077e6:	b110      	cbz	r0, 80077ee <HAL_UART_Transmit+0x70>
        return HAL_TIMEOUT;
 80077e8:	2003      	movs	r0, #3
}
 80077ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077ee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80077f0:	b94e      	cbnz	r6, 8007806 <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077f2:	f835 3b02 	ldrh.w	r3, [r5], #2
 80077f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077fa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80077fc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80077fe:	3901      	subs	r1, #1
 8007800:	b289      	uxth	r1, r1
 8007802:	84e1      	strh	r1, [r4, #38]	; 0x26
 8007804:	e7db      	b.n	80077be <HAL_UART_Transmit+0x40>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007806:	f816 3b01 	ldrb.w	r3, [r6], #1
 800780a:	e7f6      	b.n	80077fa <HAL_UART_Transmit+0x7c>
    return HAL_BUSY;
 800780c:	2002      	movs	r0, #2
 800780e:	e7ec      	b.n	80077ea <HAL_UART_Transmit+0x6c>
      return  HAL_ERROR;
 8007810:	2001      	movs	r0, #1
 8007812:	e7ea      	b.n	80077ea <HAL_UART_Transmit+0x6c>

08007814 <HAL_UART_TxCpltCallback>:
 8007814:	4770      	bx	lr

08007816 <HAL_UART_RxCpltCallback>:
 8007816:	4770      	bx	lr

08007818 <HAL_UART_RxHalfCpltCallback>:
 8007818:	4770      	bx	lr

0800781a <HAL_UART_ErrorCallback>:
 800781a:	4770      	bx	lr

0800781c <UART_DMAError>:
{
 800781c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007820:	6803      	ldr	r3, [r0, #0]
 8007822:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007824:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8007828:	2921      	cmp	r1, #33	; 0x21
 800782a:	d112      	bne.n	8007852 <UART_DMAError+0x36>
 800782c:	0612      	lsls	r2, r2, #24
 800782e:	d510      	bpl.n	8007852 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8007830:	2200      	movs	r2, #0
 8007832:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	f103 020c 	add.w	r2, r3, #12
 8007838:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800783c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	f103 0c0c 	add.w	ip, r3, #12
 8007844:	e84c 2100 	strex	r1, r2, [ip]
 8007848:	2900      	cmp	r1, #0
 800784a:	d1f3      	bne.n	8007834 <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 800784c:	2220      	movs	r2, #32
 800784e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007852:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007854:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8007858:	2a22      	cmp	r2, #34	; 0x22
 800785a:	d105      	bne.n	8007868 <UART_DMAError+0x4c>
 800785c:	065b      	lsls	r3, r3, #25
 800785e:	d503      	bpl.n	8007868 <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8007860:	2300      	movs	r3, #0
 8007862:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007864:	f7ff fea4 	bl	80075b0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007868:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800786a:	f043 0310 	orr.w	r3, r3, #16
 800786e:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8007870:	f7ff ffd3 	bl	800781a <HAL_UART_ErrorCallback>
}
 8007874:	bd08      	pop	{r3, pc}

08007876 <UART_DMAAbortOnError>:
{
 8007876:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007878:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800787c:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800787e:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007880:	f7ff ffcb 	bl	800781a <HAL_UART_ErrorCallback>
}
 8007884:	bd08      	pop	{r3, pc}

08007886 <HAL_UART_AbortCpltCallback>:
 8007886:	4770      	bx	lr

08007888 <HAL_UART_Abort_IT>:
{
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800788c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	f102 030c 	add.w	r3, r2, #12
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	320c      	adds	r2, #12
 800789c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	2900      	cmp	r1, #0
 80078a4:	d1f2      	bne.n	800788c <HAL_UART_Abort_IT+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	f103 0214 	add.w	r2, r3, #20
 80078aa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	f103 0014 	add.w	r0, r3, #20
 80078b6:	e840 2100 	strex	r1, r2, [r0]
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d1f3      	bne.n	80078a6 <HAL_UART_Abort_IT+0x1e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80078c0:	2a01      	cmp	r2, #1
 80078c2:	d035      	beq.n	8007930 <HAL_UART_Abort_IT+0xa8>
  if (huart->hdmatx != NULL)
 80078c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d13f      	bne.n	800794a <HAL_UART_Abort_IT+0xc2>
  if (huart->hdmarx != NULL)
 80078ca:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80078cc:	b129      	cbz	r1, 80078da <HAL_UART_Abort_IT+0x52>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80078d4:	bf18      	it	ne
 80078d6:	4a2d      	ldrne	r2, [pc, #180]	; (800798c <HAL_UART_Abort_IT+0x104>)
      huart->hdmarx->XferAbortCallback = NULL;
 80078d8:	634a      	str	r2, [r1, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80078da:	695a      	ldr	r2, [r3, #20]
 80078dc:	0612      	lsls	r2, r2, #24
 80078de:	d43b      	bmi.n	8007958 <HAL_UART_Abort_IT+0xd0>
  uint32_t AbortCplt = 0x01U;
 80078e0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	6953      	ldr	r3, [r2, #20]
 80078e6:	065b      	lsls	r3, r3, #25
 80078e8:	d54b      	bpl.n	8007982 <HAL_UART_Abort_IT+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	f102 0314 	add.w	r3, r2, #20
 80078ee:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f6:	f102 0114 	add.w	r1, r2, #20
 80078fa:	e841 3600 	strex	r6, r3, [r1]
 80078fe:	2e00      	cmp	r6, #0
 8007900:	d1f3      	bne.n	80078ea <HAL_UART_Abort_IT+0x62>
    if (huart->hdmarx != NULL)
 8007902:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007904:	2800      	cmp	r0, #0
 8007906:	d03c      	beq.n	8007982 <HAL_UART_Abort_IT+0xfa>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007908:	f7fd fe08 	bl	800551c <HAL_DMA_Abort_IT>
 800790c:	2800      	cmp	r0, #0
 800790e:	d03a      	beq.n	8007986 <HAL_UART_Abort_IT+0xfe>
        huart->hdmarx->XferAbortCallback = NULL;
 8007910:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007912:	635e      	str	r6, [r3, #52]	; 0x34
    huart->TxXferCount = 0x00U;
 8007914:	2300      	movs	r3, #0
    huart->gState  = HAL_UART_STATE_READY;
 8007916:	2220      	movs	r2, #32
    huart->TxXferCount = 0x00U;
 8007918:	84e3      	strh	r3, [r4, #38]	; 0x26
    HAL_UART_AbortCpltCallback(huart);
 800791a:	4620      	mov	r0, r4
    huart->RxXferCount = 0x00U;
 800791c:	85e3      	strh	r3, [r4, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791e:	6463      	str	r3, [r4, #68]	; 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8007920:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8007924:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007928:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_UART_AbortCpltCallback(huart);
 800792a:	f7ff ffac 	bl	8007886 <HAL_UART_AbortCpltCallback>
 800792e:	e02a      	b.n	8007986 <HAL_UART_Abort_IT+0xfe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	f103 020c 	add.w	r2, r3, #12
 8007934:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007938:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	f103 000c 	add.w	r0, r3, #12
 8007940:	e840 2100 	strex	r1, r2, [r0]
 8007944:	2900      	cmp	r1, #0
 8007946:	d1f3      	bne.n	8007930 <HAL_UART_Abort_IT+0xa8>
 8007948:	e7bc      	b.n	80078c4 <HAL_UART_Abort_IT+0x3c>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800794a:	695a      	ldr	r2, [r3, #20]
 800794c:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007950:	bf18      	it	ne
 8007952:	4a0f      	ldrne	r2, [pc, #60]	; (8007990 <HAL_UART_Abort_IT+0x108>)
      huart->hdmatx->XferAbortCallback = NULL;
 8007954:	6342      	str	r2, [r0, #52]	; 0x34
 8007956:	e7b8      	b.n	80078ca <HAL_UART_Abort_IT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	f103 0214 	add.w	r2, r3, #20
 800795c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	f103 0114 	add.w	r1, r3, #20
 8007968:	e841 2500 	strex	r5, r2, [r1]
 800796c:	2d00      	cmp	r5, #0
 800796e:	d1f3      	bne.n	8007958 <HAL_UART_Abort_IT+0xd0>
    if (huart->hdmatx != NULL)
 8007970:	2800      	cmp	r0, #0
 8007972:	d0b5      	beq.n	80078e0 <HAL_UART_Abort_IT+0x58>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007974:	f7fd fdd2 	bl	800551c <HAL_DMA_Abort_IT>
 8007978:	2800      	cmp	r0, #0
 800797a:	d0b2      	beq.n	80078e2 <HAL_UART_Abort_IT+0x5a>
        huart->hdmatx->XferAbortCallback = NULL;
 800797c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800797e:	635d      	str	r5, [r3, #52]	; 0x34
 8007980:	e7ae      	b.n	80078e0 <HAL_UART_Abort_IT+0x58>
  if (AbortCplt == 0x01U)
 8007982:	2d01      	cmp	r5, #1
 8007984:	d0c6      	beq.n	8007914 <HAL_UART_Abort_IT+0x8c>
}
 8007986:	2000      	movs	r0, #0
 8007988:	bd70      	pop	{r4, r5, r6, pc}
 800798a:	bf00      	nop
 800798c:	08007995 	.word	0x08007995
 8007990:	080079bf 	.word	0x080079bf

08007994 <UART_DMARxAbortCallback>:
{
 8007994:	b508      	push	{r3, lr}
  huart->hdmarx->XferAbortCallback = NULL;
 8007996:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007998:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmarx->XferAbortCallback = NULL;
 800799a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800799c:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmatx != NULL)
 800799e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80079a0:	b10a      	cbz	r2, 80079a6 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 80079a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079a4:	b952      	cbnz	r2, 80079bc <UART_DMARxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 80079a6:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 80079a8:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80079aa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ac:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80079ae:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079b2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b6:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80079b8:	f7ff ff65 	bl	8007886 <HAL_UART_AbortCpltCallback>
}
 80079bc:	bd08      	pop	{r3, pc}

080079be <UART_DMATxAbortCallback>:
{
 80079be:	b508      	push	{r3, lr}
  huart->hdmatx->XferAbortCallback = NULL;
 80079c0:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->hdmatx->XferAbortCallback = NULL;
 80079c4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80079c6:	6353      	str	r3, [r2, #52]	; 0x34
  if (huart->hdmarx != NULL)
 80079c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80079ca:	b10a      	cbz	r2, 80079d0 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 80079cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079ce:	b952      	cbnz	r2, 80079e6 <UART_DMATxAbortCallback+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 80079d0:	2220      	movs	r2, #32
  huart->TxXferCount = 0x00U;
 80079d2:	84c3      	strh	r3, [r0, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80079d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d6:	6443      	str	r3, [r0, #68]	; 0x44
  huart->gState  = HAL_UART_STATE_READY;
 80079d8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079dc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	6303      	str	r3, [r0, #48]	; 0x30
  HAL_UART_AbortCpltCallback(huart);
 80079e2:	f7ff ff50 	bl	8007886 <HAL_UART_AbortCpltCallback>
}
 80079e6:	bd08      	pop	{r3, pc}

080079e8 <HAL_UARTEx_RxEventCallback>:
}
 80079e8:	4770      	bx	lr

080079ea <UART_DMARxHalfCplt>:
{
 80079ea:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80079ec:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80079f0:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d104      	bne.n	8007a02 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079f8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80079fa:	0849      	lsrs	r1, r1, #1
 80079fc:	f7ff fff4 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
}
 8007a00:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8007a02:	f7ff ff09 	bl	8007818 <HAL_UART_RxHalfCpltCallback>
}
 8007a06:	e7fb      	b.n	8007a00 <UART_DMARxHalfCplt+0x16>

08007a08 <UART_DMAReceiveCplt>:
{
 8007a08:	b508      	push	{r3, lr}
 8007a0a:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a0c:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f013 0320 	ands.w	r3, r3, #32
 8007a16:	d137      	bne.n	8007a88 <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 8007a18:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1c:	f102 030c 	add.w	r3, r2, #12
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	320c      	adds	r2, #12
 8007a2a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8007a2e:	6803      	ldr	r3, [r0, #0]
 8007a30:	2900      	cmp	r1, #0
 8007a32:	d1f2      	bne.n	8007a1a <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	f103 0214 	add.w	r2, r3, #20
 8007a38:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	f103 0c14 	add.w	ip, r3, #20
 8007a44:	e84c 2100 	strex	r1, r2, [ip]
 8007a48:	2900      	cmp	r1, #0
 8007a4a:	d1f3      	bne.n	8007a34 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	f103 0214 	add.w	r2, r3, #20
 8007a50:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	f103 0c14 	add.w	ip, r3, #20
 8007a5c:	e84c 2100 	strex	r1, r2, [ip]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d1f3      	bne.n	8007a4c <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8007a64:	2220      	movs	r2, #32
 8007a66:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007a6c:	2a01      	cmp	r2, #1
 8007a6e:	d10b      	bne.n	8007a88 <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	f103 020c 	add.w	r2, r3, #12
 8007a74:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	f103 0c0c 	add.w	ip, r3, #12
 8007a80:	e84c 2100 	strex	r1, r2, [ip]
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d1f3      	bne.n	8007a70 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d103      	bne.n	8007a9a <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a92:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007a94:	f7ff ffa8 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
}
 8007a98:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8007a9a:	f7ff febc 	bl	8007816 <HAL_UART_RxCpltCallback>
}
 8007a9e:	e7fb      	b.n	8007a98 <UART_DMAReceiveCplt+0x90>

08007aa0 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8007aa4:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aa6:	2b22      	cmp	r3, #34	; 0x22
 8007aa8:	d142      	bne.n	8007b30 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aaa:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007aac:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007aae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007ab2:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab4:	d13f      	bne.n	8007b36 <UART_Receive_IT.isra.0+0x96>
 8007ab6:	6901      	ldr	r1, [r0, #16]
 8007ab8:	2900      	cmp	r1, #0
 8007aba:	d13f      	bne.n	8007b3c <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ac2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8007ac6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007ac8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d12d      	bne.n	8007b30 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ad4:	6802      	ldr	r2, [r0, #0]
 8007ad6:	68d1      	ldr	r1, [r2, #12]
 8007ad8:	f021 0120 	bic.w	r1, r1, #32
 8007adc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ade:	68d1      	ldr	r1, [r2, #12]
 8007ae0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007ae4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ae6:	6951      	ldr	r1, [r2, #20]
 8007ae8:	f021 0101 	bic.w	r1, r1, #1
 8007aec:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007aee:	2220      	movs	r2, #32
 8007af0:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007af4:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007af8:	2a01      	cmp	r2, #1
 8007afa:	6802      	ldr	r2, [r0, #0]
 8007afc:	d128      	bne.n	8007b50 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007afe:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b00:	f102 030c 	add.w	r3, r2, #12
 8007b04:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b08:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	f102 0c0c 	add.w	ip, r2, #12
 8007b10:	e84c 3100 	strex	r1, r3, [ip]
 8007b14:	2900      	cmp	r1, #0
 8007b16:	d1f3      	bne.n	8007b00 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b18:	6813      	ldr	r3, [r2, #0]
 8007b1a:	06db      	lsls	r3, r3, #27
 8007b1c:	d505      	bpl.n	8007b2a <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b1e:	9101      	str	r1, [sp, #4]
 8007b20:	6813      	ldr	r3, [r2, #0]
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	6853      	ldr	r3, [r2, #4]
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b2a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007b2c:	f7ff ff5c 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
}
 8007b30:	b003      	add	sp, #12
 8007b32:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b36:	b939      	cbnz	r1, 8007b48 <UART_Receive_IT.isra.0+0xa8>
 8007b38:	6901      	ldr	r1, [r0, #16]
 8007b3a:	b929      	cbnz	r1, 8007b48 <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b3c:	6852      	ldr	r2, [r2, #4]
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8007b42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b44:	3301      	adds	r3, #1
 8007b46:	e7be      	b.n	8007ac6 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b48:	6852      	ldr	r2, [r2, #4]
 8007b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007b4e:	e7f7      	b.n	8007b40 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 8007b50:	f7ff fe61 	bl	8007816 <HAL_UART_RxCpltCallback>
 8007b54:	e7ec      	b.n	8007b30 <UART_Receive_IT.isra.0+0x90>
	...

08007b58 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b58:	6803      	ldr	r3, [r0, #0]
{
 8007b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b5c:	681a      	ldr	r2, [r3, #0]
{
 8007b5e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007b60:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b62:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b64:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8007b66:	d108      	bne.n	8007b7a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b68:	0696      	lsls	r6, r2, #26
 8007b6a:	d568      	bpl.n	8007c3e <HAL_UART_IRQHandler+0xe6>
 8007b6c:	068d      	lsls	r5, r1, #26
 8007b6e:	d566      	bpl.n	8007c3e <HAL_UART_IRQHandler+0xe6>
}
 8007b70:	b002      	add	sp, #8
 8007b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007b76:	f7ff bf93 	b.w	8007aa0 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b7a:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b7e:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8007b82:	4305      	orrs	r5, r0
 8007b84:	d05b      	beq.n	8007c3e <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b86:	07d6      	lsls	r6, r2, #31
 8007b88:	d505      	bpl.n	8007b96 <HAL_UART_IRQHandler+0x3e>
 8007b8a:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b8c:	bf42      	ittt	mi
 8007b8e:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8007b90:	f043 0301 	orrmi.w	r3, r3, #1
 8007b94:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b96:	0753      	lsls	r3, r2, #29
 8007b98:	d504      	bpl.n	8007ba4 <HAL_UART_IRQHandler+0x4c>
 8007b9a:	b118      	cbz	r0, 8007ba4 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b9e:	f043 0302 	orr.w	r3, r3, #2
 8007ba2:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ba4:	0796      	lsls	r6, r2, #30
 8007ba6:	d504      	bpl.n	8007bb2 <HAL_UART_IRQHandler+0x5a>
 8007ba8:	b118      	cbz	r0, 8007bb2 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bac:	f043 0304 	orr.w	r3, r3, #4
 8007bb0:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bb2:	0715      	lsls	r5, r2, #28
 8007bb4:	d507      	bpl.n	8007bc6 <HAL_UART_IRQHandler+0x6e>
 8007bb6:	f001 0320 	and.w	r3, r1, #32
 8007bba:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bbc:	bf1e      	ittt	ne
 8007bbe:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8007bc0:	f043 0308 	orrne.w	r3, r3, #8
 8007bc4:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d032      	beq.n	8007c32 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bcc:	0692      	lsls	r2, r2, #26
 8007bce:	d504      	bpl.n	8007bda <HAL_UART_IRQHandler+0x82>
 8007bd0:	068b      	lsls	r3, r1, #26
 8007bd2:	d502      	bpl.n	8007bda <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	f7ff ff63 	bl	8007aa0 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bda:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 8007bdc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bde:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007be0:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007be6:	f002 0208 	and.w	r2, r2, #8
 8007bea:	ea53 0502 	orrs.w	r5, r3, r2
 8007bee:	d022      	beq.n	8007c36 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8007bf0:	f7ff fcde 	bl	80075b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	6973      	ldr	r3, [r6, #20]
 8007bf6:	065e      	lsls	r6, r3, #25
 8007bf8:	d518      	bpl.n	8007c2c <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	f102 0314 	add.w	r3, r2, #20
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	3214      	adds	r2, #20
 8007c0a:	e842 3100 	strex	r1, r3, [r2]
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d1f3      	bne.n	8007bfa <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8007c12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007c14:	b150      	cbz	r0, 8007c2c <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c16:	4b74      	ldr	r3, [pc, #464]	; (8007de8 <HAL_UART_IRQHandler+0x290>)
 8007c18:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c1a:	f7fd fc7f 	bl	800551c <HAL_DMA_Abort_IT>
 8007c1e:	b140      	cbz	r0, 8007c32 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007c22:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007c24:	b002      	add	sp, #8
 8007c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c2a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f7ff fdf4 	bl	800781a <HAL_UART_ErrorCallback>
}
 8007c32:	b002      	add	sp, #8
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8007c36:	f7ff fdf0 	bl	800781a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	6465      	str	r5, [r4, #68]	; 0x44
 8007c3c:	e7f9      	b.n	8007c32 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007c40:	2801      	cmp	r0, #1
 8007c42:	f040 8094 	bne.w	8007d6e <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c46:	06d5      	lsls	r5, r2, #27
 8007c48:	f140 8091 	bpl.w	8007d6e <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c4c:	06c8      	lsls	r0, r1, #27
 8007c4e:	f140 808e 	bpl.w	8007d6e <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c52:	2200      	movs	r2, #0
 8007c54:	9201      	str	r2, [sp, #4]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	9201      	str	r2, [sp, #4]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	9201      	str	r2, [sp, #4]
 8007c5e:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	0652      	lsls	r2, r2, #25
 8007c64:	d54d      	bpl.n	8007d02 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c66:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c68:	680a      	ldr	r2, [r1, #0]
 8007c6a:	6852      	ldr	r2, [r2, #4]
 8007c6c:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	d0df      	beq.n	8007c32 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c72:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8007c74:	4290      	cmp	r0, r2
 8007c76:	d9dc      	bls.n	8007c32 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 8007c78:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c7a:	698a      	ldr	r2, [r1, #24]
 8007c7c:	2a20      	cmp	r2, #32
 8007c7e:	d036      	beq.n	8007cee <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	f103 020c 	add.w	r2, r3, #12
 8007c84:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	f103 000c 	add.w	r0, r3, #12
 8007c90:	e840 2100 	strex	r1, r2, [r0]
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d1f3      	bne.n	8007c80 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	f103 0214 	add.w	r2, r3, #20
 8007c9c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	f103 0014 	add.w	r0, r3, #20
 8007ca8:	e840 2100 	strex	r1, r2, [r0]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d1f3      	bne.n	8007c98 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	f103 0214 	add.w	r2, r3, #20
 8007cb4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbc:	f103 0014 	add.w	r0, r3, #20
 8007cc0:	e840 2100 	strex	r1, r2, [r0]
 8007cc4:	2900      	cmp	r1, #0
 8007cc6:	d1f3      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	f103 020c 	add.w	r2, r3, #12
 8007cd4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	f103 000c 	add.w	r0, r3, #12
 8007ce0:	e840 2100 	strex	r1, r2, [r0]
 8007ce4:	2900      	cmp	r1, #0
 8007ce6:	d1f3      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007cea:	f7fd fbf8 	bl	80054de <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cf2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007cf4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007cf6:	1ac9      	subs	r1, r1, r3
 8007cf8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f7ff fe74 	bl	80079e8 <HAL_UARTEx_RxEventCallback>
 8007d00:	e797      	b.n	8007c32 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d02:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8007d04:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d06:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8007d08:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d0a:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d090      	beq.n	8007c32 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d10:	1a89      	subs	r1, r1, r2
 8007d12:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007d14:	2900      	cmp	r1, #0
 8007d16:	d08c      	beq.n	8007c32 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	f103 020c 	add.w	r2, r3, #12
 8007d1c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	f103 050c 	add.w	r5, r3, #12
 8007d28:	e845 2000 	strex	r0, r2, [r5]
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d1f3      	bne.n	8007d18 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	f103 0214 	add.w	r2, r3, #20
 8007d34:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d38:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3c:	f103 0514 	add.w	r5, r3, #20
 8007d40:	e845 2000 	strex	r0, r2, [r5]
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1f3      	bne.n	8007d30 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4e:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	f103 020c 	add.w	r2, r3, #12
 8007d54:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	f103 050c 	add.w	r5, r3, #12
 8007d60:	e845 2000 	strex	r0, r2, [r5]
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d1f3      	bne.n	8007d50 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	6363      	str	r3, [r4, #52]	; 0x34
 8007d6c:	e7c5      	b.n	8007cfa <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d6e:	0616      	lsls	r6, r2, #24
 8007d70:	d528      	bpl.n	8007dc4 <HAL_UART_IRQHandler+0x26c>
 8007d72:	060d      	lsls	r5, r1, #24
 8007d74:	d526      	bpl.n	8007dc4 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d76:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8007d7a:	2a21      	cmp	r2, #33	; 0x21
 8007d7c:	f47f af59 	bne.w	8007c32 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d80:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d82:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d84:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007d88:	d117      	bne.n	8007dba <HAL_UART_IRQHandler+0x262>
 8007d8a:	6921      	ldr	r1, [r4, #16]
 8007d8c:	b9a9      	cbnz	r1, 8007dba <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d8e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007d92:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007d96:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d98:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007d9a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007d9c:	3a01      	subs	r2, #1
 8007d9e:	b292      	uxth	r2, r2
 8007da0:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	f47f af45 	bne.w	8007c32 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dae:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db6:	60da      	str	r2, [r3, #12]
 8007db8:	e73b      	b.n	8007c32 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dba:	1c51      	adds	r1, r2, #1
 8007dbc:	6221      	str	r1, [r4, #32]
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	605a      	str	r2, [r3, #4]
 8007dc2:	e7ea      	b.n	8007d9a <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007dc4:	0650      	lsls	r0, r2, #25
 8007dc6:	f57f af34 	bpl.w	8007c32 <HAL_UART_IRQHandler+0xda>
 8007dca:	064a      	lsls	r2, r1, #25
 8007dcc:	f57f af31 	bpl.w	8007c32 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dd0:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007dd2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007dda:	2320      	movs	r3, #32
 8007ddc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8007de0:	f7ff fd18 	bl	8007814 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007de4:	e725      	b.n	8007c32 <HAL_UART_IRQHandler+0xda>
 8007de6:	bf00      	nop
 8007de8:	08007877 	.word	0x08007877

08007dec <UART_Start_Receive_DMA>:
{
 8007dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dee:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8007df0:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007df4:	2222      	movs	r2, #34	; 0x22
{
 8007df6:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8007df8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfa:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dfc:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e00:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8007e02:	4a1d      	ldr	r2, [pc, #116]	; (8007e78 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e04:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e06:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e08:	4a1c      	ldr	r2, [pc, #112]	; (8007e7c <UART_Start_Receive_DMA+0x90>)
 8007e0a:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e0c:	4a1c      	ldr	r2, [pc, #112]	; (8007e80 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 8007e0e:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e12:	460a      	mov	r2, r1
 8007e14:	1d31      	adds	r1, r6, #4
 8007e16:	f7fd fb23 	bl	8005460 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	9501      	str	r5, [sp, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	9201      	str	r2, [sp, #4]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	9201      	str	r2, [sp, #4]
 8007e26:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e28:	6922      	ldr	r2, [r4, #16]
 8007e2a:	b15a      	cbz	r2, 8007e44 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2c:	f103 020c 	add.w	r2, r3, #12
 8007e30:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	f103 000c 	add.w	r0, r3, #12
 8007e3c:	e840 2100 	strex	r1, r2, [r0]
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d1f3      	bne.n	8007e2c <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	f103 0214 	add.w	r2, r3, #20
 8007e48:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	f103 0014 	add.w	r0, r3, #20
 8007e54:	e840 2100 	strex	r1, r2, [r0]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	d1f3      	bne.n	8007e44 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5c:	f103 0214 	add.w	r2, r3, #20
 8007e60:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	f103 0114 	add.w	r1, r3, #20
 8007e6c:	e841 2000 	strex	r0, r2, [r1]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1f3      	bne.n	8007e5c <UART_Start_Receive_DMA+0x70>
}
 8007e74:	b002      	add	sp, #8
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	08007a09 	.word	0x08007a09
 8007e7c:	080079eb 	.word	0x080079eb
 8007e80:	0800781d 	.word	0x0800781d

08007e84 <HAL_UART_Receive_DMA>:
{
 8007e84:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e86:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 8007e8a:	2e20      	cmp	r6, #32
 8007e8c:	d106      	bne.n	8007e9c <HAL_UART_Receive_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 8007e8e:	b141      	cbz	r1, 8007ea2 <HAL_UART_Receive_DMA+0x1e>
 8007e90:	b13a      	cbz	r2, 8007ea2 <HAL_UART_Receive_DMA+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	2400      	movs	r4, #0
 8007e94:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007e96:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e98:	f7ff bfa8 	b.w	8007dec <UART_Start_Receive_DMA>
    return HAL_BUSY;
 8007e9c:	2002      	movs	r0, #2
}
 8007e9e:	bc70      	pop	{r4, r5, r6}
 8007ea0:	4770      	bx	lr
      return HAL_ERROR;
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	e7fb      	b.n	8007e9e <HAL_UART_Receive_DMA+0x1a>

08007ea6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007ea6:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007ea8:	f000 ffbc 	bl	8008e24 <vTaskStartScheduler>
  
  return osOK;
}
 8007eac:	2000      	movs	r0, #0
 8007eae:	bd08      	pop	{r3, pc}

08007eb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007eb4:	6946      	ldr	r6, [r0, #20]
{
 8007eb6:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eb8:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ebc:	692a      	ldr	r2, [r5, #16]
 8007ebe:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8007ec2:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ec4:	b176      	cbz	r6, 8007ee4 <osThreadCreate+0x34>
 8007ec6:	69ad      	ldr	r5, [r5, #24]
 8007ec8:	b165      	cbz	r5, 8007ee4 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007eca:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ecc:	bf0c      	ite	eq
 8007ece:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007ed0:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ed2:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007ed6:	9400      	str	r4, [sp, #0]
 8007ed8:	f000 feae 	bl	8008c38 <xTaskCreateStatic>
 8007edc:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007ede:	9805      	ldr	r0, [sp, #20]
}
 8007ee0:	b006      	add	sp, #24
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007ee4:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007eea:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007eec:	ad05      	add	r5, sp, #20
 8007eee:	e9cd 4500 	strd	r4, r5, [sp]
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	f000 fed7 	bl	8008ca6 <xTaskCreate>
 8007ef8:	2801      	cmp	r0, #1
 8007efa:	d0f0      	beq.n	8007ede <osThreadCreate+0x2e>
      return NULL;
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7ef      	b.n	8007ee0 <osThreadCreate+0x30>

08007f00 <osThreadYield>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
  taskYIELD();
 8007f00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	f3bf 8f6f 	isb	sy
  
  return osOK;
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	4770      	bx	lr

08007f18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f18:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f1a:	2801      	cmp	r0, #1
 8007f1c:	bf38      	it	cc
 8007f1e:	2001      	movcc	r0, #1
 8007f20:	f001 f930 	bl	8009184 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd08      	pop	{r3, pc}

08007f28 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007f28:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007f2a:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8007f2c:	3901      	subs	r1, #1
{
 8007f2e:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8007f30:	424a      	negs	r2, r1
 8007f32:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8007f34:	b13c      	cbz	r4, 8007f46 <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8007f36:	e9cd 0400 	strd	r0, r4, [sp]
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	4805      	ldr	r0, [pc, #20]	; (8007f54 <osTimerCreate+0x2c>)
 8007f3e:	f001 fd04 	bl	800994a <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007f42:	b002      	add	sp, #8
 8007f44:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8007f46:	9000      	str	r0, [sp, #0]
 8007f48:	2101      	movs	r1, #1
 8007f4a:	4802      	ldr	r0, [pc, #8]	; (8007f54 <osTimerCreate+0x2c>)
 8007f4c:	f001 fcd6 	bl	80098fc <xTimerCreate>
 8007f50:	e7f7      	b.n	8007f42 <osTimerCreate+0x1a>
 8007f52:	bf00      	nop
 8007f54:	0800b654 	.word	0x0800b654

08007f58 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007f5a:	2400      	movs	r4, #0
 8007f5c:	2901      	cmp	r1, #1
 8007f5e:	460a      	mov	r2, r1
 8007f60:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007f62:	bf38      	it	cc
 8007f64:	2201      	movcc	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f66:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8007f6a:	b1b3      	cbz	r3, 8007f9a <osTimerStart+0x42>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007f6c:	2109      	movs	r1, #9
 8007f6e:	9400      	str	r4, [sp, #0]
 8007f70:	ab03      	add	r3, sp, #12
 8007f72:	f001 fd27 	bl	80099c4 <xTimerGenericCommand>
 8007f76:	2801      	cmp	r0, #1
 8007f78:	d115      	bne.n	8007fa6 <osTimerStart+0x4e>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	b913      	cbnz	r3, 8007f84 <osTimerStart+0x2c>
  osStatus result = osOK;
 8007f7e:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007f80:	b004      	add	sp, #16
 8007f82:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007f84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	e7f1      	b.n	8007f7e <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	9300      	str	r3, [sp, #0]
 8007f9e:	f001 fd11 	bl	80099c4 <xTimerGenericCommand>
 8007fa2:	2801      	cmp	r0, #1
 8007fa4:	d0eb      	beq.n	8007f7e <osTimerStart+0x26>
      result = osErrorOS;
 8007fa6:	20ff      	movs	r0, #255	; 0xff
  return result;
 8007fa8:	e7ea      	b.n	8007f80 <osTimerStart+0x28>

08007faa <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8007faa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007fac:	2300      	movs	r3, #0
  uint32_t ulPreviousNotificationValue = 0;
 8007fae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 8007fb6:	b1d3      	cbz	r3, 8007fee <osSignalSet+0x44>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8007fb8:	ab02      	add	r3, sp, #8
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	ab03      	add	r3, sp, #12
 8007fc0:	f001 fb94 	bl	80096ec <xTaskGenericNotifyFromISR>
 8007fc4:	2801      	cmp	r0, #1
 8007fc6:	d004      	beq.n	8007fd2 <osSignalSet+0x28>
      return 0x80000000;
 8007fc8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8007fcc:	b005      	add	sp, #20
 8007fce:	f85d fb04 	ldr.w	pc, [sp], #4
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8007fd2:	9b02      	ldr	r3, [sp, #8]
 8007fd4:	b14b      	cbz	r3, 8007fea <osSignalSet+0x40>
 8007fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	f3bf 8f6f 	isb	sy
  return ulPreviousNotificationValue;
 8007fea:	9803      	ldr	r0, [sp, #12]
 8007fec:	e7ee      	b.n	8007fcc <osSignalSet+0x22>
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8007fee:	2201      	movs	r2, #1
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	f001 fb0d 	bl	8009610 <xTaskGenericNotify>
 8007ff6:	2801      	cmp	r0, #1
 8007ff8:	d0f7      	beq.n	8007fea <osSignalSet+0x40>
 8007ffa:	e7e5      	b.n	8007fc8 <osSignalSet+0x1e>

08007ffc <osSignalWait>:

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8007ffc:	2300      	movs	r3, #0
{
 8007ffe:	b530      	push	{r4, r5, lr}
 8008000:	b085      	sub	sp, #20
 8008002:	4605      	mov	r5, r0
 8008004:	4614      	mov	r4, r2
  ret.value.signals = 0;  
 8008006:	9302      	str	r3, [sp, #8]
 8008008:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 800800c:	b9c0      	cbnz	r0, 8008040 <osSignalWait+0x44>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800800e:	4613      	mov	r3, r2
 8008010:	aa02      	add	r2, sp, #8
 8008012:	f001 fab3 	bl	800957c <xTaskNotifyWait>
 8008016:	2801      	cmp	r0, #1
 8008018:	d00c      	beq.n	8008034 <osSignalWait+0x38>
    {
      if(ticks == 0)  ret.status = osOK;
 800801a:	1e23      	subs	r3, r4, #0
 800801c:	bf18      	it	ne
 800801e:	2301      	movne	r3, #1
 8008020:	019b      	lsls	r3, r3, #6
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8008022:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8008024:	ab04      	add	r3, sp, #16
 8008026:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800802a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800802e:	4628      	mov	r0, r5
 8008030:	b005      	add	sp, #20
 8008032:	bd30      	pop	{r4, r5, pc}
    else if(ret.value.signals < 0)
 8008034:	9b02      	ldr	r3, [sp, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	bfac      	ite	ge
 800803a:	2308      	movge	r3, #8
 800803c:	2386      	movlt	r3, #134	; 0x86
 800803e:	e7f0      	b.n	8008022 <osSignalWait+0x26>
 8008040:	2382      	movs	r3, #130	; 0x82
 8008042:	e7ee      	b.n	8008022 <osSignalWait+0x26>

08008044 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008044:	4603      	mov	r3, r0
 8008046:	b513      	push	{r0, r1, r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008048:	685c      	ldr	r4, [r3, #4]
{ 
 800804a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 800804c:	b164      	cbz	r4, 8008068 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800804e:	2901      	cmp	r1, #1
 8008050:	d119      	bne.n	8008086 <osSemaphoreCreate+0x42>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008052:	2303      	movs	r3, #3
 8008054:	2200      	movs	r2, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4611      	mov	r1, r2
 800805a:	4623      	mov	r3, r4
 800805c:	f000 f9b9 	bl	80083d2 <xQueueGenericCreateStatic>
 8008060:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008062:	4620      	mov	r0, r4
 8008064:	b002      	add	sp, #8
 8008066:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8008068:	2901      	cmp	r1, #1
 800806a:	d1fa      	bne.n	8008062 <osSemaphoreCreate+0x1e>
      vSemaphoreCreateBinary(sema);
 800806c:	4621      	mov	r1, r4
 800806e:	2203      	movs	r2, #3
 8008070:	f000 f9f8 	bl	8008464 <xQueueGenericCreate>
 8008074:	4604      	mov	r4, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	d0f3      	beq.n	8008062 <osSemaphoreCreate+0x1e>
 800807a:	2300      	movs	r3, #0
 800807c:	461a      	mov	r2, r3
 800807e:	4619      	mov	r1, r3
 8008080:	f000 fa14 	bl	80084ac <xQueueGenericSend>
 8008084:	e7ed      	b.n	8008062 <osSemaphoreCreate+0x1e>
      return NULL;
 8008086:	2400      	movs	r4, #0
 8008088:	e7eb      	b.n	8008062 <osSemaphoreCreate+0x1e>

0800808a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800808a:	4603      	mov	r3, r0
 800808c:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800808e:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008090:	b10a      	cbz	r2, 8008096 <osMessageCreate+0xc>
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	b92b      	cbnz	r3, 80080a2 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008096:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008098:	b002      	add	sp, #8
 800809a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800809e:	f000 b9e1 	b.w	8008464 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80080a2:	2400      	movs	r4, #0
 80080a4:	9400      	str	r4, [sp, #0]
 80080a6:	f000 f994 	bl	80083d2 <xQueueGenericCreateStatic>
}
 80080aa:	b002      	add	sp, #8
 80080ac:	bd10      	pop	{r4, pc}

080080ae <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80080ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80080b0:	2400      	movs	r4, #0
{
 80080b2:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80080b4:	9403      	str	r4, [sp, #12]
 80080b6:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80080ba:	b1b3      	cbz	r3, 80080ea <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80080bc:	4623      	mov	r3, r4
 80080be:	aa03      	add	r2, sp, #12
 80080c0:	a901      	add	r1, sp, #4
 80080c2:	f000 faa6 	bl	8008612 <xQueueGenericSendFromISR>
 80080c6:	2801      	cmp	r0, #1
 80080c8:	d117      	bne.n	80080fa <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80080ca:	9b03      	ldr	r3, [sp, #12]
 80080cc:	b913      	cbnz	r3, 80080d4 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80080ce:	2000      	movs	r0, #0
}
 80080d0:	b004      	add	sp, #16
 80080d2:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80080d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80080d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	e7f1      	b.n	80080ce <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	bf38      	it	cc
 80080ee:	2201      	movcc	r2, #1
 80080f0:	a901      	add	r1, sp, #4
 80080f2:	f000 f9db 	bl	80084ac <xQueueGenericSend>
 80080f6:	2801      	cmp	r0, #1
 80080f8:	d0e9      	beq.n	80080ce <osMessagePut+0x20>
      return osErrorOS;
 80080fa:	20ff      	movs	r0, #255	; 0xff
 80080fc:	e7e8      	b.n	80080d0 <osMessagePut+0x22>

080080fe <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80080fe:	2300      	movs	r3, #0
{
 8008100:	b530      	push	{r4, r5, lr}
 8008102:	b085      	sub	sp, #20
 8008104:	4605      	mov	r5, r0
 8008106:	4614      	mov	r4, r2
 8008108:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800810a:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800810c:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 800810e:	b911      	cbnz	r1, 8008116 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8008110:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	e018      	b.n	8008148 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800811c:	b1e3      	cbz	r3, 8008158 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800811e:	466a      	mov	r2, sp
 8008120:	a902      	add	r1, sp, #8
 8008122:	f000 fb76 	bl	8008812 <xQueueReceiveFromISR>
 8008126:	1e43      	subs	r3, r0, #1
 8008128:	4258      	negs	r0, r3
 800812a:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 800812c:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800812e:	0100      	lsls	r0, r0, #4
 8008130:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8008132:	b14b      	cbz	r3, 8008148 <osMessageGet+0x4a>
 8008134:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800813c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008140:	f3bf 8f4f 	dsb	sy
 8008144:	f3bf 8f6f 	isb	sy
    return event;
 8008148:	ab04      	add	r3, sp, #16
 800814a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800814e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8008152:	4628      	mov	r0, r5
 8008154:	b005      	add	sp, #20
 8008156:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008158:	a902      	add	r1, sp, #8
 800815a:	f000 fabb 	bl	80086d4 <xQueueReceive>
 800815e:	2801      	cmp	r0, #1
 8008160:	d101      	bne.n	8008166 <osMessageGet+0x68>
      event.status = osEventMessage;
 8008162:	2310      	movs	r3, #16
 8008164:	e7d5      	b.n	8008112 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008166:	3c00      	subs	r4, #0
 8008168:	bf18      	it	ne
 800816a:	2401      	movne	r4, #1
 800816c:	01a4      	lsls	r4, r4, #6
 800816e:	9401      	str	r4, [sp, #4]
  return event;
 8008170:	e7ea      	b.n	8008148 <osMessageGet+0x4a>

08008172 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8008172:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8008174:	f001 f86c 	bl	8009250 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8008178:	2000      	movs	r0, #0
 800817a:	bd08      	pop	{r3, pc}

0800817c <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 800817c:	b508      	push	{r3, lr}
 800817e:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008182:	b17b      	cbz	r3, 80081a4 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008184:	f000 fdfe 	bl	8008d84 <xTaskResumeFromISR>
 8008188:	2801      	cmp	r0, #1
 800818a:	d109      	bne.n	80081a0 <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800818c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008194:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 80081a0:	2000      	movs	r0, #0
 80081a2:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 80081a4:	f000 fdac 	bl	8008d00 <vTaskResume>
 80081a8:	e7fa      	b.n	80081a0 <osThreadResume+0x24>

080081aa <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 80081aa:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80081ac:	2901      	cmp	r1, #1
 80081ae:	bf38      	it	cc
 80081b0:	2101      	movcc	r1, #1
 80081b2:	f000 ff9d 	bl	80090f0 <vTaskDelayUntil>
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80081b6:	2000      	movs	r0, #0
 80081b8:	bd08      	pop	{r3, pc}

080081ba <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081be:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081c2:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081c6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081c8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081ce:	4770      	bx	lr

080081d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081d4:	4770      	bx	lr

080081d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80081d6:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081d8:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80081da:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081dc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081e2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80081e4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80081e6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80081e8:	3301      	adds	r3, #1
 80081ea:	6003      	str	r3, [r0, #0]
}
 80081ec:	4770      	bx	lr

080081ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ee:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081f0:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80081f2:	1c63      	adds	r3, r4, #1
 80081f4:	d10a      	bne.n	800820c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80081f6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081fc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081fe:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008200:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008202:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008204:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008206:	3301      	adds	r3, #1
 8008208:	6003      	str	r3, [r0, #0]
}
 800820a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800820c:	f100 0208 	add.w	r2, r0, #8
 8008210:	4613      	mov	r3, r2
 8008212:	6852      	ldr	r2, [r2, #4]
 8008214:	6815      	ldr	r5, [r2, #0]
 8008216:	42a5      	cmp	r5, r4
 8008218:	d9fa      	bls.n	8008210 <vListInsert+0x22>
 800821a:	e7ed      	b.n	80081f8 <vListInsert+0xa>

0800821c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800821c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800821e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008222:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008224:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008226:	6859      	ldr	r1, [r3, #4]
 8008228:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800822a:	bf08      	it	eq
 800822c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800822e:	2200      	movs	r2, #0
 8008230:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	3a01      	subs	r2, #1
 8008236:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008238:	6818      	ldr	r0, [r3, #0]
}
 800823a:	4770      	bx	lr

0800823c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800823c:	b510      	push	{r4, lr}
 800823e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008240:	f001 fd68 	bl	8009d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008244:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008246:	f001 fd85 	bl	8009d54 <vPortExitCritical>

	return xReturn;
}
 800824a:	fab4 f084 	clz	r0, r4
 800824e:	0940      	lsrs	r0, r0, #5
 8008250:	bd10      	pop	{r4, pc}

08008252 <prvCopyDataToQueue>:
{
 8008252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008254:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008256:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8008258:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800825a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800825c:	b952      	cbnz	r2, 8008274 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800825e:	6807      	ldr	r7, [r0, #0]
 8008260:	bb47      	cbnz	r7, 80082b4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008262:	6840      	ldr	r0, [r0, #4]
 8008264:	f001 f93a 	bl	80094dc <xTaskPriorityDisinherit>
 8008268:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 800826a:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800826c:	3601      	adds	r6, #1
}
 800826e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008270:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008274:	b965      	cbnz	r5, 8008290 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008276:	6880      	ldr	r0, [r0, #8]
 8008278:	f002 fb35 	bl	800a8e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800827c:	68a3      	ldr	r3, [r4, #8]
 800827e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008280:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008282:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008284:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008286:	4293      	cmp	r3, r2
 8008288:	d3f0      	bcc.n	800826c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	60a3      	str	r3, [r4, #8]
 800828e:	e7ed      	b.n	800826c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008290:	68c0      	ldr	r0, [r0, #12]
 8008292:	f002 fb28 	bl	800a8e6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008296:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008298:	68e3      	ldr	r3, [r4, #12]
 800829a:	4251      	negs	r1, r2
 800829c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800829e:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082a0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082a2:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80082a4:	bf3e      	ittt	cc
 80082a6:	6863      	ldrcc	r3, [r4, #4]
 80082a8:	185b      	addcc	r3, r3, r1
 80082aa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80082ac:	2d02      	cmp	r5, #2
 80082ae:	d101      	bne.n	80082b4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082b0:	b116      	cbz	r6, 80082b8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80082b2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80082b4:	2500      	movs	r5, #0
 80082b6:	e7d9      	b.n	800826c <prvCopyDataToQueue+0x1a>
 80082b8:	4635      	mov	r5, r6
 80082ba:	e7d7      	b.n	800826c <prvCopyDataToQueue+0x1a>

080082bc <prvCopyDataFromQueue>:
{
 80082bc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80082c0:	4608      	mov	r0, r1
 80082c2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082c4:	b162      	cbz	r2, 80082e0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082c6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082c8:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082ca:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082cc:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082ce:	bf28      	it	cs
 80082d0:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082d2:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082d4:	bf28      	it	cs
 80082d6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80082d8:	68d9      	ldr	r1, [r3, #12]
}
 80082da:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80082dc:	f002 bb03 	b.w	800a8e6 <memcpy>
}
 80082e0:	bc10      	pop	{r4}
 80082e2:	4770      	bx	lr

080082e4 <prvUnlockQueue>:
{
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80082e8:	f001 fd14 	bl	8009d14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80082ec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80082f4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082f6:	2d00      	cmp	r5, #0
 80082f8:	dc14      	bgt.n	8008324 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80082fa:	23ff      	movs	r3, #255	; 0xff
 80082fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008300:	f001 fd28 	bl	8009d54 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008304:	f001 fd06 	bl	8009d14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008308:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008310:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008312:	2d00      	cmp	r5, #0
 8008314:	dc12      	bgt.n	800833c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008316:	23ff      	movs	r3, #255	; 0xff
 8008318:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800831c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008320:	f001 bd18 	b.w	8009d54 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0e7      	beq.n	80082fa <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800832a:	4630      	mov	r0, r6
 800832c:	f001 f836 	bl	800939c <xTaskRemoveFromEventList>
 8008330:	b108      	cbz	r0, 8008336 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008332:	f001 f8bd 	bl	80094b0 <vTaskMissedYield>
			--cTxLock;
 8008336:	3d01      	subs	r5, #1
 8008338:	b26d      	sxtb	r5, r5
 800833a:	e7dc      	b.n	80082f6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0e9      	beq.n	8008316 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008342:	4630      	mov	r0, r6
 8008344:	f001 f82a 	bl	800939c <xTaskRemoveFromEventList>
 8008348:	b108      	cbz	r0, 800834e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800834a:	f001 f8b1 	bl	80094b0 <vTaskMissedYield>
				--cRxLock;
 800834e:	3d01      	subs	r5, #1
 8008350:	b26d      	sxtb	r5, r5
 8008352:	e7de      	b.n	8008312 <prvUnlockQueue+0x2e>

08008354 <xQueueGenericReset>:
{
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008358:	4604      	mov	r4, r0
 800835a:	b940      	cbnz	r0, 800836e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	e7fe      	b.n	800836c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800836e:	f001 fcd1 	bl	8009d14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008372:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8008376:	434b      	muls	r3, r1
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800837c:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800837e:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008380:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008382:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008384:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8008386:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008388:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800838a:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800838c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008390:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008394:	b9a5      	cbnz	r5, 80083c0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	b173      	cbz	r3, 80083b8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800839a:	f104 0010 	add.w	r0, r4, #16
 800839e:	f000 fffd 	bl	800939c <xTaskRemoveFromEventList>
 80083a2:	b148      	cbz	r0, 80083b8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80083a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80083a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80083b8:	f001 fccc 	bl	8009d54 <vPortExitCritical>
}
 80083bc:	2001      	movs	r0, #1
 80083be:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083c0:	f104 0010 	add.w	r0, r4, #16
 80083c4:	f7ff fef9 	bl	80081ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083cc:	f7ff fef5 	bl	80081ba <vListInitialise>
 80083d0:	e7f2      	b.n	80083b8 <xQueueGenericReset+0x64>

080083d2 <xQueueGenericCreateStatic>:
	{
 80083d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083d4:	460d      	mov	r5, r1
 80083d6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083d8:	b940      	cbnz	r0, 80083ec <xQueueGenericCreateStatic+0x1a>
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	e7fe      	b.n	80083ea <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80083ec:	b943      	cbnz	r3, 8008400 <xQueueGenericCreateStatic+0x2e>
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	e7fe      	b.n	80083fe <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008400:	b14a      	cbz	r2, 8008416 <xQueueGenericCreateStatic+0x44>
 8008402:	b991      	cbnz	r1, 800842a <xQueueGenericCreateStatic+0x58>
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008416:	b141      	cbz	r1, 800842a <xQueueGenericCreateStatic+0x58>
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	e7fe      	b.n	8008428 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800842a:	2348      	movs	r3, #72	; 0x48
 800842c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	2b48      	cmp	r3, #72	; 0x48
 8008432:	d008      	beq.n	8008446 <xQueueGenericCreateStatic+0x74>
 8008434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	e7fe      	b.n	8008444 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008446:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008448:	2d00      	cmp	r5, #0
 800844a:	bf08      	it	eq
 800844c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800844e:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008452:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008456:	4620      	mov	r0, r4
 8008458:	6022      	str	r2, [r4, #0]
 800845a:	f7ff ff7b 	bl	8008354 <xQueueGenericReset>
	}
 800845e:	4620      	mov	r0, r4
 8008460:	b003      	add	sp, #12
 8008462:	bd30      	pop	{r4, r5, pc}

08008464 <xQueueGenericCreate>:
	{
 8008464:	b570      	push	{r4, r5, r6, lr}
 8008466:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008468:	4606      	mov	r6, r0
 800846a:	b940      	cbnz	r0, 800847e <xQueueGenericCreate+0x1a>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	e7fe      	b.n	800847c <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800847e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008480:	3048      	adds	r0, #72	; 0x48
 8008482:	f001 fd77 	bl	8009f74 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008486:	4604      	mov	r4, r0
 8008488:	b160      	cbz	r0, 80084a4 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800848a:	2300      	movs	r3, #0
 800848c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008490:	b155      	cbz	r5, 80084a8 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008492:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008496:	2101      	movs	r1, #1
 8008498:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800849a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 800849e:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084a0:	f7ff ff58 	bl	8008354 <xQueueGenericReset>
	}
 80084a4:	4620      	mov	r0, r4
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	4603      	mov	r3, r0
 80084aa:	e7f4      	b.n	8008496 <xQueueGenericCreate+0x32>

080084ac <xQueueGenericSend>:
{
 80084ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084b0:	b085      	sub	sp, #20
 80084b2:	4688      	mov	r8, r1
 80084b4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80084b6:	4604      	mov	r4, r0
{
 80084b8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80084ba:	b940      	cbnz	r0, 80084ce <xQueueGenericSend+0x22>
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	e7fe      	b.n	80084cc <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ce:	b951      	cbnz	r1, 80084e6 <xQueueGenericSend+0x3a>
 80084d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084d2:	b143      	cbz	r3, 80084e6 <xQueueGenericSend+0x3a>
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084e6:	2f02      	cmp	r7, #2
 80084e8:	d10b      	bne.n	8008502 <xQueueGenericSend+0x56>
 80084ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d008      	beq.n	8008502 <xQueueGenericSend+0x56>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	e7fe      	b.n	8008500 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008502:	f000 ffdb 	bl	80094bc <xTaskGetSchedulerState>
 8008506:	4606      	mov	r6, r0
 8008508:	b950      	cbnz	r0, 8008520 <xQueueGenericSend+0x74>
 800850a:	9b01      	ldr	r3, [sp, #4]
 800850c:	b14b      	cbz	r3, 8008522 <xQueueGenericSend+0x76>
 800850e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	e7fe      	b.n	800851e <xQueueGenericSend+0x72>
 8008520:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008522:	f04f 0900 	mov.w	r9, #0
 8008526:	e037      	b.n	8008598 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008528:	9d01      	ldr	r5, [sp, #4]
 800852a:	b91d      	cbnz	r5, 8008534 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800852c:	f001 fc12 	bl	8009d54 <vPortExitCritical>
			return errQUEUE_FULL;
 8008530:	2000      	movs	r0, #0
 8008532:	e052      	b.n	80085da <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8008534:	b916      	cbnz	r6, 800853c <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008536:	a802      	add	r0, sp, #8
 8008538:	f000 ff72 	bl	8009420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800853c:	f001 fc0a 	bl	8009d54 <vPortExitCritical>
		vTaskSuspendAll();
 8008540:	f000 fcc0 	bl	8008ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008544:	f001 fbe6 	bl	8009d14 <vPortEnterCritical>
 8008548:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800854c:	2bff      	cmp	r3, #255	; 0xff
 800854e:	bf08      	it	eq
 8008550:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8008554:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008558:	2bff      	cmp	r3, #255	; 0xff
 800855a:	bf08      	it	eq
 800855c:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8008560:	f001 fbf8 	bl	8009d54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008564:	a901      	add	r1, sp, #4
 8008566:	a802      	add	r0, sp, #8
 8008568:	f000 ff66 	bl	8009438 <xTaskCheckForTimeOut>
 800856c:	2800      	cmp	r0, #0
 800856e:	d14a      	bne.n	8008606 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008570:	f001 fbd0 	bl	8009d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008574:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008576:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008578:	429a      	cmp	r2, r3
 800857a:	d131      	bne.n	80085e0 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800857c:	f001 fbea 	bl	8009d54 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008580:	9901      	ldr	r1, [sp, #4]
 8008582:	f104 0010 	add.w	r0, r4, #16
 8008586:	f000 fecf 	bl	8009328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff feaa 	bl	80082e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008590:	f000 fd38 	bl	8009004 <xTaskResumeAll>
 8008594:	b360      	cbz	r0, 80085f0 <xQueueGenericSend+0x144>
 8008596:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008598:	f001 fbbc 	bl	8009d14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800859c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800859e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d301      	bcc.n	80085a8 <xQueueGenericSend+0xfc>
 80085a4:	2f02      	cmp	r7, #2
 80085a6:	d1bf      	bne.n	8008528 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a8:	463a      	mov	r2, r7
 80085aa:	4641      	mov	r1, r8
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7ff fe50 	bl	8008252 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085b4:	b11b      	cbz	r3, 80085be <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085ba:	f000 feef 	bl	800939c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80085be:	b148      	cbz	r0, 80085d4 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80085c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80085d4:	f001 fbbe 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 80085d8:	2001      	movs	r0, #1
}
 80085da:	b005      	add	sp, #20
 80085dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80085e0:	f001 fbb8 	bl	8009d54 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7ff fe7d 	bl	80082e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085ea:	f000 fd0b 	bl	8009004 <xTaskResumeAll>
 80085ee:	e7d2      	b.n	8008596 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80085f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	e7c7      	b.n	8008596 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008606:	4620      	mov	r0, r4
 8008608:	f7ff fe6c 	bl	80082e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800860c:	f000 fcfa 	bl	8009004 <xTaskResumeAll>
 8008610:	e78e      	b.n	8008530 <xQueueGenericSend+0x84>

08008612 <xQueueGenericSendFromISR>:
{
 8008612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008616:	4689      	mov	r9, r1
 8008618:	4690      	mov	r8, r2
 800861a:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800861c:	4604      	mov	r4, r0
 800861e:	b940      	cbnz	r0, 8008632 <xQueueGenericSendFromISR+0x20>
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	e7fe      	b.n	8008630 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008632:	b951      	cbnz	r1, 800864a <xQueueGenericSendFromISR+0x38>
 8008634:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008636:	b143      	cbz	r3, 800864a <xQueueGenericSendFromISR+0x38>
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	e7fe      	b.n	8008648 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800864a:	2f02      	cmp	r7, #2
 800864c:	d10b      	bne.n	8008666 <xQueueGenericSendFromISR+0x54>
 800864e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008650:	2b01      	cmp	r3, #1
 8008652:	d008      	beq.n	8008666 <xQueueGenericSendFromISR+0x54>
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	e7fe      	b.n	8008664 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008666:	f001 fc31 	bl	8009ecc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800866a:	f3ef 8611 	mrs	r6, BASEPRI
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800867e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008680:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008682:	429a      	cmp	r2, r3
 8008684:	d301      	bcc.n	800868a <xQueueGenericSendFromISR+0x78>
 8008686:	2f02      	cmp	r7, #2
 8008688:	d122      	bne.n	80086d0 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800868a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800868e:	463a      	mov	r2, r7
 8008690:	4649      	mov	r1, r9
 8008692:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008694:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008696:	f7ff fddc 	bl	8008252 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800869a:	1c6b      	adds	r3, r5, #1
 800869c:	d113      	bne.n	80086c6 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800869e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086a0:	b90b      	cbnz	r3, 80086a6 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80086a2:	2001      	movs	r0, #1
 80086a4:	e00b      	b.n	80086be <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086aa:	f000 fe77 	bl	800939c <xTaskRemoveFromEventList>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0f7      	beq.n	80086a2 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	d0f4      	beq.n	80086a2 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086b8:	2001      	movs	r0, #1
 80086ba:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086be:	f386 8811 	msr	BASEPRI, r6
}
 80086c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086c6:	3501      	adds	r5, #1
 80086c8:	b26d      	sxtb	r5, r5
 80086ca:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80086ce:	e7e8      	b.n	80086a2 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80086d0:	2000      	movs	r0, #0
 80086d2:	e7f4      	b.n	80086be <xQueueGenericSendFromISR+0xac>

080086d4 <xQueueReceive>:
{
 80086d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80086d8:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80086da:	4604      	mov	r4, r0
{
 80086dc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086de:	b940      	cbnz	r0, 80086f2 <xQueueReceive+0x1e>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	e7fe      	b.n	80086f0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086f2:	b951      	cbnz	r1, 800870a <xQueueReceive+0x36>
 80086f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80086f6:	b143      	cbz	r3, 800870a <xQueueReceive+0x36>
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	e7fe      	b.n	8008708 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870a:	f000 fed7 	bl	80094bc <xTaskGetSchedulerState>
 800870e:	4606      	mov	r6, r0
 8008710:	b950      	cbnz	r0, 8008728 <xQueueReceive+0x54>
 8008712:	9b01      	ldr	r3, [sp, #4]
 8008714:	b14b      	cbz	r3, 800872a <xQueueReceive+0x56>
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	e7fe      	b.n	8008726 <xQueueReceive+0x52>
 8008728:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	e03d      	b.n	80087ac <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008730:	9d01      	ldr	r5, [sp, #4]
 8008732:	b91d      	cbnz	r5, 800873c <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 8008734:	f001 fb0e 	bl	8009d54 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008738:	2000      	movs	r0, #0
 800873a:	e056      	b.n	80087ea <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800873c:	b916      	cbnz	r6, 8008744 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800873e:	a802      	add	r0, sp, #8
 8008740:	f000 fe6e 	bl	8009420 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008744:	f001 fb06 	bl	8009d54 <vPortExitCritical>
		vTaskSuspendAll();
 8008748:	f000 fbbc 	bl	8008ec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800874c:	f001 fae2 	bl	8009d14 <vPortEnterCritical>
 8008750:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008754:	2bff      	cmp	r3, #255	; 0xff
 8008756:	bf08      	it	eq
 8008758:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800875c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008760:	2bff      	cmp	r3, #255	; 0xff
 8008762:	bf08      	it	eq
 8008764:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8008768:	f001 faf4 	bl	8009d54 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800876c:	a901      	add	r1, sp, #4
 800876e:	a802      	add	r0, sp, #8
 8008770:	f000 fe62 	bl	8009438 <xTaskCheckForTimeOut>
 8008774:	2800      	cmp	r0, #0
 8008776:	d141      	bne.n	80087fc <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008778:	4620      	mov	r0, r4
 800877a:	f7ff fd5f 	bl	800823c <prvIsQueueEmpty>
 800877e:	b3b8      	cbz	r0, 80087f0 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008780:	9901      	ldr	r1, [sp, #4]
 8008782:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008786:	f000 fdcf 	bl	8009328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800878a:	4620      	mov	r0, r4
 800878c:	f7ff fdaa 	bl	80082e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008790:	f000 fc38 	bl	8009004 <xTaskResumeAll>
 8008794:	b948      	cbnz	r0, 80087aa <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008796:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800879a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80087ac:	f001 fab2 	bl	8009d14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087b0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087b2:	2d00      	cmp	r5, #0
 80087b4:	d0bc      	beq.n	8008730 <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087b6:	4639      	mov	r1, r7
 80087b8:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ba:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087bc:	f7ff fd7e 	bl	80082bc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087c0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087c2:	6923      	ldr	r3, [r4, #16]
 80087c4:	b173      	cbz	r3, 80087e4 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c6:	f104 0010 	add.w	r0, r4, #16
 80087ca:	f000 fde7 	bl	800939c <xTaskRemoveFromEventList>
 80087ce:	b148      	cbz	r0, 80087e4 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 80087d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80087d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087e4:	f001 fab6 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 80087e8:	2001      	movs	r0, #1
}
 80087ea:	b004      	add	sp, #16
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80087f0:	4620      	mov	r0, r4
 80087f2:	f7ff fd77 	bl	80082e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087f6:	f000 fc05 	bl	8009004 <xTaskResumeAll>
 80087fa:	e7d6      	b.n	80087aa <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fd71 	bl	80082e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008802:	f000 fbff 	bl	8009004 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008806:	4620      	mov	r0, r4
 8008808:	f7ff fd18 	bl	800823c <prvIsQueueEmpty>
 800880c:	2800      	cmp	r0, #0
 800880e:	d0cc      	beq.n	80087aa <xQueueReceive+0xd6>
 8008810:	e792      	b.n	8008738 <xQueueReceive+0x64>

08008812 <xQueueReceiveFromISR>:
{
 8008812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008816:	4689      	mov	r9, r1
 8008818:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800881a:	4605      	mov	r5, r0
 800881c:	b940      	cbnz	r0, 8008830 <xQueueReceiveFromISR+0x1e>
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	e7fe      	b.n	800882e <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008830:	b951      	cbnz	r1, 8008848 <xQueueReceiveFromISR+0x36>
 8008832:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008834:	b143      	cbz	r3, 8008848 <xQueueReceiveFromISR+0x36>
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	e7fe      	b.n	8008846 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008848:	f001 fb40 	bl	8009ecc <vPortValidateInterruptPriority>
	__asm volatile
 800884c:	f3ef 8711 	mrs	r7, BASEPRI
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008860:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008862:	b31c      	cbz	r4, 80088ac <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008864:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008868:	4649      	mov	r1, r9
 800886a:	4628      	mov	r0, r5
			const int8_t cRxLock = pxQueue->cRxLock;
 800886c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800886e:	f7ff fd25 	bl	80082bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008872:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8008874:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008876:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008878:	d113      	bne.n	80088a2 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800887a:	692b      	ldr	r3, [r5, #16]
 800887c:	b90b      	cbnz	r3, 8008882 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800887e:	2001      	movs	r0, #1
 8008880:	e00b      	b.n	800889a <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008882:	f105 0010 	add.w	r0, r5, #16
 8008886:	f000 fd89 	bl	800939c <xTaskRemoveFromEventList>
 800888a:	2800      	cmp	r0, #0
 800888c:	d0f7      	beq.n	800887e <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800888e:	f1b8 0f00 	cmp.w	r8, #0
 8008892:	d0f4      	beq.n	800887e <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008894:	2001      	movs	r0, #1
 8008896:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800889a:	f387 8811 	msr	BASEPRI, r7
}
 800889e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80088a2:	3601      	adds	r6, #1
 80088a4:	b276      	sxtb	r6, r6
 80088a6:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80088aa:	e7e8      	b.n	800887e <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80088ac:	4620      	mov	r0, r4
 80088ae:	e7f4      	b.n	800889a <xQueueReceiveFromISR+0x88>

080088b0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b0:	2300      	movs	r3, #0
	{
 80088b2:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80088b4:	4a06      	ldr	r2, [pc, #24]	; (80088d0 <vQueueAddToRegistry+0x20>)
 80088b6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80088ba:	b92c      	cbnz	r4, 80088c8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80088bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80088c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80088c4:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80088c6:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088c8:	3301      	adds	r3, #1
 80088ca:	2b08      	cmp	r3, #8
 80088cc:	d1f3      	bne.n	80088b6 <vQueueAddToRegistry+0x6>
 80088ce:	e7fa      	b.n	80088c6 <vQueueAddToRegistry+0x16>
 80088d0:	2000188c 	.word	0x2000188c

080088d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80088dc:	f001 fa1a 	bl	8009d14 <vPortEnterCritical>
 80088e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088e4:	2bff      	cmp	r3, #255	; 0xff
 80088e6:	bf04      	itt	eq
 80088e8:	2300      	moveq	r3, #0
 80088ea:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80088ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088f2:	2bff      	cmp	r3, #255	; 0xff
 80088f4:	bf04      	itt	eq
 80088f6:	2300      	moveq	r3, #0
 80088f8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80088fc:	f001 fa2a 	bl	8009d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008900:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008902:	b92b      	cbnz	r3, 8008910 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008904:	4632      	mov	r2, r6
 8008906:	4629      	mov	r1, r5
 8008908:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800890c:	f000 fd26 	bl	800935c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008910:	4620      	mov	r0, r4
	}
 8008912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008916:	f7ff bce5 	b.w	80082e4 <prvUnlockQueue>
	...

0800891c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008922:	f001 f9f7 	bl	8009d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008926:	4b2f      	ldr	r3, [pc, #188]	; (80089e4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8008928:	4e2f      	ldr	r6, [pc, #188]	; (80089e8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4f2f      	ldr	r7, [pc, #188]	; (80089ec <prvAddNewTaskToReadyList+0xd0>)
 800892e:	3201      	adds	r2, #1
 8008930:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008932:	6835      	ldr	r5, [r6, #0]
 8008934:	2d00      	cmp	r5, #0
 8008936:	d14a      	bne.n	80089ce <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008938:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d11f      	bne.n	8008980 <prvAddNewTaskToReadyList+0x64>
 8008940:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008942:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008944:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008946:	f7ff fc38 	bl	80081ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800894a:	2d07      	cmp	r5, #7
 800894c:	f108 0814 	add.w	r8, r8, #20
 8008950:	d1f7      	bne.n	8008942 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008952:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80089f0 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 8008956:	4d27      	ldr	r5, [pc, #156]	; (80089f4 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8008958:	4640      	mov	r0, r8
 800895a:	f7ff fc2e 	bl	80081ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800895e:	4628      	mov	r0, r5
 8008960:	f7ff fc2b 	bl	80081ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008964:	4824      	ldr	r0, [pc, #144]	; (80089f8 <prvAddNewTaskToReadyList+0xdc>)
 8008966:	f7ff fc28 	bl	80081ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800896a:	4824      	ldr	r0, [pc, #144]	; (80089fc <prvAddNewTaskToReadyList+0xe0>)
 800896c:	f7ff fc25 	bl	80081ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008970:	4823      	ldr	r0, [pc, #140]	; (8008a00 <prvAddNewTaskToReadyList+0xe4>)
 8008972:	f7ff fc22 	bl	80081ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008976:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <prvAddNewTaskToReadyList+0xe8>)
 8008978:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800897c:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <prvAddNewTaskToReadyList+0xec>)
 800897e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8008980:	4a22      	ldr	r2, [pc, #136]	; (8008a0c <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8008982:	4923      	ldr	r1, [pc, #140]	; (8008a10 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8008984:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008986:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008988:	3301      	adds	r3, #1
 800898a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800898c:	2301      	movs	r3, #1
 800898e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008990:	4093      	lsls	r3, r2
 8008992:	4303      	orrs	r3, r0
 8008994:	2014      	movs	r0, #20
 8008996:	600b      	str	r3, [r1, #0]
 8008998:	fb00 7002 	mla	r0, r0, r2, r7
 800899c:	1d21      	adds	r1, r4, #4
 800899e:	f7ff fc1a 	bl	80081d6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80089a2:	f001 f9d7 	bl	8009d54 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80089a6:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <prvAddNewTaskToReadyList+0xf8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	b173      	cbz	r3, 80089ca <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089ac:	6833      	ldr	r3, [r6, #0]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d209      	bcs.n	80089ca <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80089b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80089ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	f3bf 8f6f 	isb	sy
}
 80089ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80089ce:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <prvAddNewTaskToReadyList+0xf8>)
 80089d0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 80089d4:	2a00      	cmp	r2, #0
 80089d6:	d1d3      	bne.n	8008980 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089d8:	6832      	ldr	r2, [r6, #0]
 80089da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089dc:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80089de:	bf98      	it	ls
 80089e0:	6034      	strls	r4, [r6, #0]
 80089e2:	e7cd      	b.n	8008980 <prvAddNewTaskToReadyList+0x64>
 80089e4:	20001964 	.word	0x20001964
 80089e8:	200018cc 	.word	0x200018cc
 80089ec:	200018d8 	.word	0x200018d8
 80089f0:	2000197c 	.word	0x2000197c
 80089f4:	20001990 	.word	0x20001990
 80089f8:	200019ac 	.word	0x200019ac
 80089fc:	200019d8 	.word	0x200019d8
 8008a00:	200019c4 	.word	0x200019c4
 8008a04:	200018d0 	.word	0x200018d0
 8008a08:	200018d4 	.word	0x200018d4
 8008a0c:	20001974 	.word	0x20001974
 8008a10:	20001978 	.word	0x20001978
 8008a14:	200019c0 	.word	0x200019c0

08008a18 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a1c:	4d1a      	ldr	r5, [pc, #104]	; (8008a88 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8008a1e:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8008a20:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a22:	6828      	ldr	r0, [r5, #0]
{
 8008a24:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a26:	3004      	adds	r0, #4
 8008a28:	f7ff fbf8 	bl	800821c <uxListRemove>
 8008a2c:	b940      	cbnz	r0, 8008a40 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008a2e:	682a      	ldr	r2, [r5, #0]
 8008a30:	4916      	ldr	r1, [pc, #88]	; (8008a8c <prvAddCurrentTaskToDelayedList+0x74>)
 8008a32:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008a34:	2201      	movs	r2, #1
 8008a36:	680b      	ldr	r3, [r1, #0]
 8008a38:	4082      	lsls	r2, r0
 8008a3a:	ea23 0302 	bic.w	r3, r3, r2
 8008a3e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a40:	1c73      	adds	r3, r6, #1
 8008a42:	d107      	bne.n	8008a54 <prvAddCurrentTaskToDelayedList+0x3c>
 8008a44:	b137      	cbz	r7, 8008a54 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a46:	6829      	ldr	r1, [r5, #0]
 8008a48:	4811      	ldr	r0, [pc, #68]	; (8008a90 <prvAddCurrentTaskToDelayedList+0x78>)
 8008a4a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a50:	f7ff bbc1 	b.w	80081d6 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	19a4      	adds	r4, r4, r6
 8008a58:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008a5a:	d307      	bcc.n	8008a6c <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a5c:	4b0d      	ldr	r3, [pc, #52]	; (8008a94 <prvAddCurrentTaskToDelayedList+0x7c>)
 8008a5e:	6818      	ldr	r0, [r3, #0]
 8008a60:	6829      	ldr	r1, [r5, #0]
}
 8008a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a66:	3104      	adds	r1, #4
 8008a68:	f7ff bbc1 	b.w	80081ee <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <prvAddCurrentTaskToDelayedList+0x80>)
 8008a6e:	6818      	ldr	r0, [r3, #0]
 8008a70:	6829      	ldr	r1, [r5, #0]
 8008a72:	3104      	adds	r1, #4
 8008a74:	f7ff fbbb 	bl	80081ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a78:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <prvAddCurrentTaskToDelayedList+0x84>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008a7e:	bf88      	it	hi
 8008a80:	601c      	strhi	r4, [r3, #0]
}
 8008a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a84:	200019ec 	.word	0x200019ec
 8008a88:	200018cc 	.word	0x200018cc
 8008a8c:	20001978 	.word	0x20001978
 8008a90:	200019c4 	.word	0x200019c4
 8008a94:	200018d4 	.word	0x200018d4
 8008a98:	200018d0 	.word	0x200018d0
 8008a9c:	200019a4 	.word	0x200019a4

08008aa0 <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 8008aa0:	b940      	cbnz	r0, 8008ab4 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	e7fe      	b.n	8008ab2 <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008ab4:	6942      	ldr	r2, [r0, #20]
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <prvTaskIsTaskSuspended+0x30>)
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d107      	bne.n	8008acc <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008abc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <prvTaskIsTaskSuspended+0x34>)
 8008ac0:	4298      	cmp	r0, r3
 8008ac2:	d003      	beq.n	8008acc <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8008ac4:	fab0 f080 	clz	r0, r0
 8008ac8:	0940      	lsrs	r0, r0, #5
 8008aca:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8008acc:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008ace:	4770      	bx	lr
 8008ad0:	200019c4 	.word	0x200019c4
 8008ad4:	200019ac 	.word	0x200019ac

08008ad8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <prvResetNextTaskUnblockTime+0x1c>)
 8008ada:	6813      	ldr	r3, [r2, #0]
 8008adc:	6819      	ldr	r1, [r3, #0]
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <prvResetNextTaskUnblockTime+0x20>)
 8008ae0:	b919      	cbnz	r1, 8008aea <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ae6:	601a      	str	r2, [r3, #0]
}
 8008ae8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008aee:	68d2      	ldr	r2, [r2, #12]
 8008af0:	6852      	ldr	r2, [r2, #4]
 8008af2:	e7f8      	b.n	8008ae6 <prvResetNextTaskUnblockTime+0xe>
 8008af4:	200018d0 	.word	0x200018d0
 8008af8:	200019a4 	.word	0x200019a4

08008afc <prvDeleteTCB>:
	{
 8008afc:	b510      	push	{r4, lr}
 8008afe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b00:	304c      	adds	r0, #76	; 0x4c
 8008b02:	f001 fe1f 	bl	800a744 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b06:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8008b0a:	b93b      	cbnz	r3, 8008b1c <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8008b0c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008b0e:	f001 fac3 	bl	800a098 <vPortFree>
				vPortFree( pxTCB );
 8008b12:	4620      	mov	r0, r4
	}
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008b18:	f001 babe 	b.w	800a098 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d0f8      	beq.n	8008b12 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d008      	beq.n	8008b36 <prvDeleteTCB+0x3a>
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	e7fe      	b.n	8008b34 <prvDeleteTCB+0x38>
	}
 8008b36:	bd10      	pop	{r4, pc}

08008b38 <prvIdleTask>:
{
 8008b38:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b3a:	4c13      	ldr	r4, [pc, #76]	; (8008b88 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b3c:	4f13      	ldr	r7, [pc, #76]	; (8008b8c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008b3e:	4d14      	ldr	r5, [pc, #80]	; (8008b90 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	b973      	cbnz	r3, 8008b62 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b44:	4b13      	ldr	r3, [pc, #76]	; (8008b94 <prvIdleTask+0x5c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d9f8      	bls.n	8008b3e <prvIdleTask+0x6>
				taskYIELD();
 8008b4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	e7ed      	b.n	8008b3e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008b62:	f001 f8d7 	bl	8009d14 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6a:	1d30      	adds	r0, r6, #4
 8008b6c:	f7ff fb56 	bl	800821c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b76:	6823      	ldr	r3, [r4, #0]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008b7c:	f001 f8ea 	bl	8009d54 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008b80:	4630      	mov	r0, r6
 8008b82:	f7ff ffbb 	bl	8008afc <prvDeleteTCB>
 8008b86:	e7db      	b.n	8008b40 <prvIdleTask+0x8>
 8008b88:	20001968 	.word	0x20001968
 8008b8c:	200019d8 	.word	0x200019d8
 8008b90:	20001964 	.word	0x20001964
 8008b94:	200018d8 	.word	0x200018d8

08008b98 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008ba2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8008ba6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008ba8:	3a01      	subs	r2, #1
 8008baa:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008bae:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008bb0:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bb4:	1e4b      	subs	r3, r1, #1
 8008bb6:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8008bba:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bbc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8008bc0:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8008bc4:	b108      	cbz	r0, 8008bca <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bc6:	428b      	cmp	r3, r1
 8008bc8:	d1f8      	bne.n	8008bbc <prvInitialiseNewTask.constprop.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bca:	9d08      	ldr	r5, [sp, #32]
 8008bcc:	f04f 0a00 	mov.w	sl, #0
 8008bd0:	2d06      	cmp	r5, #6
 8008bd2:	bf28      	it	cs
 8008bd4:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bd6:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008bd8:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->uxPriority = uxPriority;
 8008bdc:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bde:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008be2:	f7ff faf5 	bl	80081d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008be6:	f104 0018 	add.w	r0, r4, #24
 8008bea:	f7ff faf1 	bl	80081d0 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bee:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf0:	f1c5 0507 	rsb	r5, r5, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bf4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8008bf6:	f8c4 a098 	str.w	sl, [r4, #152]	; 0x98
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bfa:	18a0      	adds	r0, r4, r2
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bfc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bfe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c00:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c02:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c06:	f001 fd6f 	bl	800a6e8 <memset>
 8008c0a:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <prvInitialiseNewTask.constprop.0+0x9c>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c0c:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008c12:	6523      	str	r3, [r4, #80]	; 0x50
 8008c14:	33d0      	adds	r3, #208	; 0xd0
 8008c16:	6562      	str	r2, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c18:	4630      	mov	r0, r6
 8008c1a:	464a      	mov	r2, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c1c:	65a3      	str	r3, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c1e:	f001 f853 	bl	8009cc8 <pxPortInitialiseStack>
 8008c22:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008c24:	f1b8 0f00 	cmp.w	r8, #0
 8008c28:	d001      	beq.n	8008c2e <prvInitialiseNewTask.constprop.0+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c2a:	f8c8 4000 	str.w	r4, [r8]
}
 8008c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c32:	bf00      	nop
 8008c34:	20002b18 	.word	0x20002b18

08008c38 <xTaskCreateStatic>:
	{
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008c40:	b945      	cbnz	r5, 8008c54 <xTaskCreateStatic+0x1c>
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	e7fe      	b.n	8008c52 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008c54:	b944      	cbnz	r4, 8008c68 <xTaskCreateStatic+0x30>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	e7fe      	b.n	8008c66 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c68:	26a0      	movs	r6, #160	; 0xa0
 8008c6a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c6c:	9e05      	ldr	r6, [sp, #20]
 8008c6e:	2ea0      	cmp	r6, #160	; 0xa0
 8008c70:	d008      	beq.n	8008c84 <xTaskCreateStatic+0x4c>
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	e7fe      	b.n	8008c82 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c84:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c86:	2502      	movs	r5, #2
 8008c88:	f884 509d 	strb.w	r5, [r4, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c8c:	ad04      	add	r5, sp, #16
 8008c8e:	9501      	str	r5, [sp, #4]
 8008c90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008c92:	9402      	str	r4, [sp, #8]
 8008c94:	9500      	str	r5, [sp, #0]
 8008c96:	f7ff ff7f 	bl	8008b98 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7ff fe3e 	bl	800891c <prvAddNewTaskToReadyList>
	}
 8008ca0:	9804      	ldr	r0, [sp, #16]
 8008ca2:	b006      	add	sp, #24
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}

08008ca6 <xTaskCreate>:
	{
 8008ca6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008caa:	4607      	mov	r7, r0
 8008cac:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cae:	0090      	lsls	r0, r2, #2
	{
 8008cb0:	4688      	mov	r8, r1
 8008cb2:	4616      	mov	r6, r2
 8008cb4:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb6:	f001 f95d 	bl	8009f74 <pvPortMalloc>
			if( pxStack != NULL )
 8008cba:	4605      	mov	r5, r0
 8008cbc:	b1e8      	cbz	r0, 8008cfa <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008cbe:	20a0      	movs	r0, #160	; 0xa0
 8008cc0:	f001 f958 	bl	8009f74 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	b1a8      	cbz	r0, 8008cf4 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f880 309d 	strb.w	r3, [r0, #157]	; 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008cd0:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	4641      	mov	r1, r8
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	4638      	mov	r0, r7
 8008ce0:	464b      	mov	r3, r9
 8008ce2:	f7ff ff59 	bl	8008b98 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f7ff fe18 	bl	800891c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cec:	2001      	movs	r0, #1
	}
 8008cee:	b005      	add	sp, #20
 8008cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	f001 f9cf 	bl	800a098 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008cfe:	e7f6      	b.n	8008cee <xTaskCreate+0x48>

08008d00 <vTaskResume>:
	{
 8008d00:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8008d02:	4604      	mov	r4, r0
 8008d04:	b940      	cbnz	r0, 8008d18 <vTaskResume+0x18>
 8008d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	e7fe      	b.n	8008d16 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8008d18:	4d17      	ldr	r5, [pc, #92]	; (8008d78 <vTaskResume+0x78>)
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	4283      	cmp	r3, r0
 8008d1e:	d02a      	beq.n	8008d76 <vTaskResume+0x76>
			taskENTER_CRITICAL();
 8008d20:	f000 fff8 	bl	8009d14 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008d24:	4620      	mov	r0, r4
 8008d26:	f7ff febb 	bl	8008aa0 <prvTaskIsTaskSuspended>
 8008d2a:	b300      	cbz	r0, 8008d6e <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8008d2c:	1d26      	adds	r6, r4, #4
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f7ff fa74 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d34:	2301      	movs	r3, #1
 8008d36:	4911      	ldr	r1, [pc, #68]	; (8008d7c <vTaskResume+0x7c>)
 8008d38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d3a:	6808      	ldr	r0, [r1, #0]
 8008d3c:	4093      	lsls	r3, r2
 8008d3e:	4303      	orrs	r3, r0
 8008d40:	2014      	movs	r0, #20
 8008d42:	600b      	str	r3, [r1, #0]
 8008d44:	4b0e      	ldr	r3, [pc, #56]	; (8008d80 <vTaskResume+0x80>)
 8008d46:	4631      	mov	r1, r6
 8008d48:	fb00 3002 	mla	r0, r0, r2, r3
 8008d4c:	f7ff fa43 	bl	80081d6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d309      	bcc.n	8008d6e <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 8008d5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	f3bf 8f6f 	isb	sy
	}
 8008d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8008d72:	f000 bfef 	b.w	8009d54 <vPortExitCritical>
	}
 8008d76:	bd70      	pop	{r4, r5, r6, pc}
 8008d78:	200018cc 	.word	0x200018cc
 8008d7c:	20001978 	.word	0x20001978
 8008d80:	200018d8 	.word	0x200018d8

08008d84 <xTaskResumeFromISR>:
	{
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8008d86:	4605      	mov	r5, r0
 8008d88:	b940      	cbnz	r0, 8008d9c <xTaskResumeFromISR+0x18>
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	e7fe      	b.n	8008d9a <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d9c:	f001 f896 	bl	8009ecc <vPortValidateInterruptPriority>
	__asm volatile
 8008da0:	f3ef 8711 	mrs	r7, BASEPRI
 8008da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8008db4:	4628      	mov	r0, r5
 8008db6:	f7ff fe73 	bl	8008aa0 <prvTaskIsTaskSuspended>
 8008dba:	4604      	mov	r4, r0
 8008dbc:	b1e0      	cbz	r0, 8008df8 <xTaskResumeFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dbe:	4b14      	ldr	r3, [pc, #80]	; (8008e10 <xTaskResumeFromISR+0x8c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	b9eb      	cbnz	r3, 8008e00 <xTaskResumeFromISR+0x7c>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dc4:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <xTaskResumeFromISR+0x90>)
 8008dc6:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8008dc8:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dca:	1d2e      	adds	r6, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dce:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	bf34      	ite	cc
 8008dd4:	2400      	movcc	r4, #0
 8008dd6:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dd8:	f7ff fa20 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ddc:	2301      	movs	r3, #1
 8008dde:	490e      	ldr	r1, [pc, #56]	; (8008e18 <xTaskResumeFromISR+0x94>)
 8008de0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8008de2:	6808      	ldr	r0, [r1, #0]
 8008de4:	4093      	lsls	r3, r2
 8008de6:	4303      	orrs	r3, r0
 8008de8:	2014      	movs	r0, #20
 8008dea:	600b      	str	r3, [r1, #0]
 8008dec:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <xTaskResumeFromISR+0x98>)
 8008dee:	4631      	mov	r1, r6
 8008df0:	fb00 3002 	mla	r0, r0, r2, r3
 8008df4:	f7ff f9ef 	bl	80081d6 <vListInsertEnd>
	__asm volatile
 8008df8:	f387 8811 	msr	BASEPRI, r7
	}
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008e00:	4807      	ldr	r0, [pc, #28]	; (8008e20 <xTaskResumeFromISR+0x9c>)
 8008e02:	f105 0118 	add.w	r1, r5, #24
 8008e06:	f7ff f9e6 	bl	80081d6 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	e7f4      	b.n	8008df8 <xTaskResumeFromISR+0x74>
 8008e0e:	bf00      	nop
 8008e10:	20001970 	.word	0x20001970
 8008e14:	200018cc 	.word	0x200018cc
 8008e18:	20001978 	.word	0x20001978
 8008e1c:	200018d8 	.word	0x200018d8
 8008e20:	200019ac 	.word	0x200019ac

08008e24 <vTaskStartScheduler>:
{
 8008e24:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e26:	2400      	movs	r4, #0
{
 8008e28:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e2a:	aa07      	add	r2, sp, #28
 8008e2c:	a906      	add	r1, sp, #24
 8008e2e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e30:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e34:	f7f9 fbb0 	bl	8002598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	9a07      	ldr	r2, [sp, #28]
 8008e3c:	9302      	str	r3, [sp, #8]
 8008e3e:	9b06      	ldr	r3, [sp, #24]
 8008e40:	4919      	ldr	r1, [pc, #100]	; (8008ea8 <vTaskStartScheduler+0x84>)
 8008e42:	e9cd 4300 	strd	r4, r3, [sp]
 8008e46:	4819      	ldr	r0, [pc, #100]	; (8008eac <vTaskStartScheduler+0x88>)
 8008e48:	4623      	mov	r3, r4
 8008e4a:	f7ff fef5 	bl	8008c38 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008e4e:	b340      	cbz	r0, 8008ea2 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8008e50:	f000 fd22 	bl	8009898 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008e54:	2801      	cmp	r0, #1
 8008e56:	d119      	bne.n	8008e8c <vTaskStartScheduler+0x68>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e68:	4b11      	ldr	r3, [pc, #68]	; (8008eb0 <vTaskStartScheduler+0x8c>)
 8008e6a:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <vTaskStartScheduler+0x90>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	334c      	adds	r3, #76	; 0x4c
 8008e70:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008e72:	f04f 32ff 	mov.w	r2, #4294967295
 8008e76:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <vTaskStartScheduler+0x94>)
 8008e78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e7a:	4b10      	ldr	r3, [pc, #64]	; (8008ebc <vTaskStartScheduler+0x98>)
 8008e7c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008e7e:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <vTaskStartScheduler+0x9c>)
 8008e80:	601c      	str	r4, [r3, #0]
}
 8008e82:	b008      	add	sp, #32
 8008e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008e88:	f000 bfc4 	b.w	8009e14 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d108      	bne.n	8008ea2 <vTaskStartScheduler+0x7e>
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	e7fe      	b.n	8008ea0 <vTaskStartScheduler+0x7c>
}
 8008ea2:	b008      	add	sp, #32
 8008ea4:	bd10      	pop	{r4, pc}
 8008ea6:	bf00      	nop
 8008ea8:	0800b919 	.word	0x0800b919
 8008eac:	08008b39 	.word	0x08008b39
 8008eb0:	200018cc 	.word	0x200018cc
 8008eb4:	20000068 	.word	0x20000068
 8008eb8:	200019a4 	.word	0x200019a4
 8008ebc:	200019c0 	.word	0x200019c0
 8008ec0:	200019ec 	.word	0x200019ec

08008ec4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008ec4:	4a02      	ldr	r2, [pc, #8]	; (8008ed0 <vTaskSuspendAll+0xc>)
 8008ec6:	6813      	ldr	r3, [r2, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	6013      	str	r3, [r2, #0]
}
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20001970 	.word	0x20001970

08008ed4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008ed4:	4b01      	ldr	r3, [pc, #4]	; (8008edc <xTaskGetTickCount+0x8>)
 8008ed6:	6818      	ldr	r0, [r3, #0]
}
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	200019ec 	.word	0x200019ec

08008ee0 <xTaskIncrementTick>:
{
 8008ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee4:	4b3c      	ldr	r3, [pc, #240]	; (8008fd8 <xTaskIncrementTick+0xf8>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d16e      	bne.n	8008fca <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008eec:	4b3b      	ldr	r3, [pc, #236]	; (8008fdc <xTaskIncrementTick+0xfc>)
 8008eee:	681d      	ldr	r5, [r3, #0]
 8008ef0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008ef2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ef4:	b9bd      	cbnz	r5, 8008f26 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008ef6:	4b3a      	ldr	r3, [pc, #232]	; (8008fe0 <xTaskIncrementTick+0x100>)
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	6812      	ldr	r2, [r2, #0]
 8008efc:	b142      	cbz	r2, 8008f10 <xTaskIncrementTick+0x30>
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	e7fe      	b.n	8008f0e <xTaskIncrementTick+0x2e>
 8008f10:	4a34      	ldr	r2, [pc, #208]	; (8008fe4 <xTaskIncrementTick+0x104>)
 8008f12:	6819      	ldr	r1, [r3, #0]
 8008f14:	6810      	ldr	r0, [r2, #0]
 8008f16:	6018      	str	r0, [r3, #0]
 8008f18:	6011      	str	r1, [r2, #0]
 8008f1a:	4a33      	ldr	r2, [pc, #204]	; (8008fe8 <xTaskIncrementTick+0x108>)
 8008f1c:	6813      	ldr	r3, [r2, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	f7ff fdd9 	bl	8008ad8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f26:	4e31      	ldr	r6, [pc, #196]	; (8008fec <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008f28:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f2a:	6833      	ldr	r3, [r6, #0]
 8008f2c:	4f30      	ldr	r7, [pc, #192]	; (8008ff0 <xTaskIncrementTick+0x110>)
 8008f2e:	42ab      	cmp	r3, r5
 8008f30:	d910      	bls.n	8008f54 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f32:	2214      	movs	r2, #20
 8008f34:	4b2f      	ldr	r3, [pc, #188]	; (8008ff4 <xTaskIncrementTick+0x114>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	4353      	muls	r3, r2
 8008f3c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	bf28      	it	cs
 8008f42:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008f44:	4b2c      	ldr	r3, [pc, #176]	; (8008ff8 <xTaskIncrementTick+0x118>)
 8008f46:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008f48:	2b00      	cmp	r3, #0
}
 8008f4a:	bf0c      	ite	eq
 8008f4c:	4620      	moveq	r0, r4
 8008f4e:	2001      	movne	r0, #1
 8008f50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f54:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008fe0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008f58:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8008ffc <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f5c:	f8da 3000 	ldr.w	r3, [sl]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	b91b      	cbnz	r3, 8008f6c <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f64:	f04f 33ff 	mov.w	r3, #4294967295
 8008f68:	6033      	str	r3, [r6, #0]
					break;
 8008f6a:	e7e2      	b.n	8008f32 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f6c:	f8da 3000 	ldr.w	r3, [sl]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f76:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008f7a:	4295      	cmp	r5, r2
 8008f7c:	d201      	bcs.n	8008f82 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008f7e:	6032      	str	r2, [r6, #0]
						break;
 8008f80:	e7d7      	b.n	8008f32 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f82:	f10b 0804 	add.w	r8, fp, #4
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7ff f948 	bl	800821c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f8c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008f90:	b11a      	cbz	r2, 8008f9a <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f92:	f10b 0018 	add.w	r0, fp, #24
 8008f96:	f7ff f941 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008fa0:	f8d9 3000 	ldr.w	r3, [r9]
 8008fa4:	4082      	lsls	r2, r0
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	f8c9 2000 	str.w	r2, [r9]
 8008fac:	2214      	movs	r2, #20
 8008fae:	4641      	mov	r1, r8
 8008fb0:	fb02 7000 	mla	r0, r2, r0, r7
 8008fb4:	f7ff f90f 	bl	80081d6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <xTaskIncrementTick+0x114>)
 8008fba:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008fbe:	6819      	ldr	r1, [r3, #0]
 8008fc0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	bf28      	it	cs
 8008fc6:	2401      	movcs	r4, #1
 8008fc8:	e7c8      	b.n	8008f5c <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008fca:	4a0d      	ldr	r2, [pc, #52]	; (8009000 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8008fcc:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008fce:	6813      	ldr	r3, [r2, #0]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	e7b6      	b.n	8008f44 <xTaskIncrementTick+0x64>
 8008fd6:	bf00      	nop
 8008fd8:	20001970 	.word	0x20001970
 8008fdc:	200019ec 	.word	0x200019ec
 8008fe0:	200018d0 	.word	0x200018d0
 8008fe4:	200018d4 	.word	0x200018d4
 8008fe8:	200019a8 	.word	0x200019a8
 8008fec:	200019a4 	.word	0x200019a4
 8008ff0:	200018d8 	.word	0x200018d8
 8008ff4:	200018cc 	.word	0x200018cc
 8008ff8:	200019f0 	.word	0x200019f0
 8008ffc:	20001978 	.word	0x20001978
 8009000:	2000196c 	.word	0x2000196c

08009004 <xTaskResumeAll>:
{
 8009004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8009008:	4c31      	ldr	r4, [pc, #196]	; (80090d0 <xTaskResumeAll+0xcc>)
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	b943      	cbnz	r3, 8009020 <xTaskResumeAll+0x1c>
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	e7fe      	b.n	800901e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009020:	f000 fe78 	bl	8009d14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	3b01      	subs	r3, #1
 8009028:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800902a:	6824      	ldr	r4, [r4, #0]
 800902c:	b12c      	cbz	r4, 800903a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800902e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009030:	f000 fe90 	bl	8009d54 <vPortExitCritical>
}
 8009034:	4620      	mov	r0, r4
 8009036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800903a:	4b26      	ldr	r3, [pc, #152]	; (80090d4 <xTaskResumeAll+0xd0>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f5      	beq.n	800902e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009042:	4d25      	ldr	r5, [pc, #148]	; (80090d8 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8009044:	4e25      	ldr	r6, [pc, #148]	; (80090dc <xTaskResumeAll+0xd8>)
 8009046:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80090e0 <xTaskResumeAll+0xdc>
 800904a:	e01f      	b.n	800908c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800904c:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 800904e:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009050:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009052:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009056:	f104 0018 	add.w	r0, r4, #24
 800905a:	f7ff f8df 	bl	800821c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800905e:	4648      	mov	r0, r9
 8009060:	f7ff f8dc 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009064:	2014      	movs	r0, #20
 8009066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009068:	6831      	ldr	r1, [r6, #0]
 800906a:	fa07 f302 	lsl.w	r3, r7, r2
 800906e:	430b      	orrs	r3, r1
 8009070:	fb00 8002 	mla	r0, r0, r2, r8
 8009074:	4649      	mov	r1, r9
 8009076:	6033      	str	r3, [r6, #0]
 8009078:	f7ff f8ad 	bl	80081d6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800907c:	4b19      	ldr	r3, [pc, #100]	; (80090e4 <xTaskResumeAll+0xe0>)
 800907e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	429a      	cmp	r2, r3
 8009086:	d301      	bcc.n	800908c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8009088:	4b17      	ldr	r3, [pc, #92]	; (80090e8 <xTaskResumeAll+0xe4>)
 800908a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1dc      	bne.n	800904c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009092:	b10c      	cbz	r4, 8009098 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8009094:	f7ff fd20 	bl	8008ad8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009098:	4d14      	ldr	r5, [pc, #80]	; (80090ec <xTaskResumeAll+0xe8>)
 800909a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800909c:	b144      	cbz	r4, 80090b0 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800909e:	2701      	movs	r7, #1
 80090a0:	4e11      	ldr	r6, [pc, #68]	; (80090e8 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 80090a2:	f7ff ff1d 	bl	8008ee0 <xTaskIncrementTick>
 80090a6:	b100      	cbz	r0, 80090aa <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80090a8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090aa:	3c01      	subs	r4, #1
 80090ac:	d1f9      	bne.n	80090a2 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80090ae:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80090b0:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <xTaskResumeAll+0xe4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0ba      	beq.n	800902e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80090b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80090bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80090cc:	2401      	movs	r4, #1
 80090ce:	e7af      	b.n	8009030 <xTaskResumeAll+0x2c>
 80090d0:	20001970 	.word	0x20001970
 80090d4:	20001964 	.word	0x20001964
 80090d8:	200019ac 	.word	0x200019ac
 80090dc:	20001978 	.word	0x20001978
 80090e0:	200018d8 	.word	0x200018d8
 80090e4:	200018cc 	.word	0x200018cc
 80090e8:	200019f0 	.word	0x200019f0
 80090ec:	2000196c 	.word	0x2000196c

080090f0 <vTaskDelayUntil>:
	{
 80090f0:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 80090f2:	b940      	cbnz	r0, 8009106 <vTaskDelayUntil+0x16>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	e7fe      	b.n	8009104 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009106:	b941      	cbnz	r1, 800911a <vTaskDelayUntil+0x2a>
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	e7fe      	b.n	8009118 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 800911a:	4b18      	ldr	r3, [pc, #96]	; (800917c <vTaskDelayUntil+0x8c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	b143      	cbz	r3, 8009132 <vTaskDelayUntil+0x42>
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	e7fe      	b.n	8009130 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8009132:	f7ff fec7 	bl	8008ec4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <vTaskDelayUntil+0x90>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009138:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 800913a:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800913c:	1863      	adds	r3, r4, r1
 800913e:	bf2c      	ite	cs
 8009140:	2101      	movcs	r1, #1
 8009142:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8009144:	4294      	cmp	r4, r2
 8009146:	d90f      	bls.n	8009168 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009148:	b979      	cbnz	r1, 800916a <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 800914a:	6003      	str	r3, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 800914c:	f7ff ff5a 	bl	8009004 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009150:	b948      	cbnz	r0, 8009166 <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8009152:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
	}
 8009166:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009168:	b909      	cbnz	r1, 800916e <vTaskDelayUntil+0x7e>
 800916a:	429a      	cmp	r2, r3
 800916c:	d2ed      	bcs.n	800914a <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 800916e:	6003      	str	r3, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009170:	2100      	movs	r1, #0
 8009172:	1a98      	subs	r0, r3, r2
 8009174:	f7ff fc50 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
 8009178:	e7e8      	b.n	800914c <vTaskDelayUntil+0x5c>
 800917a:	bf00      	nop
 800917c:	20001970 	.word	0x20001970
 8009180:	200019ec 	.word	0x200019ec

08009184 <vTaskDelay>:
	{
 8009184:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009186:	b950      	cbnz	r0, 800919e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8009188:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800918c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009190:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
	}
 800919c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800919e:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <vTaskDelay+0x44>)
 80091a0:	6819      	ldr	r1, [r3, #0]
 80091a2:	b141      	cbz	r1, 80091b6 <vTaskDelay+0x32>
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	e7fe      	b.n	80091b4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80091b6:	f7ff fe85 	bl	8008ec4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091ba:	f7ff fc2d 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80091be:	f7ff ff21 	bl	8009004 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80091c2:	2800      	cmp	r0, #0
 80091c4:	d0e0      	beq.n	8009188 <vTaskDelay+0x4>
 80091c6:	e7e9      	b.n	800919c <vTaskDelay+0x18>
 80091c8:	20001970 	.word	0x20001970

080091cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091cc:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <vTaskSwitchContext+0x6c>)
{
 80091ce:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	4b1a      	ldr	r3, [pc, #104]	; (800923c <vTaskSwitchContext+0x70>)
 80091d4:	b112      	cbz	r2, 80091dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80091d6:	2201      	movs	r2, #1
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80091dc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80091de:	4b18      	ldr	r3, [pc, #96]	; (8009240 <vTaskSwitchContext+0x74>)
 80091e0:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80091e2:	fab2 f282 	clz	r2, r2
 80091e6:	2314      	movs	r3, #20
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	f1c2 021f 	rsb	r2, r2, #31
 80091ee:	4353      	muls	r3, r2
 80091f0:	4914      	ldr	r1, [pc, #80]	; (8009244 <vTaskSwitchContext+0x78>)
 80091f2:	58cc      	ldr	r4, [r1, r3]
 80091f4:	18c8      	adds	r0, r1, r3
 80091f6:	b944      	cbnz	r4, 800920a <vTaskSwitchContext+0x3e>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	e7fe      	b.n	8009208 <vTaskSwitchContext+0x3c>
 800920a:	6844      	ldr	r4, [r0, #4]
 800920c:	3308      	adds	r3, #8
 800920e:	6864      	ldr	r4, [r4, #4]
 8009210:	440b      	add	r3, r1
 8009212:	429c      	cmp	r4, r3
 8009214:	bf08      	it	eq
 8009216:	6863      	ldreq	r3, [r4, #4]
 8009218:	6044      	str	r4, [r0, #4]
 800921a:	bf08      	it	eq
 800921c:	6043      	streq	r3, [r0, #4]
 800921e:	2314      	movs	r3, #20
 8009220:	fb03 1102 	mla	r1, r3, r2, r1
 8009224:	684b      	ldr	r3, [r1, #4]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <vTaskSwitchContext+0x7c>)
 800922a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a07      	ldr	r2, [pc, #28]	; (800924c <vTaskSwitchContext+0x80>)
 8009230:	334c      	adds	r3, #76	; 0x4c
 8009232:	6013      	str	r3, [r2, #0]
}
 8009234:	e7d1      	b.n	80091da <vTaskSwitchContext+0xe>
 8009236:	bf00      	nop
 8009238:	20001970 	.word	0x20001970
 800923c:	200019f0 	.word	0x200019f0
 8009240:	20001978 	.word	0x20001978
 8009244:	200018d8 	.word	0x200018d8
 8009248:	200018cc 	.word	0x200018cc
 800924c:	20000068 	.word	0x20000068

08009250 <vTaskSuspend>:
	{
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	4604      	mov	r4, r0
 8009254:	4d2d      	ldr	r5, [pc, #180]	; (800930c <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8009256:	f000 fd5d 	bl	8009d14 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800925a:	b904      	cbnz	r4, 800925e <vTaskSuspend+0xe>
 800925c:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800925e:	1d26      	adds	r6, r4, #4
 8009260:	4630      	mov	r0, r6
 8009262:	f7fe ffdb 	bl	800821c <uxListRemove>
 8009266:	b960      	cbnz	r0, 8009282 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009268:	2314      	movs	r3, #20
 800926a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800926c:	4a28      	ldr	r2, [pc, #160]	; (8009310 <vTaskSuspend+0xc0>)
 800926e:	4343      	muls	r3, r0
 8009270:	58d3      	ldr	r3, [r2, r3]
 8009272:	b933      	cbnz	r3, 8009282 <vTaskSuspend+0x32>
 8009274:	2201      	movs	r2, #1
 8009276:	4927      	ldr	r1, [pc, #156]	; (8009314 <vTaskSuspend+0xc4>)
 8009278:	4082      	lsls	r2, r0
 800927a:	680b      	ldr	r3, [r1, #0]
 800927c:	ea23 0302 	bic.w	r3, r3, r2
 8009280:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009284:	b11b      	cbz	r3, 800928e <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009286:	f104 0018 	add.w	r0, r4, #24
 800928a:	f7fe ffc7 	bl	800821c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800928e:	4631      	mov	r1, r6
 8009290:	4821      	ldr	r0, [pc, #132]	; (8009318 <vTaskSuspend+0xc8>)
 8009292:	f7fe ffa0 	bl	80081d6 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009296:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
		if( xSchedulerRunning != pdFALSE )
 800929a:	4e20      	ldr	r6, [pc, #128]	; (800931c <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800929c:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800929e:	bf04      	itt	eq
 80092a0:	2300      	moveq	r3, #0
 80092a2:	f884 309c 	strbeq.w	r3, [r4, #156]	; 0x9c
		taskEXIT_CRITICAL();
 80092a6:	f000 fd55 	bl	8009d54 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80092aa:	6833      	ldr	r3, [r6, #0]
 80092ac:	b12b      	cbz	r3, 80092ba <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 80092ae:	f000 fd31 	bl	8009d14 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80092b2:	f7ff fc11 	bl	8008ad8 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80092b6:	f000 fd4d 	bl	8009d54 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 80092ba:	682b      	ldr	r3, [r5, #0]
 80092bc:	42a3      	cmp	r3, r4
 80092be:	d117      	bne.n	80092f0 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 80092c0:	6833      	ldr	r3, [r6, #0]
 80092c2:	b1b3      	cbz	r3, 80092f2 <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 80092c4:	4b16      	ldr	r3, [pc, #88]	; (8009320 <vTaskSuspend+0xd0>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b143      	cbz	r3, 80092dc <vTaskSuspend+0x8c>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	e7fe      	b.n	80092da <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 80092dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80092e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
	}
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <vTaskSuspend+0xc8>)
 80092f4:	6811      	ldr	r1, [r2, #0]
 80092f6:	4a0b      	ldr	r2, [pc, #44]	; (8009324 <vTaskSuspend+0xd4>)
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	4291      	cmp	r1, r2
 80092fc:	d101      	bne.n	8009302 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 80092fe:	602b      	str	r3, [r5, #0]
 8009300:	e7f6      	b.n	80092f0 <vTaskSuspend+0xa0>
	}
 8009302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8009306:	f7ff bf61 	b.w	80091cc <vTaskSwitchContext>
 800930a:	bf00      	nop
 800930c:	200018cc 	.word	0x200018cc
 8009310:	200018d8 	.word	0x200018d8
 8009314:	20001978 	.word	0x20001978
 8009318:	200019c4 	.word	0x200019c4
 800931c:	200019c0 	.word	0x200019c0
 8009320:	20001970 	.word	0x20001970
 8009324:	20001964 	.word	0x20001964

08009328 <vTaskPlaceOnEventList>:
{
 8009328:	b510      	push	{r4, lr}
 800932a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800932c:	b940      	cbnz	r0, 8009340 <vTaskPlaceOnEventList+0x18>
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	f383 8811 	msr	BASEPRI, r3
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	f3bf 8f4f 	dsb	sy
 800933e:	e7fe      	b.n	800933e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009340:	4b05      	ldr	r3, [pc, #20]	; (8009358 <vTaskPlaceOnEventList+0x30>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	3118      	adds	r1, #24
 8009346:	f7fe ff52 	bl	80081ee <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800934a:	4620      	mov	r0, r4
}
 800934c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009350:	2101      	movs	r1, #1
 8009352:	f7ff bb61 	b.w	8008a18 <prvAddCurrentTaskToDelayedList>
 8009356:	bf00      	nop
 8009358:	200018cc 	.word	0x200018cc

0800935c <vTaskPlaceOnEventListRestricted>:
	{
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	460d      	mov	r5, r1
 8009360:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8009362:	b940      	cbnz	r0, 8009376 <vTaskPlaceOnEventListRestricted+0x1a>
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	e7fe      	b.n	8009374 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009376:	4b08      	ldr	r3, [pc, #32]	; (8009398 <vTaskPlaceOnEventListRestricted+0x3c>)
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	3118      	adds	r1, #24
 800937c:	f7fe ff2b 	bl	80081d6 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009380:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009382:	4621      	mov	r1, r4
 8009384:	bf08      	it	eq
 8009386:	4628      	moveq	r0, r5
	}
 8009388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800938c:	bf18      	it	ne
 800938e:	f04f 30ff 	movne.w	r0, #4294967295
 8009392:	f7ff bb41 	b.w	8008a18 <prvAddCurrentTaskToDelayedList>
 8009396:	bf00      	nop
 8009398:	200018cc 	.word	0x200018cc

0800939c <xTaskRemoveFromEventList>:
{
 800939c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800939e:	68c3      	ldr	r3, [r0, #12]
 80093a0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80093a2:	b944      	cbnz	r4, 80093b6 <xTaskRemoveFromEventList+0x1a>
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	e7fe      	b.n	80093b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093b6:	f104 0518 	add.w	r5, r4, #24
 80093ba:	4628      	mov	r0, r5
 80093bc:	f7fe ff2e 	bl	800821c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <xTaskRemoveFromEventList+0x6c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b9e3      	cbnz	r3, 8009400 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093c6:	1d25      	adds	r5, r4, #4
 80093c8:	4628      	mov	r0, r5
 80093ca:	f7fe ff27 	bl	800821c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093ce:	2301      	movs	r3, #1
 80093d0:	490e      	ldr	r1, [pc, #56]	; (800940c <xTaskRemoveFromEventList+0x70>)
 80093d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093d4:	6808      	ldr	r0, [r1, #0]
 80093d6:	4093      	lsls	r3, r2
 80093d8:	4303      	orrs	r3, r0
 80093da:	2014      	movs	r0, #20
 80093dc:	600b      	str	r3, [r1, #0]
 80093de:	4629      	mov	r1, r5
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <xTaskRemoveFromEventList+0x74>)
 80093e2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093e6:	f7fe fef6 	bl	80081d6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <xTaskRemoveFromEventList+0x78>)
 80093ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f2:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80093f4:	bf85      	ittet	hi
 80093f6:	2001      	movhi	r0, #1
 80093f8:	4b07      	ldrhi	r3, [pc, #28]	; (8009418 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 80093fa:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80093fc:	6018      	strhi	r0, [r3, #0]
}
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009400:	4629      	mov	r1, r5
 8009402:	4806      	ldr	r0, [pc, #24]	; (800941c <xTaskRemoveFromEventList+0x80>)
 8009404:	e7ef      	b.n	80093e6 <xTaskRemoveFromEventList+0x4a>
 8009406:	bf00      	nop
 8009408:	20001970 	.word	0x20001970
 800940c:	20001978 	.word	0x20001978
 8009410:	200018d8 	.word	0x200018d8
 8009414:	200018cc 	.word	0x200018cc
 8009418:	200019f0 	.word	0x200019f0
 800941c:	200019ac 	.word	0x200019ac

08009420 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009420:	4b03      	ldr	r3, [pc, #12]	; (8009430 <vTaskInternalSetTimeOutState+0x10>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009426:	4b03      	ldr	r3, [pc, #12]	; (8009434 <vTaskInternalSetTimeOutState+0x14>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6043      	str	r3, [r0, #4]
}
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	200019a8 	.word	0x200019a8
 8009434:	200019ec 	.word	0x200019ec

08009438 <xTaskCheckForTimeOut>:
{
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800943c:	4605      	mov	r5, r0
 800943e:	b940      	cbnz	r0, 8009452 <xTaskCheckForTimeOut+0x1a>
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	e7fe      	b.n	8009450 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8009452:	b941      	cbnz	r1, 8009466 <xTaskCheckForTimeOut+0x2e>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	e7fe      	b.n	8009464 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009466:	f000 fc55 	bl	8009d14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800946a:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <xTaskCheckForTimeOut+0x70>)
 800946c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	d010      	beq.n	8009496 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009474:	480d      	ldr	r0, [pc, #52]	; (80094ac <xTaskCheckForTimeOut+0x74>)
 8009476:	682e      	ldr	r6, [r5, #0]
 8009478:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800947a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800947c:	4286      	cmp	r6, r0
 800947e:	d001      	beq.n	8009484 <xTaskCheckForTimeOut+0x4c>
 8009480:	428a      	cmp	r2, r1
 8009482:	d90f      	bls.n	80094a4 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009484:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009486:	4283      	cmp	r3, r0
 8009488:	d90a      	bls.n	80094a0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800948a:	1a5b      	subs	r3, r3, r1
 800948c:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800948e:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8009490:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009492:	f7ff ffc5 	bl	8009420 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009496:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009498:	f000 fc5c 	bl	8009d54 <vPortExitCritical>
}
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80094a4:	2401      	movs	r4, #1
 80094a6:	e7f7      	b.n	8009498 <xTaskCheckForTimeOut+0x60>
 80094a8:	200019ec 	.word	0x200019ec
 80094ac:	200019a8 	.word	0x200019a8

080094b0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80094b0:	2201      	movs	r2, #1
 80094b2:	4b01      	ldr	r3, [pc, #4]	; (80094b8 <vTaskMissedYield+0x8>)
 80094b4:	601a      	str	r2, [r3, #0]
}
 80094b6:	4770      	bx	lr
 80094b8:	200019f0 	.word	0x200019f0

080094bc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <xTaskGetSchedulerState+0x18>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	b133      	cbz	r3, 80094d0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <xTaskGetSchedulerState+0x1c>)
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	fab0 f080 	clz	r0, r0
 80094ca:	0940      	lsrs	r0, r0, #5
 80094cc:	0040      	lsls	r0, r0, #1
 80094ce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094d0:	2001      	movs	r0, #1
	}
 80094d2:	4770      	bx	lr
 80094d4:	200019c0 	.word	0x200019c0
 80094d8:	20001970 	.word	0x20001970

080094dc <xTaskPriorityDisinherit>:
	{
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80094de:	4604      	mov	r4, r0
 80094e0:	b908      	cbnz	r0, 80094e6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80094e2:	2000      	movs	r0, #0
	}
 80094e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80094e6:	4b22      	ldr	r3, [pc, #136]	; (8009570 <xTaskPriorityDisinherit+0x94>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4283      	cmp	r3, r0
 80094ec:	d008      	beq.n	8009500 <xTaskPriorityDisinherit+0x24>
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	e7fe      	b.n	80094fe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009502:	b943      	cbnz	r3, 8009516 <xTaskPriorityDisinherit+0x3a>
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	e7fe      	b.n	8009514 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009516:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009518:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800951a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800951c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800951e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009520:	d0df      	beq.n	80094e2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1dd      	bne.n	80094e2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009526:	1d06      	adds	r6, r0, #4
 8009528:	4630      	mov	r0, r6
 800952a:	f7fe fe77 	bl	800821c <uxListRemove>
 800952e:	4f11      	ldr	r7, [pc, #68]	; (8009574 <xTaskPriorityDisinherit+0x98>)
 8009530:	4a11      	ldr	r2, [pc, #68]	; (8009578 <xTaskPriorityDisinherit+0x9c>)
 8009532:	b950      	cbnz	r0, 800954a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009534:	2314      	movs	r3, #20
 8009536:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009538:	434b      	muls	r3, r1
 800953a:	58fb      	ldr	r3, [r7, r3]
 800953c:	b92b      	cbnz	r3, 800954a <xTaskPriorityDisinherit+0x6e>
 800953e:	2501      	movs	r5, #1
 8009540:	6813      	ldr	r3, [r2, #0]
 8009542:	408d      	lsls	r5, r1
 8009544:	ea23 0305 	bic.w	r3, r3, r5
 8009548:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800954a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 800954c:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800954e:	f1c3 0107 	rsb	r1, r3, #7
 8009552:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009554:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8009556:	2401      	movs	r4, #1
 8009558:	6811      	ldr	r1, [r2, #0]
 800955a:	fa04 f503 	lsl.w	r5, r4, r3
 800955e:	fb00 7003 	mla	r0, r0, r3, r7
 8009562:	430d      	orrs	r5, r1
 8009564:	4631      	mov	r1, r6
 8009566:	6015      	str	r5, [r2, #0]
 8009568:	f7fe fe35 	bl	80081d6 <vListInsertEnd>
					xReturn = pdTRUE;
 800956c:	4620      	mov	r0, r4
		return xReturn;
 800956e:	e7b9      	b.n	80094e4 <xTaskPriorityDisinherit+0x8>
 8009570:	200018cc 	.word	0x200018cc
 8009574:	200018d8 	.word	0x200018d8
 8009578:	20001978 	.word	0x20001978

0800957c <xTaskNotifyWait>:
	{
 800957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009580:	4c22      	ldr	r4, [pc, #136]	; (800960c <xTaskNotifyWait+0x90>)
	{
 8009582:	461e      	mov	r6, r3
 8009584:	4680      	mov	r8, r0
 8009586:	460f      	mov	r7, r1
 8009588:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800958a:	f000 fbc3 	bl	8009d14 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8009594:	2b02      	cmp	r3, #2
 8009596:	d018      	beq.n	80095ca <xTaskNotifyWait+0x4e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009598:	2101      	movs	r1, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 80095a0:	ea23 0308 	bic.w	r3, r3, r8
 80095a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
				if( xTicksToWait > ( TickType_t ) 0 )
 80095ae:	b166      	cbz	r6, 80095ca <xTaskNotifyWait+0x4e>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80095b0:	4630      	mov	r0, r6
 80095b2:	f7ff fa31 	bl	8008a18 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80095b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095be:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80095ca:	f000 fbc3 	bl	8009d54 <vPortExitCritical>
		taskENTER_CRITICAL();
 80095ce:	f000 fba1 	bl	8009d14 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80095d2:	b11d      	cbz	r5, 80095dc <xTaskNotifyWait+0x60>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095da:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80095e2:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80095e4:	bf03      	ittte	eq
 80095e6:	6822      	ldreq	r2, [r4, #0]
				xReturn = pdTRUE;
 80095e8:	2501      	moveq	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80095ea:	f8d2 3098 	ldreq.w	r3, [r2, #152]	; 0x98
				xReturn = pdFALSE;
 80095ee:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80095f0:	bf04      	itt	eq
 80095f2:	43bb      	biceq	r3, r7
 80095f4:	f8c2 3098 	streq.w	r3, [r2, #152]	; 0x98
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095f8:	2200      	movs	r2, #0
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		taskEXIT_CRITICAL();
 8009600:	f000 fba8 	bl	8009d54 <vPortExitCritical>
	}
 8009604:	4628      	mov	r0, r5
 8009606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800960a:	bf00      	nop
 800960c:	200018cc 	.word	0x200018cc

08009610 <xTaskGenericNotify>:
	{
 8009610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009612:	460f      	mov	r7, r1
 8009614:	4616      	mov	r6, r2
 8009616:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8009618:	4604      	mov	r4, r0
 800961a:	b940      	cbnz	r0, 800962e <xTaskGenericNotify+0x1e>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	e7fe      	b.n	800962c <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 800962e:	f000 fb71 	bl	8009d14 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009632:	b115      	cbz	r5, 800963a <xTaskGenericNotify+0x2a>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009634:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009638:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800963a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800963c:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009640:	1e72      	subs	r2, r6, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009642:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009644:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 8009648:	2a03      	cmp	r2, #3
 800964a:	d808      	bhi.n	800965e <xTaskGenericNotify+0x4e>
 800964c:	e8df f002 	tbb	[pc, r2]
 8009650:	12140e02 	.word	0x12140e02
					pxTCB->ulNotifiedValue |= ulValue;
 8009654:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009658:	433b      	orrs	r3, r7
					( pxTCB->ulNotifiedValue )++;
 800965a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800965e:	2d01      	cmp	r5, #1
 8009660:	d00d      	beq.n	800967e <xTaskGenericNotify+0x6e>
	{
 8009662:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8009664:	f000 fb76 	bl	8009d54 <vPortExitCritical>
	}
 8009668:	4628      	mov	r0, r5
 800966a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800966c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009670:	3301      	adds	r3, #1
 8009672:	e7f2      	b.n	800965a <xTaskGenericNotify+0x4a>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009674:	2d02      	cmp	r5, #2
 8009676:	d030      	beq.n	80096da <xTaskGenericNotify+0xca>
						pxTCB->ulNotifiedValue = ulValue;
 8009678:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 800967c:	e7ef      	b.n	800965e <xTaskGenericNotify+0x4e>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800967e:	1d26      	adds	r6, r4, #4
 8009680:	4630      	mov	r0, r6
 8009682:	f7fe fdcb 	bl	800821c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009686:	4916      	ldr	r1, [pc, #88]	; (80096e0 <xTaskGenericNotify+0xd0>)
 8009688:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800968a:	6808      	ldr	r0, [r1, #0]
 800968c:	fa05 f302 	lsl.w	r3, r5, r2
 8009690:	4303      	orrs	r3, r0
 8009692:	2014      	movs	r0, #20
 8009694:	600b      	str	r3, [r1, #0]
 8009696:	4b13      	ldr	r3, [pc, #76]	; (80096e4 <xTaskGenericNotify+0xd4>)
 8009698:	4631      	mov	r1, r6
 800969a:	fb00 3002 	mla	r0, r0, r2, r3
 800969e:	f7fe fd9a 	bl	80081d6 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80096a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096a4:	b143      	cbz	r3, 80096b8 <xTaskGenericNotify+0xa8>
 80096a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	e7fe      	b.n	80096b6 <xTaskGenericNotify+0xa6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <xTaskGenericNotify+0xd8>)
 80096ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d9ce      	bls.n	8009662 <xTaskGenericNotify+0x52>
					taskYIELD_IF_USING_PREEMPTION();
 80096c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	e7c4      	b.n	8009664 <xTaskGenericNotify+0x54>
						xReturn = pdFAIL;
 80096da:	2500      	movs	r5, #0
 80096dc:	e7c2      	b.n	8009664 <xTaskGenericNotify+0x54>
 80096de:	bf00      	nop
 80096e0:	20001978 	.word	0x20001978
 80096e4:	200018d8 	.word	0x200018d8
 80096e8:	200018cc 	.word	0x200018cc

080096ec <xTaskGenericNotifyFromISR>:
	{
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	9f08      	ldr	r7, [sp, #32]
 80096f2:	4689      	mov	r9, r1
 80096f4:	4690      	mov	r8, r2
 80096f6:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 80096f8:	4604      	mov	r4, r0
 80096fa:	b940      	cbnz	r0, 800970e <xTaskGenericNotifyFromISR+0x22>
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	e7fe      	b.n	800970c <xTaskGenericNotifyFromISR+0x20>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970e:	f000 fbdd 	bl	8009ecc <vPortValidateInterruptPriority>
	__asm volatile
 8009712:	f3ef 8611 	mrs	r6, BASEPRI
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 8009726:	b115      	cbz	r5, 800972e <xTaskGenericNotifyFromISR+0x42>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009728:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800972c:	602b      	str	r3, [r5, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800972e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009730:	f894 509c 	ldrb.w	r5, [r4, #156]	; 0x9c
			switch( eAction )
 8009734:	f108 32ff 	add.w	r2, r8, #4294967295
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009738:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800973a:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
			switch( eAction )
 800973e:	2a03      	cmp	r2, #3
 8009740:	d809      	bhi.n	8009756 <xTaskGenericNotifyFromISR+0x6a>
 8009742:	e8df f002 	tbb	[pc, r2]
 8009746:	0f02      	.short	0x0f02
 8009748:	1315      	.short	0x1315
					pxTCB->ulNotifiedValue |= ulValue;
 800974a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800974e:	ea43 0309 	orr.w	r3, r3, r9
					( pxTCB->ulNotifiedValue )++;
 8009752:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009756:	2d01      	cmp	r5, #1
 8009758:	d00d      	beq.n	8009776 <xTaskGenericNotifyFromISR+0x8a>
	{
 800975a:	2001      	movs	r0, #1
	__asm volatile
 800975c:	f386 8811 	msr	BASEPRI, r6
	}
 8009760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					( pxTCB->ulNotifiedValue )++;
 8009764:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8009768:	3301      	adds	r3, #1
 800976a:	e7f2      	b.n	8009752 <xTaskGenericNotifyFromISR+0x66>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800976c:	2d02      	cmp	r5, #2
 800976e:	d033      	beq.n	80097d8 <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
 8009770:	f8c4 9098 	str.w	r9, [r4, #152]	; 0x98
 8009774:	e7ef      	b.n	8009756 <xTaskGenericNotifyFromISR+0x6a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009778:	b143      	cbz	r3, 800978c <xTaskGenericNotifyFromISR+0xa0>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	e7fe      	b.n	800978a <xTaskGenericNotifyFromISR+0x9e>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978c:	4b13      	ldr	r3, [pc, #76]	; (80097dc <xTaskGenericNotifyFromISR+0xf0>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	b9db      	cbnz	r3, 80097ca <xTaskGenericNotifyFromISR+0xde>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009792:	f104 0804 	add.w	r8, r4, #4
 8009796:	4640      	mov	r0, r8
 8009798:	f7fe fd40 	bl	800821c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800979c:	4a10      	ldr	r2, [pc, #64]	; (80097e0 <xTaskGenericNotifyFromISR+0xf4>)
 800979e:	2014      	movs	r0, #20
 80097a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097a2:	6811      	ldr	r1, [r2, #0]
 80097a4:	409d      	lsls	r5, r3
 80097a6:	430d      	orrs	r5, r1
 80097a8:	4641      	mov	r1, r8
 80097aa:	6015      	str	r5, [r2, #0]
 80097ac:	4a0d      	ldr	r2, [pc, #52]	; (80097e4 <xTaskGenericNotifyFromISR+0xf8>)
 80097ae:	fb00 2003 	mla	r0, r0, r3, r2
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097b2:	f7fe fd10 	bl	80081d6 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097b6:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <xTaskGenericNotifyFromISR+0xfc>)
 80097b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097be:	429a      	cmp	r2, r3
 80097c0:	d9cb      	bls.n	800975a <xTaskGenericNotifyFromISR+0x6e>
					if( pxHigherPriorityTaskWoken != NULL )
 80097c2:	2001      	movs	r0, #1
 80097c4:	b12f      	cbz	r7, 80097d2 <xTaskGenericNotifyFromISR+0xe6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097c6:	6038      	str	r0, [r7, #0]
 80097c8:	e7c8      	b.n	800975c <xTaskGenericNotifyFromISR+0x70>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097ca:	4808      	ldr	r0, [pc, #32]	; (80097ec <xTaskGenericNotifyFromISR+0x100>)
 80097cc:	f104 0118 	add.w	r1, r4, #24
 80097d0:	e7ef      	b.n	80097b2 <xTaskGenericNotifyFromISR+0xc6>
						xYieldPending = pdTRUE;
 80097d2:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <xTaskGenericNotifyFromISR+0x104>)
 80097d4:	6018      	str	r0, [r3, #0]
 80097d6:	e7c1      	b.n	800975c <xTaskGenericNotifyFromISR+0x70>
						xReturn = pdFAIL;
 80097d8:	2000      	movs	r0, #0
 80097da:	e7bf      	b.n	800975c <xTaskGenericNotifyFromISR+0x70>
 80097dc:	20001970 	.word	0x20001970
 80097e0:	20001978 	.word	0x20001978
 80097e4:	200018d8 	.word	0x200018d8
 80097e8:	200018cc 	.word	0x200018cc
 80097ec:	200019ac 	.word	0x200019ac
 80097f0:	200019f0 	.word	0x200019f0

080097f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80097f6:	4c11      	ldr	r4, [pc, #68]	; (800983c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80097f8:	f000 fa8c 	bl	8009d14 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80097fc:	6825      	ldr	r5, [r4, #0]
 80097fe:	b9bd      	cbnz	r5, 8009830 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009800:	4f0f      	ldr	r7, [pc, #60]	; (8009840 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009802:	4e10      	ldr	r6, [pc, #64]	; (8009844 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009804:	4638      	mov	r0, r7
 8009806:	f7fe fcd8 	bl	80081ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800980a:	4630      	mov	r0, r6
 800980c:	f7fe fcd5 	bl	80081ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009810:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009812:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8009814:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009816:	4b0d      	ldr	r3, [pc, #52]	; (800984c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009818:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800981a:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800981c:	4a0c      	ldr	r2, [pc, #48]	; (8009850 <prvCheckForValidListAndQueue+0x5c>)
 800981e:	4b0d      	ldr	r3, [pc, #52]	; (8009854 <prvCheckForValidListAndQueue+0x60>)
 8009820:	9500      	str	r5, [sp, #0]
 8009822:	f7fe fdd6 	bl	80083d2 <xQueueGenericCreateStatic>
 8009826:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009828:	b110      	cbz	r0, 8009830 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800982a:	490b      	ldr	r1, [pc, #44]	; (8009858 <prvCheckForValidListAndQueue+0x64>)
 800982c:	f7ff f840 	bl	80088b0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009830:	b003      	add	sp, #12
 8009832:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009836:	f000 ba8d 	b.w	8009d54 <vPortExitCritical>
 800983a:	bf00      	nop
 800983c:	20001ae8 	.word	0x20001ae8
 8009840:	20001a74 	.word	0x20001a74
 8009844:	20001a88 	.word	0x20001a88
 8009848:	200019f4 	.word	0x200019f4
 800984c:	200019f8 	.word	0x200019f8
 8009850:	200019fc 	.word	0x200019fc
 8009854:	20001aa0 	.word	0x20001aa0
 8009858:	0800b91e 	.word	0x0800b91e

0800985c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800985c:	4291      	cmp	r1, r2
{
 800985e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009860:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009862:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009864:	d80a      	bhi.n	800987c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009866:	1ad2      	subs	r2, r2, r3
 8009868:	6983      	ldr	r3, [r0, #24]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20d      	bcs.n	800988a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <prvInsertTimerInActiveList+0x34>)
 8009870:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009872:	6818      	ldr	r0, [r3, #0]
 8009874:	f7fe fcbb 	bl	80081ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009878:	2000      	movs	r0, #0
}
 800987a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800987c:	429a      	cmp	r2, r3
 800987e:	d201      	bcs.n	8009884 <prvInsertTimerInActiveList+0x28>
 8009880:	4299      	cmp	r1, r3
 8009882:	d202      	bcs.n	800988a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009884:	4b03      	ldr	r3, [pc, #12]	; (8009894 <prvInsertTimerInActiveList+0x38>)
 8009886:	1d01      	adds	r1, r0, #4
 8009888:	e7f3      	b.n	8009872 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800988a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800988c:	e7f5      	b.n	800987a <prvInsertTimerInActiveList+0x1e>
 800988e:	bf00      	nop
 8009890:	200019f8 	.word	0x200019f8
 8009894:	200019f4 	.word	0x200019f4

08009898 <xTimerCreateTimerTask>:
{
 8009898:	b510      	push	{r4, lr}
 800989a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800989c:	f7ff ffaa 	bl	80097f4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80098a0:	4b12      	ldr	r3, [pc, #72]	; (80098ec <xTimerCreateTimerTask+0x54>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	b1b3      	cbz	r3, 80098d4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80098a6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098a8:	aa07      	add	r2, sp, #28
 80098aa:	a906      	add	r1, sp, #24
 80098ac:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80098ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098b2:	f7f8 fe7d 	bl	80025b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098b6:	9b05      	ldr	r3, [sp, #20]
 80098b8:	9a07      	ldr	r2, [sp, #28]
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	9b06      	ldr	r3, [sp, #24]
 80098be:	490c      	ldr	r1, [pc, #48]	; (80098f0 <xTimerCreateTimerTask+0x58>)
 80098c0:	9301      	str	r3, [sp, #4]
 80098c2:	2302      	movs	r3, #2
 80098c4:	480b      	ldr	r0, [pc, #44]	; (80098f4 <xTimerCreateTimerTask+0x5c>)
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	4623      	mov	r3, r4
 80098ca:	f7ff f9b5 	bl	8008c38 <xTaskCreateStatic>
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <xTimerCreateTimerTask+0x60>)
 80098d0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80098d2:	b940      	cbnz	r0, 80098e6 <xTimerCreateTimerTask+0x4e>
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80098e4:	e7fe      	b.n	80098e4 <xTimerCreateTimerTask+0x4c>
}
 80098e6:	2001      	movs	r0, #1
 80098e8:	b008      	add	sp, #32
 80098ea:	bd10      	pop	{r4, pc}
 80098ec:	20001ae8 	.word	0x20001ae8
 80098f0:	0800b923 	.word	0x0800b923
 80098f4:	08009ac1 	.word	0x08009ac1
 80098f8:	20001aec 	.word	0x20001aec

080098fc <xTimerCreate>:
	{
 80098fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009900:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009902:	202c      	movs	r0, #44	; 0x2c
	{
 8009904:	460d      	mov	r5, r1
 8009906:	4617      	mov	r7, r2
 8009908:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800990a:	f000 fb33 	bl	8009f74 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800990e:	4604      	mov	r4, r0
 8009910:	b1c0      	cbz	r0, 8009944 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009912:	b945      	cbnz	r5, 8009926 <xTimerCreate+0x2a>
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	e7fe      	b.n	8009924 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8009926:	f7ff ff65 	bl	80097f4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800992a:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800992c:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009930:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8009932:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009936:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009938:	1d20      	adds	r0, r4, #4
 800993a:	f7fe fc49 	bl	80081d0 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800993e:	2300      	movs	r3, #0
 8009940:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009944:	4620      	mov	r0, r4
 8009946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800994a <xTimerCreateStatic>:
	{
 800994a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800994e:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009950:	232c      	movs	r3, #44	; 0x2c
 8009952:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009954:	9b01      	ldr	r3, [sp, #4]
	{
 8009956:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8009958:	2b2c      	cmp	r3, #44	; 0x2c
	{
 800995a:	460d      	mov	r5, r1
 800995c:	4617      	mov	r7, r2
 800995e:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8009960:	d008      	beq.n	8009974 <xTimerCreateStatic+0x2a>
 8009962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009966:	f383 8811 	msr	BASEPRI, r3
 800996a:	f3bf 8f6f 	isb	sy
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	e7fe      	b.n	8009972 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8009974:	b944      	cbnz	r4, 8009988 <xTimerCreateStatic+0x3e>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	e7fe      	b.n	8009986 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009988:	b941      	cbnz	r1, 800999c <xTimerCreateStatic+0x52>
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	e7fe      	b.n	800999a <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 800999c:	f7ff ff2a 	bl	80097f4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80099a0:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80099a2:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80099a4:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 80099a6:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 80099aa:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 80099ae:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80099b0:	f7fe fc0e 	bl	80081d0 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80099b4:	2301      	movs	r3, #1
	}
 80099b6:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80099b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 80099bc:	b002      	add	sp, #8
 80099be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080099c4 <xTimerGenericCommand>:
{
 80099c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80099c6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80099c8:	4604      	mov	r4, r0
{
 80099ca:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80099cc:	b940      	cbnz	r0, 80099e0 <xTimerGenericCommand+0x1c>
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	e7fe      	b.n	80099de <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 80099e0:	4d0c      	ldr	r5, [pc, #48]	; (8009a14 <xTimerGenericCommand+0x50>)
 80099e2:	6828      	ldr	r0, [r5, #0]
 80099e4:	b178      	cbz	r0, 8009a06 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099e6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099e8:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80099ec:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80099ee:	dc0c      	bgt.n	8009a0a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099f0:	f7ff fd64 	bl	80094bc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099f4:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80099f6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099f8:	bf14      	ite	ne
 80099fa:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80099fc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099fe:	6828      	ldr	r0, [r5, #0]
 8009a00:	a901      	add	r1, sp, #4
 8009a02:	f7fe fd53 	bl	80084ac <xQueueGenericSend>
}
 8009a06:	b004      	add	sp, #16
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	a901      	add	r1, sp, #4
 8009a0e:	f7fe fe00 	bl	8008612 <xQueueGenericSendFromISR>
 8009a12:	e7f8      	b.n	8009a06 <xTimerGenericCommand+0x42>
 8009a14:	20001ae8 	.word	0x20001ae8

08009a18 <prvSampleTimeNow>:
{
 8009a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8009a1e:	f7ff fa59 	bl	8008ed4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009a22:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8009ab4 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 8009a26:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009a28:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2c:	4283      	cmp	r3, r0
 8009a2e:	d90b      	bls.n	8009a48 <prvSampleTimeNow+0x30>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a30:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a34:	4f20      	ldr	r7, [pc, #128]	; (8009ab8 <prvSampleTimeNow+0xa0>)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	b96a      	cbnz	r2, 8009a58 <prvSampleTimeNow+0x40>
	pxCurrentTimerList = pxOverflowTimerList;
 8009a3c:	4a1f      	ldr	r2, [pc, #124]	; (8009abc <prvSampleTimeNow+0xa4>)
 8009a3e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009a40:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a42:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e000      	b.n	8009a4a <prvSampleTimeNow+0x32>
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8009a4c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8009a4e:	f8c8 5000 	str.w	r5, [r8]
}
 8009a52:	b003      	add	sp, #12
 8009a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a58:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a5a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a5c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a60:	f104 0b04 	add.w	fp, r4, #4
 8009a64:	4658      	mov	r0, fp
 8009a66:	f7fe fbd9 	bl	800821c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009a70:	69e3      	ldr	r3, [r4, #28]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d1df      	bne.n	8009a36 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a76:	69a3      	ldr	r3, [r4, #24]
 8009a78:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8009a7a:	459a      	cmp	sl, r3
 8009a7c:	d206      	bcs.n	8009a8c <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a7e:	4659      	mov	r1, fp
 8009a80:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a82:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a84:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a86:	f7fe fbb2 	bl	80081ee <vListInsert>
 8009a8a:	e7d4      	b.n	8009a36 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	4652      	mov	r2, sl
 8009a90:	4619      	mov	r1, r3
 8009a92:	4620      	mov	r0, r4
 8009a94:	f8cd 9000 	str.w	r9, [sp]
 8009a98:	f7ff ff94 	bl	80099c4 <xTimerGenericCommand>
				configASSERT( xResult );
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d1ca      	bne.n	8009a36 <prvSampleTimeNow+0x1e>
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	e7fe      	b.n	8009ab0 <prvSampleTimeNow+0x98>
 8009ab2:	bf00      	nop
 8009ab4:	20001a9c 	.word	0x20001a9c
 8009ab8:	200019f4 	.word	0x200019f4
 8009abc:	200019f8 	.word	0x200019f8

08009ac0 <prvTimerTask>:
{
 8009ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ac4:	4e65      	ldr	r6, [pc, #404]	; (8009c5c <prvTimerTask+0x19c>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ac6:	4f66      	ldr	r7, [pc, #408]	; (8009c60 <prvTimerTask+0x1a0>)
{
 8009ac8:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009aca:	6833      	ldr	r3, [r6, #0]
 8009acc:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	d033      	beq.n	8009b3a <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8009ad8:	f7ff f9f4 	bl	8008ec4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009adc:	a803      	add	r0, sp, #12
 8009ade:	f7ff ff9b 	bl	8009a18 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009ae2:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ae4:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8009ae6:	2c00      	cmp	r4, #0
 8009ae8:	d177      	bne.n	8009bda <prvTimerTask+0x11a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009aea:	2d00      	cmp	r5, #0
 8009aec:	d05a      	beq.n	8009ba4 <prvTimerTask+0xe4>
 8009aee:	4540      	cmp	r0, r8
 8009af0:	d35e      	bcc.n	8009bb0 <prvTimerTask+0xf0>
				( void ) xTaskResumeAll();
 8009af2:	f7ff fa87 	bl	8009004 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af6:	6833      	ldr	r3, [r6, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009afc:	1d28      	adds	r0, r5, #4
 8009afe:	f7fe fb8d 	bl	800821c <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b02:	69eb      	ldr	r3, [r5, #28]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d11a      	bne.n	8009b3e <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b08:	69a9      	ldr	r1, [r5, #24]
 8009b0a:	4643      	mov	r3, r8
 8009b0c:	464a      	mov	r2, r9
 8009b0e:	4628      	mov	r0, r5
 8009b10:	4441      	add	r1, r8
 8009b12:	f7ff fea3 	bl	800985c <prvInsertTimerInActiveList>
 8009b16:	b190      	cbz	r0, 8009b3e <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b18:	4623      	mov	r3, r4
 8009b1a:	4642      	mov	r2, r8
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	4628      	mov	r0, r5
 8009b20:	9400      	str	r4, [sp, #0]
 8009b22:	f7ff ff4f 	bl	80099c4 <xTimerGenericCommand>
			configASSERT( xResult );
 8009b26:	b950      	cbnz	r0, 8009b3e <prvTimerTask+0x7e>
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	e7fe      	b.n	8009b38 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8009b3a:	46a8      	mov	r8, r5
 8009b3c:	e7cc      	b.n	8009ad8 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b3e:	4628      	mov	r0, r5
 8009b40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b42:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b44:	2500      	movs	r5, #0
 8009b46:	2200      	movs	r2, #0
 8009b48:	6838      	ldr	r0, [r7, #0]
 8009b4a:	a903      	add	r1, sp, #12
 8009b4c:	f7fe fdc2 	bl	80086d4 <xQueueReceive>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d0ba      	beq.n	8009aca <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dbf5      	blt.n	8009b46 <prvTimerTask+0x86>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b5a:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b5c:	6963      	ldr	r3, [r4, #20]
 8009b5e:	b113      	cbz	r3, 8009b66 <prvTimerTask+0xa6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b60:	1d20      	adds	r0, r4, #4
 8009b62:	f7fe fb5b 	bl	800821c <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b66:	a802      	add	r0, sp, #8
 8009b68:	f7ff ff56 	bl	8009a18 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009b6c:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b6e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8009b70:	2b09      	cmp	r3, #9
 8009b72:	d8e8      	bhi.n	8009b46 <prvTimerTask+0x86>
 8009b74:	a101      	add	r1, pc, #4	; (adr r1, 8009b7c <prvTimerTask+0xbc>)
 8009b76:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009be1 	.word	0x08009be1
 8009b80:	08009be1 	.word	0x08009be1
 8009b84:	08009be1 	.word	0x08009be1
 8009b88:	08009b47 	.word	0x08009b47
 8009b8c:	08009c25 	.word	0x08009c25
 8009b90:	08009c49 	.word	0x08009c49
 8009b94:	08009be1 	.word	0x08009be1
 8009b98:	08009be1 	.word	0x08009be1
 8009b9c:	08009b47 	.word	0x08009b47
 8009ba0:	08009c25 	.word	0x08009c25
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ba4:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <prvTimerTask+0x1a4>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681c      	ldr	r4, [r3, #0]
 8009baa:	fab4 f484 	clz	r4, r4
 8009bae:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	6838      	ldr	r0, [r7, #0]
 8009bb4:	eba8 0109 	sub.w	r1, r8, r9
 8009bb8:	f7fe fe8c 	bl	80088d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bbc:	f7ff fa22 	bl	8009004 <xTaskResumeAll>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d1bf      	bne.n	8009b44 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8009bc4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	e7b4      	b.n	8009b44 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8009bda:	f7ff fa13 	bl	8009004 <xTaskResumeAll>
 8009bde:	e7b1      	b.n	8009b44 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009be0:	69a1      	ldr	r1, [r4, #24]
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	4620      	mov	r0, r4
 8009be6:	4419      	add	r1, r3
 8009be8:	f7ff fe38 	bl	800985c <prvInsertTimerInActiveList>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d0aa      	beq.n	8009b46 <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009bf6:	69e3      	ldr	r3, [r4, #28]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d1a4      	bne.n	8009b46 <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	69a2      	ldr	r2, [r4, #24]
 8009c00:	9904      	ldr	r1, [sp, #16]
 8009c02:	4620      	mov	r0, r4
 8009c04:	440a      	add	r2, r1
 8009c06:	9500      	str	r5, [sp, #0]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f7ff fedb 	bl	80099c4 <xTimerGenericCommand>
							configASSERT( xResult );
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d199      	bne.n	8009b46 <prvTimerTask+0x86>
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	e7fe      	b.n	8009c22 <prvTimerTask+0x162>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c24:	9904      	ldr	r1, [sp, #16]
 8009c26:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c28:	b941      	cbnz	r1, 8009c3c <prvTimerTask+0x17c>
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	e7fe      	b.n	8009c3a <prvTimerTask+0x17a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4401      	add	r1, r0
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7ff fe0b 	bl	800985c <prvInsertTimerInActiveList>
					break;
 8009c46:	e77e      	b.n	8009b46 <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c48:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f47f af7a 	bne.w	8009b46 <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fa20 	bl	800a098 <vPortFree>
 8009c58:	e775      	b.n	8009b46 <prvTimerTask+0x86>
 8009c5a:	bf00      	nop
 8009c5c:	200019f4 	.word	0x200019f4
 8009c60:	20001ae8 	.word	0x20001ae8
 8009c64:	200019f8 	.word	0x200019f8

08009c68 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c68:	4806      	ldr	r0, [pc, #24]	; (8009c84 <prvPortStartFirstTask+0x1c>)
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	6800      	ldr	r0, [r0, #0]
 8009c6e:	f380 8808 	msr	MSP, r0
 8009c72:	b662      	cpsie	i
 8009c74:	b661      	cpsie	f
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	df00      	svc	0
 8009c80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c82:	0000      	.short	0x0000
 8009c84:	e000ed08 	.word	0xe000ed08

08009c88 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8009c88:	2300      	movs	r3, #0
{
 8009c8a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009c8c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <prvTaskExitError+0x3c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	d008      	beq.n	8009ca8 <prvTaskExitError+0x20>
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	e7fe      	b.n	8009ca6 <prvTaskExitError+0x1e>
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0fc      	beq.n	8009cb8 <prvTaskExitError+0x30>
}
 8009cbe:	b002      	add	sp, #8
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop
 8009cc4:	2000000c 	.word	0x2000000c

08009cc8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ccc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cd2:	f021 0101 	bic.w	r1, r1, #1
 8009cd6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cda:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cde:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009ce2:	3840      	subs	r0, #64	; 0x40
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	08009c89 	.word	0x08009c89
 8009cec:	00000000 	.word	0x00000000

08009cf0 <SVC_Handler>:
	__asm volatile (
 8009cf0:	4b07      	ldr	r3, [pc, #28]	; (8009d10 <pxCurrentTCBConst2>)
 8009cf2:	6819      	ldr	r1, [r3, #0]
 8009cf4:	6808      	ldr	r0, [r1, #0]
 8009cf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cfa:	f380 8809 	msr	PSP, r0
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8811 	msr	BASEPRI, r0
 8009d0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009d0e:	4770      	bx	lr

08009d10 <pxCurrentTCBConst2>:
 8009d10:	200018cc 	.word	0x200018cc

08009d14 <vPortEnterCritical>:
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d24:	4a0a      	ldr	r2, [pc, #40]	; (8009d50 <vPortEnterCritical+0x3c>)
 8009d26:	6813      	ldr	r3, [r2, #0]
 8009d28:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009d2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009d2e:	d10e      	bne.n	8009d4e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d34:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	b143      	cbz	r3, 8009d4e <vPortEnterCritical+0x3a>
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	e7fe      	b.n	8009d4c <vPortEnterCritical+0x38>
	}
}
 8009d4e:	4770      	bx	lr
 8009d50:	2000000c 	.word	0x2000000c

08009d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <vPortExitCritical+0x24>)
 8009d56:	6813      	ldr	r3, [r2, #0]
 8009d58:	b943      	cbnz	r3, 8009d6c <vPortExitCritical+0x18>
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	f383 8811 	msr	BASEPRI, r3
 8009d62:	f3bf 8f6f 	isb	sy
 8009d66:	f3bf 8f4f 	dsb	sy
 8009d6a:	e7fe      	b.n	8009d6a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d70:	b90b      	cbnz	r3, 8009d76 <vPortExitCritical+0x22>
	__asm volatile
 8009d72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d76:	4770      	bx	lr
 8009d78:	2000000c 	.word	0x2000000c
 8009d7c:	00000000 	.word	0x00000000

08009d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d80:	f3ef 8009 	mrs	r0, PSP
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <pxCurrentTCBConst>)
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d90:	6010      	str	r0, [r2, #0]
 8009d92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009d96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d9a:	f380 8811 	msr	BASEPRI, r0
 8009d9e:	f7ff fa15 	bl	80091cc <vTaskSwitchContext>
 8009da2:	f04f 0000 	mov.w	r0, #0
 8009da6:	f380 8811 	msr	BASEPRI, r0
 8009daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dae:	6819      	ldr	r1, [r3, #0]
 8009db0:	6808      	ldr	r0, [r1, #0]
 8009db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009db6:	f380 8809 	msr	PSP, r0
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	4770      	bx	lr

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	200018cc 	.word	0x200018cc

08009dc4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc4:	b508      	push	{r3, lr}
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dd6:	f7ff f883 	bl	8008ee0 <xTaskIncrementTick>
 8009dda:	b128      	cbz	r0, 8009de8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009de8:	2300      	movs	r3, #0
 8009dea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009dee:	bd08      	pop	{r3, pc}

08009df0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009df0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009df4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009df6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009dfa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009dfc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dfe:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <vPortSetupTimerInterrupt+0x20>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e06:	3b01      	subs	r3, #1
 8009e08:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0a:	2307      	movs	r3, #7
 8009e0c:	6113      	str	r3, [r2, #16]
}
 8009e0e:	4770      	bx	lr
 8009e10:	20000000 	.word	0x20000000

08009e14 <xPortStartScheduler>:
{
 8009e14:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e16:	4b29      	ldr	r3, [pc, #164]	; (8009ebc <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e18:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e1a:	781a      	ldrb	r2, [r3, #0]
 8009e1c:	b2d2      	uxtb	r2, r2
 8009e1e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e20:	22ff      	movs	r2, #255	; 0xff
 8009e22:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e24:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e26:	4a26      	ldr	r2, [pc, #152]	; (8009ec0 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e36:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e38:	2307      	movs	r3, #7
 8009e3a:	4a22      	ldr	r2, [pc, #136]	; (8009ec4 <xPortStartScheduler+0xb0>)
 8009e3c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e3e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009e42:	1e5c      	subs	r4, r3, #1
 8009e44:	0600      	lsls	r0, r0, #24
 8009e46:	d40c      	bmi.n	8009e62 <xPortStartScheduler+0x4e>
 8009e48:	b111      	cbz	r1, 8009e50 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	d011      	beq.n	8009e74 <xPortStartScheduler+0x60>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	e7fe      	b.n	8009e60 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009e66:	2101      	movs	r1, #1
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f88d 3003 	strb.w	r3, [sp, #3]
 8009e70:	4623      	mov	r3, r4
 8009e72:	e7e4      	b.n	8009e3e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009e78:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	4a0f      	ldr	r2, [pc, #60]	; (8009ebc <xPortStartScheduler+0xa8>)
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e82:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009e86:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e88:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009e8c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009e90:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e94:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8009e98:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009e9c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009ea0:	f7ff ffa6 	bl	8009df0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009ea4:	4b08      	ldr	r3, [pc, #32]	; (8009ec8 <xPortStartScheduler+0xb4>)
 8009ea6:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009ea8:	f7ff fede 	bl	8009c68 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009eac:	f7ff f98e 	bl	80091cc <vTaskSwitchContext>
}
 8009eb0:	4620      	mov	r0, r4
	prvTaskExitError();
 8009eb2:	f7ff fee9 	bl	8009c88 <prvTaskExitError>
}
 8009eb6:	b002      	add	sp, #8
 8009eb8:	bd10      	pop	{r4, pc}
 8009eba:	bf00      	nop
 8009ebc:	e000e400 	.word	0xe000e400
 8009ec0:	20001af0 	.word	0x20001af0
 8009ec4:	20001af4 	.word	0x20001af4
 8009ec8:	2000000c 	.word	0x2000000c

08009ecc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ecc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ed0:	2b0f      	cmp	r3, #15
 8009ed2:	d90e      	bls.n	8009ef2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ed4:	4a11      	ldr	r2, [pc, #68]	; (8009f1c <vPortValidateInterruptPriority+0x50>)
 8009ed6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ed8:	4a11      	ldr	r2, [pc, #68]	; (8009f20 <vPortValidateInterruptPriority+0x54>)
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d908      	bls.n	8009ef2 <vPortValidateInterruptPriority+0x26>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	e7fe      	b.n	8009ef0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ef2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009ef6:	4a0b      	ldr	r2, [pc, #44]	; (8009f24 <vPortValidateInterruptPriority+0x58>)
 8009ef8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d908      	bls.n	8009f18 <vPortValidateInterruptPriority+0x4c>
 8009f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	e7fe      	b.n	8009f16 <vPortValidateInterruptPriority+0x4a>
	}
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	e000e3f0 	.word	0xe000e3f0
 8009f20:	20001af0 	.word	0x20001af0
 8009f24:	20001af4 	.word	0x20001af4

08009f28 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f28:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f2a:	4b10      	ldr	r3, [pc, #64]	; (8009f6c <prvInsertBlockIntoFreeList+0x44>)
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4283      	cmp	r3, r0
 8009f32:	d3fb      	bcc.n	8009f2c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f34:	6854      	ldr	r4, [r2, #4]
 8009f36:	1911      	adds	r1, r2, r4
 8009f38:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f3a:	bf01      	itttt	eq
 8009f3c:	6841      	ldreq	r1, [r0, #4]
 8009f3e:	4610      	moveq	r0, r2
 8009f40:	1909      	addeq	r1, r1, r4
 8009f42:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f44:	6844      	ldr	r4, [r0, #4]
 8009f46:	1901      	adds	r1, r0, r4
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	d10c      	bne.n	8009f66 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f4c:	4908      	ldr	r1, [pc, #32]	; (8009f70 <prvInsertBlockIntoFreeList+0x48>)
 8009f4e:	6809      	ldr	r1, [r1, #0]
 8009f50:	428b      	cmp	r3, r1
 8009f52:	d003      	beq.n	8009f5c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f54:	6859      	ldr	r1, [r3, #4]
 8009f56:	4421      	add	r1, r4
 8009f58:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f5a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f5c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f5e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f60:	bf18      	it	ne
 8009f62:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	4619      	mov	r1, r3
 8009f68:	e7f8      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x34>
 8009f6a:	bf00      	nop
 8009f6c:	20002b08 	.word	0x20002b08
 8009f70:	20001af8 	.word	0x20001af8

08009f74 <pvPortMalloc>:
{
 8009f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f78:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009f7a:	f7fe ffa3 	bl	8008ec4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009f7e:	4940      	ldr	r1, [pc, #256]	; (800a080 <pvPortMalloc+0x10c>)
 8009f80:	4d40      	ldr	r5, [pc, #256]	; (800a084 <pvPortMalloc+0x110>)
 8009f82:	680b      	ldr	r3, [r1, #0]
 8009f84:	bb0b      	cbnz	r3, 8009fca <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009f86:	4a40      	ldr	r2, [pc, #256]	; (800a088 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f88:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f8a:	bf1f      	itttt	ne
 8009f8c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f8e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f92:	f502 5280 	addne.w	r2, r2, #4096	; 0x1000
 8009f96:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f98:	bf0c      	ite	eq
 8009f9a:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f9e:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8009fa0:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fa2:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fa4:	4e39      	ldr	r6, [pc, #228]	; (800a08c <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 8009fa6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa8:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8009fac:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fae:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8009fb0:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fb4:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fb6:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8009fba:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fbc:	4b34      	ldr	r3, [pc, #208]	; (800a090 <pvPortMalloc+0x11c>)
 8009fbe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fc0:	4b34      	ldr	r3, [pc, #208]	; (800a094 <pvPortMalloc+0x120>)
 8009fc2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fc8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fca:	682e      	ldr	r6, [r5, #0]
 8009fcc:	4226      	tst	r6, r4
 8009fce:	d151      	bne.n	800a074 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8009fd0:	2c00      	cmp	r4, #0
 8009fd2:	d042      	beq.n	800a05a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8009fd4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009fd8:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009fda:	bf1c      	itt	ne
 8009fdc:	f023 0307 	bicne.w	r3, r3, #7
 8009fe0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d046      	beq.n	800a074 <pvPortMalloc+0x100>
 8009fe6:	4f2b      	ldr	r7, [pc, #172]	; (800a094 <pvPortMalloc+0x120>)
 8009fe8:	683c      	ldr	r4, [r7, #0]
 8009fea:	429c      	cmp	r4, r3
 8009fec:	d342      	bcc.n	800a074 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8009fee:	4a27      	ldr	r2, [pc, #156]	; (800a08c <pvPortMalloc+0x118>)
 8009ff0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ff2:	6868      	ldr	r0, [r5, #4]
 8009ff4:	4298      	cmp	r0, r3
 8009ff6:	d204      	bcs.n	800a002 <pvPortMalloc+0x8e>
 8009ff8:	f8d5 c000 	ldr.w	ip, [r5]
 8009ffc:	f1bc 0f00 	cmp.w	ip, #0
 800a000:	d115      	bne.n	800a02e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800a002:	6809      	ldr	r1, [r1, #0]
 800a004:	42a9      	cmp	r1, r5
 800a006:	d035      	beq.n	800a074 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a008:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a00a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a00e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a010:	1ac2      	subs	r2, r0, r3
 800a012:	2a10      	cmp	r2, #16
 800a014:	d912      	bls.n	800a03c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a016:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a018:	0741      	lsls	r1, r0, #29
 800a01a:	d00b      	beq.n	800a034 <pvPortMalloc+0xc0>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	e7fe      	b.n	800a02c <pvPortMalloc+0xb8>
 800a02e:	462a      	mov	r2, r5
 800a030:	4665      	mov	r5, ip
 800a032:	e7de      	b.n	8009ff2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a034:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a036:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a038:	f7ff ff76 	bl	8009f28 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 800a03c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a03e:	4914      	ldr	r1, [pc, #80]	; (800a090 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a040:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a042:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a044:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a046:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a048:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a04c:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a04e:	bf38      	it	cc
 800a050:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a052:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a054:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 800a058:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a05a:	f7fe ffd3 	bl	8009004 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a05e:	0763      	lsls	r3, r4, #29
 800a060:	d00a      	beq.n	800a078 <pvPortMalloc+0x104>
 800a062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	e7fe      	b.n	800a072 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800a074:	2400      	movs	r4, #0
 800a076:	e7f0      	b.n	800a05a <pvPortMalloc+0xe6>
}
 800a078:	4620      	mov	r0, r4
 800a07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07e:	bf00      	nop
 800a080:	20001af8 	.word	0x20001af8
 800a084:	20002afc 	.word	0x20002afc
 800a088:	20001afc 	.word	0x20001afc
 800a08c:	20002b08 	.word	0x20002b08
 800a090:	20002b04 	.word	0x20002b04
 800a094:	20002b00 	.word	0x20002b00

0800a098 <vPortFree>:
{
 800a098:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a09a:	4604      	mov	r4, r0
 800a09c:	b370      	cbz	r0, 800a0fc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a09e:	4a18      	ldr	r2, [pc, #96]	; (800a100 <vPortFree+0x68>)
 800a0a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a0a4:	6812      	ldr	r2, [r2, #0]
 800a0a6:	4213      	tst	r3, r2
 800a0a8:	d108      	bne.n	800a0bc <vPortFree+0x24>
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	e7fe      	b.n	800a0ba <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a0c0:	b141      	cbz	r1, 800a0d4 <vPortFree+0x3c>
 800a0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	e7fe      	b.n	800a0d2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0d4:	ea23 0302 	bic.w	r3, r3, r2
 800a0d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a0dc:	f7fe fef2 	bl	8008ec4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0e0:	4a08      	ldr	r2, [pc, #32]	; (800a104 <vPortFree+0x6c>)
 800a0e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a0e6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0e8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0ec:	440b      	add	r3, r1
 800a0ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0f0:	f7ff ff1a 	bl	8009f28 <prvInsertBlockIntoFreeList>
}
 800a0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a0f8:	f7fe bf84 	b.w	8009004 <xTaskResumeAll>
}
 800a0fc:	bd10      	pop	{r4, pc}
 800a0fe:	bf00      	nop
 800a100:	20002afc 	.word	0x20002afc
 800a104:	20002b00 	.word	0x20002b00

0800a108 <malloc>:
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <malloc+0xc>)
 800a10a:	4601      	mov	r1, r0
 800a10c:	6818      	ldr	r0, [r3, #0]
 800a10e:	f000 b823 	b.w	800a158 <_malloc_r>
 800a112:	bf00      	nop
 800a114:	20000068 	.word	0x20000068

0800a118 <sbrk_aligned>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	4e0e      	ldr	r6, [pc, #56]	; (800a154 <sbrk_aligned+0x3c>)
 800a11c:	460c      	mov	r4, r1
 800a11e:	6831      	ldr	r1, [r6, #0]
 800a120:	4605      	mov	r5, r0
 800a122:	b911      	cbnz	r1, 800a12a <sbrk_aligned+0x12>
 800a124:	f000 fb88 	bl	800a838 <_sbrk_r>
 800a128:	6030      	str	r0, [r6, #0]
 800a12a:	4621      	mov	r1, r4
 800a12c:	4628      	mov	r0, r5
 800a12e:	f000 fb83 	bl	800a838 <_sbrk_r>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d00a      	beq.n	800a14c <sbrk_aligned+0x34>
 800a136:	1cc4      	adds	r4, r0, #3
 800a138:	f024 0403 	bic.w	r4, r4, #3
 800a13c:	42a0      	cmp	r0, r4
 800a13e:	d007      	beq.n	800a150 <sbrk_aligned+0x38>
 800a140:	1a21      	subs	r1, r4, r0
 800a142:	4628      	mov	r0, r5
 800a144:	f000 fb78 	bl	800a838 <_sbrk_r>
 800a148:	3001      	adds	r0, #1
 800a14a:	d101      	bne.n	800a150 <sbrk_aligned+0x38>
 800a14c:	f04f 34ff 	mov.w	r4, #4294967295
 800a150:	4620      	mov	r0, r4
 800a152:	bd70      	pop	{r4, r5, r6, pc}
 800a154:	20002b14 	.word	0x20002b14

0800a158 <_malloc_r>:
 800a158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a15c:	1ccd      	adds	r5, r1, #3
 800a15e:	f025 0503 	bic.w	r5, r5, #3
 800a162:	3508      	adds	r5, #8
 800a164:	2d0c      	cmp	r5, #12
 800a166:	bf38      	it	cc
 800a168:	250c      	movcc	r5, #12
 800a16a:	2d00      	cmp	r5, #0
 800a16c:	4607      	mov	r7, r0
 800a16e:	db01      	blt.n	800a174 <_malloc_r+0x1c>
 800a170:	42a9      	cmp	r1, r5
 800a172:	d905      	bls.n	800a180 <_malloc_r+0x28>
 800a174:	230c      	movs	r3, #12
 800a176:	2600      	movs	r6, #0
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4630      	mov	r0, r6
 800a17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a180:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a254 <_malloc_r+0xfc>
 800a184:	f000 f868 	bl	800a258 <__malloc_lock>
 800a188:	f8d8 3000 	ldr.w	r3, [r8]
 800a18c:	461c      	mov	r4, r3
 800a18e:	bb5c      	cbnz	r4, 800a1e8 <_malloc_r+0x90>
 800a190:	4629      	mov	r1, r5
 800a192:	4638      	mov	r0, r7
 800a194:	f7ff ffc0 	bl	800a118 <sbrk_aligned>
 800a198:	1c43      	adds	r3, r0, #1
 800a19a:	4604      	mov	r4, r0
 800a19c:	d155      	bne.n	800a24a <_malloc_r+0xf2>
 800a19e:	f8d8 4000 	ldr.w	r4, [r8]
 800a1a2:	4626      	mov	r6, r4
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	d145      	bne.n	800a234 <_malloc_r+0xdc>
 800a1a8:	2c00      	cmp	r4, #0
 800a1aa:	d048      	beq.n	800a23e <_malloc_r+0xe6>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	eb04 0903 	add.w	r9, r4, r3
 800a1b6:	f000 fb3f 	bl	800a838 <_sbrk_r>
 800a1ba:	4581      	cmp	r9, r0
 800a1bc:	d13f      	bne.n	800a23e <_malloc_r+0xe6>
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	1a6d      	subs	r5, r5, r1
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	f7ff ffa7 	bl	800a118 <sbrk_aligned>
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	d037      	beq.n	800a23e <_malloc_r+0xe6>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	442b      	add	r3, r5
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d038      	beq.n	800a24e <_malloc_r+0xf6>
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	42a2      	cmp	r2, r4
 800a1e0:	d12b      	bne.n	800a23a <_malloc_r+0xe2>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	605a      	str	r2, [r3, #4]
 800a1e6:	e00f      	b.n	800a208 <_malloc_r+0xb0>
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	1b52      	subs	r2, r2, r5
 800a1ec:	d41f      	bmi.n	800a22e <_malloc_r+0xd6>
 800a1ee:	2a0b      	cmp	r2, #11
 800a1f0:	d917      	bls.n	800a222 <_malloc_r+0xca>
 800a1f2:	1961      	adds	r1, r4, r5
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	6025      	str	r5, [r4, #0]
 800a1f8:	bf18      	it	ne
 800a1fa:	6059      	strne	r1, [r3, #4]
 800a1fc:	6863      	ldr	r3, [r4, #4]
 800a1fe:	bf08      	it	eq
 800a200:	f8c8 1000 	streq.w	r1, [r8]
 800a204:	5162      	str	r2, [r4, r5]
 800a206:	604b      	str	r3, [r1, #4]
 800a208:	4638      	mov	r0, r7
 800a20a:	f104 060b 	add.w	r6, r4, #11
 800a20e:	f000 f829 	bl	800a264 <__malloc_unlock>
 800a212:	f026 0607 	bic.w	r6, r6, #7
 800a216:	1d23      	adds	r3, r4, #4
 800a218:	1af2      	subs	r2, r6, r3
 800a21a:	d0ae      	beq.n	800a17a <_malloc_r+0x22>
 800a21c:	1b9b      	subs	r3, r3, r6
 800a21e:	50a3      	str	r3, [r4, r2]
 800a220:	e7ab      	b.n	800a17a <_malloc_r+0x22>
 800a222:	42a3      	cmp	r3, r4
 800a224:	6862      	ldr	r2, [r4, #4]
 800a226:	d1dd      	bne.n	800a1e4 <_malloc_r+0x8c>
 800a228:	f8c8 2000 	str.w	r2, [r8]
 800a22c:	e7ec      	b.n	800a208 <_malloc_r+0xb0>
 800a22e:	4623      	mov	r3, r4
 800a230:	6864      	ldr	r4, [r4, #4]
 800a232:	e7ac      	b.n	800a18e <_malloc_r+0x36>
 800a234:	4634      	mov	r4, r6
 800a236:	6876      	ldr	r6, [r6, #4]
 800a238:	e7b4      	b.n	800a1a4 <_malloc_r+0x4c>
 800a23a:	4613      	mov	r3, r2
 800a23c:	e7cc      	b.n	800a1d8 <_malloc_r+0x80>
 800a23e:	230c      	movs	r3, #12
 800a240:	4638      	mov	r0, r7
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	f000 f80e 	bl	800a264 <__malloc_unlock>
 800a248:	e797      	b.n	800a17a <_malloc_r+0x22>
 800a24a:	6025      	str	r5, [r4, #0]
 800a24c:	e7dc      	b.n	800a208 <_malloc_r+0xb0>
 800a24e:	605b      	str	r3, [r3, #4]
 800a250:	deff      	udf	#255	; 0xff
 800a252:	bf00      	nop
 800a254:	20002b10 	.word	0x20002b10

0800a258 <__malloc_lock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_lock+0x8>)
 800a25a:	f000 bb3a 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	20002c58 	.word	0x20002c58

0800a264 <__malloc_unlock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_unlock+0x8>)
 800a266:	f000 bb35 	b.w	800a8d4 <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	20002c58 	.word	0x20002c58

0800a270 <std>:
 800a270:	2300      	movs	r3, #0
 800a272:	b510      	push	{r4, lr}
 800a274:	4604      	mov	r4, r0
 800a276:	e9c0 3300 	strd	r3, r3, [r0]
 800a27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a27e:	6083      	str	r3, [r0, #8]
 800a280:	8181      	strh	r1, [r0, #12]
 800a282:	6643      	str	r3, [r0, #100]	; 0x64
 800a284:	81c2      	strh	r2, [r0, #14]
 800a286:	6183      	str	r3, [r0, #24]
 800a288:	4619      	mov	r1, r3
 800a28a:	2208      	movs	r2, #8
 800a28c:	305c      	adds	r0, #92	; 0x5c
 800a28e:	f000 fa2b 	bl	800a6e8 <memset>
 800a292:	4b0d      	ldr	r3, [pc, #52]	; (800a2c8 <std+0x58>)
 800a294:	6224      	str	r4, [r4, #32]
 800a296:	6263      	str	r3, [r4, #36]	; 0x24
 800a298:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <std+0x5c>)
 800a29a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a29c:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <std+0x60>)
 800a29e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	; (800a2d4 <std+0x64>)
 800a2a2:	6323      	str	r3, [r4, #48]	; 0x30
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <std+0x68>)
 800a2a6:	429c      	cmp	r4, r3
 800a2a8:	d006      	beq.n	800a2b8 <std+0x48>
 800a2aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a2ae:	4294      	cmp	r4, r2
 800a2b0:	d002      	beq.n	800a2b8 <std+0x48>
 800a2b2:	33d0      	adds	r3, #208	; 0xd0
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	d105      	bne.n	800a2c4 <std+0x54>
 800a2b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2c0:	f000 bb06 	b.w	800a8d0 <__retarget_lock_init_recursive>
 800a2c4:	bd10      	pop	{r4, pc}
 800a2c6:	bf00      	nop
 800a2c8:	0800a539 	.word	0x0800a539
 800a2cc:	0800a55b 	.word	0x0800a55b
 800a2d0:	0800a593 	.word	0x0800a593
 800a2d4:	0800a5b7 	.word	0x0800a5b7
 800a2d8:	20002b18 	.word	0x20002b18

0800a2dc <stdio_exit_handler>:
 800a2dc:	4a02      	ldr	r2, [pc, #8]	; (800a2e8 <stdio_exit_handler+0xc>)
 800a2de:	4903      	ldr	r1, [pc, #12]	; (800a2ec <stdio_exit_handler+0x10>)
 800a2e0:	4803      	ldr	r0, [pc, #12]	; (800a2f0 <stdio_exit_handler+0x14>)
 800a2e2:	f000 b869 	b.w	800a3b8 <_fwalk_sglue>
 800a2e6:	bf00      	nop
 800a2e8:	20000010 	.word	0x20000010
 800a2ec:	0800b2f5 	.word	0x0800b2f5
 800a2f0:	2000001c 	.word	0x2000001c

0800a2f4 <cleanup_stdio>:
 800a2f4:	6841      	ldr	r1, [r0, #4]
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <cleanup_stdio+0x34>)
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4299      	cmp	r1, r3
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	d001      	beq.n	800a304 <cleanup_stdio+0x10>
 800a300:	f000 fff8 	bl	800b2f4 <_fflush_r>
 800a304:	68a1      	ldr	r1, [r4, #8]
 800a306:	4b09      	ldr	r3, [pc, #36]	; (800a32c <cleanup_stdio+0x38>)
 800a308:	4299      	cmp	r1, r3
 800a30a:	d002      	beq.n	800a312 <cleanup_stdio+0x1e>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 fff1 	bl	800b2f4 <_fflush_r>
 800a312:	68e1      	ldr	r1, [r4, #12]
 800a314:	4b06      	ldr	r3, [pc, #24]	; (800a330 <cleanup_stdio+0x3c>)
 800a316:	4299      	cmp	r1, r3
 800a318:	d004      	beq.n	800a324 <cleanup_stdio+0x30>
 800a31a:	4620      	mov	r0, r4
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a320:	f000 bfe8 	b.w	800b2f4 <_fflush_r>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	bf00      	nop
 800a328:	20002b18 	.word	0x20002b18
 800a32c:	20002b80 	.word	0x20002b80
 800a330:	20002be8 	.word	0x20002be8

0800a334 <global_stdio_init.part.0>:
 800a334:	b510      	push	{r4, lr}
 800a336:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <global_stdio_init.part.0+0x30>)
 800a338:	4c0b      	ldr	r4, [pc, #44]	; (800a368 <global_stdio_init.part.0+0x34>)
 800a33a:	4a0c      	ldr	r2, [pc, #48]	; (800a36c <global_stdio_init.part.0+0x38>)
 800a33c:	4620      	mov	r0, r4
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	2104      	movs	r1, #4
 800a342:	2200      	movs	r2, #0
 800a344:	f7ff ff94 	bl	800a270 <std>
 800a348:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a34c:	2201      	movs	r2, #1
 800a34e:	2109      	movs	r1, #9
 800a350:	f7ff ff8e 	bl	800a270 <std>
 800a354:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a358:	2202      	movs	r2, #2
 800a35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a35e:	2112      	movs	r1, #18
 800a360:	f7ff bf86 	b.w	800a270 <std>
 800a364:	20002c50 	.word	0x20002c50
 800a368:	20002b18 	.word	0x20002b18
 800a36c:	0800a2dd 	.word	0x0800a2dd

0800a370 <__sfp_lock_acquire>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__sfp_lock_acquire+0x8>)
 800a372:	f000 baae 	b.w	800a8d2 <__retarget_lock_acquire_recursive>
 800a376:	bf00      	nop
 800a378:	20002c59 	.word	0x20002c59

0800a37c <__sfp_lock_release>:
 800a37c:	4801      	ldr	r0, [pc, #4]	; (800a384 <__sfp_lock_release+0x8>)
 800a37e:	f000 baa9 	b.w	800a8d4 <__retarget_lock_release_recursive>
 800a382:	bf00      	nop
 800a384:	20002c59 	.word	0x20002c59

0800a388 <__sinit>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	f7ff fff0 	bl	800a370 <__sfp_lock_acquire>
 800a390:	6a23      	ldr	r3, [r4, #32]
 800a392:	b11b      	cbz	r3, 800a39c <__sinit+0x14>
 800a394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a398:	f7ff bff0 	b.w	800a37c <__sfp_lock_release>
 800a39c:	4b04      	ldr	r3, [pc, #16]	; (800a3b0 <__sinit+0x28>)
 800a39e:	6223      	str	r3, [r4, #32]
 800a3a0:	4b04      	ldr	r3, [pc, #16]	; (800a3b4 <__sinit+0x2c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f5      	bne.n	800a394 <__sinit+0xc>
 800a3a8:	f7ff ffc4 	bl	800a334 <global_stdio_init.part.0>
 800a3ac:	e7f2      	b.n	800a394 <__sinit+0xc>
 800a3ae:	bf00      	nop
 800a3b0:	0800a2f5 	.word	0x0800a2f5
 800a3b4:	20002c50 	.word	0x20002c50

0800a3b8 <_fwalk_sglue>:
 800a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3bc:	4607      	mov	r7, r0
 800a3be:	4688      	mov	r8, r1
 800a3c0:	4614      	mov	r4, r2
 800a3c2:	2600      	movs	r6, #0
 800a3c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3cc:	d505      	bpl.n	800a3da <_fwalk_sglue+0x22>
 800a3ce:	6824      	ldr	r4, [r4, #0]
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	d1f7      	bne.n	800a3c4 <_fwalk_sglue+0xc>
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d907      	bls.n	800a3f0 <_fwalk_sglue+0x38>
 800a3e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	d003      	beq.n	800a3f0 <_fwalk_sglue+0x38>
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	47c0      	blx	r8
 800a3ee:	4306      	orrs	r6, r0
 800a3f0:	3568      	adds	r5, #104	; 0x68
 800a3f2:	e7e9      	b.n	800a3c8 <_fwalk_sglue+0x10>

0800a3f4 <iprintf>:
 800a3f4:	b40f      	push	{r0, r1, r2, r3}
 800a3f6:	b507      	push	{r0, r1, r2, lr}
 800a3f8:	4906      	ldr	r1, [pc, #24]	; (800a414 <iprintf+0x20>)
 800a3fa:	ab04      	add	r3, sp, #16
 800a3fc:	6808      	ldr	r0, [r1, #0]
 800a3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a402:	6881      	ldr	r1, [r0, #8]
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	f000 fc45 	bl	800ac94 <_vfiprintf_r>
 800a40a:	b003      	add	sp, #12
 800a40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a410:	b004      	add	sp, #16
 800a412:	4770      	bx	lr
 800a414:	20000068 	.word	0x20000068

0800a418 <_puts_r>:
 800a418:	6a03      	ldr	r3, [r0, #32]
 800a41a:	b570      	push	{r4, r5, r6, lr}
 800a41c:	4605      	mov	r5, r0
 800a41e:	460e      	mov	r6, r1
 800a420:	6884      	ldr	r4, [r0, #8]
 800a422:	b90b      	cbnz	r3, 800a428 <_puts_r+0x10>
 800a424:	f7ff ffb0 	bl	800a388 <__sinit>
 800a428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42a:	07db      	lsls	r3, r3, #31
 800a42c:	d405      	bmi.n	800a43a <_puts_r+0x22>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	0598      	lsls	r0, r3, #22
 800a432:	d402      	bmi.n	800a43a <_puts_r+0x22>
 800a434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a436:	f000 fa4c 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	0719      	lsls	r1, r3, #28
 800a43e:	d513      	bpl.n	800a468 <_puts_r+0x50>
 800a440:	6923      	ldr	r3, [r4, #16]
 800a442:	b18b      	cbz	r3, 800a468 <_puts_r+0x50>
 800a444:	3e01      	subs	r6, #1
 800a446:	68a3      	ldr	r3, [r4, #8]
 800a448:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a44c:	3b01      	subs	r3, #1
 800a44e:	60a3      	str	r3, [r4, #8]
 800a450:	b9e9      	cbnz	r1, 800a48e <_puts_r+0x76>
 800a452:	2b00      	cmp	r3, #0
 800a454:	da2e      	bge.n	800a4b4 <_puts_r+0x9c>
 800a456:	4622      	mov	r2, r4
 800a458:	210a      	movs	r1, #10
 800a45a:	4628      	mov	r0, r5
 800a45c:	f000 f8af 	bl	800a5be <__swbuf_r>
 800a460:	3001      	adds	r0, #1
 800a462:	d007      	beq.n	800a474 <_puts_r+0x5c>
 800a464:	250a      	movs	r5, #10
 800a466:	e007      	b.n	800a478 <_puts_r+0x60>
 800a468:	4621      	mov	r1, r4
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 f8e4 	bl	800a638 <__swsetup_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	d0e7      	beq.n	800a444 <_puts_r+0x2c>
 800a474:	f04f 35ff 	mov.w	r5, #4294967295
 800a478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a47a:	07da      	lsls	r2, r3, #31
 800a47c:	d405      	bmi.n	800a48a <_puts_r+0x72>
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	059b      	lsls	r3, r3, #22
 800a482:	d402      	bmi.n	800a48a <_puts_r+0x72>
 800a484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a486:	f000 fa25 	bl	800a8d4 <__retarget_lock_release_recursive>
 800a48a:	4628      	mov	r0, r5
 800a48c:	bd70      	pop	{r4, r5, r6, pc}
 800a48e:	2b00      	cmp	r3, #0
 800a490:	da04      	bge.n	800a49c <_puts_r+0x84>
 800a492:	69a2      	ldr	r2, [r4, #24]
 800a494:	429a      	cmp	r2, r3
 800a496:	dc06      	bgt.n	800a4a6 <_puts_r+0x8e>
 800a498:	290a      	cmp	r1, #10
 800a49a:	d004      	beq.n	800a4a6 <_puts_r+0x8e>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	6022      	str	r2, [r4, #0]
 800a4a2:	7019      	strb	r1, [r3, #0]
 800a4a4:	e7cf      	b.n	800a446 <_puts_r+0x2e>
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	f000 f888 	bl	800a5be <__swbuf_r>
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d1c9      	bne.n	800a446 <_puts_r+0x2e>
 800a4b2:	e7df      	b.n	800a474 <_puts_r+0x5c>
 800a4b4:	250a      	movs	r5, #10
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	6022      	str	r2, [r4, #0]
 800a4bc:	701d      	strb	r5, [r3, #0]
 800a4be:	e7db      	b.n	800a478 <_puts_r+0x60>

0800a4c0 <puts>:
 800a4c0:	4b02      	ldr	r3, [pc, #8]	; (800a4cc <puts+0xc>)
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	f7ff bfa7 	b.w	800a418 <_puts_r>
 800a4ca:	bf00      	nop
 800a4cc:	20000068 	.word	0x20000068

0800a4d0 <sniprintf>:
 800a4d0:	b40c      	push	{r2, r3}
 800a4d2:	b530      	push	{r4, r5, lr}
 800a4d4:	4b17      	ldr	r3, [pc, #92]	; (800a534 <sniprintf+0x64>)
 800a4d6:	1e0c      	subs	r4, r1, #0
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	b09d      	sub	sp, #116	; 0x74
 800a4dc:	da08      	bge.n	800a4f0 <sniprintf+0x20>
 800a4de:	238b      	movs	r3, #139	; 0x8b
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	602b      	str	r3, [r5, #0]
 800a4e6:	b01d      	add	sp, #116	; 0x74
 800a4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ec:	b002      	add	sp, #8
 800a4ee:	4770      	bx	lr
 800a4f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4f8:	bf0c      	ite	eq
 800a4fa:	4623      	moveq	r3, r4
 800a4fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a508:	9002      	str	r0, [sp, #8]
 800a50a:	9006      	str	r0, [sp, #24]
 800a50c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a510:	4628      	mov	r0, r5
 800a512:	ab21      	add	r3, sp, #132	; 0x84
 800a514:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a516:	a902      	add	r1, sp, #8
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	f000 fa95 	bl	800aa48 <_svfiprintf_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	bfbc      	itt	lt
 800a522:	238b      	movlt	r3, #139	; 0x8b
 800a524:	602b      	strlt	r3, [r5, #0]
 800a526:	2c00      	cmp	r4, #0
 800a528:	d0dd      	beq.n	800a4e6 <sniprintf+0x16>
 800a52a:	2200      	movs	r2, #0
 800a52c:	9b02      	ldr	r3, [sp, #8]
 800a52e:	701a      	strb	r2, [r3, #0]
 800a530:	e7d9      	b.n	800a4e6 <sniprintf+0x16>
 800a532:	bf00      	nop
 800a534:	20000068 	.word	0x20000068

0800a538 <__sread>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	460c      	mov	r4, r1
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	f000 f968 	bl	800a814 <_read_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	bfab      	itete	ge
 800a548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a54a:	89a3      	ldrhlt	r3, [r4, #12]
 800a54c:	181b      	addge	r3, r3, r0
 800a54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a552:	bfac      	ite	ge
 800a554:	6563      	strge	r3, [r4, #84]	; 0x54
 800a556:	81a3      	strhlt	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__swrite>:
 800a55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	461f      	mov	r7, r3
 800a560:	898b      	ldrh	r3, [r1, #12]
 800a562:	4605      	mov	r5, r0
 800a564:	05db      	lsls	r3, r3, #23
 800a566:	460c      	mov	r4, r1
 800a568:	4616      	mov	r6, r2
 800a56a:	d505      	bpl.n	800a578 <__swrite+0x1e>
 800a56c:	2302      	movs	r3, #2
 800a56e:	2200      	movs	r2, #0
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	f000 f93c 	bl	800a7f0 <_lseek_r>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	4632      	mov	r2, r6
 800a57c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	4628      	mov	r0, r5
 800a584:	463b      	mov	r3, r7
 800a586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	f000 b963 	b.w	800a858 <_write_r>

0800a592 <__sseek>:
 800a592:	b510      	push	{r4, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59a:	f000 f929 	bl	800a7f0 <_lseek_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	bf15      	itete	ne
 800a5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ae:	81a3      	strheq	r3, [r4, #12]
 800a5b0:	bf18      	it	ne
 800a5b2:	81a3      	strhne	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__sclose>:
 800a5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ba:	f000 b8b3 	b.w	800a724 <_close_r>

0800a5be <__swbuf_r>:
 800a5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c0:	460e      	mov	r6, r1
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	4605      	mov	r5, r0
 800a5c6:	b118      	cbz	r0, 800a5d0 <__swbuf_r+0x12>
 800a5c8:	6a03      	ldr	r3, [r0, #32]
 800a5ca:	b90b      	cbnz	r3, 800a5d0 <__swbuf_r+0x12>
 800a5cc:	f7ff fedc 	bl	800a388 <__sinit>
 800a5d0:	69a3      	ldr	r3, [r4, #24]
 800a5d2:	60a3      	str	r3, [r4, #8]
 800a5d4:	89a3      	ldrh	r3, [r4, #12]
 800a5d6:	071a      	lsls	r2, r3, #28
 800a5d8:	d525      	bpl.n	800a626 <__swbuf_r+0x68>
 800a5da:	6923      	ldr	r3, [r4, #16]
 800a5dc:	b31b      	cbz	r3, 800a626 <__swbuf_r+0x68>
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	6922      	ldr	r2, [r4, #16]
 800a5e2:	b2f6      	uxtb	r6, r6
 800a5e4:	1a98      	subs	r0, r3, r2
 800a5e6:	6963      	ldr	r3, [r4, #20]
 800a5e8:	4637      	mov	r7, r6
 800a5ea:	4283      	cmp	r3, r0
 800a5ec:	dc04      	bgt.n	800a5f8 <__swbuf_r+0x3a>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 fe7f 	bl	800b2f4 <_fflush_r>
 800a5f6:	b9e0      	cbnz	r0, 800a632 <__swbuf_r+0x74>
 800a5f8:	68a3      	ldr	r3, [r4, #8]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	60a3      	str	r3, [r4, #8]
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	6022      	str	r2, [r4, #0]
 800a604:	701e      	strb	r6, [r3, #0]
 800a606:	6962      	ldr	r2, [r4, #20]
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d004      	beq.n	800a618 <__swbuf_r+0x5a>
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	07db      	lsls	r3, r3, #31
 800a612:	d506      	bpl.n	800a622 <__swbuf_r+0x64>
 800a614:	2e0a      	cmp	r6, #10
 800a616:	d104      	bne.n	800a622 <__swbuf_r+0x64>
 800a618:	4621      	mov	r1, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 fe6a 	bl	800b2f4 <_fflush_r>
 800a620:	b938      	cbnz	r0, 800a632 <__swbuf_r+0x74>
 800a622:	4638      	mov	r0, r7
 800a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a626:	4621      	mov	r1, r4
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f805 	bl	800a638 <__swsetup_r>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d0d5      	beq.n	800a5de <__swbuf_r+0x20>
 800a632:	f04f 37ff 	mov.w	r7, #4294967295
 800a636:	e7f4      	b.n	800a622 <__swbuf_r+0x64>

0800a638 <__swsetup_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4b2a      	ldr	r3, [pc, #168]	; (800a6e4 <__swsetup_r+0xac>)
 800a63c:	4605      	mov	r5, r0
 800a63e:	6818      	ldr	r0, [r3, #0]
 800a640:	460c      	mov	r4, r1
 800a642:	b118      	cbz	r0, 800a64c <__swsetup_r+0x14>
 800a644:	6a03      	ldr	r3, [r0, #32]
 800a646:	b90b      	cbnz	r3, 800a64c <__swsetup_r+0x14>
 800a648:	f7ff fe9e 	bl	800a388 <__sinit>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a652:	0718      	lsls	r0, r3, #28
 800a654:	d422      	bmi.n	800a69c <__swsetup_r+0x64>
 800a656:	06d9      	lsls	r1, r3, #27
 800a658:	d407      	bmi.n	800a66a <__swsetup_r+0x32>
 800a65a:	2309      	movs	r3, #9
 800a65c:	602b      	str	r3, [r5, #0]
 800a65e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a662:	f04f 30ff 	mov.w	r0, #4294967295
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	e034      	b.n	800a6d4 <__swsetup_r+0x9c>
 800a66a:	0758      	lsls	r0, r3, #29
 800a66c:	d512      	bpl.n	800a694 <__swsetup_r+0x5c>
 800a66e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a670:	b141      	cbz	r1, 800a684 <__swsetup_r+0x4c>
 800a672:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a676:	4299      	cmp	r1, r3
 800a678:	d002      	beq.n	800a680 <__swsetup_r+0x48>
 800a67a:	4628      	mov	r0, r5
 800a67c:	f000 f942 	bl	800a904 <_free_r>
 800a680:	2300      	movs	r3, #0
 800a682:	6363      	str	r3, [r4, #52]	; 0x34
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a68a:	81a3      	strh	r3, [r4, #12]
 800a68c:	2300      	movs	r3, #0
 800a68e:	6063      	str	r3, [r4, #4]
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f043 0308 	orr.w	r3, r3, #8
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	b94b      	cbnz	r3, 800a6b4 <__swsetup_r+0x7c>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6aa:	d003      	beq.n	800a6b4 <__swsetup_r+0x7c>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fe6d 	bl	800b38e <__smakebuf_r>
 800a6b4:	89a0      	ldrh	r0, [r4, #12]
 800a6b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6ba:	f010 0301 	ands.w	r3, r0, #1
 800a6be:	d00a      	beq.n	800a6d6 <__swsetup_r+0x9e>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	60a3      	str	r3, [r4, #8]
 800a6c4:	6963      	ldr	r3, [r4, #20]
 800a6c6:	425b      	negs	r3, r3
 800a6c8:	61a3      	str	r3, [r4, #24]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	b943      	cbnz	r3, 800a6e0 <__swsetup_r+0xa8>
 800a6ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6d2:	d1c4      	bne.n	800a65e <__swsetup_r+0x26>
 800a6d4:	bd38      	pop	{r3, r4, r5, pc}
 800a6d6:	0781      	lsls	r1, r0, #30
 800a6d8:	bf58      	it	pl
 800a6da:	6963      	ldrpl	r3, [r4, #20]
 800a6dc:	60a3      	str	r3, [r4, #8]
 800a6de:	e7f4      	b.n	800a6ca <__swsetup_r+0x92>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e7f7      	b.n	800a6d4 <__swsetup_r+0x9c>
 800a6e4:	20000068 	.word	0x20000068

0800a6e8 <memset>:
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4402      	add	r2, r0
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d100      	bne.n	800a6f2 <memset+0xa>
 800a6f0:	4770      	bx	lr
 800a6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f6:	e7f9      	b.n	800a6ec <memset+0x4>

0800a6f8 <strstr>:
 800a6f8:	780a      	ldrb	r2, [r1, #0]
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	b96a      	cbnz	r2, 800a71a <strstr+0x22>
 800a6fe:	bd70      	pop	{r4, r5, r6, pc}
 800a700:	429a      	cmp	r2, r3
 800a702:	d109      	bne.n	800a718 <strstr+0x20>
 800a704:	460c      	mov	r4, r1
 800a706:	4605      	mov	r5, r0
 800a708:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0f6      	beq.n	800a6fe <strstr+0x6>
 800a710:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a714:	429e      	cmp	r6, r3
 800a716:	d0f7      	beq.n	800a708 <strstr+0x10>
 800a718:	3001      	adds	r0, #1
 800a71a:	7803      	ldrb	r3, [r0, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1ef      	bne.n	800a700 <strstr+0x8>
 800a720:	4618      	mov	r0, r3
 800a722:	e7ec      	b.n	800a6fe <strstr+0x6>

0800a724 <_close_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d05      	ldr	r5, [pc, #20]	; (800a740 <_close_r+0x1c>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f9 f932 	bl	8003998 <_close>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_close_r+0x1a>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_close_r+0x1a>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	20002c54 	.word	0x20002c54

0800a744 <_reclaim_reent>:
 800a744:	4b29      	ldr	r3, [pc, #164]	; (800a7ec <_reclaim_reent+0xa8>)
 800a746:	b570      	push	{r4, r5, r6, lr}
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4604      	mov	r4, r0
 800a74c:	4283      	cmp	r3, r0
 800a74e:	d04b      	beq.n	800a7e8 <_reclaim_reent+0xa4>
 800a750:	69c3      	ldr	r3, [r0, #28]
 800a752:	b143      	cbz	r3, 800a766 <_reclaim_reent+0x22>
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d144      	bne.n	800a7e4 <_reclaim_reent+0xa0>
 800a75a:	69e3      	ldr	r3, [r4, #28]
 800a75c:	6819      	ldr	r1, [r3, #0]
 800a75e:	b111      	cbz	r1, 800a766 <_reclaim_reent+0x22>
 800a760:	4620      	mov	r0, r4
 800a762:	f000 f8cf 	bl	800a904 <_free_r>
 800a766:	6961      	ldr	r1, [r4, #20]
 800a768:	b111      	cbz	r1, 800a770 <_reclaim_reent+0x2c>
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 f8ca 	bl	800a904 <_free_r>
 800a770:	69e1      	ldr	r1, [r4, #28]
 800a772:	b111      	cbz	r1, 800a77a <_reclaim_reent+0x36>
 800a774:	4620      	mov	r0, r4
 800a776:	f000 f8c5 	bl	800a904 <_free_r>
 800a77a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a77c:	b111      	cbz	r1, 800a784 <_reclaim_reent+0x40>
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 f8c0 	bl	800a904 <_free_r>
 800a784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a786:	b111      	cbz	r1, 800a78e <_reclaim_reent+0x4a>
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 f8bb 	bl	800a904 <_free_r>
 800a78e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a790:	b111      	cbz	r1, 800a798 <_reclaim_reent+0x54>
 800a792:	4620      	mov	r0, r4
 800a794:	f000 f8b6 	bl	800a904 <_free_r>
 800a798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a79a:	b111      	cbz	r1, 800a7a2 <_reclaim_reent+0x5e>
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 f8b1 	bl	800a904 <_free_r>
 800a7a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7a4:	b111      	cbz	r1, 800a7ac <_reclaim_reent+0x68>
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 f8ac 	bl	800a904 <_free_r>
 800a7ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a7ae:	b111      	cbz	r1, 800a7b6 <_reclaim_reent+0x72>
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f8a7 	bl	800a904 <_free_r>
 800a7b6:	6a23      	ldr	r3, [r4, #32]
 800a7b8:	b1b3      	cbz	r3, 800a7e8 <_reclaim_reent+0xa4>
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7c0:	4718      	bx	r3
 800a7c2:	5949      	ldr	r1, [r1, r5]
 800a7c4:	b941      	cbnz	r1, 800a7d8 <_reclaim_reent+0x94>
 800a7c6:	3504      	adds	r5, #4
 800a7c8:	69e3      	ldr	r3, [r4, #28]
 800a7ca:	2d80      	cmp	r5, #128	; 0x80
 800a7cc:	68d9      	ldr	r1, [r3, #12]
 800a7ce:	d1f8      	bne.n	800a7c2 <_reclaim_reent+0x7e>
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f000 f897 	bl	800a904 <_free_r>
 800a7d6:	e7c0      	b.n	800a75a <_reclaim_reent+0x16>
 800a7d8:	680e      	ldr	r6, [r1, #0]
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f000 f892 	bl	800a904 <_free_r>
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	e7ef      	b.n	800a7c4 <_reclaim_reent+0x80>
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	e7ef      	b.n	800a7c8 <_reclaim_reent+0x84>
 800a7e8:	bd70      	pop	{r4, r5, r6, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000068 	.word	0x20000068

0800a7f0 <_lseek_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	4d05      	ldr	r5, [pc, #20]	; (800a810 <_lseek_r+0x20>)
 800a7fc:	602a      	str	r2, [r5, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	f7f9 f8d4 	bl	80039ac <_lseek>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_lseek_r+0x1e>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_lseek_r+0x1e>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	20002c54 	.word	0x20002c54

0800a814 <_read_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	4611      	mov	r1, r2
 800a81c:	2200      	movs	r2, #0
 800a81e:	4d05      	ldr	r5, [pc, #20]	; (800a834 <_read_r+0x20>)
 800a820:	602a      	str	r2, [r5, #0]
 800a822:	461a      	mov	r2, r3
 800a824:	f7f9 f8aa 	bl	800397c <_read>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_read_r+0x1e>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_read_r+0x1e>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	20002c54 	.word	0x20002c54

0800a838 <_sbrk_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	2300      	movs	r3, #0
 800a83c:	4d05      	ldr	r5, [pc, #20]	; (800a854 <_sbrk_r+0x1c>)
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f9 f8b4 	bl	80039b0 <_sbrk>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_sbrk_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_sbrk_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20002c54 	.word	0x20002c54

0800a858 <_write_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4604      	mov	r4, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	4611      	mov	r1, r2
 800a860:	2200      	movs	r2, #0
 800a862:	4d05      	ldr	r5, [pc, #20]	; (800a878 <_write_r+0x20>)
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f7 fefe 	bl	8002668 <_write>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_write_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_write_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20002c54 	.word	0x20002c54

0800a87c <__errno>:
 800a87c:	4b01      	ldr	r3, [pc, #4]	; (800a884 <__errno+0x8>)
 800a87e:	6818      	ldr	r0, [r3, #0]
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000068 	.word	0x20000068

0800a888 <__libc_init_array>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	2600      	movs	r6, #0
 800a88c:	4d0c      	ldr	r5, [pc, #48]	; (800a8c0 <__libc_init_array+0x38>)
 800a88e:	4c0d      	ldr	r4, [pc, #52]	; (800a8c4 <__libc_init_array+0x3c>)
 800a890:	1b64      	subs	r4, r4, r5
 800a892:	10a4      	asrs	r4, r4, #2
 800a894:	42a6      	cmp	r6, r4
 800a896:	d109      	bne.n	800a8ac <__libc_init_array+0x24>
 800a898:	f000 fe38 	bl	800b50c <_init>
 800a89c:	2600      	movs	r6, #0
 800a89e:	4d0a      	ldr	r5, [pc, #40]	; (800a8c8 <__libc_init_array+0x40>)
 800a8a0:	4c0a      	ldr	r4, [pc, #40]	; (800a8cc <__libc_init_array+0x44>)
 800a8a2:	1b64      	subs	r4, r4, r5
 800a8a4:	10a4      	asrs	r4, r4, #2
 800a8a6:	42a6      	cmp	r6, r4
 800a8a8:	d105      	bne.n	800a8b6 <__libc_init_array+0x2e>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8b0:	4798      	blx	r3
 800a8b2:	3601      	adds	r6, #1
 800a8b4:	e7ee      	b.n	800a894 <__libc_init_array+0xc>
 800a8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ba:	4798      	blx	r3
 800a8bc:	3601      	adds	r6, #1
 800a8be:	e7f2      	b.n	800a8a6 <__libc_init_array+0x1e>
 800a8c0:	0800b960 	.word	0x0800b960
 800a8c4:	0800b960 	.word	0x0800b960
 800a8c8:	0800b960 	.word	0x0800b960
 800a8cc:	0800b964 	.word	0x0800b964

0800a8d0 <__retarget_lock_init_recursive>:
 800a8d0:	4770      	bx	lr

0800a8d2 <__retarget_lock_acquire_recursive>:
 800a8d2:	4770      	bx	lr

0800a8d4 <__retarget_lock_release_recursive>:
 800a8d4:	4770      	bx	lr

0800a8d6 <strcpy>:
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8dc:	f803 2b01 	strb.w	r2, [r3], #1
 800a8e0:	2a00      	cmp	r2, #0
 800a8e2:	d1f9      	bne.n	800a8d8 <strcpy+0x2>
 800a8e4:	4770      	bx	lr

0800a8e6 <memcpy>:
 800a8e6:	440a      	add	r2, r1
 800a8e8:	4291      	cmp	r1, r2
 800a8ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ee:	d100      	bne.n	800a8f2 <memcpy+0xc>
 800a8f0:	4770      	bx	lr
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f8:	4291      	cmp	r1, r2
 800a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8fe:	d1f9      	bne.n	800a8f4 <memcpy+0xe>
 800a900:	bd10      	pop	{r4, pc}
	...

0800a904 <_free_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4605      	mov	r5, r0
 800a908:	2900      	cmp	r1, #0
 800a90a:	d040      	beq.n	800a98e <_free_r+0x8a>
 800a90c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a910:	1f0c      	subs	r4, r1, #4
 800a912:	2b00      	cmp	r3, #0
 800a914:	bfb8      	it	lt
 800a916:	18e4      	addlt	r4, r4, r3
 800a918:	f7ff fc9e 	bl	800a258 <__malloc_lock>
 800a91c:	4a1c      	ldr	r2, [pc, #112]	; (800a990 <_free_r+0x8c>)
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	b933      	cbnz	r3, 800a930 <_free_r+0x2c>
 800a922:	6063      	str	r3, [r4, #4]
 800a924:	6014      	str	r4, [r2, #0]
 800a926:	4628      	mov	r0, r5
 800a928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a92c:	f7ff bc9a 	b.w	800a264 <__malloc_unlock>
 800a930:	42a3      	cmp	r3, r4
 800a932:	d908      	bls.n	800a946 <_free_r+0x42>
 800a934:	6820      	ldr	r0, [r4, #0]
 800a936:	1821      	adds	r1, r4, r0
 800a938:	428b      	cmp	r3, r1
 800a93a:	bf01      	itttt	eq
 800a93c:	6819      	ldreq	r1, [r3, #0]
 800a93e:	685b      	ldreq	r3, [r3, #4]
 800a940:	1809      	addeq	r1, r1, r0
 800a942:	6021      	streq	r1, [r4, #0]
 800a944:	e7ed      	b.n	800a922 <_free_r+0x1e>
 800a946:	461a      	mov	r2, r3
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	b10b      	cbz	r3, 800a950 <_free_r+0x4c>
 800a94c:	42a3      	cmp	r3, r4
 800a94e:	d9fa      	bls.n	800a946 <_free_r+0x42>
 800a950:	6811      	ldr	r1, [r2, #0]
 800a952:	1850      	adds	r0, r2, r1
 800a954:	42a0      	cmp	r0, r4
 800a956:	d10b      	bne.n	800a970 <_free_r+0x6c>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	4401      	add	r1, r0
 800a95c:	1850      	adds	r0, r2, r1
 800a95e:	4283      	cmp	r3, r0
 800a960:	6011      	str	r1, [r2, #0]
 800a962:	d1e0      	bne.n	800a926 <_free_r+0x22>
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4408      	add	r0, r1
 800a96a:	6010      	str	r0, [r2, #0]
 800a96c:	6053      	str	r3, [r2, #4]
 800a96e:	e7da      	b.n	800a926 <_free_r+0x22>
 800a970:	d902      	bls.n	800a978 <_free_r+0x74>
 800a972:	230c      	movs	r3, #12
 800a974:	602b      	str	r3, [r5, #0]
 800a976:	e7d6      	b.n	800a926 <_free_r+0x22>
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	1821      	adds	r1, r4, r0
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf01      	itttt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	1809      	addeq	r1, r1, r0
 800a986:	6021      	streq	r1, [r4, #0]
 800a988:	6063      	str	r3, [r4, #4]
 800a98a:	6054      	str	r4, [r2, #4]
 800a98c:	e7cb      	b.n	800a926 <_free_r+0x22>
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	20002b10 	.word	0x20002b10

0800a994 <__ssputs_r>:
 800a994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a998:	461f      	mov	r7, r3
 800a99a:	688e      	ldr	r6, [r1, #8]
 800a99c:	4682      	mov	sl, r0
 800a99e:	42be      	cmp	r6, r7
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	4690      	mov	r8, r2
 800a9a4:	680b      	ldr	r3, [r1, #0]
 800a9a6:	d82c      	bhi.n	800aa02 <__ssputs_r+0x6e>
 800a9a8:	898a      	ldrh	r2, [r1, #12]
 800a9aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9ae:	d026      	beq.n	800a9fe <__ssputs_r+0x6a>
 800a9b0:	6965      	ldr	r5, [r4, #20]
 800a9b2:	6909      	ldr	r1, [r1, #16]
 800a9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b8:	eba3 0901 	sub.w	r9, r3, r1
 800a9bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9c0:	1c7b      	adds	r3, r7, #1
 800a9c2:	444b      	add	r3, r9
 800a9c4:	106d      	asrs	r5, r5, #1
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	bf38      	it	cc
 800a9ca:	461d      	movcc	r5, r3
 800a9cc:	0553      	lsls	r3, r2, #21
 800a9ce:	d527      	bpl.n	800aa20 <__ssputs_r+0x8c>
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7ff fbc1 	bl	800a158 <_malloc_r>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	b360      	cbz	r0, 800aa34 <__ssputs_r+0xa0>
 800a9da:	464a      	mov	r2, r9
 800a9dc:	6921      	ldr	r1, [r4, #16]
 800a9de:	f7ff ff82 	bl	800a8e6 <memcpy>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ec:	81a3      	strh	r3, [r4, #12]
 800a9ee:	6126      	str	r6, [r4, #16]
 800a9f0:	444e      	add	r6, r9
 800a9f2:	6026      	str	r6, [r4, #0]
 800a9f4:	463e      	mov	r6, r7
 800a9f6:	6165      	str	r5, [r4, #20]
 800a9f8:	eba5 0509 	sub.w	r5, r5, r9
 800a9fc:	60a5      	str	r5, [r4, #8]
 800a9fe:	42be      	cmp	r6, r7
 800aa00:	d900      	bls.n	800aa04 <__ssputs_r+0x70>
 800aa02:	463e      	mov	r6, r7
 800aa04:	4632      	mov	r2, r6
 800aa06:	4641      	mov	r1, r8
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	f000 fcfc 	bl	800b406 <memmove>
 800aa0e:	2000      	movs	r0, #0
 800aa10:	68a3      	ldr	r3, [r4, #8]
 800aa12:	1b9b      	subs	r3, r3, r6
 800aa14:	60a3      	str	r3, [r4, #8]
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	4433      	add	r3, r6
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	462a      	mov	r2, r5
 800aa22:	f000 fd3b 	bl	800b49c <_realloc_r>
 800aa26:	4606      	mov	r6, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d1e0      	bne.n	800a9ee <__ssputs_r+0x5a>
 800aa2c:	4650      	mov	r0, sl
 800aa2e:	6921      	ldr	r1, [r4, #16]
 800aa30:	f7ff ff68 	bl	800a904 <_free_r>
 800aa34:	230c      	movs	r3, #12
 800aa36:	f8ca 3000 	str.w	r3, [sl]
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	e7e9      	b.n	800aa1c <__ssputs_r+0x88>

0800aa48 <_svfiprintf_r>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4698      	mov	r8, r3
 800aa4e:	898b      	ldrh	r3, [r1, #12]
 800aa50:	4607      	mov	r7, r0
 800aa52:	061b      	lsls	r3, r3, #24
 800aa54:	460d      	mov	r5, r1
 800aa56:	4614      	mov	r4, r2
 800aa58:	b09d      	sub	sp, #116	; 0x74
 800aa5a:	d50e      	bpl.n	800aa7a <_svfiprintf_r+0x32>
 800aa5c:	690b      	ldr	r3, [r1, #16]
 800aa5e:	b963      	cbnz	r3, 800aa7a <_svfiprintf_r+0x32>
 800aa60:	2140      	movs	r1, #64	; 0x40
 800aa62:	f7ff fb79 	bl	800a158 <_malloc_r>
 800aa66:	6028      	str	r0, [r5, #0]
 800aa68:	6128      	str	r0, [r5, #16]
 800aa6a:	b920      	cbnz	r0, 800aa76 <_svfiprintf_r+0x2e>
 800aa6c:	230c      	movs	r3, #12
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	f04f 30ff 	mov.w	r0, #4294967295
 800aa74:	e0d0      	b.n	800ac18 <_svfiprintf_r+0x1d0>
 800aa76:	2340      	movs	r3, #64	; 0x40
 800aa78:	616b      	str	r3, [r5, #20]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7e:	2320      	movs	r3, #32
 800aa80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa84:	2330      	movs	r3, #48	; 0x30
 800aa86:	f04f 0901 	mov.w	r9, #1
 800aa8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa8e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800ac30 <_svfiprintf_r+0x1e8>
 800aa92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa96:	4623      	mov	r3, r4
 800aa98:	469a      	mov	sl, r3
 800aa9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa9e:	b10a      	cbz	r2, 800aaa4 <_svfiprintf_r+0x5c>
 800aaa0:	2a25      	cmp	r2, #37	; 0x25
 800aaa2:	d1f9      	bne.n	800aa98 <_svfiprintf_r+0x50>
 800aaa4:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa8:	d00b      	beq.n	800aac2 <_svfiprintf_r+0x7a>
 800aaaa:	465b      	mov	r3, fp
 800aaac:	4622      	mov	r2, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ff6f 	bl	800a994 <__ssputs_r>
 800aab6:	3001      	adds	r0, #1
 800aab8:	f000 80a9 	beq.w	800ac0e <_svfiprintf_r+0x1c6>
 800aabc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aabe:	445a      	add	r2, fp
 800aac0:	9209      	str	r2, [sp, #36]	; 0x24
 800aac2:	f89a 3000 	ldrb.w	r3, [sl]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f000 80a1 	beq.w	800ac0e <_svfiprintf_r+0x1c6>
 800aacc:	2300      	movs	r3, #0
 800aace:	f04f 32ff 	mov.w	r2, #4294967295
 800aad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad6:	f10a 0a01 	add.w	sl, sl, #1
 800aada:	9304      	str	r3, [sp, #16]
 800aadc:	9307      	str	r3, [sp, #28]
 800aade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aae2:	931a      	str	r3, [sp, #104]	; 0x68
 800aae4:	4654      	mov	r4, sl
 800aae6:	2205      	movs	r2, #5
 800aae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaec:	4850      	ldr	r0, [pc, #320]	; (800ac30 <_svfiprintf_r+0x1e8>)
 800aaee:	f000 fcc7 	bl	800b480 <memchr>
 800aaf2:	9a04      	ldr	r2, [sp, #16]
 800aaf4:	b9d8      	cbnz	r0, 800ab2e <_svfiprintf_r+0xe6>
 800aaf6:	06d0      	lsls	r0, r2, #27
 800aaf8:	bf44      	itt	mi
 800aafa:	2320      	movmi	r3, #32
 800aafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab00:	0711      	lsls	r1, r2, #28
 800ab02:	bf44      	itt	mi
 800ab04:	232b      	movmi	r3, #43	; 0x2b
 800ab06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab10:	d015      	beq.n	800ab3e <_svfiprintf_r+0xf6>
 800ab12:	4654      	mov	r4, sl
 800ab14:	2000      	movs	r0, #0
 800ab16:	f04f 0c0a 	mov.w	ip, #10
 800ab1a:	9a07      	ldr	r2, [sp, #28]
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab22:	3b30      	subs	r3, #48	; 0x30
 800ab24:	2b09      	cmp	r3, #9
 800ab26:	d94d      	bls.n	800abc4 <_svfiprintf_r+0x17c>
 800ab28:	b1b0      	cbz	r0, 800ab58 <_svfiprintf_r+0x110>
 800ab2a:	9207      	str	r2, [sp, #28]
 800ab2c:	e014      	b.n	800ab58 <_svfiprintf_r+0x110>
 800ab2e:	eba0 0308 	sub.w	r3, r0, r8
 800ab32:	fa09 f303 	lsl.w	r3, r9, r3
 800ab36:	4313      	orrs	r3, r2
 800ab38:	46a2      	mov	sl, r4
 800ab3a:	9304      	str	r3, [sp, #16]
 800ab3c:	e7d2      	b.n	800aae4 <_svfiprintf_r+0x9c>
 800ab3e:	9b03      	ldr	r3, [sp, #12]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	9103      	str	r1, [sp, #12]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	bfbb      	ittet	lt
 800ab4a:	425b      	neglt	r3, r3
 800ab4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab50:	9307      	strge	r3, [sp, #28]
 800ab52:	9307      	strlt	r3, [sp, #28]
 800ab54:	bfb8      	it	lt
 800ab56:	9204      	strlt	r2, [sp, #16]
 800ab58:	7823      	ldrb	r3, [r4, #0]
 800ab5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab5c:	d10c      	bne.n	800ab78 <_svfiprintf_r+0x130>
 800ab5e:	7863      	ldrb	r3, [r4, #1]
 800ab60:	2b2a      	cmp	r3, #42	; 0x2a
 800ab62:	d134      	bne.n	800abce <_svfiprintf_r+0x186>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	3402      	adds	r4, #2
 800ab68:	1d1a      	adds	r2, r3, #4
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	9203      	str	r2, [sp, #12]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	bfb8      	it	lt
 800ab72:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab76:	9305      	str	r3, [sp, #20]
 800ab78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800ac34 <_svfiprintf_r+0x1ec>
 800ab7c:	2203      	movs	r2, #3
 800ab7e:	4650      	mov	r0, sl
 800ab80:	7821      	ldrb	r1, [r4, #0]
 800ab82:	f000 fc7d 	bl	800b480 <memchr>
 800ab86:	b138      	cbz	r0, 800ab98 <_svfiprintf_r+0x150>
 800ab88:	2240      	movs	r2, #64	; 0x40
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	eba0 000a 	sub.w	r0, r0, sl
 800ab90:	4082      	lsls	r2, r0
 800ab92:	4313      	orrs	r3, r2
 800ab94:	3401      	adds	r4, #1
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9c:	2206      	movs	r2, #6
 800ab9e:	4826      	ldr	r0, [pc, #152]	; (800ac38 <_svfiprintf_r+0x1f0>)
 800aba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba4:	f000 fc6c 	bl	800b480 <memchr>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d038      	beq.n	800ac1e <_svfiprintf_r+0x1d6>
 800abac:	4b23      	ldr	r3, [pc, #140]	; (800ac3c <_svfiprintf_r+0x1f4>)
 800abae:	bb1b      	cbnz	r3, 800abf8 <_svfiprintf_r+0x1b0>
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	3307      	adds	r3, #7
 800abb4:	f023 0307 	bic.w	r3, r3, #7
 800abb8:	3308      	adds	r3, #8
 800abba:	9303      	str	r3, [sp, #12]
 800abbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abbe:	4433      	add	r3, r6
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
 800abc2:	e768      	b.n	800aa96 <_svfiprintf_r+0x4e>
 800abc4:	460c      	mov	r4, r1
 800abc6:	2001      	movs	r0, #1
 800abc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abcc:	e7a6      	b.n	800ab1c <_svfiprintf_r+0xd4>
 800abce:	2300      	movs	r3, #0
 800abd0:	f04f 0c0a 	mov.w	ip, #10
 800abd4:	4619      	mov	r1, r3
 800abd6:	3401      	adds	r4, #1
 800abd8:	9305      	str	r3, [sp, #20]
 800abda:	4620      	mov	r0, r4
 800abdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe0:	3a30      	subs	r2, #48	; 0x30
 800abe2:	2a09      	cmp	r2, #9
 800abe4:	d903      	bls.n	800abee <_svfiprintf_r+0x1a6>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0c6      	beq.n	800ab78 <_svfiprintf_r+0x130>
 800abea:	9105      	str	r1, [sp, #20]
 800abec:	e7c4      	b.n	800ab78 <_svfiprintf_r+0x130>
 800abee:	4604      	mov	r4, r0
 800abf0:	2301      	movs	r3, #1
 800abf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800abf6:	e7f0      	b.n	800abda <_svfiprintf_r+0x192>
 800abf8:	ab03      	add	r3, sp, #12
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	462a      	mov	r2, r5
 800abfe:	4638      	mov	r0, r7
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <_svfiprintf_r+0x1f8>)
 800ac02:	a904      	add	r1, sp, #16
 800ac04:	f3af 8000 	nop.w
 800ac08:	1c42      	adds	r2, r0, #1
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	d1d6      	bne.n	800abbc <_svfiprintf_r+0x174>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	065b      	lsls	r3, r3, #25
 800ac12:	f53f af2d 	bmi.w	800aa70 <_svfiprintf_r+0x28>
 800ac16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac18:	b01d      	add	sp, #116	; 0x74
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	ab03      	add	r3, sp, #12
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	462a      	mov	r2, r5
 800ac24:	4638      	mov	r0, r7
 800ac26:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <_svfiprintf_r+0x1f8>)
 800ac28:	a904      	add	r1, sp, #16
 800ac2a:	f000 f9bf 	bl	800afac <_printf_i>
 800ac2e:	e7eb      	b.n	800ac08 <_svfiprintf_r+0x1c0>
 800ac30:	0800b92b 	.word	0x0800b92b
 800ac34:	0800b931 	.word	0x0800b931
 800ac38:	0800b935 	.word	0x0800b935
 800ac3c:	00000000 	.word	0x00000000
 800ac40:	0800a995 	.word	0x0800a995

0800ac44 <__sfputc_r>:
 800ac44:	6893      	ldr	r3, [r2, #8]
 800ac46:	b410      	push	{r4}
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	6093      	str	r3, [r2, #8]
 800ac4e:	da07      	bge.n	800ac60 <__sfputc_r+0x1c>
 800ac50:	6994      	ldr	r4, [r2, #24]
 800ac52:	42a3      	cmp	r3, r4
 800ac54:	db01      	blt.n	800ac5a <__sfputc_r+0x16>
 800ac56:	290a      	cmp	r1, #10
 800ac58:	d102      	bne.n	800ac60 <__sfputc_r+0x1c>
 800ac5a:	bc10      	pop	{r4}
 800ac5c:	f7ff bcaf 	b.w	800a5be <__swbuf_r>
 800ac60:	6813      	ldr	r3, [r2, #0]
 800ac62:	1c58      	adds	r0, r3, #1
 800ac64:	6010      	str	r0, [r2, #0]
 800ac66:	7019      	strb	r1, [r3, #0]
 800ac68:	4608      	mov	r0, r1
 800ac6a:	bc10      	pop	{r4}
 800ac6c:	4770      	bx	lr

0800ac6e <__sfputs_r>:
 800ac6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	4614      	mov	r4, r2
 800ac76:	18d5      	adds	r5, r2, r3
 800ac78:	42ac      	cmp	r4, r5
 800ac7a:	d101      	bne.n	800ac80 <__sfputs_r+0x12>
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	e007      	b.n	800ac90 <__sfputs_r+0x22>
 800ac80:	463a      	mov	r2, r7
 800ac82:	4630      	mov	r0, r6
 800ac84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac88:	f7ff ffdc 	bl	800ac44 <__sfputc_r>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d1f3      	bne.n	800ac78 <__sfputs_r+0xa>
 800ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac94 <_vfiprintf_r>:
 800ac94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	460d      	mov	r5, r1
 800ac9a:	4614      	mov	r4, r2
 800ac9c:	4698      	mov	r8, r3
 800ac9e:	4606      	mov	r6, r0
 800aca0:	b09d      	sub	sp, #116	; 0x74
 800aca2:	b118      	cbz	r0, 800acac <_vfiprintf_r+0x18>
 800aca4:	6a03      	ldr	r3, [r0, #32]
 800aca6:	b90b      	cbnz	r3, 800acac <_vfiprintf_r+0x18>
 800aca8:	f7ff fb6e 	bl	800a388 <__sinit>
 800acac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acae:	07d9      	lsls	r1, r3, #31
 800acb0:	d405      	bmi.n	800acbe <_vfiprintf_r+0x2a>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	059a      	lsls	r2, r3, #22
 800acb6:	d402      	bmi.n	800acbe <_vfiprintf_r+0x2a>
 800acb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acba:	f7ff fe0a 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800acbe:	89ab      	ldrh	r3, [r5, #12]
 800acc0:	071b      	lsls	r3, r3, #28
 800acc2:	d501      	bpl.n	800acc8 <_vfiprintf_r+0x34>
 800acc4:	692b      	ldr	r3, [r5, #16]
 800acc6:	b99b      	cbnz	r3, 800acf0 <_vfiprintf_r+0x5c>
 800acc8:	4629      	mov	r1, r5
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff fcb4 	bl	800a638 <__swsetup_r>
 800acd0:	b170      	cbz	r0, 800acf0 <_vfiprintf_r+0x5c>
 800acd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acd4:	07dc      	lsls	r4, r3, #31
 800acd6:	d504      	bpl.n	800ace2 <_vfiprintf_r+0x4e>
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	b01d      	add	sp, #116	; 0x74
 800acde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace2:	89ab      	ldrh	r3, [r5, #12]
 800ace4:	0598      	lsls	r0, r3, #22
 800ace6:	d4f7      	bmi.n	800acd8 <_vfiprintf_r+0x44>
 800ace8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acea:	f7ff fdf3 	bl	800a8d4 <__retarget_lock_release_recursive>
 800acee:	e7f3      	b.n	800acd8 <_vfiprintf_r+0x44>
 800acf0:	2300      	movs	r3, #0
 800acf2:	9309      	str	r3, [sp, #36]	; 0x24
 800acf4:	2320      	movs	r3, #32
 800acf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfa:	2330      	movs	r3, #48	; 0x30
 800acfc:	f04f 0901 	mov.w	r9, #1
 800ad00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad04:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800aeb4 <_vfiprintf_r+0x220>
 800ad08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad0c:	4623      	mov	r3, r4
 800ad0e:	469a      	mov	sl, r3
 800ad10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad14:	b10a      	cbz	r2, 800ad1a <_vfiprintf_r+0x86>
 800ad16:	2a25      	cmp	r2, #37	; 0x25
 800ad18:	d1f9      	bne.n	800ad0e <_vfiprintf_r+0x7a>
 800ad1a:	ebba 0b04 	subs.w	fp, sl, r4
 800ad1e:	d00b      	beq.n	800ad38 <_vfiprintf_r+0xa4>
 800ad20:	465b      	mov	r3, fp
 800ad22:	4622      	mov	r2, r4
 800ad24:	4629      	mov	r1, r5
 800ad26:	4630      	mov	r0, r6
 800ad28:	f7ff ffa1 	bl	800ac6e <__sfputs_r>
 800ad2c:	3001      	adds	r0, #1
 800ad2e:	f000 80a9 	beq.w	800ae84 <_vfiprintf_r+0x1f0>
 800ad32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad34:	445a      	add	r2, fp
 800ad36:	9209      	str	r2, [sp, #36]	; 0x24
 800ad38:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f000 80a1 	beq.w	800ae84 <_vfiprintf_r+0x1f0>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f04f 32ff 	mov.w	r2, #4294967295
 800ad48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad4c:	f10a 0a01 	add.w	sl, sl, #1
 800ad50:	9304      	str	r3, [sp, #16]
 800ad52:	9307      	str	r3, [sp, #28]
 800ad54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad58:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5a:	4654      	mov	r4, sl
 800ad5c:	2205      	movs	r2, #5
 800ad5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad62:	4854      	ldr	r0, [pc, #336]	; (800aeb4 <_vfiprintf_r+0x220>)
 800ad64:	f000 fb8c 	bl	800b480 <memchr>
 800ad68:	9a04      	ldr	r2, [sp, #16]
 800ad6a:	b9d8      	cbnz	r0, 800ada4 <_vfiprintf_r+0x110>
 800ad6c:	06d1      	lsls	r1, r2, #27
 800ad6e:	bf44      	itt	mi
 800ad70:	2320      	movmi	r3, #32
 800ad72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad76:	0713      	lsls	r3, r2, #28
 800ad78:	bf44      	itt	mi
 800ad7a:	232b      	movmi	r3, #43	; 0x2b
 800ad7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad80:	f89a 3000 	ldrb.w	r3, [sl]
 800ad84:	2b2a      	cmp	r3, #42	; 0x2a
 800ad86:	d015      	beq.n	800adb4 <_vfiprintf_r+0x120>
 800ad88:	4654      	mov	r4, sl
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	f04f 0c0a 	mov.w	ip, #10
 800ad90:	9a07      	ldr	r2, [sp, #28]
 800ad92:	4621      	mov	r1, r4
 800ad94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad98:	3b30      	subs	r3, #48	; 0x30
 800ad9a:	2b09      	cmp	r3, #9
 800ad9c:	d94d      	bls.n	800ae3a <_vfiprintf_r+0x1a6>
 800ad9e:	b1b0      	cbz	r0, 800adce <_vfiprintf_r+0x13a>
 800ada0:	9207      	str	r2, [sp, #28]
 800ada2:	e014      	b.n	800adce <_vfiprintf_r+0x13a>
 800ada4:	eba0 0308 	sub.w	r3, r0, r8
 800ada8:	fa09 f303 	lsl.w	r3, r9, r3
 800adac:	4313      	orrs	r3, r2
 800adae:	46a2      	mov	sl, r4
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	e7d2      	b.n	800ad5a <_vfiprintf_r+0xc6>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	1d19      	adds	r1, r3, #4
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	9103      	str	r1, [sp, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bfbb      	ittet	lt
 800adc0:	425b      	neglt	r3, r3
 800adc2:	f042 0202 	orrlt.w	r2, r2, #2
 800adc6:	9307      	strge	r3, [sp, #28]
 800adc8:	9307      	strlt	r3, [sp, #28]
 800adca:	bfb8      	it	lt
 800adcc:	9204      	strlt	r2, [sp, #16]
 800adce:	7823      	ldrb	r3, [r4, #0]
 800add0:	2b2e      	cmp	r3, #46	; 0x2e
 800add2:	d10c      	bne.n	800adee <_vfiprintf_r+0x15a>
 800add4:	7863      	ldrb	r3, [r4, #1]
 800add6:	2b2a      	cmp	r3, #42	; 0x2a
 800add8:	d134      	bne.n	800ae44 <_vfiprintf_r+0x1b0>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	3402      	adds	r4, #2
 800adde:	1d1a      	adds	r2, r3, #4
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	9203      	str	r2, [sp, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	bfb8      	it	lt
 800ade8:	f04f 33ff 	movlt.w	r3, #4294967295
 800adec:	9305      	str	r3, [sp, #20]
 800adee:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aeb8 <_vfiprintf_r+0x224>
 800adf2:	2203      	movs	r2, #3
 800adf4:	4650      	mov	r0, sl
 800adf6:	7821      	ldrb	r1, [r4, #0]
 800adf8:	f000 fb42 	bl	800b480 <memchr>
 800adfc:	b138      	cbz	r0, 800ae0e <_vfiprintf_r+0x17a>
 800adfe:	2240      	movs	r2, #64	; 0x40
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	eba0 000a 	sub.w	r0, r0, sl
 800ae06:	4082      	lsls	r2, r0
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	3401      	adds	r4, #1
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae12:	2206      	movs	r2, #6
 800ae14:	4829      	ldr	r0, [pc, #164]	; (800aebc <_vfiprintf_r+0x228>)
 800ae16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae1a:	f000 fb31 	bl	800b480 <memchr>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	d03f      	beq.n	800aea2 <_vfiprintf_r+0x20e>
 800ae22:	4b27      	ldr	r3, [pc, #156]	; (800aec0 <_vfiprintf_r+0x22c>)
 800ae24:	bb1b      	cbnz	r3, 800ae6e <_vfiprintf_r+0x1da>
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	3307      	adds	r3, #7
 800ae2a:	f023 0307 	bic.w	r3, r3, #7
 800ae2e:	3308      	adds	r3, #8
 800ae30:	9303      	str	r3, [sp, #12]
 800ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae34:	443b      	add	r3, r7
 800ae36:	9309      	str	r3, [sp, #36]	; 0x24
 800ae38:	e768      	b.n	800ad0c <_vfiprintf_r+0x78>
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae42:	e7a6      	b.n	800ad92 <_vfiprintf_r+0xfe>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f04f 0c0a 	mov.w	ip, #10
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	3401      	adds	r4, #1
 800ae4e:	9305      	str	r3, [sp, #20]
 800ae50:	4620      	mov	r0, r4
 800ae52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae56:	3a30      	subs	r2, #48	; 0x30
 800ae58:	2a09      	cmp	r2, #9
 800ae5a:	d903      	bls.n	800ae64 <_vfiprintf_r+0x1d0>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0c6      	beq.n	800adee <_vfiprintf_r+0x15a>
 800ae60:	9105      	str	r1, [sp, #20]
 800ae62:	e7c4      	b.n	800adee <_vfiprintf_r+0x15a>
 800ae64:	4604      	mov	r4, r0
 800ae66:	2301      	movs	r3, #1
 800ae68:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae6c:	e7f0      	b.n	800ae50 <_vfiprintf_r+0x1bc>
 800ae6e:	ab03      	add	r3, sp, #12
 800ae70:	9300      	str	r3, [sp, #0]
 800ae72:	462a      	mov	r2, r5
 800ae74:	4630      	mov	r0, r6
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <_vfiprintf_r+0x230>)
 800ae78:	a904      	add	r1, sp, #16
 800ae7a:	f3af 8000 	nop.w
 800ae7e:	4607      	mov	r7, r0
 800ae80:	1c78      	adds	r0, r7, #1
 800ae82:	d1d6      	bne.n	800ae32 <_vfiprintf_r+0x19e>
 800ae84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae86:	07d9      	lsls	r1, r3, #31
 800ae88:	d405      	bmi.n	800ae96 <_vfiprintf_r+0x202>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	059a      	lsls	r2, r3, #22
 800ae8e:	d402      	bmi.n	800ae96 <_vfiprintf_r+0x202>
 800ae90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae92:	f7ff fd1f 	bl	800a8d4 <__retarget_lock_release_recursive>
 800ae96:	89ab      	ldrh	r3, [r5, #12]
 800ae98:	065b      	lsls	r3, r3, #25
 800ae9a:	f53f af1d 	bmi.w	800acd8 <_vfiprintf_r+0x44>
 800ae9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea0:	e71c      	b.n	800acdc <_vfiprintf_r+0x48>
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	462a      	mov	r2, r5
 800aea8:	4630      	mov	r0, r6
 800aeaa:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <_vfiprintf_r+0x230>)
 800aeac:	a904      	add	r1, sp, #16
 800aeae:	f000 f87d 	bl	800afac <_printf_i>
 800aeb2:	e7e4      	b.n	800ae7e <_vfiprintf_r+0x1ea>
 800aeb4:	0800b92b 	.word	0x0800b92b
 800aeb8:	0800b931 	.word	0x0800b931
 800aebc:	0800b935 	.word	0x0800b935
 800aec0:	00000000 	.word	0x00000000
 800aec4:	0800ac6f 	.word	0x0800ac6f

0800aec8 <_printf_common>:
 800aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	4616      	mov	r6, r2
 800aece:	4699      	mov	r9, r3
 800aed0:	688a      	ldr	r2, [r1, #8]
 800aed2:	690b      	ldr	r3, [r1, #16]
 800aed4:	4607      	mov	r7, r0
 800aed6:	4293      	cmp	r3, r2
 800aed8:	bfb8      	it	lt
 800aeda:	4613      	movlt	r3, r2
 800aedc:	6033      	str	r3, [r6, #0]
 800aede:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aee2:	460c      	mov	r4, r1
 800aee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aee8:	b10a      	cbz	r2, 800aeee <_printf_common+0x26>
 800aeea:	3301      	adds	r3, #1
 800aeec:	6033      	str	r3, [r6, #0]
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	0699      	lsls	r1, r3, #26
 800aef2:	bf42      	ittt	mi
 800aef4:	6833      	ldrmi	r3, [r6, #0]
 800aef6:	3302      	addmi	r3, #2
 800aef8:	6033      	strmi	r3, [r6, #0]
 800aefa:	6825      	ldr	r5, [r4, #0]
 800aefc:	f015 0506 	ands.w	r5, r5, #6
 800af00:	d106      	bne.n	800af10 <_printf_common+0x48>
 800af02:	f104 0a19 	add.w	sl, r4, #25
 800af06:	68e3      	ldr	r3, [r4, #12]
 800af08:	6832      	ldr	r2, [r6, #0]
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	42ab      	cmp	r3, r5
 800af0e:	dc2b      	bgt.n	800af68 <_printf_common+0xa0>
 800af10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af14:	1e13      	subs	r3, r2, #0
 800af16:	6822      	ldr	r2, [r4, #0]
 800af18:	bf18      	it	ne
 800af1a:	2301      	movne	r3, #1
 800af1c:	0692      	lsls	r2, r2, #26
 800af1e:	d430      	bmi.n	800af82 <_printf_common+0xba>
 800af20:	4649      	mov	r1, r9
 800af22:	4638      	mov	r0, r7
 800af24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af28:	47c0      	blx	r8
 800af2a:	3001      	adds	r0, #1
 800af2c:	d023      	beq.n	800af76 <_printf_common+0xae>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	6922      	ldr	r2, [r4, #16]
 800af32:	f003 0306 	and.w	r3, r3, #6
 800af36:	2b04      	cmp	r3, #4
 800af38:	bf14      	ite	ne
 800af3a:	2500      	movne	r5, #0
 800af3c:	6833      	ldreq	r3, [r6, #0]
 800af3e:	f04f 0600 	mov.w	r6, #0
 800af42:	bf08      	it	eq
 800af44:	68e5      	ldreq	r5, [r4, #12]
 800af46:	f104 041a 	add.w	r4, r4, #26
 800af4a:	bf08      	it	eq
 800af4c:	1aed      	subeq	r5, r5, r3
 800af4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af52:	bf08      	it	eq
 800af54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af58:	4293      	cmp	r3, r2
 800af5a:	bfc4      	itt	gt
 800af5c:	1a9b      	subgt	r3, r3, r2
 800af5e:	18ed      	addgt	r5, r5, r3
 800af60:	42b5      	cmp	r5, r6
 800af62:	d11a      	bne.n	800af9a <_printf_common+0xd2>
 800af64:	2000      	movs	r0, #0
 800af66:	e008      	b.n	800af7a <_printf_common+0xb2>
 800af68:	2301      	movs	r3, #1
 800af6a:	4652      	mov	r2, sl
 800af6c:	4649      	mov	r1, r9
 800af6e:	4638      	mov	r0, r7
 800af70:	47c0      	blx	r8
 800af72:	3001      	adds	r0, #1
 800af74:	d103      	bne.n	800af7e <_printf_common+0xb6>
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af7e:	3501      	adds	r5, #1
 800af80:	e7c1      	b.n	800af06 <_printf_common+0x3e>
 800af82:	2030      	movs	r0, #48	; 0x30
 800af84:	18e1      	adds	r1, r4, r3
 800af86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af8a:	1c5a      	adds	r2, r3, #1
 800af8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af90:	4422      	add	r2, r4
 800af92:	3302      	adds	r3, #2
 800af94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af98:	e7c2      	b.n	800af20 <_printf_common+0x58>
 800af9a:	2301      	movs	r3, #1
 800af9c:	4622      	mov	r2, r4
 800af9e:	4649      	mov	r1, r9
 800afa0:	4638      	mov	r0, r7
 800afa2:	47c0      	blx	r8
 800afa4:	3001      	adds	r0, #1
 800afa6:	d0e6      	beq.n	800af76 <_printf_common+0xae>
 800afa8:	3601      	adds	r6, #1
 800afaa:	e7d9      	b.n	800af60 <_printf_common+0x98>

0800afac <_printf_i>:
 800afac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	7e0f      	ldrb	r7, [r1, #24]
 800afb2:	4691      	mov	r9, r2
 800afb4:	2f78      	cmp	r7, #120	; 0x78
 800afb6:	4680      	mov	r8, r0
 800afb8:	460c      	mov	r4, r1
 800afba:	469a      	mov	sl, r3
 800afbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800afbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afc2:	d807      	bhi.n	800afd4 <_printf_i+0x28>
 800afc4:	2f62      	cmp	r7, #98	; 0x62
 800afc6:	d80a      	bhi.n	800afde <_printf_i+0x32>
 800afc8:	2f00      	cmp	r7, #0
 800afca:	f000 80d5 	beq.w	800b178 <_printf_i+0x1cc>
 800afce:	2f58      	cmp	r7, #88	; 0x58
 800afd0:	f000 80c1 	beq.w	800b156 <_printf_i+0x1aa>
 800afd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afdc:	e03a      	b.n	800b054 <_printf_i+0xa8>
 800afde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afe2:	2b15      	cmp	r3, #21
 800afe4:	d8f6      	bhi.n	800afd4 <_printf_i+0x28>
 800afe6:	a101      	add	r1, pc, #4	; (adr r1, 800afec <_printf_i+0x40>)
 800afe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afec:	0800b045 	.word	0x0800b045
 800aff0:	0800b059 	.word	0x0800b059
 800aff4:	0800afd5 	.word	0x0800afd5
 800aff8:	0800afd5 	.word	0x0800afd5
 800affc:	0800afd5 	.word	0x0800afd5
 800b000:	0800afd5 	.word	0x0800afd5
 800b004:	0800b059 	.word	0x0800b059
 800b008:	0800afd5 	.word	0x0800afd5
 800b00c:	0800afd5 	.word	0x0800afd5
 800b010:	0800afd5 	.word	0x0800afd5
 800b014:	0800afd5 	.word	0x0800afd5
 800b018:	0800b15f 	.word	0x0800b15f
 800b01c:	0800b085 	.word	0x0800b085
 800b020:	0800b119 	.word	0x0800b119
 800b024:	0800afd5 	.word	0x0800afd5
 800b028:	0800afd5 	.word	0x0800afd5
 800b02c:	0800b181 	.word	0x0800b181
 800b030:	0800afd5 	.word	0x0800afd5
 800b034:	0800b085 	.word	0x0800b085
 800b038:	0800afd5 	.word	0x0800afd5
 800b03c:	0800afd5 	.word	0x0800afd5
 800b040:	0800b121 	.word	0x0800b121
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	602a      	str	r2, [r5, #0]
 800b04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b054:	2301      	movs	r3, #1
 800b056:	e0a0      	b.n	800b19a <_printf_i+0x1ee>
 800b058:	6820      	ldr	r0, [r4, #0]
 800b05a:	682b      	ldr	r3, [r5, #0]
 800b05c:	0607      	lsls	r7, r0, #24
 800b05e:	f103 0104 	add.w	r1, r3, #4
 800b062:	6029      	str	r1, [r5, #0]
 800b064:	d501      	bpl.n	800b06a <_printf_i+0xbe>
 800b066:	681e      	ldr	r6, [r3, #0]
 800b068:	e003      	b.n	800b072 <_printf_i+0xc6>
 800b06a:	0646      	lsls	r6, r0, #25
 800b06c:	d5fb      	bpl.n	800b066 <_printf_i+0xba>
 800b06e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b072:	2e00      	cmp	r6, #0
 800b074:	da03      	bge.n	800b07e <_printf_i+0xd2>
 800b076:	232d      	movs	r3, #45	; 0x2d
 800b078:	4276      	negs	r6, r6
 800b07a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b07e:	230a      	movs	r3, #10
 800b080:	4859      	ldr	r0, [pc, #356]	; (800b1e8 <_printf_i+0x23c>)
 800b082:	e012      	b.n	800b0aa <_printf_i+0xfe>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	6820      	ldr	r0, [r4, #0]
 800b088:	1d19      	adds	r1, r3, #4
 800b08a:	6029      	str	r1, [r5, #0]
 800b08c:	0605      	lsls	r5, r0, #24
 800b08e:	d501      	bpl.n	800b094 <_printf_i+0xe8>
 800b090:	681e      	ldr	r6, [r3, #0]
 800b092:	e002      	b.n	800b09a <_printf_i+0xee>
 800b094:	0641      	lsls	r1, r0, #25
 800b096:	d5fb      	bpl.n	800b090 <_printf_i+0xe4>
 800b098:	881e      	ldrh	r6, [r3, #0]
 800b09a:	2f6f      	cmp	r7, #111	; 0x6f
 800b09c:	bf0c      	ite	eq
 800b09e:	2308      	moveq	r3, #8
 800b0a0:	230a      	movne	r3, #10
 800b0a2:	4851      	ldr	r0, [pc, #324]	; (800b1e8 <_printf_i+0x23c>)
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0aa:	6865      	ldr	r5, [r4, #4]
 800b0ac:	2d00      	cmp	r5, #0
 800b0ae:	bfa8      	it	ge
 800b0b0:	6821      	ldrge	r1, [r4, #0]
 800b0b2:	60a5      	str	r5, [r4, #8]
 800b0b4:	bfa4      	itt	ge
 800b0b6:	f021 0104 	bicge.w	r1, r1, #4
 800b0ba:	6021      	strge	r1, [r4, #0]
 800b0bc:	b90e      	cbnz	r6, 800b0c2 <_printf_i+0x116>
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	d04b      	beq.n	800b15a <_printf_i+0x1ae>
 800b0c2:	4615      	mov	r5, r2
 800b0c4:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0c8:	fb03 6711 	mls	r7, r3, r1, r6
 800b0cc:	5dc7      	ldrb	r7, [r0, r7]
 800b0ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0d2:	4637      	mov	r7, r6
 800b0d4:	42bb      	cmp	r3, r7
 800b0d6:	460e      	mov	r6, r1
 800b0d8:	d9f4      	bls.n	800b0c4 <_printf_i+0x118>
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d10b      	bne.n	800b0f6 <_printf_i+0x14a>
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	07de      	lsls	r6, r3, #31
 800b0e2:	d508      	bpl.n	800b0f6 <_printf_i+0x14a>
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	6861      	ldr	r1, [r4, #4]
 800b0e8:	4299      	cmp	r1, r3
 800b0ea:	bfde      	ittt	le
 800b0ec:	2330      	movle	r3, #48	; 0x30
 800b0ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0f6:	1b52      	subs	r2, r2, r5
 800b0f8:	6122      	str	r2, [r4, #16]
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	4640      	mov	r0, r8
 800b100:	f8cd a000 	str.w	sl, [sp]
 800b104:	aa03      	add	r2, sp, #12
 800b106:	f7ff fedf 	bl	800aec8 <_printf_common>
 800b10a:	3001      	adds	r0, #1
 800b10c:	d14a      	bne.n	800b1a4 <_printf_i+0x1f8>
 800b10e:	f04f 30ff 	mov.w	r0, #4294967295
 800b112:	b004      	add	sp, #16
 800b114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	f043 0320 	orr.w	r3, r3, #32
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	2778      	movs	r7, #120	; 0x78
 800b122:	4832      	ldr	r0, [pc, #200]	; (800b1ec <_printf_i+0x240>)
 800b124:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	6829      	ldr	r1, [r5, #0]
 800b12c:	061f      	lsls	r7, r3, #24
 800b12e:	f851 6b04 	ldr.w	r6, [r1], #4
 800b132:	d402      	bmi.n	800b13a <_printf_i+0x18e>
 800b134:	065f      	lsls	r7, r3, #25
 800b136:	bf48      	it	mi
 800b138:	b2b6      	uxthmi	r6, r6
 800b13a:	07df      	lsls	r7, r3, #31
 800b13c:	bf48      	it	mi
 800b13e:	f043 0320 	orrmi.w	r3, r3, #32
 800b142:	6029      	str	r1, [r5, #0]
 800b144:	bf48      	it	mi
 800b146:	6023      	strmi	r3, [r4, #0]
 800b148:	b91e      	cbnz	r6, 800b152 <_printf_i+0x1a6>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	f023 0320 	bic.w	r3, r3, #32
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	2310      	movs	r3, #16
 800b154:	e7a6      	b.n	800b0a4 <_printf_i+0xf8>
 800b156:	4824      	ldr	r0, [pc, #144]	; (800b1e8 <_printf_i+0x23c>)
 800b158:	e7e4      	b.n	800b124 <_printf_i+0x178>
 800b15a:	4615      	mov	r5, r2
 800b15c:	e7bd      	b.n	800b0da <_printf_i+0x12e>
 800b15e:	682b      	ldr	r3, [r5, #0]
 800b160:	6826      	ldr	r6, [r4, #0]
 800b162:	1d18      	adds	r0, r3, #4
 800b164:	6961      	ldr	r1, [r4, #20]
 800b166:	6028      	str	r0, [r5, #0]
 800b168:	0635      	lsls	r5, r6, #24
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	d501      	bpl.n	800b172 <_printf_i+0x1c6>
 800b16e:	6019      	str	r1, [r3, #0]
 800b170:	e002      	b.n	800b178 <_printf_i+0x1cc>
 800b172:	0670      	lsls	r0, r6, #25
 800b174:	d5fb      	bpl.n	800b16e <_printf_i+0x1c2>
 800b176:	8019      	strh	r1, [r3, #0]
 800b178:	2300      	movs	r3, #0
 800b17a:	4615      	mov	r5, r2
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	e7bc      	b.n	800b0fa <_printf_i+0x14e>
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	2100      	movs	r1, #0
 800b184:	1d1a      	adds	r2, r3, #4
 800b186:	602a      	str	r2, [r5, #0]
 800b188:	681d      	ldr	r5, [r3, #0]
 800b18a:	6862      	ldr	r2, [r4, #4]
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 f977 	bl	800b480 <memchr>
 800b192:	b108      	cbz	r0, 800b198 <_printf_i+0x1ec>
 800b194:	1b40      	subs	r0, r0, r5
 800b196:	6060      	str	r0, [r4, #4]
 800b198:	6863      	ldr	r3, [r4, #4]
 800b19a:	6123      	str	r3, [r4, #16]
 800b19c:	2300      	movs	r3, #0
 800b19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a2:	e7aa      	b.n	800b0fa <_printf_i+0x14e>
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	47d0      	blx	sl
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	d0ad      	beq.n	800b10e <_printf_i+0x162>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	079b      	lsls	r3, r3, #30
 800b1b6:	d413      	bmi.n	800b1e0 <_printf_i+0x234>
 800b1b8:	68e0      	ldr	r0, [r4, #12]
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	4298      	cmp	r0, r3
 800b1be:	bfb8      	it	lt
 800b1c0:	4618      	movlt	r0, r3
 800b1c2:	e7a6      	b.n	800b112 <_printf_i+0x166>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	4632      	mov	r2, r6
 800b1c8:	4649      	mov	r1, r9
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	47d0      	blx	sl
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d09d      	beq.n	800b10e <_printf_i+0x162>
 800b1d2:	3501      	adds	r5, #1
 800b1d4:	68e3      	ldr	r3, [r4, #12]
 800b1d6:	9903      	ldr	r1, [sp, #12]
 800b1d8:	1a5b      	subs	r3, r3, r1
 800b1da:	42ab      	cmp	r3, r5
 800b1dc:	dcf2      	bgt.n	800b1c4 <_printf_i+0x218>
 800b1de:	e7eb      	b.n	800b1b8 <_printf_i+0x20c>
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	f104 0619 	add.w	r6, r4, #25
 800b1e6:	e7f5      	b.n	800b1d4 <_printf_i+0x228>
 800b1e8:	0800b93c 	.word	0x0800b93c
 800b1ec:	0800b94d 	.word	0x0800b94d

0800b1f0 <__sflush_r>:
 800b1f0:	898a      	ldrh	r2, [r1, #12]
 800b1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	0710      	lsls	r0, r2, #28
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	d457      	bmi.n	800b2ac <__sflush_r+0xbc>
 800b1fc:	684b      	ldr	r3, [r1, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	dc04      	bgt.n	800b20c <__sflush_r+0x1c>
 800b202:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b204:	2b00      	cmp	r3, #0
 800b206:	dc01      	bgt.n	800b20c <__sflush_r+0x1c>
 800b208:	2000      	movs	r0, #0
 800b20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b20e:	2e00      	cmp	r6, #0
 800b210:	d0fa      	beq.n	800b208 <__sflush_r+0x18>
 800b212:	2300      	movs	r3, #0
 800b214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b218:	682f      	ldr	r7, [r5, #0]
 800b21a:	6a21      	ldr	r1, [r4, #32]
 800b21c:	602b      	str	r3, [r5, #0]
 800b21e:	d032      	beq.n	800b286 <__sflush_r+0x96>
 800b220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	075a      	lsls	r2, r3, #29
 800b226:	d505      	bpl.n	800b234 <__sflush_r+0x44>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	1ac0      	subs	r0, r0, r3
 800b22c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b22e:	b10b      	cbz	r3, 800b234 <__sflush_r+0x44>
 800b230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b232:	1ac0      	subs	r0, r0, r3
 800b234:	2300      	movs	r3, #0
 800b236:	4602      	mov	r2, r0
 800b238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b23a:	4628      	mov	r0, r5
 800b23c:	6a21      	ldr	r1, [r4, #32]
 800b23e:	47b0      	blx	r6
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	89a3      	ldrh	r3, [r4, #12]
 800b244:	d106      	bne.n	800b254 <__sflush_r+0x64>
 800b246:	6829      	ldr	r1, [r5, #0]
 800b248:	291d      	cmp	r1, #29
 800b24a:	d82b      	bhi.n	800b2a4 <__sflush_r+0xb4>
 800b24c:	4a28      	ldr	r2, [pc, #160]	; (800b2f0 <__sflush_r+0x100>)
 800b24e:	410a      	asrs	r2, r1
 800b250:	07d6      	lsls	r6, r2, #31
 800b252:	d427      	bmi.n	800b2a4 <__sflush_r+0xb4>
 800b254:	2200      	movs	r2, #0
 800b256:	6062      	str	r2, [r4, #4]
 800b258:	6922      	ldr	r2, [r4, #16]
 800b25a:	04d9      	lsls	r1, r3, #19
 800b25c:	6022      	str	r2, [r4, #0]
 800b25e:	d504      	bpl.n	800b26a <__sflush_r+0x7a>
 800b260:	1c42      	adds	r2, r0, #1
 800b262:	d101      	bne.n	800b268 <__sflush_r+0x78>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	b903      	cbnz	r3, 800b26a <__sflush_r+0x7a>
 800b268:	6560      	str	r0, [r4, #84]	; 0x54
 800b26a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b26c:	602f      	str	r7, [r5, #0]
 800b26e:	2900      	cmp	r1, #0
 800b270:	d0ca      	beq.n	800b208 <__sflush_r+0x18>
 800b272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b276:	4299      	cmp	r1, r3
 800b278:	d002      	beq.n	800b280 <__sflush_r+0x90>
 800b27a:	4628      	mov	r0, r5
 800b27c:	f7ff fb42 	bl	800a904 <_free_r>
 800b280:	2000      	movs	r0, #0
 800b282:	6360      	str	r0, [r4, #52]	; 0x34
 800b284:	e7c1      	b.n	800b20a <__sflush_r+0x1a>
 800b286:	2301      	movs	r3, #1
 800b288:	4628      	mov	r0, r5
 800b28a:	47b0      	blx	r6
 800b28c:	1c41      	adds	r1, r0, #1
 800b28e:	d1c8      	bne.n	800b222 <__sflush_r+0x32>
 800b290:	682b      	ldr	r3, [r5, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0c5      	beq.n	800b222 <__sflush_r+0x32>
 800b296:	2b1d      	cmp	r3, #29
 800b298:	d001      	beq.n	800b29e <__sflush_r+0xae>
 800b29a:	2b16      	cmp	r3, #22
 800b29c:	d101      	bne.n	800b2a2 <__sflush_r+0xb2>
 800b29e:	602f      	str	r7, [r5, #0]
 800b2a0:	e7b2      	b.n	800b208 <__sflush_r+0x18>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a8:	81a3      	strh	r3, [r4, #12]
 800b2aa:	e7ae      	b.n	800b20a <__sflush_r+0x1a>
 800b2ac:	690f      	ldr	r7, [r1, #16]
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	d0aa      	beq.n	800b208 <__sflush_r+0x18>
 800b2b2:	0793      	lsls	r3, r2, #30
 800b2b4:	bf18      	it	ne
 800b2b6:	2300      	movne	r3, #0
 800b2b8:	680e      	ldr	r6, [r1, #0]
 800b2ba:	bf08      	it	eq
 800b2bc:	694b      	ldreq	r3, [r1, #20]
 800b2be:	1bf6      	subs	r6, r6, r7
 800b2c0:	600f      	str	r7, [r1, #0]
 800b2c2:	608b      	str	r3, [r1, #8]
 800b2c4:	2e00      	cmp	r6, #0
 800b2c6:	dd9f      	ble.n	800b208 <__sflush_r+0x18>
 800b2c8:	4633      	mov	r3, r6
 800b2ca:	463a      	mov	r2, r7
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	6a21      	ldr	r1, [r4, #32]
 800b2d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b2d4:	47e0      	blx	ip
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	dc06      	bgt.n	800b2e8 <__sflush_r+0xf8>
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	e790      	b.n	800b20a <__sflush_r+0x1a>
 800b2e8:	4407      	add	r7, r0
 800b2ea:	1a36      	subs	r6, r6, r0
 800b2ec:	e7ea      	b.n	800b2c4 <__sflush_r+0xd4>
 800b2ee:	bf00      	nop
 800b2f0:	dfbffffe 	.word	0xdfbffffe

0800b2f4 <_fflush_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	690b      	ldr	r3, [r1, #16]
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	b913      	cbnz	r3, 800b304 <_fflush_r+0x10>
 800b2fe:	2500      	movs	r5, #0
 800b300:	4628      	mov	r0, r5
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	b118      	cbz	r0, 800b30e <_fflush_r+0x1a>
 800b306:	6a03      	ldr	r3, [r0, #32]
 800b308:	b90b      	cbnz	r3, 800b30e <_fflush_r+0x1a>
 800b30a:	f7ff f83d 	bl	800a388 <__sinit>
 800b30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0f3      	beq.n	800b2fe <_fflush_r+0xa>
 800b316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b318:	07d0      	lsls	r0, r2, #31
 800b31a:	d404      	bmi.n	800b326 <_fflush_r+0x32>
 800b31c:	0599      	lsls	r1, r3, #22
 800b31e:	d402      	bmi.n	800b326 <_fflush_r+0x32>
 800b320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b322:	f7ff fad6 	bl	800a8d2 <__retarget_lock_acquire_recursive>
 800b326:	4628      	mov	r0, r5
 800b328:	4621      	mov	r1, r4
 800b32a:	f7ff ff61 	bl	800b1f0 <__sflush_r>
 800b32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b330:	4605      	mov	r5, r0
 800b332:	07da      	lsls	r2, r3, #31
 800b334:	d4e4      	bmi.n	800b300 <_fflush_r+0xc>
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	059b      	lsls	r3, r3, #22
 800b33a:	d4e1      	bmi.n	800b300 <_fflush_r+0xc>
 800b33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b33e:	f7ff fac9 	bl	800a8d4 <__retarget_lock_release_recursive>
 800b342:	e7dd      	b.n	800b300 <_fflush_r+0xc>

0800b344 <__swhatbuf_r>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	460c      	mov	r4, r1
 800b348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34c:	4615      	mov	r5, r2
 800b34e:	2900      	cmp	r1, #0
 800b350:	461e      	mov	r6, r3
 800b352:	b096      	sub	sp, #88	; 0x58
 800b354:	da0c      	bge.n	800b370 <__swhatbuf_r+0x2c>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	2100      	movs	r1, #0
 800b35a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b35e:	bf0c      	ite	eq
 800b360:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b364:	2340      	movne	r3, #64	; 0x40
 800b366:	2000      	movs	r0, #0
 800b368:	6031      	str	r1, [r6, #0]
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	b016      	add	sp, #88	; 0x58
 800b36e:	bd70      	pop	{r4, r5, r6, pc}
 800b370:	466a      	mov	r2, sp
 800b372:	f000 f863 	bl	800b43c <_fstat_r>
 800b376:	2800      	cmp	r0, #0
 800b378:	dbed      	blt.n	800b356 <__swhatbuf_r+0x12>
 800b37a:	9901      	ldr	r1, [sp, #4]
 800b37c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b380:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b384:	4259      	negs	r1, r3
 800b386:	4159      	adcs	r1, r3
 800b388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38c:	e7eb      	b.n	800b366 <__swhatbuf_r+0x22>

0800b38e <__smakebuf_r>:
 800b38e:	898b      	ldrh	r3, [r1, #12]
 800b390:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b392:	079d      	lsls	r5, r3, #30
 800b394:	4606      	mov	r6, r0
 800b396:	460c      	mov	r4, r1
 800b398:	d507      	bpl.n	800b3aa <__smakebuf_r+0x1c>
 800b39a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	6123      	str	r3, [r4, #16]
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	6163      	str	r3, [r4, #20]
 800b3a6:	b002      	add	sp, #8
 800b3a8:	bd70      	pop	{r4, r5, r6, pc}
 800b3aa:	466a      	mov	r2, sp
 800b3ac:	ab01      	add	r3, sp, #4
 800b3ae:	f7ff ffc9 	bl	800b344 <__swhatbuf_r>
 800b3b2:	9900      	ldr	r1, [sp, #0]
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	f7fe fece 	bl	800a158 <_malloc_r>
 800b3bc:	b948      	cbnz	r0, 800b3d2 <__smakebuf_r+0x44>
 800b3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c2:	059a      	lsls	r2, r3, #22
 800b3c4:	d4ef      	bmi.n	800b3a6 <__smakebuf_r+0x18>
 800b3c6:	f023 0303 	bic.w	r3, r3, #3
 800b3ca:	f043 0302 	orr.w	r3, r3, #2
 800b3ce:	81a3      	strh	r3, [r4, #12]
 800b3d0:	e7e3      	b.n	800b39a <__smakebuf_r+0xc>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	6020      	str	r0, [r4, #0]
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	6120      	str	r0, [r4, #16]
 800b3e0:	6163      	str	r3, [r4, #20]
 800b3e2:	9b01      	ldr	r3, [sp, #4]
 800b3e4:	b15b      	cbz	r3, 800b3fe <__smakebuf_r+0x70>
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3ec:	f000 f838 	bl	800b460 <_isatty_r>
 800b3f0:	b128      	cbz	r0, 800b3fe <__smakebuf_r+0x70>
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f023 0303 	bic.w	r3, r3, #3
 800b3f8:	f043 0301 	orr.w	r3, r3, #1
 800b3fc:	81a3      	strh	r3, [r4, #12]
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	431d      	orrs	r5, r3
 800b402:	81a5      	strh	r5, [r4, #12]
 800b404:	e7cf      	b.n	800b3a6 <__smakebuf_r+0x18>

0800b406 <memmove>:
 800b406:	4288      	cmp	r0, r1
 800b408:	b510      	push	{r4, lr}
 800b40a:	eb01 0402 	add.w	r4, r1, r2
 800b40e:	d902      	bls.n	800b416 <memmove+0x10>
 800b410:	4284      	cmp	r4, r0
 800b412:	4623      	mov	r3, r4
 800b414:	d807      	bhi.n	800b426 <memmove+0x20>
 800b416:	1e43      	subs	r3, r0, #1
 800b418:	42a1      	cmp	r1, r4
 800b41a:	d008      	beq.n	800b42e <memmove+0x28>
 800b41c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b420:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b424:	e7f8      	b.n	800b418 <memmove+0x12>
 800b426:	4601      	mov	r1, r0
 800b428:	4402      	add	r2, r0
 800b42a:	428a      	cmp	r2, r1
 800b42c:	d100      	bne.n	800b430 <memmove+0x2a>
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b434:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b438:	e7f7      	b.n	800b42a <memmove+0x24>
	...

0800b43c <_fstat_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	2300      	movs	r3, #0
 800b440:	4d06      	ldr	r5, [pc, #24]	; (800b45c <_fstat_r+0x20>)
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	f7f8 faa8 	bl	800399e <_fstat>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d102      	bne.n	800b458 <_fstat_r+0x1c>
 800b452:	682b      	ldr	r3, [r5, #0]
 800b454:	b103      	cbz	r3, 800b458 <_fstat_r+0x1c>
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	bd38      	pop	{r3, r4, r5, pc}
 800b45a:	bf00      	nop
 800b45c:	20002c54 	.word	0x20002c54

0800b460 <_isatty_r>:
 800b460:	b538      	push	{r3, r4, r5, lr}
 800b462:	2300      	movs	r3, #0
 800b464:	4d05      	ldr	r5, [pc, #20]	; (800b47c <_isatty_r+0x1c>)
 800b466:	4604      	mov	r4, r0
 800b468:	4608      	mov	r0, r1
 800b46a:	602b      	str	r3, [r5, #0]
 800b46c:	f7f8 fa9c 	bl	80039a8 <_isatty>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d102      	bne.n	800b47a <_isatty_r+0x1a>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	b103      	cbz	r3, 800b47a <_isatty_r+0x1a>
 800b478:	6023      	str	r3, [r4, #0]
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	20002c54 	.word	0x20002c54

0800b480 <memchr>:
 800b480:	4603      	mov	r3, r0
 800b482:	b510      	push	{r4, lr}
 800b484:	b2c9      	uxtb	r1, r1
 800b486:	4402      	add	r2, r0
 800b488:	4293      	cmp	r3, r2
 800b48a:	4618      	mov	r0, r3
 800b48c:	d101      	bne.n	800b492 <memchr+0x12>
 800b48e:	2000      	movs	r0, #0
 800b490:	e003      	b.n	800b49a <memchr+0x1a>
 800b492:	7804      	ldrb	r4, [r0, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	428c      	cmp	r4, r1
 800b498:	d1f6      	bne.n	800b488 <memchr+0x8>
 800b49a:	bd10      	pop	{r4, pc}

0800b49c <_realloc_r>:
 800b49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	4614      	mov	r4, r2
 800b4a4:	460e      	mov	r6, r1
 800b4a6:	b921      	cbnz	r1, 800b4b2 <_realloc_r+0x16>
 800b4a8:	4611      	mov	r1, r2
 800b4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	f7fe be53 	b.w	800a158 <_malloc_r>
 800b4b2:	b92a      	cbnz	r2, 800b4c0 <_realloc_r+0x24>
 800b4b4:	f7ff fa26 	bl	800a904 <_free_r>
 800b4b8:	4625      	mov	r5, r4
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c0:	f000 f81b 	bl	800b4fa <_malloc_usable_size_r>
 800b4c4:	4284      	cmp	r4, r0
 800b4c6:	4607      	mov	r7, r0
 800b4c8:	d802      	bhi.n	800b4d0 <_realloc_r+0x34>
 800b4ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4ce:	d812      	bhi.n	800b4f6 <_realloc_r+0x5a>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	f7fe fe40 	bl	800a158 <_malloc_r>
 800b4d8:	4605      	mov	r5, r0
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d0ed      	beq.n	800b4ba <_realloc_r+0x1e>
 800b4de:	42bc      	cmp	r4, r7
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	bf28      	it	cs
 800b4e6:	463a      	movcs	r2, r7
 800b4e8:	f7ff f9fd 	bl	800a8e6 <memcpy>
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	f7ff fa08 	bl	800a904 <_free_r>
 800b4f4:	e7e1      	b.n	800b4ba <_realloc_r+0x1e>
 800b4f6:	4635      	mov	r5, r6
 800b4f8:	e7df      	b.n	800b4ba <_realloc_r+0x1e>

0800b4fa <_malloc_usable_size_r>:
 800b4fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4fe:	1f18      	subs	r0, r3, #4
 800b500:	2b00      	cmp	r3, #0
 800b502:	bfbc      	itt	lt
 800b504:	580b      	ldrlt	r3, [r1, r0]
 800b506:	18c0      	addlt	r0, r0, r3
 800b508:	4770      	bx	lr
	...

0800b50c <_init>:
 800b50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b50e:	bf00      	nop
 800b510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b512:	bc08      	pop	{r3}
 800b514:	469e      	mov	lr, r3
 800b516:	4770      	bx	lr

0800b518 <_fini>:
 800b518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b51a:	bf00      	nop
 800b51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b51e:	bc08      	pop	{r3}
 800b520:	469e      	mov	lr, r3
 800b522:	4770      	bx	lr
