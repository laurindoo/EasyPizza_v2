
EasyPizza_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d14  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08006e24  08006e24  00016e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006efc  08006efc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006efc  08006efc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006efc  08006efc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f00  08006f00  00016f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001988  20000060  08006f64  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019e8  08006f64  000219e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001578d  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037fa  00000000  00000000  00035859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00039058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f79  00000000  00000000  0003a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af7f  00000000  00000000  0003b3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e2d  00000000  00000000  00056348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098d9d  00000000  00000000  0006f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005788  00000000  00000000  00107f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006e0c 	.word	0x08006e0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006e0c 	.word	0x08006e0c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_frsub>:
 8000a3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	e002      	b.n	8000a48 <__addsf3>
 8000a42:	bf00      	nop

08000a44 <__aeabi_fsub>:
 8000a44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a48 <__addsf3>:
 8000a48:	0042      	lsls	r2, r0, #1
 8000a4a:	bf1f      	itttt	ne
 8000a4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a50:	ea92 0f03 	teqne	r2, r3
 8000a54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a5c:	d06a      	beq.n	8000b34 <__addsf3+0xec>
 8000a5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a66:	bfc1      	itttt	gt
 8000a68:	18d2      	addgt	r2, r2, r3
 8000a6a:	4041      	eorgt	r1, r0
 8000a6c:	4048      	eorgt	r0, r1
 8000a6e:	4041      	eorgt	r1, r0
 8000a70:	bfb8      	it	lt
 8000a72:	425b      	neglt	r3, r3
 8000a74:	2b19      	cmp	r3, #25
 8000a76:	bf88      	it	hi
 8000a78:	4770      	bxhi	lr
 8000a7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4249      	negne	r1, r1
 8000a9a:	ea92 0f03 	teq	r2, r3
 8000a9e:	d03f      	beq.n	8000b20 <__addsf3+0xd8>
 8000aa0:	f1a2 0201 	sub.w	r2, r2, #1
 8000aa4:	fa41 fc03 	asr.w	ip, r1, r3
 8000aa8:	eb10 000c 	adds.w	r0, r0, ip
 8000aac:	f1c3 0320 	rsb	r3, r3, #32
 8000ab0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ab4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	d502      	bpl.n	8000ac0 <__addsf3+0x78>
 8000aba:	4249      	negs	r1, r1
 8000abc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ac0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ac4:	d313      	bcc.n	8000aee <__addsf3+0xa6>
 8000ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aca:	d306      	bcc.n	8000ada <__addsf3+0x92>
 8000acc:	0840      	lsrs	r0, r0, #1
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	f102 0201 	add.w	r2, r2, #1
 8000ad6:	2afe      	cmp	r2, #254	; 0xfe
 8000ad8:	d251      	bcs.n	8000b7e <__addsf3+0x136>
 8000ada:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ade:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ae2:	bf08      	it	eq
 8000ae4:	f020 0001 	biceq.w	r0, r0, #1
 8000ae8:	ea40 0003 	orr.w	r0, r0, r3
 8000aec:	4770      	bx	lr
 8000aee:	0049      	lsls	r1, r1, #1
 8000af0:	eb40 0000 	adc.w	r0, r0, r0
 8000af4:	3a01      	subs	r2, #1
 8000af6:	bf28      	it	cs
 8000af8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000afc:	d2ed      	bcs.n	8000ada <__addsf3+0x92>
 8000afe:	fab0 fc80 	clz	ip, r0
 8000b02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b06:	ebb2 020c 	subs.w	r2, r2, ip
 8000b0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b0e:	bfaa      	itet	ge
 8000b10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b14:	4252      	neglt	r2, r2
 8000b16:	4318      	orrge	r0, r3
 8000b18:	bfbc      	itt	lt
 8000b1a:	40d0      	lsrlt	r0, r2
 8000b1c:	4318      	orrlt	r0, r3
 8000b1e:	4770      	bx	lr
 8000b20:	f092 0f00 	teq	r2, #0
 8000b24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b28:	bf06      	itte	eq
 8000b2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b2e:	3201      	addeq	r2, #1
 8000b30:	3b01      	subne	r3, #1
 8000b32:	e7b5      	b.n	8000aa0 <__addsf3+0x58>
 8000b34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b42:	d021      	beq.n	8000b88 <__addsf3+0x140>
 8000b44:	ea92 0f03 	teq	r2, r3
 8000b48:	d004      	beq.n	8000b54 <__addsf3+0x10c>
 8000b4a:	f092 0f00 	teq	r2, #0
 8000b4e:	bf08      	it	eq
 8000b50:	4608      	moveq	r0, r1
 8000b52:	4770      	bx	lr
 8000b54:	ea90 0f01 	teq	r0, r1
 8000b58:	bf1c      	itt	ne
 8000b5a:	2000      	movne	r0, #0
 8000b5c:	4770      	bxne	lr
 8000b5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b62:	d104      	bne.n	8000b6e <__addsf3+0x126>
 8000b64:	0040      	lsls	r0, r0, #1
 8000b66:	bf28      	it	cs
 8000b68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b72:	bf3c      	itt	cc
 8000b74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bxcc	lr
 8000b7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	4770      	bx	lr
 8000b88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b8c:	bf16      	itet	ne
 8000b8e:	4608      	movne	r0, r1
 8000b90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b94:	4601      	movne	r1, r0
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	bf06      	itte	eq
 8000b9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b9e:	ea90 0f01 	teqeq	r0, r1
 8000ba2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_ui2f>:
 8000ba8:	f04f 0300 	mov.w	r3, #0
 8000bac:	e004      	b.n	8000bb8 <__aeabi_i2f+0x8>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_i2f>:
 8000bb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bb4:	bf48      	it	mi
 8000bb6:	4240      	negmi	r0, r0
 8000bb8:	ea5f 0c00 	movs.w	ip, r0
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bc4:	4601      	mov	r1, r0
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	e01c      	b.n	8000c06 <__aeabi_l2f+0x2a>

08000bcc <__aeabi_ul2f>:
 8000bcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000bd0:	bf08      	it	eq
 8000bd2:	4770      	bxeq	lr
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	e00a      	b.n	8000bf0 <__aeabi_l2f+0x14>
 8000bda:	bf00      	nop

08000bdc <__aeabi_l2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__aeabi_l2f+0x14>
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	ea5f 0c01 	movs.w	ip, r1
 8000bf4:	bf02      	ittt	eq
 8000bf6:	4684      	moveq	ip, r0
 8000bf8:	4601      	moveq	r1, r0
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c00:	bf08      	it	eq
 8000c02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c0a:	fabc f28c 	clz	r2, ip
 8000c0e:	3a08      	subs	r2, #8
 8000c10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c14:	db10      	blt.n	8000c38 <__aeabi_l2f+0x5c>
 8000c16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c20:	f1c2 0220 	rsb	r2, r2, #32
 8000c24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c28:	fa20 f202 	lsr.w	r2, r0, r2
 8000c2c:	eb43 0002 	adc.w	r0, r3, r2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f102 0220 	add.w	r2, r2, #32
 8000c3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c40:	f1c2 0220 	rsb	r2, r2, #32
 8000c44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c48:	fa21 f202 	lsr.w	r2, r1, r2
 8000c4c:	eb43 0002 	adc.w	r0, r3, r2
 8000c50:	bf08      	it	eq
 8000c52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_fmul>:
 8000c58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c60:	bf1e      	ittt	ne
 8000c62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c66:	ea92 0f0c 	teqne	r2, ip
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d06f      	beq.n	8000d50 <__aeabi_fmul+0xf8>
 8000c70:	441a      	add	r2, r3
 8000c72:	ea80 0c01 	eor.w	ip, r0, r1
 8000c76:	0240      	lsls	r0, r0, #9
 8000c78:	bf18      	it	ne
 8000c7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c7e:	d01e      	beq.n	8000cbe <__aeabi_fmul+0x66>
 8000c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c98:	bf3e      	ittt	cc
 8000c9a:	0049      	lslcc	r1, r1, #1
 8000c9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ca0:	005b      	lslcc	r3, r3, #1
 8000ca2:	ea40 0001 	orr.w	r0, r0, r1
 8000ca6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000caa:	2afd      	cmp	r2, #253	; 0xfd
 8000cac:	d81d      	bhi.n	8000cea <__aeabi_fmul+0x92>
 8000cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb6:	bf08      	it	eq
 8000cb8:	f020 0001 	biceq.w	r0, r0, #1
 8000cbc:	4770      	bx	lr
 8000cbe:	f090 0f00 	teq	r0, #0
 8000cc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cc6:	bf08      	it	eq
 8000cc8:	0249      	lsleq	r1, r1, #9
 8000cca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cd2:	3a7f      	subs	r2, #127	; 0x7f
 8000cd4:	bfc2      	ittt	gt
 8000cd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cde:	4770      	bxgt	lr
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	3a01      	subs	r2, #1
 8000cea:	dc5d      	bgt.n	8000da8 <__aeabi_fmul+0x150>
 8000cec:	f112 0f19 	cmn.w	r2, #25
 8000cf0:	bfdc      	itt	le
 8000cf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cf6:	4770      	bxle	lr
 8000cf8:	f1c2 0200 	rsb	r2, r2, #0
 8000cfc:	0041      	lsls	r1, r0, #1
 8000cfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000d02:	f1c2 0220 	rsb	r2, r2, #32
 8000d06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d0e:	f140 0000 	adc.w	r0, r0, #0
 8000d12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d16:	bf08      	it	eq
 8000d18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1c:	4770      	bx	lr
 8000d1e:	f092 0f00 	teq	r2, #0
 8000d22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d26:	bf02      	ittt	eq
 8000d28:	0040      	lsleq	r0, r0, #1
 8000d2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d2e:	3a01      	subeq	r2, #1
 8000d30:	d0f9      	beq.n	8000d26 <__aeabi_fmul+0xce>
 8000d32:	ea40 000c 	orr.w	r0, r0, ip
 8000d36:	f093 0f00 	teq	r3, #0
 8000d3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d3e:	bf02      	ittt	eq
 8000d40:	0049      	lsleq	r1, r1, #1
 8000d42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d46:	3b01      	subeq	r3, #1
 8000d48:	d0f9      	beq.n	8000d3e <__aeabi_fmul+0xe6>
 8000d4a:	ea41 010c 	orr.w	r1, r1, ip
 8000d4e:	e78f      	b.n	8000c70 <__aeabi_fmul+0x18>
 8000d50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d54:	ea92 0f0c 	teq	r2, ip
 8000d58:	bf18      	it	ne
 8000d5a:	ea93 0f0c 	teqne	r3, ip
 8000d5e:	d00a      	beq.n	8000d76 <__aeabi_fmul+0x11e>
 8000d60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d64:	bf18      	it	ne
 8000d66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d6a:	d1d8      	bne.n	8000d1e <__aeabi_fmul+0xc6>
 8000d6c:	ea80 0001 	eor.w	r0, r0, r1
 8000d70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d74:	4770      	bx	lr
 8000d76:	f090 0f00 	teq	r0, #0
 8000d7a:	bf17      	itett	ne
 8000d7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d80:	4608      	moveq	r0, r1
 8000d82:	f091 0f00 	teqne	r1, #0
 8000d86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d8a:	d014      	beq.n	8000db6 <__aeabi_fmul+0x15e>
 8000d8c:	ea92 0f0c 	teq	r2, ip
 8000d90:	d101      	bne.n	8000d96 <__aeabi_fmul+0x13e>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d10f      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000d96:	ea93 0f0c 	teq	r3, ip
 8000d9a:	d103      	bne.n	8000da4 <__aeabi_fmul+0x14c>
 8000d9c:	024b      	lsls	r3, r1, #9
 8000d9e:	bf18      	it	ne
 8000da0:	4608      	movne	r0, r1
 8000da2:	d108      	bne.n	8000db6 <__aeabi_fmul+0x15e>
 8000da4:	ea80 0001 	eor.w	r0, r0, r1
 8000da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db4:	4770      	bx	lr
 8000db6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dbe:	4770      	bx	lr

08000dc0 <__aeabi_fdiv>:
 8000dc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc8:	bf1e      	ittt	ne
 8000dca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dce:	ea92 0f0c 	teqne	r2, ip
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d069      	beq.n	8000eac <__aeabi_fdiv+0xec>
 8000dd8:	eba2 0203 	sub.w	r2, r2, r3
 8000ddc:	ea80 0c01 	eor.w	ip, r0, r1
 8000de0:	0249      	lsls	r1, r1, #9
 8000de2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000de6:	d037      	beq.n	8000e58 <__aeabi_fdiv+0x98>
 8000de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000df0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	bf38      	it	cc
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e06:	428b      	cmp	r3, r1
 8000e08:	bf24      	itt	cs
 8000e0a:	1a5b      	subcs	r3, r3, r1
 8000e0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e14:	bf24      	itt	cs
 8000e16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e22:	bf24      	itt	cs
 8000e24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e30:	bf24      	itt	cs
 8000e32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	bf18      	it	ne
 8000e3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e42:	d1e0      	bne.n	8000e06 <__aeabi_fdiv+0x46>
 8000e44:	2afd      	cmp	r2, #253	; 0xfd
 8000e46:	f63f af50 	bhi.w	8000cea <__aeabi_fmul+0x92>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e60:	327f      	adds	r2, #127	; 0x7f
 8000e62:	bfc2      	ittt	gt
 8000e64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6c:	4770      	bxgt	lr
 8000e6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e72:	f04f 0300 	mov.w	r3, #0
 8000e76:	3a01      	subs	r2, #1
 8000e78:	e737      	b.n	8000cea <__aeabi_fmul+0x92>
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fdiv+0xc2>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fdiv+0xda>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e795      	b.n	8000dd8 <__aeabi_fdiv+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d108      	bne.n	8000ec8 <__aeabi_fdiv+0x108>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	f47f af7d 	bne.w	8000db6 <__aeabi_fmul+0x15e>
 8000ebc:	ea93 0f0c 	teq	r3, ip
 8000ec0:	f47f af70 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e776      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ec8:	ea93 0f0c 	teq	r3, ip
 8000ecc:	d104      	bne.n	8000ed8 <__aeabi_fdiv+0x118>
 8000ece:	024b      	lsls	r3, r1, #9
 8000ed0:	f43f af4c 	beq.w	8000d6c <__aeabi_fmul+0x114>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e76e      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000edc:	bf18      	it	ne
 8000ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	d1ca      	bne.n	8000e7a <__aeabi_fdiv+0xba>
 8000ee4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ee8:	f47f af5c 	bne.w	8000da4 <__aeabi_fmul+0x14c>
 8000eec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ef0:	f47f af3c 	bne.w	8000d6c <__aeabi_fmul+0x114>
 8000ef4:	e75f      	b.n	8000db6 <__aeabi_fmul+0x15e>
 8000ef6:	bf00      	nop

08000ef8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationGetIdleTaskMemory+0x28>)
 8000f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f16:	bf00      	nop
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	2000007c 	.word	0x2000007c
 8000f24:	2000011c 	.word	0x2000011c

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b09c      	sub	sp, #112	; 0x70
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f001 faa9 	bl	8002484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f87d 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fa5b 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f3a:	f000 fa3b 	bl	80013b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f3e:	f000 f8cd 	bl	80010dc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f42:	f000 f919 	bl	8001178 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f46:	f000 f99d 	bl	8001284 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f4a:	f000 f943 	bl	80011d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA		(&hadc1	,(uint32_t*)&buffer_ADC, 2);// ADC_DMA
 8000f4e:	2202      	movs	r2, #2
 8000f50:	492c      	ldr	r1, [pc, #176]	; (8001004 <main+0xdc>)
 8000f52:	482d      	ldr	r0, [pc, #180]	; (8001008 <main+0xe0>)
 8000f54:	f001 fbc4 	bl	80026e0 <HAL_ADC_Start_DMA>

  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_3);
 8000f58:	2108      	movs	r1, #8
 8000f5a:	482c      	ldr	r0, [pc, #176]	; (800100c <main+0xe4>)
 8000f5c:	f003 fa40 	bl	80043e0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start		(&htim3,TIM_CHANNEL_4);
 8000f60:	210c      	movs	r1, #12
 8000f62:	482a      	ldr	r0, [pc, #168]	; (800100c <main+0xe4>)
 8000f64:	f003 fa3c 	bl	80043e0 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f68:	4b29      	ldr	r3, [pc, #164]	; (8001010 <main+0xe8>)
 8000f6a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f6e:	461d      	mov	r5, r3
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f004 f92b 	bl	80051de <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a22      	ldr	r2, [pc, #136]	; (8001014 <main+0xec>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTemperatura */
  osThreadDef(TaskTemperatura, StartTemperatura, osPriorityAboveNormal, 0, 128);
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <main+0xf0>)
 8000f90:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f94:	461d      	mov	r5, r3
 8000f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTemperaturaHandle = osThreadCreate(osThread(TaskTemperatura), NULL);
 8000fa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 f918 	bl	80051de <osThreadCreate>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	; (800101c <main+0xf4>)
 8000fb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskBuzzer */
  osThreadStaticDef(TaskBuzzer, StartBuzzer, osPriorityIdle, 0, 128, TaskBuzzerBuffer, &TaskBuzzerControlBlock);
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <main+0xf8>)
 8000fb6:	f107 041c 	add.w	r4, r7, #28
 8000fba:	461d      	mov	r5, r3
 8000fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBuzzerHandle = osThreadCreate(osThread(TaskBuzzer), NULL);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f004 f905 	bl	80051de <osThreadCreate>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <main+0xfc>)
 8000fd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskTimer */
  osThreadStaticDef(TaskTimer, StartTimer, osPriorityNormal, 0, 128, TaskTimerBuffer, &TaskTimerControlBlock);
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <main+0x100>)
 8000fdc:	463c      	mov	r4, r7
 8000fde:	461d      	mov	r5, r3
 8000fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskTimerHandle = osThreadCreate(osThread(TaskTimer), NULL);
 8000fec:	463b      	mov	r3, r7
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f004 f8f4 	bl	80051de <osThreadCreate>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <main+0x104>)
 8000ffa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ffc:	f004 f8e8 	bl	80051d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001000:	e7fe      	b.n	8001000 <main+0xd8>
 8001002:	bf00      	nop
 8001004:	200009c4 	.word	0x200009c4
 8001008:	2000031c 	.word	0x2000031c
 800100c:	2000042c 	.word	0x2000042c
 8001010:	08006e30 	.word	0x08006e30
 8001014:	20000474 	.word	0x20000474
 8001018:	08006e5c 	.word	0x08006e5c
 800101c:	20000478 	.word	0x20000478
 8001020:	08006e84 	.word	0x08006e84
 8001024:	2000047c 	.word	0x2000047c
 8001028:	08006eac 	.word	0x08006eac
 800102c:	20000720 	.word	0x20000720

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	; 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103a:	2228      	movs	r2, #40	; 0x28
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f005 fe0c 	bl	8006c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001070:	2300      	movs	r3, #0
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001074:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fbc6 	bl	8003810 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800108a:	f000 faa3 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108e:	230f      	movs	r3, #15
 8001090:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 fe33 	bl	8003d14 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80010b4:	f000 fa8e 	bl	80015d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010b8:	2302      	movs	r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80010bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 ffe3 	bl	8004090 <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010d0:	f000 fa80 	bl	80015d4 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3750      	adds	r7, #80	; 0x50
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ec:	4b20      	ldr	r3, [pc, #128]	; (8001170 <MX_ADC1_Init+0x94>)
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <MX_ADC1_Init+0x98>)
 80010f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_ADC1_Init+0x94>)
 80010f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <MX_ADC1_Init+0x94>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <MX_ADC1_Init+0x94>)
 8001102:	2200      	movs	r2, #0
 8001104:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_ADC1_Init+0x94>)
 8001108:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800110c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <MX_ADC1_Init+0x94>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_ADC1_Init+0x94>)
 8001116:	2202      	movs	r2, #2
 8001118:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800111a:	4815      	ldr	r0, [pc, #84]	; (8001170 <MX_ADC1_Init+0x94>)
 800111c:	f001 fa08 	bl	8002530 <HAL_ADC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001126:	f000 fa55 	bl	80015d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800112e:	2301      	movs	r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001132:	2307      	movs	r3, #7
 8001134:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_ADC1_Init+0x94>)
 800113c:	f001 fbc0 	bl	80028c0 <HAL_ADC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001146:	f000 fa45 	bl	80015d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800114e:	2302      	movs	r3, #2
 8001150:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_ADC1_Init+0x94>)
 8001158:	f001 fbb2 	bl	80028c0 <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001162:	f000 fa37 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000031c 	.word	0x2000031c
 8001174:	40012400 	.word	0x40012400

08001178 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x50>)
 800117e:	4a13      	ldr	r2, [pc, #76]	; (80011cc <MX_I2C1_Init+0x54>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_I2C1_Init+0x58>)
 8001186:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_I2C1_Init+0x50>)
 8001196:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800119a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x50>)
 80011b6:	f002 f9e7 	bl	8003588 <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 fa08 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000390 	.word	0x20000390
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_TIM2_Init+0xac>)
 80011f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1800-1;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_TIM2_Init+0xac>)
 8001200:	f240 7207 	movw	r2, #1799	; 0x707
 8001204:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <MX_TIM2_Init+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_TIM2_Init+0xac>)
 800120e:	2263      	movs	r2, #99	; 0x63
 8001210:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <MX_TIM2_Init+0xac>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_TIM2_Init+0xac>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800121e:	4818      	ldr	r0, [pc, #96]	; (8001280 <MX_TIM2_Init+0xac>)
 8001220:	f003 f88e 	bl	8004340 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800122a:	f000 f9d3 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001236:	f107 0320 	add.w	r3, r7, #32
 800123a:	4619      	mov	r1, r3
 800123c:	4810      	ldr	r0, [pc, #64]	; (8001280 <MX_TIM2_Init+0xac>)
 800123e:	f003 ff2f 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001248:	f000 f9c4 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124c:	2360      	movs	r3, #96	; 0x60
 800124e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001250:	2332      	movs	r3, #50	; 0x32
 8001252:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	220c      	movs	r2, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4807      	ldr	r0, [pc, #28]	; (8001280 <MX_TIM2_Init+0xac>)
 8001264:	f003 faca 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800126e:	f000 f9b1 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <MX_TIM2_Init+0xac>)
 8001274:	f000 fdfe 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200003e4 	.word	0x200003e4

08001284 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
 80012b0:	615a      	str	r2, [r3, #20]
 80012b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012b4:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <MX_TIM3_Init+0x128>)
 80012b6:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <MX_TIM3_Init+0x12c>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3600-1;
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <MX_TIM3_Init+0x128>)
 80012bc:	f640 620f 	movw	r2, #3599	; 0xe0f
 80012c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <MX_TIM3_Init+0x128>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80012c8:	4b38      	ldr	r3, [pc, #224]	; (80013ac <MX_TIM3_Init+0x128>)
 80012ca:	2263      	movs	r2, #99	; 0x63
 80012cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <MX_TIM3_Init+0x128>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b35      	ldr	r3, [pc, #212]	; (80013ac <MX_TIM3_Init+0x128>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012da:	4834      	ldr	r0, [pc, #208]	; (80013ac <MX_TIM3_Init+0x128>)
 80012dc:	f002 ff8e 	bl	80041fc <HAL_TIM_Base_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012e6:	f000 f975 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f4:	4619      	mov	r1, r3
 80012f6:	482d      	ldr	r0, [pc, #180]	; (80013ac <MX_TIM3_Init+0x128>)
 80012f8:	f003 fb42 	bl	8004980 <HAL_TIM_ConfigClockSource>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001302:	f000 f967 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001306:	4829      	ldr	r0, [pc, #164]	; (80013ac <MX_TIM3_Init+0x128>)
 8001308:	f003 f81a 	bl	8004340 <HAL_TIM_PWM_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001312:	f000 f95f 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4619      	mov	r1, r3
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <MX_TIM3_Init+0x128>)
 8001326:	f003 febb 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001330:	f000 f950 	bl	80015d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001340:	2304      	movs	r3, #4
 8001342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <MX_TIM3_Init+0x128>)
 800134c:	f003 fa56 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001356:	f000 f93d 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2204      	movs	r2, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <MX_TIM3_Init+0x128>)
 8001362:	f003 fa4b 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800136c:	f000 f932 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_TIM3_Init+0x128>)
 8001378:	f003 fa40 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001382:	f000 f927 	bl	80015d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	220c      	movs	r2, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <MX_TIM3_Init+0x128>)
 800138e:	f003 fa35 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001398:	f000 f91c 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800139c:	4803      	ldr	r0, [pc, #12]	; (80013ac <MX_TIM3_Init+0x128>)
 800139e:	f000 fd69 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000042c 	.word	0x2000042c
 80013b0:	40000400 	.word	0x40000400

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_DMA_Init+0x38>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <MX_DMA_Init+0x38>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_DMA_Init+0x38>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	200b      	movs	r0, #11
 80013d8:	f001 fd21 	bl	8002e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013dc:	200b      	movs	r0, #11
 80013de:	f001 fd3a 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <MX_GPIO_Init+0x9c>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a20      	ldr	r2, [pc, #128]	; (800148c <MX_GPIO_Init+0x9c>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_GPIO_Init+0x9c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_GPIO_Init+0x9c>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a1a      	ldr	r2, [pc, #104]	; (800148c <MX_GPIO_Init+0x9c>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_GPIO_Init+0x9c>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELE_1_GPIO_Port, RELE_1_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_GPIO_Init+0xa0>)
 800143c:	f002 f88c 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2178      	movs	r1, #120	; 0x78
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_GPIO_Init+0xa4>)
 8001446:	f002 f887 	bl	8003558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RELE_1_Pin */
  GPIO_InitStruct.Pin = RELE_1_Pin;
 800144a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RELE_1_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4619      	mov	r1, r3
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <MX_GPIO_Init+0xa0>)
 8001464:	f001 fef4 	bl	8003250 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELE_2_Pin RELE_3_Pin RELE_4_Pin RELE_5_Pin */
  GPIO_InitStruct.Pin = RELE_2_Pin|RELE_3_Pin|RELE_4_Pin|RELE_5_Pin;
 8001468:	2378      	movs	r3, #120	; 0x78
 800146a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2302      	movs	r3, #2
 8001476:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4619      	mov	r1, r3
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_GPIO_Init+0xa4>)
 8001480:	f001 fee6 	bl	8003250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00

08001498 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	float 	Temp1,Temp2;
	double TempTeto, TempLastro;
	static long somatorio1,somatorio2;
	static uint16_t i = 0;

	if(i<TAM){
 80014a0:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_ADC_ConvCpltCallback+0xec>)
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a8:	d216      	bcs.n	80014d8 <HAL_ADC_ConvCpltCallback+0x40>
		somatorio1+=buffer_ADC[1]; // somatorio
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a37      	ldr	r2, [pc, #220]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014b8:	601a      	str	r2, [r3, #0]
		somatorio2+=buffer_ADC[0]; // somatorio
 80014ba:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a34      	ldr	r2, [pc, #208]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014c8:	601a      	str	r2, [r3, #0]
		i++;
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <HAL_ADC_ConvCpltCallback+0xec>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_ADC_ConvCpltCallback+0xec>)
 80014d4:	801a      	strh	r2, [r3, #0]
//	// Handles the IRQ of ADC1. EOC flag is cleared by reading data register
//	static uint32_t temp = 0;
//	temp = ADC1->DR;
//	TempInterna = (temp-V25)/(AVG_SLOPE)+25;

}
 80014d6:	e050      	b.n	800157a <HAL_ADC_ConvCpltCallback+0xe2>
		somatorio1 = somatorio1 / TAM; //calc media
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2d      	ldr	r2, [pc, #180]	; (8001594 <HAL_ADC_ConvCpltCallback+0xfc>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1152      	asrs	r2, r2, #5
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a28      	ldr	r2, [pc, #160]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 80014ea:	6013      	str	r3, [r2, #0]
		somatorio2 = somatorio2 / TAM; //calc media
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <HAL_ADC_ConvCpltCallback+0xfc>)
 80014f2:	fb82 1203 	smull	r1, r2, r2, r3
 80014f6:	1152      	asrs	r2, r2, #5
 80014f8:	17db      	asrs	r3, r3, #31
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014fe:	6013      	str	r3, [r2, #0]
		Temp1 = somatorio1*16; //calc valor final
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb52 	bl	8000bb0 <__aeabi_i2f>
 800150c:	4603      	mov	r3, r0
 800150e:	61fb      	str	r3, [r7, #28]
		Temp1 = Temp1/100;
 8001510:	4921      	ldr	r1, [pc, #132]	; (8001598 <HAL_ADC_ConvCpltCallback+0x100>)
 8001512:	69f8      	ldr	r0, [r7, #28]
 8001514:	f7ff fc54 	bl	8000dc0 <__aeabi_fdiv>
 8001518:	4603      	mov	r3, r0
 800151a:	61fb      	str	r3, [r7, #28]
		somatorio1 = 0; 		//zera somatorio
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_ADC_ConvCpltCallback+0xf4>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
		Temp2 = somatorio2*16; 	//calc valor final
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fb41 	bl	8000bb0 <__aeabi_i2f>
 800152e:	4603      	mov	r3, r0
 8001530:	61bb      	str	r3, [r7, #24]
		Temp2 = Temp2/100;
 8001532:	4919      	ldr	r1, [pc, #100]	; (8001598 <HAL_ADC_ConvCpltCallback+0x100>)
 8001534:	69b8      	ldr	r0, [r7, #24]
 8001536:	f7ff fc43 	bl	8000dc0 <__aeabi_fdiv>
 800153a:	4603      	mov	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]
		somatorio2 = 0; 		//zera somatorio
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
		TempLastro=(double)Temp1;
 8001544:	69f8      	ldr	r0, [r7, #28]
 8001546:	f7fe ff67 	bl	8000418 <__aeabi_f2d>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TempTeto=(double)Temp2;
 8001552:	69b8      	ldr	r0, [r7, #24]
 8001554:	f7fe ff60 	bl	8000418 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PrimitiveStates.RealtimeTeto = TempTeto;
 8001560:	490e      	ldr	r1, [pc, #56]	; (800159c <HAL_ADC_ConvCpltCallback+0x104>)
 8001562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001566:	e9c1 2302 	strd	r2, r3, [r1, #8]
		PrimitiveStates.RealtimeLastro = TempLastro;
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <HAL_ADC_ConvCpltCallback+0x104>)
 800156c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001570:	e9c1 2304 	strd	r2, r3, [r1, #16]
		i=0;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_ADC_ConvCpltCallback+0xec>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000a00 	.word	0x20000a00
 8001588:	200009c4 	.word	0x200009c4
 800158c:	20000a04 	.word	0x20000a04
 8001590:	20000a08 	.word	0x20000a08
 8001594:	10624dd3 	.word	0x10624dd3
 8001598:	42c80000 	.word	0x42c80000
 800159c:	200009d0 	.word	0x200009d0

080015a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f003 fe64 	bl	8005276 <osDelay>
 80015ae:	e7fb      	b.n	80015a8 <StartDefaultTask+0x8>

080015b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c2:	f000 ff75 	bl	80024b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40012c00 	.word	0x40012c00

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>

080015de <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	6879      	ldr	r1, [r7, #4]
 80015fe:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800160e:	f7ff f9eb 	bl	80009e8 <__aeabi_dcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001624:	e011      	b.n	800164a <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001632:	f7ff f9bb 	bl	80009ac <__aeabi_dcmplt>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d100      	bne.n	800163e <PID_Init+0x60>
}
 800163c:	e005      	b.n	800164a <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	0000      	movs	r0, r0
 8001654:	0000      	movs	r0, r0
	...

08001658 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af06      	add	r7, sp, #24
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 800167e:	a318      	add	r3, pc, #96	; (adr r3, 80016e0 <PID+0x88>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	e9cd 2300 	strd	r2, r3, [sp]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f000 f931 	bl	80018f8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2264      	movs	r2, #100	; 0x64
 800169a:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 800169c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016a0:	4619      	mov	r1, r3
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fa38 	bl	8001b18 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80016a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016ac:	9304      	str	r3, [sp, #16]
 80016ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ba:	e9cd 2300 	strd	r2, r3, [sp]
 80016be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f984 	bl	80019d0 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80016c8:	f000 ff04 	bl	80024d4 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	605a      	str	r2, [r3, #4]
	
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	00000000 	.word	0x00000000
 80016e4:	406fe000 	.word	0x406fe000

080016e8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <PID_Compute+0x14>
	{
		return _FALSE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e0db      	b.n	80018b4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80016fc:	f000 feea 	bl	80024d4 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	429a      	cmp	r2, r3
 8001714:	f0c0 80cd 	bcc.w	80018b2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001728:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001730:	f7fe fd12 	bl	8000158 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001746:	f7fe fd07 	bl	8000158 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800175e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001762:	f7fe feb1 	bl	80004c8 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4620      	mov	r0, r4
 800176c:	4629      	mov	r1, r5
 800176e:	f7fe fcf5 	bl	800015c <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d114      	bne.n	80017ae <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001790:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001794:	f7fe fe98 	bl	80004c8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe fcda 	bl	8000158 <__aeabi_dsub>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80017ba:	f7ff f915 	bl	80009e8 <__aeabi_dcmpgt>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80017d0:	e010      	b.n	80017f4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017de:	f7ff f8e5 	bl	80009ac <__aeabi_dcmplt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00b      	beq.n	8001814 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001802:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001806:	f7fe fe5f 	bl	80004c8 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001812:	e005      	b.n	8001820 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	f04f 0300 	mov.w	r3, #0
 800181c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800182c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001830:	f7fe fe4a 	bl	80004c8 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fc8c 	bl	8000158 <__aeabi_dsub>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001848:	f7fe fc88 	bl	800015c <__adddf3>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800185a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800185e:	f7ff f8c3 	bl	80009e8 <__aeabi_dcmpgt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800186e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001872:	e00e      	b.n	8001892 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800187a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800187e:	f7ff f895 	bl	80009ac <__aeabi_dcmplt>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800188e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 80018b2:	2300      	movs	r3, #0
	}
	
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3730      	adds	r7, #48	; 0x30
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}

080018bc <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <PID_SetMode+0x2e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	785b      	ldrb	r3, [r3, #1]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff fe7a 	bl	80015de <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7bfa      	ldrb	r2, [r7, #15]
 80018ee:	705a      	strb	r2, [r3, #1]
	
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001904:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190c:	f7ff f862 	bl	80009d4 <__aeabi_dcmpge>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d158      	bne.n	80019c8 <PID_SetOutputLimits+0xd0>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800191c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8001920:	68f9      	ldr	r1, [r7, #12]
 8001922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001926:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d04b      	beq.n	80019ca <PID_SetOutputLimits+0xd2>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001940:	f7ff f852 	bl	80009e8 <__aeabi_dcmpgt>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <PID_SetOutputLimits+0x62>
		{
			*uPID->MyOutput = uPID->OutMax;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001954:	e9c1 2300 	strd	r2, r3, [r1]
 8001958:	e012      	b.n	8001980 <PID_SetOutputLimits+0x88>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001968:	f7ff f820 	bl	80009ac <__aeabi_dcmplt>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <PID_SetOutputLimits+0x88>
		{
			*uPID->MyOutput = uPID->OutMin;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800197c:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800198c:	f7ff f82c 	bl	80009e8 <__aeabi_dcmpgt>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d006      	beq.n	80019a4 <PID_SetOutputLimits+0xac>
		{
			uPID->OutputSum = uPID->OutMax;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80019a2:	e012      	b.n	80019ca <PID_SetOutputLimits+0xd2>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80019b0:	f7fe fffc 	bl	80009ac <__aeabi_dcmplt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <PID_SetOutputLimits+0xd2>
		{
			uPID->OutputSum = uPID->OutMin;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80019c6:	e000      	b.n	80019ca <PID_SetOutputLimits+0xd2>
		return;
 80019c8:	bf00      	nop
		}
		else { }
		
	}
	
}
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e8:	f7fe ffe0 	bl	80009ac <__aeabi_dcmplt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f040 808b 	bne.w	8001b0a <PID_SetTunings2+0x13a>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a00:	f7fe ffd4 	bl	80009ac <__aeabi_dcmplt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d17f      	bne.n	8001b0a <PID_SetTunings2+0x13a>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a16:	f7fe ffc9 	bl	80009ac <__aeabi_dcmplt>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d174      	bne.n	8001b0a <PID_SetTunings2+0x13a>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001a26:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8001a28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	bf0c      	ite	eq
 8001a30:	2301      	moveq	r3, #1
 8001a32:	2300      	movne	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a42:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a56:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fcb8 	bl	80003d4 <__aeabi_ui2d>
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <PID_SetTunings2+0x144>)
 8001a6a:	f7fe fe57 	bl	800071c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9c7 2304 	strd	r2, r3, [r7, #16]
	
	uPID->Kp = Kp;
 8001a76:	68f9      	ldr	r1, [r7, #12]
 8001a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001a80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a88:	f7fe fd1e 	bl	80004c8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8001a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a9e:	f7fe fe3d 	bl	800071c <__aeabi_ddiv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	78db      	ldrb	r3, [r3, #3]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d12b      	bne.n	8001b0c <PID_SetTunings2+0x13c>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	f7fe fb49 	bl	8000158 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	68f9      	ldr	r1, [r7, #12]
 8001acc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ad6:	f04f 0000 	mov.w	r0, #0
 8001ada:	f04f 0100 	mov.w	r1, #0
 8001ade:	f7fe fb3b 	bl	8000158 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001af2:	f04f 0000 	mov.w	r0, #0
 8001af6:	f04f 0100 	mov.w	r1, #0
 8001afa:	f7fe fb2d 	bl	8000158 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	68f9      	ldr	r1, [r7, #12]
 8001b04:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001b08:	e000      	b.n	8001b0c <PID_SetTunings2+0x13c>
		return;
 8001b0a:	bf00      	nop
		
	}
	
}
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	408f4000 	.word	0x408f4000

08001b18 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d02e      	beq.n	8001b8a <PID_SetControllerDirection+0x72>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	78db      	ldrb	r3, [r3, #3]
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d029      	beq.n	8001b8a <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b3c:	f04f 0000 	mov.w	r0, #0
 8001b40:	f04f 0100 	mov.w	r1, #0
 8001b44:	f7fe fb08 	bl	8000158 <__aeabi_dsub>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	f7fe fafa 	bl	8000158 <__aeabi_dsub>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f7fe faec 	bl	8000158 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	70da      	strb	r2, [r3, #3]
	
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001b98:	b5b0      	push	{r4, r5, r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	dd2e      	ble.n	8001c06 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f7fe fc23 	bl	80003f4 <__aeabi_i2d>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fc0c 	bl	80003d4 <__aeabi_ui2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fdaa 	bl	800071c <__aeabi_ddiv>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001bd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bda:	f7fe fc75 	bl	80004c8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bf2:	f7fe fd93 	bl	800071c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_MspInit+0x68>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <HAL_MspInit+0x68>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6193      	str	r3, [r2, #24]
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_MspInit+0x68>)
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_MspInit+0x68>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <HAL_MspInit+0x68>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_MspInit+0x68>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	210f      	movs	r1, #15
 8001c4a:	f06f 0001 	mvn.w	r0, #1
 8001c4e:	f001 f8e6 	bl	8002e1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_MspInit+0x6c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <HAL_MspInit+0x6c>)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000

08001c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <HAL_ADC_MspInit+0xbc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d149      	bne.n	8001d34 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ca0:	4b27      	ldr	r3, [pc, #156]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a20      	ldr	r2, [pc, #128]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_ADC_MspInit+0xc0>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <HAL_ADC_MspInit+0xc4>)
 8001ce0:	f001 fab6 	bl	8003250 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001ce6:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_ADC_MspInit+0xcc>)
 8001ce8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d0e:	2220      	movs	r2, #32
 8001d10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d1a:	f001 f8ab 	bl	8002e74 <HAL_DMA_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001d24:	f7ff fc56 	bl	80015d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d2c:	621a      	str	r2, [r3, #32]
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <HAL_ADC_MspInit+0xc8>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40012400 	.word	0x40012400
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	2000034c 	.word	0x2000034c
 8001d4c:	40020008 	.word	0x40020008

08001d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_I2C_MspInit+0x90>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d132      	bne.n	8001dd6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d8e:	2312      	movs	r3, #18
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4812      	ldr	r0, [pc, #72]	; (8001de8 <HAL_I2C_MspInit+0x98>)
 8001d9e:	f001 fa57 	bl	8003250 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_I2C_MspInit+0x9c>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <HAL_I2C_MspInit+0x9c>)
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_I2C_MspInit+0x94>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40005400 	.word	0x40005400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010c00 	.word	0x40010c00
 8001dec:	40010000 	.word	0x40010000

08001df0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e00:	d10b      	bne.n	8001e1a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_TIM_PWM_MspInit+0x34>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_TIM_PWM_MspInit+0x34>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	61d3      	str	r3, [r2, #28]
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_TIM_PWM_MspInit+0x34>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <HAL_TIM_Base_MspInit+0x44>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d113      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_TIM_Base_MspInit+0x48>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a0c      	ldr	r2, [pc, #48]	; (8001e70 <HAL_TIM_Base_MspInit+0x48>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	61d3      	str	r3, [r2, #28]
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_TIM_Base_MspInit+0x48>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	201d      	movs	r0, #29
 8001e58:	f000 ffe1 	bl	8002e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e5c:	201d      	movs	r0, #29
 8001e5e:	f000 fffa 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e92:	d118      	bne.n	8001ec6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eac:	2308      	movs	r3, #8
 8001eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481f      	ldr	r0, [pc, #124]	; (8001f3c <HAL_TIM_MspPostInit+0xc8>)
 8001ec0:	f001 f9c6 	bl	8003250 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ec4:	e034      	b.n	8001f30 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_TIM_MspPostInit+0xcc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d12f      	bne.n	8001f30 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_TIM_MspPostInit+0xc4>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	4619      	mov	r1, r3
 8001f12:	480a      	ldr	r0, [pc, #40]	; (8001f3c <HAL_TIM_MspPostInit+0xc8>)
 8001f14:	f001 f99c 	bl	8003250 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2302      	movs	r3, #2
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <HAL_TIM_MspPostInit+0xd0>)
 8001f2c:	f001 f990 	bl	8003250 <HAL_GPIO_Init>
}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40010c00 	.word	0x40010c00

08001f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08c      	sub	sp, #48	; 0x30
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_InitTick+0xd0>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <HAL_InitTick+0xd0>)
 8001f64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f68:	6193      	str	r3, [r2, #24]
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_InitTick+0xd0>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f76:	f107 020c 	add.w	r2, r7, #12
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 f837 	bl	8003ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f86:	f002 f821 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8001f8a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_InitTick+0xd4>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3b01      	subs	r3, #1
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <HAL_InitTick+0xd8>)
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <HAL_InitTick+0xdc>)
 8001f9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <HAL_InitTick+0xd8>)
 8001fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_InitTick+0xd8>)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <HAL_InitTick+0xd8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_InitTick+0xd8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <HAL_InitTick+0xd8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001fc0:	4817      	ldr	r0, [pc, #92]	; (8002020 <HAL_InitTick+0xd8>)
 8001fc2:	f002 f91b 	bl	80041fc <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d11b      	bne.n	800200c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fd4:	4812      	ldr	r0, [pc, #72]	; (8002020 <HAL_InitTick+0xd8>)
 8001fd6:	f002 f961 	bl	800429c <HAL_TIM_Base_Start_IT>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d111      	bne.n	800200c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fe8:	2019      	movs	r0, #25
 8001fea:	f000 ff34 	bl	8002e56 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b0f      	cmp	r3, #15
 8001ff2:	d808      	bhi.n	8002006 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	2019      	movs	r0, #25
 8001ffa:	f000 ff10 	bl	8002e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0xe0>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e002      	b.n	800200c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800200c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002010:	4618      	mov	r0, r3
 8002012:	3730      	adds	r7, #48	; 0x30
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	431bde83 	.word	0x431bde83
 8002020:	20000a0c 	.word	0x20000a0c
 8002024:	40012c00 	.word	0x40012c00
 8002028:	20000004 	.word	0x20000004

0800202c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <NMI_Handler+0x4>

08002032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <HardFault_Handler+0x4>

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <MemManage_Handler+0x4>

0800203e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <BusFault_Handler+0x4>

08002044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <UsageFault_Handler+0x4>

0800204a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <DMA1_Channel1_IRQHandler+0x10>)
 800205e:	f000 ffc3 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000034c 	.word	0x2000034c

0800206c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM1_UP_IRQHandler+0x10>)
 8002072:	f002 fabb 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000a0c 	.word	0x20000a0c

08002080 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <TIM3_IRQHandler+0x10>)
 8002086:	f002 fab1 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	2000042c 	.word	0x2000042c

08002094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a0:	f7ff fff8 	bl	8002094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80020a6:	490c      	ldr	r1, [pc, #48]	; (80020d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020bc:	4c09      	ldr	r4, [pc, #36]	; (80020e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f004 fe25 	bl	8006d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ce:	f7fe ff2b 	bl	8000f28 <main>
  bx lr
 80020d2:	4770      	bx	lr
  ldr r0, =_sdata
 80020d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020dc:	08006f04 	.word	0x08006f04
  ldr r2, =_sbss
 80020e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020e4:	200019e8 	.word	0x200019e8

080020e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e8:	e7fe      	b.n	80020e8 <ADC1_2_IRQHandler>
	...

080020ec <StartBuzzer>:
void sequencia1Buzzer(void);

extern osThreadId TaskBuzzerHandle;

void StartBuzzer(void const * argument)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTaskBuzzer */
	//osThreadSuspend(TaskBuzzerHandle);
	/* Infinite loop */
	for(;;)
	{
		sequencia1Buzzer();
 80020f4:	f000 f80c 	bl	8002110 <sequencia1Buzzer>

		osThreadSuspend(TaskBuzzerHandle);
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <StartBuzzer+0x20>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f003 f91a 	bl	8005336 <osThreadSuspend>

		osDelay(100);
 8002102:	2064      	movs	r0, #100	; 0x64
 8002104:	f003 f8b7 	bl	8005276 <osDelay>
		sequencia1Buzzer();
 8002108:	e7f4      	b.n	80020f4 <StartBuzzer+0x8>
 800210a:	bf00      	nop
 800210c:	2000047c 	.word	0x2000047c

08002110 <sequencia1Buzzer>:
	}
	/* USER CODE END StartTaskBuzzer */
}

void sequencia1Buzzer(void){
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	M_BUZZER_ON
 8002114:	210c      	movs	r1, #12
 8002116:	480d      	ldr	r0, [pc, #52]	; (800214c <sequencia1Buzzer+0x3c>)
 8002118:	f002 f962 	bl	80043e0 <HAL_TIM_PWM_Start>
	HAL_Delay(300);
 800211c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002120:	f000 f9e2 	bl	80024e8 <HAL_Delay>
	M_BUZZER_OFF
 8002124:	210c      	movs	r1, #12
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <sequencia1Buzzer+0x3c>)
 8002128:	f002 f9fc 	bl	8004524 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 800212c:	2032      	movs	r0, #50	; 0x32
 800212e:	f000 f9db 	bl	80024e8 <HAL_Delay>
	M_BUZZER_ON
 8002132:	210c      	movs	r1, #12
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <sequencia1Buzzer+0x3c>)
 8002136:	f002 f953 	bl	80043e0 <HAL_TIM_PWM_Start>
	HAL_Delay(250);
 800213a:	20fa      	movs	r0, #250	; 0xfa
 800213c:	f000 f9d4 	bl	80024e8 <HAL_Delay>
	M_BUZZER_OFF
 8002140:	210c      	movs	r1, #12
 8002142:	4802      	ldr	r0, [pc, #8]	; (800214c <sequencia1Buzzer+0x3c>)
 8002144:	f002 f9ee 	bl	8004524 <HAL_TIM_PWM_Stop>
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200003e4 	.word	0x200003e4

08002150 <StartTemperatura>:
//---variaveis PID
double TempTeto, TempLastro, PIDOutTeto, PIDOutLastro, TempSPTeto, TempSPLastro;
PID_TypeDef TPIDTeto,TPIDLastro;


void StartTemperatura(void const * argument){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]

	initPID();
 8002158:	f000 f80a 	bl	8002170 <initPID>

	//	osThreadSuspend(TaskTemperaturaHandle);
	for(;;)	{

		computaPID();
 800215c:	f000 f898 	bl	8002290 <computaPID>

		osDelay(TIME_PID_CALC);
 8002160:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002164:	f003 f887 	bl	8005276 <osDelay>
		computaPID();
 8002168:	e7f8      	b.n	800215c <StartTemperatura+0xc>
 800216a:	0000      	movs	r0, r0
 800216c:	0000      	movs	r0, r0
	...

08002170 <initPID>:

	tmp += (*PIDOut / 1000);

	return tmp;
}
void initPID(void){
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af08      	add	r7, sp, #32

	TempSPTeto 		= 0;
 8002176:	493a      	ldr	r1, [pc, #232]	; (8002260 <initPID+0xf0>)
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9c1 2300 	strd	r2, r3, [r1]
	TempSPLastro 	= 0;
 8002184:	4937      	ldr	r1, [pc, #220]	; (8002264 <initPID+0xf4>)
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9c1 2300 	strd	r2, r3, [r1]

	PID(&TPIDTeto, 		&PrimitiveStates.RealtimeTeto, 		&PIDOutTeto, 	&PrimitiveStates.SetPointTeto, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 8002192:	2300      	movs	r3, #0
 8002194:	9307      	str	r3, [sp, #28]
 8002196:	2301      	movs	r3, #1
 8002198:	9306      	str	r3, [sp, #24]
 800219a:	a32d      	add	r3, pc, #180	; (adr r3, 8002250 <initPID+0xe0>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021a4:	a32c      	add	r3, pc, #176	; (adr r3, 8002258 <initPID+0xe8>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b2d      	ldr	r3, [pc, #180]	; (8002268 <initPID+0xf8>)
 80021b4:	e9cd 2300 	strd	r2, r3, [sp]
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <initPID+0xfc>)
 80021ba:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <initPID+0x100>)
 80021bc:	492d      	ldr	r1, [pc, #180]	; (8002274 <initPID+0x104>)
 80021be:	482e      	ldr	r0, [pc, #184]	; (8002278 <initPID+0x108>)
 80021c0:	f7ff fa4a 	bl	8001658 <PID>
	PID(&TPIDLastro, 	&PrimitiveStates.RealtimeLastro, 	&PIDOutLastro, 	&PrimitiveStates.SetPointLastro, 	30, 0.01, 0.3, _PID_P_ON_E, _PID_CD_DIRECT);
 80021c4:	2300      	movs	r3, #0
 80021c6:	9307      	str	r3, [sp, #28]
 80021c8:	2301      	movs	r3, #1
 80021ca:	9306      	str	r3, [sp, #24]
 80021cc:	a320      	add	r3, pc, #128	; (adr r3, 8002250 <initPID+0xe0>)
 80021ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021d6:	a320      	add	r3, pc, #128	; (adr r3, 8002258 <initPID+0xe8>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <initPID+0xf8>)
 80021e6:	e9cd 2300 	strd	r2, r3, [sp]
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <initPID+0x10c>)
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <initPID+0x110>)
 80021ee:	4925      	ldr	r1, [pc, #148]	; (8002284 <initPID+0x114>)
 80021f0:	4825      	ldr	r0, [pc, #148]	; (8002288 <initPID+0x118>)
 80021f2:	f7ff fa31 	bl	8001658 <PID>

	PID_SetMode(&TPIDTeto, 		_PID_MODE_AUTOMATIC);
 80021f6:	2101      	movs	r1, #1
 80021f8:	481f      	ldr	r0, [pc, #124]	; (8002278 <initPID+0x108>)
 80021fa:	f7ff fb5f 	bl	80018bc <PID_SetMode>
	PID_SetMode(&TPIDLastro, 	_PID_MODE_AUTOMATIC);
 80021fe:	2101      	movs	r1, #1
 8002200:	4821      	ldr	r0, [pc, #132]	; (8002288 <initPID+0x118>)
 8002202:	f7ff fb5b 	bl	80018bc <PID_SetMode>

	PID_SetSampleTime(&TPIDTeto, TIME_PID_CALC);
 8002206:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800220a:	481b      	ldr	r0, [pc, #108]	; (8002278 <initPID+0x108>)
 800220c:	f7ff fcc4 	bl	8001b98 <PID_SetSampleTime>
	PID_SetSampleTime(&TPIDLastro, TIME_PID_CALC);
 8002210:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002214:	481c      	ldr	r0, [pc, #112]	; (8002288 <initPID+0x118>)
 8002216:	f7ff fcbf 	bl	8001b98 <PID_SetSampleTime>

	PID_SetOutputLimits(&TPIDTeto, 0, 100);
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <initPID+0x11c>)
 8002220:	e9cd 2300 	strd	r2, r3, [sp]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <initPID+0x108>)
 800222e:	f7ff fb63 	bl	80018f8 <PID_SetOutputLimits>
	PID_SetOutputLimits(&TPIDLastro, 0, 100);
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <initPID+0x11c>)
 8002238:	e9cd 2300 	strd	r2, r3, [sp]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	4810      	ldr	r0, [pc, #64]	; (8002288 <initPID+0x118>)
 8002246:	f7ff fb57 	bl	80018f8 <PID_SetOutputLimits>
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	33333333 	.word	0x33333333
 8002254:	3fd33333 	.word	0x3fd33333
 8002258:	47ae147b 	.word	0x47ae147b
 800225c:	3f847ae1 	.word	0x3f847ae1
 8002260:	20000a68 	.word	0x20000a68
 8002264:	20000a70 	.word	0x20000a70
 8002268:	403e0000 	.word	0x403e0000
 800226c:	200009e8 	.word	0x200009e8
 8002270:	20000a58 	.word	0x20000a58
 8002274:	200009d8 	.word	0x200009d8
 8002278:	20000a78 	.word	0x20000a78
 800227c:	200009f0 	.word	0x200009f0
 8002280:	20000a60 	.word	0x20000a60
 8002284:	200009e0 	.word	0x200009e0
 8002288:	20000ae8 	.word	0x20000ae8
 800228c:	40590000 	.word	0x40590000

08002290 <computaPID>:
void computaPID(void){
 8002290:	b598      	push	{r3, r4, r7, lr}
 8002292:	af00      	add	r7, sp, #0

	PID_Compute(&TPIDTeto);
 8002294:	480e      	ldr	r0, [pc, #56]	; (80022d0 <computaPID+0x40>)
 8002296:	f7ff fa27 	bl	80016e8 <PID_Compute>
	PID_Compute(&TPIDLastro);
 800229a:	480e      	ldr	r0, [pc, #56]	; (80022d4 <computaPID+0x44>)
 800229c:	f7ff fa24 	bl	80016e8 <PID_Compute>

	htim3.Instance->CCR3 = PIDOutTeto;
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <computaPID+0x48>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <computaPID+0x4c>)
 80022a8:	680c      	ldr	r4, [r1, #0]
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fba5 	bl	80009fc <__aeabi_d2uiz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	63e3      	str	r3, [r4, #60]	; 0x3c
	htim3.Instance->CCR4 = PIDOutLastro;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <computaPID+0x50>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <computaPID+0x4c>)
 80022be:	680c      	ldr	r4, [r1, #0]
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fb9a 	bl	80009fc <__aeabi_d2uiz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	6423      	str	r3, [r4, #64]	; 0x40
}
 80022cc:	bf00      	nop
 80022ce:	bd98      	pop	{r3, r4, r7, pc}
 80022d0:	20000a78 	.word	0x20000a78
 80022d4:	20000ae8 	.word	0x20000ae8
 80022d8:	20000a58 	.word	0x20000a58
 80022dc:	2000042c 	.word	0x2000042c
 80022e0:	20000a60 	.word	0x20000a60

080022e4 <StartTimer>:
//variaveis globais
extern GlobalPrimitiveIOStates PrimitiveStates;


void StartTimer(void const * argument)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	xLastWakeTime = xTaskGetTickCount();
 80022ec:	f003 fe1a 	bl	8005f24 <xTaskGetTickCount>
 80022f0:	4603      	mov	r3, r0
 80022f2:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		verificaErro();
 80022f4:	f000 f8ac 	bl	8002450 <verificaErro>

		funcionamentoTimer();
 80022f8:	f000 f80a 	bl	8002310 <funcionamentoTimer>

		funcionamentoLampada();
 80022fc:	f000 f86e 	bl	80023dc <funcionamentoLampada>

		osDelayUntil(&xLastWakeTime,1000);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002308:	4618      	mov	r0, r3
 800230a:	f003 f843 	bl	8005394 <osDelayUntil>
		verificaErro();
 800230e:	e7f1      	b.n	80022f4 <StartTimer+0x10>

08002310 <funcionamentoTimer>:
	}
}

void funcionamentoTimer(void){
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0

	//Decremento de minutos e segundos
	if((PrimitiveStates.RTTimerMinutos>0 && PrimitiveStates.RTTimerSegundos==0) && PrimitiveStates.stateTimer){
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002316:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <funcionamentoTimer+0x3c>
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002320:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <funcionamentoTimer+0x3c>
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <funcionamentoTimer+0xc4>)
 800232a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <funcionamentoTimer+0x3c>
		PrimitiveStates.RTTimerSegundos = 59;
 8002332:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002334:	223b      	movs	r2, #59	; 0x3b
 8002336:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		PrimitiveStates.RTTimerMinutos--;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <funcionamentoTimer+0xc4>)
 800233c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002340:	3b01      	subs	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002346:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			PrimitiveStates.SetPointTeto	= 0;
			PrimitiveStates.SetPointLastro	= 0;
			osThreadResume(TaskBuzzerHandle);
		}
	}
}
 800234a:	e041      	b.n	80023d0 <funcionamentoTimer+0xc0>
	}else if((PrimitiveStates.RTTimerMinutos>0 || PrimitiveStates.RTTimerSegundos>0) && PrimitiveStates.stateTimer){
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <funcionamentoTimer+0xc4>)
 800234e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <funcionamentoTimer+0x50>
 8002356:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002358:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d037      	beq.n	80023d0 <funcionamentoTimer+0xc0>
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002362:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002366:	2b00      	cmp	r3, #0
 8002368:	d032      	beq.n	80023d0 <funcionamentoTimer+0xc0>
		PrimitiveStates.RTTimerSegundos--;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <funcionamentoTimer+0xc4>)
 800236c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		if(PrimitiveStates.RTTimerSegundos==0 && PrimitiveStates.RTTimerMinutos==0){
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <funcionamentoTimer+0xc4>)
 800237c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d125      	bne.n	80023d0 <funcionamentoTimer+0xc0>
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002386:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800238a:	2b00      	cmp	r3, #0
 800238c:	d120      	bne.n	80023d0 <funcionamentoTimer+0xc0>
			PrimitiveStates.SetPointTeto 	= 0;
 800238e:	4911      	ldr	r1, [pc, #68]	; (80023d4 <funcionamentoTimer+0xc4>)
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro 	= 0;
 800239c:	490d      	ldr	r1, [pc, #52]	; (80023d4 <funcionamentoTimer+0xc4>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			PrimitiveStates.SetPointTeto	= 0;
 80023aa:	490a      	ldr	r1, [pc, #40]	; (80023d4 <funcionamentoTimer+0xc4>)
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			PrimitiveStates.SetPointLastro	= 0;
 80023b8:	4906      	ldr	r1, [pc, #24]	; (80023d4 <funcionamentoTimer+0xc4>)
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
			osThreadResume(TaskBuzzerHandle);
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <funcionamentoTimer+0xc8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 ffc0 	bl	8005350 <osThreadResume>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200009d0 	.word	0x200009d0
 80023d8:	2000047c 	.word	0x2000047c

080023dc <funcionamentoLampada>:

void funcionamentoLampada(void){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
	osEvent evt;
	//notificacao via piscar de lamapda
	evt = osSignalWait (PISCADA_LAMPADA, 0);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	211f      	movs	r1, #31
 80023e8:	4618      	mov	r0, r3
 80023ea:	f002 ff58 	bl	800529e <osSignalWait>
	if (evt.status == osEventSignal){
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b08      	cmp	r3, #8
			//TODO LÓGICA DE PISCADA DE LAMPADA
		}
	}

	//decremento e apos desligamento lampada
	if(PrimitiveStates.SegundosLampada>0){
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <funcionamentoLampada+0x6c>)
 80023f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d021      	beq.n	8002440 <funcionamentoLampada+0x64>
		PrimitiveStates.SegundosLampada--;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <funcionamentoLampada+0x6c>)
 80023fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002402:	3b01      	subs	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <funcionamentoLampada+0x6c>)
 8002408:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		if(PrimitiveStates.SegundosLampada==0){
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <funcionamentoLampada+0x6c>)
 800240e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <funcionamentoLampada+0x54>
			LAMPADA_OFF
 8002416:	2200      	movs	r2, #0
 8002418:	2140      	movs	r1, #64	; 0x40
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <funcionamentoLampada+0x70>)
 800241c:	f001 f89c 	bl	8003558 <HAL_GPIO_WritePin>
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <funcionamentoLampada+0x6c>)
 8002422:	2200      	movs	r2, #0
 8002424:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <funcionamentoLampada+0x6c>)
 800242a:	2200      	movs	r2, #0
 800242c:	70da      	strb	r2, [r3, #3]
		}else{
			LAMPADA_ON
		}
	}
}
 800242e:	e007      	b.n	8002440 <funcionamentoLampada+0x64>
			LAMPADA_ON
 8002430:	2201      	movs	r2, #1
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <funcionamentoLampada+0x70>)
 8002436:	f001 f88f 	bl	8003558 <HAL_GPIO_WritePin>
 800243a:	4b03      	ldr	r3, [pc, #12]	; (8002448 <funcionamentoLampada+0x6c>)
 800243c:	2201      	movs	r2, #1
 800243e:	70da      	strb	r2, [r3, #3]
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200009d0 	.word	0x200009d0
 800244c:	40010c00 	.word	0x40010c00

08002450 <verificaErro>:

void verificaErro(void){
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
	osEvent evt;
	evt = osSignalWait (ERRO_CRITICO, 0);
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	210f      	movs	r1, #15
 800245c:	4618      	mov	r0, r3
 800245e:	f002 ff1e 	bl	800529e <osSignalWait>
	if (evt.status == osEventSignal){
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d107      	bne.n	8002478 <verificaErro+0x28>

		if(evt.value.v == ERRO_CRITICO){
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	d104      	bne.n	8002478 <verificaErro+0x28>
			//TODO REVISAR
			osThreadSuspend(TaskTimerHandle);
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <verificaErro+0x30>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 ff5f 	bl	8005336 <osThreadSuspend>
		}
	}
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000720 	.word	0x20000720

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_Init+0x28>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_Init+0x28>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 fcb7 	bl	8002e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f7ff fd54 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fbb6 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_IncTick+0x1c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_IncTick+0x20>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a03      	ldr	r2, [pc, #12]	; (80024d0 <HAL_IncTick+0x20>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000b58 	.word	0x20000b58

080024d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return uwTick;
 80024d8:	4b02      	ldr	r3, [pc, #8]	; (80024e4 <HAL_GetTick+0x10>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	20000b58 	.word	0x20000b58

080024e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_GetTick>
 80024f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d005      	beq.n	800250e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_Delay+0x44>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800250e:	bf00      	nop
 8002510:	f7ff ffe0 	bl	80024d4 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	429a      	cmp	r2, r3
 800251e:	d8f7      	bhi.n	8002510 <HAL_Delay+0x28>
  {
  }
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000008 	.word	0x20000008

08002530 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0be      	b.n	80026d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fb86 	bl	8001c80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 faf5 	bl	8002b64 <ADC_ConversionStop_Disable>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8099 	bne.w	80026be <HAL_ADC_Init+0x18e>
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 8095 	bne.w	80026be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800259c:	f023 0302 	bic.w	r3, r3, #2
 80025a0:	f043 0202 	orr.w	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	7b1b      	ldrb	r3, [r3, #12]
 80025b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c8:	d003      	beq.n	80025d2 <HAL_ADC_Init+0xa2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d102      	bne.n	80025d8 <HAL_ADC_Init+0xa8>
 80025d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d6:	e000      	b.n	80025da <HAL_ADC_Init+0xaa>
 80025d8:	2300      	movs	r3, #0
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7d1b      	ldrb	r3, [r3, #20]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d119      	bne.n	800261c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	035a      	lsls	r2, r3, #13
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e00b      	b.n	800261c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b28      	ldr	r3, [pc, #160]	; (80026d8 <HAL_ADC_Init+0x1a8>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	430b      	orrs	r3, r1
 8002642:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264c:	d003      	beq.n	8002656 <HAL_ADC_Init+0x126>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d104      	bne.n	8002660 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	3b01      	subs	r3, #1
 800265c:	051b      	lsls	r3, r3, #20
 800265e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	430a      	orrs	r2, r1
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_ADC_Init+0x1ac>)
 800267c:	4013      	ands	r3, r2
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	429a      	cmp	r2, r3
 8002682:	d10b      	bne.n	800269c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800269a:	e018      	b.n	80026ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f023 0312 	bic.w	r3, r3, #18
 80026a4:	f043 0210 	orr.w	r2, r3, #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026bc:	e007      	b.n	80026ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f043 0210 	orr.w	r2, r3, #16
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	ffe1f7fd 	.word	0xffe1f7fd
 80026dc:	ff1f0efe 	.word	0xff1f0efe

080026e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a64      	ldr	r2, [pc, #400]	; (8002888 <HAL_ADC_Start_DMA+0x1a8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d004      	beq.n	8002704 <HAL_ADC_Start_DMA+0x24>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <HAL_ADC_Start_DMA+0x1ac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d106      	bne.n	8002712 <HAL_ADC_Start_DMA+0x32>
 8002704:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_ADC_Start_DMA+0x1a8>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f040 80b3 	bne.w	8002878 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_ADC_Start_DMA+0x40>
 800271c:	2302      	movs	r3, #2
 800271e:	e0ae      	b.n	800287e <HAL_ADC_Start_DMA+0x19e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f9c1 	bl	8002ab0 <ADC_Enable>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 809a 	bne.w	800286e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <HAL_ADC_Start_DMA+0x1ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d105      	bne.n	8002764 <HAL_ADC_Start_DMA+0x84>
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_ADC_Start_DMA+0x1a8>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d115      	bne.n	8002790 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d026      	beq.n	80027cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002786:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278e:	e01d      	b.n	80027cc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a39      	ldr	r2, [pc, #228]	; (8002888 <HAL_ADC_Start_DMA+0x1a8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_ADC_Start_DMA+0xd0>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a38      	ldr	r2, [pc, #224]	; (800288c <HAL_ADC_Start_DMA+0x1ac>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d10d      	bne.n	80027cc <HAL_ADC_Start_DMA+0xec>
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_ADC_Start_DMA+0x1a8>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	f023 0206 	bic.w	r2, r3, #6
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80027e4:	e002      	b.n	80027ec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_ADC_Start_DMA+0x1b0>)
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_ADC_Start_DMA+0x1b4>)
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <HAL_ADC_Start_DMA+0x1b8>)
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0202 	mvn.w	r2, #2
 8002814:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002824:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a18      	ldr	r0, [r3, #32]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	334c      	adds	r3, #76	; 0x4c
 8002830:	4619      	mov	r1, r3
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f000 fb77 	bl	8002f28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002844:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002848:	d108      	bne.n	800285c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002858:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800285a:	e00f      	b.n	800287c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800286a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800286c:	e006      	b.n	800287c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002876:	e001      	b.n	800287c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800287c:	7dfb      	ldrb	r3, [r7, #23]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40012400 	.word	0x40012400
 800288c:	40012800 	.word	0x40012800
 8002890:	08002be7 	.word	0x08002be7
 8002894:	08002c63 	.word	0x08002c63
 8002898:	08002c7f 	.word	0x08002c7f

0800289c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x20>
 80028dc:	2302      	movs	r3, #2
 80028de:	e0dc      	b.n	8002a9a <HAL_ADC_ConfigChannel+0x1da>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d81c      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	3b05      	subs	r3, #5
 8002902:	221f      	movs	r2, #31
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	4019      	ands	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	3b05      	subs	r3, #5
 800291c:	fa00 f203 	lsl.w	r2, r0, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	635a      	str	r2, [r3, #52]	; 0x34
 8002928:	e03c      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d81c      	bhi.n	800296c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b23      	subs	r3, #35	; 0x23
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	4019      	ands	r1, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	3b23      	subs	r3, #35	; 0x23
 800295e:	fa00 f203 	lsl.w	r2, r0, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
 800296a:	e01b      	b.n	80029a4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	3b41      	subs	r3, #65	; 0x41
 800297e:	221f      	movs	r2, #31
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	4019      	ands	r1, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	3b41      	subs	r3, #65	; 0x41
 8002998:	fa00 f203 	lsl.w	r2, r0, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b09      	cmp	r3, #9
 80029aa:	d91c      	bls.n	80029e6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68d9      	ldr	r1, [r3, #12]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	4413      	add	r3, r2
 80029bc:	3b1e      	subs	r3, #30
 80029be:	2207      	movs	r2, #7
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4019      	ands	r1, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6898      	ldr	r0, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	3b1e      	subs	r3, #30
 80029d8:	fa00 f203 	lsl.w	r2, r0, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	e019      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6919      	ldr	r1, [r3, #16]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	2207      	movs	r2, #7
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	4019      	ands	r1, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6898      	ldr	r0, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d003      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a26:	2b11      	cmp	r3, #17
 8002a28:	d132      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d125      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d126      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a50:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d11a      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a5a:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a13      	ldr	r2, [pc, #76]	; (8002aac <HAL_ADC_ConfigChannel+0x1ec>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	0c9a      	lsrs	r2, r3, #18
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f9      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1b2>
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012400 	.word	0x40012400
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	431bde83 	.word	0x431bde83

08002ab0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d040      	beq.n	8002b50 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <ADC_Enable+0xac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <ADC_Enable+0xb0>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9b      	lsrs	r3, r3, #18
 8002aea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aec:	e002      	b.n	8002af4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002afa:	f7ff fceb 	bl	80024d4 <HAL_GetTick>
 8002afe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b00:	e01f      	b.n	8002b42 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b02:	f7ff fce7 	bl	80024d4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d918      	bls.n	8002b42 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d011      	beq.n	8002b42 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e007      	b.n	8002b52 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d1d8      	bne.n	8002b02 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	431bde83 	.word	0x431bde83

08002b64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d12e      	bne.n	8002bdc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0201 	bic.w	r2, r2, #1
 8002b8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b8e:	f7ff fca1 	bl	80024d4 <HAL_GetTick>
 8002b92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	e01b      	b.n	8002bce <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b96:	f7ff fc9d 	bl	80024d4 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d914      	bls.n	8002bce <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d10d      	bne.n	8002bce <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e007      	b.n	8002bde <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d0dc      	beq.n	8002b96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d127      	bne.n	8002c50 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c1a:	d115      	bne.n	8002c48 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d111      	bne.n	8002c48 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7fe fc25 	bl	8001498 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c4e:	e004      	b.n	8002c5a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fe13 	bl	800289c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	f043 0204 	orr.w	r2, r3, #4
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fe02 	bl	80028ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4906      	ldr	r1, [pc, #24]	; (8002d4c <__NVIC_EnableIRQ+0x34>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff4f 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff64 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ffb2 	bl	8002da4 <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff81 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff57 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e043      	b.n	8002f12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_DMA_Init+0xa8>)
 8002e92:	4413      	add	r3, r2
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <HAL_DMA_Init+0xac>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	009a      	lsls	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_DMA_Init+0xb0>)
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ebe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ec2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr
 8002f1c:	bffdfff8 	.word	0xbffdfff8
 8002f20:	cccccccd 	.word	0xcccccccd
 8002f24:	40020000 	.word	0x40020000

08002f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_DMA_Start_IT+0x20>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e04b      	b.n	8002fe0 <HAL_DMA_Start_IT+0xb8>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d13a      	bne.n	8002fd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f937 	bl	80031f4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 020e 	orr.w	r2, r2, #14
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e00f      	b.n	8002fc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 020a 	orr.w	r2, r2, #10
 8002fbe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e005      	b.n	8002fde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	2204      	movs	r2, #4
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d04f      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xc8>
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d04a      	beq.n	80030b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d107      	bne.n	8003038 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_DMA_IRQHandler+0x1f0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d029      	beq.n	8003096 <HAL_DMA_IRQHandler+0xae>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a65      	ldr	r2, [pc, #404]	; (80031dc <HAL_DMA_IRQHandler+0x1f4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d022      	beq.n	8003092 <HAL_DMA_IRQHandler+0xaa>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_DMA_IRQHandler+0x1f8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01a      	beq.n	800308c <HAL_DMA_IRQHandler+0xa4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a62      	ldr	r2, [pc, #392]	; (80031e4 <HAL_DMA_IRQHandler+0x1fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d012      	beq.n	8003086 <HAL_DMA_IRQHandler+0x9e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a60      	ldr	r2, [pc, #384]	; (80031e8 <HAL_DMA_IRQHandler+0x200>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00a      	beq.n	8003080 <HAL_DMA_IRQHandler+0x98>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a5f      	ldr	r2, [pc, #380]	; (80031ec <HAL_DMA_IRQHandler+0x204>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <HAL_DMA_IRQHandler+0x92>
 8003074:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003078:	e00e      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 800307a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800307e:	e00b      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003080:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003084:	e008      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003086:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800308a:	e005      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 800308c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003090:	e002      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	e000      	b.n	8003098 <HAL_DMA_IRQHandler+0xb0>
 8003096:	2304      	movs	r3, #4
 8003098:	4a55      	ldr	r2, [pc, #340]	; (80031f0 <HAL_DMA_IRQHandler+0x208>)
 800309a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8094 	beq.w	80031ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80030ae:	e08e      	b.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	2202      	movs	r2, #2
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d056      	beq.n	800316e <HAL_DMA_IRQHandler+0x186>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d051      	beq.n	800316e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 020a 	bic.w	r2, r2, #10
 80030e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a38      	ldr	r2, [pc, #224]	; (80031d8 <HAL_DMA_IRQHandler+0x1f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d029      	beq.n	800314e <HAL_DMA_IRQHandler+0x166>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <HAL_DMA_IRQHandler+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0x162>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <HAL_DMA_IRQHandler+0x1f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x15c>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a34      	ldr	r2, [pc, #208]	; (80031e4 <HAL_DMA_IRQHandler+0x1fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d012      	beq.n	800313e <HAL_DMA_IRQHandler+0x156>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a32      	ldr	r2, [pc, #200]	; (80031e8 <HAL_DMA_IRQHandler+0x200>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x150>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <HAL_DMA_IRQHandler+0x204>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d102      	bne.n	8003132 <HAL_DMA_IRQHandler+0x14a>
 800312c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003130:	e00e      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003132:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003136:	e00b      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800313c:	e008      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800313e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003142:	e005      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 8003144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003148:	e002      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800314a:	2320      	movs	r3, #32
 800314c:	e000      	b.n	8003150 <HAL_DMA_IRQHandler+0x168>
 800314e:	2302      	movs	r3, #2
 8003150:	4a27      	ldr	r2, [pc, #156]	; (80031f0 <HAL_DMA_IRQHandler+0x208>)
 8003152:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d034      	beq.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800316c:	e02f      	b.n	80031ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2208      	movs	r2, #8
 8003174:	409a      	lsls	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d023      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 020e 	bic.w	r2, r2, #14
 8003196:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f202 	lsl.w	r2, r1, r2
 80031a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	4798      	blx	r3
    }
  }
  return;
 80031ce:	bf00      	nop
 80031d0:	bf00      	nop
}
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40020008 	.word	0x40020008
 80031dc:	4002001c 	.word	0x4002001c
 80031e0:	40020030 	.word	0x40020030
 80031e4:	40020044 	.word	0x40020044
 80031e8:	40020058 	.word	0x40020058
 80031ec:	4002006c 	.word	0x4002006c
 80031f0:	40020000 	.word	0x40020000

080031f4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d108      	bne.n	8003234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003232:	e007      	b.n	8003244 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
	...

08003250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003250:	b480      	push	{r7}
 8003252:	b08b      	sub	sp, #44	; 0x2c
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800325e:	2300      	movs	r3, #0
 8003260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003262:	e169      	b.n	8003538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003264:	2201      	movs	r2, #1
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8158 	bne.w	8003532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4a9a      	ldr	r2, [pc, #616]	; (80034f0 <HAL_GPIO_Init+0x2a0>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d05e      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 800328c:	4a98      	ldr	r2, [pc, #608]	; (80034f0 <HAL_GPIO_Init+0x2a0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d875      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 8003292:	4a98      	ldr	r2, [pc, #608]	; (80034f4 <HAL_GPIO_Init+0x2a4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d058      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 8003298:	4a96      	ldr	r2, [pc, #600]	; (80034f4 <HAL_GPIO_Init+0x2a4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d86f      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 800329e:	4a96      	ldr	r2, [pc, #600]	; (80034f8 <HAL_GPIO_Init+0x2a8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d052      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032a4:	4a94      	ldr	r2, [pc, #592]	; (80034f8 <HAL_GPIO_Init+0x2a8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d869      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032aa:	4a94      	ldr	r2, [pc, #592]	; (80034fc <HAL_GPIO_Init+0x2ac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d04c      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032b0:	4a92      	ldr	r2, [pc, #584]	; (80034fc <HAL_GPIO_Init+0x2ac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d863      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032b6:	4a92      	ldr	r2, [pc, #584]	; (8003500 <HAL_GPIO_Init+0x2b0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d046      	beq.n	800334a <HAL_GPIO_Init+0xfa>
 80032bc:	4a90      	ldr	r2, [pc, #576]	; (8003500 <HAL_GPIO_Init+0x2b0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d85d      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032c2:	2b12      	cmp	r3, #18
 80032c4:	d82a      	bhi.n	800331c <HAL_GPIO_Init+0xcc>
 80032c6:	2b12      	cmp	r3, #18
 80032c8:	d859      	bhi.n	800337e <HAL_GPIO_Init+0x12e>
 80032ca:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_GPIO_Init+0x80>)
 80032cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d0:	0800334b 	.word	0x0800334b
 80032d4:	08003325 	.word	0x08003325
 80032d8:	08003337 	.word	0x08003337
 80032dc:	08003379 	.word	0x08003379
 80032e0:	0800337f 	.word	0x0800337f
 80032e4:	0800337f 	.word	0x0800337f
 80032e8:	0800337f 	.word	0x0800337f
 80032ec:	0800337f 	.word	0x0800337f
 80032f0:	0800337f 	.word	0x0800337f
 80032f4:	0800337f 	.word	0x0800337f
 80032f8:	0800337f 	.word	0x0800337f
 80032fc:	0800337f 	.word	0x0800337f
 8003300:	0800337f 	.word	0x0800337f
 8003304:	0800337f 	.word	0x0800337f
 8003308:	0800337f 	.word	0x0800337f
 800330c:	0800337f 	.word	0x0800337f
 8003310:	0800337f 	.word	0x0800337f
 8003314:	0800332d 	.word	0x0800332d
 8003318:	08003341 	.word	0x08003341
 800331c:	4a79      	ldr	r2, [pc, #484]	; (8003504 <HAL_GPIO_Init+0x2b4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003322:	e02c      	b.n	800337e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	623b      	str	r3, [r7, #32]
          break;
 800332a:	e029      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	3304      	adds	r3, #4
 8003332:	623b      	str	r3, [r7, #32]
          break;
 8003334:	e024      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	3308      	adds	r3, #8
 800333c:	623b      	str	r3, [r7, #32]
          break;
 800333e:	e01f      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	330c      	adds	r3, #12
 8003346:	623b      	str	r3, [r7, #32]
          break;
 8003348:	e01a      	b.n	8003380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d102      	bne.n	8003358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003352:	2304      	movs	r3, #4
 8003354:	623b      	str	r3, [r7, #32]
          break;
 8003356:	e013      	b.n	8003380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003360:	2308      	movs	r3, #8
 8003362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	611a      	str	r2, [r3, #16]
          break;
 800336a:	e009      	b.n	8003380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800336c:	2308      	movs	r3, #8
 800336e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	615a      	str	r2, [r3, #20]
          break;
 8003376:	e003      	b.n	8003380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003378:	2300      	movs	r3, #0
 800337a:	623b      	str	r3, [r7, #32]
          break;
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x130>
          break;
 800337e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2bff      	cmp	r3, #255	; 0xff
 8003384:	d801      	bhi.n	800338a <HAL_GPIO_Init+0x13a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	e001      	b.n	800338e <HAL_GPIO_Init+0x13e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2bff      	cmp	r3, #255	; 0xff
 8003394:	d802      	bhi.n	800339c <HAL_GPIO_Init+0x14c>
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	e002      	b.n	80033a2 <HAL_GPIO_Init+0x152>
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3b08      	subs	r3, #8
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	210f      	movs	r1, #15
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	6a39      	ldr	r1, [r7, #32]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	fa01 f303 	lsl.w	r3, r1, r3
 80033bc:	431a      	orrs	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80b1 	beq.w	8003532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033d0:	4b4d      	ldr	r3, [pc, #308]	; (8003508 <HAL_GPIO_Init+0x2b8>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4a4c      	ldr	r2, [pc, #304]	; (8003508 <HAL_GPIO_Init+0x2b8>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6193      	str	r3, [r2, #24]
 80033dc:	4b4a      	ldr	r3, [pc, #296]	; (8003508 <HAL_GPIO_Init+0x2b8>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033e8:	4a48      	ldr	r2, [pc, #288]	; (800350c <HAL_GPIO_Init+0x2bc>)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4013      	ands	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a40      	ldr	r2, [pc, #256]	; (8003510 <HAL_GPIO_Init+0x2c0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_GPIO_Init+0x1ec>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3f      	ldr	r2, [pc, #252]	; (8003514 <HAL_GPIO_Init+0x2c4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00d      	beq.n	8003438 <HAL_GPIO_Init+0x1e8>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3e      	ldr	r2, [pc, #248]	; (8003518 <HAL_GPIO_Init+0x2c8>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d007      	beq.n	8003434 <HAL_GPIO_Init+0x1e4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a3d      	ldr	r2, [pc, #244]	; (800351c <HAL_GPIO_Init+0x2cc>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_GPIO_Init+0x1e0>
 800342c:	2303      	movs	r3, #3
 800342e:	e006      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003430:	2304      	movs	r3, #4
 8003432:	e004      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003434:	2302      	movs	r3, #2
 8003436:	e002      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_GPIO_Init+0x1ee>
 800343c:	2300      	movs	r3, #0
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	4093      	lsls	r3, r2
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800344e:	492f      	ldr	r1, [pc, #188]	; (800350c <HAL_GPIO_Init+0x2bc>)
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d006      	beq.n	8003476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	492c      	ldr	r1, [pc, #176]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]
 8003474:	e006      	b.n	8003484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	43db      	mvns	r3, r3
 800347e:	4928      	ldr	r1, [pc, #160]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 8003480:	4013      	ands	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4922      	ldr	r1, [pc, #136]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	491e      	ldr	r1, [pc, #120]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	4918      	ldr	r1, [pc, #96]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
 80034c4:	e006      	b.n	80034d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	4914      	ldr	r1, [pc, #80]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d021      	beq.n	8003524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	490e      	ldr	r1, [pc, #56]	; (8003520 <HAL_GPIO_Init+0x2d0>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e021      	b.n	8003532 <HAL_GPIO_Init+0x2e2>
 80034ee:	bf00      	nop
 80034f0:	10320000 	.word	0x10320000
 80034f4:	10310000 	.word	0x10310000
 80034f8:	10220000 	.word	0x10220000
 80034fc:	10210000 	.word	0x10210000
 8003500:	10120000 	.word	0x10120000
 8003504:	10110000 	.word	0x10110000
 8003508:	40021000 	.word	0x40021000
 800350c:	40010000 	.word	0x40010000
 8003510:	40010800 	.word	0x40010800
 8003514:	40010c00 	.word	0x40010c00
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_GPIO_Init+0x304>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	43db      	mvns	r3, r3
 800352c:	4909      	ldr	r1, [pc, #36]	; (8003554 <HAL_GPIO_Init+0x304>)
 800352e:	4013      	ands	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	3301      	adds	r3, #1
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	f47f ae8e 	bne.w	8003264 <HAL_GPIO_Init+0x14>
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	372c      	adds	r7, #44	; 0x2c
 800354e:	46bd      	mov	sp, r7
 8003550:	bc80      	pop	{r7}
 8003552:	4770      	bx	lr
 8003554:	40010400 	.word	0x40010400

08003558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
 8003564:	4613      	mov	r3, r2
 8003566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003568:	787b      	ldrb	r3, [r7, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003574:	e003      	b.n	800357e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003576:	887b      	ldrh	r3, [r7, #2]
 8003578:	041a      	lsls	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e12b      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fbce 	bl	8001d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ec:	f000 fcda 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a81      	ldr	r2, [pc, #516]	; (80037fc <HAL_I2C_Init+0x274>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d807      	bhi.n	800360c <HAL_I2C_Init+0x84>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_I2C_Init+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e006      	b.n	800361a <HAL_I2C_Init+0x92>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a7d      	ldr	r2, [pc, #500]	; (8003804 <HAL_I2C_Init+0x27c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	bf94      	ite	ls
 8003614:	2301      	movls	r3, #1
 8003616:	2300      	movhi	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e7      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a78      	ldr	r2, [pc, #480]	; (8003808 <HAL_I2C_Init+0x280>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_I2C_Init+0x274>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d802      	bhi.n	800365c <HAL_I2C_Init+0xd4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	e009      	b.n	8003670 <HAL_I2C_Init+0xe8>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_I2C_Init+0x284>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	3301      	adds	r3, #1
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	495c      	ldr	r1, [pc, #368]	; (80037fc <HAL_I2C_Init+0x274>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d819      	bhi.n	80036c4 <HAL_I2C_Init+0x13c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e59      	subs	r1, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036a4:	400b      	ands	r3, r1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_I2C_Init+0x138>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e59      	subs	r1, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036be:	e051      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e04f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_I2C_Init+0x168>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e012      	b.n	8003716 <HAL_I2C_Init+0x18e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x196>
 800371a:	2301      	movs	r3, #1
 800371c:	e022      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <HAL_I2C_Init+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e58      	subs	r0, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	440b      	add	r3, r1
 8003734:	fbb0 f3f3 	udiv	r3, r0, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	6809      	ldr	r1, [r1, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6911      	ldr	r1, [r2, #16]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	000186a0 	.word	0x000186a0
 8003800:	001e847f 	.word	0x001e847f
 8003804:	003d08ff 	.word	0x003d08ff
 8003808:	431bde83 	.word	0x431bde83
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e272      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8087 	beq.w	800393e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003830:	4b92      	ldr	r3, [pc, #584]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00c      	beq.n	8003856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383c:	4b8f      	ldr	r3, [pc, #572]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
 8003848:	4b8c      	ldr	r3, [pc, #560]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06c      	beq.n	800393c <HAL_RCC_OscConfig+0x12c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d168      	bne.n	800393c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e24c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x76>
 8003878:	4b80      	ldr	r3, [pc, #512]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e02e      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0xbc>
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a71      	ldr	r2, [pc, #452]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038cc:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fdf2 	bl	80024d4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fdee 	bl	80024d4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e200      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe4>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fdde 	bl	80024d4 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fdda 	bl	80024d4 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1ec      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x10c>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c0      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4939      	ldr	r1, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe fd93 	bl	80024d4 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe fd8f 	bl	80024d4 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4927      	ldr	r1, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fd72 	bl	80024d4 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe fd6e 	bl	80024d4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e180      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03a      	beq.n	8003a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d019      	beq.n	8003a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fd52 	bl	80024d4 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe fd4e 	bl	80024d4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e160      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f000 fafe 	bl	8004054 <RCC_Delay>
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fe fd38 	bl	80024d4 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe fd34 	bl	80024d4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e146      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	42420000 	.word	0x42420000
 8003a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e9      	bne.n	8003a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a6 	beq.w	8003bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b8b      	ldr	r3, [pc, #556]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	61d3      	str	r3, [r2, #28]
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7e      	ldr	r2, [pc, #504]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fcf5 	bl	80024d4 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fe fcf1 	bl	80024d4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e103      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e02d      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x334>
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6213      	str	r3, [r2, #32]
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a66      	ldr	r2, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x356>
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a60      	ldr	r2, [pc, #384]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4b5e      	ldr	r3, [pc, #376]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b58      	ldr	r3, [pc, #352]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a57      	ldr	r2, [pc, #348]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fca5 	bl	80024d4 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fca1 	bl	80024d4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0b1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x37e>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe fc8f 	bl	80024d4 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe fc8b 	bl	80024d4 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e09b      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8087 	beq.w	8003d06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d061      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d146      	bne.n	8003c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe fc5f 	bl	80024d4 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fe fc5b 	bl	80024d4 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e06d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4921      	ldr	r1, [pc, #132]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a19      	ldr	r1, [r3, #32]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	491b      	ldr	r1, [pc, #108]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe fc2f 	bl	80024d4 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fe fc2b 	bl	80024d4 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
 8003c98:	e035      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc18 	bl	80024d4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe fc14 	bl	80024d4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e026      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x498>
 8003cc6:	e01e      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e019      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x500>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d0      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4965      	ldr	r1, [pc, #404]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b63      	ldr	r3, [pc, #396]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b8      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a58      	ldr	r2, [pc, #352]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a52      	ldr	r2, [pc, #328]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494d      	ldr	r1, [pc, #308]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d040      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e073      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4936      	ldr	r1, [pc, #216]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fe fb66 	bl	80024d4 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fe fb62 	bl	80024d4 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e053      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d210      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4922      	ldr	r1, [pc, #136]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4916      	ldr	r1, [pc, #88]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f821 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490a      	ldr	r1, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fe f840 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08006ed0 	.word	0x08006ed0
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000004 	.word	0x20000004

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30>
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x36>
 8003f16:	e027      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1a:	613b      	str	r3, [r7, #16]
      break;
 8003f1c:	e027      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c9b      	lsrs	r3, r3, #18
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0c5b      	lsrs	r3, r3, #17
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e004      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6a:	613b      	str	r3, [r7, #16]
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	693b      	ldr	r3, [r7, #16]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	007a1200 	.word	0x007a1200
 8003f84:	08006ee8 	.word	0x08006ee8
 8003f88:	08006ef8 	.word	0x08006ef8
 8003f8c:	003d0900 	.word	0x003d0900

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b02      	ldr	r3, [pc, #8]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr
 8003fa0:	20000000 	.word	0x20000000

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff2 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08006ee0 	.word	0x08006ee0

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fd0:	f7ff ffde 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4903      	ldr	r1, [pc, #12]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	08006ee0 	.word	0x08006ee0

08003ff4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	220f      	movs	r2, #15
 8004002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_GetClockConfig+0x58>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_RCC_GetClockConfig+0x58>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_GetClockConfig+0x58>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_RCC_GetClockConfig+0x58>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <HAL_RCC_GetClockConfig+0x5c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0207 	and.w	r2, r3, #7
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	bc80      	pop	{r7}
 800404a:	4770      	bx	lr
 800404c:	40021000 	.word	0x40021000
 8004050:	40022000 	.word	0x40022000

08004054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <RCC_Delay+0x34>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0a      	ldr	r2, [pc, #40]	; (800408c <RCC_Delay+0x38>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	0a5b      	lsrs	r3, r3, #9
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004070:	bf00      	nop
  }
  while (Delay --);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1e5a      	subs	r2, r3, #1
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f9      	bne.n	8004070 <RCC_Delay+0x1c>
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	20000000 	.word	0x20000000
 800408c:	10624dd3 	.word	0x10624dd3

08004090 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0301 	and.w	r3, r3, #1
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d07d      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10d      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a4b      	ldr	r2, [pc, #300]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d8:	4b46      	ldr	r3, [pc, #280]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d118      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e4:	4b43      	ldr	r3, [pc, #268]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f0:	f7fe f9f0 	bl	80024d4 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	e008      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f8:	f7fe f9ec 	bl	80024d4 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e06d      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410a:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f0      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02e      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	429a      	cmp	r2, r3
 8004132:	d027      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004134:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800413c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004144:	4b2c      	ldr	r3, [pc, #176]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800414a:	4a29      	ldr	r2, [pc, #164]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d014      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fe f9bb 	bl	80024d4 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fe f9b7 	bl	80024d4 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e036      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4917      	ldr	r1, [pc, #92]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	4313      	orrs	r3, r2
 8004194:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b14      	ldr	r3, [pc, #80]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	490b      	ldr	r1, [pc, #44]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
 80041f8:	42420440 	.word	0x42420440

080041fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e041      	b.n	8004292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7fd fe00 	bl	8001e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4619      	mov	r1, r3
 800423a:	4610      	mov	r0, r2
 800423c:	f000 fc8c 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d001      	beq.n	80042b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e03a      	b.n	800432a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_TIM_Base_Start_IT+0x98>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x58>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042de:	d009      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x58>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <HAL_TIM_Base_Start_IT+0x9c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_TIM_Base_Start_IT+0x58>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_TIM_Base_Start_IT+0xa0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d111      	bne.n	8004318 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b06      	cmp	r3, #6
 8004304:	d010      	beq.n	8004328 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004316:	e007      	b.n	8004328 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800

08004340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd fd42 	bl	8001df0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 fbea 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d109      	bne.n	8004404 <HAL_TIM_PWM_Start+0x24>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	bf14      	ite	ne
 80043fc:	2301      	movne	r3, #1
 80043fe:	2300      	moveq	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	e022      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d109      	bne.n	800441e <HAL_TIM_PWM_Start+0x3e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	bf14      	ite	ne
 8004416:	2301      	movne	r3, #1
 8004418:	2300      	moveq	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	e015      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d109      	bne.n	8004438 <HAL_TIM_PWM_Start+0x58>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <HAL_TIM_PWM_Start+0x6a>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e05e      	b.n	8004510 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x82>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004460:	e013      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0x92>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004470:	e00b      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d104      	bne.n	8004482 <HAL_TIM_PWM_Start+0xa2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	e003      	b.n	800448a <HAL_TIM_PWM_Start+0xaa>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fde0 	bl	8005058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1e      	ldr	r2, [pc, #120]	; (8004518 <HAL_TIM_PWM_Start+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d107      	bne.n	80044b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a18      	ldr	r2, [pc, #96]	; (8004518 <HAL_TIM_PWM_Start+0x138>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c4:	d009      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a14      	ldr	r2, [pc, #80]	; (800451c <HAL_TIM_PWM_Start+0x13c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_TIM_PWM_Start+0xfa>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_TIM_PWM_Start+0x140>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d111      	bne.n	80044fe <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d010      	beq.n	800450e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044fc:	e007      	b.n	800450e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f042 0201 	orr.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800

08004524 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fd8e 	bl	8005058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <HAL_TIM_PWM_Stop+0xc4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d117      	bne.n	8004576 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6a1a      	ldr	r2, [r3, #32]
 800454c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_TIM_PWM_Stop+0x52>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	f240 4344 	movw	r3, #1092	; 0x444
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <HAL_TIM_PWM_Stop+0x52>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <HAL_TIM_PWM_Stop+0x82>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a1a      	ldr	r2, [r3, #32]
 800458c:	f240 4344 	movw	r3, #1092	; 0x444
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d107      	bne.n	80045a6 <HAL_TIM_PWM_Stop+0x82>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_PWM_Stop+0x92>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b4:	e013      	b.n	80045de <HAL_TIM_PWM_Stop+0xba>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_PWM_Stop+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c4:	e00b      	b.n	80045de <HAL_TIM_PWM_Stop+0xba>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d104      	bne.n	80045d6 <HAL_TIM_PWM_Stop+0xb2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	e003      	b.n	80045de <HAL_TIM_PWM_Stop+0xba>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40012c00 	.word	0x40012c00

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0202 	mvn.w	r2, #2
 8004618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa76 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa69 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa78 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d122      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d11b      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa4c 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa3f 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa4e 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0208 	mvn.w	r2, #8
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2204      	movs	r2, #4
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa22 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa15 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa24 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9f8 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9eb 	bl	8004b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9fa 	bl	8004b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0201 	mvn.w	r2, #1
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fc ff20 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d10e      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d107      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fce9 	bl	800516e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d107      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9be 	bl	8004b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0220 	mvn.w	r2, #32
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fcb4 	bl	800515c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004816:	2302      	movs	r3, #2
 8004818:	e0ae      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f200 809f 	bhi.w	8004968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004865 	.word	0x08004865
 8004834:	08004969 	.word	0x08004969
 8004838:	08004969 	.word	0x08004969
 800483c:	08004969 	.word	0x08004969
 8004840:	080048a5 	.word	0x080048a5
 8004844:	08004969 	.word	0x08004969
 8004848:	08004969 	.word	0x08004969
 800484c:	08004969 	.word	0x08004969
 8004850:	080048e7 	.word	0x080048e7
 8004854:	08004969 	.word	0x08004969
 8004858:	08004969 	.word	0x08004969
 800485c:	08004969 	.word	0x08004969
 8004860:	08004927 	.word	0x08004927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f9d6 	bl	8004c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e064      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fa1c 	bl	8004ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e043      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fa65 	bl	8004dbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e023      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 faaf 	bl	8004e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e002      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e0b4      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x186>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d03e      	beq.n	8004a54 <HAL_TIM_ConfigClockSource+0xd4>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	f200 8087 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	f000 8086 	beq.w	8004af2 <HAL_TIM_ConfigClockSource+0x172>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d87f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d01a      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xa6>
 80049f0:	2b70      	cmp	r3, #112	; 0x70
 80049f2:	d87b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d050      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x11a>
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d877      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d03c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xfa>
 8004a00:	2b50      	cmp	r3, #80	; 0x50
 8004a02:	d873      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d058      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x13a>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d86f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d064      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a10:	2b30      	cmp	r3, #48	; 0x30
 8004a12:	d86b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d060      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d867      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d05a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	e062      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a36:	f000 faf0 	bl	800501a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	609a      	str	r2, [r3, #8]
      break;
 8004a52:	e04f      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a64:	f000 fad9 	bl	800501a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e03c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 fa50 	bl	8004f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2150      	movs	r1, #80	; 0x50
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 faa7 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004a98:	e02c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f000 fa6e 	bl	8004f88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2160      	movs	r1, #96	; 0x60
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fa97 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f000 fa30 	bl	8004f2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fa87 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 fa7e 	bl	8004fe6 <TIM_ITRx_SetConfig>
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
	...

08004b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <TIM_Base_SetConfig+0xb8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00b      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d007      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <TIM_Base_SetConfig+0xbc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x30>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a25      	ldr	r2, [pc, #148]	; (8004c18 <TIM_Base_SetConfig+0xc0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <TIM_Base_SetConfig+0xb8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00b      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba8:	d007      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <TIM_Base_SetConfig+0xbc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_Base_SetConfig+0x62>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <TIM_Base_SetConfig+0xc0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d108      	bne.n	8004bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a07      	ldr	r2, [pc, #28]	; (8004c10 <TIM_Base_SetConfig+0xb8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d103      	bne.n	8004c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	615a      	str	r2, [r3, #20]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	40012c00 	.word	0x40012c00
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800

08004c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 0201 	bic.w	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 0302 	bic.w	r3, r3, #2
 8004c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <TIM_OC1_SetConfig+0xc8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d10c      	bne.n	8004c92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f023 0308 	bic.w	r3, r3, #8
 8004c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f023 0304 	bic.w	r3, r3, #4
 8004c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <TIM_OC1_SetConfig+0xc8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d111      	bne.n	8004cbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	621a      	str	r2, [r3, #32]
}
 8004cd8:	bf00      	nop
 8004cda:	371c      	adds	r7, #28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00

08004ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 0210 	bic.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f023 0320 	bic.w	r3, r3, #32
 8004d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1d      	ldr	r2, [pc, #116]	; (8004db8 <TIM_OC2_SetConfig+0xd0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10d      	bne.n	8004d64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a14      	ldr	r2, [pc, #80]	; (8004db8 <TIM_OC2_SetConfig+0xd0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d113      	bne.n	8004d94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00

08004dbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0303 	bic.w	r3, r3, #3
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <TIM_OC3_SetConfig+0xd0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d10d      	bne.n	8004e36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <TIM_OC3_SetConfig+0xd0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d113      	bne.n	8004e66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bc80      	pop	{r7}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00

08004e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	031b      	lsls	r3, r3, #12
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0f      	ldr	r2, [pc, #60]	; (8004f28 <TIM_OC4_SetConfig+0x98>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d109      	bne.n	8004f04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	40012c00 	.word	0x40012c00

08004f2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	f023 0201 	bic.w	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f023 030a 	bic.w	r3, r3, #10
 8004f68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	621a      	str	r2, [r3, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	371c      	adds	r7, #28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0210 	bic.w	r2, r3, #16
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	031b      	lsls	r3, r3, #12
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	f043 0307 	orr.w	r3, r3, #7
 8005008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr

0800501a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800501a:	b480      	push	{r7}
 800501c:	b087      	sub	sp, #28
 800501e:	af00      	add	r7, sp, #0
 8005020:	60f8      	str	r0, [r7, #12]
 8005022:	60b9      	str	r1, [r7, #8]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005034:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	021a      	lsls	r2, r3, #8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	431a      	orrs	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	609a      	str	r2, [r3, #8]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e046      	b.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d009      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a12      	ldr	r2, [pc, #72]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a10      	ldr	r2, [pc, #64]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10c      	bne.n	8005134 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	4313      	orrs	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40012c00 	.word	0x40012c00
 8005154:	40000400 	.word	0x40000400
 8005158:	40000800 	.word	0x40000800

0800515c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800518e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005192:	2b84      	cmp	r3, #132	; 0x84
 8005194:	d005      	beq.n	80051a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	3303      	adds	r3, #3
 80051a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr

080051ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b4:	f3ef 8305 	mrs	r3, IPSR
 80051b8:	607b      	str	r3, [r7, #4]
  return(result);
 80051ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051d4:	f000 fd92 	bl	8005cfc <vTaskStartScheduler>
  
  return osOK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	bd80      	pop	{r7, pc}

080051de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e0:	b089      	sub	sp, #36	; 0x24
 80051e2:	af04      	add	r7, sp, #16
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <osThreadCreate+0x54>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d01c      	beq.n	8005232 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685c      	ldr	r4, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691e      	ldr	r6, [r3, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800520a:	4618      	mov	r0, r3
 800520c:	f7ff ffb8 	bl	8005180 <makeFreeRtosPriority>
 8005210:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800521a:	9202      	str	r2, [sp, #8]
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	9100      	str	r1, [sp, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	4632      	mov	r2, r6
 8005224:	4629      	mov	r1, r5
 8005226:	4620      	mov	r0, r4
 8005228:	f000 f979 	bl	800551e <xTaskCreateStatic>
 800522c:	4603      	mov	r3, r0
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e01c      	b.n	800526c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685c      	ldr	r4, [r3, #4]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800523e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff9a 	bl	8005180 <makeFreeRtosPriority>
 800524c:	4602      	mov	r2, r0
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	9200      	str	r2, [sp, #0]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	4632      	mov	r2, r6
 800525a:	4629      	mov	r1, r5
 800525c:	4620      	mov	r0, r4
 800525e:	f000 f9ba 	bl	80055d6 <xTaskCreate>
 8005262:	4603      	mov	r3, r0
 8005264:	2b01      	cmp	r3, #1
 8005266:	d001      	beq.n	800526c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	e000      	b.n	800526e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800526c:	68fb      	ldr	r3, [r7, #12]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005276 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <osDelay+0x16>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	e000      	b.n	800528e <osDelay+0x18>
 800528c:	2301      	movs	r3, #1
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fb64 	bl	800595c <vTaskDelay>
  
  return osOK;
 8005294:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800529e:	b590      	push	{r4, r7, lr}
 80052a0:	b089      	sub	sp, #36	; 0x24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  ticks = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d103      	bne.n	80052c2 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e009      	b.n	80052d6 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <osSignalWait+0x38>
      ticks = 1;
 80052d2:	2301      	movs	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80052d6:	f7ff ff6a 	bl	80051ae <inHandlerMode>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80052e0:	2382      	movs	r3, #130	; 0x82
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	e01b      	b.n	800531e <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	f107 0310 	add.w	r3, r7, #16
 80052ec:	1d1a      	adds	r2, r3, #4
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2000      	movs	r0, #0
 80052f2:	f001 f823 	bl	800633c <xTaskNotifyWait>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d008      	beq.n	800530e <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <osSignalWait+0x6a>
 8005302:	2300      	movs	r3, #0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	e00a      	b.n	800531e <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e007      	b.n	800531e <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	da02      	bge.n	800531a <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8005314:	2386      	movs	r3, #134	; 0x86
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	e001      	b.n	800531e <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800531a:	2308      	movs	r3, #8
 800531c:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	461c      	mov	r4, r3
 8005322:	f107 0310 	add.w	r3, r7, #16
 8005326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800532a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	3724      	adds	r7, #36	; 0x24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd90      	pop	{r4, r7, pc}

08005336 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fb40 	bl	80059c4 <vTaskSuspend>
  
  return osOK;
 8005344:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8005358:	f7ff ff29 	bl	80051ae <inHandlerMode>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00e      	beq.n	8005380 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fc58 	bl	8005c18 <xTaskResumeFromISR>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10b      	bne.n	8005386 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <osThreadResume+0x40>)
 8005370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	e002      	b.n	8005386 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fbeb 	bl	8005b5c <vTaskResume>
  }
  return osOK;
 8005386:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
#if INCLUDE_vTaskDelayUntil
  TickType_t ticks = (millisec / portTICK_PERIOD_MS);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	60fb      	str	r3, [r7, #12]
  vTaskDelayUntil((TickType_t *) PreviousWakeTime, ticks ? ticks : 1);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <osDelayUntil+0x18>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	e000      	b.n	80053ae <osDelayUntil+0x1a>
 80053ac:	2301      	movs	r3, #1
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa55 	bl	8005860 <vTaskDelayUntil>
  
  return osOK;
 80053b6:	2300      	movs	r3, #0
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
#endif
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f103 0208 	add.w	r2, r3, #8
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f04f 32ff 	mov.w	r2, #4294967295
 80053d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f103 0208 	add.w	r2, r3, #8
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f103 0208 	add.w	r2, r3, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr

0800545c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e00c      	b.n	8005496 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3308      	adds	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e002      	b.n	800548a <vListInsert+0x2e>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d2f6      	bcs.n	8005484 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6892      	ldr	r2, [r2, #8]
 80054e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6852      	ldr	r2, [r2, #4]
 80054ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d103      	bne.n	8005500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	1e5a      	subs	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3714      	adds	r7, #20
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08e      	sub	sp, #56	; 0x38
 8005522:	af04      	add	r7, sp, #16
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800552c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <xTaskCreateStatic+0x46>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61fb      	str	r3, [r7, #28]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005564:	23a0      	movs	r3, #160	; 0xa0
 8005566:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2ba0      	cmp	r3, #160	; 0xa0
 800556c:	d00a      	beq.n	8005584 <xTaskCreateStatic+0x66>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	61bb      	str	r3, [r7, #24]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01e      	beq.n	80055c8 <xTaskCreateStatic+0xaa>
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005598:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	2202      	movs	r2, #2
 800559e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055a2:	2300      	movs	r3, #0
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f850 	bl	8005660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c2:	f000 f8e3 	bl	800578c <prvAddNewTaskToReadyList>
 80055c6:	e001      	b.n	80055cc <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055cc:	697b      	ldr	r3, [r7, #20]
	}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	; 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08c      	sub	sp, #48	; 0x30
 80055da:	af04      	add	r7, sp, #16
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f95e 	bl	80068ac <pvPortMalloc>
 80055f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80055f8:	20a0      	movs	r0, #160	; 0xa0
 80055fa:	f001 f957 	bl	80068ac <pvPortMalloc>
 80055fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
 800560c:	e005      	b.n	800561a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f001 fa10 	bl	8006a34 <vPortFree>
 8005614:	e001      	b.n	800561a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d017      	beq.n	8005650 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005628:	88fa      	ldrh	r2, [r7, #6]
 800562a:	2300      	movs	r3, #0
 800562c:	9303      	str	r3, [sp, #12]
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	9302      	str	r3, [sp, #8]
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f80e 	bl	8005660 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005644:	69f8      	ldr	r0, [r7, #28]
 8005646:	f000 f8a1 	bl	800578c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800564a:	2301      	movs	r3, #1
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	e002      	b.n	8005656 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295
 8005654:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005656:	69bb      	ldr	r3, [r7, #24]
	}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005678:	3b01      	subs	r3, #1
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f023 0307 	bic.w	r3, r3, #7
 8005686:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	617b      	str	r3, [r7, #20]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e012      	b.n	80056d4 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	7819      	ldrb	r1, [r3, #0]
 80056b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	3334      	adds	r3, #52	; 0x34
 80056be:	460a      	mov	r2, r1
 80056c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	3301      	adds	r3, #1
 80056d2:	61fb      	str	r3, [r7, #28]
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d9e9      	bls.n	80056ae <prvInitialiseNewTask+0x4e>
 80056da:	e000      	b.n	80056de <prvInitialiseNewTask+0x7e>
		{
			break;
 80056dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2b06      	cmp	r3, #6
 80056ea:	d901      	bls.n	80056f0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056ec:	2306      	movs	r3, #6
 80056ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	3304      	adds	r3, #4
 8005706:	4618      	mov	r0, r3
 8005708:	f7ff fe79 	bl	80053fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	3318      	adds	r3, #24
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fe74 	bl	80053fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800571a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	f1c3 0207 	rsb	r2, r3, #7
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800572a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	2200      	movs	r2, #0
 8005730:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	2200      	movs	r2, #0
 8005738:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	334c      	adds	r3, #76	; 0x4c
 8005740:	224c      	movs	r2, #76	; 0x4c
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fa89 	bl	8006c5c <memset>
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <prvInitialiseNewTask+0x120>)
 800574e:	651a      	str	r2, [r3, #80]	; 0x50
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	4a0c      	ldr	r2, [pc, #48]	; (8005784 <prvInitialiseNewTask+0x124>)
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <prvInitialiseNewTask+0x128>)
 800575a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	69b8      	ldr	r0, [r7, #24]
 8005762:	f000 feb1 	bl	80064c8 <pxPortInitialiseStack>
 8005766:	4602      	mov	r2, r0
 8005768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800576c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005778:	bf00      	nop
 800577a:	3720      	adds	r7, #32
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200018a8 	.word	0x200018a8
 8005784:	20001910 	.word	0x20001910
 8005788:	20001978 	.word	0x20001978

0800578c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005794:	f000 ff8a 	bl	80066ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005798:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <prvAddNewTaskToReadyList+0xb8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	4a29      	ldr	r2, [pc, #164]	; (8005844 <prvAddNewTaskToReadyList+0xb8>)
 80057a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057a2:	4b29      	ldr	r3, [pc, #164]	; (8005848 <prvAddNewTaskToReadyList+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <prvAddNewTaskToReadyList+0xbc>)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057b0:	4b24      	ldr	r3, [pc, #144]	; (8005844 <prvAddNewTaskToReadyList+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d110      	bne.n	80057da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80057b8:	f000 fcfa 	bl	80061b0 <prvInitialiseTaskLists>
 80057bc:	e00d      	b.n	80057da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80057be:	4b23      	ldr	r3, [pc, #140]	; (800584c <prvAddNewTaskToReadyList+0xc0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057c6:	4b20      	ldr	r3, [pc, #128]	; (8005848 <prvAddNewTaskToReadyList+0xbc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d802      	bhi.n	80057da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057d4:	4a1c      	ldr	r2, [pc, #112]	; (8005848 <prvAddNewTaskToReadyList+0xbc>)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <prvAddNewTaskToReadyList+0xc4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <prvAddNewTaskToReadyList+0xc4>)
 80057e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	4b19      	ldr	r3, [pc, #100]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <prvAddNewTaskToReadyList+0xc8>)
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <prvAddNewTaskToReadyList+0xcc>)
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	4619      	mov	r1, r3
 800580c:	4610      	mov	r0, r2
 800580e:	f7ff fe02 	bl	8005416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005812:	f000 ff7b 	bl	800670c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <prvAddNewTaskToReadyList+0xc0>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800581e:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <prvAddNewTaskToReadyList+0xbc>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005828:	429a      	cmp	r2, r3
 800582a:	d207      	bcs.n	800583c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <prvAddNewTaskToReadyList+0xd0>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000c5c 	.word	0x20000c5c
 8005848:	20000b5c 	.word	0x20000b5c
 800584c:	20000c68 	.word	0x20000c68
 8005850:	20000c78 	.word	0x20000c78
 8005854:	20000c64 	.word	0x20000c64
 8005858:	20000b60 	.word	0x20000b60
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	; 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <vTaskDelayUntil+0x2a>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	617b      	str	r3, [r7, #20]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <vTaskDelayUntil+0x46>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	613b      	str	r3, [r7, #16]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80058a6:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <vTaskDelayUntil+0xf0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <vTaskDelayUntil+0x64>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	60fb      	str	r3, [r7, #12]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80058c4:	f000 fa84 	bl	8005dd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <vTaskDelayUntil+0xf4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a3a      	ldr	r2, [r7, #32]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d20b      	bcs.n	80058fa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d211      	bcs.n	8005910 <vTaskDelayUntil+0xb0>
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d90d      	bls.n	8005910 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80058f4:	2301      	movs	r3, #1
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24
 80058f8:	e00a      	b.n	8005910 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	429a      	cmp	r2, r3
 8005902:	d303      	bcc.n	800590c <vTaskDelayUntil+0xac>
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	429a      	cmp	r2, r3
 800590a:	d901      	bls.n	8005910 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fd69 	bl	80063fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800592a:	f000 fa5f 	bl	8005dec <xTaskResumeAll>
 800592e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d107      	bne.n	8005946 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005936:	4b08      	ldr	r3, [pc, #32]	; (8005958 <vTaskDelayUntil+0xf8>)
 8005938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005946:	bf00      	nop
 8005948:	3728      	adds	r7, #40	; 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000c84 	.word	0x20000c84
 8005954:	20000c60 	.word	0x20000c60
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d017      	beq.n	800599e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <vTaskDelay+0x60>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <vTaskDelay+0x30>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	60bb      	str	r3, [r7, #8]
}
 8005988:	bf00      	nop
 800598a:	e7fe      	b.n	800598a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800598c:	f000 fa20 	bl	8005dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005990:	2100      	movs	r1, #0
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fd32 	bl	80063fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005998:	f000 fa28 	bl	8005dec <xTaskResumeAll>
 800599c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d107      	bne.n	80059b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <vTaskDelay+0x64>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000c84 	.word	0x20000c84
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80059cc:	f000 fe6e 	bl	80066ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <vTaskSuspend+0x18>
 80059d6:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <vTaskSuspend+0x104>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	e000      	b.n	80059de <vTaskSuspend+0x1a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fd71 	bl	80054cc <uxListRemove>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d115      	bne.n	8005a1c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4935      	ldr	r1, [pc, #212]	; (8005acc <vTaskSuspend+0x108>)
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	440b      	add	r3, r1
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <vTaskSuspend+0x58>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43da      	mvns	r2, r3
 8005a12:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <vTaskSuspend+0x10c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4013      	ands	r3, r2
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <vTaskSuspend+0x10c>)
 8005a1a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fd4f 	bl	80054cc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4827      	ldr	r0, [pc, #156]	; (8005ad4 <vTaskSuspend+0x110>)
 8005a36:	f7ff fcee 	bl	8005416 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d103      	bne.n	8005a4e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005a4e:	f000 fe5d 	bl	800670c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <vTaskSuspend+0x114>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005a5a:	f000 fe27 	bl	80066ac <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005a5e:	f000 fc49 	bl	80062f4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005a62:	f000 fe53 	bl	800670c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <vTaskSuspend+0x104>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d127      	bne.n	8005ac0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <vTaskSuspend+0x114>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005a78:	4b18      	ldr	r3, [pc, #96]	; (8005adc <vTaskSuspend+0x118>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <vTaskSuspend+0xd2>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60bb      	str	r3, [r7, #8]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005a96:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <vTaskSuspend+0x11c>)
 8005a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aa6:	e00b      	b.n	8005ac0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <vTaskSuspend+0x110>)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <vTaskSuspend+0x120>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d103      	bne.n	8005abc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005ab4:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <vTaskSuspend+0x104>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
	}
 8005aba:	e001      	b.n	8005ac0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005abc:	f000 fafe 	bl	80060bc <vTaskSwitchContext>
	}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000b5c 	.word	0x20000b5c
 8005acc:	20000b60 	.word	0x20000b60
 8005ad0:	20000c64 	.word	0x20000c64
 8005ad4:	20000c48 	.word	0x20000c48
 8005ad8:	20000c68 	.word	0x20000c68
 8005adc:	20000c84 	.word	0x20000c84
 8005ae0:	e000ed04 	.word	0xe000ed04
 8005ae4:	20000c5c 	.word	0x20000c5c

08005ae8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60fb      	str	r3, [r7, #12]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <prvTaskIsTaskSuspended+0x6c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <prvTaskIsTaskSuspended+0x3a>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <prvTaskIsTaskSuspended+0x3c>
 8005b22:	2300      	movs	r3, #0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <prvTaskIsTaskSuspended+0x70>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00a      	beq.n	8005b48 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <prvTaskIsTaskSuspended+0x56>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <prvTaskIsTaskSuspended+0x58>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b48:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	20000c48 	.word	0x20000c48
 8005b58:	20000c1c 	.word	0x20000c1c

08005b5c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <vTaskResume+0x28>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	60bb      	str	r3, [r7, #8]
}
 8005b80:	bf00      	nop
 8005b82:	e7fe      	b.n	8005b82 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d039      	beq.n	8005bfe <vTaskResume+0xa2>
 8005b8a:	4b1f      	ldr	r3, [pc, #124]	; (8005c08 <vTaskResume+0xac>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d034      	beq.n	8005bfe <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005b94:	f000 fd8a 	bl	80066ac <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f7ff ffa5 	bl	8005ae8 <prvTaskIsTaskSuspended>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d02a      	beq.n	8005bfa <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fc8f 	bl	80054cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <vTaskResume+0xb0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	4a13      	ldr	r2, [pc, #76]	; (8005c0c <vTaskResume+0xb0>)
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4a10      	ldr	r2, [pc, #64]	; (8005c10 <vTaskResume+0xb4>)
 8005bce:	441a      	add	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	f7ff fc1d 	bl	8005416 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <vTaskResume+0xac>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d307      	bcc.n	8005bfa <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <vTaskResume+0xb8>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005bfa:	f000 fd87 	bl	800670c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000b5c 	.word	0x20000b5c
 8005c0c:	20000c64 	.word	0x20000c64
 8005c10:	20000b60 	.word	0x20000b60
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c44:	f000 fdf4 	bl	8006830 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c48:	f3ef 8211 	mrs	r2, BASEPRI
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	617a      	str	r2, [r7, #20]
 8005c5e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c60:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c62:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005c64:	6a38      	ldr	r0, [r7, #32]
 8005c66:	f7ff ff3f 	bl	8005ae8 <prvTaskIsTaskSuspended>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d02f      	beq.n	8005cd0 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <xTaskResumeFromISR+0xd0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d125      	bne.n	8005cc4 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <xTaskResumeFromISR+0xd4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d301      	bcc.n	8005c8a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8005c86:	2301      	movs	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fc1c 	bl	80054cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	2201      	movs	r2, #1
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	4b14      	ldr	r3, [pc, #80]	; (8005cf0 <xTaskResumeFromISR+0xd8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <xTaskResumeFromISR+0xd8>)
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <xTaskResumeFromISR+0xdc>)
 8005cb4:	441a      	add	r2, r3
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7ff fbaa 	bl	8005416 <vListInsertEnd>
 8005cc2:	e005      	b.n	8005cd0 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	4619      	mov	r1, r3
 8005cca:	480b      	ldr	r0, [pc, #44]	; (8005cf8 <xTaskResumeFromISR+0xe0>)
 8005ccc:	f7ff fba3 	bl	8005416 <vListInsertEnd>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cda:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000c84 	.word	0x20000c84
 8005cec:	20000b5c 	.word	0x20000b5c
 8005cf0:	20000c64 	.word	0x20000c64
 8005cf4:	20000b60 	.word	0x20000b60
 8005cf8:	20000c1c 	.word	0x20000c1c

08005cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d0a:	463a      	mov	r2, r7
 8005d0c:	1d39      	adds	r1, r7, #4
 8005d0e:	f107 0308 	add.w	r3, r7, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fb f8f0 	bl	8000ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	9202      	str	r2, [sp, #8]
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	2300      	movs	r3, #0
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2300      	movs	r3, #0
 8005d28:	460a      	mov	r2, r1
 8005d2a:	4921      	ldr	r1, [pc, #132]	; (8005db0 <vTaskStartScheduler+0xb4>)
 8005d2c:	4821      	ldr	r0, [pc, #132]	; (8005db4 <vTaskStartScheduler+0xb8>)
 8005d2e:	f7ff fbf6 	bl	800551e <xTaskCreateStatic>
 8005d32:	4603      	mov	r3, r0
 8005d34:	4a20      	ldr	r2, [pc, #128]	; (8005db8 <vTaskStartScheduler+0xbc>)
 8005d36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d38:	4b1f      	ldr	r3, [pc, #124]	; (8005db8 <vTaskStartScheduler+0xbc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d40:	2301      	movs	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	e001      	b.n	8005d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d11b      	bne.n	8005d88 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	613b      	str	r3, [r7, #16]
}
 8005d62:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <vTaskStartScheduler+0xc0>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	334c      	adds	r3, #76	; 0x4c
 8005d6a:	4a15      	ldr	r2, [pc, #84]	; (8005dc0 <vTaskStartScheduler+0xc4>)
 8005d6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <vTaskStartScheduler+0xc8>)
 8005d70:	f04f 32ff 	mov.w	r2, #4294967295
 8005d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <vTaskStartScheduler+0xcc>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <vTaskStartScheduler+0xd0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d82:	f000 fc21 	bl	80065c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d86:	e00e      	b.n	8005da6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d10a      	bne.n	8005da6 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	e7fe      	b.n	8005da4 <vTaskStartScheduler+0xa8>
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	08006ec8 	.word	0x08006ec8
 8005db4:	08006181 	.word	0x08006181
 8005db8:	20000c80 	.word	0x20000c80
 8005dbc:	20000b5c 	.word	0x20000b5c
 8005dc0:	2000005c 	.word	0x2000005c
 8005dc4:	20000c7c 	.word	0x20000c7c
 8005dc8:	20000c68 	.word	0x20000c68
 8005dcc:	20000c60 	.word	0x20000c60

08005dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <vTaskSuspendAll+0x18>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a03      	ldr	r2, [pc, #12]	; (8005de8 <vTaskSuspendAll+0x18>)
 8005ddc:	6013      	str	r3, [r2, #0]
}
 8005dde:	bf00      	nop
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000c84 	.word	0x20000c84

08005dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dfa:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <xTaskResumeAll+0x114>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e18:	f000 fc48 	bl	80066ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e1c:	4b38      	ldr	r3, [pc, #224]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <xTaskResumeAll+0x114>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d161      	bne.n	8005ef2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e2e:	4b35      	ldr	r3, [pc, #212]	; (8005f04 <xTaskResumeAll+0x118>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d05d      	beq.n	8005ef2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e36:	e02e      	b.n	8005e96 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e38:	4b33      	ldr	r3, [pc, #204]	; (8005f08 <xTaskResumeAll+0x11c>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3318      	adds	r3, #24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fb41 	bl	80054cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fb3c 	bl	80054cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	2201      	movs	r2, #1
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	4b2b      	ldr	r3, [pc, #172]	; (8005f0c <xTaskResumeAll+0x120>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <xTaskResumeAll+0x120>)
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4a27      	ldr	r2, [pc, #156]	; (8005f10 <xTaskResumeAll+0x124>)
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	f7ff faca 	bl	8005416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e86:	4b23      	ldr	r3, [pc, #140]	; (8005f14 <xTaskResumeAll+0x128>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d302      	bcc.n	8005e96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <xTaskResumeAll+0x11c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1cc      	bne.n	8005e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ea4:	f000 fa26 	bl	80062f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ea8:	4b1c      	ldr	r3, [pc, #112]	; (8005f1c <xTaskResumeAll+0x130>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005eb4:	f000 f844 	bl	8005f40 <xTaskIncrementTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1f1      	bne.n	8005eb4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ed0:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <xTaskResumeAll+0x130>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ed6:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <xTaskResumeAll+0x12c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d009      	beq.n	8005ef2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ee2:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <xTaskResumeAll+0x134>)
 8005ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ef2:	f000 fc0b 	bl	800670c <vPortExitCritical>

	return xAlreadyYielded;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000c84 	.word	0x20000c84
 8005f04:	20000c5c 	.word	0x20000c5c
 8005f08:	20000c1c 	.word	0x20000c1c
 8005f0c:	20000c64 	.word	0x20000c64
 8005f10:	20000b60 	.word	0x20000b60
 8005f14:	20000b5c 	.word	0x20000b5c
 8005f18:	20000c70 	.word	0x20000c70
 8005f1c:	20000c6c 	.word	0x20000c6c
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f2a:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <xTaskGetTickCount+0x18>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f30:	687b      	ldr	r3, [r7, #4]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr
 8005f3c:	20000c60 	.word	0x20000c60

08005f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f4a:	4b51      	ldr	r3, [pc, #324]	; (8006090 <xTaskIncrementTick+0x150>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 808d 	bne.w	800606e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f54:	4b4f      	ldr	r3, [pc, #316]	; (8006094 <xTaskIncrementTick+0x154>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f5c:	4a4d      	ldr	r2, [pc, #308]	; (8006094 <xTaskIncrementTick+0x154>)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d120      	bne.n	8005faa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f68:	4b4b      	ldr	r3, [pc, #300]	; (8006098 <xTaskIncrementTick+0x158>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	603b      	str	r3, [r7, #0]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xTaskIncrementTick+0x46>
 8005f88:	4b43      	ldr	r3, [pc, #268]	; (8006098 <xTaskIncrementTick+0x158>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	4b43      	ldr	r3, [pc, #268]	; (800609c <xTaskIncrementTick+0x15c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a41      	ldr	r2, [pc, #260]	; (8006098 <xTaskIncrementTick+0x158>)
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	4a41      	ldr	r2, [pc, #260]	; (800609c <xTaskIncrementTick+0x15c>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <xTaskIncrementTick+0x160>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a3f      	ldr	r2, [pc, #252]	; (80060a0 <xTaskIncrementTick+0x160>)
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	f000 f9a5 	bl	80062f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005faa:	4b3e      	ldr	r3, [pc, #248]	; (80060a4 <xTaskIncrementTick+0x164>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d34d      	bcc.n	8006050 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb4:	4b38      	ldr	r3, [pc, #224]	; (8006098 <xTaskIncrementTick+0x158>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <xTaskIncrementTick+0x82>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <xTaskIncrementTick+0x84>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fc8:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <xTaskIncrementTick+0x164>)
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	601a      	str	r2, [r3, #0]
					break;
 8005fd0:	e03e      	b.n	8006050 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fd2:	4b31      	ldr	r3, [pc, #196]	; (8006098 <xTaskIncrementTick+0x158>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d203      	bcs.n	8005ff2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <xTaskIncrementTick+0x164>)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6013      	str	r3, [r2, #0]
						break;
 8005ff0:	e02e      	b.n	8006050 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fa68 	bl	80054cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	2b00      	cmp	r3, #0
 8006002:	d004      	beq.n	800600e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	3318      	adds	r3, #24
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff fa5f 	bl	80054cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	2201      	movs	r2, #1
 8006014:	409a      	lsls	r2, r3
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <xTaskIncrementTick+0x168>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4313      	orrs	r3, r2
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <xTaskIncrementTick+0x168>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <xTaskIncrementTick+0x16c>)
 800602e:	441a      	add	r2, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7ff f9ed 	bl	8005416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <xTaskIncrementTick+0x170>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006046:	429a      	cmp	r2, r3
 8006048:	d3b4      	bcc.n	8005fb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604e:	e7b1      	b.n	8005fb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006050:	4b17      	ldr	r3, [pc, #92]	; (80060b0 <xTaskIncrementTick+0x170>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4915      	ldr	r1, [pc, #84]	; (80060ac <xTaskIncrementTick+0x16c>)
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	440b      	add	r3, r1
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d907      	bls.n	8006078 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e004      	b.n	8006078 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <xTaskIncrementTick+0x174>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3301      	adds	r3, #1
 8006074:	4a0f      	ldr	r2, [pc, #60]	; (80060b4 <xTaskIncrementTick+0x174>)
 8006076:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <xTaskIncrementTick+0x178>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006080:	2301      	movs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006084:	697b      	ldr	r3, [r7, #20]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	20000c84 	.word	0x20000c84
 8006094:	20000c60 	.word	0x20000c60
 8006098:	20000c14 	.word	0x20000c14
 800609c:	20000c18 	.word	0x20000c18
 80060a0:	20000c74 	.word	0x20000c74
 80060a4:	20000c7c 	.word	0x20000c7c
 80060a8:	20000c64 	.word	0x20000c64
 80060ac:	20000b60 	.word	0x20000b60
 80060b0:	20000b5c 	.word	0x20000b5c
 80060b4:	20000c6c 	.word	0x20000c6c
 80060b8:	20000c70 	.word	0x20000c70

080060bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060c2:	4b29      	ldr	r3, [pc, #164]	; (8006168 <vTaskSwitchContext+0xac>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060ca:	4b28      	ldr	r3, [pc, #160]	; (800616c <vTaskSwitchContext+0xb0>)
 80060cc:	2201      	movs	r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060d0:	e044      	b.n	800615c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80060d2:	4b26      	ldr	r3, [pc, #152]	; (800616c <vTaskSwitchContext+0xb0>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80060d8:	4b25      	ldr	r3, [pc, #148]	; (8006170 <vTaskSwitchContext+0xb4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	fab3 f383 	clz	r3, r3
 80060e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80060e6:	7afb      	ldrb	r3, [r7, #11]
 80060e8:	f1c3 031f 	rsb	r3, r3, #31
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	4921      	ldr	r1, [pc, #132]	; (8006174 <vTaskSwitchContext+0xb8>)
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	607b      	str	r3, [r7, #4]
}
 8006114:	bf00      	nop
 8006116:	e7fe      	b.n	8006116 <vTaskSwitchContext+0x5a>
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4a14      	ldr	r2, [pc, #80]	; (8006174 <vTaskSwitchContext+0xb8>)
 8006124:	4413      	add	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3308      	adds	r3, #8
 800613a:	429a      	cmp	r2, r3
 800613c:	d104      	bne.n	8006148 <vTaskSwitchContext+0x8c>
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	605a      	str	r2, [r3, #4]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <vTaskSwitchContext+0xbc>)
 8006150:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <vTaskSwitchContext+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	334c      	adds	r3, #76	; 0x4c
 8006158:	4a08      	ldr	r2, [pc, #32]	; (800617c <vTaskSwitchContext+0xc0>)
 800615a:	6013      	str	r3, [r2, #0]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000c84 	.word	0x20000c84
 800616c:	20000c70 	.word	0x20000c70
 8006170:	20000c64 	.word	0x20000c64
 8006174:	20000b60 	.word	0x20000b60
 8006178:	20000b5c 	.word	0x20000b5c
 800617c:	2000005c 	.word	0x2000005c

08006180 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006188:	f000 f852 	bl	8006230 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <prvIdleTask+0x28>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d9f9      	bls.n	8006188 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <prvIdleTask+0x2c>)
 8006196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061a4:	e7f0      	b.n	8006188 <prvIdleTask+0x8>
 80061a6:	bf00      	nop
 80061a8:	20000b60 	.word	0x20000b60
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	e00c      	b.n	80061d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4a12      	ldr	r2, [pc, #72]	; (8006210 <prvInitialiseTaskLists+0x60>)
 80061c8:	4413      	add	r3, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff f8f8 	bl	80053c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3301      	adds	r3, #1
 80061d4:	607b      	str	r3, [r7, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b06      	cmp	r3, #6
 80061da:	d9ef      	bls.n	80061bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061dc:	480d      	ldr	r0, [pc, #52]	; (8006214 <prvInitialiseTaskLists+0x64>)
 80061de:	f7ff f8ef 	bl	80053c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061e2:	480d      	ldr	r0, [pc, #52]	; (8006218 <prvInitialiseTaskLists+0x68>)
 80061e4:	f7ff f8ec 	bl	80053c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061e8:	480c      	ldr	r0, [pc, #48]	; (800621c <prvInitialiseTaskLists+0x6c>)
 80061ea:	f7ff f8e9 	bl	80053c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061ee:	480c      	ldr	r0, [pc, #48]	; (8006220 <prvInitialiseTaskLists+0x70>)
 80061f0:	f7ff f8e6 	bl	80053c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061f4:	480b      	ldr	r0, [pc, #44]	; (8006224 <prvInitialiseTaskLists+0x74>)
 80061f6:	f7ff f8e3 	bl	80053c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <prvInitialiseTaskLists+0x78>)
 80061fc:	4a05      	ldr	r2, [pc, #20]	; (8006214 <prvInitialiseTaskLists+0x64>)
 80061fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006200:	4b0a      	ldr	r3, [pc, #40]	; (800622c <prvInitialiseTaskLists+0x7c>)
 8006202:	4a05      	ldr	r2, [pc, #20]	; (8006218 <prvInitialiseTaskLists+0x68>)
 8006204:	601a      	str	r2, [r3, #0]
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000b60 	.word	0x20000b60
 8006214:	20000bec 	.word	0x20000bec
 8006218:	20000c00 	.word	0x20000c00
 800621c:	20000c1c 	.word	0x20000c1c
 8006220:	20000c30 	.word	0x20000c30
 8006224:	20000c48 	.word	0x20000c48
 8006228:	20000c14 	.word	0x20000c14
 800622c:	20000c18 	.word	0x20000c18

08006230 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006236:	e019      	b.n	800626c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006238:	f000 fa38 	bl	80066ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <prvCheckTasksWaitingTermination+0x50>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff f93f 	bl	80054cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800624e:	4b0d      	ldr	r3, [pc, #52]	; (8006284 <prvCheckTasksWaitingTermination+0x54>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3b01      	subs	r3, #1
 8006254:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <prvCheckTasksWaitingTermination+0x54>)
 8006256:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006258:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <prvCheckTasksWaitingTermination+0x58>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a0a      	ldr	r2, [pc, #40]	; (8006288 <prvCheckTasksWaitingTermination+0x58>)
 8006260:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006262:	f000 fa53 	bl	800670c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f810 	bl	800628c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <prvCheckTasksWaitingTermination+0x58>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e1      	bne.n	8006238 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000c30 	.word	0x20000c30
 8006284:	20000c5c 	.word	0x20000c5c
 8006288:	20000c44 	.word	0x20000c44

0800628c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	334c      	adds	r3, #76	; 0x4c
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fce7 	bl	8006c6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d108      	bne.n	80062ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fbc1 	bl	8006a34 <vPortFree>
				vPortFree( pxTCB );
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fbbe 	bl	8006a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062b8:	e018      	b.n	80062ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d103      	bne.n	80062cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fbb5 	bl	8006a34 <vPortFree>
	}
 80062ca:	e00f      	b.n	80062ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d00a      	beq.n	80062ec <prvDeleteTCB+0x60>
	__asm volatile
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	60fb      	str	r3, [r7, #12]
}
 80062e8:	bf00      	nop
 80062ea:	e7fe      	b.n	80062ea <prvDeleteTCB+0x5e>
	}
 80062ec:	bf00      	nop
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <prvResetNextTaskUnblockTime+0x40>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <prvResetNextTaskUnblockTime+0x14>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <prvResetNextTaskUnblockTime+0x16>
 8006308:	2300      	movs	r3, #0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <prvResetNextTaskUnblockTime+0x44>)
 8006310:	f04f 32ff 	mov.w	r2, #4294967295
 8006314:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006316:	e008      	b.n	800632a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006318:	4b06      	ldr	r3, [pc, #24]	; (8006334 <prvResetNextTaskUnblockTime+0x40>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	4a04      	ldr	r2, [pc, #16]	; (8006338 <prvResetNextTaskUnblockTime+0x44>)
 8006328:	6013      	str	r3, [r2, #0]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr
 8006334:	20000c14 	.word	0x20000c14
 8006338:	20000c7c 	.word	0x20000c7c

0800633c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800634a:	f000 f9af 	bl	80066ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800634e:	4b29      	ldr	r3, [pc, #164]	; (80063f4 <xTaskNotifyWait+0xb8>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d01c      	beq.n	8006396 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <xTaskNotifyWait+0xb8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	43d2      	mvns	r2, r2
 8006368:	400a      	ands	r2, r1
 800636a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800636e:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <xTaskNotifyWait+0xb8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00b      	beq.n	8006396 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800637e:	2101      	movs	r1, #1
 8006380:	6838      	ldr	r0, [r7, #0]
 8006382:	f000 f83b 	bl	80063fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006386:	4b1c      	ldr	r3, [pc, #112]	; (80063f8 <xTaskNotifyWait+0xbc>)
 8006388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006396:	f000 f9b9 	bl	800670c <vPortExitCritical>

		taskENTER_CRITICAL();
 800639a:	f000 f987 	bl	80066ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80063a4:	4b13      	ldr	r3, [pc, #76]	; (80063f4 <xTaskNotifyWait+0xb8>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80063b0:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <xTaskNotifyWait+0xb8>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d002      	beq.n	80063c4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e00a      	b.n	80063da <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <xTaskNotifyWait+0xb8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	43d2      	mvns	r2, r2
 80063d0:	400a      	ands	r2, r1
 80063d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				xReturn = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <xTaskNotifyWait+0xb8>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 80063e4:	f000 f992 	bl	800670c <vPortExitCritical>

		return xReturn;
 80063e8:	697b      	ldr	r3, [r7, #20]
	}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000b5c 	.word	0x20000b5c
 80063f8:	e000ed04 	.word	0xe000ed04

080063fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006406:	4b29      	ldr	r3, [pc, #164]	; (80064ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800640c:	4b28      	ldr	r3, [pc, #160]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff f85a 	bl	80054cc <uxListRemove>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800641e:	4b24      	ldr	r3, [pc, #144]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	2201      	movs	r2, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43da      	mvns	r2, r3
 800642c:	4b21      	ldr	r3, [pc, #132]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4013      	ands	r3, r2
 8006432:	4a20      	ldr	r2, [pc, #128]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006434:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d10a      	bne.n	8006454 <prvAddCurrentTaskToDelayedList+0x58>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006444:	4b1a      	ldr	r3, [pc, #104]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	481a      	ldr	r0, [pc, #104]	; (80064b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800644e:	f7fe ffe2 	bl	8005416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006452:	e026      	b.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006464:	68ba      	ldr	r2, [r7, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	429a      	cmp	r2, r3
 800646a:	d209      	bcs.n	8006480 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646c:	4b13      	ldr	r3, [pc, #76]	; (80064bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3304      	adds	r3, #4
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f7fe ffef 	bl	800545c <vListInsert>
}
 800647e:	e010      	b.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	4b0a      	ldr	r3, [pc, #40]	; (80064b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3304      	adds	r3, #4
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7fe ffe5 	bl	800545c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d202      	bcs.n	80064a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800649c:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	6013      	str	r3, [r2, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000c60 	.word	0x20000c60
 80064b0:	20000b5c 	.word	0x20000b5c
 80064b4:	20000c64 	.word	0x20000c64
 80064b8:	20000c48 	.word	0x20000c48
 80064bc:	20000c18 	.word	0x20000c18
 80064c0:	20000c14 	.word	0x20000c14
 80064c4:	20000c7c 	.word	0x20000c7c

080064c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3b04      	subs	r3, #4
 80064d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80064e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3b04      	subs	r3, #4
 80064f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064f8:	4a08      	ldr	r2, [pc, #32]	; (800651c <pxPortInitialiseStack+0x54>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3b14      	subs	r3, #20
 8006502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3b20      	subs	r3, #32
 800650e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr
 800651c:	08006521 	.word	0x08006521

08006520 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006526:	2300      	movs	r3, #0
 8006528:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800652a:	4b12      	ldr	r3, [pc, #72]	; (8006574 <prvTaskExitError+0x54>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d00a      	beq.n	800654a <prvTaskExitError+0x2a>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	60fb      	str	r3, [r7, #12]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <prvTaskExitError+0x28>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60bb      	str	r3, [r7, #8]
}
 800655c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800655e:	bf00      	nop
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0fc      	beq.n	8006560 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2000000c 	.word	0x2000000c
	...

08006580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	; (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	f04e 0e0d 	orr.w	lr, lr, #13
 800659e:	4770      	bx	lr

080065a0 <pxCurrentTCBConst2>:
 80065a0:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80065a8:	4806      	ldr	r0, [pc, #24]	; (80065c4 <prvPortStartFirstTask+0x1c>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	b662      	cpsie	i
 80065b4:	b661      	cpsie	f
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	df00      	svc	0
 80065c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed08 	.word	0xe000ed08

080065c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ce:	4b32      	ldr	r3, [pc, #200]	; (8006698 <xPortStartScheduler+0xd0>)
 80065d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b2a      	ldr	r3, [pc, #168]	; (800669c <xPortStartScheduler+0xd4>)
 80065f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065f6:	4b2a      	ldr	r3, [pc, #168]	; (80066a0 <xPortStartScheduler+0xd8>)
 80065f8:	2207      	movs	r2, #7
 80065fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065fc:	e009      	b.n	8006612 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80065fe:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3b01      	subs	r3, #1
 8006604:	4a26      	ldr	r2, [pc, #152]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006606:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	b2db      	uxtb	r3, r3
 8006610:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d0ef      	beq.n	80065fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1c3 0307 	rsb	r3, r3, #7
 8006626:	2b04      	cmp	r3, #4
 8006628:	d00a      	beq.n	8006640 <xPortStartScheduler+0x78>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	60bb      	str	r3, [r7, #8]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	4a16      	ldr	r2, [pc, #88]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006648:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <xPortStartScheduler+0xd8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006652:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <xPortStartScheduler+0xd8>)
 8006654:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	b2da      	uxtb	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <xPortStartScheduler+0xdc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <xPortStartScheduler+0xdc>)
 8006664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <xPortStartScheduler+0xdc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <xPortStartScheduler+0xdc>)
 8006670:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006674:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006676:	f000 f8b9 	bl	80067ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800667a:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <xPortStartScheduler+0xe0>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006680:	f7ff ff92 	bl	80065a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006684:	f7ff fd1a 	bl	80060bc <vTaskSwitchContext>
	prvTaskExitError();
 8006688:	f7ff ff4a 	bl	8006520 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	e000e400 	.word	0xe000e400
 800669c:	20000c88 	.word	0x20000c88
 80066a0:	20000c8c 	.word	0x20000c8c
 80066a4:	e000ed20 	.word	0xe000ed20
 80066a8:	2000000c 	.word	0x2000000c

080066ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	607b      	str	r3, [r7, #4]
}
 80066c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <vPortEnterCritical+0x58>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <vPortEnterCritical+0x58>)
 80066ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <vPortEnterCritical+0x58>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10f      	bne.n	80066f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <vPortEnterCritical+0x5c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	603b      	str	r3, [r7, #0]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <vPortEnterCritical+0x4a>
	}
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	2000000c 	.word	0x2000000c
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006712:	4b11      	ldr	r3, [pc, #68]	; (8006758 <vPortExitCritical+0x4c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <vPortExitCritical+0x24>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	607b      	str	r3, [r7, #4]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006730:	4b09      	ldr	r3, [pc, #36]	; (8006758 <vPortExitCritical+0x4c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3b01      	subs	r3, #1
 8006736:	4a08      	ldr	r2, [pc, #32]	; (8006758 <vPortExitCritical+0x4c>)
 8006738:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <vPortExitCritical+0x4c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <vPortExitCritical+0x42>
 8006742:	2300      	movs	r3, #0
 8006744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	f383 8811 	msr	BASEPRI, r3
}
 800674c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr
 8006758:	2000000c 	.word	0x2000000c
 800675c:	00000000 	.word	0x00000000

08006760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006760:	f3ef 8009 	mrs	r0, PSP
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <pxCurrentTCBConst>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006770:	6010      	str	r0, [r2, #0]
 8006772:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006776:	f04f 0050 	mov.w	r0, #80	; 0x50
 800677a:	f380 8811 	msr	BASEPRI, r0
 800677e:	f7ff fc9d 	bl	80060bc <vTaskSwitchContext>
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800678e:	6819      	ldr	r1, [r3, #0]
 8006790:	6808      	ldr	r0, [r1, #0]
 8006792:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006796:	f380 8809 	msr	PSP, r0
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	4770      	bx	lr

080067a0 <pxCurrentTCBConst>:
 80067a0:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
}
 80067c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f7ff fbbd 	bl	8005f40 <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <SysTick_Handler+0x40>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
}
 80067de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <vPortSetupTimerInterrupt+0x30>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <vPortSetupTimerInterrupt+0x34>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <vPortSetupTimerInterrupt+0x38>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a09      	ldr	r2, [pc, #36]	; (8006828 <vPortSetupTimerInterrupt+0x3c>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	4a08      	ldr	r2, [pc, #32]	; (800682c <vPortSetupTimerInterrupt+0x40>)
 800680a:	3b01      	subs	r3, #1
 800680c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <vPortSetupTimerInterrupt+0x30>)
 8006810:	2207      	movs	r2, #7
 8006812:	601a      	str	r2, [r3, #0]
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	bc80      	pop	{r7}
 800681a:	4770      	bx	lr
 800681c:	e000e010 	.word	0xe000e010
 8006820:	e000e018 	.word	0xe000e018
 8006824:	20000000 	.word	0x20000000
 8006828:	10624dd3 	.word	0x10624dd3
 800682c:	e000e014 	.word	0xe000e014

08006830 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006836:	f3ef 8305 	mrs	r3, IPSR
 800683a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b0f      	cmp	r3, #15
 8006840:	d914      	bls.n	800686c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006842:	4a16      	ldr	r2, [pc, #88]	; (800689c <vPortValidateInterruptPriority+0x6c>)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800684c:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <vPortValidateInterruptPriority+0x70>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	7afa      	ldrb	r2, [r7, #11]
 8006852:	429a      	cmp	r2, r3
 8006854:	d20a      	bcs.n	800686c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	607b      	str	r3, [r7, #4]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <vPortValidateInterruptPriority+0x74>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006874:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <vPortValidateInterruptPriority+0x78>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d90a      	bls.n	8006892 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	603b      	str	r3, [r7, #0]
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <vPortValidateInterruptPriority+0x60>
	}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	bc80      	pop	{r7}
 800689a:	4770      	bx	lr
 800689c:	e000e3f0 	.word	0xe000e3f0
 80068a0:	20000c88 	.word	0x20000c88
 80068a4:	e000ed0c 	.word	0xe000ed0c
 80068a8:	20000c8c 	.word	0x20000c8c

080068ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08a      	sub	sp, #40	; 0x28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80068b8:	f7ff fa8a 	bl	8005dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80068bc:	4b58      	ldr	r3, [pc, #352]	; (8006a20 <pvPortMalloc+0x174>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80068c4:	f000 f910 	bl	8006ae8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068c8:	4b56      	ldr	r3, [pc, #344]	; (8006a24 <pvPortMalloc+0x178>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 808e 	bne.w	80069f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01d      	beq.n	8006918 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80068dc:	2208      	movs	r2, #8
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d014      	beq.n	8006918 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f023 0307 	bic.w	r3, r3, #7
 80068f4:	3308      	adds	r3, #8
 80068f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <pvPortMalloc+0x6c>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	617b      	str	r3, [r7, #20]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d069      	beq.n	80069f2 <pvPortMalloc+0x146>
 800691e:	4b42      	ldr	r3, [pc, #264]	; (8006a28 <pvPortMalloc+0x17c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	d864      	bhi.n	80069f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006928:	4b40      	ldr	r3, [pc, #256]	; (8006a2c <pvPortMalloc+0x180>)
 800692a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800692c:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <pvPortMalloc+0x180>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006932:	e004      	b.n	800693e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d903      	bls.n	8006950 <pvPortMalloc+0xa4>
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f1      	bne.n	8006934 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006950:	4b33      	ldr	r3, [pc, #204]	; (8006a20 <pvPortMalloc+0x174>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	429a      	cmp	r2, r3
 8006958:	d04b      	beq.n	80069f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2208      	movs	r2, #8
 8006960:	4413      	add	r3, r2
 8006962:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	2308      	movs	r3, #8
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	429a      	cmp	r2, r3
 800697a:	d91f      	bls.n	80069bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800697c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <pvPortMalloc+0xf8>
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	613b      	str	r3, [r7, #16]
}
 80069a0:	bf00      	nop
 80069a2:	e7fe      	b.n	80069a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	1ad2      	subs	r2, r2, r3
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80069b6:	69b8      	ldr	r0, [r7, #24]
 80069b8:	f000 f8f8 	bl	8006bac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80069bc:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <pvPortMalloc+0x17c>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	4a18      	ldr	r2, [pc, #96]	; (8006a28 <pvPortMalloc+0x17c>)
 80069c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <pvPortMalloc+0x17c>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <pvPortMalloc+0x184>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d203      	bcs.n	80069de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <pvPortMalloc+0x17c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <pvPortMalloc+0x184>)
 80069dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	4b10      	ldr	r3, [pc, #64]	; (8006a24 <pvPortMalloc+0x178>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069f2:	f7ff f9fb 	bl	8005dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <pvPortMalloc+0x16a>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <pvPortMalloc+0x168>
	return pvReturn;
 8006a16:	69fb      	ldr	r3, [r7, #28]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3728      	adds	r7, #40	; 0x28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20001898 	.word	0x20001898
 8006a24:	200018a4 	.word	0x200018a4
 8006a28:	2000189c 	.word	0x2000189c
 8006a2c:	20001890 	.word	0x20001890
 8006a30:	200018a0 	.word	0x200018a0

08006a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d048      	beq.n	8006ad8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a46:	2308      	movs	r3, #8
 8006a48:	425b      	negs	r3, r3
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <vPortFree+0xac>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <vPortFree+0x44>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60fb      	str	r3, [r7, #12]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <vPortFree+0x62>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	60bb      	str	r3, [r7, #8]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	4b11      	ldr	r3, [pc, #68]	; (8006ae0 <vPortFree+0xac>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d019      	beq.n	8006ad8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d115      	bne.n	8006ad8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	4b0b      	ldr	r3, [pc, #44]	; (8006ae0 <vPortFree+0xac>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006abc:	f7ff f988 	bl	8005dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <vPortFree+0xb0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4413      	add	r3, r2
 8006aca:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <vPortFree+0xb0>)
 8006acc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ace:	6938      	ldr	r0, [r7, #16]
 8006ad0:	f000 f86c 	bl	8006bac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ad4:	f7ff f98a 	bl	8005dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ad8:	bf00      	nop
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200018a4 	.word	0x200018a4
 8006ae4:	2000189c 	.word	0x2000189c

08006ae8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006aee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006af2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006af4:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <prvHeapInit+0xac>)
 8006af6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3307      	adds	r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0307 	bic.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <prvHeapInit+0xac>)
 8006b18:	4413      	add	r3, r2
 8006b1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b20:	4a1d      	ldr	r2, [pc, #116]	; (8006b98 <prvHeapInit+0xb0>)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b26:	4b1c      	ldr	r3, [pc, #112]	; (8006b98 <prvHeapInit+0xb0>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b34:	2208      	movs	r2, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0307 	bic.w	r3, r3, #7
 8006b42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <prvHeapInit+0xb4>)
 8006b48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b4a:	4b14      	ldr	r3, [pc, #80]	; (8006b9c <prvHeapInit+0xb4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b52:	4b12      	ldr	r3, [pc, #72]	; (8006b9c <prvHeapInit+0xb4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b68:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <prvHeapInit+0xb4>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <prvHeapInit+0xb8>)
 8006b76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <prvHeapInit+0xbc>)
 8006b7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <prvHeapInit+0xc0>)
 8006b82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000c90 	.word	0x20000c90
 8006b98:	20001890 	.word	0x20001890
 8006b9c:	20001898 	.word	0x20001898
 8006ba0:	200018a0 	.word	0x200018a0
 8006ba4:	2000189c 	.word	0x2000189c
 8006ba8:	200018a4 	.word	0x200018a4

08006bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bb4:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <prvInsertBlockIntoFreeList+0xa8>)
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	e002      	b.n	8006bc0 <prvInsertBlockIntoFreeList+0x14>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d8f7      	bhi.n	8006bba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d108      	bne.n	8006bee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	441a      	add	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	441a      	add	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d118      	bne.n	8006c34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <prvInsertBlockIntoFreeList+0xac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d00d      	beq.n	8006c2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	441a      	add	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e008      	b.n	8006c3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c2a:	4b0b      	ldr	r3, [pc, #44]	; (8006c58 <prvInsertBlockIntoFreeList+0xac>)
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	e003      	b.n	8006c3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d002      	beq.n	8006c4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4a:	bf00      	nop
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr
 8006c54:	20001890 	.word	0x20001890
 8006c58:	20001898 	.word	0x20001898

08006c5c <memset>:
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	4402      	add	r2, r0
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d100      	bne.n	8006c66 <memset+0xa>
 8006c64:	4770      	bx	lr
 8006c66:	f803 1b01 	strb.w	r1, [r3], #1
 8006c6a:	e7f9      	b.n	8006c60 <memset+0x4>

08006c6c <_reclaim_reent>:
 8006c6c:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <_reclaim_reent+0xa8>)
 8006c6e:	b570      	push	{r4, r5, r6, lr}
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4604      	mov	r4, r0
 8006c74:	4283      	cmp	r3, r0
 8006c76:	d04b      	beq.n	8006d10 <_reclaim_reent+0xa4>
 8006c78:	69c3      	ldr	r3, [r0, #28]
 8006c7a:	b143      	cbz	r3, 8006c8e <_reclaim_reent+0x22>
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d144      	bne.n	8006d0c <_reclaim_reent+0xa0>
 8006c82:	69e3      	ldr	r3, [r4, #28]
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	b111      	cbz	r1, 8006c8e <_reclaim_reent+0x22>
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 f86b 	bl	8006d64 <_free_r>
 8006c8e:	6961      	ldr	r1, [r4, #20]
 8006c90:	b111      	cbz	r1, 8006c98 <_reclaim_reent+0x2c>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f866 	bl	8006d64 <_free_r>
 8006c98:	69e1      	ldr	r1, [r4, #28]
 8006c9a:	b111      	cbz	r1, 8006ca2 <_reclaim_reent+0x36>
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 f861 	bl	8006d64 <_free_r>
 8006ca2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006ca4:	b111      	cbz	r1, 8006cac <_reclaim_reent+0x40>
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 f85c 	bl	8006d64 <_free_r>
 8006cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cae:	b111      	cbz	r1, 8006cb6 <_reclaim_reent+0x4a>
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 f857 	bl	8006d64 <_free_r>
 8006cb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006cb8:	b111      	cbz	r1, 8006cc0 <_reclaim_reent+0x54>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 f852 	bl	8006d64 <_free_r>
 8006cc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cc2:	b111      	cbz	r1, 8006cca <_reclaim_reent+0x5e>
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 f84d 	bl	8006d64 <_free_r>
 8006cca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006ccc:	b111      	cbz	r1, 8006cd4 <_reclaim_reent+0x68>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 f848 	bl	8006d64 <_free_r>
 8006cd4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cd6:	b111      	cbz	r1, 8006cde <_reclaim_reent+0x72>
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f843 	bl	8006d64 <_free_r>
 8006cde:	6a23      	ldr	r3, [r4, #32]
 8006ce0:	b1b3      	cbz	r3, 8006d10 <_reclaim_reent+0xa4>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ce8:	4718      	bx	r3
 8006cea:	5949      	ldr	r1, [r1, r5]
 8006cec:	b941      	cbnz	r1, 8006d00 <_reclaim_reent+0x94>
 8006cee:	3504      	adds	r5, #4
 8006cf0:	69e3      	ldr	r3, [r4, #28]
 8006cf2:	2d80      	cmp	r5, #128	; 0x80
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	d1f8      	bne.n	8006cea <_reclaim_reent+0x7e>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f833 	bl	8006d64 <_free_r>
 8006cfe:	e7c0      	b.n	8006c82 <_reclaim_reent+0x16>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f82e 	bl	8006d64 <_free_r>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	e7ef      	b.n	8006cec <_reclaim_reent+0x80>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	e7ef      	b.n	8006cf0 <_reclaim_reent+0x84>
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	bf00      	nop
 8006d14:	2000005c 	.word	0x2000005c

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	4d0c      	ldr	r5, [pc, #48]	; (8006d50 <__libc_init_array+0x38>)
 8006d1e:	4c0d      	ldr	r4, [pc, #52]	; (8006d54 <__libc_init_array+0x3c>)
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	f000 f870 	bl	8006e0c <_init>
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	4d0a      	ldr	r5, [pc, #40]	; (8006d58 <__libc_init_array+0x40>)
 8006d30:	4c0a      	ldr	r4, [pc, #40]	; (8006d5c <__libc_init_array+0x44>)
 8006d32:	1b64      	subs	r4, r4, r5
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d40:	4798      	blx	r3
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4a:	4798      	blx	r3
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08006efc 	.word	0x08006efc
 8006d54:	08006efc 	.word	0x08006efc
 8006d58:	08006efc 	.word	0x08006efc
 8006d5c:	08006f00 	.word	0x08006f00

08006d60 <__retarget_lock_acquire_recursive>:
 8006d60:	4770      	bx	lr

08006d62 <__retarget_lock_release_recursive>:
 8006d62:	4770      	bx	lr

08006d64 <_free_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4605      	mov	r5, r0
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	d040      	beq.n	8006dee <_free_r+0x8a>
 8006d6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d70:	1f0c      	subs	r4, r1, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfb8      	it	lt
 8006d76:	18e4      	addlt	r4, r4, r3
 8006d78:	f000 f83c 	bl	8006df4 <__malloc_lock>
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	; (8006df0 <_free_r+0x8c>)
 8006d7e:	6813      	ldr	r3, [r2, #0]
 8006d80:	b933      	cbnz	r3, 8006d90 <_free_r+0x2c>
 8006d82:	6063      	str	r3, [r4, #4]
 8006d84:	6014      	str	r4, [r2, #0]
 8006d86:	4628      	mov	r0, r5
 8006d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d8c:	f000 b838 	b.w	8006e00 <__malloc_unlock>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d908      	bls.n	8006da6 <_free_r+0x42>
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	1821      	adds	r1, r4, r0
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	bf01      	itttt	eq
 8006d9c:	6819      	ldreq	r1, [r3, #0]
 8006d9e:	685b      	ldreq	r3, [r3, #4]
 8006da0:	1809      	addeq	r1, r1, r0
 8006da2:	6021      	streq	r1, [r4, #0]
 8006da4:	e7ed      	b.n	8006d82 <_free_r+0x1e>
 8006da6:	461a      	mov	r2, r3
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	b10b      	cbz	r3, 8006db0 <_free_r+0x4c>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d9fa      	bls.n	8006da6 <_free_r+0x42>
 8006db0:	6811      	ldr	r1, [r2, #0]
 8006db2:	1850      	adds	r0, r2, r1
 8006db4:	42a0      	cmp	r0, r4
 8006db6:	d10b      	bne.n	8006dd0 <_free_r+0x6c>
 8006db8:	6820      	ldr	r0, [r4, #0]
 8006dba:	4401      	add	r1, r0
 8006dbc:	1850      	adds	r0, r2, r1
 8006dbe:	4283      	cmp	r3, r0
 8006dc0:	6011      	str	r1, [r2, #0]
 8006dc2:	d1e0      	bne.n	8006d86 <_free_r+0x22>
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4408      	add	r0, r1
 8006dca:	6010      	str	r0, [r2, #0]
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	e7da      	b.n	8006d86 <_free_r+0x22>
 8006dd0:	d902      	bls.n	8006dd8 <_free_r+0x74>
 8006dd2:	230c      	movs	r3, #12
 8006dd4:	602b      	str	r3, [r5, #0]
 8006dd6:	e7d6      	b.n	8006d86 <_free_r+0x22>
 8006dd8:	6820      	ldr	r0, [r4, #0]
 8006dda:	1821      	adds	r1, r4, r0
 8006ddc:	428b      	cmp	r3, r1
 8006dde:	bf01      	itttt	eq
 8006de0:	6819      	ldreq	r1, [r3, #0]
 8006de2:	685b      	ldreq	r3, [r3, #4]
 8006de4:	1809      	addeq	r1, r1, r0
 8006de6:	6021      	streq	r1, [r4, #0]
 8006de8:	6063      	str	r3, [r4, #4]
 8006dea:	6054      	str	r4, [r2, #4]
 8006dec:	e7cb      	b.n	8006d86 <_free_r+0x22>
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	200019e4 	.word	0x200019e4

08006df4 <__malloc_lock>:
 8006df4:	4801      	ldr	r0, [pc, #4]	; (8006dfc <__malloc_lock+0x8>)
 8006df6:	f7ff bfb3 	b.w	8006d60 <__retarget_lock_acquire_recursive>
 8006dfa:	bf00      	nop
 8006dfc:	200019e0 	.word	0x200019e0

08006e00 <__malloc_unlock>:
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <__malloc_unlock+0x8>)
 8006e02:	f7ff bfae 	b.w	8006d62 <__retarget_lock_release_recursive>
 8006e06:	bf00      	nop
 8006e08:	200019e0 	.word	0x200019e0

08006e0c <_init>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr

08006e18 <_fini>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr
